# Experiment combinator to run the same experiment several times.
#
# Copyright (C) 2016--2018 Simon Dobson
# 
# Licensed under the GNU General Public Licence v.2.0
#

from epyc import *


class RepeatedExperiment(ExperimentCombinator):
    '''A experiment combinator that takes a "base" experiment and runs it
    several times. This means you can define a single experiment separate
    from its repeating logic.

    When run, a repeated experiment runs a number of repetitions of the underlying
    experiment at the same point in the parameter space. The result of the
    repeated experiment is the list of results from the underlying experiment.
    If the underlying experiment itself returns a list of results, these are all
    flattened into a single list.'''

    # Extra metadata
    REPETITIONS = 'repetitions'   #: Metadata element for number of repetitions performed


    def __init__( self, ex, N ):
        '''Create a repeated version of the given experiment.

        :param ex: the underlying experiment
        :param N: the number of repetitions to perform'''
        super(RepeatedExperiment, self).__init__(ex)
        self._N = N

    def repetitions( self ):
        '''Return the number of repetitions of the underlying experiment
        we expect to perform.

        :returns: the number of repetitions'''
        return self._N
    
    def do( self, params ):
        '''Perform the number of repetitions we want. The results returned
        will be a list of the results dicts generated by the repeated experiments.
        The metedata for this experiment will include an entry
        :attr:`RepeatedExperiment.REPETITIONS` for the number of
        repetitions that occurred (which will be the length of this list).

        :param params: the parameters to the experiment
        :returns: a list of result dicts'''
        N = self.repetitions()
        e = self.experiment()
        results = []
        for i in xrange(N):
            res = e.run()
            if isinstance(res, list):
                results.extend(res)
            else:
                results.append(res)
        self._metadata[self.REPETITIONS] = N
        return results

    
