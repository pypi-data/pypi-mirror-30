#!/usr/bin/env python

# Install a Folder name Larch to Desktop,
# full of shortcuts (Windows) or Apps (Mac)
# for Anaconda2 Python installs


from __future__ import print_function

import os
import sys
from glob import glob
from larch import get_homedir
import shutil

root = sys.exec_prefix
home = get_homedir()

##  Desktop/Larch folder
top_folder = os.path.join(home, 'Desktop', 'Larch')

if not (os.path.exists(top_folder) and os.path.isdir(top_folder)):
    try:
        os.mkdir(top_folder)
    except:
        pass

if not (os.path.exists(top_folder) and os.path.isdir(top_folder)):
    print("Warning: could not create Desktop Folder name 'Larch'")
    sys.exit(1)
##
## shortcuts/apps to make
##        Name              py script        icon name         description     is GUI App
apps = (('Larch',          'larch',          'larch',      'Larch Command Line', False),
        ('Larch GUI',      'larch_gui',      'larch',      'Larch GUI',       True),
        ('XAS Viewer',     'xas_viewer',     'onecone',    'XAS Analysis',  True),
        ('GSE Mapviewer',  'gse_mapviewer',  'gse_xrfmap', 'GSE XRF Map Viewer',   True),
        ('XRF Display',    'xrfdisplay',     'ptable',     'XRF Display', True),
        ('2D XRD Viewer',  'diFFit2D',       'larch',      '2D XRD Viewer', True),
        ('1D XRD Viewer',  'diFFit1D',       'larch',      '1D XRD Viewer', True),
        )

# fix scripts to use pythonw instead of python on Mac OSX
other_binscripts=('gse_dtcorrect', 'larch_client', 'larch_server',
                  'xrfdisplay', 'xrfdisplay_epics')

mac_script_gui = """#!/bin/bash
## Run X-ray Larch script with Python that created this script

export PYTHONEXECUTABLE={prefix:s}/bin/python
{pyexe:s} {prefix:s}/bin/{script:s}
"""

mac_script_terminal = """#!/bin/bash
## Run X-ray Larch script with Python that created this script

export PYTHONEXECUTABLE={prefix:s}/bin/python

osascript -e 'tell application "Terminal" to do script "'{pyexe:s}\ {prefix:s}/bin/{script:s}'"'
"""

mac_info = """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
  <key>CFBundleGetInfoString</key> <string>{name:s}</string>
  <key>CFBundleName</key> <string>{name:s}</string>
  <key>CFBundleExecutable</key> <string>{name:s}</string>
  <key>CFBundleIconFile</key> <string>{name:s}</string>
  <key>CFBundlePackageType</key> <string>APPL</string>
  </dict>
</plist>
"""

def fix_anacondapy_pythonw(script):
    """fix shebang line for scripts using anaconda python
    to use 'pythonw' instead of 'python'
    """
    # print(" fix anaconda py (%s) for %s" % (sys.prefix, script))
    fname = os.path.join(sys.prefix, 'bin', script)
    with open(fname, 'r') as fh:
        try:
            lines = fh.readlines()
        except IOError:
            lines = ['-']
    firstline= lines[0][:-1].strip()
    if firstline.startswith('#!') and 'python' in firstline:
        firstline = '#!/usr/bin/env pythonw'
        fh = open(fname, 'w')
        fh.write('%s\n' % firstline)
        fh.write("".join(lines[1:]))
        fh.close()

if sys.platform == 'darwin':
    prefix = sys.prefix
    pyexe = sys.executable
    if 'Anaconda' in sys.version:
        pyexe = "{prefix:s}/python.app/Contents/MacOS/python".format(prefix=prefix)

    def make_shortcut(name, script, desc, icon, isgui):
        """create minimal Mac App"""
        if 'Anaconda' in sys.version:
            fix_anacondapy_pythonw(script)
        dest = os.path.join(top_folder, name + '.app')
        if os.path.exists(dest):
            shutil.rmtree(dest)
        os.mkdir(dest)
        os.mkdir(os.path.join(dest, 'Contents'))
        os.mkdir(os.path.join(dest, 'Contents', 'MacOS'))
        os.mkdir(os.path.join(dest, 'Contents', 'Resources'))
        opts = dict(name=name, script=script, prefix=prefix, pyexe=pyexe)

        script_name = os.path.join(dest, 'Contents', 'MacOS', name)
        info_plist = os.path.join(dest, 'Contents', 'Info.plist')

        with open(info_plist, 'w') as fout:
            fout.write(mac_info.format(**opts))

        text = mac_script_terminal
        if isgui:
            text = mac_script_gui

        with open(script_name, 'w') as fout:
            fout.write(text.format(**opts))

        os.chmod(script_name, 493) ## 0755 / octal 755 / rwxr-xr-x


        icon_dest = os.path.join(dest, 'Contents', 'Resources', name + '.icns')
        icon_src  = os.path.join(root, 'share', 'larch', 'icons', icon + '.icns')
        shutil.copy(icon_src, icon_dest)


elif os.name == 'nt':

    from win32com.client import Dispatch
    from win32com.shell import shell

    def make_shortcut(name, script, desc, icon, isgui):
        """create windows shortcut"""
        path   = os.path.join(home, 'Desktop', 'Larch', name) +  '.lnk'
        pyexe  = os.path.join(root, 'python.exe')
        target = os.path.join(root, 'Scripts', script)
        # add several checks for valid ways to run each script, including
        # accounting for Anaconda's automagic renaming and creation of exes.
        target_exe = '%s.exe' % target
        target_bat = '%s.bat' % target
        target_spy = '%s-script.py' % target

        if os.path.exists(target_exe):
            target = target_exe
        elif os.path.exists(target):
            if os.path.exists(target_bat):
                target = target_bat
            else:
                target = "%s %s" % (pyexe, target)
        elif os.path.exists(target_spy):
            target = "%s %s" % (pyexe, target_spy)

        icon = os.path.join(root, 'share', 'larch', 'icons', icon + '.ico')

        shell = Dispatch('WScript.Shell')
        shortcut = shell.CreateShortCut(path)
        shortcut.Targetpath = target
        shortcut.WorkingDirectory = home
        shortcut.WindowStyle = 0
        shortcut.Description = desc
        shortcut.IconLocation = icon
        shortcut.save()


for name, script, icon, desc, isgui  in apps:
    make_shortcut(name, script, desc, icon, isgui)

if sys.platform == 'darwin':
    for script in other_binscripts:
        fix_anacondapy_pythonw(script)
