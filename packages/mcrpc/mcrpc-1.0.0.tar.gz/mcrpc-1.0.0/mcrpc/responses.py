# -*- coding: utf-8 -*-
# WARNING: Autogenerated code. Do not edit manually.


class Getblockchaininfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.difficulty = kwargs["difficulty"]
        self.protocol = kwargs["protocol"]
        self.chainname = kwargs["chainname"]
        self.reindex = kwargs["reindex"]
        self.description = kwargs["description"]
        self.verificationprogress = kwargs["verificationprogress"]
        self.blocks = kwargs["blocks"]
        self.chain = kwargs["chain"]
        self.bestblockhash = kwargs["bestblockhash"]
        self.chainwork = kwargs["chainwork"]
        self.headers = kwargs["headers"]
        self.setupblocks = kwargs["setupblocks"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getmempoolinfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.size = kwargs["size"]
        self.bytes = kwargs["bytes"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Gettxoutsetinfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.height = kwargs["height"]
        self.txouts = kwargs["txouts"]
        self.bytes_serialized = kwargs["bytes_serialized"]
        self.total_amount = kwargs["total_amount"]
        self.bestblock = kwargs["bestblock"]
        self.transactions = kwargs["transactions"]
        self.hash_serialized = kwargs["hash_serialized"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getinfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.protocol = kwargs["protocol"]
        self.relayfee = kwargs["relayfee"]
        self.chainname = kwargs["chainname"]
        self.nodeversion = kwargs["nodeversion"]
        self.port = kwargs["port"]
        self.version = kwargs["version"]
        self.burnaddress = kwargs["burnaddress"]
        self.difficulty = kwargs["difficulty"]
        self.miningpaused = kwargs["miningpaused"]
        self.balance = kwargs["balance"]
        self.proxy = kwargs["proxy"]
        self.incomingpaused = kwargs["incomingpaused"]
        self.walletdbversion = kwargs["walletdbversion"]
        self.setupblocks = kwargs["setupblocks"]
        self.paytxfee = kwargs["paytxfee"]
        self.description = kwargs["description"]
        self.connections = kwargs["connections"]
        self.nodeaddress = kwargs["nodeaddress"]
        self.protocolversion = kwargs["protocolversion"]
        self.errors = kwargs["errors"]
        self.testnet = kwargs["testnet"]
        self.timeoffset = kwargs["timeoffset"]
        self.blocks = kwargs["blocks"]
        self.reindex = kwargs["reindex"]
        self.keypoolsize = kwargs["keypoolsize"]
        self.walletversion = kwargs["walletversion"]
        self.keypoololdest = kwargs["keypoololdest"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getruntimeparams:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.gen = kwargs["gen"]
        self.rescan = kwargs["rescan"]
        self.port = kwargs["port"]
        self.lockadminminerounds = kwargs["lockadminminerounds"]
        self.maxshowndata = kwargs["maxshowndata"]
        self.autocombinesuspend = kwargs["autocombinesuspend"]
        self.autocombinemininputs = kwargs["autocombinemininputs"]
        self.autocombineminconf = kwargs["autocombineminconf"]
        self.hideknownopdrops = kwargs["hideknownopdrops"]
        self.bantx = kwargs["bantx"]
        self.autocombinedelay = kwargs["autocombinedelay"]
        self.handshakelocal = kwargs["handshakelocal"]
        self.txindex = kwargs["txindex"]
        self.v1apicompatible = kwargs["v1apicompatible"]
        self.mineemptyrounds = kwargs["mineemptyrounds"]
        self.autosubscribe = kwargs["autosubscribe"]
        self.miningturnover = kwargs["miningturnover"]
        self.miningrequirespeers = kwargs["miningrequirespeers"]
        self.reindex = kwargs["reindex"]
        self.lockblock = kwargs["lockblock"]
        self.autocombinemaxinputs = kwargs["autocombinemaxinputs"]
        self.genproclimit = kwargs["genproclimit"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getmininginfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.currentblocksize = kwargs["currentblocksize"]
        self.currentblocktx = kwargs["currentblocktx"]
        self.errors = kwargs["errors"]
        self.testnet = kwargs["testnet"]
        self.pooledtx = kwargs["pooledtx"]
        self.generate = kwargs["generate"]
        self.difficulty = kwargs["difficulty"]
        self.networkhashps = kwargs["networkhashps"]
        self.hashespersec = kwargs["hashespersec"]
        self.blocks = kwargs["blocks"]
        self.chain = kwargs["chain"]
        self.genproclimit = kwargs["genproclimit"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getnettotals:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.timemillis = kwargs["timemillis"]
        self.totalbytessent = kwargs["totalbytessent"]
        self.totalbytesrecv = kwargs["totalbytesrecv"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getnetworkinfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.networks = kwargs["networks"]
        self.connections = kwargs["connections"]
        self.relayfee = kwargs["relayfee"]
        self.timeoffset = kwargs["timeoffset"]
        self.subversion = kwargs["subversion"]
        self.version = kwargs["version"]
        self.protocolversion = kwargs["protocolversion"]
        self.localservices = kwargs["localservices"]
        self.localaddresses = kwargs["localaddresses"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False


class Getwalletinfo:
    def __init__(self, **kwargs):
        self._kwargs = kwargs
        self.txcount = kwargs["txcount"]
        self.balance = kwargs["balance"]
        self.utxocount = kwargs["utxocount"]
        self.keypoolsize = kwargs["keypoolsize"]
        self.walletdbversion = kwargs["walletdbversion"]
        self.walletversion = kwargs["walletversion"]
        self.keypoololdest = kwargs["keypoololdest"]

    def as_dict(self):
        return self._kwargs

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self._kwargs == other._kwargs
        else:
            return False

