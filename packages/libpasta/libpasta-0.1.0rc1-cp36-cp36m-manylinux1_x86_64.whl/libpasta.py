# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libpasta')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libpasta')
    _libpasta = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libpasta', [dirname(__file__)])
        except ImportError:
            import _libpasta
            return _libpasta
        try:
            _mod = imp.load_module('_libpasta', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libpasta = swig_import_helper()
    del swig_import_helper
else:
    import _libpasta
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class PrimitiveWrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimitiveWrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimitiveWrapper, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
PrimitiveWrapper_swigregister = _libpasta.PrimitiveWrapper_swigregister
PrimitiveWrapper_swigregister(PrimitiveWrapper)

class Argon2i(PrimitiveWrapper):
    __swig_setmethods__ = {}
    for _s in [PrimitiveWrapper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Argon2i, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveWrapper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Argon2i, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libpasta.new_Argon2i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libpasta.delete_Argon2i
    __del__ = lambda self: None
Argon2i_swigregister = _libpasta.Argon2i_swigregister
Argon2i_swigregister(Argon2i)

class Bcrypt(PrimitiveWrapper):
    __swig_setmethods__ = {}
    for _s in [PrimitiveWrapper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bcrypt, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveWrapper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bcrypt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libpasta.new_Bcrypt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libpasta.delete_Bcrypt
    __del__ = lambda self: None
Bcrypt_swigregister = _libpasta.Bcrypt_swigregister
Bcrypt_swigregister(Bcrypt)

class Scrypt(PrimitiveWrapper):
    __swig_setmethods__ = {}
    for _s in [PrimitiveWrapper]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scrypt, name, value)
    __swig_getmethods__ = {}
    for _s in [PrimitiveWrapper]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Scrypt, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libpasta.new_Scrypt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libpasta.delete_Scrypt
    __del__ = lambda self: None
Scrypt_swigregister = _libpasta.Scrypt_swigregister
Scrypt_swigregister(Scrypt)

class HashUpdate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashUpdate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashUpdate, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Updated = _libpasta.HashUpdate_Updated
    Ok = _libpasta.HashUpdate_Ok
    Failed = _libpasta.HashUpdate_Failed
    __swig_setmethods__["tag"] = _libpasta.HashUpdate_tag_set
    __swig_getmethods__["tag"] = _libpasta.HashUpdate_tag_get
    if _newclass:
        tag = _swig_property(_libpasta.HashUpdate_tag_get, _libpasta.HashUpdate_tag_set)
    __swig_setmethods__["updated"] = _libpasta.HashUpdate_updated_set
    __swig_getmethods__["updated"] = _libpasta.HashUpdate_updated_get
    if _newclass:
        updated = _swig_property(_libpasta.HashUpdate_updated_get, _libpasta.HashUpdate_updated_set)
    __swig_destroy__ = _libpasta.delete_HashUpdate
    __del__ = lambda self: None
HashUpdate_swigregister = _libpasta.HashUpdate_swigregister
HashUpdate_swigregister(HashUpdate)


def migrate_hash(hash):
    return _libpasta.migrate_hash(hash)
migrate_hash = _libpasta.migrate_hash

def verify_password_update_hash(hash, password):
    return _libpasta.verify_password_update_hash(hash, password)
verify_password_update_hash = _libpasta.verify_password_update_hash
class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libpasta.new_Config(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libpasta.delete_Config
    __del__ = lambda self: None

    def with_primitive(self, p):
        return _libpasta.Config_with_primitive(self, p)

    def hash_password(self, password):
        return _libpasta.Config_hash_password(self, password)

    def migrate_hash(self, hash):
        return _libpasta.Config_migrate_hash(self, hash)

    def verify_password(self, hash, password):
        return _libpasta.Config_verify_password(self, hash, password)

    def verify_password_update_hash(self, hash, password):
        return _libpasta.Config_verify_password_update_hash(self, hash, password)
Config_swigregister = _libpasta.Config_swigregister
Config_swigregister(Config)


def hash_password(password):
    return _libpasta.hash_password(password)
hash_password = _libpasta.hash_password

def read_password(prompt):
    return _libpasta.read_password(prompt)
read_password = _libpasta.read_password

def verify_password(hash, password):
    return _libpasta.verify_password(hash, password)
verify_password = _libpasta.verify_password
# This file is compatible with both classic and new-style classes.


