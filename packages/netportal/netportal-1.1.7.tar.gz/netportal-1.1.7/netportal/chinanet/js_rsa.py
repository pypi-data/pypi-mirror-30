#!/usr/bin/python3
"""
RSA Encrypt password with execjs(javascript).
"""

import execjs

js_rsa = """
var RSAUtils=RSAUtils={};var biRadixBase=2;var biRadixBits=16;var bitsPerDigit=biRadixBits;var biRadix=1<<16;var biHalfRadix=biRadix>>>1;var biRadixSquared=biRadix*biRadix;var maxDigitVal=biRadix-1;var maxInteger=9999999999999998;var maxDigits;var ZERO_ARRAY;var bigZero,bigOne;var BigInt=function(a){if(typeof a=="boolean"&&a==true){this.digits=null}else{this.digits=ZERO_ARRAY.slice(0)}this.isNeg=false};RSAUtils.setMaxDigits=function(a){maxDigits=a;ZERO_ARRAY=new Array(maxDigits);for(var b=0;b<ZERO_ARRAY.length;b++)ZERO_ARRAY[b]=0;bigZero=new BigInt();bigOne=new BigInt();bigOne.digits[0]=1};RSAUtils.setMaxDigits(20);var dpl10=15;RSAUtils.biFromNumber=function(i){var a=new BigInt();a.isNeg=i<0;i=Math.abs(i);var j=0;while(i>0){a.digits[j++]=i&maxDigitVal;i=Math.floor(i/biRadix)}return a};var lr10=RSAUtils.biFromNumber(1000000000000000);RSAUtils.biFromDecimal=function(s){var a=s.charAt(0)=='-';var i=a?1:0;var b;while(i<s.length&&s.charAt(i)=='0')++i;if(i==s.length){b=new BigInt()}else{var c=s.length-i;var d=c%dpl10;if(d==0)d=dpl10;b=RSAUtils.biFromNumber(Number(s.substr(i,d)));i+=d;while(i<s.length){b=RSAUtils.biAdd(RSAUtils.biMultiply(b,lr10),RSAUtils.biFromNumber(Number(s.substr(i,dpl10))));i+=dpl10}b.isNeg=a}return b};RSAUtils.biCopy=function(a){var b=new BigInt(true);b.digits=a.digits.slice(0);b.isNeg=a.isNeg;return b};RSAUtils.reverseStr=function(s){var a="";for(var i=s.length-1;i>-1;--i){a+=s.charAt(i)}return a};var hexatrigesimalToChar=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];RSAUtils.biToString=function(x,a){var b=new BigInt();b.digits[0]=a;var c=RSAUtils.biDivideModulo(x,b);var d=hexatrigesimalToChar[c[1].digits[0]];while(RSAUtils.biCompare(c[0],bigZero)==1){c=RSAUtils.biDivideModulo(c[0],b);digit=c[1].digits[0];d+=hexatrigesimalToChar[c[1].digits[0]]}return(x.isNeg?"-":"")+RSAUtils.reverseStr(d)};RSAUtils.biToDecimal=function(x){var b=new BigInt();b.digits[0]=10;var a=RSAUtils.biDivideModulo(x,b);var c=String(a[1].digits[0]);while(RSAUtils.biCompare(a[0],bigZero)==1){a=RSAUtils.biDivideModulo(a[0],b);c+=String(a[1].digits[0])}return(x.isNeg?"-":"")+RSAUtils.reverseStr(c)};var hexToChar=['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];RSAUtils.digitToHex=function(n){var a=0xf;var b="";for(i=0;i<4;++i){b+=hexToChar[n&a];n>>>=4}return RSAUtils.reverseStr(b)};RSAUtils.biToHex=function(x){var a="";var n=RSAUtils.biHighIndex(x);for(var i=RSAUtils.biHighIndex(x);i>-1;--i){a+=RSAUtils.digitToHex(x.digits[i])}return a};RSAUtils.charToHex=function(c){var a=48;var b=a+9;var d=97;var e=d+25;var f=65;var g=65+25;var h;if(c>=a&&c<=b){h=c-a}else if(c>=f&&c<=g){h=10+c-f}else if(c>=d&&c<=e){h=10+c-d}else{h=0}return h};RSAUtils.hexToDigit=function(s){var a=0;var b=Math.min(s.length,4);for(var i=0;i<b;++i){a<<=4;a|=RSAUtils.charToHex(s.charCodeAt(i))}return a};RSAUtils.biFromHex=function(s){var a=new BigInt();var b=s.length;for(var i=b,j=0;i>0;i-=4,++j){a.digits[j]=RSAUtils.hexToDigit(s.substr(Math.max(i-4,0),Math.min(i,4)))}return a};RSAUtils.biFromString=function(s,a){var b=s.charAt(0)=='-';var d=b?1:0;var e=new BigInt();var f=new BigInt();f.digits[0]=1;for(var i=s.length-1;i>=d;i--){var c=s.charCodeAt(i);var g=RSAUtils.charToHex(c);var h=RSAUtils.biMultiplyDigit(f,g);e=RSAUtils.biAdd(e,h);f=RSAUtils.biMultiplyDigit(f,a)}e.isNeg=b;return e};RSAUtils.biDump=function(b){return(b.isNeg?"-":"")+b.digits.join(" ")};RSAUtils.biAdd=function(x,y){var a;if(x.isNeg!=y.isNeg){y.isNeg=!y.isNeg;a=RSAUtils.biSubtract(x,y);y.isNeg=!y.isNeg}else{a=new BigInt();var c=0;var n;for(var i=0;i<x.digits.length;++i){n=x.digits[i]+y.digits[i]+c;a.digits[i]=n%biRadix;c=Number(n>=biRadix)}a.isNeg=x.isNeg}return a};RSAUtils.biSubtract=function(x,y){var a;if(x.isNeg!=y.isNeg){y.isNeg=!y.isNeg;a=RSAUtils.biAdd(x,y);y.isNeg=!y.isNeg}else{a=new BigInt();var n,c;c=0;for(var i=0;i<x.digits.length;++i){n=x.digits[i]-y.digits[i]+c;a.digits[i]=n%biRadix;if(a.digits[i]<0)a.digits[i]+=biRadix;c=0-Number(n<0)}if(c==-1){c=0;for(var i=0;i<x.digits.length;++i){n=0-a.digits[i]+c;a.digits[i]=n%biRadix;if(a.digits[i]<0)a.digits[i]+=biRadix;c=0-Number(n<0)}a.isNeg=!x.isNeg}else{a.isNeg=x.isNeg}}return a};RSAUtils.biHighIndex=function(x){var a=x.digits.length-1;while(a>0&&x.digits[a]==0)--a;return a};RSAUtils.biNumBits=function(x){var n=RSAUtils.biHighIndex(x);var d=x.digits[n];var m=(n+1)*bitsPerDigit;var a;for(a=m;a>m-bitsPerDigit;--a){if((d&0x8000)!=0)break;d<<=1}return a};RSAUtils.biMultiply=function(x,y){var a=new BigInt();var c;var n=RSAUtils.biHighIndex(x);var t=RSAUtils.biHighIndex(y);var u,uv,k;for(var i=0;i<=t;++i){c=0;k=i;for(j=0;j<=n;++j,++k){uv=a.digits[k]+x.digits[j]*y.digits[i]+c;a.digits[k]=uv&maxDigitVal;c=uv>>>biRadixBits}a.digits[i+n+1]=c}a.isNeg=x.isNeg!=y.isNeg;return a};RSAUtils.biMultiplyDigit=function(x,y){var n,c,uv;result=new BigInt();n=RSAUtils.biHighIndex(x);c=0;for(var j=0;j<=n;++j){uv=result.digits[j]+x.digits[j]*y+c;result.digits[j]=uv&maxDigitVal;c=uv>>>biRadixBits}result.digits[1+n]=c;return result};RSAUtils.arrayCopy=function(a,b,c,d,n){var m=Math.min(b+n,a.length);for(var i=b,j=d;i<m;++i,++j){c[j]=a[i]}};var highBitMasks=[0x0000,0x8000,0xC000,0xE000,0xF000,0xF800,0xFC00,0xFE00,0xFF00,0xFF80,0xFFC0,0xFFE0,0xFFF0,0xFFF8,0xFFFC,0xFFFE,0xFFFF];RSAUtils.biShiftLeft=function(x,n){var a=Math.floor(n/bitsPerDigit);var b=new BigInt();RSAUtils.arrayCopy(x.digits,0,b.digits,a,b.digits.length-a);var c=n%bitsPerDigit;var d=bitsPerDigit-c;for(var i=b.digits.length-1,i1=i-1;i>0;--i,--i1){b.digits[i]=((b.digits[i]<<c)&maxDigitVal)|((b.digits[i1]&highBitMasks[c])>>>(d))}b.digits[0]=((b.digits[i]<<c)&maxDigitVal);b.isNeg=x.isNeg;return b};var lowBitMasks=[0x0000,0x0001,0x0003,0x0007,0x000F,0x001F,0x003F,0x007F,0x00FF,0x01FF,0x03FF,0x07FF,0x0FFF,0x1FFF,0x3FFF,0x7FFF,0xFFFF];RSAUtils.biShiftRight=function(x,n){var a=Math.floor(n/bitsPerDigit);var b=new BigInt();RSAUtils.arrayCopy(x.digits,a,b.digits,0,x.digits.length-a);var c=n%bitsPerDigit;var d=bitsPerDigit-c;for(var i=0,i1=i+1;i<b.digits.length-1;++i,++i1){b.digits[i]=(b.digits[i]>>>c)|((b.digits[i1]&lowBitMasks[c])<<d)}b.digits[b.digits.length-1]>>>=c;b.isNeg=x.isNeg;return b};RSAUtils.biMultiplyByRadixPower=function(x,n){var a=new BigInt();RSAUtils.arrayCopy(x.digits,0,a.digits,n,a.digits.length-n);return a};RSAUtils.biDivideByRadixPower=function(x,n){var a=new BigInt();RSAUtils.arrayCopy(x.digits,n,a.digits,0,a.digits.length-n);return a};RSAUtils.biModuloByRadixPower=function(x,n){var a=new BigInt();RSAUtils.arrayCopy(x.digits,0,a.digits,0,n);return a};RSAUtils.biCompare=function(x,y){if(x.isNeg!=y.isNeg){return 1-2*Number(x.isNeg)}for(var i=x.digits.length-1;i>=0;--i){if(x.digits[i]!=y.digits[i]){if(x.isNeg){return 1-2*Number(x.digits[i]>y.digits[i])}else{return 1-2*Number(x.digits[i]<y.digits[i])}}}return 0};RSAUtils.biDivideModulo=function(x,y){var a=RSAUtils.biNumBits(x);var c=RSAUtils.biNumBits(y);var d=y.isNeg;var q,r;if(a<c){if(x.isNeg){q=RSAUtils.biCopy(bigOne);q.isNeg=!y.isNeg;x.isNeg=false;y.isNeg=false;r=biSubtract(y,x);x.isNeg=true;y.isNeg=d}else{q=new BigInt();r=RSAUtils.biCopy(x)}return[q,r]}q=new BigInt();r=x;var t=Math.ceil(c/bitsPerDigit)-1;var e=0;while(y.digits[t]<biHalfRadix){y=RSAUtils.biShiftLeft(y,1);++e;++c;t=Math.ceil(c/bitsPerDigit)-1}r=RSAUtils.biShiftLeft(r,e);a+=e;var n=Math.ceil(a/bitsPerDigit)-1;var b=RSAUtils.biMultiplyByRadixPower(y,n-t);while(RSAUtils.biCompare(r,b)!=-1){++q.digits[n-t];r=RSAUtils.biSubtract(r,b)}for(var i=n;i>t;--i){var f=(i>=r.digits.length)?0:r.digits[i];var g=(i-1>=r.digits.length)?0:r.digits[i-1];var h=(i-2>=r.digits.length)?0:r.digits[i-2];var j=(t>=y.digits.length)?0:y.digits[t];var k=(t-1>=y.digits.length)?0:y.digits[t-1];if(f==j){q.digits[i-t-1]=maxDigitVal}else{q.digits[i-t-1]=Math.floor((f*biRadix+g)/j)}var l=q.digits[i-t-1]*((j*biRadix)+k);var m=(f*biRadixSquared)+((g*biRadix)+h);while(l>m){--q.digits[i-t-1];l=q.digits[i-t-1]*((j*biRadix)|k);m=(f*biRadix*biRadix)+((g*biRadix)+h)}b=RSAUtils.biMultiplyByRadixPower(y,i-t-1);r=RSAUtils.biSubtract(r,RSAUtils.biMultiplyDigit(b,q.digits[i-t-1]));if(r.isNeg){r=RSAUtils.biAdd(r,b);--q.digits[i-t-1]}}r=RSAUtils.biShiftRight(r,e);q.isNeg=x.isNeg!=d;if(x.isNeg){if(d){q=RSAUtils.biAdd(q,bigOne)}else{q=RSAUtils.biSubtract(q,bigOne)}y=RSAUtils.biShiftRight(y,e);r=RSAUtils.biSubtract(y,r)}if(r.digits[0]==0&&RSAUtils.biHighIndex(r)==0)r.isNeg=false;return[q,r]};RSAUtils.biDivide=function(x,y){return RSAUtils.biDivideModulo(x,y)[0]};RSAUtils.biModulo=function(x,y){return RSAUtils.biDivideModulo(x,y)[1]};RSAUtils.biMultiplyMod=function(x,y,m){return RSAUtils.biModulo(RSAUtils.biMultiply(x,y),m)};RSAUtils.biPow=function(x,y){var b=bigOne;var a=x;while(true){if((y&1)!=0)b=RSAUtils.biMultiply(b,a);y>>=1;if(y==0)break;a=RSAUtils.biMultiply(a,a)}return b};RSAUtils.biPowMod=function(x,y,m){var b=bigOne;var a=x;var k=y;while(true){if((k.digits[0]&1)!=0)b=RSAUtils.biMultiplyMod(b,a,m);k=RSAUtils.biShiftRight(k,1);if(k.digits[0]==0&&RSAUtils.biHighIndex(k)==0)break;a=RSAUtils.biMultiplyMod(a,a,m)}return b};BarrettMu=function(m){this.modulus=RSAUtils.biCopy(m);this.k=RSAUtils.biHighIndex(this.modulus)+1;var a=new BigInt();a.digits[2*this.k]=1;this.mu=RSAUtils.biDivide(a,this.modulus);this.bkplus1=new BigInt();this.bkplus1.digits[this.k+1]=1;this.modulo=BarrettMu_modulo;this.multiplyMod=BarrettMu_multiplyMod;this.powMod=BarrettMu_powMod};function BarrettMu_modulo(x){var a=RSAUtils;var b=a.biDivideByRadixPower(x,this.k-1);var c=a.biMultiply(b,this.mu);var d=a.biDivideByRadixPower(c,this.k+1);var e=a.biModuloByRadixPower(x,this.k+1);var f=a.biMultiply(d,this.modulus);var g=a.biModuloByRadixPower(f,this.k+1);var r=a.biSubtract(e,g);if(r.isNeg){r=a.biAdd(r,this.bkplus1)}var h=a.biCompare(r,this.modulus)>=0;while(h){r=a.biSubtract(r,this.modulus);h=a.biCompare(r,this.modulus)>=0}return r}function BarrettMu_multiplyMod(x,y){var a=RSAUtils.biMultiply(x,y);return this.modulo(a)}function BarrettMu_powMod(x,y){var b=new BigInt();b.digits[0]=1;var a=x;var k=y;while(true){if((k.digits[0]&1)!=0)b=this.multiplyMod(b,a);k=RSAUtils.biShiftRight(k,1);if(k.digits[0]==0&&RSAUtils.biHighIndex(k)==0)break;a=this.multiplyMod(a,a)}return b}var RSAKeyPair=function(a,b,c){var d=RSAUtils;this.e=d.biFromHex(a);this.d=d.biFromHex(b);this.m=d.biFromHex(c);this.chunkSize=2*d.biHighIndex(this.m);this.radix=16;this.barrett=new BarrettMu(this.m)};RSAUtils.getKeyPair=function(a,b,c){return new RSAKeyPair(a,b,c)};RSAUtils.encryptedString=function(b,s){var a=[];var c=s.length;var i=0;while(i<c){a[i]=s.charCodeAt(i);i++}while(a.length%b.chunkSize!=0){a[i++]=0}var d=a.length;var e="";var j,k,block;for(i=0;i<d;i+=b.chunkSize){block=new BigInt();j=0;for(k=i;k<i+b.chunkSize;++j){block.digits[j]=a[k++];block.digits[j]+=a[k++]<<8}var f=b.barrett.powMod(block,b.e);var g=b.radix==16?RSAUtils.biToHex(f):RSAUtils.biToString(f,b.radix);e+=g+" "}return e.substring(0,e.length-1)};RSAUtils.setMaxDigits(130);var rsa_getpassword=function(a,b,c){var d=RSAUtils.getKeyPair(a,"",b);var e=RSAUtils.encryptedString(d,c);return e}
"""
def get_rsa_password(password, rsa_e=None, rsa_m=None):
    """
    Encrypt password with RSA.
    
    Args:
        password: You password.
        rsa_e: RSA encrypt argument e.
        rsa_m: RSA encrypt argument m.
    
    Returns:
        Encrypted password.
        
    Raises:
        None.
    """
    js_context = execjs.compile(js_rsa)
    if not rsa_e:
        rsa_e = '10001'
    if not rsa_m:
        rsa_m = 'a8a02b821d52d3d0ca90620c78474b78435423be99da83cc190ab5cb5b9b922a4c8ba6b251e78429757cf11cde119e1eacff46fa3bf3b43ef68ceb29897b7aa6b5b1359fef6f35f32b748dc109fd3d09f3443a2cc3b73e99579f3d0fe6a96ccf6a48bc40056a6cac327d309b93b1d61d6f6e8f4a42fc9540f34f1c4a2e053445'
    return js_context.call("rsa_getpassword",rsa_e,rsa_m, password)
    
if __name__=='__main__':
    r = get_rsa_password("138329")
    print(r)
    if r == "07318fd71038e0add83b7a5b1e4ea1e4abbd4ea2982d5baa8458a6cc070b57315911e3232d757320eac2a10d095e06f8b149852fad812a3a92933db0573c0a2d30edeebe4575f4b2cf7fd885b8c8d747e49485abdf1d43069a40467b75b1aab7658db3846eed4b337e81f847c19e98865fef46f578775a102e1c49fc3efd850b":
        print("OK")
    
  