#!/usr/bin/env python3
# -*- coding:utf-8 -*-
"""圆周率
圆周率（Pi）是圆的周长与直径的比值，一般用希腊字母π表示，是一个在数学及物理学中普遍存在的
数学常数。π也等于圆形之面积与半径平方之比。是精确计算圆周长、圆面积、球体积等几何形状的关键
值。 在分析学里，π可以严格地定义为满足sin x = 0的最小正实数x。
圆周率用字母 （读作pài）表示，是一个常数（约等于3.141592654），是代表圆周长和直径的比值。
它是一个无理数，即无限不循环小数。在日常生活中，通常都用3.14代表圆周率去进行近似计算。而用
十位小数3.141592654便足以应付一般计算。即使是工程师或物理学家要进行较精密的计算，充其量也
只需取值至小数点后几百个位。
1965年，英国数学家约翰·沃利斯（John Wallis）出版了一本数学专著，其中他推导出一个公式，发
现圆周率等于无穷个分数相乘的积。2015年，罗切斯特大学的科学家们在氢原子能级的量子力学计算中
发现了圆周率相同的公式。
"""


def pi(n=10):
    '''生成指定有效小数位数的字符串形式的Pi

    参数：
        n (int): 小数点后保留的位数

    返回：
        字符串Pi
    '''
    return '3.' + ''.join(str(n) for n in _pi_generator(n))


# _pi_generator() 参考了来自维基百科的Pi页面上的算法
def _pi_generator(n=10, decimal=True, isround=True):
    '''Pi生成器

    参数：
        n (int): 有效位数，当仅生成小数部分时为小数部分保留的位数
        decimal (bool): 是否只生成小数部分
        isround (bool): 是否四舍五入

    返回：
        生成器
    '''
    # 是否只生成小数部分? 初始值不同
    k, a, b, a1, b1 = (3, 0, 4, 40, 24) if decimal else (2, 4, 1, 12, 4)
    while n >= 0:
        # 估算
        p, q, k = k * k, 2 * k + 1, k + 1
        a, b, a1, b1 = a1, b1, p * a + q * a1, p * b + q * b1
        # 公共位
        d, d1 = a // b, a1 // b1
        while d == d1:
            if n > 1:
                yield d
            elif n == 1:
                last_digit = d                              # 暂存最后一位
            else:
                yield last_digit + (d >= 5 and isround)     # 四舍五入
                return                                      # 返回
            a, a1 = 10 * (a % b), 10 * (a1 % b1)
            d, d1 = a // b, a1 // b1
            n -= 1


if __name__ == "__main__":
    # 测试
    assert pi(10) == '3.1415926536'
    assert pi(11) == '3.14159265359'
    assert pi(1000) == ('3.141592653589793238462643383279502884197169399375105'
                        '82097494459230781640628620899862803482534211706798214'
                        '80865132823066470938446095505822317253594081284811174'
                        '50284102701938521105559644622948954930381964428810975'
                        '66593344612847564823378678316527120190914564856692346'
                        '03486104543266482133936072602491412737245870066063155'
                        '88174881520920962829254091715364367892590360011330530'
                        '54882046652138414695194151160943305727036575959195309'
                        '21861173819326117931051185480744623799627495673518857'
                        '52724891227938183011949129833673362440656643086021394'
                        '94639522473719070217986094370277053921717629317675238'
                        '46748184676694051320005681271452635608277857713427577'
                        '89609173637178721468440901224953430146549585371050792'
                        '27968925892354201995611212902196086403441815981362977'
                        '47713099605187072113499999983729780499510597317328160'
                        '96318595024459455346908302642522308253344685035261931'
                        '18817101000313783875288658753320838142061717766914730'
                        '35982534904287554687311595628638823537875937519577818'
                        '577805321712268066130019278766111959092164201989')
