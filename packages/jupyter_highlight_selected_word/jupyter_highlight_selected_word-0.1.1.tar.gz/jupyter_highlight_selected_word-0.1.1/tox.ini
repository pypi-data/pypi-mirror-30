; a generative tox configuration, see: https://testrun.org/tox/latest/config.html#generative-envlist
; most of this came from https://github.com/ionelmc/cookiecutter-pylibrary

[tox]
envlist =
    clean,
    check,
    lint,
    {py27,py34}-notebook{40,41,42,4x},
    report,

[testenv]
basepython =
    pypy: {env:TOXPYTHON:pypy}
    py27: {env:TOXPYTHON:python2.7}
    py33: {env:TOXPYTHON:python3.3}
    py34: {env:TOXPYTHON:python3.4}
    py35: {env:TOXPYTHON:python3.5}
    {docs,spell}: {env:TOXPYTHON:python2.7}
    {appveyorartifacts,bump,check,clean,codecov,condarecipe,coveralls,jupyterhub,lint,report,pypi_build,pypi_upload}: {env:TOXPYTHON:python3.4}
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
passenv = *
usedevelop = false
deps =
    coverage
    mock
    nose
    notebook
    notebook40: notebook>=4.0,<4.1
    notebook41: notebook>=4.1,<4.2
    notebook42: notebook>=4.2,<4.3
    notebook4x: https://github.com/jupyter/notebook/archive/4.x.zip
    notebookmaster: https://github.com/jupyter/notebook/archive/master.zip
    requests
    selenium<3
commands =
    {posargs:coverage run --source=src -m nose -vv tests}

[testenv:check]
skip_install = true
deps =
    check-manifest
    docutils
    pygments
    readme-renderer
commands =
    python setup.py check --strict --metadata --restructuredtext
    check-manifest {toxinidir}

[testenv:lint]
skip_install = true
deps =
    flake8
    isort
commands =
    flake8 src tests setup.py
    isort --verbose --check-only --diff --recursive src tests setup.py

[testenv:report]
skip_install = true
deps = coverage
commands =
    coverage combine --append
    coverage report
    coverage html

[testenv:clean]
skip_install = true
deps = coverage
commands = coverage erase

[testenv:bump]
skip_install = true
deps = bumpversion
whitelist_externals = git
commands =
    bumpversion {posargs:patch}
    python -c "import configparser, subprocess, sys; conf = configparser.ConfigParser(); conf.read('.bumpversion.cfg'); ver = conf['bumpversion']['current_version'].strip(); sys.exit(subprocess.call(['git', 'tag', '-a', ver, '-m', ver], stdout=sys.stdout, stderr=sys.stderr))"
    git describe

[testenv:pypi_build]
skip_install = true
commands = python setup.py sdist bdist_wheel

[testenv:pypi_upload]
skip_install = true
whitelist_externals = bash
deps = twine
commands = bash -c "twine upload dist/*"
