# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from flywheel.api_client import ApiClient
import flywheel.models

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.

class AnalysesApi(object):
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def download_analysis_inputs(self, analysis_id, **kwargs):  # noqa: E501
        """Download analysis inputs.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis If no \"ticket\" query param is included, server error 500 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str ticket: ticket id of the inputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_analysis_inputs_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_analysis_inputs_with_http_info(analysis_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def download_analysis_inputs_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Download analysis inputs.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for all inputs in the anlaysis If no \"ticket\" query param is included, server error 500 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str ticket: ticket id of the inputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """

        all_params = ['analysis_id', 'ticket']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_analysis_inputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `download_analysis_inputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['AnalysisId'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{AnalysisId}/inputs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisFilesCreateTicketOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_analysis_inputs_by_filename(self, analysis_id, filename, **kwargs):  # noqa: E501
        """Download anaylsis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis. If no \"ticket\" query param is included, inputs will be downloaded directly. 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str filename: regex to select inputs for download (required)
        :param str ticket: ticket id of the inputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_analysis_inputs_by_filename_with_http_info(analysis_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.download_analysis_inputs_by_filename_with_http_info(analysis_id, filename, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def download_analysis_inputs_by_filename_with_http_info(self, analysis_id, filename, **kwargs):  # noqa: E501
        """Download anaylsis inputs with filter.

        If \"ticket\" query param is included and not empty, download inputs. If \"ticket\" query param is included and empty, create a ticket for matching inputs in the anlaysis. If no \"ticket\" query param is included, inputs will be downloaded directly. 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str filename: regex to select inputs for download (required)
        :param str ticket: ticket id of the inputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """

        all_params = ['analysis_id', 'filename', 'ticket']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_analysis_inputs_by_filename" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `download_analysis_inputs_by_filename`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `download_analysis_inputs_by_filename`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['AnalysisId'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['Filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{AnalysisId}/inputs/{Filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisFilesCreateTicketOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_analysis_outputs(self, analysis_id, **kwargs):  # noqa: E501
        """Download analysis outputs.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis If no \"ticket\" query param is included, server error 500 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str ticket: ticket id of the outputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_analysis_outputs_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.download_analysis_outputs_with_http_info(analysis_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def download_analysis_outputs_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Download analysis outputs.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for all outputs in the anlaysis If no \"ticket\" query param is included, server error 500 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str ticket: ticket id of the outputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """

        all_params = ['analysis_id', 'ticket']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_analysis_outputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `download_analysis_outputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['AnalysisId'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{AnalysisId}/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisFilesCreateTicketOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def download_analysis_outputs_by_filename(self, analysis_id, filename, **kwargs):  # noqa: E501
        """Download anaylsis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis. If no \"ticket\" query param is included, outputs will be downloaded directly. 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str filename: regex to select outputs for download (required)
        :param str ticket: ticket id of the outputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_analysis_outputs_by_filename_with_http_info(analysis_id, filename, **kwargs)  # noqa: E501
        else:
            (data) = self.download_analysis_outputs_by_filename_with_http_info(analysis_id, filename, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def download_analysis_outputs_by_filename_with_http_info(self, analysis_id, filename, **kwargs):  # noqa: E501
        """Download anaylsis outputs with filter.

        If \"ticket\" query param is included and not empty, download outputs. If \"ticket\" query param is included and empty, create a ticket for matching outputs in the anlaysis. If no \"ticket\" query param is included, outputs will be downloaded directly. 
        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param str filename: regex to select outputs for download (required)
        :param str ticket: ticket id of the outputs to download
        :param bool async: Perform the request asynchronously
        :return: AnalysisFilesCreateTicketOutput
        """

        all_params = ['analysis_id', 'filename', 'ticket']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_analysis_outputs_by_filename" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `download_analysis_outputs_by_filename`")  # noqa: E501
        # verify the required parameter 'filename' is set
        if ('filename' not in params or
                params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `download_analysis_outputs_by_filename`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['AnalysisId'] = params['analysis_id']  # noqa: E501
        if 'filename' in params:
            path_params['Filename'] = params['filename']  # noqa: E501

        query_params = []
        if 'ticket' in params:
            query_params.append(('ticket', params['ticket']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{AnalysisId}/files/{Filename}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisFilesCreateTicketOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_analyses(self, container_name, container_id, subcontainer_name, **kwargs):  # noqa: E501
        """Get nested analyses for a container

        Returns analyses that belong to containers of the specified type that belong to ContainerId.  For example: `projects/{ProjectId}/acquisitions/analyses` will return any analyses  that have an acquisition that is under that project as a parent. The `all` keyword is also supported, for example: projects/{ProjectId}/all/analyses  will return any analyses that have any session or acquisition or the project itself as a parent. 
        This method makes a synchronous HTTP request by default.

        :param str container_name: The parent container type (required)
        :param str container_id: The parent container id (required)
        :param str subcontainer_name: The sub container type (required)
        :param bool async: Perform the request asynchronously
        :return: list[AnalysisListEntry]
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_analyses_with_http_info(container_name, container_id, subcontainer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analyses_with_http_info(container_name, container_id, subcontainer_name, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_analyses_with_http_info(self, container_name, container_id, subcontainer_name, **kwargs):  # noqa: E501
        """Get nested analyses for a container

        Returns analyses that belong to containers of the specified type that belong to ContainerId.  For example: `projects/{ProjectId}/acquisitions/analyses` will return any analyses  that have an acquisition that is under that project as a parent. The `all` keyword is also supported, for example: projects/{ProjectId}/all/analyses  will return any analyses that have any session or acquisition or the project itself as a parent. 
        This method makes a synchronous HTTP request by default.

        :param str container_name: The parent container type (required)
        :param str container_id: The parent container id (required)
        :param str subcontainer_name: The sub container type (required)
        :param bool async: Perform the request asynchronously
        :return: list[AnalysisListEntry]
        """

        all_params = ['container_name', 'container_id', 'subcontainer_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analyses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'container_name' is set
        if ('container_name' not in params or
                params['container_name'] is None):
            raise ValueError("Missing the required parameter `container_name` when calling `get_analyses`")  # noqa: E501
        # verify the required parameter 'container_id' is set
        if ('container_id' not in params or
                params['container_id'] is None):
            raise ValueError("Missing the required parameter `container_id` when calling `get_analyses`")  # noqa: E501
        # verify the required parameter 'subcontainer_name' is set
        if ('subcontainer_name' not in params or
                params['subcontainer_name'] is None):
            raise ValueError("Missing the required parameter `subcontainer_name` when calling `get_analyses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'container_name' in params:
            path_params['ContainerName'] = params['container_name']  # noqa: E501
        if 'container_id' in params:
            path_params['ContainerId'] = params['container_id']  # noqa: E501
        if 'subcontainer_name' in params:
            path_params['SubcontainerName'] = params['subcontainer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/{ContainerName}/{ContainerId}/{SubcontainerName}/analyses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AnalysisListEntry]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)

    def get_analysis(self, analysis_id, **kwargs):  # noqa: E501
        """Get an analysis.

        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool async: Perform the request asynchronously
        :return: AnalysisOutput
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_analysis_with_http_info(analysis_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_analysis_with_http_info(analysis_id, **kwargs)  # noqa: E501
            if data and hasattr(data, 'return_value'):
                return data.return_value()
            return data


    def get_analysis_with_http_info(self, analysis_id, **kwargs):  # noqa: E501
        """Get an analysis.

        This method makes a synchronous HTTP request by default.

        :param str analysis_id: (required)
        :param bool inflate_job: Return job as an object instead of an id
        :param bool async: Perform the request asynchronously
        :return: AnalysisOutput
        """

        all_params = ['analysis_id', 'inflate_job']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')
        all_params.append('_request_out')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_analysis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'analysis_id' is set
        if ('analysis_id' not in params or
                params['analysis_id'] is None):
            raise ValueError("Missing the required parameter `analysis_id` when calling `get_analysis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'analysis_id' in params:
            path_params['AnalysisId'] = params['analysis_id']  # noqa: E501

        query_params = []
        if 'inflate_job' in params:
            query_params.append(('inflate_job', params['inflate_job']))  # noqa: E501
        else:
            query_params.append(('inflate_job', 'true'))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/analyses/{AnalysisId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AnalysisOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            _request_out=params.get('_request_out'),
            collection_formats=collection_formats)
