# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PagePreferencesFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, filter_key=None, selected=None, unselected=None):
        """
        PagePreferencesFilter - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'filter_key': 'str',
            'selected': 'str',
            'unselected': 'list[str]'
        }

        self.attribute_map = {
            'filter_key': 'filter_key',
            'selected': 'selected',
            'unselected': 'unselected'
        }

        self._filter_key = filter_key
        self._selected = selected
        self._unselected = unselected

    @property
    def filter_key(self):
        """
        Gets the filter_key of this PagePreferencesFilter.


        :return: The filter_key of this PagePreferencesFilter.
        :rtype: str
        """
        return self._filter_key

    @filter_key.setter
    def filter_key(self, filter_key):
        """
        Sets the filter_key of this PagePreferencesFilter.


        :param filter_key: The filter_key of this PagePreferencesFilter.
        :type: str
        """

        self._filter_key = filter_key

    @property
    def selected(self):
        """
        Gets the selected of this PagePreferencesFilter.


        :return: The selected of this PagePreferencesFilter.
        :rtype: str
        """
        return self._selected

    @selected.setter
    def selected(self, selected):
        """
        Sets the selected of this PagePreferencesFilter.


        :param selected: The selected of this PagePreferencesFilter.
        :type: str
        """

        self._selected = selected

    @property
    def unselected(self):
        """
        Gets the unselected of this PagePreferencesFilter.


        :return: The unselected of this PagePreferencesFilter.
        :rtype: list[str]
        """
        return self._unselected

    @unselected.setter
    def unselected(self, unselected):
        """
        Sets the unselected of this PagePreferencesFilter.


        :param unselected: The unselected of this PagePreferencesFilter.
        :type: list[str]
        """

        self._unselected = unselected

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
