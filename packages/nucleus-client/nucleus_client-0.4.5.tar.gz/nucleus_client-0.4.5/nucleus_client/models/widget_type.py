# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class WidgetType(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, settings_spec=None, dt_u=None):
        """
        WidgetType - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'settings_spec': 'SettingsSpec',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'name': 'name',
            'settings_spec': 'settings_spec',
            'dt_u': 'dt_u'
        }

        self._id = id
        self._name = name
        self._settings_spec = settings_spec
        self._dt_u = dt_u

    @property
    def id(self):
        """
        Gets the id of this WidgetType.


        :return: The id of this WidgetType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this WidgetType.


        :param id: The id of this WidgetType.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this WidgetType.


        :return: The name of this WidgetType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this WidgetType.


        :param name: The name of this WidgetType.
        :type: str
        """

        self._name = name

    @property
    def settings_spec(self):
        """
        Gets the settings_spec of this WidgetType.


        :return: The settings_spec of this WidgetType.
        :rtype: SettingsSpec
        """
        return self._settings_spec

    @settings_spec.setter
    def settings_spec(self, settings_spec):
        """
        Sets the settings_spec of this WidgetType.


        :param settings_spec: The settings_spec of this WidgetType.
        :type: SettingsSpec
        """

        self._settings_spec = settings_spec

    @property
    def dt_u(self):
        """
        Gets the dt_u of this WidgetType.


        :return: The dt_u of this WidgetType.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this WidgetType.


        :param dt_u: The dt_u of this WidgetType.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
