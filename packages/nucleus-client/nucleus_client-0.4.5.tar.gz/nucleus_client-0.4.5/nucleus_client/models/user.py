# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, user_type=None, name=None, token=None, email=None, reset_key=None, activation_key=None, client_ids=None, roles=None, dt_u=None):
        """
        User - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'user_type': 'str',
            'name': 'str',
            'token': 'str',
            'email': 'str',
            'reset_key': 'str',
            'activation_key': 'str',
            'client_ids': 'list[str]',
            'roles': 'list[str]',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'user_type': 'user_type',
            'name': 'name',
            'token': 'token',
            'email': 'email',
            'reset_key': 'reset_key',
            'activation_key': 'activation_key',
            'client_ids': 'client_ids',
            'roles': 'roles',
            'dt_u': 'dt_u'
        }

        self._id = id
        self._user_type = user_type
        self._name = name
        self._token = token
        self._email = email
        self._reset_key = reset_key
        self._activation_key = activation_key
        self._client_ids = client_ids
        self._roles = roles
        self._dt_u = dt_u

    @property
    def id(self):
        """
        Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.


        :param id: The id of this User.
        :type: str
        """

        self._id = id

    @property
    def user_type(self):
        """
        Gets the user_type of this User.


        :return: The user_type of this User.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """
        Sets the user_type of this User.


        :param user_type: The user_type of this User.
        :type: str
        """

        self._user_type = user_type

    @property
    def name(self):
        """
        Gets the name of this User.
        Name of the user.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this User.
        Name of the user.

        :param name: The name of this User.
        :type: str
        """

        self._name = name

    @property
    def token(self):
        """
        Gets the token of this User.


        :return: The token of this User.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """
        Sets the token of this User.


        :param token: The token of this User.
        :type: str
        """

        self._token = token

    @property
    def email(self):
        """
        Gets the email of this User.
        Email for the user.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.
        Email for the user.

        :param email: The email of this User.
        :type: str
        """

        self._email = email

    @property
    def reset_key(self):
        """
        Gets the reset_key of this User.


        :return: The reset_key of this User.
        :rtype: str
        """
        return self._reset_key

    @reset_key.setter
    def reset_key(self, reset_key):
        """
        Sets the reset_key of this User.


        :param reset_key: The reset_key of this User.
        :type: str
        """

        self._reset_key = reset_key

    @property
    def activation_key(self):
        """
        Gets the activation_key of this User.


        :return: The activation_key of this User.
        :rtype: str
        """
        return self._activation_key

    @activation_key.setter
    def activation_key(self, activation_key):
        """
        Sets the activation_key of this User.


        :param activation_key: The activation_key of this User.
        :type: str
        """

        self._activation_key = activation_key

    @property
    def client_ids(self):
        """
        Gets the client_ids of this User.
        Client-tree that the user belongs to.

        :return: The client_ids of this User.
        :rtype: list[str]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """
        Sets the client_ids of this User.
        Client-tree that the user belongs to.

        :param client_ids: The client_ids of this User.
        :type: list[str]
        """

        self._client_ids = client_ids

    @property
    def roles(self):
        """
        Gets the roles of this User.
        Roles the user has

        :return: The roles of this User.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this User.
        Roles the user has

        :param roles: The roles of this User.
        :type: list[str]
        """

        self._roles = roles

    @property
    def dt_u(self):
        """
        Gets the dt_u of this User.


        :return: The dt_u of this User.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this User.


        :param dt_u: The dt_u of this User.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
