# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntityBatchHealthReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, integration_id=None, status=None, entity_type=None, count=None):
        """
        EntityBatchHealthReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'str',
            'integration_id': 'str',
            'status': 'str',
            'entity_type': 'str',
            'count': 'int'
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'integration_id': 'integration_id',
            'status': 'status',
            'entity_type': 'entity_type',
            'count': 'count'
        }

        self._client_id = client_id
        self._integration_id = integration_id
        self._status = status
        self._entity_type = entity_type
        self._count = count

    @property
    def client_id(self):
        """
        Gets the client_id of this EntityBatchHealthReport.


        :return: The client_id of this EntityBatchHealthReport.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this EntityBatchHealthReport.


        :param client_id: The client_id of this EntityBatchHealthReport.
        :type: str
        """

        self._client_id = client_id

    @property
    def integration_id(self):
        """
        Gets the integration_id of this EntityBatchHealthReport.


        :return: The integration_id of this EntityBatchHealthReport.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """
        Sets the integration_id of this EntityBatchHealthReport.


        :param integration_id: The integration_id of this EntityBatchHealthReport.
        :type: str
        """

        self._integration_id = integration_id

    @property
    def status(self):
        """
        Gets the status of this EntityBatchHealthReport.


        :return: The status of this EntityBatchHealthReport.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this EntityBatchHealthReport.


        :param status: The status of this EntityBatchHealthReport.
        :type: str
        """

        self._status = status

    @property
    def entity_type(self):
        """
        Gets the entity_type of this EntityBatchHealthReport.


        :return: The entity_type of this EntityBatchHealthReport.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this EntityBatchHealthReport.


        :param entity_type: The entity_type of this EntityBatchHealthReport.
        :type: str
        """

        self._entity_type = entity_type

    @property
    def count(self):
        """
        Gets the count of this EntityBatchHealthReport.


        :return: The count of this EntityBatchHealthReport.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this EntityBatchHealthReport.


        :param count: The count of this EntityBatchHealthReport.
        :type: int
        """

        self._count = count

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
