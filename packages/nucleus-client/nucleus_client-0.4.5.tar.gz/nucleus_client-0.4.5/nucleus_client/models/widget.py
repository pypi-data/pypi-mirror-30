# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Widget(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, title=None, widget_type_name=None, settings=None, view_hash_key=None, dt_u=None):
        """
        Widget - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'title': 'str',
            'widget_type_name': 'str',
            'settings': 'Settings',
            'view_hash_key': 'str',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'title': 'title',
            'widget_type_name': 'widget_type_name',
            'settings': 'settings',
            'view_hash_key': 'view_hash_key',
            'dt_u': 'dt_u'
        }

        self._id = id
        self._title = title
        self._widget_type_name = widget_type_name
        self._settings = settings
        self._view_hash_key = view_hash_key
        self._dt_u = dt_u

    @property
    def id(self):
        """
        Gets the id of this Widget.


        :return: The id of this Widget.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Widget.


        :param id: The id of this Widget.
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """
        Gets the title of this Widget.


        :return: The title of this Widget.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this Widget.


        :param title: The title of this Widget.
        :type: str
        """

        self._title = title

    @property
    def widget_type_name(self):
        """
        Gets the widget_type_name of this Widget.


        :return: The widget_type_name of this Widget.
        :rtype: str
        """
        return self._widget_type_name

    @widget_type_name.setter
    def widget_type_name(self, widget_type_name):
        """
        Sets the widget_type_name of this Widget.


        :param widget_type_name: The widget_type_name of this Widget.
        :type: str
        """

        self._widget_type_name = widget_type_name

    @property
    def settings(self):
        """
        Gets the settings of this Widget.


        :return: The settings of this Widget.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this Widget.


        :param settings: The settings of this Widget.
        :type: Settings
        """

        self._settings = settings

    @property
    def view_hash_key(self):
        """
        Gets the view_hash_key of this Widget.


        :return: The view_hash_key of this Widget.
        :rtype: str
        """
        return self._view_hash_key

    @view_hash_key.setter
    def view_hash_key(self, view_hash_key):
        """
        Sets the view_hash_key of this Widget.


        :param view_hash_key: The view_hash_key of this Widget.
        :type: str
        """

        self._view_hash_key = view_hash_key

    @property
    def dt_u(self):
        """
        Gets the dt_u of this Widget.


        :return: The dt_u of this Widget.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this Widget.


        :param dt_u: The dt_u of this Widget.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
