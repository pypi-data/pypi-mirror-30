# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntityBatch(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, integration_id=None, entity_type=None, existing_integration_id=None, dt_u=None, record_count=None, post_data=None):
        """
        EntityBatch - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'str',
            'integration_id': 'str',
            'entity_type': 'str',
            'existing_integration_id': 'str',
            'dt_u': 'str',
            'record_count': 'int',
            'post_data': 'list[EntityBatchPostData]'
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'integration_id': 'integration_id',
            'entity_type': 'entity_type',
            'existing_integration_id': 'existing_integration_id',
            'dt_u': 'dt_u',
            'record_count': 'record_count',
            'post_data': 'post_data'
        }

        self._client_id = client_id
        self._integration_id = integration_id
        self._entity_type = entity_type
        self._existing_integration_id = existing_integration_id
        self._dt_u = dt_u
        self._record_count = record_count
        self._post_data = post_data

    @property
    def client_id(self):
        """
        Gets the client_id of this EntityBatch.


        :return: The client_id of this EntityBatch.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this EntityBatch.


        :param client_id: The client_id of this EntityBatch.
        :type: str
        """

        self._client_id = client_id

    @property
    def integration_id(self):
        """
        Gets the integration_id of this EntityBatch.


        :return: The integration_id of this EntityBatch.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """
        Sets the integration_id of this EntityBatch.


        :param integration_id: The integration_id of this EntityBatch.
        :type: str
        """

        self._integration_id = integration_id

    @property
    def entity_type(self):
        """
        Gets the entity_type of this EntityBatch.


        :return: The entity_type of this EntityBatch.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this EntityBatch.


        :param entity_type: The entity_type of this EntityBatch.
        :type: str
        """

        self._entity_type = entity_type

    @property
    def existing_integration_id(self):
        """
        Gets the existing_integration_id of this EntityBatch.


        :return: The existing_integration_id of this EntityBatch.
        :rtype: str
        """
        return self._existing_integration_id

    @existing_integration_id.setter
    def existing_integration_id(self, existing_integration_id):
        """
        Sets the existing_integration_id of this EntityBatch.


        :param existing_integration_id: The existing_integration_id of this EntityBatch.
        :type: str
        """

        self._existing_integration_id = existing_integration_id

    @property
    def dt_u(self):
        """
        Gets the dt_u of this EntityBatch.


        :return: The dt_u of this EntityBatch.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this EntityBatch.


        :param dt_u: The dt_u of this EntityBatch.
        :type: str
        """

        self._dt_u = dt_u

    @property
    def record_count(self):
        """
        Gets the record_count of this EntityBatch.


        :return: The record_count of this EntityBatch.
        :rtype: int
        """
        return self._record_count

    @record_count.setter
    def record_count(self, record_count):
        """
        Sets the record_count of this EntityBatch.


        :param record_count: The record_count of this EntityBatch.
        :type: int
        """

        self._record_count = record_count

    @property
    def post_data(self):
        """
        Gets the post_data of this EntityBatch.


        :return: The post_data of this EntityBatch.
        :rtype: list[EntityBatchPostData]
        """
        return self._post_data

    @post_data.setter
    def post_data(self, post_data):
        """
        Sets the post_data of this EntityBatch.


        :param post_data: The post_data of this EntityBatch.
        :type: list[EntityBatchPostData]
        """

        self._post_data = post_data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
