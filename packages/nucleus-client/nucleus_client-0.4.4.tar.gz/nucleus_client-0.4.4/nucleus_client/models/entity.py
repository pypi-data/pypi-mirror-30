# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Entity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, client_id=None, entity_type=None, name=None, identities=None, dt_u=None):
        """
        Entity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'client_id': 'str',
            'entity_type': 'str',
            'name': 'str',
            'identities': 'list[EntityIdentity]',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'client_id': 'client_id',
            'entity_type': 'entity_type',
            'name': 'name',
            'identities': 'identities',
            'dt_u': 'dt_u'
        }

        self._id = id
        self._client_id = client_id
        self._entity_type = entity_type
        self._name = name
        self._identities = identities
        self._dt_u = dt_u

    @property
    def id(self):
        """
        Gets the id of this Entity.


        :return: The id of this Entity.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Entity.


        :param id: The id of this Entity.
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """
        Gets the client_id of this Entity.


        :return: The client_id of this Entity.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Entity.


        :param client_id: The client_id of this Entity.
        :type: str
        """

        self._client_id = client_id

    @property
    def entity_type(self):
        """
        Gets the entity_type of this Entity.


        :return: The entity_type of this Entity.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this Entity.


        :param entity_type: The entity_type of this Entity.
        :type: str
        """

        self._entity_type = entity_type

    @property
    def name(self):
        """
        Gets the name of this Entity.


        :return: The name of this Entity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Entity.


        :param name: The name of this Entity.
        :type: str
        """

        self._name = name

    @property
    def identities(self):
        """
        Gets the identities of this Entity.


        :return: The identities of this Entity.
        :rtype: list[EntityIdentity]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """
        Sets the identities of this Entity.


        :param identities: The identities of this Entity.
        :type: list[EntityIdentity]
        """

        self._identities = identities

    @property
    def dt_u(self):
        """
        Gets the dt_u of this Entity.


        :return: The dt_u of this Entity.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this Entity.


        :param dt_u: The dt_u of this Entity.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
