# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Integration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, integration_type_id=None, parent_integration_id=None, settings=None, loader_settings=None, batch_history=None, sync_history=None):
        """
        Integration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'integration_type_id': 'str',
            'parent_integration_id': 'str',
            'settings': 'Settings',
            'loader_settings': 'IntegrationLoaderSettings',
            'batch_history': 'list[BatchHistoryReceipt]',
            'sync_history': 'list[IntegrationSyncHistory]'
        }

        self.attribute_map = {
            'id': '_id',
            'name': 'name',
            'integration_type_id': 'integration_type_id',
            'parent_integration_id': 'parent_integration_id',
            'settings': 'settings',
            'loader_settings': 'loader_settings',
            'batch_history': 'batch_history',
            'sync_history': 'sync_history'
        }

        self._id = id
        self._name = name
        self._integration_type_id = integration_type_id
        self._parent_integration_id = parent_integration_id
        self._settings = settings
        self._loader_settings = loader_settings
        self._batch_history = batch_history
        self._sync_history = sync_history

    @property
    def id(self):
        """
        Gets the id of this Integration.


        :return: The id of this Integration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Integration.


        :param id: The id of this Integration.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Integration.


        :return: The name of this Integration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Integration.


        :param name: The name of this Integration.
        :type: str
        """

        self._name = name

    @property
    def integration_type_id(self):
        """
        Gets the integration_type_id of this Integration.


        :return: The integration_type_id of this Integration.
        :rtype: str
        """
        return self._integration_type_id

    @integration_type_id.setter
    def integration_type_id(self, integration_type_id):
        """
        Sets the integration_type_id of this Integration.


        :param integration_type_id: The integration_type_id of this Integration.
        :type: str
        """

        self._integration_type_id = integration_type_id

    @property
    def parent_integration_id(self):
        """
        Gets the parent_integration_id of this Integration.


        :return: The parent_integration_id of this Integration.
        :rtype: str
        """
        return self._parent_integration_id

    @parent_integration_id.setter
    def parent_integration_id(self, parent_integration_id):
        """
        Sets the parent_integration_id of this Integration.


        :param parent_integration_id: The parent_integration_id of this Integration.
        :type: str
        """

        self._parent_integration_id = parent_integration_id

    @property
    def settings(self):
        """
        Gets the settings of this Integration.


        :return: The settings of this Integration.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this Integration.


        :param settings: The settings of this Integration.
        :type: Settings
        """

        self._settings = settings

    @property
    def loader_settings(self):
        """
        Gets the loader_settings of this Integration.


        :return: The loader_settings of this Integration.
        :rtype: IntegrationLoaderSettings
        """
        return self._loader_settings

    @loader_settings.setter
    def loader_settings(self, loader_settings):
        """
        Sets the loader_settings of this Integration.


        :param loader_settings: The loader_settings of this Integration.
        :type: IntegrationLoaderSettings
        """

        self._loader_settings = loader_settings

    @property
    def batch_history(self):
        """
        Gets the batch_history of this Integration.
        A history of processed batches.

        :return: The batch_history of this Integration.
        :rtype: list[BatchHistoryReceipt]
        """
        return self._batch_history

    @batch_history.setter
    def batch_history(self, batch_history):
        """
        Sets the batch_history of this Integration.
        A history of processed batches.

        :param batch_history: The batch_history of this Integration.
        :type: list[BatchHistoryReceipt]
        """

        self._batch_history = batch_history

    @property
    def sync_history(self):
        """
        Gets the sync_history of this Integration.
        A history of synchronization requests sorted by ascending date.

        :return: The sync_history of this Integration.
        :rtype: list[IntegrationSyncHistory]
        """
        return self._sync_history

    @sync_history.setter
    def sync_history(self, sync_history):
        """
        Sets the sync_history of this Integration.
        A history of synchronization requests sorted by ascending date.

        :param sync_history: The sync_history of this Integration.
        :type: list[IntegrationSyncHistory]
        """

        self._sync_history = sync_history

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
