# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PageView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hash_key=None, view_type_id=None, settings=None):
        """
        PageView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hash_key': 'str',
            'view_type_id': 'str',
            'settings': 'Settings'
        }

        self.attribute_map = {
            'hash_key': 'hash_key',
            'view_type_id': 'view_type_id',
            'settings': 'settings'
        }

        self._hash_key = hash_key
        self._view_type_id = view_type_id
        self._settings = settings

    @property
    def hash_key(self):
        """
        Gets the hash_key of this PageView.


        :return: The hash_key of this PageView.
        :rtype: str
        """
        return self._hash_key

    @hash_key.setter
    def hash_key(self, hash_key):
        """
        Sets the hash_key of this PageView.


        :param hash_key: The hash_key of this PageView.
        :type: str
        """

        self._hash_key = hash_key

    @property
    def view_type_id(self):
        """
        Gets the view_type_id of this PageView.


        :return: The view_type_id of this PageView.
        :rtype: str
        """
        return self._view_type_id

    @view_type_id.setter
    def view_type_id(self, view_type_id):
        """
        Sets the view_type_id of this PageView.


        :param view_type_id: The view_type_id of this PageView.
        :type: str
        """

        self._view_type_id = view_type_id

    @property
    def settings(self):
        """
        Gets the settings of this PageView.


        :return: The settings of this PageView.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this PageView.


        :param settings: The settings of this PageView.
        :type: Settings
        """

        self._settings = settings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
