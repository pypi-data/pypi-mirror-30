# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntityBatchPostData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, external_key=None, existing_entity_external_key=None, existing_entity_type=None, lookup_external_key=None, dt_activity=None, data=None):
        """
        EntityBatchPostData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'external_key': 'str',
            'existing_entity_external_key': 'list[str]',
            'existing_entity_type': 'list[str]',
            'lookup_external_key': 'str',
            'dt_activity': 'str',
            'data': 'dict(str, object)'
        }

        self.attribute_map = {
            'external_key': 'external_key',
            'existing_entity_external_key': 'existing_entity_external_key',
            'existing_entity_type': 'existing_entity_type',
            'lookup_external_key': 'lookup_external_key',
            'dt_activity': 'dt_activity',
            'data': 'data'
        }

        self._external_key = external_key
        self._existing_entity_external_key = existing_entity_external_key
        self._existing_entity_type = existing_entity_type
        self._lookup_external_key = lookup_external_key
        self._dt_activity = dt_activity
        self._data = data

    @property
    def external_key(self):
        """
        Gets the external_key of this EntityBatchPostData.


        :return: The external_key of this EntityBatchPostData.
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """
        Sets the external_key of this EntityBatchPostData.


        :param external_key: The external_key of this EntityBatchPostData.
        :type: str
        """

        self._external_key = external_key

    @property
    def existing_entity_external_key(self):
        """
        Gets the existing_entity_external_key of this EntityBatchPostData.


        :return: The existing_entity_external_key of this EntityBatchPostData.
        :rtype: list[str]
        """
        return self._existing_entity_external_key

    @existing_entity_external_key.setter
    def existing_entity_external_key(self, existing_entity_external_key):
        """
        Sets the existing_entity_external_key of this EntityBatchPostData.


        :param existing_entity_external_key: The existing_entity_external_key of this EntityBatchPostData.
        :type: list[str]
        """

        self._existing_entity_external_key = existing_entity_external_key

    @property
    def existing_entity_type(self):
        """
        Gets the existing_entity_type of this EntityBatchPostData.


        :return: The existing_entity_type of this EntityBatchPostData.
        :rtype: list[str]
        """
        return self._existing_entity_type

    @existing_entity_type.setter
    def existing_entity_type(self, existing_entity_type):
        """
        Sets the existing_entity_type of this EntityBatchPostData.


        :param existing_entity_type: The existing_entity_type of this EntityBatchPostData.
        :type: list[str]
        """

        self._existing_entity_type = existing_entity_type

    @property
    def lookup_external_key(self):
        """
        Gets the lookup_external_key of this EntityBatchPostData.


        :return: The lookup_external_key of this EntityBatchPostData.
        :rtype: str
        """
        return self._lookup_external_key

    @lookup_external_key.setter
    def lookup_external_key(self, lookup_external_key):
        """
        Sets the lookup_external_key of this EntityBatchPostData.


        :param lookup_external_key: The lookup_external_key of this EntityBatchPostData.
        :type: str
        """

        self._lookup_external_key = lookup_external_key

    @property
    def dt_activity(self):
        """
        Gets the dt_activity of this EntityBatchPostData.


        :return: The dt_activity of this EntityBatchPostData.
        :rtype: str
        """
        return self._dt_activity

    @dt_activity.setter
    def dt_activity(self, dt_activity):
        """
        Sets the dt_activity of this EntityBatchPostData.


        :param dt_activity: The dt_activity of this EntityBatchPostData.
        :type: str
        """

        self._dt_activity = dt_activity

    @property
    def data(self):
        """
        Gets the data of this EntityBatchPostData.


        :return: The data of this EntityBatchPostData.
        :rtype: dict(str, object)
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this EntityBatchPostData.


        :param data: The data of this EntityBatchPostData.
        :type: dict(str, object)
        """

        self._data = data

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
