# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntityIdentity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, entity_id=None, integration_id=None, external_key=None, dt_u=None):
        """
        EntityIdentity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'str',
            'entity_id': 'str',
            'integration_id': 'str',
            'external_key': 'str',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'entity_id': 'entity_id',
            'integration_id': 'integration_id',
            'external_key': 'external_key',
            'dt_u': 'dt_u'
        }

        self._client_id = client_id
        self._entity_id = entity_id
        self._integration_id = integration_id
        self._external_key = external_key
        self._dt_u = dt_u

    @property
    def client_id(self):
        """
        Gets the client_id of this EntityIdentity.


        :return: The client_id of this EntityIdentity.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this EntityIdentity.


        :param client_id: The client_id of this EntityIdentity.
        :type: str
        """

        self._client_id = client_id

    @property
    def entity_id(self):
        """
        Gets the entity_id of this EntityIdentity.


        :return: The entity_id of this EntityIdentity.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this EntityIdentity.


        :param entity_id: The entity_id of this EntityIdentity.
        :type: str
        """

        self._entity_id = entity_id

    @property
    def integration_id(self):
        """
        Gets the integration_id of this EntityIdentity.


        :return: The integration_id of this EntityIdentity.
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """
        Sets the integration_id of this EntityIdentity.


        :param integration_id: The integration_id of this EntityIdentity.
        :type: str
        """

        self._integration_id = integration_id

    @property
    def external_key(self):
        """
        Gets the external_key of this EntityIdentity.


        :return: The external_key of this EntityIdentity.
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """
        Sets the external_key of this EntityIdentity.


        :param external_key: The external_key of this EntityIdentity.
        :type: str
        """

        self._external_key = external_key

    @property
    def dt_u(self):
        """
        Gets the dt_u of this EntityIdentity.


        :return: The dt_u of this EntityIdentity.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this EntityIdentity.


        :param dt_u: The dt_u of this EntityIdentity.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
