# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class View(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, client_id=None, view_type_id=None, settings=None, error=None, hash_key=None, data=None, dt_u=None):
        """
        View - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'client_id': 'str',
            'view_type_id': 'str',
            'settings': 'Settings',
            'error': 'ViewError',
            'hash_key': 'str',
            'data': 'list[object]',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'client_id': 'client_id',
            'view_type_id': 'view_type_id',
            'settings': 'settings',
            'error': 'error',
            'hash_key': 'hash_key',
            'data': 'data',
            'dt_u': 'dt_u'
        }

        self._id = id
        self._client_id = client_id
        self._view_type_id = view_type_id
        self._settings = settings
        self._error = error
        self._hash_key = hash_key
        self._data = data
        self._dt_u = dt_u

    @property
    def id(self):
        """
        Gets the id of this View.


        :return: The id of this View.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this View.


        :param id: The id of this View.
        :type: str
        """

        self._id = id

    @property
    def client_id(self):
        """
        Gets the client_id of this View.


        :return: The client_id of this View.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this View.


        :param client_id: The client_id of this View.
        :type: str
        """

        self._client_id = client_id

    @property
    def view_type_id(self):
        """
        Gets the view_type_id of this View.


        :return: The view_type_id of this View.
        :rtype: str
        """
        return self._view_type_id

    @view_type_id.setter
    def view_type_id(self, view_type_id):
        """
        Sets the view_type_id of this View.


        :param view_type_id: The view_type_id of this View.
        :type: str
        """

        self._view_type_id = view_type_id

    @property
    def settings(self):
        """
        Gets the settings of this View.


        :return: The settings of this View.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """
        Sets the settings of this View.


        :param settings: The settings of this View.
        :type: Settings
        """

        self._settings = settings

    @property
    def error(self):
        """
        Gets the error of this View.


        :return: The error of this View.
        :rtype: ViewError
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this View.


        :param error: The error of this View.
        :type: ViewError
        """

        self._error = error

    @property
    def hash_key(self):
        """
        Gets the hash_key of this View.


        :return: The hash_key of this View.
        :rtype: str
        """
        return self._hash_key

    @hash_key.setter
    def hash_key(self, hash_key):
        """
        Sets the hash_key of this View.


        :param hash_key: The hash_key of this View.
        :type: str
        """

        self._hash_key = hash_key

    @property
    def data(self):
        """
        Gets the data of this View.


        :return: The data of this View.
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this View.


        :param data: The data of this View.
        :type: list[object]
        """

        self._data = data

    @property
    def dt_u(self):
        """
        Gets the dt_u of this View.


        :return: The dt_u of this View.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this View.


        :param dt_u: The dt_u of this View.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
