# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PagePreferences(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, page_id=None, user_id=None, filters=None):
        """
        PagePreferences - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'str',
            'page_id': 'str',
            'user_id': 'str',
            'filters': 'list[PagePreferencesFilter]'
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'page_id': 'page_id',
            'user_id': 'user_id',
            'filters': 'filters'
        }

        self._client_id = client_id
        self._page_id = page_id
        self._user_id = user_id
        self._filters = filters

    @property
    def client_id(self):
        """
        Gets the client_id of this PagePreferences.


        :return: The client_id of this PagePreferences.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this PagePreferences.


        :param client_id: The client_id of this PagePreferences.
        :type: str
        """

        self._client_id = client_id

    @property
    def page_id(self):
        """
        Gets the page_id of this PagePreferences.


        :return: The page_id of this PagePreferences.
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """
        Sets the page_id of this PagePreferences.


        :param page_id: The page_id of this PagePreferences.
        :type: str
        """

        self._page_id = page_id

    @property
    def user_id(self):
        """
        Gets the user_id of this PagePreferences.


        :return: The user_id of this PagePreferences.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this PagePreferences.


        :param user_id: The user_id of this PagePreferences.
        :type: str
        """

        self._user_id = user_id

    @property
    def filters(self):
        """
        Gets the filters of this PagePreferences.


        :return: The filters of this PagePreferences.
        :rtype: list[PagePreferencesFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """
        Sets the filters of this PagePreferences.


        :param filters: The filters of this PagePreferences.
        :type: list[PagePreferencesFilter]
        """

        self._filters = filters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
