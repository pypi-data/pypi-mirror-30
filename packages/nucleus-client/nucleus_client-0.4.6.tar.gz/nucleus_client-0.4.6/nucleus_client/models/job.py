# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Job(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, client_id=None, job_type=None, status=None, key=None, dt_expire=None, dt_created=None, error=None):
        """
        Job - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'client_id': 'str',
            'job_type': 'str',
            'status': 'str',
            'key': 'str',
            'dt_expire': 'str',
            'dt_created': 'str',
            'error': 'str'
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'job_type': 'job_type',
            'status': 'status',
            'key': 'key',
            'dt_expire': 'dt_expire',
            'dt_created': 'dt_created',
            'error': 'error'
        }

        self._client_id = client_id
        self._job_type = job_type
        self._status = status
        self._key = key
        self._dt_expire = dt_expire
        self._dt_created = dt_created
        self._error = error

    @property
    def client_id(self):
        """
        Gets the client_id of this Job.


        :return: The client_id of this Job.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Job.


        :param client_id: The client_id of this Job.
        :type: str
        """

        self._client_id = client_id

    @property
    def job_type(self):
        """
        Gets the job_type of this Job.


        :return: The job_type of this Job.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """
        Sets the job_type of this Job.


        :param job_type: The job_type of this Job.
        :type: str
        """

        self._job_type = job_type

    @property
    def status(self):
        """
        Gets the status of this Job.


        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Job.


        :param status: The status of this Job.
        :type: str
        """

        self._status = status

    @property
    def key(self):
        """
        Gets the key of this Job.


        :return: The key of this Job.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Job.


        :param key: The key of this Job.
        :type: str
        """

        self._key = key

    @property
    def dt_expire(self):
        """
        Gets the dt_expire of this Job.


        :return: The dt_expire of this Job.
        :rtype: str
        """
        return self._dt_expire

    @dt_expire.setter
    def dt_expire(self, dt_expire):
        """
        Sets the dt_expire of this Job.


        :param dt_expire: The dt_expire of this Job.
        :type: str
        """

        self._dt_expire = dt_expire

    @property
    def dt_created(self):
        """
        Gets the dt_created of this Job.


        :return: The dt_created of this Job.
        :rtype: str
        """
        return self._dt_created

    @dt_created.setter
    def dt_created(self, dt_created):
        """
        Sets the dt_created of this Job.


        :param dt_created: The dt_created of this Job.
        :type: str
        """

        self._dt_created = dt_created

    @property
    def error(self):
        """
        Gets the error of this Job.


        :return: The error of this Job.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this Job.


        :param error: The error of this Job.
        :type: str
        """

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
