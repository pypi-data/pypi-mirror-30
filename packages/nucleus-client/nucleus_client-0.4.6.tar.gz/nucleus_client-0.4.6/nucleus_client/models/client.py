# coding: utf-8

"""
    Nucleus REST API


    OpenAPI spec version: 0.4.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Client(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, name=None, code=None, status=None, integrations=None, schedule=None, client_ids=None, nav_page_ids=None, dt_u=None):
        """
        Client - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'code': 'str',
            'status': 'str',
            'integrations': 'list[Integration]',
            'schedule': 'ClientRefreshSchedule',
            'client_ids': 'list[str]',
            'nav_page_ids': 'list[str]',
            'dt_u': 'str'
        }

        self.attribute_map = {
            'id': '_id',
            'name': 'name',
            'code': 'code',
            'status': 'status',
            'integrations': 'integrations',
            'schedule': 'schedule',
            'client_ids': 'client_ids',
            'nav_page_ids': 'nav_page_ids',
            'dt_u': 'dt_u'
        }

        self._id = id
        self._name = name
        self._code = code
        self._status = status
        self._integrations = integrations
        self._schedule = schedule
        self._client_ids = client_ids
        self._nav_page_ids = nav_page_ids
        self._dt_u = dt_u

    @property
    def id(self):
        """
        Gets the id of this Client.


        :return: The id of this Client.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Client.


        :param id: The id of this Client.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Client.
        Long name for the client.

        :return: The name of this Client.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Client.
        Long name for the client.

        :param name: The name of this Client.
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """
        Gets the code of this Client.
        Short name of the client.

        :return: The code of this Client.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Client.
        Short name of the client.

        :param code: The code of this Client.
        :type: str
        """

        if not code:
            raise ValueError("Invalid value for `code`, must not be `None`")
        if not re.search('^[A-Za-z0-9]{1,30}$', code, flags=re.IGNORECASE):
            raise ValueError("Invalid value for `code`, must be a follow pattern or equal to `/^[A-Za-z0-9]{1,30}$/i`")

        self._code = code

    @property
    def status(self):
        """
        Gets the status of this Client.
        Status of the client.

        :return: The status of this Client.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Client.
        Status of the client.

        :param status: The status of this Client.
        :type: str
        """
        allowed_values = ["new", "active", "suspended"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )

        self._status = status

    @property
    def integrations(self):
        """
        Gets the integrations of this Client.
        A list of integrations the client consumes.

        :return: The integrations of this Client.
        :rtype: list[Integration]
        """
        return self._integrations

    @integrations.setter
    def integrations(self, integrations):
        """
        Sets the integrations of this Client.
        A list of integrations the client consumes.

        :param integrations: The integrations of this Client.
        :type: list[Integration]
        """

        self._integrations = integrations

    @property
    def schedule(self):
        """
        Gets the schedule of this Client.


        :return: The schedule of this Client.
        :rtype: ClientRefreshSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """
        Sets the schedule of this Client.


        :param schedule: The schedule of this Client.
        :type: ClientRefreshSchedule
        """

        self._schedule = schedule

    @property
    def client_ids(self):
        """
        Gets the client_ids of this Client.
        A list of ids of parent clients.

        :return: The client_ids of this Client.
        :rtype: list[str]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """
        Sets the client_ids of this Client.
        A list of ids of parent clients.

        :param client_ids: The client_ids of this Client.
        :type: list[str]
        """

        self._client_ids = client_ids

    @property
    def nav_page_ids(self):
        """
        Gets the nav_page_ids of this Client.
        A list of page ids to show in the navigation

        :return: The nav_page_ids of this Client.
        :rtype: list[str]
        """
        return self._nav_page_ids

    @nav_page_ids.setter
    def nav_page_ids(self, nav_page_ids):
        """
        Sets the nav_page_ids of this Client.
        A list of page ids to show in the navigation

        :param nav_page_ids: The nav_page_ids of this Client.
        :type: list[str]
        """

        self._nav_page_ids = nav_page_ids

    @property
    def dt_u(self):
        """
        Gets the dt_u of this Client.


        :return: The dt_u of this Client.
        :rtype: str
        """
        return self._dt_u

    @dt_u.setter
    def dt_u(self, dt_u):
        """
        Sets the dt_u of this Client.


        :param dt_u: The dt_u of this Client.
        :type: str
        """

        self._dt_u = dt_u

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
