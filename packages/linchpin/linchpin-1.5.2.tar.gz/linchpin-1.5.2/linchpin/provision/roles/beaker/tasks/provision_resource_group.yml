---
- name: "provision beaker systems"
  bkr_server:
    recipesets: "{{ res.recipesets }}"
    state: present
    # these values have defaults set in the bkr_server module
    # if omitted, or they are not required
    whiteboard: "{{ res.whiteboard | default('Provisioned by LinchPin') }}"
    job_group: "{{ res.job_group | default(omit) }}"
    cancel_message: "{{ res.cancel_message | default(omit) }}"
    max_attempts: "{{ res.max_attempts | default(omit) }}"
    attempt_wait_time: "{{ attempt_wait_time | default(omit) }}"
  with_items: "{{ res_defs['resource_definitions'] }}"
  # loop over res_defs even though there should be only one for beaker
  loop_control:
    loop_var: res
  register: bkr
  ignore_errors: true

- block:
  - name: "set bkr ids from results"
    set_fact:
      bkr_ids: "{{ bkr_ids | default({}) | combine(result['ids']) }}"
    with_items: "{{ bkr.results }}"
    loop_control:
      loop_var: result

  - name: set bkr hosts from results
    set_fact:
      bkr_hosts: "{{ bkr_hosts | default([]) }} + {{ result['hosts'] }}"
    with_items: "{{ bkr.results }}"
    loop_control:
      loop_var: result

  - name: "split id and url into separate components"
    set_fact:
      bkr_id_values: "{{ bkr_id_values | default([]) + [{ 'id': result.key, 'url': result.value }] }}"
    with_dict: "{{ bkr_ids }}"
    loop_control:
      loop_var: result

  - name: combine bkr_id_values with bkr_hosts
    set_fact:
      tmp_hosts: "{{ item | combine(bkr_hosts | selectattr('id', 'equalto', item.id) | first) }}"
    with_items: "{{ bkr_id_values }}"
    register: tmp_info

  - name: "Set topology_outputs_beaker_server to the current job(s) data"
    set_fact:
      topology_outputs_beaker_server: "{{ tmp_info.results | map(attribute='ansible_facts.tmp_hosts') | list }}"

  - name: "Add beaker job info to the rundb"
    rundb:
      conn_str: "{{ rundb_conn }}"
      operation: update
      table: "{{ target }}"
      key: "outputs"
      value: "[{{ {'bkr_id_values': bkr_id_values} }}]"
      run_id: "{{ rundb_id }}"
    when: not generate_resources

  - name: "fetch beaker details"
    bkr_info:
      ids: "{{ bkr_ids }}"
      # pull provision params from the first (should be only) result
      provision_params: "{{ bkr.results[0].provision_params }}"
    register: _topo_out_bkr_server

  - name: "set topology_outputs_beaker_server"
    set_fact:
      tmp_topo_bkr_srvc: "{{ item | combine(_topo_out_bkr_server['hosts'] | selectattr('id', 'equalto', item.id) | first) }}"
    when: state == 'present'
    with_items: "{{ topology_outputs_beaker_server }}"
    register: tmp_bkr

  - name: "Set topology_outputs_beaker_server to the current job(s) data"
    set_fact:
      topology_outputs_beaker_server: "{{ tmp_bkr.results | map(attribute='ansible_facts.tmp_topo_bkr_srvc') | list }}"

