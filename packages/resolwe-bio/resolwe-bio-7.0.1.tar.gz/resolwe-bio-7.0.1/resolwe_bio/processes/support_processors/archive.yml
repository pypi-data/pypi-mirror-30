- slug: archive-samples
  name: Archive samples
  data_name: Sample archive
  requirements:
    expression-engine: jinja
    executor:
      docker:
        image: resolwebio/utils:1.2.0
  version: 0.0.5
  type: "data:archive:samples"
  category: other
  persistence: TEMP
  scheduling_class: interactive
  description: >
    Create an archive of output files. The ouput folder
    structure is organized by sample slug and data object's
    output-field names.
  input:
    - name: data
      label: Data list
      type: list:data
    - name: fields
      label: Output file fields
      type: list:basic:string
    - name: j
      label: Junk paths
      type: basic:boolean
      description: Store just names of saved files (junk the path)
      default: False
  output:
    - name: archive
      label: Archive
      type: basic:file
  run:
    runtime: polyglot
    language: bash
    program: |

      # make folders with data
      {% for d in data %}
        {% set species = d.species or 'other_data' %}
        {% for field in fields %}
          {% if d[field].file %}
            mkdir -p {{ species }}/{{ d.build }}/{{ d|sample_slug }}/{{ field }}/
            ln -s --backup=numbered {{ d[field].file }} {{ species }}/{{ d.build }}/{{ d|sample_slug }}/{{ field }}/{{ d[field].file|basename }}
            {% for ref in d[field].refs %}
              ln -s --backup=numbered {{ ref }} {{ species }}/{{ d.build }}/{{ d|sample_slug }}/{{ field }}/{{ ref|basename }}
            {% endfor %}
          {% endif %}
          {% for file in d[field] %}
            {% if file.file %}
              mkdir -p {{ species }}/{{ d.build }}/{{ d|sample_slug }}/{{ field }}/
              ln -s --backup=numbered {{ file.file }} {{ species }}/{{ d.build }}/{{ d|sample_slug }}/{{ field }}/{{ file.file|basename }}
              {% for ref in file.refs %}
                ln -s --backup=numbered {{ ref }} {{ species }}/{{ d.build }}/{{ d|sample_slug }}/{{ field }}/{{ ref|basename }}
              {% endfor %}
            {% endif %}
          {% endfor %}
        {% endfor %}

        # select data for IGV
        {% if (d|type).startswith('data:alignment:bam') %}
          mv {{ species }}/{{ d.build }}/{{ d|sample_slug }}/bai/{{ d.bai.file|basename }} {{ species }}/{{ d.build }}/{{d|sample_slug}}/bam/{{ d.bai.file|basename }}
          rm -r {{ species }}/{{ d.build }}/{{d|sample_slug}}/bai
          echo {{ species }}/{{ d.build }}/{{ d|sample_slug }}/bam/{{ d.bam.file|basename }} >> {{ species }}_{{ d.build }}_temp_igv.txt

        {% elif (d|type).startswith('data:variants:vcf') %}
          echo {{ species }}/{{ d.build }}/{{ d|sample_slug }}/vcf/{{ d.vcf.file|basename }} >> {{ species }}_{{ d.build }}_temp_igv.txt
        {% endif %}

        # select expression files to merge expressions
        {% if (d|type).startswith('data:expression') %}
          echo {{ d.species }}/{{ d.build }}/{{ d|sample_slug }}/exp/{{ d.exp.file|basename }} >> {{ d.species }}_{{ d.build }}_{{ d.exp_type }}_expressions_temp.txt
        {% endif %}

      {% endfor %}

      # create IGV for data from the same Species and Build
      for txt_file in *temp_igv.txt; do
        make_igv_session_archive.py --input_file "${txt_file}"
      done

      mkdir igv
      mv *.xml igv/

      # merge expressions
      for txt_file in *expressions_temp.txt; do
        expressionmerge_archive.py --input_file "${txt_file}"
      done

      zip -0 -r {% if j %}-j {% endif %}results.zip */
      re-save-file archive results.zip
