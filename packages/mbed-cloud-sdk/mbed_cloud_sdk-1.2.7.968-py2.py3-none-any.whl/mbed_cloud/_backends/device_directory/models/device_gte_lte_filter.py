# coding: utf-8

"""
    Device Directory API

    This is the API Documentation for the Mbed Device Directory service.

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeviceGteLteFilter(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'manifest_timestamp': 'datetime',
        'bootstrap_expiration_date': 'datetime',
        'created_at': 'datetime',
        'connector_expiration_date': 'datetime',
        'updated_at': 'datetime',
        'etag': 'datetime',
        'enrolment_list_timestamp': 'datetime',
        'bootstrapped_timestamp': 'datetime'
    }

    attribute_map = {
        'manifest_timestamp': 'manifest_timestamp',
        'bootstrap_expiration_date': 'bootstrap_expiration_date',
        'created_at': 'created_at',
        'connector_expiration_date': 'connector_expiration_date',
        'updated_at': 'updated_at',
        'etag': 'etag',
        'enrolment_list_timestamp': 'enrolment_list_timestamp',
        'bootstrapped_timestamp': 'bootstrapped_timestamp'
    }

    def __init__(self, manifest_timestamp=None, bootstrap_expiration_date=None, created_at=None, connector_expiration_date=None, updated_at=None, etag=None, enrolment_list_timestamp=None, bootstrapped_timestamp=None):
        """
        DeviceGteLteFilter - a model defined in Swagger
        """

        self._manifest_timestamp = manifest_timestamp
        self._bootstrap_expiration_date = bootstrap_expiration_date
        self._created_at = created_at
        self._connector_expiration_date = connector_expiration_date
        self._updated_at = updated_at
        self._etag = etag
        self._enrolment_list_timestamp = enrolment_list_timestamp
        self._bootstrapped_timestamp = bootstrapped_timestamp
        self.discriminator = None

    @property
    def manifest_timestamp(self):
        """
        Gets the manifest_timestamp of this DeviceGteLteFilter.

        :return: The manifest_timestamp of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._manifest_timestamp

    @manifest_timestamp.setter
    def manifest_timestamp(self, manifest_timestamp):
        """
        Sets the manifest_timestamp of this DeviceGteLteFilter.

        :param manifest_timestamp: The manifest_timestamp of this DeviceGteLteFilter.
        :type: datetime
        """

        self._manifest_timestamp = manifest_timestamp

    @property
    def bootstrap_expiration_date(self):
        """
        Gets the bootstrap_expiration_date of this DeviceGteLteFilter.

        :return: The bootstrap_expiration_date of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._bootstrap_expiration_date

    @bootstrap_expiration_date.setter
    def bootstrap_expiration_date(self, bootstrap_expiration_date):
        """
        Sets the bootstrap_expiration_date of this DeviceGteLteFilter.

        :param bootstrap_expiration_date: The bootstrap_expiration_date of this DeviceGteLteFilter.
        :type: datetime
        """

        self._bootstrap_expiration_date = bootstrap_expiration_date

    @property
    def created_at(self):
        """
        Gets the created_at of this DeviceGteLteFilter.

        :return: The created_at of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this DeviceGteLteFilter.

        :param created_at: The created_at of this DeviceGteLteFilter.
        :type: datetime
        """

        self._created_at = created_at

    @property
    def connector_expiration_date(self):
        """
        Gets the connector_expiration_date of this DeviceGteLteFilter.

        :return: The connector_expiration_date of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._connector_expiration_date

    @connector_expiration_date.setter
    def connector_expiration_date(self, connector_expiration_date):
        """
        Sets the connector_expiration_date of this DeviceGteLteFilter.

        :param connector_expiration_date: The connector_expiration_date of this DeviceGteLteFilter.
        :type: datetime
        """

        self._connector_expiration_date = connector_expiration_date

    @property
    def updated_at(self):
        """
        Gets the updated_at of this DeviceGteLteFilter.

        :return: The updated_at of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this DeviceGteLteFilter.

        :param updated_at: The updated_at of this DeviceGteLteFilter.
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def etag(self):
        """
        Gets the etag of this DeviceGteLteFilter.

        :return: The etag of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """
        Sets the etag of this DeviceGteLteFilter.

        :param etag: The etag of this DeviceGteLteFilter.
        :type: datetime
        """

        self._etag = etag

    @property
    def enrolment_list_timestamp(self):
        """
        Gets the enrolment_list_timestamp of this DeviceGteLteFilter.

        :return: The enrolment_list_timestamp of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._enrolment_list_timestamp

    @enrolment_list_timestamp.setter
    def enrolment_list_timestamp(self, enrolment_list_timestamp):
        """
        Sets the enrolment_list_timestamp of this DeviceGteLteFilter.

        :param enrolment_list_timestamp: The enrolment_list_timestamp of this DeviceGteLteFilter.
        :type: datetime
        """

        self._enrolment_list_timestamp = enrolment_list_timestamp

    @property
    def bootstrapped_timestamp(self):
        """
        Gets the bootstrapped_timestamp of this DeviceGteLteFilter.

        :return: The bootstrapped_timestamp of this DeviceGteLteFilter.
        :rtype: datetime
        """
        return self._bootstrapped_timestamp

    @bootstrapped_timestamp.setter
    def bootstrapped_timestamp(self, bootstrapped_timestamp):
        """
        Sets the bootstrapped_timestamp of this DeviceGteLteFilter.

        :param bootstrapped_timestamp: The bootstrapped_timestamp of this DeviceGteLteFilter.
        :type: datetime
        """

        self._bootstrapped_timestamp = bootstrapped_timestamp

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeviceGteLteFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
