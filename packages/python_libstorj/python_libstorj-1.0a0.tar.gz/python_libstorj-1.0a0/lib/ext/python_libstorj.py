# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_python_libstorj', [dirname(__file__)])
        except ImportError:
            import _python_libstorj
            return _python_libstorj
        if fp is not None:
            try:
                _mod = imp.load_module('_python_libstorj', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _python_libstorj = swig_import_helper()
    del swig_import_helper
else:
    import _python_libstorj
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def storj_mnemonic_generate(strength):
    return _python_libstorj.storj_mnemonic_generate(strength)
storj_mnemonic_generate = _python_libstorj.storj_mnemonic_generate

_python_libstorj.STORJ_TRANSFER_OK_swigconstant(_python_libstorj)
STORJ_TRANSFER_OK = _python_libstorj.STORJ_TRANSFER_OK

_python_libstorj.STORJ_TRANSFER_CANCELED_swigconstant(_python_libstorj)
STORJ_TRANSFER_CANCELED = _python_libstorj.STORJ_TRANSFER_CANCELED

_python_libstorj.STORJ_BRIDGE_REQUEST_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_REQUEST_ERROR = _python_libstorj.STORJ_BRIDGE_REQUEST_ERROR

_python_libstorj.STORJ_BRIDGE_AUTH_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_AUTH_ERROR = _python_libstorj.STORJ_BRIDGE_AUTH_ERROR

_python_libstorj.STORJ_BRIDGE_TOKEN_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_TOKEN_ERROR = _python_libstorj.STORJ_BRIDGE_TOKEN_ERROR

_python_libstorj.STORJ_BRIDGE_TIMEOUT_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_TIMEOUT_ERROR = _python_libstorj.STORJ_BRIDGE_TIMEOUT_ERROR

_python_libstorj.STORJ_BRIDGE_INTERNAL_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_INTERNAL_ERROR = _python_libstorj.STORJ_BRIDGE_INTERNAL_ERROR

_python_libstorj.STORJ_BRIDGE_RATE_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_RATE_ERROR = _python_libstorj.STORJ_BRIDGE_RATE_ERROR

_python_libstorj.STORJ_BRIDGE_BUCKET_NOTFOUND_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_BUCKET_NOTFOUND_ERROR = _python_libstorj.STORJ_BRIDGE_BUCKET_NOTFOUND_ERROR

_python_libstorj.STORJ_BRIDGE_FILE_NOTFOUND_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_FILE_NOTFOUND_ERROR = _python_libstorj.STORJ_BRIDGE_FILE_NOTFOUND_ERROR

_python_libstorj.STORJ_BRIDGE_JSON_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_JSON_ERROR = _python_libstorj.STORJ_BRIDGE_JSON_ERROR

_python_libstorj.STORJ_BRIDGE_FRAME_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_FRAME_ERROR = _python_libstorj.STORJ_BRIDGE_FRAME_ERROR

_python_libstorj.STORJ_BRIDGE_POINTER_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_POINTER_ERROR = _python_libstorj.STORJ_BRIDGE_POINTER_ERROR

_python_libstorj.STORJ_BRIDGE_REPOINTER_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_REPOINTER_ERROR = _python_libstorj.STORJ_BRIDGE_REPOINTER_ERROR

_python_libstorj.STORJ_BRIDGE_FILEINFO_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_FILEINFO_ERROR = _python_libstorj.STORJ_BRIDGE_FILEINFO_ERROR

_python_libstorj.STORJ_BRIDGE_BUCKET_FILE_EXISTS_swigconstant(_python_libstorj)
STORJ_BRIDGE_BUCKET_FILE_EXISTS = _python_libstorj.STORJ_BRIDGE_BUCKET_FILE_EXISTS

_python_libstorj.STORJ_BRIDGE_OFFER_ERROR_swigconstant(_python_libstorj)
STORJ_BRIDGE_OFFER_ERROR = _python_libstorj.STORJ_BRIDGE_OFFER_ERROR

_python_libstorj.STORJ_FARMER_REQUEST_ERROR_swigconstant(_python_libstorj)
STORJ_FARMER_REQUEST_ERROR = _python_libstorj.STORJ_FARMER_REQUEST_ERROR

_python_libstorj.STORJ_FARMER_TIMEOUT_ERROR_swigconstant(_python_libstorj)
STORJ_FARMER_TIMEOUT_ERROR = _python_libstorj.STORJ_FARMER_TIMEOUT_ERROR

_python_libstorj.STORJ_FARMER_AUTH_ERROR_swigconstant(_python_libstorj)
STORJ_FARMER_AUTH_ERROR = _python_libstorj.STORJ_FARMER_AUTH_ERROR

_python_libstorj.STORJ_FARMER_EXHAUSTED_ERROR_swigconstant(_python_libstorj)
STORJ_FARMER_EXHAUSTED_ERROR = _python_libstorj.STORJ_FARMER_EXHAUSTED_ERROR

_python_libstorj.STORJ_FARMER_INTEGRITY_ERROR_swigconstant(_python_libstorj)
STORJ_FARMER_INTEGRITY_ERROR = _python_libstorj.STORJ_FARMER_INTEGRITY_ERROR

_python_libstorj.STORJ_FILE_INTEGRITY_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_INTEGRITY_ERROR = _python_libstorj.STORJ_FILE_INTEGRITY_ERROR

_python_libstorj.STORJ_FILE_WRITE_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_WRITE_ERROR = _python_libstorj.STORJ_FILE_WRITE_ERROR

_python_libstorj.STORJ_FILE_ENCRYPTION_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_ENCRYPTION_ERROR = _python_libstorj.STORJ_FILE_ENCRYPTION_ERROR

_python_libstorj.STORJ_FILE_SIZE_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_SIZE_ERROR = _python_libstorj.STORJ_FILE_SIZE_ERROR

_python_libstorj.STORJ_FILE_DECRYPTION_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_DECRYPTION_ERROR = _python_libstorj.STORJ_FILE_DECRYPTION_ERROR

_python_libstorj.STORJ_FILE_GENERATE_HMAC_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_GENERATE_HMAC_ERROR = _python_libstorj.STORJ_FILE_GENERATE_HMAC_ERROR

_python_libstorj.STORJ_FILE_READ_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_READ_ERROR = _python_libstorj.STORJ_FILE_READ_ERROR

_python_libstorj.STORJ_FILE_SHARD_MISSING_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_SHARD_MISSING_ERROR = _python_libstorj.STORJ_FILE_SHARD_MISSING_ERROR

_python_libstorj.STORJ_FILE_RECOVER_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_RECOVER_ERROR = _python_libstorj.STORJ_FILE_RECOVER_ERROR

_python_libstorj.STORJ_FILE_RESIZE_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_RESIZE_ERROR = _python_libstorj.STORJ_FILE_RESIZE_ERROR

_python_libstorj.STORJ_FILE_UNSUPPORTED_ERASURE_swigconstant(_python_libstorj)
STORJ_FILE_UNSUPPORTED_ERASURE = _python_libstorj.STORJ_FILE_UNSUPPORTED_ERASURE

_python_libstorj.STORJ_FILE_PARITY_ERROR_swigconstant(_python_libstorj)
STORJ_FILE_PARITY_ERROR = _python_libstorj.STORJ_FILE_PARITY_ERROR

_python_libstorj.STORJ_MEMORY_ERROR_swigconstant(_python_libstorj)
STORJ_MEMORY_ERROR = _python_libstorj.STORJ_MEMORY_ERROR

_python_libstorj.STORJ_MAPPING_ERROR_swigconstant(_python_libstorj)
STORJ_MAPPING_ERROR = _python_libstorj.STORJ_MAPPING_ERROR

_python_libstorj.STORJ_UNMAPPING_ERROR_swigconstant(_python_libstorj)
STORJ_UNMAPPING_ERROR = _python_libstorj.STORJ_UNMAPPING_ERROR

_python_libstorj.STORJ_QUEUE_ERROR_swigconstant(_python_libstorj)
STORJ_QUEUE_ERROR = _python_libstorj.STORJ_QUEUE_ERROR

_python_libstorj.STORJ_META_ENCRYPTION_ERROR_swigconstant(_python_libstorj)
STORJ_META_ENCRYPTION_ERROR = _python_libstorj.STORJ_META_ENCRYPTION_ERROR

_python_libstorj.STORJ_META_DECRYPTION_ERROR_swigconstant(_python_libstorj)
STORJ_META_DECRYPTION_ERROR = _python_libstorj.STORJ_META_DECRYPTION_ERROR

_python_libstorj.STORJ_HEX_DECODE_ERROR_swigconstant(_python_libstorj)
STORJ_HEX_DECODE_ERROR = _python_libstorj.STORJ_HEX_DECODE_ERROR

_python_libstorj.STORJ_REPORT_SUCCESS_swigconstant(_python_libstorj)
STORJ_REPORT_SUCCESS = _python_libstorj.STORJ_REPORT_SUCCESS

_python_libstorj.STORJ_REPORT_FAILURE_swigconstant(_python_libstorj)
STORJ_REPORT_FAILURE = _python_libstorj.STORJ_REPORT_FAILURE

_python_libstorj.STORJ_REPORT_FAILED_INTEGRITY_swigconstant(_python_libstorj)
STORJ_REPORT_FAILED_INTEGRITY = _python_libstorj.STORJ_REPORT_FAILED_INTEGRITY

_python_libstorj.STORJ_REPORT_SHARD_DOWNLOADED_swigconstant(_python_libstorj)
STORJ_REPORT_SHARD_DOWNLOADED = _python_libstorj.STORJ_REPORT_SHARD_DOWNLOADED

_python_libstorj.STORJ_REPORT_SHARD_UPLOADED_swigconstant(_python_libstorj)
STORJ_REPORT_SHARD_UPLOADED = _python_libstorj.STORJ_REPORT_SHARD_UPLOADED

_python_libstorj.STORJ_REPORT_DOWNLOAD_ERROR_swigconstant(_python_libstorj)
STORJ_REPORT_DOWNLOAD_ERROR = _python_libstorj.STORJ_REPORT_DOWNLOAD_ERROR

_python_libstorj.STORJ_REPORT_UPLOAD_ERROR_swigconstant(_python_libstorj)
STORJ_REPORT_UPLOAD_ERROR = _python_libstorj.STORJ_REPORT_UPLOAD_ERROR

_python_libstorj.STORJ_SHARD_CHALLENGES_swigconstant(_python_libstorj)
STORJ_SHARD_CHALLENGES = _python_libstorj.STORJ_SHARD_CHALLENGES

_python_libstorj.STORJ_LOW_SPEED_LIMIT_swigconstant(_python_libstorj)
STORJ_LOW_SPEED_LIMIT = _python_libstorj.STORJ_LOW_SPEED_LIMIT

_python_libstorj.STORJ_LOW_SPEED_TIME_swigconstant(_python_libstorj)
STORJ_LOW_SPEED_TIME = _python_libstorj.STORJ_LOW_SPEED_TIME

_python_libstorj.STORJ_HTTP_TIMEOUT_swigconstant(_python_libstorj)
STORJ_HTTP_TIMEOUT = _python_libstorj.STORJ_HTTP_TIMEOUT
class storj_encryption_ctx_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_encryption_ctx_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_encryption_ctx_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["encryption_ctr"] = _python_libstorj.storj_encryption_ctx_t_encryption_ctr_set
    __swig_getmethods__["encryption_ctr"] = _python_libstorj.storj_encryption_ctx_t_encryption_ctr_get
    if _newclass:
        encryption_ctr = _swig_property(_python_libstorj.storj_encryption_ctx_t_encryption_ctr_get, _python_libstorj.storj_encryption_ctx_t_encryption_ctr_set)
    __swig_setmethods__["encryption_key"] = _python_libstorj.storj_encryption_ctx_t_encryption_key_set
    __swig_getmethods__["encryption_key"] = _python_libstorj.storj_encryption_ctx_t_encryption_key_get
    if _newclass:
        encryption_key = _swig_property(_python_libstorj.storj_encryption_ctx_t_encryption_key_get, _python_libstorj.storj_encryption_ctx_t_encryption_key_set)
    __swig_setmethods__["ctx"] = _python_libstorj.storj_encryption_ctx_t_ctx_set
    __swig_getmethods__["ctx"] = _python_libstorj.storj_encryption_ctx_t_ctx_get
    if _newclass:
        ctx = _swig_property(_python_libstorj.storj_encryption_ctx_t_ctx_get, _python_libstorj.storj_encryption_ctx_t_ctx_set)

    def __init__(self):
        this = _python_libstorj.new_storj_encryption_ctx_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_encryption_ctx_t
    __del__ = lambda self: None
storj_encryption_ctx_t_swigregister = _python_libstorj.storj_encryption_ctx_t_swigregister
storj_encryption_ctx_t_swigregister(storj_encryption_ctx_t)


_python_libstorj.STORJ_REPORT_NOT_PREPARED_swigconstant(_python_libstorj)
STORJ_REPORT_NOT_PREPARED = _python_libstorj.STORJ_REPORT_NOT_PREPARED

_python_libstorj.STORJ_REPORT_AWAITING_SEND_swigconstant(_python_libstorj)
STORJ_REPORT_AWAITING_SEND = _python_libstorj.STORJ_REPORT_AWAITING_SEND

_python_libstorj.STORJ_REPORT_SENDING_swigconstant(_python_libstorj)
STORJ_REPORT_SENDING = _python_libstorj.STORJ_REPORT_SENDING

_python_libstorj.STORJ_REPORT_SENT_swigconstant(_python_libstorj)
STORJ_REPORT_SENT = _python_libstorj.STORJ_REPORT_SENT
class BridgeOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BridgeOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BridgeOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["proto"] = _python_libstorj.BridgeOptions_proto_set
    __swig_getmethods__["proto"] = _python_libstorj.BridgeOptions_proto_get
    if _newclass:
        proto = _swig_property(_python_libstorj.BridgeOptions_proto_get, _python_libstorj.BridgeOptions_proto_set)
    __swig_setmethods__["host"] = _python_libstorj.BridgeOptions_host_set
    __swig_getmethods__["host"] = _python_libstorj.BridgeOptions_host_get
    if _newclass:
        host = _swig_property(_python_libstorj.BridgeOptions_host_get, _python_libstorj.BridgeOptions_host_set)
    __swig_setmethods__["port"] = _python_libstorj.BridgeOptions_port_set
    __swig_getmethods__["port"] = _python_libstorj.BridgeOptions_port_get
    if _newclass:
        port = _swig_property(_python_libstorj.BridgeOptions_port_get, _python_libstorj.BridgeOptions_port_set)
    __swig_setmethods__["user"] = _python_libstorj.BridgeOptions_user_set
    __swig_getmethods__["user"] = _python_libstorj.BridgeOptions_user_get
    if _newclass:
        user = _swig_property(_python_libstorj.BridgeOptions_user_get, _python_libstorj.BridgeOptions_user_set)
    __swig_setmethods__["_pass"] = _python_libstorj.BridgeOptions__pass_set
    __swig_getmethods__["_pass"] = _python_libstorj.BridgeOptions__pass_get
    if _newclass:
        _pass = _swig_property(_python_libstorj.BridgeOptions__pass_get, _python_libstorj.BridgeOptions__pass_set)

    def __init__(self):
        this = _python_libstorj.new_BridgeOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_BridgeOptions
    __del__ = lambda self: None
BridgeOptions_swigregister = _python_libstorj.BridgeOptions_swigregister
BridgeOptions_swigregister(BridgeOptions)

class EncryptOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncryptOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EncryptOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mnemonic"] = _python_libstorj.EncryptOptions_mnemonic_set
    __swig_getmethods__["mnemonic"] = _python_libstorj.EncryptOptions_mnemonic_get
    if _newclass:
        mnemonic = _swig_property(_python_libstorj.EncryptOptions_mnemonic_get, _python_libstorj.EncryptOptions_mnemonic_set)

    def __init__(self):
        this = _python_libstorj.new_EncryptOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_EncryptOptions
    __del__ = lambda self: None
EncryptOptions_swigregister = _python_libstorj.EncryptOptions_swigregister
EncryptOptions_swigregister(EncryptOptions)

class HttpOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user_agent"] = _python_libstorj.HttpOptions_user_agent_set
    __swig_getmethods__["user_agent"] = _python_libstorj.HttpOptions_user_agent_get
    if _newclass:
        user_agent = _swig_property(_python_libstorj.HttpOptions_user_agent_get, _python_libstorj.HttpOptions_user_agent_set)
    __swig_setmethods__["proxy_url"] = _python_libstorj.HttpOptions_proxy_url_set
    __swig_getmethods__["proxy_url"] = _python_libstorj.HttpOptions_proxy_url_get
    if _newclass:
        proxy_url = _swig_property(_python_libstorj.HttpOptions_proxy_url_get, _python_libstorj.HttpOptions_proxy_url_set)
    __swig_setmethods__["cainfo_path"] = _python_libstorj.HttpOptions_cainfo_path_set
    __swig_getmethods__["cainfo_path"] = _python_libstorj.HttpOptions_cainfo_path_get
    if _newclass:
        cainfo_path = _swig_property(_python_libstorj.HttpOptions_cainfo_path_get, _python_libstorj.HttpOptions_cainfo_path_set)
    __swig_setmethods__["low_speed_limit"] = _python_libstorj.HttpOptions_low_speed_limit_set
    __swig_getmethods__["low_speed_limit"] = _python_libstorj.HttpOptions_low_speed_limit_get
    if _newclass:
        low_speed_limit = _swig_property(_python_libstorj.HttpOptions_low_speed_limit_get, _python_libstorj.HttpOptions_low_speed_limit_set)
    __swig_setmethods__["low_speed_time"] = _python_libstorj.HttpOptions_low_speed_time_set
    __swig_getmethods__["low_speed_time"] = _python_libstorj.HttpOptions_low_speed_time_get
    if _newclass:
        low_speed_time = _swig_property(_python_libstorj.HttpOptions_low_speed_time_get, _python_libstorj.HttpOptions_low_speed_time_set)
    __swig_setmethods__["timeout"] = _python_libstorj.HttpOptions_timeout_set
    __swig_getmethods__["timeout"] = _python_libstorj.HttpOptions_timeout_get
    if _newclass:
        timeout = _swig_property(_python_libstorj.HttpOptions_timeout_get, _python_libstorj.HttpOptions_timeout_set)

    def __init__(self):
        this = _python_libstorj.new_HttpOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_HttpOptions
    __del__ = lambda self: None
HttpOptions_swigregister = _python_libstorj.HttpOptions_swigregister
HttpOptions_swigregister(HttpOptions)

class LogOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logger"] = _python_libstorj.LogOptions_logger_set
    __swig_getmethods__["logger"] = _python_libstorj.LogOptions_logger_get
    if _newclass:
        logger = _swig_property(_python_libstorj.LogOptions_logger_get, _python_libstorj.LogOptions_logger_set)
    __swig_setmethods__["level"] = _python_libstorj.LogOptions_level_set
    __swig_getmethods__["level"] = _python_libstorj.LogOptions_level_get
    if _newclass:
        level = _swig_property(_python_libstorj.LogOptions_level_get, _python_libstorj.LogOptions_level_set)

    def __init__(self):
        this = _python_libstorj.new_LogOptions()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_LogOptions
    __del__ = lambda self: None
LogOptions_swigregister = _python_libstorj.LogOptions_swigregister
LogOptions_swigregister(LogOptions)

class storj_log_levels_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_log_levels_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_log_levels_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["debug"] = _python_libstorj.storj_log_levels_t_debug_set
    __swig_getmethods__["debug"] = _python_libstorj.storj_log_levels_t_debug_get
    if _newclass:
        debug = _swig_property(_python_libstorj.storj_log_levels_t_debug_get, _python_libstorj.storj_log_levels_t_debug_set)
    __swig_setmethods__["info"] = _python_libstorj.storj_log_levels_t_info_set
    __swig_getmethods__["info"] = _python_libstorj.storj_log_levels_t_info_get
    if _newclass:
        info = _swig_property(_python_libstorj.storj_log_levels_t_info_get, _python_libstorj.storj_log_levels_t_info_set)
    __swig_setmethods__["warn"] = _python_libstorj.storj_log_levels_t_warn_set
    __swig_getmethods__["warn"] = _python_libstorj.storj_log_levels_t_warn_get
    if _newclass:
        warn = _swig_property(_python_libstorj.storj_log_levels_t_warn_get, _python_libstorj.storj_log_levels_t_warn_set)
    __swig_setmethods__["error"] = _python_libstorj.storj_log_levels_t_error_set
    __swig_getmethods__["error"] = _python_libstorj.storj_log_levels_t_error_get
    if _newclass:
        error = _swig_property(_python_libstorj.storj_log_levels_t_error_get, _python_libstorj.storj_log_levels_t_error_set)

    def __init__(self):
        this = _python_libstorj.new_storj_log_levels_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_log_levels_t
    __del__ = lambda self: None
storj_log_levels_t_swigregister = _python_libstorj.storj_log_levels_t_swigregister
storj_log_levels_t_swigregister(storj_log_levels_t)

class storj_env_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_env_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_env_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bridge_options"] = _python_libstorj.storj_env_t_bridge_options_set
    __swig_getmethods__["bridge_options"] = _python_libstorj.storj_env_t_bridge_options_get
    if _newclass:
        bridge_options = _swig_property(_python_libstorj.storj_env_t_bridge_options_get, _python_libstorj.storj_env_t_bridge_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.storj_env_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.storj_env_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.storj_env_t_encrypt_options_get, _python_libstorj.storj_env_t_encrypt_options_set)
    __swig_setmethods__["http_options"] = _python_libstorj.storj_env_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.storj_env_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.storj_env_t_http_options_get, _python_libstorj.storj_env_t_http_options_set)
    __swig_setmethods__["log_options"] = _python_libstorj.storj_env_t_log_options_set
    __swig_getmethods__["log_options"] = _python_libstorj.storj_env_t_log_options_get
    if _newclass:
        log_options = _swig_property(_python_libstorj.storj_env_t_log_options_get, _python_libstorj.storj_env_t_log_options_set)
    __swig_setmethods__["tmp_path"] = _python_libstorj.storj_env_t_tmp_path_set
    __swig_getmethods__["tmp_path"] = _python_libstorj.storj_env_t_tmp_path_get
    if _newclass:
        tmp_path = _swig_property(_python_libstorj.storj_env_t_tmp_path_get, _python_libstorj.storj_env_t_tmp_path_set)
    __swig_setmethods__["loop"] = _python_libstorj.storj_env_t_loop_set
    __swig_getmethods__["loop"] = _python_libstorj.storj_env_t_loop_get
    if _newclass:
        loop = _swig_property(_python_libstorj.storj_env_t_loop_get, _python_libstorj.storj_env_t_loop_set)
    __swig_setmethods__["log"] = _python_libstorj.storj_env_t_log_set
    __swig_getmethods__["log"] = _python_libstorj.storj_env_t_log_get
    if _newclass:
        log = _swig_property(_python_libstorj.storj_env_t_log_get, _python_libstorj.storj_env_t_log_set)

    def __init__(self):
        this = _python_libstorj.new_storj_env_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_env_t
    __del__ = lambda self: None
storj_env_t_swigregister = _python_libstorj.storj_env_t_swigregister
storj_env_t_swigregister(storj_env_t)

class json_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, json_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, json_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.json_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.json_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.json_request_t_http_options_get, _python_libstorj.json_request_t_http_options_set)
    __swig_setmethods__["options"] = _python_libstorj.json_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.json_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.json_request_t_options_get, _python_libstorj.json_request_t_options_set)
    __swig_setmethods__["method"] = _python_libstorj.json_request_t_method_set
    __swig_getmethods__["method"] = _python_libstorj.json_request_t_method_get
    if _newclass:
        method = _swig_property(_python_libstorj.json_request_t_method_get, _python_libstorj.json_request_t_method_set)
    __swig_setmethods__["path"] = _python_libstorj.json_request_t_path_set
    __swig_getmethods__["path"] = _python_libstorj.json_request_t_path_get
    if _newclass:
        path = _swig_property(_python_libstorj.json_request_t_path_get, _python_libstorj.json_request_t_path_set)
    __swig_setmethods__["auth"] = _python_libstorj.json_request_t_auth_set
    __swig_getmethods__["auth"] = _python_libstorj.json_request_t_auth_get
    if _newclass:
        auth = _swig_property(_python_libstorj.json_request_t_auth_get, _python_libstorj.json_request_t_auth_set)
    __swig_setmethods__["body"] = _python_libstorj.json_request_t_body_set
    __swig_getmethods__["body"] = _python_libstorj.json_request_t_body_get
    if _newclass:
        body = _swig_property(_python_libstorj.json_request_t_body_get, _python_libstorj.json_request_t_body_set)
    __swig_setmethods__["response"] = _python_libstorj.json_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.json_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.json_request_t_response_get, _python_libstorj.json_request_t_response_set)
    __swig_setmethods__["error_code"] = _python_libstorj.json_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.json_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.json_request_t_error_code_get, _python_libstorj.json_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.json_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.json_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.json_request_t_status_code_get, _python_libstorj.json_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.json_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.json_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.json_request_t_handle_get, _python_libstorj.json_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_json_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_json_request_t
    __del__ = lambda self: None
json_request_t_swigregister = _python_libstorj.json_request_t_swigregister
json_request_t_swigregister(json_request_t)

class storj_bucket_meta_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_bucket_meta_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_bucket_meta_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["created"] = _python_libstorj.storj_bucket_meta_t_created_set
    __swig_getmethods__["created"] = _python_libstorj.storj_bucket_meta_t_created_get
    if _newclass:
        created = _swig_property(_python_libstorj.storj_bucket_meta_t_created_get, _python_libstorj.storj_bucket_meta_t_created_set)
    __swig_setmethods__["name"] = _python_libstorj.storj_bucket_meta_t_name_set
    __swig_getmethods__["name"] = _python_libstorj.storj_bucket_meta_t_name_get
    if _newclass:
        name = _swig_property(_python_libstorj.storj_bucket_meta_t_name_get, _python_libstorj.storj_bucket_meta_t_name_set)
    __swig_setmethods__["id"] = _python_libstorj.storj_bucket_meta_t_id_set
    __swig_getmethods__["id"] = _python_libstorj.storj_bucket_meta_t_id_get
    if _newclass:
        id = _swig_property(_python_libstorj.storj_bucket_meta_t_id_get, _python_libstorj.storj_bucket_meta_t_id_set)
    __swig_setmethods__["decrypted"] = _python_libstorj.storj_bucket_meta_t_decrypted_set
    __swig_getmethods__["decrypted"] = _python_libstorj.storj_bucket_meta_t_decrypted_get
    if _newclass:
        decrypted = _swig_property(_python_libstorj.storj_bucket_meta_t_decrypted_get, _python_libstorj.storj_bucket_meta_t_decrypted_set)

    def __init__(self):
        this = _python_libstorj.new_storj_bucket_meta_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_bucket_meta_t
    __del__ = lambda self: None
storj_bucket_meta_t_swigregister = _python_libstorj.storj_bucket_meta_t_swigregister
storj_bucket_meta_t_swigregister(storj_bucket_meta_t)

class create_bucket_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, create_bucket_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, create_bucket_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.create_bucket_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.create_bucket_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.create_bucket_request_t_http_options_get, _python_libstorj.create_bucket_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.create_bucket_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.create_bucket_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.create_bucket_request_t_encrypt_options_get, _python_libstorj.create_bucket_request_t_encrypt_options_set)
    __swig_setmethods__["bridge_options"] = _python_libstorj.create_bucket_request_t_bridge_options_set
    __swig_getmethods__["bridge_options"] = _python_libstorj.create_bucket_request_t_bridge_options_get
    if _newclass:
        bridge_options = _swig_property(_python_libstorj.create_bucket_request_t_bridge_options_get, _python_libstorj.create_bucket_request_t_bridge_options_set)
    __swig_setmethods__["bucket_name"] = _python_libstorj.create_bucket_request_t_bucket_name_set
    __swig_getmethods__["bucket_name"] = _python_libstorj.create_bucket_request_t_bucket_name_get
    if _newclass:
        bucket_name = _swig_property(_python_libstorj.create_bucket_request_t_bucket_name_get, _python_libstorj.create_bucket_request_t_bucket_name_set)
    __swig_setmethods__["encrypted_bucket_name"] = _python_libstorj.create_bucket_request_t_encrypted_bucket_name_set
    __swig_getmethods__["encrypted_bucket_name"] = _python_libstorj.create_bucket_request_t_encrypted_bucket_name_get
    if _newclass:
        encrypted_bucket_name = _swig_property(_python_libstorj.create_bucket_request_t_encrypted_bucket_name_get, _python_libstorj.create_bucket_request_t_encrypted_bucket_name_set)
    __swig_setmethods__["response"] = _python_libstorj.create_bucket_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.create_bucket_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.create_bucket_request_t_response_get, _python_libstorj.create_bucket_request_t_response_set)
    __swig_setmethods__["bucket"] = _python_libstorj.create_bucket_request_t_bucket_set
    __swig_getmethods__["bucket"] = _python_libstorj.create_bucket_request_t_bucket_get
    if _newclass:
        bucket = _swig_property(_python_libstorj.create_bucket_request_t_bucket_get, _python_libstorj.create_bucket_request_t_bucket_set)
    __swig_setmethods__["error_code"] = _python_libstorj.create_bucket_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.create_bucket_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.create_bucket_request_t_error_code_get, _python_libstorj.create_bucket_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.create_bucket_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.create_bucket_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.create_bucket_request_t_status_code_get, _python_libstorj.create_bucket_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.create_bucket_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.create_bucket_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.create_bucket_request_t_handle_get, _python_libstorj.create_bucket_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_create_bucket_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_create_bucket_request_t
    __del__ = lambda self: None
create_bucket_request_t_swigregister = _python_libstorj.create_bucket_request_t_swigregister
create_bucket_request_t_swigregister(create_bucket_request_t)

class get_buckets_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, get_buckets_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, get_buckets_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.get_buckets_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.get_buckets_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.get_buckets_request_t_http_options_get, _python_libstorj.get_buckets_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.get_buckets_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.get_buckets_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.get_buckets_request_t_encrypt_options_get, _python_libstorj.get_buckets_request_t_encrypt_options_set)
    __swig_setmethods__["options"] = _python_libstorj.get_buckets_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.get_buckets_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.get_buckets_request_t_options_get, _python_libstorj.get_buckets_request_t_options_set)
    __swig_setmethods__["method"] = _python_libstorj.get_buckets_request_t_method_set
    __swig_getmethods__["method"] = _python_libstorj.get_buckets_request_t_method_get
    if _newclass:
        method = _swig_property(_python_libstorj.get_buckets_request_t_method_get, _python_libstorj.get_buckets_request_t_method_set)
    __swig_setmethods__["path"] = _python_libstorj.get_buckets_request_t_path_set
    __swig_getmethods__["path"] = _python_libstorj.get_buckets_request_t_path_get
    if _newclass:
        path = _swig_property(_python_libstorj.get_buckets_request_t_path_get, _python_libstorj.get_buckets_request_t_path_set)
    __swig_setmethods__["auth"] = _python_libstorj.get_buckets_request_t_auth_set
    __swig_getmethods__["auth"] = _python_libstorj.get_buckets_request_t_auth_get
    if _newclass:
        auth = _swig_property(_python_libstorj.get_buckets_request_t_auth_get, _python_libstorj.get_buckets_request_t_auth_set)
    __swig_setmethods__["body"] = _python_libstorj.get_buckets_request_t_body_set
    __swig_getmethods__["body"] = _python_libstorj.get_buckets_request_t_body_get
    if _newclass:
        body = _swig_property(_python_libstorj.get_buckets_request_t_body_get, _python_libstorj.get_buckets_request_t_body_set)
    __swig_setmethods__["response"] = _python_libstorj.get_buckets_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.get_buckets_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.get_buckets_request_t_response_get, _python_libstorj.get_buckets_request_t_response_set)
    __swig_setmethods__["buckets"] = _python_libstorj.get_buckets_request_t_buckets_set
    __swig_getmethods__["buckets"] = _python_libstorj.get_buckets_request_t_buckets_get
    if _newclass:
        buckets = _swig_property(_python_libstorj.get_buckets_request_t_buckets_get, _python_libstorj.get_buckets_request_t_buckets_set)
    __swig_setmethods__["total_buckets"] = _python_libstorj.get_buckets_request_t_total_buckets_set
    __swig_getmethods__["total_buckets"] = _python_libstorj.get_buckets_request_t_total_buckets_get
    if _newclass:
        total_buckets = _swig_property(_python_libstorj.get_buckets_request_t_total_buckets_get, _python_libstorj.get_buckets_request_t_total_buckets_set)
    __swig_setmethods__["error_code"] = _python_libstorj.get_buckets_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.get_buckets_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.get_buckets_request_t_error_code_get, _python_libstorj.get_buckets_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.get_buckets_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.get_buckets_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.get_buckets_request_t_status_code_get, _python_libstorj.get_buckets_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.get_buckets_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.get_buckets_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.get_buckets_request_t_handle_get, _python_libstorj.get_buckets_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_get_buckets_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_get_buckets_request_t
    __del__ = lambda self: None
get_buckets_request_t_swigregister = _python_libstorj.get_buckets_request_t_swigregister
get_buckets_request_t_swigregister(get_buckets_request_t)

class get_bucket_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, get_bucket_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, get_bucket_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.get_bucket_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.get_bucket_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.get_bucket_request_t_http_options_get, _python_libstorj.get_bucket_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.get_bucket_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.get_bucket_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.get_bucket_request_t_encrypt_options_get, _python_libstorj.get_bucket_request_t_encrypt_options_set)
    __swig_setmethods__["options"] = _python_libstorj.get_bucket_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.get_bucket_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.get_bucket_request_t_options_get, _python_libstorj.get_bucket_request_t_options_set)
    __swig_setmethods__["method"] = _python_libstorj.get_bucket_request_t_method_set
    __swig_getmethods__["method"] = _python_libstorj.get_bucket_request_t_method_get
    if _newclass:
        method = _swig_property(_python_libstorj.get_bucket_request_t_method_get, _python_libstorj.get_bucket_request_t_method_set)
    __swig_setmethods__["path"] = _python_libstorj.get_bucket_request_t_path_set
    __swig_getmethods__["path"] = _python_libstorj.get_bucket_request_t_path_get
    if _newclass:
        path = _swig_property(_python_libstorj.get_bucket_request_t_path_get, _python_libstorj.get_bucket_request_t_path_set)
    __swig_setmethods__["auth"] = _python_libstorj.get_bucket_request_t_auth_set
    __swig_getmethods__["auth"] = _python_libstorj.get_bucket_request_t_auth_get
    if _newclass:
        auth = _swig_property(_python_libstorj.get_bucket_request_t_auth_get, _python_libstorj.get_bucket_request_t_auth_set)
    __swig_setmethods__["body"] = _python_libstorj.get_bucket_request_t_body_set
    __swig_getmethods__["body"] = _python_libstorj.get_bucket_request_t_body_get
    if _newclass:
        body = _swig_property(_python_libstorj.get_bucket_request_t_body_get, _python_libstorj.get_bucket_request_t_body_set)
    __swig_setmethods__["response"] = _python_libstorj.get_bucket_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.get_bucket_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.get_bucket_request_t_response_get, _python_libstorj.get_bucket_request_t_response_set)
    __swig_setmethods__["bucket"] = _python_libstorj.get_bucket_request_t_bucket_set
    __swig_getmethods__["bucket"] = _python_libstorj.get_bucket_request_t_bucket_get
    if _newclass:
        bucket = _swig_property(_python_libstorj.get_bucket_request_t_bucket_get, _python_libstorj.get_bucket_request_t_bucket_set)
    __swig_setmethods__["error_code"] = _python_libstorj.get_bucket_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.get_bucket_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.get_bucket_request_t_error_code_get, _python_libstorj.get_bucket_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.get_bucket_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.get_bucket_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.get_bucket_request_t_status_code_get, _python_libstorj.get_bucket_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.get_bucket_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.get_bucket_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.get_bucket_request_t_handle_get, _python_libstorj.get_bucket_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_get_bucket_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_get_bucket_request_t
    __del__ = lambda self: None
get_bucket_request_t_swigregister = _python_libstorj.get_bucket_request_t_swigregister
get_bucket_request_t_swigregister(get_bucket_request_t)

class get_bucket_id_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, get_bucket_id_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, get_bucket_id_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.get_bucket_id_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.get_bucket_id_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.get_bucket_id_request_t_http_options_get, _python_libstorj.get_bucket_id_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.get_bucket_id_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.get_bucket_id_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.get_bucket_id_request_t_encrypt_options_get, _python_libstorj.get_bucket_id_request_t_encrypt_options_set)
    __swig_setmethods__["options"] = _python_libstorj.get_bucket_id_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.get_bucket_id_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.get_bucket_id_request_t_options_get, _python_libstorj.get_bucket_id_request_t_options_set)
    __swig_setmethods__["bucket_name"] = _python_libstorj.get_bucket_id_request_t_bucket_name_set
    __swig_getmethods__["bucket_name"] = _python_libstorj.get_bucket_id_request_t_bucket_name_get
    if _newclass:
        bucket_name = _swig_property(_python_libstorj.get_bucket_id_request_t_bucket_name_get, _python_libstorj.get_bucket_id_request_t_bucket_name_set)
    __swig_setmethods__["response"] = _python_libstorj.get_bucket_id_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.get_bucket_id_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.get_bucket_id_request_t_response_get, _python_libstorj.get_bucket_id_request_t_response_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.get_bucket_id_request_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.get_bucket_id_request_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.get_bucket_id_request_t_bucket_id_get, _python_libstorj.get_bucket_id_request_t_bucket_id_set)
    __swig_setmethods__["error_code"] = _python_libstorj.get_bucket_id_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.get_bucket_id_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.get_bucket_id_request_t_error_code_get, _python_libstorj.get_bucket_id_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.get_bucket_id_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.get_bucket_id_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.get_bucket_id_request_t_status_code_get, _python_libstorj.get_bucket_id_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.get_bucket_id_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.get_bucket_id_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.get_bucket_id_request_t_handle_get, _python_libstorj.get_bucket_id_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_get_bucket_id_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_get_bucket_id_request_t
    __del__ = lambda self: None
get_bucket_id_request_t_swigregister = _python_libstorj.get_bucket_id_request_t_swigregister
get_bucket_id_request_t_swigregister(get_bucket_id_request_t)

class storj_file_meta_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_file_meta_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_file_meta_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["created"] = _python_libstorj.storj_file_meta_t_created_set
    __swig_getmethods__["created"] = _python_libstorj.storj_file_meta_t_created_get
    if _newclass:
        created = _swig_property(_python_libstorj.storj_file_meta_t_created_get, _python_libstorj.storj_file_meta_t_created_set)
    __swig_setmethods__["filename"] = _python_libstorj.storj_file_meta_t_filename_set
    __swig_getmethods__["filename"] = _python_libstorj.storj_file_meta_t_filename_get
    if _newclass:
        filename = _swig_property(_python_libstorj.storj_file_meta_t_filename_get, _python_libstorj.storj_file_meta_t_filename_set)
    __swig_setmethods__["mimetype"] = _python_libstorj.storj_file_meta_t_mimetype_set
    __swig_getmethods__["mimetype"] = _python_libstorj.storj_file_meta_t_mimetype_get
    if _newclass:
        mimetype = _swig_property(_python_libstorj.storj_file_meta_t_mimetype_get, _python_libstorj.storj_file_meta_t_mimetype_set)
    __swig_setmethods__["erasure"] = _python_libstorj.storj_file_meta_t_erasure_set
    __swig_getmethods__["erasure"] = _python_libstorj.storj_file_meta_t_erasure_get
    if _newclass:
        erasure = _swig_property(_python_libstorj.storj_file_meta_t_erasure_get, _python_libstorj.storj_file_meta_t_erasure_set)
    __swig_setmethods__["size"] = _python_libstorj.storj_file_meta_t_size_set
    __swig_getmethods__["size"] = _python_libstorj.storj_file_meta_t_size_get
    if _newclass:
        size = _swig_property(_python_libstorj.storj_file_meta_t_size_get, _python_libstorj.storj_file_meta_t_size_set)
    __swig_setmethods__["hmac"] = _python_libstorj.storj_file_meta_t_hmac_set
    __swig_getmethods__["hmac"] = _python_libstorj.storj_file_meta_t_hmac_get
    if _newclass:
        hmac = _swig_property(_python_libstorj.storj_file_meta_t_hmac_get, _python_libstorj.storj_file_meta_t_hmac_set)
    __swig_setmethods__["id"] = _python_libstorj.storj_file_meta_t_id_set
    __swig_getmethods__["id"] = _python_libstorj.storj_file_meta_t_id_get
    if _newclass:
        id = _swig_property(_python_libstorj.storj_file_meta_t_id_get, _python_libstorj.storj_file_meta_t_id_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.storj_file_meta_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.storj_file_meta_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.storj_file_meta_t_bucket_id_get, _python_libstorj.storj_file_meta_t_bucket_id_set)
    __swig_setmethods__["decrypted"] = _python_libstorj.storj_file_meta_t_decrypted_set
    __swig_getmethods__["decrypted"] = _python_libstorj.storj_file_meta_t_decrypted_get
    if _newclass:
        decrypted = _swig_property(_python_libstorj.storj_file_meta_t_decrypted_get, _python_libstorj.storj_file_meta_t_decrypted_set)
    __swig_setmethods__["index"] = _python_libstorj.storj_file_meta_t_index_set
    __swig_getmethods__["index"] = _python_libstorj.storj_file_meta_t_index_get
    if _newclass:
        index = _swig_property(_python_libstorj.storj_file_meta_t_index_get, _python_libstorj.storj_file_meta_t_index_set)

    def __init__(self):
        this = _python_libstorj.new_storj_file_meta_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_file_meta_t
    __del__ = lambda self: None
storj_file_meta_t_swigregister = _python_libstorj.storj_file_meta_t_swigregister
storj_file_meta_t_swigregister(storj_file_meta_t)

class list_files_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_files_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_files_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.list_files_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.list_files_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.list_files_request_t_http_options_get, _python_libstorj.list_files_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.list_files_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.list_files_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.list_files_request_t_encrypt_options_get, _python_libstorj.list_files_request_t_encrypt_options_set)
    __swig_setmethods__["options"] = _python_libstorj.list_files_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.list_files_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.list_files_request_t_options_get, _python_libstorj.list_files_request_t_options_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.list_files_request_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.list_files_request_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.list_files_request_t_bucket_id_get, _python_libstorj.list_files_request_t_bucket_id_set)
    __swig_setmethods__["method"] = _python_libstorj.list_files_request_t_method_set
    __swig_getmethods__["method"] = _python_libstorj.list_files_request_t_method_get
    if _newclass:
        method = _swig_property(_python_libstorj.list_files_request_t_method_get, _python_libstorj.list_files_request_t_method_set)
    __swig_setmethods__["path"] = _python_libstorj.list_files_request_t_path_set
    __swig_getmethods__["path"] = _python_libstorj.list_files_request_t_path_get
    if _newclass:
        path = _swig_property(_python_libstorj.list_files_request_t_path_get, _python_libstorj.list_files_request_t_path_set)
    __swig_setmethods__["auth"] = _python_libstorj.list_files_request_t_auth_set
    __swig_getmethods__["auth"] = _python_libstorj.list_files_request_t_auth_get
    if _newclass:
        auth = _swig_property(_python_libstorj.list_files_request_t_auth_get, _python_libstorj.list_files_request_t_auth_set)
    __swig_setmethods__["body"] = _python_libstorj.list_files_request_t_body_set
    __swig_getmethods__["body"] = _python_libstorj.list_files_request_t_body_get
    if _newclass:
        body = _swig_property(_python_libstorj.list_files_request_t_body_get, _python_libstorj.list_files_request_t_body_set)
    __swig_setmethods__["response"] = _python_libstorj.list_files_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.list_files_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.list_files_request_t_response_get, _python_libstorj.list_files_request_t_response_set)
    __swig_setmethods__["files"] = _python_libstorj.list_files_request_t_files_set
    __swig_getmethods__["files"] = _python_libstorj.list_files_request_t_files_get
    if _newclass:
        files = _swig_property(_python_libstorj.list_files_request_t_files_get, _python_libstorj.list_files_request_t_files_set)
    __swig_setmethods__["total_files"] = _python_libstorj.list_files_request_t_total_files_set
    __swig_getmethods__["total_files"] = _python_libstorj.list_files_request_t_total_files_get
    if _newclass:
        total_files = _swig_property(_python_libstorj.list_files_request_t_total_files_get, _python_libstorj.list_files_request_t_total_files_set)
    __swig_setmethods__["error_code"] = _python_libstorj.list_files_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.list_files_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.list_files_request_t_error_code_get, _python_libstorj.list_files_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.list_files_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.list_files_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.list_files_request_t_status_code_get, _python_libstorj.list_files_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.list_files_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.list_files_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.list_files_request_t_handle_get, _python_libstorj.list_files_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_list_files_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_list_files_request_t
    __del__ = lambda self: None
list_files_request_t_swigregister = _python_libstorj.list_files_request_t_swigregister
list_files_request_t_swigregister(list_files_request_t)

class get_file_info_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, get_file_info_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, get_file_info_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.get_file_info_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.get_file_info_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.get_file_info_request_t_http_options_get, _python_libstorj.get_file_info_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.get_file_info_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.get_file_info_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.get_file_info_request_t_encrypt_options_get, _python_libstorj.get_file_info_request_t_encrypt_options_set)
    __swig_setmethods__["options"] = _python_libstorj.get_file_info_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.get_file_info_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.get_file_info_request_t_options_get, _python_libstorj.get_file_info_request_t_options_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.get_file_info_request_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.get_file_info_request_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.get_file_info_request_t_bucket_id_get, _python_libstorj.get_file_info_request_t_bucket_id_set)
    __swig_setmethods__["method"] = _python_libstorj.get_file_info_request_t_method_set
    __swig_getmethods__["method"] = _python_libstorj.get_file_info_request_t_method_get
    if _newclass:
        method = _swig_property(_python_libstorj.get_file_info_request_t_method_get, _python_libstorj.get_file_info_request_t_method_set)
    __swig_setmethods__["path"] = _python_libstorj.get_file_info_request_t_path_set
    __swig_getmethods__["path"] = _python_libstorj.get_file_info_request_t_path_get
    if _newclass:
        path = _swig_property(_python_libstorj.get_file_info_request_t_path_get, _python_libstorj.get_file_info_request_t_path_set)
    __swig_setmethods__["auth"] = _python_libstorj.get_file_info_request_t_auth_set
    __swig_getmethods__["auth"] = _python_libstorj.get_file_info_request_t_auth_get
    if _newclass:
        auth = _swig_property(_python_libstorj.get_file_info_request_t_auth_get, _python_libstorj.get_file_info_request_t_auth_set)
    __swig_setmethods__["body"] = _python_libstorj.get_file_info_request_t_body_set
    __swig_getmethods__["body"] = _python_libstorj.get_file_info_request_t_body_get
    if _newclass:
        body = _swig_property(_python_libstorj.get_file_info_request_t_body_get, _python_libstorj.get_file_info_request_t_body_set)
    __swig_setmethods__["response"] = _python_libstorj.get_file_info_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.get_file_info_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.get_file_info_request_t_response_get, _python_libstorj.get_file_info_request_t_response_set)
    __swig_setmethods__["file"] = _python_libstorj.get_file_info_request_t_file_set
    __swig_getmethods__["file"] = _python_libstorj.get_file_info_request_t_file_get
    if _newclass:
        file = _swig_property(_python_libstorj.get_file_info_request_t_file_get, _python_libstorj.get_file_info_request_t_file_set)
    __swig_setmethods__["error_code"] = _python_libstorj.get_file_info_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.get_file_info_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.get_file_info_request_t_error_code_get, _python_libstorj.get_file_info_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.get_file_info_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.get_file_info_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.get_file_info_request_t_status_code_get, _python_libstorj.get_file_info_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.get_file_info_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.get_file_info_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.get_file_info_request_t_handle_get, _python_libstorj.get_file_info_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_get_file_info_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_get_file_info_request_t
    __del__ = lambda self: None
get_file_info_request_t_swigregister = _python_libstorj.get_file_info_request_t_swigregister
get_file_info_request_t_swigregister(get_file_info_request_t)

class get_file_id_request_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, get_file_id_request_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, get_file_id_request_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["http_options"] = _python_libstorj.get_file_id_request_t_http_options_set
    __swig_getmethods__["http_options"] = _python_libstorj.get_file_id_request_t_http_options_get
    if _newclass:
        http_options = _swig_property(_python_libstorj.get_file_id_request_t_http_options_get, _python_libstorj.get_file_id_request_t_http_options_set)
    __swig_setmethods__["encrypt_options"] = _python_libstorj.get_file_id_request_t_encrypt_options_set
    __swig_getmethods__["encrypt_options"] = _python_libstorj.get_file_id_request_t_encrypt_options_get
    if _newclass:
        encrypt_options = _swig_property(_python_libstorj.get_file_id_request_t_encrypt_options_get, _python_libstorj.get_file_id_request_t_encrypt_options_set)
    __swig_setmethods__["options"] = _python_libstorj.get_file_id_request_t_options_set
    __swig_getmethods__["options"] = _python_libstorj.get_file_id_request_t_options_get
    if _newclass:
        options = _swig_property(_python_libstorj.get_file_id_request_t_options_get, _python_libstorj.get_file_id_request_t_options_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.get_file_id_request_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.get_file_id_request_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.get_file_id_request_t_bucket_id_get, _python_libstorj.get_file_id_request_t_bucket_id_set)
    __swig_setmethods__["file_name"] = _python_libstorj.get_file_id_request_t_file_name_set
    __swig_getmethods__["file_name"] = _python_libstorj.get_file_id_request_t_file_name_get
    if _newclass:
        file_name = _swig_property(_python_libstorj.get_file_id_request_t_file_name_get, _python_libstorj.get_file_id_request_t_file_name_set)
    __swig_setmethods__["response"] = _python_libstorj.get_file_id_request_t_response_set
    __swig_getmethods__["response"] = _python_libstorj.get_file_id_request_t_response_get
    if _newclass:
        response = _swig_property(_python_libstorj.get_file_id_request_t_response_get, _python_libstorj.get_file_id_request_t_response_set)
    __swig_setmethods__["file_id"] = _python_libstorj.get_file_id_request_t_file_id_set
    __swig_getmethods__["file_id"] = _python_libstorj.get_file_id_request_t_file_id_get
    if _newclass:
        file_id = _swig_property(_python_libstorj.get_file_id_request_t_file_id_get, _python_libstorj.get_file_id_request_t_file_id_set)
    __swig_setmethods__["error_code"] = _python_libstorj.get_file_id_request_t_error_code_set
    __swig_getmethods__["error_code"] = _python_libstorj.get_file_id_request_t_error_code_get
    if _newclass:
        error_code = _swig_property(_python_libstorj.get_file_id_request_t_error_code_get, _python_libstorj.get_file_id_request_t_error_code_set)
    __swig_setmethods__["status_code"] = _python_libstorj.get_file_id_request_t_status_code_set
    __swig_getmethods__["status_code"] = _python_libstorj.get_file_id_request_t_status_code_get
    if _newclass:
        status_code = _swig_property(_python_libstorj.get_file_id_request_t_status_code_get, _python_libstorj.get_file_id_request_t_status_code_set)
    __swig_setmethods__["handle"] = _python_libstorj.get_file_id_request_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.get_file_id_request_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.get_file_id_request_t_handle_get, _python_libstorj.get_file_id_request_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_get_file_id_request_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_get_file_id_request_t
    __del__ = lambda self: None
get_file_id_request_t_swigregister = _python_libstorj.get_file_id_request_t_swigregister
get_file_id_request_t_swigregister(get_file_id_request_t)


_python_libstorj.BUCKET_PUSH_swigconstant(_python_libstorj)
BUCKET_PUSH = _python_libstorj.BUCKET_PUSH

_python_libstorj.BUCKET_PULL_swigconstant(_python_libstorj)
BUCKET_PULL = _python_libstorj.BUCKET_PULL
class storj_exchange_report_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_exchange_report_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_exchange_report_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data_hash"] = _python_libstorj.storj_exchange_report_t_data_hash_set
    __swig_getmethods__["data_hash"] = _python_libstorj.storj_exchange_report_t_data_hash_get
    if _newclass:
        data_hash = _swig_property(_python_libstorj.storj_exchange_report_t_data_hash_get, _python_libstorj.storj_exchange_report_t_data_hash_set)
    __swig_setmethods__["reporter_id"] = _python_libstorj.storj_exchange_report_t_reporter_id_set
    __swig_getmethods__["reporter_id"] = _python_libstorj.storj_exchange_report_t_reporter_id_get
    if _newclass:
        reporter_id = _swig_property(_python_libstorj.storj_exchange_report_t_reporter_id_get, _python_libstorj.storj_exchange_report_t_reporter_id_set)
    __swig_setmethods__["farmer_id"] = _python_libstorj.storj_exchange_report_t_farmer_id_set
    __swig_getmethods__["farmer_id"] = _python_libstorj.storj_exchange_report_t_farmer_id_get
    if _newclass:
        farmer_id = _swig_property(_python_libstorj.storj_exchange_report_t_farmer_id_get, _python_libstorj.storj_exchange_report_t_farmer_id_set)
    __swig_setmethods__["client_id"] = _python_libstorj.storj_exchange_report_t_client_id_set
    __swig_getmethods__["client_id"] = _python_libstorj.storj_exchange_report_t_client_id_get
    if _newclass:
        client_id = _swig_property(_python_libstorj.storj_exchange_report_t_client_id_get, _python_libstorj.storj_exchange_report_t_client_id_set)
    __swig_setmethods__["start"] = _python_libstorj.storj_exchange_report_t_start_set
    __swig_getmethods__["start"] = _python_libstorj.storj_exchange_report_t_start_get
    if _newclass:
        start = _swig_property(_python_libstorj.storj_exchange_report_t_start_get, _python_libstorj.storj_exchange_report_t_start_set)
    __swig_setmethods__["end"] = _python_libstorj.storj_exchange_report_t_end_set
    __swig_getmethods__["end"] = _python_libstorj.storj_exchange_report_t_end_get
    if _newclass:
        end = _swig_property(_python_libstorj.storj_exchange_report_t_end_get, _python_libstorj.storj_exchange_report_t_end_set)
    __swig_setmethods__["code"] = _python_libstorj.storj_exchange_report_t_code_set
    __swig_getmethods__["code"] = _python_libstorj.storj_exchange_report_t_code_get
    if _newclass:
        code = _swig_property(_python_libstorj.storj_exchange_report_t_code_get, _python_libstorj.storj_exchange_report_t_code_set)
    __swig_setmethods__["message"] = _python_libstorj.storj_exchange_report_t_message_set
    __swig_getmethods__["message"] = _python_libstorj.storj_exchange_report_t_message_get
    if _newclass:
        message = _swig_property(_python_libstorj.storj_exchange_report_t_message_get, _python_libstorj.storj_exchange_report_t_message_set)
    __swig_setmethods__["send_status"] = _python_libstorj.storj_exchange_report_t_send_status_set
    __swig_getmethods__["send_status"] = _python_libstorj.storj_exchange_report_t_send_status_get
    if _newclass:
        send_status = _swig_property(_python_libstorj.storj_exchange_report_t_send_status_get, _python_libstorj.storj_exchange_report_t_send_status_set)
    __swig_setmethods__["send_count"] = _python_libstorj.storj_exchange_report_t_send_count_set
    __swig_getmethods__["send_count"] = _python_libstorj.storj_exchange_report_t_send_count_get
    if _newclass:
        send_count = _swig_property(_python_libstorj.storj_exchange_report_t_send_count_get, _python_libstorj.storj_exchange_report_t_send_count_set)
    __swig_setmethods__["pointer_index"] = _python_libstorj.storj_exchange_report_t_pointer_index_set
    __swig_getmethods__["pointer_index"] = _python_libstorj.storj_exchange_report_t_pointer_index_get
    if _newclass:
        pointer_index = _swig_property(_python_libstorj.storj_exchange_report_t_pointer_index_get, _python_libstorj.storj_exchange_report_t_pointer_index_set)

    def __init__(self):
        this = _python_libstorj.new_storj_exchange_report_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_exchange_report_t
    __del__ = lambda self: None
storj_exchange_report_t_swigregister = _python_libstorj.storj_exchange_report_t_swigregister
storj_exchange_report_t_swigregister(storj_exchange_report_t)
cvar = _python_libstorj.cvar

class storj_pointer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_pointer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_pointer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["replace_count"] = _python_libstorj.storj_pointer_t_replace_count_set
    __swig_getmethods__["replace_count"] = _python_libstorj.storj_pointer_t_replace_count_get
    if _newclass:
        replace_count = _swig_property(_python_libstorj.storj_pointer_t_replace_count_get, _python_libstorj.storj_pointer_t_replace_count_set)
    __swig_setmethods__["token"] = _python_libstorj.storj_pointer_t_token_set
    __swig_getmethods__["token"] = _python_libstorj.storj_pointer_t_token_get
    if _newclass:
        token = _swig_property(_python_libstorj.storj_pointer_t_token_get, _python_libstorj.storj_pointer_t_token_set)
    __swig_setmethods__["shard_hash"] = _python_libstorj.storj_pointer_t_shard_hash_set
    __swig_getmethods__["shard_hash"] = _python_libstorj.storj_pointer_t_shard_hash_get
    if _newclass:
        shard_hash = _swig_property(_python_libstorj.storj_pointer_t_shard_hash_get, _python_libstorj.storj_pointer_t_shard_hash_set)
    __swig_setmethods__["index"] = _python_libstorj.storj_pointer_t_index_set
    __swig_getmethods__["index"] = _python_libstorj.storj_pointer_t_index_get
    if _newclass:
        index = _swig_property(_python_libstorj.storj_pointer_t_index_get, _python_libstorj.storj_pointer_t_index_set)
    __swig_setmethods__["status"] = _python_libstorj.storj_pointer_t_status_set
    __swig_getmethods__["status"] = _python_libstorj.storj_pointer_t_status_get
    if _newclass:
        status = _swig_property(_python_libstorj.storj_pointer_t_status_get, _python_libstorj.storj_pointer_t_status_set)
    __swig_setmethods__["size"] = _python_libstorj.storj_pointer_t_size_set
    __swig_getmethods__["size"] = _python_libstorj.storj_pointer_t_size_get
    if _newclass:
        size = _swig_property(_python_libstorj.storj_pointer_t_size_get, _python_libstorj.storj_pointer_t_size_set)
    __swig_setmethods__["parity"] = _python_libstorj.storj_pointer_t_parity_set
    __swig_getmethods__["parity"] = _python_libstorj.storj_pointer_t_parity_get
    if _newclass:
        parity = _swig_property(_python_libstorj.storj_pointer_t_parity_get, _python_libstorj.storj_pointer_t_parity_set)
    __swig_setmethods__["downloaded_size"] = _python_libstorj.storj_pointer_t_downloaded_size_set
    __swig_getmethods__["downloaded_size"] = _python_libstorj.storj_pointer_t_downloaded_size_get
    if _newclass:
        downloaded_size = _swig_property(_python_libstorj.storj_pointer_t_downloaded_size_get, _python_libstorj.storj_pointer_t_downloaded_size_set)
    __swig_setmethods__["farmer_id"] = _python_libstorj.storj_pointer_t_farmer_id_set
    __swig_getmethods__["farmer_id"] = _python_libstorj.storj_pointer_t_farmer_id_get
    if _newclass:
        farmer_id = _swig_property(_python_libstorj.storj_pointer_t_farmer_id_get, _python_libstorj.storj_pointer_t_farmer_id_set)
    __swig_setmethods__["farmer_address"] = _python_libstorj.storj_pointer_t_farmer_address_set
    __swig_getmethods__["farmer_address"] = _python_libstorj.storj_pointer_t_farmer_address_get
    if _newclass:
        farmer_address = _swig_property(_python_libstorj.storj_pointer_t_farmer_address_get, _python_libstorj.storj_pointer_t_farmer_address_set)
    __swig_setmethods__["farmer_port"] = _python_libstorj.storj_pointer_t_farmer_port_set
    __swig_getmethods__["farmer_port"] = _python_libstorj.storj_pointer_t_farmer_port_get
    if _newclass:
        farmer_port = _swig_property(_python_libstorj.storj_pointer_t_farmer_port_get, _python_libstorj.storj_pointer_t_farmer_port_set)
    __swig_setmethods__["report"] = _python_libstorj.storj_pointer_t_report_set
    __swig_getmethods__["report"] = _python_libstorj.storj_pointer_t_report_get
    if _newclass:
        report = _swig_property(_python_libstorj.storj_pointer_t_report_get, _python_libstorj.storj_pointer_t_report_set)
    __swig_setmethods__["work"] = _python_libstorj.storj_pointer_t_work_set
    __swig_getmethods__["work"] = _python_libstorj.storj_pointer_t_work_get
    if _newclass:
        work = _swig_property(_python_libstorj.storj_pointer_t_work_get, _python_libstorj.storj_pointer_t_work_set)

    def __init__(self):
        this = _python_libstorj.new_storj_pointer_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_pointer_t
    __del__ = lambda self: None
storj_pointer_t_swigregister = _python_libstorj.storj_pointer_t_swigregister
storj_pointer_t_swigregister(storj_pointer_t)

class storj_upload_opts_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_upload_opts_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_upload_opts_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prepare_frame_limit"] = _python_libstorj.storj_upload_opts_t_prepare_frame_limit_set
    __swig_getmethods__["prepare_frame_limit"] = _python_libstorj.storj_upload_opts_t_prepare_frame_limit_get
    if _newclass:
        prepare_frame_limit = _swig_property(_python_libstorj.storj_upload_opts_t_prepare_frame_limit_get, _python_libstorj.storj_upload_opts_t_prepare_frame_limit_set)
    __swig_setmethods__["push_frame_limit"] = _python_libstorj.storj_upload_opts_t_push_frame_limit_set
    __swig_getmethods__["push_frame_limit"] = _python_libstorj.storj_upload_opts_t_push_frame_limit_get
    if _newclass:
        push_frame_limit = _swig_property(_python_libstorj.storj_upload_opts_t_push_frame_limit_get, _python_libstorj.storj_upload_opts_t_push_frame_limit_set)
    __swig_setmethods__["push_shard_limit"] = _python_libstorj.storj_upload_opts_t_push_shard_limit_set
    __swig_getmethods__["push_shard_limit"] = _python_libstorj.storj_upload_opts_t_push_shard_limit_get
    if _newclass:
        push_shard_limit = _swig_property(_python_libstorj.storj_upload_opts_t_push_shard_limit_get, _python_libstorj.storj_upload_opts_t_push_shard_limit_set)
    __swig_setmethods__["rs"] = _python_libstorj.storj_upload_opts_t_rs_set
    __swig_getmethods__["rs"] = _python_libstorj.storj_upload_opts_t_rs_get
    if _newclass:
        rs = _swig_property(_python_libstorj.storj_upload_opts_t_rs_get, _python_libstorj.storj_upload_opts_t_rs_set)
    __swig_setmethods__["index"] = _python_libstorj.storj_upload_opts_t_index_set
    __swig_getmethods__["index"] = _python_libstorj.storj_upload_opts_t_index_get
    if _newclass:
        index = _swig_property(_python_libstorj.storj_upload_opts_t_index_get, _python_libstorj.storj_upload_opts_t_index_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.storj_upload_opts_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.storj_upload_opts_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.storj_upload_opts_t_bucket_id_get, _python_libstorj.storj_upload_opts_t_bucket_id_set)
    __swig_setmethods__["file_name"] = _python_libstorj.storj_upload_opts_t_file_name_set
    __swig_getmethods__["file_name"] = _python_libstorj.storj_upload_opts_t_file_name_get
    if _newclass:
        file_name = _swig_property(_python_libstorj.storj_upload_opts_t_file_name_get, _python_libstorj.storj_upload_opts_t_file_name_set)
    __swig_setmethods__["fd"] = _python_libstorj.storj_upload_opts_t_fd_set
    __swig_getmethods__["fd"] = _python_libstorj.storj_upload_opts_t_fd_get
    if _newclass:
        fd = _swig_property(_python_libstorj.storj_upload_opts_t_fd_get, _python_libstorj.storj_upload_opts_t_fd_set)

    def __init__(self):
        this = _python_libstorj.new_storj_upload_opts_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_upload_opts_t
    __del__ = lambda self: None
storj_upload_opts_t_swigregister = _python_libstorj.storj_upload_opts_t_swigregister
storj_upload_opts_t_swigregister(storj_upload_opts_t)

class storj_download_state_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, storj_download_state_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, storj_download_state_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["total_bytes"] = _python_libstorj.storj_download_state_t_total_bytes_set
    __swig_getmethods__["total_bytes"] = _python_libstorj.storj_download_state_t_total_bytes_get
    if _newclass:
        total_bytes = _swig_property(_python_libstorj.storj_download_state_t_total_bytes_get, _python_libstorj.storj_download_state_t_total_bytes_set)
    __swig_setmethods__["info"] = _python_libstorj.storj_download_state_t_info_set
    __swig_getmethods__["info"] = _python_libstorj.storj_download_state_t_info_get
    if _newclass:
        info = _swig_property(_python_libstorj.storj_download_state_t_info_get, _python_libstorj.storj_download_state_t_info_set)
    __swig_setmethods__["requesting_info"] = _python_libstorj.storj_download_state_t_requesting_info_set
    __swig_getmethods__["requesting_info"] = _python_libstorj.storj_download_state_t_requesting_info_get
    if _newclass:
        requesting_info = _swig_property(_python_libstorj.storj_download_state_t_requesting_info_get, _python_libstorj.storj_download_state_t_requesting_info_set)
    __swig_setmethods__["info_fail_count"] = _python_libstorj.storj_download_state_t_info_fail_count_set
    __swig_getmethods__["info_fail_count"] = _python_libstorj.storj_download_state_t_info_fail_count_get
    if _newclass:
        info_fail_count = _swig_property(_python_libstorj.storj_download_state_t_info_fail_count_get, _python_libstorj.storj_download_state_t_info_fail_count_set)
    __swig_setmethods__["env"] = _python_libstorj.storj_download_state_t_env_set
    __swig_getmethods__["env"] = _python_libstorj.storj_download_state_t_env_get
    if _newclass:
        env = _swig_property(_python_libstorj.storj_download_state_t_env_get, _python_libstorj.storj_download_state_t_env_set)
    __swig_setmethods__["file_id"] = _python_libstorj.storj_download_state_t_file_id_set
    __swig_getmethods__["file_id"] = _python_libstorj.storj_download_state_t_file_id_get
    if _newclass:
        file_id = _swig_property(_python_libstorj.storj_download_state_t_file_id_get, _python_libstorj.storj_download_state_t_file_id_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.storj_download_state_t_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.storj_download_state_t_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.storj_download_state_t_bucket_id_get, _python_libstorj.storj_download_state_t_bucket_id_set)
    __swig_setmethods__["destination"] = _python_libstorj.storj_download_state_t_destination_set
    __swig_getmethods__["destination"] = _python_libstorj.storj_download_state_t_destination_get
    if _newclass:
        destination = _swig_property(_python_libstorj.storj_download_state_t_destination_get, _python_libstorj.storj_download_state_t_destination_set)
    __swig_setmethods__["progress_cb"] = _python_libstorj.storj_download_state_t_progress_cb_set
    __swig_getmethods__["progress_cb"] = _python_libstorj.storj_download_state_t_progress_cb_get
    if _newclass:
        progress_cb = _swig_property(_python_libstorj.storj_download_state_t_progress_cb_get, _python_libstorj.storj_download_state_t_progress_cb_set)
    __swig_setmethods__["finished_cb"] = _python_libstorj.storj_download_state_t_finished_cb_set
    __swig_getmethods__["finished_cb"] = _python_libstorj.storj_download_state_t_finished_cb_get
    if _newclass:
        finished_cb = _swig_property(_python_libstorj.storj_download_state_t_finished_cb_get, _python_libstorj.storj_download_state_t_finished_cb_set)
    __swig_setmethods__["finished"] = _python_libstorj.storj_download_state_t_finished_set
    __swig_getmethods__["finished"] = _python_libstorj.storj_download_state_t_finished_get
    if _newclass:
        finished = _swig_property(_python_libstorj.storj_download_state_t_finished_get, _python_libstorj.storj_download_state_t_finished_set)
    __swig_setmethods__["canceled"] = _python_libstorj.storj_download_state_t_canceled_set
    __swig_getmethods__["canceled"] = _python_libstorj.storj_download_state_t_canceled_get
    if _newclass:
        canceled = _swig_property(_python_libstorj.storj_download_state_t_canceled_get, _python_libstorj.storj_download_state_t_canceled_set)
    __swig_setmethods__["shard_size"] = _python_libstorj.storj_download_state_t_shard_size_set
    __swig_getmethods__["shard_size"] = _python_libstorj.storj_download_state_t_shard_size_get
    if _newclass:
        shard_size = _swig_property(_python_libstorj.storj_download_state_t_shard_size_get, _python_libstorj.storj_download_state_t_shard_size_set)
    __swig_setmethods__["total_shards"] = _python_libstorj.storj_download_state_t_total_shards_set
    __swig_getmethods__["total_shards"] = _python_libstorj.storj_download_state_t_total_shards_get
    if _newclass:
        total_shards = _swig_property(_python_libstorj.storj_download_state_t_total_shards_get, _python_libstorj.storj_download_state_t_total_shards_set)
    __swig_setmethods__["download_max_concurrency"] = _python_libstorj.storj_download_state_t_download_max_concurrency_set
    __swig_getmethods__["download_max_concurrency"] = _python_libstorj.storj_download_state_t_download_max_concurrency_get
    if _newclass:
        download_max_concurrency = _swig_property(_python_libstorj.storj_download_state_t_download_max_concurrency_get, _python_libstorj.storj_download_state_t_download_max_concurrency_set)
    __swig_setmethods__["completed_shards"] = _python_libstorj.storj_download_state_t_completed_shards_set
    __swig_getmethods__["completed_shards"] = _python_libstorj.storj_download_state_t_completed_shards_get
    if _newclass:
        completed_shards = _swig_property(_python_libstorj.storj_download_state_t_completed_shards_get, _python_libstorj.storj_download_state_t_completed_shards_set)
    __swig_setmethods__["resolving_shards"] = _python_libstorj.storj_download_state_t_resolving_shards_set
    __swig_getmethods__["resolving_shards"] = _python_libstorj.storj_download_state_t_resolving_shards_get
    if _newclass:
        resolving_shards = _swig_property(_python_libstorj.storj_download_state_t_resolving_shards_get, _python_libstorj.storj_download_state_t_resolving_shards_set)
    __swig_setmethods__["pointers"] = _python_libstorj.storj_download_state_t_pointers_set
    __swig_getmethods__["pointers"] = _python_libstorj.storj_download_state_t_pointers_get
    if _newclass:
        pointers = _swig_property(_python_libstorj.storj_download_state_t_pointers_get, _python_libstorj.storj_download_state_t_pointers_set)
    __swig_setmethods__["excluded_farmer_ids"] = _python_libstorj.storj_download_state_t_excluded_farmer_ids_set
    __swig_getmethods__["excluded_farmer_ids"] = _python_libstorj.storj_download_state_t_excluded_farmer_ids_get
    if _newclass:
        excluded_farmer_ids = _swig_property(_python_libstorj.storj_download_state_t_excluded_farmer_ids_get, _python_libstorj.storj_download_state_t_excluded_farmer_ids_set)
    __swig_setmethods__["total_pointers"] = _python_libstorj.storj_download_state_t_total_pointers_set
    __swig_getmethods__["total_pointers"] = _python_libstorj.storj_download_state_t_total_pointers_get
    if _newclass:
        total_pointers = _swig_property(_python_libstorj.storj_download_state_t_total_pointers_get, _python_libstorj.storj_download_state_t_total_pointers_set)
    __swig_setmethods__["total_parity_pointers"] = _python_libstorj.storj_download_state_t_total_parity_pointers_set
    __swig_getmethods__["total_parity_pointers"] = _python_libstorj.storj_download_state_t_total_parity_pointers_get
    if _newclass:
        total_parity_pointers = _swig_property(_python_libstorj.storj_download_state_t_total_parity_pointers_get, _python_libstorj.storj_download_state_t_total_parity_pointers_set)
    __swig_setmethods__["rs"] = _python_libstorj.storj_download_state_t_rs_set
    __swig_getmethods__["rs"] = _python_libstorj.storj_download_state_t_rs_get
    if _newclass:
        rs = _swig_property(_python_libstorj.storj_download_state_t_rs_get, _python_libstorj.storj_download_state_t_rs_set)
    __swig_setmethods__["recovering_shards"] = _python_libstorj.storj_download_state_t_recovering_shards_set
    __swig_getmethods__["recovering_shards"] = _python_libstorj.storj_download_state_t_recovering_shards_get
    if _newclass:
        recovering_shards = _swig_property(_python_libstorj.storj_download_state_t_recovering_shards_get, _python_libstorj.storj_download_state_t_recovering_shards_set)
    __swig_setmethods__["truncated"] = _python_libstorj.storj_download_state_t_truncated_set
    __swig_getmethods__["truncated"] = _python_libstorj.storj_download_state_t_truncated_get
    if _newclass:
        truncated = _swig_property(_python_libstorj.storj_download_state_t_truncated_get, _python_libstorj.storj_download_state_t_truncated_set)
    __swig_setmethods__["pointers_completed"] = _python_libstorj.storj_download_state_t_pointers_completed_set
    __swig_getmethods__["pointers_completed"] = _python_libstorj.storj_download_state_t_pointers_completed_get
    if _newclass:
        pointers_completed = _swig_property(_python_libstorj.storj_download_state_t_pointers_completed_get, _python_libstorj.storj_download_state_t_pointers_completed_set)
    __swig_setmethods__["pointer_fail_count"] = _python_libstorj.storj_download_state_t_pointer_fail_count_set
    __swig_getmethods__["pointer_fail_count"] = _python_libstorj.storj_download_state_t_pointer_fail_count_get
    if _newclass:
        pointer_fail_count = _swig_property(_python_libstorj.storj_download_state_t_pointer_fail_count_get, _python_libstorj.storj_download_state_t_pointer_fail_count_set)
    __swig_setmethods__["requesting_pointers"] = _python_libstorj.storj_download_state_t_requesting_pointers_set
    __swig_getmethods__["requesting_pointers"] = _python_libstorj.storj_download_state_t_requesting_pointers_get
    if _newclass:
        requesting_pointers = _swig_property(_python_libstorj.storj_download_state_t_requesting_pointers_get, _python_libstorj.storj_download_state_t_requesting_pointers_set)
    __swig_setmethods__["error_status"] = _python_libstorj.storj_download_state_t_error_status_set
    __swig_getmethods__["error_status"] = _python_libstorj.storj_download_state_t_error_status_get
    if _newclass:
        error_status = _swig_property(_python_libstorj.storj_download_state_t_error_status_get, _python_libstorj.storj_download_state_t_error_status_set)
    __swig_setmethods__["writing"] = _python_libstorj.storj_download_state_t_writing_set
    __swig_getmethods__["writing"] = _python_libstorj.storj_download_state_t_writing_get
    if _newclass:
        writing = _swig_property(_python_libstorj.storj_download_state_t_writing_get, _python_libstorj.storj_download_state_t_writing_set)
    __swig_setmethods__["decrypt_key"] = _python_libstorj.storj_download_state_t_decrypt_key_set
    __swig_getmethods__["decrypt_key"] = _python_libstorj.storj_download_state_t_decrypt_key_get
    if _newclass:
        decrypt_key = _swig_property(_python_libstorj.storj_download_state_t_decrypt_key_get, _python_libstorj.storj_download_state_t_decrypt_key_set)
    __swig_setmethods__["decrypt_ctr"] = _python_libstorj.storj_download_state_t_decrypt_ctr_set
    __swig_getmethods__["decrypt_ctr"] = _python_libstorj.storj_download_state_t_decrypt_ctr_get
    if _newclass:
        decrypt_ctr = _swig_property(_python_libstorj.storj_download_state_t_decrypt_ctr_get, _python_libstorj.storj_download_state_t_decrypt_ctr_set)
    __swig_setmethods__["hmac"] = _python_libstorj.storj_download_state_t_hmac_set
    __swig_getmethods__["hmac"] = _python_libstorj.storj_download_state_t_hmac_get
    if _newclass:
        hmac = _swig_property(_python_libstorj.storj_download_state_t_hmac_get, _python_libstorj.storj_download_state_t_hmac_set)
    __swig_setmethods__["pending_work_count"] = _python_libstorj.storj_download_state_t_pending_work_count_set
    __swig_getmethods__["pending_work_count"] = _python_libstorj.storj_download_state_t_pending_work_count_get
    if _newclass:
        pending_work_count = _swig_property(_python_libstorj.storj_download_state_t_pending_work_count_get, _python_libstorj.storj_download_state_t_pending_work_count_set)
    __swig_setmethods__["log"] = _python_libstorj.storj_download_state_t_log_set
    __swig_getmethods__["log"] = _python_libstorj.storj_download_state_t_log_get
    if _newclass:
        log = _swig_property(_python_libstorj.storj_download_state_t_log_get, _python_libstorj.storj_download_state_t_log_set)
    __swig_setmethods__["handle"] = _python_libstorj.storj_download_state_t_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.storj_download_state_t_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.storj_download_state_t_handle_get, _python_libstorj.storj_download_state_t_handle_set)

    def __init__(self):
        this = _python_libstorj.new_storj_download_state_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_storj_download_state_t
    __del__ = lambda self: None
storj_download_state_t_swigregister = _python_libstorj.storj_download_state_t_swigregister
storj_download_state_t_swigregister(storj_download_state_t)

class shard_meta_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shard_meta_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shard_meta_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hash"] = _python_libstorj.shard_meta_t_hash_set
    __swig_getmethods__["hash"] = _python_libstorj.shard_meta_t_hash_get
    if _newclass:
        hash = _swig_property(_python_libstorj.shard_meta_t_hash_get, _python_libstorj.shard_meta_t_hash_set)
    __swig_setmethods__["challenges"] = _python_libstorj.shard_meta_t_challenges_set
    __swig_getmethods__["challenges"] = _python_libstorj.shard_meta_t_challenges_get
    if _newclass:
        challenges = _swig_property(_python_libstorj.shard_meta_t_challenges_get, _python_libstorj.shard_meta_t_challenges_set)
    __swig_setmethods__["challenges_as_str"] = _python_libstorj.shard_meta_t_challenges_as_str_set
    __swig_getmethods__["challenges_as_str"] = _python_libstorj.shard_meta_t_challenges_as_str_get
    if _newclass:
        challenges_as_str = _swig_property(_python_libstorj.shard_meta_t_challenges_as_str_get, _python_libstorj.shard_meta_t_challenges_as_str_set)
    __swig_setmethods__["tree"] = _python_libstorj.shard_meta_t_tree_set
    __swig_getmethods__["tree"] = _python_libstorj.shard_meta_t_tree_get
    if _newclass:
        tree = _swig_property(_python_libstorj.shard_meta_t_tree_get, _python_libstorj.shard_meta_t_tree_set)
    __swig_setmethods__["index"] = _python_libstorj.shard_meta_t_index_set
    __swig_getmethods__["index"] = _python_libstorj.shard_meta_t_index_get
    if _newclass:
        index = _swig_property(_python_libstorj.shard_meta_t_index_get, _python_libstorj.shard_meta_t_index_set)
    __swig_setmethods__["is_parity"] = _python_libstorj.shard_meta_t_is_parity_set
    __swig_getmethods__["is_parity"] = _python_libstorj.shard_meta_t_is_parity_get
    if _newclass:
        is_parity = _swig_property(_python_libstorj.shard_meta_t_is_parity_get, _python_libstorj.shard_meta_t_is_parity_set)
    __swig_setmethods__["size"] = _python_libstorj.shard_meta_t_size_set
    __swig_getmethods__["size"] = _python_libstorj.shard_meta_t_size_get
    if _newclass:
        size = _swig_property(_python_libstorj.shard_meta_t_size_get, _python_libstorj.shard_meta_t_size_set)

    def __init__(self):
        this = _python_libstorj.new_shard_meta_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_shard_meta_t
    __del__ = lambda self: None
shard_meta_t_swigregister = _python_libstorj.shard_meta_t_swigregister
shard_meta_t_swigregister(shard_meta_t)

class farmer_pointer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, farmer_pointer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, farmer_pointer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["token"] = _python_libstorj.farmer_pointer_t_token_set
    __swig_getmethods__["token"] = _python_libstorj.farmer_pointer_t_token_get
    if _newclass:
        token = _swig_property(_python_libstorj.farmer_pointer_t_token_get, _python_libstorj.farmer_pointer_t_token_set)
    __swig_setmethods__["farmer_user_agent"] = _python_libstorj.farmer_pointer_t_farmer_user_agent_set
    __swig_getmethods__["farmer_user_agent"] = _python_libstorj.farmer_pointer_t_farmer_user_agent_get
    if _newclass:
        farmer_user_agent = _swig_property(_python_libstorj.farmer_pointer_t_farmer_user_agent_get, _python_libstorj.farmer_pointer_t_farmer_user_agent_set)
    __swig_setmethods__["farmer_protocol"] = _python_libstorj.farmer_pointer_t_farmer_protocol_set
    __swig_getmethods__["farmer_protocol"] = _python_libstorj.farmer_pointer_t_farmer_protocol_get
    if _newclass:
        farmer_protocol = _swig_property(_python_libstorj.farmer_pointer_t_farmer_protocol_get, _python_libstorj.farmer_pointer_t_farmer_protocol_set)
    __swig_setmethods__["farmer_address"] = _python_libstorj.farmer_pointer_t_farmer_address_set
    __swig_getmethods__["farmer_address"] = _python_libstorj.farmer_pointer_t_farmer_address_get
    if _newclass:
        farmer_address = _swig_property(_python_libstorj.farmer_pointer_t_farmer_address_get, _python_libstorj.farmer_pointer_t_farmer_address_set)
    __swig_setmethods__["farmer_port"] = _python_libstorj.farmer_pointer_t_farmer_port_set
    __swig_getmethods__["farmer_port"] = _python_libstorj.farmer_pointer_t_farmer_port_get
    if _newclass:
        farmer_port = _swig_property(_python_libstorj.farmer_pointer_t_farmer_port_get, _python_libstorj.farmer_pointer_t_farmer_port_set)
    __swig_setmethods__["farmer_node_id"] = _python_libstorj.farmer_pointer_t_farmer_node_id_set
    __swig_getmethods__["farmer_node_id"] = _python_libstorj.farmer_pointer_t_farmer_node_id_get
    if _newclass:
        farmer_node_id = _swig_property(_python_libstorj.farmer_pointer_t_farmer_node_id_get, _python_libstorj.farmer_pointer_t_farmer_node_id_set)

    def __init__(self):
        this = _python_libstorj.new_farmer_pointer_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_farmer_pointer_t
    __del__ = lambda self: None
farmer_pointer_t_swigregister = _python_libstorj.farmer_pointer_t_swigregister
farmer_pointer_t_swigregister(farmer_pointer_t)

class shard_tracker_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shard_tracker_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shard_tracker_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["progress"] = _python_libstorj.shard_tracker_t_progress_set
    __swig_getmethods__["progress"] = _python_libstorj.shard_tracker_t_progress_get
    if _newclass:
        progress = _swig_property(_python_libstorj.shard_tracker_t_progress_get, _python_libstorj.shard_tracker_t_progress_set)
    __swig_setmethods__["push_frame_request_count"] = _python_libstorj.shard_tracker_t_push_frame_request_count_set
    __swig_getmethods__["push_frame_request_count"] = _python_libstorj.shard_tracker_t_push_frame_request_count_get
    if _newclass:
        push_frame_request_count = _swig_property(_python_libstorj.shard_tracker_t_push_frame_request_count_get, _python_libstorj.shard_tracker_t_push_frame_request_count_set)
    __swig_setmethods__["push_shard_request_count"] = _python_libstorj.shard_tracker_t_push_shard_request_count_set
    __swig_getmethods__["push_shard_request_count"] = _python_libstorj.shard_tracker_t_push_shard_request_count_get
    if _newclass:
        push_shard_request_count = _swig_property(_python_libstorj.shard_tracker_t_push_shard_request_count_get, _python_libstorj.shard_tracker_t_push_shard_request_count_set)
    __swig_setmethods__["index"] = _python_libstorj.shard_tracker_t_index_set
    __swig_getmethods__["index"] = _python_libstorj.shard_tracker_t_index_get
    if _newclass:
        index = _swig_property(_python_libstorj.shard_tracker_t_index_get, _python_libstorj.shard_tracker_t_index_set)
    __swig_setmethods__["pointer"] = _python_libstorj.shard_tracker_t_pointer_set
    __swig_getmethods__["pointer"] = _python_libstorj.shard_tracker_t_pointer_get
    if _newclass:
        pointer = _swig_property(_python_libstorj.shard_tracker_t_pointer_get, _python_libstorj.shard_tracker_t_pointer_set)
    __swig_setmethods__["meta"] = _python_libstorj.shard_tracker_t_meta_set
    __swig_getmethods__["meta"] = _python_libstorj.shard_tracker_t_meta_get
    if _newclass:
        meta = _swig_property(_python_libstorj.shard_tracker_t_meta_get, _python_libstorj.shard_tracker_t_meta_set)
    __swig_setmethods__["report"] = _python_libstorj.shard_tracker_t_report_set
    __swig_getmethods__["report"] = _python_libstorj.shard_tracker_t_report_get
    if _newclass:
        report = _swig_property(_python_libstorj.shard_tracker_t_report_get, _python_libstorj.shard_tracker_t_report_set)
    __swig_setmethods__["uploaded_size"] = _python_libstorj.shard_tracker_t_uploaded_size_set
    __swig_getmethods__["uploaded_size"] = _python_libstorj.shard_tracker_t_uploaded_size_get
    if _newclass:
        uploaded_size = _swig_property(_python_libstorj.shard_tracker_t_uploaded_size_get, _python_libstorj.shard_tracker_t_uploaded_size_set)
    __swig_setmethods__["work"] = _python_libstorj.shard_tracker_t_work_set
    __swig_getmethods__["work"] = _python_libstorj.shard_tracker_t_work_get
    if _newclass:
        work = _swig_property(_python_libstorj.shard_tracker_t_work_get, _python_libstorj.shard_tracker_t_work_set)

    def __init__(self):
        this = _python_libstorj.new_shard_tracker_t()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_shard_tracker_t
    __del__ = lambda self: None
shard_tracker_t_swigregister = _python_libstorj.shard_tracker_t_swigregister
shard_tracker_t_swigregister(shard_tracker_t)

class UploadState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UploadState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UploadState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["env"] = _python_libstorj.UploadState_env_set
    __swig_getmethods__["env"] = _python_libstorj.UploadState_env_get
    if _newclass:
        env = _swig_property(_python_libstorj.UploadState_env_get, _python_libstorj.UploadState_env_set)
    __swig_setmethods__["shard_concurrency"] = _python_libstorj.UploadState_shard_concurrency_set
    __swig_getmethods__["shard_concurrency"] = _python_libstorj.UploadState_shard_concurrency_get
    if _newclass:
        shard_concurrency = _swig_property(_python_libstorj.UploadState_shard_concurrency_get, _python_libstorj.UploadState_shard_concurrency_set)
    __swig_setmethods__["index"] = _python_libstorj.UploadState_index_set
    __swig_getmethods__["index"] = _python_libstorj.UploadState_index_get
    if _newclass:
        index = _swig_property(_python_libstorj.UploadState_index_get, _python_libstorj.UploadState_index_set)
    __swig_setmethods__["file_name"] = _python_libstorj.UploadState_file_name_set
    __swig_getmethods__["file_name"] = _python_libstorj.UploadState_file_name_get
    if _newclass:
        file_name = _swig_property(_python_libstorj.UploadState_file_name_get, _python_libstorj.UploadState_file_name_set)
    __swig_setmethods__["info"] = _python_libstorj.UploadState_info_set
    __swig_getmethods__["info"] = _python_libstorj.UploadState_info_get
    if _newclass:
        info = _swig_property(_python_libstorj.UploadState_info_get, _python_libstorj.UploadState_info_set)
    __swig_setmethods__["encrypted_file_name"] = _python_libstorj.UploadState_encrypted_file_name_set
    __swig_getmethods__["encrypted_file_name"] = _python_libstorj.UploadState_encrypted_file_name_get
    if _newclass:
        encrypted_file_name = _swig_property(_python_libstorj.UploadState_encrypted_file_name_get, _python_libstorj.UploadState_encrypted_file_name_set)
    __swig_setmethods__["original_file"] = _python_libstorj.UploadState_original_file_set
    __swig_getmethods__["original_file"] = _python_libstorj.UploadState_original_file_get
    if _newclass:
        original_file = _swig_property(_python_libstorj.UploadState_original_file_get, _python_libstorj.UploadState_original_file_set)
    __swig_setmethods__["file_size"] = _python_libstorj.UploadState_file_size_set
    __swig_getmethods__["file_size"] = _python_libstorj.UploadState_file_size_get
    if _newclass:
        file_size = _swig_property(_python_libstorj.UploadState_file_size_get, _python_libstorj.UploadState_file_size_set)
    __swig_setmethods__["bucket_id"] = _python_libstorj.UploadState_bucket_id_set
    __swig_getmethods__["bucket_id"] = _python_libstorj.UploadState_bucket_id_get
    if _newclass:
        bucket_id = _swig_property(_python_libstorj.UploadState_bucket_id_get, _python_libstorj.UploadState_bucket_id_set)
    __swig_setmethods__["bucket_key"] = _python_libstorj.UploadState_bucket_key_set
    __swig_getmethods__["bucket_key"] = _python_libstorj.UploadState_bucket_key_get
    if _newclass:
        bucket_key = _swig_property(_python_libstorj.UploadState_bucket_key_get, _python_libstorj.UploadState_bucket_key_set)
    __swig_setmethods__["completed_shards"] = _python_libstorj.UploadState_completed_shards_set
    __swig_getmethods__["completed_shards"] = _python_libstorj.UploadState_completed_shards_get
    if _newclass:
        completed_shards = _swig_property(_python_libstorj.UploadState_completed_shards_get, _python_libstorj.UploadState_completed_shards_set)
    __swig_setmethods__["total_shards"] = _python_libstorj.UploadState_total_shards_set
    __swig_getmethods__["total_shards"] = _python_libstorj.UploadState_total_shards_get
    if _newclass:
        total_shards = _swig_property(_python_libstorj.UploadState_total_shards_get, _python_libstorj.UploadState_total_shards_set)
    __swig_setmethods__["total_data_shards"] = _python_libstorj.UploadState_total_data_shards_set
    __swig_getmethods__["total_data_shards"] = _python_libstorj.UploadState_total_data_shards_get
    if _newclass:
        total_data_shards = _swig_property(_python_libstorj.UploadState_total_data_shards_get, _python_libstorj.UploadState_total_data_shards_set)
    __swig_setmethods__["total_parity_shards"] = _python_libstorj.UploadState_total_parity_shards_set
    __swig_getmethods__["total_parity_shards"] = _python_libstorj.UploadState_total_parity_shards_get
    if _newclass:
        total_parity_shards = _swig_property(_python_libstorj.UploadState_total_parity_shards_get, _python_libstorj.UploadState_total_parity_shards_set)
    __swig_setmethods__["shard_size"] = _python_libstorj.UploadState_shard_size_set
    __swig_getmethods__["shard_size"] = _python_libstorj.UploadState_shard_size_get
    if _newclass:
        shard_size = _swig_property(_python_libstorj.UploadState_shard_size_get, _python_libstorj.UploadState_shard_size_set)
    __swig_setmethods__["total_bytes"] = _python_libstorj.UploadState_total_bytes_set
    __swig_getmethods__["total_bytes"] = _python_libstorj.UploadState_total_bytes_get
    if _newclass:
        total_bytes = _swig_property(_python_libstorj.UploadState_total_bytes_get, _python_libstorj.UploadState_total_bytes_set)
    __swig_setmethods__["uploaded_bytes"] = _python_libstorj.UploadState_uploaded_bytes_set
    __swig_getmethods__["uploaded_bytes"] = _python_libstorj.UploadState_uploaded_bytes_get
    if _newclass:
        uploaded_bytes = _swig_property(_python_libstorj.UploadState_uploaded_bytes_get, _python_libstorj.UploadState_uploaded_bytes_set)
    __swig_setmethods__["exclude"] = _python_libstorj.UploadState_exclude_set
    __swig_getmethods__["exclude"] = _python_libstorj.UploadState_exclude_get
    if _newclass:
        exclude = _swig_property(_python_libstorj.UploadState_exclude_get, _python_libstorj.UploadState_exclude_set)
    __swig_setmethods__["frame_id"] = _python_libstorj.UploadState_frame_id_set
    __swig_getmethods__["frame_id"] = _python_libstorj.UploadState_frame_id_get
    if _newclass:
        frame_id = _swig_property(_python_libstorj.UploadState_frame_id_get, _python_libstorj.UploadState_frame_id_set)
    __swig_setmethods__["hmac_id"] = _python_libstorj.UploadState_hmac_id_set
    __swig_getmethods__["hmac_id"] = _python_libstorj.UploadState_hmac_id_get
    if _newclass:
        hmac_id = _swig_property(_python_libstorj.UploadState_hmac_id_get, _python_libstorj.UploadState_hmac_id_set)
    __swig_setmethods__["encryption_key"] = _python_libstorj.UploadState_encryption_key_set
    __swig_getmethods__["encryption_key"] = _python_libstorj.UploadState_encryption_key_get
    if _newclass:
        encryption_key = _swig_property(_python_libstorj.UploadState_encryption_key_get, _python_libstorj.UploadState_encryption_key_set)
    __swig_setmethods__["encryption_ctr"] = _python_libstorj.UploadState_encryption_ctr_set
    __swig_getmethods__["encryption_ctr"] = _python_libstorj.UploadState_encryption_ctr_get
    if _newclass:
        encryption_ctr = _swig_property(_python_libstorj.UploadState_encryption_ctr_get, _python_libstorj.UploadState_encryption_ctr_set)
    __swig_setmethods__["rs"] = _python_libstorj.UploadState_rs_set
    __swig_getmethods__["rs"] = _python_libstorj.UploadState_rs_get
    if _newclass:
        rs = _swig_property(_python_libstorj.UploadState_rs_get, _python_libstorj.UploadState_rs_set)
    __swig_setmethods__["awaiting_parity_shards"] = _python_libstorj.UploadState_awaiting_parity_shards_set
    __swig_getmethods__["awaiting_parity_shards"] = _python_libstorj.UploadState_awaiting_parity_shards_get
    if _newclass:
        awaiting_parity_shards = _swig_property(_python_libstorj.UploadState_awaiting_parity_shards_get, _python_libstorj.UploadState_awaiting_parity_shards_set)
    __swig_setmethods__["parity_file_path"] = _python_libstorj.UploadState_parity_file_path_set
    __swig_getmethods__["parity_file_path"] = _python_libstorj.UploadState_parity_file_path_get
    if _newclass:
        parity_file_path = _swig_property(_python_libstorj.UploadState_parity_file_path_get, _python_libstorj.UploadState_parity_file_path_set)
    __swig_setmethods__["parity_file"] = _python_libstorj.UploadState_parity_file_set
    __swig_getmethods__["parity_file"] = _python_libstorj.UploadState_parity_file_get
    if _newclass:
        parity_file = _swig_property(_python_libstorj.UploadState_parity_file_get, _python_libstorj.UploadState_parity_file_set)
    __swig_setmethods__["encrypted_file_path"] = _python_libstorj.UploadState_encrypted_file_path_set
    __swig_getmethods__["encrypted_file_path"] = _python_libstorj.UploadState_encrypted_file_path_get
    if _newclass:
        encrypted_file_path = _swig_property(_python_libstorj.UploadState_encrypted_file_path_get, _python_libstorj.UploadState_encrypted_file_path_set)
    __swig_setmethods__["encrypted_file"] = _python_libstorj.UploadState_encrypted_file_set
    __swig_getmethods__["encrypted_file"] = _python_libstorj.UploadState_encrypted_file_get
    if _newclass:
        encrypted_file = _swig_property(_python_libstorj.UploadState_encrypted_file_get, _python_libstorj.UploadState_encrypted_file_set)
    __swig_setmethods__["creating_encrypted_file"] = _python_libstorj.UploadState_creating_encrypted_file_set
    __swig_getmethods__["creating_encrypted_file"] = _python_libstorj.UploadState_creating_encrypted_file_get
    if _newclass:
        creating_encrypted_file = _swig_property(_python_libstorj.UploadState_creating_encrypted_file_get, _python_libstorj.UploadState_creating_encrypted_file_set)
    __swig_setmethods__["requesting_frame"] = _python_libstorj.UploadState_requesting_frame_set
    __swig_getmethods__["requesting_frame"] = _python_libstorj.UploadState_requesting_frame_get
    if _newclass:
        requesting_frame = _swig_property(_python_libstorj.UploadState_requesting_frame_get, _python_libstorj.UploadState_requesting_frame_set)
    __swig_setmethods__["completed_upload"] = _python_libstorj.UploadState_completed_upload_set
    __swig_getmethods__["completed_upload"] = _python_libstorj.UploadState_completed_upload_get
    if _newclass:
        completed_upload = _swig_property(_python_libstorj.UploadState_completed_upload_get, _python_libstorj.UploadState_completed_upload_set)
    __swig_setmethods__["creating_bucket_entry"] = _python_libstorj.UploadState_creating_bucket_entry_set
    __swig_getmethods__["creating_bucket_entry"] = _python_libstorj.UploadState_creating_bucket_entry_get
    if _newclass:
        creating_bucket_entry = _swig_property(_python_libstorj.UploadState_creating_bucket_entry_get, _python_libstorj.UploadState_creating_bucket_entry_set)
    __swig_setmethods__["received_all_pointers"] = _python_libstorj.UploadState_received_all_pointers_set
    __swig_getmethods__["received_all_pointers"] = _python_libstorj.UploadState_received_all_pointers_get
    if _newclass:
        received_all_pointers = _swig_property(_python_libstorj.UploadState_received_all_pointers_get, _python_libstorj.UploadState_received_all_pointers_set)
    __swig_setmethods__["final_callback_called"] = _python_libstorj.UploadState_final_callback_called_set
    __swig_getmethods__["final_callback_called"] = _python_libstorj.UploadState_final_callback_called_get
    if _newclass:
        final_callback_called = _swig_property(_python_libstorj.UploadState_final_callback_called_get, _python_libstorj.UploadState_final_callback_called_set)
    __swig_setmethods__["canceled"] = _python_libstorj.UploadState_canceled_set
    __swig_getmethods__["canceled"] = _python_libstorj.UploadState_canceled_get
    if _newclass:
        canceled = _swig_property(_python_libstorj.UploadState_canceled_get, _python_libstorj.UploadState_canceled_set)
    __swig_setmethods__["bucket_verified"] = _python_libstorj.UploadState_bucket_verified_set
    __swig_getmethods__["bucket_verified"] = _python_libstorj.UploadState_bucket_verified_get
    if _newclass:
        bucket_verified = _swig_property(_python_libstorj.UploadState_bucket_verified_get, _python_libstorj.UploadState_bucket_verified_set)
    __swig_setmethods__["file_verified"] = _python_libstorj.UploadState_file_verified_set
    __swig_getmethods__["file_verified"] = _python_libstorj.UploadState_file_verified_get
    if _newclass:
        file_verified = _swig_property(_python_libstorj.UploadState_file_verified_get, _python_libstorj.UploadState_file_verified_set)
    __swig_setmethods__["progress_finished"] = _python_libstorj.UploadState_progress_finished_set
    __swig_getmethods__["progress_finished"] = _python_libstorj.UploadState_progress_finished_get
    if _newclass:
        progress_finished = _swig_property(_python_libstorj.UploadState_progress_finished_get, _python_libstorj.UploadState_progress_finished_set)
    __swig_setmethods__["push_shard_limit"] = _python_libstorj.UploadState_push_shard_limit_set
    __swig_getmethods__["push_shard_limit"] = _python_libstorj.UploadState_push_shard_limit_get
    if _newclass:
        push_shard_limit = _swig_property(_python_libstorj.UploadState_push_shard_limit_get, _python_libstorj.UploadState_push_shard_limit_set)
    __swig_setmethods__["push_frame_limit"] = _python_libstorj.UploadState_push_frame_limit_set
    __swig_getmethods__["push_frame_limit"] = _python_libstorj.UploadState_push_frame_limit_get
    if _newclass:
        push_frame_limit = _swig_property(_python_libstorj.UploadState_push_frame_limit_get, _python_libstorj.UploadState_push_frame_limit_set)
    __swig_setmethods__["prepare_frame_limit"] = _python_libstorj.UploadState_prepare_frame_limit_set
    __swig_getmethods__["prepare_frame_limit"] = _python_libstorj.UploadState_prepare_frame_limit_get
    if _newclass:
        prepare_frame_limit = _swig_property(_python_libstorj.UploadState_prepare_frame_limit_get, _python_libstorj.UploadState_prepare_frame_limit_set)
    __swig_setmethods__["frame_request_count"] = _python_libstorj.UploadState_frame_request_count_set
    __swig_getmethods__["frame_request_count"] = _python_libstorj.UploadState_frame_request_count_get
    if _newclass:
        frame_request_count = _swig_property(_python_libstorj.UploadState_frame_request_count_get, _python_libstorj.UploadState_frame_request_count_set)
    __swig_setmethods__["add_bucket_entry_count"] = _python_libstorj.UploadState_add_bucket_entry_count_set
    __swig_getmethods__["add_bucket_entry_count"] = _python_libstorj.UploadState_add_bucket_entry_count_get
    if _newclass:
        add_bucket_entry_count = _swig_property(_python_libstorj.UploadState_add_bucket_entry_count_get, _python_libstorj.UploadState_add_bucket_entry_count_set)
    __swig_setmethods__["bucket_verify_count"] = _python_libstorj.UploadState_bucket_verify_count_set
    __swig_getmethods__["bucket_verify_count"] = _python_libstorj.UploadState_bucket_verify_count_get
    if _newclass:
        bucket_verify_count = _swig_property(_python_libstorj.UploadState_bucket_verify_count_get, _python_libstorj.UploadState_bucket_verify_count_set)
    __swig_setmethods__["file_verify_count"] = _python_libstorj.UploadState_file_verify_count_set
    __swig_getmethods__["file_verify_count"] = _python_libstorj.UploadState_file_verify_count_get
    if _newclass:
        file_verify_count = _swig_property(_python_libstorj.UploadState_file_verify_count_get, _python_libstorj.UploadState_file_verify_count_set)
    __swig_setmethods__["create_encrypted_file_count"] = _python_libstorj.UploadState_create_encrypted_file_count_set
    __swig_getmethods__["create_encrypted_file_count"] = _python_libstorj.UploadState_create_encrypted_file_count_get
    if _newclass:
        create_encrypted_file_count = _swig_property(_python_libstorj.UploadState_create_encrypted_file_count_get, _python_libstorj.UploadState_create_encrypted_file_count_set)
    __swig_setmethods__["progress_cb"] = _python_libstorj.UploadState_progress_cb_set
    __swig_getmethods__["progress_cb"] = _python_libstorj.UploadState_progress_cb_get
    if _newclass:
        progress_cb = _swig_property(_python_libstorj.UploadState_progress_cb_get, _python_libstorj.UploadState_progress_cb_set)
    __swig_setmethods__["finished_cb"] = _python_libstorj.UploadState_finished_cb_set
    __swig_getmethods__["finished_cb"] = _python_libstorj.UploadState_finished_cb_get
    if _newclass:
        finished_cb = _swig_property(_python_libstorj.UploadState_finished_cb_get, _python_libstorj.UploadState_finished_cb_set)
    __swig_setmethods__["error_status"] = _python_libstorj.UploadState_error_status_set
    __swig_getmethods__["error_status"] = _python_libstorj.UploadState_error_status_get
    if _newclass:
        error_status = _swig_property(_python_libstorj.UploadState_error_status_get, _python_libstorj.UploadState_error_status_set)
    __swig_setmethods__["log"] = _python_libstorj.UploadState_log_set
    __swig_getmethods__["log"] = _python_libstorj.UploadState_log_get
    if _newclass:
        log = _swig_property(_python_libstorj.UploadState_log_get, _python_libstorj.UploadState_log_set)
    __swig_setmethods__["handle"] = _python_libstorj.UploadState_handle_set
    __swig_getmethods__["handle"] = _python_libstorj.UploadState_handle_get
    if _newclass:
        handle = _swig_property(_python_libstorj.UploadState_handle_get, _python_libstorj.UploadState_handle_set)
    __swig_setmethods__["shard"] = _python_libstorj.UploadState_shard_set
    __swig_getmethods__["shard"] = _python_libstorj.UploadState_shard_get
    if _newclass:
        shard = _swig_property(_python_libstorj.UploadState_shard_get, _python_libstorj.UploadState_shard_set)
    __swig_setmethods__["pending_work_count"] = _python_libstorj.UploadState_pending_work_count_set
    __swig_getmethods__["pending_work_count"] = _python_libstorj.UploadState_pending_work_count_get
    if _newclass:
        pending_work_count = _swig_property(_python_libstorj.UploadState_pending_work_count_get, _python_libstorj.UploadState_pending_work_count_set)

    def __init__(self):
        this = _python_libstorj.new_UploadState()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _python_libstorj.delete_UploadState
    __del__ = lambda self: None
UploadState_swigregister = _python_libstorj.UploadState_swigregister
UploadState_swigregister(UploadState)


def init_env(options, encrypt_options, http_options, log_options):
    return _python_libstorj.init_env(options, encrypt_options, http_options, log_options)
init_env = _python_libstorj.init_env

def destroy_env(env):
    return _python_libstorj.destroy_env(env)
destroy_env = _python_libstorj.destroy_env

def storj_encrypt_write_auth(filepath, passhrase, bridge_user, bridge_pass, mnemonic):
    return _python_libstorj.storj_encrypt_write_auth(filepath, passhrase, bridge_user, bridge_pass, mnemonic)
storj_encrypt_write_auth = _python_libstorj.storj_encrypt_write_auth

def storj_encrypt_auth(passhrase, bridge_user, bridge_pass, mnemonic):
    return _python_libstorj.storj_encrypt_auth(passhrase, bridge_user, bridge_pass, mnemonic)
storj_encrypt_auth = _python_libstorj.storj_encrypt_auth

def storj_decrypt_read_auth(filepath, passphrase, bridge_user, bridge_pass, mnemonic):
    return _python_libstorj.storj_decrypt_read_auth(filepath, passphrase, bridge_user, bridge_pass, mnemonic)
storj_decrypt_read_auth = _python_libstorj.storj_decrypt_read_auth

def storj_decrypt_auth(buffer, passphrase, bridge_user, bridge_pass, mnemonic):
    return _python_libstorj.storj_decrypt_auth(buffer, passphrase, bridge_user, bridge_pass, mnemonic)
storj_decrypt_auth = _python_libstorj.storj_decrypt_auth

def storj_util_timestamp():
    return _python_libstorj.storj_util_timestamp()
storj_util_timestamp = _python_libstorj.storj_util_timestamp

def storj_mnemonic_check(mnemonic):
    return _python_libstorj.storj_mnemonic_check(mnemonic)
storj_mnemonic_check = _python_libstorj.storj_mnemonic_check

def strerror(error_code):
    return _python_libstorj.strerror(error_code)
strerror = _python_libstorj.strerror

def storj_bridge_get_info(env, handle, cb):
    return _python_libstorj.storj_bridge_get_info(env, handle, cb)
storj_bridge_get_info = _python_libstorj.storj_bridge_get_info

def storj_bridge_get_buckets(env, handle, cb):
    return _python_libstorj.storj_bridge_get_buckets(env, handle, cb)
storj_bridge_get_buckets = _python_libstorj.storj_bridge_get_buckets

def storj_free_get_buckets_request(req):
    return _python_libstorj.storj_free_get_buckets_request(req)
storj_free_get_buckets_request = _python_libstorj.storj_free_get_buckets_request

def storj_bridge_create_bucket(env, name, handle, cb):
    return _python_libstorj.storj_bridge_create_bucket(env, name, handle, cb)
storj_bridge_create_bucket = _python_libstorj.storj_bridge_create_bucket

def storj_bridge_delete_bucket(env, id, handle, cb):
    return _python_libstorj.storj_bridge_delete_bucket(env, id, handle, cb)
storj_bridge_delete_bucket = _python_libstorj.storj_bridge_delete_bucket

def storj_bridge_get_bucket(env, id, handle, cb):
    return _python_libstorj.storj_bridge_get_bucket(env, id, handle, cb)
storj_bridge_get_bucket = _python_libstorj.storj_bridge_get_bucket

def storj_free_get_bucket_request(req):
    return _python_libstorj.storj_free_get_bucket_request(req)
storj_free_get_bucket_request = _python_libstorj.storj_free_get_bucket_request

def storj_bridge_get_bucket_id(env, name, handle, cb):
    return _python_libstorj.storj_bridge_get_bucket_id(env, name, handle, cb)
storj_bridge_get_bucket_id = _python_libstorj.storj_bridge_get_bucket_id

def storj_bridge_list_files(env, id, handle, cb):
    return _python_libstorj.storj_bridge_list_files(env, id, handle, cb)
storj_bridge_list_files = _python_libstorj.storj_bridge_list_files

def storj_free_list_files_request(req):
    return _python_libstorj.storj_free_list_files_request(req)
storj_free_list_files_request = _python_libstorj.storj_free_list_files_request

def storj_bridge_create_bucket_token(env, bucket_id, operation, handle, cb):
    return _python_libstorj.storj_bridge_create_bucket_token(env, bucket_id, operation, handle, cb)
storj_bridge_create_bucket_token = _python_libstorj.storj_bridge_create_bucket_token

def storj_bridge_get_file_pointers(env, bucket_id, file_id, handle, cb):
    return _python_libstorj.storj_bridge_get_file_pointers(env, bucket_id, file_id, handle, cb)
storj_bridge_get_file_pointers = _python_libstorj.storj_bridge_get_file_pointers

def storj_bridge_delete_file(env, bucket_id, file_id, handle, cb):
    return _python_libstorj.storj_bridge_delete_file(env, bucket_id, file_id, handle, cb)
storj_bridge_delete_file = _python_libstorj.storj_bridge_delete_file

def storj_bridge_create_frame(env, handle, cb):
    return _python_libstorj.storj_bridge_create_frame(env, handle, cb)
storj_bridge_create_frame = _python_libstorj.storj_bridge_create_frame

def storj_bridge_get_frames(env, handle, cb):
    return _python_libstorj.storj_bridge_get_frames(env, handle, cb)
storj_bridge_get_frames = _python_libstorj.storj_bridge_get_frames

def storj_bridge_get_frame(env, frame_id, handle, cb):
    return _python_libstorj.storj_bridge_get_frame(env, frame_id, handle, cb)
storj_bridge_get_frame = _python_libstorj.storj_bridge_get_frame

def storj_bridge_delete_frame(env, frame_id, handle, cb):
    return _python_libstorj.storj_bridge_delete_frame(env, frame_id, handle, cb)
storj_bridge_delete_frame = _python_libstorj.storj_bridge_delete_frame

def storj_bridge_get_file_info(env, bucket_id, file_id, handle, cb):
    return _python_libstorj.storj_bridge_get_file_info(env, bucket_id, file_id, handle, cb)
storj_bridge_get_file_info = _python_libstorj.storj_bridge_get_file_info

def storj_free_get_file_info_request(req):
    return _python_libstorj.storj_free_get_file_info_request(req)
storj_free_get_file_info_request = _python_libstorj.storj_free_get_file_info_request

def storj_bridge_get_file_id(env, bucket_id, file_name, handle, cb):
    return _python_libstorj.storj_bridge_get_file_id(env, bucket_id, file_name, handle, cb)
storj_bridge_get_file_id = _python_libstorj.storj_bridge_get_file_id

def storj_bridge_list_mirrors(env, bucket_id, file_id, handle, cb):
    return _python_libstorj.storj_bridge_list_mirrors(env, bucket_id, file_id, handle, cb)
storj_bridge_list_mirrors = _python_libstorj.storj_bridge_list_mirrors

def storj_bridge_store_file_cancel(state):
    return _python_libstorj.storj_bridge_store_file_cancel(state)
storj_bridge_store_file_cancel = _python_libstorj.storj_bridge_store_file_cancel

def storj_bridge_store_file(env, opts, handle, progress_cb, finished_cb):
    return _python_libstorj.storj_bridge_store_file(env, opts, handle, progress_cb, finished_cb)
storj_bridge_store_file = _python_libstorj.storj_bridge_store_file

def storj_free_uploaded_file_info(file):
    return _python_libstorj.storj_free_uploaded_file_info(file)
storj_free_uploaded_file_info = _python_libstorj.storj_free_uploaded_file_info

def storj_bridge_resolve_file_cancel(state):
    return _python_libstorj.storj_bridge_resolve_file_cancel(state)
storj_bridge_resolve_file_cancel = _python_libstorj.storj_bridge_resolve_file_cancel

def storj_bridge_resolve_file(env, bucket_id, file_id, destination, handle, progress_cb, finished_cb):
    return _python_libstorj.storj_bridge_resolve_file(env, bucket_id, file_id, destination, handle, progress_cb, finished_cb)
storj_bridge_resolve_file = _python_libstorj.storj_bridge_resolve_file

def storj_bridge_register(env, email, password, handle, cb):
    return _python_libstorj.storj_bridge_register(env, email, password, handle, cb)
storj_bridge_register = _python_libstorj.storj_bridge_register

def separator():
    return _python_libstorj.separator()
separator = _python_libstorj.separator

def get_info(env, handle):
    return _python_libstorj.get_info(env, handle)
get_info = _python_libstorj.get_info

def get_info_cb(work_req, status):
    return _python_libstorj.get_info_cb(work_req, status)
get_info_cb = _python_libstorj.get_info_cb

def create_bucket(env, name, handle):
    return _python_libstorj.create_bucket(env, name, handle)
create_bucket = _python_libstorj.create_bucket

def create_bucket_cb(work_req, status):
    return _python_libstorj.create_bucket_cb(work_req, status)
create_bucket_cb = _python_libstorj.create_bucket_cb

def delete_bucket(env, id, handle):
    return _python_libstorj.delete_bucket(env, id, handle)
delete_bucket = _python_libstorj.delete_bucket

def delete_bucket_cb(work_req, status):
    return _python_libstorj.delete_bucket_cb(work_req, status)
delete_bucket_cb = _python_libstorj.delete_bucket_cb

def get_bucket_id(env, name, handle):
    return _python_libstorj.get_bucket_id(env, name, handle)
get_bucket_id = _python_libstorj.get_bucket_id

def get_bucket_id_cb(work_req, status):
    return _python_libstorj.get_bucket_id_cb(work_req, status)
get_bucket_id_cb = _python_libstorj.get_bucket_id_cb

def list_buckets(env, handle):
    return _python_libstorj.list_buckets(env, handle)
list_buckets = _python_libstorj.list_buckets

def list_buckets_cb(work_req, status):
    return _python_libstorj.list_buckets_cb(work_req, status)
list_buckets_cb = _python_libstorj.list_buckets_cb

def delete_file(env, bucket_id, file_id, handle):
    return _python_libstorj.delete_file(env, bucket_id, file_id, handle)
delete_file = _python_libstorj.delete_file

def delete_file_cb(work_req, status):
    return _python_libstorj.delete_file_cb(work_req, status)
delete_file_cb = _python_libstorj.delete_file_cb

def list_files(env, py_bucket_id, callback):
    return _python_libstorj.list_files(env, py_bucket_id, callback)
list_files = _python_libstorj.list_files

def list_files_cb(work_req, status):
    return _python_libstorj.list_files_cb(work_req, status)
list_files_cb = _python_libstorj.list_files_cb

def store_file(env, upload_options, progress_callback, finished_callback):
    return _python_libstorj.store_file(env, upload_options, progress_callback, finished_callback)
store_file = _python_libstorj.store_file

def set_loop(env):
    return _python_libstorj.set_loop(env)
set_loop = _python_libstorj.set_loop

def run(loop):
    return _python_libstorj.run(loop)
run = _python_libstorj.run

def fopen(pathname, mode):
    return _python_libstorj.fopen(pathname, mode)
fopen = _python_libstorj.fopen
# This file is compatible with both classic and new-style classes.


