<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:date="http://exslt.org/dates-and-times"
                xmlns:str="http://exslt.org/strings"
                xmlns:pf="http://publiforge.org/functions"
                extension-element-prefixes="date str pf">

  <!--
      =========================================================================
      Template html_frame
      =========================================================================
  -->
  <xsl:template name="html_frame">
    <xsl:param name="title"/>
    <xsl:param name="nojs"/>
    <xsl:param name="body"/>
    <xsl:text disable-output-escaping="yes">&lt;!DOCTYPE html&gt;
</xsl:text>
    <xsl:comment> Generated by PubliForge, <xsl:value-of select="date:date-time()"/> </xsl:comment>
    <html>
      <xsl:attribute name="xml:lang"><xsl:value-of select="$lang"/></xsl:attribute>
      <xsl:attribute name="lang"><xsl:value-of select="$lang"/></xsl:attribute>
      <head>
        <meta charset="utf-8"/>
        <xsl:if test="name()='quiz'">
          <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
        </xsl:if>
        <title><xsl:value-of select="$title"/></title>
        <xsl:choose>
          <xsl:when test="$minify">
            <link rel="StyleSheet" href="{$css_dir}styles.css" type="text/css"/>
            <xsl:if test="not($nojs) or $onefile">
              <script src="{$js_dir}jquery.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <script src="{$js_dir}scripts.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <xsl:choose>
                <xsl:when test="memory">
                  <script src="{$js_dir}memory_loader.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:when>
                <xsl:otherwise>
                  <script src="{$js_dir}publiquiz_loader.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <link rel="stylesheet" href="{$css_dir}reset.css" type="text/css"/>
            <link rel="stylesheet" href="{$css_dir}publidoc.css" type="text/css"/>
            <link rel="stylesheet" href="{$css_dir}publiquiz.css" type="text/css"/>
            <link rel="stylesheet" href="{$css_dir}custom.css" type="text/css"/>
            <xsl:if test="not($nojs) or $onefile">
              <script src="{$js_dir}jquery.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <xsl:if test="$aud and $aud_custom">
                <script src="{$js_dir}audio_player.js" type="text/javascript"><xsl:text> </xsl:text></script>
              </xsl:if>
              <script src="{$js_dir}publidoc.js" type="text/javascript"><xsl:text> </xsl:text></script>
              <xsl:if test="name()='quiz'">
                <xsl:if test="$coloring or $memory">
                  <script src="{$js_dir}code.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <xsl:if test="$coloring">
                  <script src="{$js_dir}publianim_drawing.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <script src="{$js_dir}publiquiz.js" type="text/javascript"><xsl:text> </xsl:text></script>
                <script src="{$js_dir}publiquiz_basics.js" type="text/javascript"><xsl:text> </xsl:text></script>
                <xsl:if test="$matching_link">
                  <script src="{$js_dir}publiquiz_matching_link.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <xsl:if test="$correct_line">
                  <script src="{$js_dir}publiquiz_correct_line.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <xsl:if test="$wordsearch">
                  <script src="{$js_dir}publiquiz_wordsearch.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <xsl:if test="$flashcard">
                  <script src="{$js_dir}publiquiz_flashcard.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <xsl:if test="$coloring">
                  <script src="{$js_dir}publiquiz_coloring.js" type="text/javascript"><xsl:text> </xsl:text></script>
                </xsl:if>
                <xsl:choose>
                  <xsl:when test="memory">
                    <script src="{$js_dir}memory.js" type="text/javascript"><xsl:text> </xsl:text></script>
                    <script src="{$js_dir}memory_loader.js" type="text/javascript"><xsl:text> </xsl:text></script>
                  </xsl:when>
                  <xsl:otherwise>
                    <script src="{$js_dir}publiquiz_loader.js" type="text/javascript"><xsl:text> </xsl:text></script>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:if>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </head>
      <xsl:copy-of select="$body"/>
    </html>
  </xsl:template>

  <!--
      =========================================================================
      Template minify_files
      =========================================================================
  -->
  <xsl:template name="minify_files">
    <xsl:if test="$minify">
      <xsl:document
          href="{$path}{$css_dir}styles.css" method="text" encoding="utf-8">
reset.css
publidoc.css
publiquiz.css
custom.css
      </xsl:document>
      <xsl:if test="$js">
        <xsl:document
            href="{$path}{$js_dir}scripts.js" method="text" encoding="utf-8">
<xsl:if test="$aud and $aud_custom">
audio_player.js
</xsl:if>
publidoc.js
<xsl:if test="$coloring or $memory">
code.js
</xsl:if>
<xsl:if test="$coloring">
publianim_drawing.js
</xsl:if>
publiquiz.js
publiquiz_basics.js
<xsl:if test="$matching_link">
publiquiz_matching_link.js
</xsl:if>
<xsl:if test="$correct_line">
publiquiz_correct_line.js
</xsl:if>
<xsl:if test="$wordsearch">
publiquiz_wordsearch.js
</xsl:if>
<xsl:if test="$flashcard">
publiquiz_flashcard.js
</xsl:if>
<xsl:if test="$coloring">
publiquiz_coloring.js
</xsl:if>
<xsl:if test="$memory">
memory.js
</xsl:if>
        </xsl:document>
      </xsl:if>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template has_toc_children
      =========================================================================
  -->
  <xsl:template name="has_toc_children">
    <xsl:if test=".//division[head/title or ($toc_with_abstract and head/abstract)]
                  or .//topic[head/title or @type='title' or @type='copyright'
                    or @type='dedication' or @type='inscription'
                    or ($toc_with_abstract and head/abstract)]
                  or .//quiz[head/title]
                  or .//section[$toc_section_depth&gt;count(ancestor::section)
                    and (head/title or ($toc_with_abstract and head/abstract))]
                  or ($toc_section_depth&gt;0 and .//bibliography)">1</xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template anchor_levels
      =========================================================================
  -->
  <xsl:template name="anchor_levels"/>

  <!--
      =========================================================================
      Template navigation
      =========================================================================
  -->
  <xsl:template name="navigation">
    <xsl:param name="bottom"/>
    <xsl:if test="not($nonav)">
      <xsl:variable name="previous"
                    select="preceding::topic|preceding::quiz
                            |ancestor::division[$toc_division_depth&gt;count(ancestor::division)]
                            |preceding::division[$toc_division_depth&gt;count(ancestor::division)]"/>
      <div>
        <xsl:attribute name="class">
          <xsl:text>pdocNavBar col111</xsl:text>
          <xsl:if test="not($bottom)"> top</xsl:if>
          <xsl:if test="$bottom"> bottom</xsl:if>
        </xsl:attribute>
        <xsl:if test="$bottom"><hr/></xsl:if>

        <div class="colFirst">
          <xsl:choose>
            <xsl:when test="$previous">
              <xsl:choose>
                <xsl:when test="name($previous[last()])='topic'">
                  <a href="{$fid}-tpc-{format-number(count(preceding::topic), '0000')}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:when>
                <xsl:when test="name($previous[last()])='quiz'">
                  <a href="{$fid}-quz-{format-number(count(preceding::quiz), '0000')}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-div-{format-number(count($previous[last()]/preceding::division
                           |$previous[last()]/ancestor::division)+1, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_previous.png" alt="Previous"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>Â </xsl:otherwise>
          </xsl:choose>
        </div>

        <div class="col">
          <a href="{$home}{$html_ext}">
            <img src="{$img_dir}go_up.png" alt="up"/>
          </a>
        </div>

        <div class="colLast">
          <xsl:choose>
            <xsl:when test="name()='division' and division
                            and $toc_division_depth&gt;count(ancestor::division)+1">
              <a href="{$fid}-div-{format-number(count(preceding::division
                       |ancestor::division)+2, '0000')}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="name()='division'">
              <xsl:choose>
                <xsl:when test="name(.//*[name()='topic' or name()='quiz'])='quiz'">
                  <a href="{$fid}-quz-{format-number(count(preceding::quiz)+1, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-tpc-{format-number(count(preceding::topic)+1, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:when test="name(following::*[1])='division'
                            and $toc_division_depth&gt;count(following::*[1]/ancestor::division)">
              <a href="{$fid}-div-{format-number(count(following::*[1]/preceding::division
                       |following::*[1]/ancestor::division)+1, '0000')}{$html_ext}">
                <img src="{$img_dir}go_next.png" alt="Next"/>
              </a>
            </xsl:when>
            <xsl:when test="name(following::*[name()='topic' or name()='quiz'])='topic'">
              <xsl:choose>
                <xsl:when test="name()='topic'">
                  <a href="{$fid}-tpc-{format-number(count(preceding::topic)+2, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-tpc-{format-number(count(preceding::topic)+1, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:when test="name(following::*[name()='topic' or name()='quiz'])='quiz'">
              <xsl:choose>
                <xsl:when test="name()='quiz'">
                  <a href="{$fid}-quz-{format-number(count(preceding::quiz)+2, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:when>
                <xsl:otherwise>
                  <a href="{$fid}-quz-{format-number(count(preceding::quiz)+1, '0000')}{$html_ext}">
                    <img src="{$img_dir}go_next.png" alt="Next"/>
                  </a>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>Â </xsl:otherwise>
          </xsl:choose>
        </div>
        <xsl:if test="not($bottom)"><hr/></xsl:if>
      </div>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_toc_title
      =========================================================================
  -->
  <xsl:template name="quiz_toc_title">
    <xsl:choose>
      <xsl:when test="head/shorttitle">
        <xsl:apply-templates select="head/shorttitle" mode="link"/>
      </xsl:when>
      <xsl:when test="head/title">
        <xsl:apply-templates select="head/title" mode="link"/>
      </xsl:when>
    </xsl:choose>
    <xsl:for-each select="head/subtitle">
      <xsl:value-of select="$str_sep"/>
      <xsl:apply-templates mode="link"/>
    </xsl:for-each>
    <xsl:if test="$toc_with_abstract and head/abstract">
      <span class="pdocAbstract">
        <br/><xsl:apply-templates select="head/abstract" mode="link"/>
      </span>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template lead
      =========================================================================
  -->
  <xsl:template name="lead">
    <xsl:if test="not(preceding-sibling::topic) and not(preceding-sibling::quiz)
                  and (not($toc_division_depth) or count(ancestor::division)&gt;1)
                  and (parent::division/head/title or parent::division/front)">
      <xsl:for-each select="ancestor::division">
        <xsl:if test="not($toc_division_depth) or count(ancestor::division)">
          <xsl:apply-templates select="." mode="lead"/>
        </xsl:if>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_id
      =========================================================================
  -->
  <xsl:template name="quiz_id">
    <xsl:choose>
      <xsl:when test="ancestor::composite and name()='subquiz'">
        <xsl:value-of
            select="concat($fid, '-',
                    count(ancestor::composite/ancestor::quiz/preceding::quiz)+1,
                    '-', count(preceding-sibling::subquiz)+1)"/>
      </xsl:when>
      <xsl:when test="ancestor::composite">
        <xsl:value-of
            select="concat($fid, '-',
                    count(ancestor::composite/ancestor::quiz/preceding::quiz)+1,
                    '-', count(ancestor::subquiz/preceding-sibling::subquiz)+1)"/>
      </xsl:when>
      <xsl:when test="name()='quiz'">
        <xsl:value-of select="concat($fid, '-', count(preceding::quiz)+1)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of
            select="concat($fid, '-', count(ancestor::quiz/preceding::quiz)+1)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_engine
      =========================================================================
  -->
  <xsl:template name="quiz_engine">
    <xsl:param name="node" select="."/>

    <xsl:choose>
      <xsl:when test="$node/choices-radio">choices-radio</xsl:when>
      <xsl:when test="$node/choices-check">choices-check</xsl:when>
      <xsl:when test="$node/blanks-fill">blanks-fill</xsl:when>
      <xsl:when test="$node/blanks-select">blanks-select</xsl:when>
      <xsl:when test="$node/blanks-media">blanks-media</xsl:when>
      <xsl:when test="$node/correct-line">correct-line</xsl:when>
      <xsl:when test="$node/blanks-choices">blanks-choices</xsl:when>
      <xsl:when test="$node/pointing">pointing</xsl:when>
      <xsl:when test="$node/pointing-categories">pointing-categories</xsl:when>
      <xsl:when test="$node/matching">matching</xsl:when>
      <xsl:when test="$node/sort">sort</xsl:when>
      <xsl:when test="$node/categories">categories</xsl:when>
      <xsl:when test="$node/wordsearch">wordsearch</xsl:when>
      <xsl:when test="$node/coloring">coloring</xsl:when>
      <xsl:when test="$node/memory">memory</xsl:when>
      <xsl:when test="$node/production">production</xsl:when>
      <xsl:when test="$node/composite">composite</xsl:when>
      <xsl:when test="$node/flashcard">
        <xsl:call-template name="quiz_engine">
          <xsl:with-param name="node" select="$node/flashcard/side2"/>
        </xsl:call-template>
      </xsl:when>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_engine_options
      =========================================================================
  -->
  <xsl:template name="quiz_engine_options">
    <xsl:param name="node" select="."/>

    <xsl:if test="($node/choices-check and $mode_choices_check='radio')
                  or $node/pointing/@type='radio'">radio </xsl:if>

    <xsl:if test="$node/choices-radio/@shuffle='true' or $node/choices-check/@shuffle='true'
                  or $node/sort/@shuffle='true'">shuffle </xsl:if>
    <xsl:if test="$node/blanks-select/@no-shuffle='true' or $node/blanks-select/@no-shuffle='alpha'
                  or $node/blanks-media/@no-shuffle='true' or $node/blanks-media/@no-shuffle='alpha'
                  or $node/categories/@no-shuffle='true' or $node/categories/@no-shuffle='alpha'
                  or $node/matching/@no-shuffle='true' or $node/matching/@no-shuffle='alpha'"
            >no-shuffle </xsl:if>

    <xsl:if test="$node/blanks-fill/@strict='true'">strict total </xsl:if>

    <xsl:if test="$node/wordsearch/@strict='true'">strict</xsl:if>

    <xsl:if test="$node/blanks-select/@multiple='true' or $node/blanks-media/@multiple='true'
                  or $node/categories/@multiple='true' or $node/matching/@multiple='true'"
            >multiple </xsl:if>

    <xsl:if test="$node/blanks-choices and
                  ((not(processing-instruction('argument')) and $mode_blanks_choices='pointing')
                  or processing-instruction('argument')='pointing'
                  or contains(ancestor::quiz/processing-instruction('argument'), 'pointing'))"
            >pointing </xsl:if>

    <xsl:if test="$node/blanks-select and
                  ((not(processing-instruction('argument')) and $mode_blanks_select='combobox')
                  or processing-instruction('argument')='combobox'
                  or contains(ancestor::quiz/processing-instruction('argument'), 'combobox'))"
            >combobox </xsl:if>

    <xsl:if test="$node/matching and
                  ((not(processing-instruction('argument')) and $mode_matching='link')
                  or processing-instruction('argument')='link')">link </xsl:if>

    <xsl:if test="$node/categories and
                  ((not(processing-instruction('argument')) and $mode_categories='float')
                  or processing-instruction('argument')='float')">float </xsl:if>

    <xsl:if test="$node/categories and
                  ((not(processing-instruction('argument')) and $mode_categories='color')
                  or processing-instruction('argument')='color')">color </xsl:if>

    <xsl:if test="$node/categories and
                  ((not(processing-instruction('argument')) and $mode_categories='grid')
                  or processing-instruction('argument')='grid')">grid </xsl:if>

    <xsl:if test="$node/composite/@multipage='true'">multipage </xsl:if>

    <xsl:if test="$node/flashcard">
      <xsl:call-template name="quiz_engine_options">
        <xsl:with-param name="node" select="$node/flashcard/side2"/>
      </xsl:call-template>
    </xsl:if>

    <xsl:if test="$node/*/@nomark='true' or $node/coloring[not(areas)]"
            >nomark </xsl:if>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_engine_validation
      =========================================================================
  -->
  <!-- <xsl:template name="quiz_engine_validation"> -->
  <!--   <xsl:if test="((not(processing-instruction('mode')) and $mode_validation='immediate') -->
  <!--                 or processing-instruction('mode')='immediate' -->
  <!--                 or contains(ancestor::quiz/processing-instruction('mode'), 'immediate'))" -->
  <!--           >immediate</xsl:if> -->
  <!-- </xsl:template> -->

  <!--
      =========================================================================
      Template quiz_action
      =========================================================================
  -->
  <xsl:template name="quiz_action">
    <div class="publiquizAction"
         data-context-key="{$context_key}" data-context-ttl="{$context_ttl}">
      <xsl:call-template name="quiz_messages"/>
      <xsl:call-template name="quiz_buttons"/>
      <xsl:call-template name="quiz_configuration"/>
    </div>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_messages
      =========================================================================
  -->
  <xsl:template name="quiz_messages">
    <div class="pquizCongratulateMessages">
      <xsl:call-template name="quiz_message">
        <xsl:with-param name="msg" select="$i18n_congratulate1"/>
      </xsl:call-template>
      <xsl:call-template name="quiz_message">
        <xsl:with-param name="msg" select="$i18n_congratulate2"/>
      </xsl:call-template>
      <xsl:call-template name="quiz_message">
        <xsl:with-param name="msg" select="$i18n_congratulate3"/>
      </xsl:call-template>
      <xsl:call-template name="quiz_message">
        <xsl:with-param name="msg" select="$i18n_congratulate4"/>
      </xsl:call-template>
      <xsl:call-template name="quiz_message">
        <xsl:with-param name="msg" select="$i18n_congratulate5"/>
      </xsl:call-template>
      <xsl:call-template name="quiz_message">
        <xsl:with-param name="msg" select="$i18n_congratulate6"/>
      </xsl:call-template>
      <xsl:text> </xsl:text>
    </div>
  </xsl:template>

  <xsl:template name="quiz_message">
    <xsl:param name="msg"/>
    <xsl:param name="msg_content" select="substring-after($msg, ']')"/>
    <xsl:if test="$msg and contains($msg, ']')">
      <div class="pquizCongratulateMessage"
           data-score-range="{substring-after(substring-before($msg, ']'), '[')}">
        <xsl:for-each select="str:tokenize($msg_content, '|')">
          <div class="pquizMessage hidden abs">
            <div class="pquizMessageContent">
              <div class="pquizMessageClose"><xsl:text> </xsl:text></div>
              <div class="pquizGlobalScore pquizScore"><xsl:text> </xsl:text></div>
              <xsl:call-template name="message">
                <xsl:with-param name="content" select="."/>
              </xsl:call-template>
            </div>
          </div>
        </xsl:for-each>
      </div>
    </xsl:if>
  </xsl:template>

  <xsl:template name="message">
    <xsl:param name="content"/>
    <xsl:for-each select="str:tokenize($content, ',')">
      <xsl:choose>
        <xsl:when test="contains(., ':')">
          <xsl:if test="contains(., 'txt:')">
            <p class="pquizP"><xsl:value-of select="substring-after(., 'txt:')"/></p>
          </xsl:if>
          <xsl:if test="contains(., 'img:')">
            <div class="pquizMedia">
              <xsl:call-template name="image_feedback">
                <xsl:with-param name="id" select="substring-after(., 'img:')"/>
              </xsl:call-template>
            </div>
          </xsl:if>
          <xsl:if test="contains(., 'anim:')">
            <div class="pquizMedia">
              <xsl:call-template name="anim_feedback">
                <xsl:with-param name="id" select="substring-after(., 'anim:')"/>
              </xsl:call-template>
            </div>
          </xsl:if>
          <xsl:if test="contains(., 'aud:')">
            <div class="pquizMedia">
              <xsl:call-template name="audio">
                <xsl:with-param name="controls" select="0"/>
                <xsl:with-param name="id" select="substring-after(., 'aud:')"/>
              </xsl:call-template>
            </div>
          </xsl:if>
          <xsl:if test="contains(., 'vid:')">
            <div class="pquizMedia">
              <xsl:call-template name="video">
                <xsl:with-param name="id" select="substring-after(., 'vid:')"/>
              </xsl:call-template>
            </div>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <p class="pquizP"><xsl:value-of select="."/></p>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="image_feedback">
    <xsl:param name="id"/>
    <img alt="{$id}">
      <xsl:attribute name="src">
        <xsl:value-of select="concat($img_dir, $id)"/>
        <xsl:call-template name="image_extension"/>
      </xsl:attribute>
    </img>
  </xsl:template>

  <xsl:template name="anim_feedback">
    <xsl:param name="id"/>
    <img alt="{$id}">
      <xsl:attribute name="src">
        <xsl:value-of select="concat($img_dir, $id, '.gif')"/>
      </xsl:attribute>
    </img>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_buttons
      =========================================================================
  -->
  <xsl:template name="quiz_buttons">
    <div class="pquizButtons">
      <div class="pquizGlobalScore pquizScore hidden">
        <xsl:text> </xsl:text>
      </div>
      <a class="pquizVerifyUserAnswer pquizButton hidden">
        <xsl:value-of select="$i18n_verify_user_answer"/>
      </a>
      <a class="pquizSubmit pquizButton">
        <xsl:value-of select="$i18n_validate"/>
      </a>
      <xsl:if test="$max_retry">
        <a class="pquizRetry pquizButton hidden">
          <xsl:value-of select="$i18n_retry"/>
        </a>
      </xsl:if>
      <a class="pquizRightAnswer pquizButton hidden">
        <xsl:value-of select="$i18n_right_answer"/>
      </a>
      <a class="pquizUserAnswer pquizButton hidden">
        <xsl:value-of select="$i18n_user_answer"/>
      </a>
      <a class="pquizRedo pquizButton hidden">
        <xsl:value-of select="$i18n_redo"/>
      </a>
    </div>
  </xsl:template>

  <!--
      =========================================================================
      Template quiz_configuration
      =========================================================================
  -->
  <xsl:template name="quiz_configuration">
    <xsl:if test="$max_retry">
      <div class="pquizNbRetry hidden">
        <xsl:value-of select="$max_retry"/>
      </div>
    </xsl:if>
    <xsl:if test="$base_score">
      <div class="pquizBaseScore hidden">
        <xsl:value-of select="$base_score"/>
      </div>
    </xsl:if>
    <div class="pquizSuccessThreshold hidden">
      <xsl:choose>
        <xsl:when test="*/@success">
          <xsl:value-of select="*/@success"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="$success_threshold"/>
        </xsl:otherwise>
      </xsl:choose>
    </div>
  </xsl:template>

  <!--
      =========================================================================
      Template make_id
      =========================================================================
  -->
  <xsl:template name="make_id">
    <xsl:param name="item"/>
    <xsl:choose>
      <xsl:when test="$item/video">
        <xsl:value-of select="pf:make_id(string($item/video/@id), 'class')"/>
      </xsl:when>
      <xsl:when test="$item/audio">
        <xsl:value-of select="pf:make_id(string($item/audio/@id), 'class')"/>
      </xsl:when>
      <xsl:when test="$item/image">
        <xsl:value-of select="pf:make_id(string($item/image/@id), 'class')"/>
      </xsl:when>
      <xsl:when test="$item/math">
         <xsl:value-of select="substring-after(., '\')"/>
      </xsl:when>
      <xsl:when test="$item/p">
        <xsl:value-of select="translate(normalize-space($item/p), ' :|', '___')"/>
        <xsl:if test="p/audio"><xsl:value-of select="pf:make_id(string($item/p/audio/@id), 'class')"/></xsl:if>
        <xsl:if test="p/image"><xsl:value-of select="pf:make_id(string($item/p/image/@id), 'class')"/></xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="translate(normalize-space($item), ' :|', '___')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template blank_num, blank_separator
      =========================================================================
  -->
  <xsl:template name="blank_num">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:value-of
            select="format-number(count(preceding::blank)
                    -count(ancestor::subquiz/preceding::blank)+1, '000')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of
            select="format-number(count(preceding::blank)
                    -count(ancestor::quiz/preceding::blank)+1, '000')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="blank_separator">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:if test="count(following::blank)-count(ancestor::subquiz/following::blank)"
                >::</xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="count(following::blank)-count(ancestor::quiz/following::blank)"
                >::</xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template point_num, point_separator
      =========================================================================
  -->
  <xsl:template name="point_num">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:value-of
            select="format-number(
                    count(preceding::point)-count(ancestor::subquiz/preceding::point)+1,
                    '000')"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of
            select="format-number(
                    count(preceding::point)-count(ancestor::quiz/preceding::point)+1,
                    '000')"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="point_separator">
    <xsl:choose>
      <xsl:when test="ancestor::composite">
        <xsl:if test="count(following::point[@ref])
                      -count(ancestor::subquiz/following::point[@ref])">::</xsl:if>
      </xsl:when>
      <xsl:otherwise>
        <xsl:if test="count(following::point[@ref])
                      -count(ancestor::quiz/following::point[@ref])">::</xsl:if>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!--
      =========================================================================
      Template coloring_correct
      =========================================================================
  -->
  <xsl:template name="coloring_correct">
    <xsl:variable name="lowerhex">abcdef</xsl:variable>
    <xsl:variable name="upperhex">ABCDEF</xsl:variable>

    <xsl:text>{</xsl:text>
    <xsl:for-each select="palette/color">
      <xsl:variable name="code" select="translate(@code, $upperhex, $lowerhex)"/>
      <xsl:choose>
        <xsl:when test="@coderef">
          <xsl:call-template name="split_coderef">
            <xsl:with-param name="list" select="translate(@coderef, $upperhex, $lowerhex)"/>
            <xsl:with-param name="code" select="$code"/>
          </xsl:call-template>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="concat('&quot;', $code, '&quot;')"/>
          <xsl:value-of select="concat(':&quot;', $code, '&quot;')"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:if test="count(following-sibling::color) &gt; 0">,</xsl:if>
    </xsl:for-each>
    <xsl:text>}</xsl:text>
  </xsl:template>

  <!--
      =========================================================================
      Template coloring_palette
      =========================================================================
  -->
  <xsl:template name="coloring_palette">
    <xsl:choose>
      <xsl:when test="@nomark='true'">
        <div class="pquizColoringToolSize">
          <div><xsl:value-of select="$i18n_thickness"/></div>
          <div class="pquizColoringToolSizeButtons">
            <span class="pquizColoringToolSizeMinus">-</span>
            <span class="pquizColoringToolSizeValue">05</span>
            <span class="pquizColoringToolSizePlus">+</span>
          </div>
        </div>
        <div class="pquizColoringTool selected" data-drawing-tool="brush">
          <div class="pquizColoringSample">
            <img class="pquizColoringBrush" src="{$img_dir}brush.png" alt="paint_brush"/>
          </div>
        </div>
        <xsl:if test="areas">
          <div class="pquizColoringTool" data-drawing-tool="bucket">
            <div class="pquizColoringSample">
              <img class="pquizColoringBucket" src="{$img_dir}bucket.png" alt="paint_bucket"/>
            </div>
          </div>
        </xsl:if>
        <div class="pquizColoringTool" data-drawing-tool="eraser">
          <div class="pquizColoringSample">
            <img class="pquizColoringEraser" src="{$img_dir}eraser.png" alt="paint_eraser"/>
          </div>
        </div>
      </xsl:when>

      <xsl:otherwise>
        <div class="pquizColoringTool" data-drawing-color="#ffffff">
          <div class="pquizColoringSample">
            <img class="pquizColoringEraser" src="{$img_dir}eraser.png" alt="paint_eraser"/>
          </div>
        </div>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:apply-templates select="palette/color"/>
  </xsl:template>

  <!--
      =========================================================================
      Template split_coderef
      =========================================================================
  -->
  <xsl:template name="split_coderef">
    <xsl:param name="list"/>
    <xsl:param name="code"/>
    <xsl:variable name="newlist" select="concat(normalize-space($list), ' ')"/>
    <xsl:variable name="first" select="substring-before($newlist, ' ')"/>
    <xsl:variable name="remaining" select="substring-after($newlist, ' ')"/>

    <xsl:value-of select="concat('&quot;', $first, '&quot;:&quot;', $code, '&quot;')"/>
    <xsl:if test="$remaining">
      <xsl:text>,</xsl:text>
      <xsl:call-template name="split_coderef">
        <xsl:with-param name="list" select="$remaining"/>
        <xsl:with-param name="code" select="$code"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:template>

</xsl:stylesheet>
