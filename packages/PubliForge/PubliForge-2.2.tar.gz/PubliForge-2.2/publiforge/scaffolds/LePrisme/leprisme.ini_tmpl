
# -----------------------------------------------------------------------------
[Initialization]
directories = Dummy1, %(fid)s
templates = {{project}}
script = %(here)s/lib/{{package}}_init.py

[template:{{project}}]
path = Dummy2/%(fid)s
exclude = dummy1.txt
exclude[!keeptmp] = dummy3.txt

# -----------------------------------------------------------------------------
[Input]
#is_dir = false
#no_load = false
file_regex = \.xml$
content_regex = <publi(doc|set)
#unzip = designmap.xml
validate = true
#no_composition = false
#as_selection = false
#image.ext = svg, png, tif, tiff, jpg, jpeg, pdf, eps, gif
#audio.ext = wav, ogg, aac, ac3, mp3
#video.ext = dv, mpg, mp4, ogv, mov, avi, webm, flv

[RelaxNG]
publiset = %(here)s/RelaxNG/publiset.rng
publidoc = %(here)s/RelaxNG/publidoc.rng

# -----------------------------------------------------------------------------
[Transformation]
preprocess = %(here)s/lib/{{package}}_pre.py
preregex = %(here)s/Regex/{{package}}_pre.regex,
           %(here)s/Regex/{{package}}b_pre.regex
xsl = %(here)s/Xsl/{{package}}.xsl
postregex = %(here)s/Regex/{{package}}_post.regex
postregex.files = %(fid)s-\w+\.csv$
postprocess = %(here)s/lib/{{package}}_post.py

[Transformation:step2]
inactive = !step2
postregex = %(here)s/Regex/{{package}}2_post.regex
postprocess = %(here)s/lib/{{package}}2_post.py

# -----------------------------------------------------------------------------
[Output]
#make_id = standard, token (default), xmlid or a function
make_id = %(here)s/lib/{{package}}_make_id.py
format = %(fid)s.csv
#validate = false
#container = Zip

#[container:Zip]
#root =

#[container:OCF]
#root = Container~
#manifest = OEBPS/package.opf://opf:manifest
#checker = java -jar %(here)s/jars/epubcheck.jar %(ocffile)s

# -----------------------------------------------------------------------------
[Finalization]
#remove_regex = (~|\.tmp)(\.\w{1,4})?$
script = %(here)s/lib/{{package}}_final.py
