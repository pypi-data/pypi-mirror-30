# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-03-05 06:08
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('sources', '0001_initial'), ('sources', '0002_auto_20150608_1902'), ('sources', '0003_sourcelog'), ('sources', '0004_auto_20150616_1931'), ('sources', '0005_auto_20150708_0327'), ('sources', '0006_auto_20150708_0330'), ('sources', '0007_emailbasemodel_metadata_attachment_name'), ('sources', '0008_auto_20150815_0351'), ('sources', '0009_auto_20150930_2341'), ('sources', '0010_auto_20151001_0055'), ('sources', '0011_sanescanner'), ('sources', '0012_auto_20170205_0743'), ('sources', '0013_auto_20170206_0710'), ('sources', '0014_auto_20170206_0722'), ('sources', '0015_auto_20170206_0835'), ('sources', '0016_auto_20170630_2040')]

    initial = True

    dependencies = [
        ('metadata', '0007_auto_20150918_0800'),
        ('documents', '0001_initial'),
        ('contenttypes', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='Title')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
            ],
            options={
                'ordering': ('title',),
                'verbose_name': 'Source',
                'verbose_name_plural': 'Sources',
            },
        ),
        migrations.CreateModel(
            name='OutOfProcessSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.Source')),
            ],
            options={
                'verbose_name': 'Out of process',
                'verbose_name_plural': 'Out of process',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='IntervalBaseModel',
            fields=[
                ('outofprocesssource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.OutOfProcessSource')),
                ('interval', models.PositiveIntegerField(default=600, help_text='Interval in seconds between checks for new documents.', verbose_name='Interval')),
                ('uncompress', models.CharField(choices=[('y', 'Always'), ('n', 'Never')], help_text='Whether to expand or not, compressed archives.', max_length=1, verbose_name='Uncompress')),
            ],
            options={
                'verbose_name': 'Interval source',
                'verbose_name_plural': 'Interval sources',
            },
            bases=('sources.outofprocesssource',),
        ),
        migrations.CreateModel(
            name='EmailBaseModel',
            fields=[
                ('intervalbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.IntervalBaseModel')),
                ('host', models.CharField(max_length=128, verbose_name='Host')),
                ('ssl', models.BooleanField(default=True, verbose_name='SSL')),
                ('port', models.PositiveIntegerField(blank=True, help_text='Typical choices are 110 for POP3, 995 for POP3 over SSL, 143 for IMAP, 993 for IMAP over SSL.', null=True, verbose_name='Port')),
                ('username', models.CharField(max_length=96, verbose_name='Username')),
                ('password', models.CharField(max_length=96, verbose_name='Password')),
            ],
            options={
                'verbose_name': 'Email source',
                'verbose_name_plural': 'Email sources',
            },
            bases=('sources.intervalbasemodel',),
        ),
        migrations.CreateModel(
            name='POP3Email',
            fields=[
                ('emailbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.EmailBaseModel')),
                ('timeout', models.PositiveIntegerField(default=60, verbose_name='Timeout')),
            ],
            options={
                'verbose_name': 'POP email',
                'verbose_name_plural': 'POP email',
            },
            bases=('sources.emailbasemodel',),
        ),
        migrations.CreateModel(
            name='IMAPEmail',
            fields=[
                ('emailbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.EmailBaseModel')),
                ('mailbox', models.CharField(default='INBOX', help_text='IMAP Mailbox from which to check for messages.', max_length=64, verbose_name='Mailbox')),
            ],
            options={
                'verbose_name': 'IMAP email',
                'verbose_name_plural': 'IMAP email',
            },
            bases=('sources.emailbasemodel',),
        ),
        migrations.CreateModel(
            name='InteractiveSource',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.Source')),
            ],
            options={
                'verbose_name': 'Interactive source',
                'verbose_name_plural': 'Interactive sources',
            },
            bases=('sources.source',),
        ),
        migrations.CreateModel(
            name='StagingFolderSource',
            fields=[
                ('interactivesource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.InteractiveSource')),
                ('folder_path', models.CharField(help_text='Server side filesystem path.', max_length=255, verbose_name='Folder path')),
                ('preview_width', models.IntegerField(help_text='Width value to be passed to the converter backend.', verbose_name='Preview width')),
                ('preview_height', models.IntegerField(blank=True, help_text='Height value to be passed to the converter backend.', null=True, verbose_name='Preview height')),
                ('uncompress', models.CharField(choices=[('y', 'Always'), ('n', 'Never'), ('a', 'Ask user')], help_text='Whether to expand or not compressed archives.', max_length=1, verbose_name='Uncompress')),
                ('delete_after_upload', models.BooleanField(default=True, help_text='Delete the file after is has been successfully uploaded.', verbose_name='Delete after upload')),
            ],
            options={
                'verbose_name': 'Staging folder',
                'verbose_name_plural': 'Staging folders',
            },
            bases=('sources.interactivesource',),
        ),
        migrations.CreateModel(
            name='WatchFolderSource',
            fields=[
                ('intervalbasemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.IntervalBaseModel')),
                ('folder_path', models.CharField(help_text='Server side filesystem path.', max_length=255, verbose_name='Folder path')),
            ],
            options={
                'verbose_name': 'Watch folder',
                'verbose_name_plural': 'Watch folders',
            },
            bases=('sources.intervalbasemodel',),
        ),
        migrations.CreateModel(
            name='WebFormSource',
            fields=[
                ('interactivesource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.InteractiveSource')),
                ('uncompress', models.CharField(choices=[('y', 'Always'), ('n', 'Never'), ('a', 'Ask user')], help_text='Whether to expand or not compressed archives.', max_length=1, verbose_name='Uncompress')),
            ],
            options={
                'verbose_name': 'Web form',
                'verbose_name_plural': 'Web forms',
            },
            bases=('sources.interactivesource',),
        ),
        migrations.AddField(
            model_name='intervalbasemodel',
            name='document_type',
            field=models.ForeignKey(help_text='Assign a document type to documents uploaded from this source.', on_delete=django.db.models.deletion.CASCADE, to='documents.DocumentType', verbose_name='Document type'),
        ),
        migrations.CreateModel(
            name='SourceLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Date time')),
                ('message', models.TextField(blank=True, editable=False, verbose_name='Message')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='sources.Source', verbose_name='Source')),
            ],
            options={
                'get_latest_by': 'datetime',
                'ordering': ('-datetime',),
                'verbose_name_plural': 'Log entries',
                'verbose_name': 'Log entry',
            },
        ),
        migrations.AlterModelOptions(
            name='source',
            options={'ordering': ('label',), 'verbose_name': 'Source', 'verbose_name_plural': 'Sources'},
        ),
        migrations.RenameField(
            model_name='source',
            old_name='title',
            new_name='label',
        ),
        migrations.AlterField(
            model_name='source',
            name='label',
            field=models.CharField(max_length=64, verbose_name='Label'),
        ),
        migrations.AddField(
            model_name='emailbasemodel',
            name='metadata_attachment_name',
            field=models.CharField(default='metadata.yaml', help_text='Name of the attachment that will contains the metadata type names and value pairs to be assigned to the rest of the downloaded attachments. Note: This attachment has to be the first attachment.', max_length=128, verbose_name='Metadata attachment name'),
        ),
        migrations.AddField(
            model_name='emailbasemodel',
            name='from_metadata_type',
            field=models.ForeignKey(blank=True, help_text='Select a metadata type valid for the document type selected in which to store the email\'s "from" value.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_from', to='metadata.MetadataType', verbose_name='From metadata type'),
        ),
        migrations.AddField(
            model_name='emailbasemodel',
            name='subject_metadata_type',
            field=models.ForeignKey(blank=True, help_text="Select a metadata type valid for the document type selected in which to store the email's subject.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_subject', to='metadata.MetadataType', verbose_name='Subject metadata type'),
        ),
        migrations.AddField(
            model_name='emailbasemodel',
            name='store_body',
            field=models.BooleanField(default=True, help_text='Store the body of the email as a text document.', verbose_name='Store email body'),
        ),
        migrations.CreateModel(
            name='SaneScanner',
            fields=[
                ('interactivesource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sources.InteractiveSource')),
                ('device_name', models.CharField(help_text='Device name as returned by the SANE backend.', max_length=255, verbose_name='Device name')),
                ('mode', models.CharField(blank=True, choices=[('lineart', 'Lineart'), ('monochrome', 'Monochrome'), ('color', 'Color')], default='color', help_text='Selects the scan mode (e.g., lineart, monochrome, or color). If this option is not supported by your scanner, leave it blank.', max_length=16, verbose_name='Mode')),
                ('resolution', models.PositiveIntegerField(blank=True, help_text='Sets the resolution of the scanned image in DPI (dots per inch). Typical value is 200. If this option is not supported by your scanner, leave it blank.', null=True, verbose_name='Resolution')),
                ('adf_mode', models.CharField(blank=True, choices=[('simplex', 'Simplex'), ('duplex', 'Duplex')], default='simplex', help_text='Selects the document feeder mode (simplex/duplex). If this option is not supported by your scanner, leave it blank.', max_length=16, verbose_name='ADF mode')),
                ('source', models.CharField(blank=True, choices=[('flatbed', 'Flatbed'), ('Automatic Document Feeder', 'Document feeder')], default='flatbed', help_text='Selects the scan source (such as a document-feeder). If this option is not supported by your scanner, leave it blank.', max_length=32, verbose_name='Paper source')),
            ],
            options={
                'verbose_name': 'SANE Scanner',
                'verbose_name_plural': 'SANE Scanners',
            },
            bases=('sources.interactivesource',),
        ),
    ]
