# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-03-10 19:15
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('metadata', '0001_initial'), ('metadata', '0002_auto_20150708_0118'), ('metadata', '0003_auto_20150708_0323'), ('metadata', '0004_auto_20150708_0324'), ('metadata', '0005_auto_20150729_2344'), ('metadata', '0006_auto_20150820_0616'), ('metadata', '0007_auto_20150918_0800'), ('metadata', '0008_auto_20180310_1715')]

    dependencies = [
        ('documents', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='Value')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='documents.Document', verbose_name='Document')),
            ],
            options={
                'verbose_name': 'Document metadata',
                'verbose_name_plural': 'Document metadata',
            },
        ),
        migrations.CreateModel(
            name='DocumentTypeMetadataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('required', models.BooleanField(default=False, verbose_name='Required')),
                ('document_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='documents.DocumentType', verbose_name='Document type')),
            ],
            options={
                'verbose_name': 'Document type metadata type options',
                'verbose_name_plural': 'Document type metadata types options',
            },
        ),
        migrations.CreateModel(
            name='MetadataType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name used by other apps to reference this value. Do not use python reserved words, or spaces.', max_length=48, unique=True, verbose_name='Name')),
                ('label', models.CharField(max_length=48, verbose_name='Label')),
                ('default', models.CharField(blank=True, help_text="Enter a template to render. Use Django's default templating language (https://docs.djangoproject.com/en/1.7/ref/templates/builtins/)", max_length=128, null=True, verbose_name='Default')),
                ('lookup', models.TextField(blank=True, help_text="Enter a template to render. Must result in a comma delimited string. Use Django's default templating language (https://docs.djangoproject.com/en/1.7/ref/templates/builtins/).", null=True, verbose_name='Lookup')),
                ('validation', models.CharField(blank=True, choices=[(b'metadata.validators.DateAndTimeValidator', b'metadata.validators.DateAndTimeValidator'), (b'metadata.validators.DateValidator', b'metadata.validators.DateValidator'), (b'metadata.validators.TimeValidator', b'metadata.validators.TimeValidator')], help_text='The validator will reject data entry if the value entered does not conform to the expected format.', max_length=64, verbose_name='Validator')),
                ('parser', models.CharField(blank=True, choices=[(b'metadata.parsers.DateAndTimeParser', b'metadata.parsers.DateAndTimeParser'), (b'metadata.parsers.DateParser', b'metadata.parsers.DateParser'), (b'metadata.parsers.TimeParser', b'metadata.parsers.TimeParser')], help_text='The parser will reformat the value entered to conform to the expected format.', max_length=64, verbose_name='Parser')),
            ],
            options={
                'ordering': ('label',),
                'verbose_name': 'Metadata type',
                'verbose_name_plural': 'Metadata types',
            },
        ),
        migrations.AddField(
            model_name='documenttypemetadatatype',
            name='metadata_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.MetadataType', verbose_name='Metadata type'),
        ),
        migrations.AlterUniqueTogether(
            name='documenttypemetadatatype',
            unique_together=set([('document_type', 'metadata_type')]),
        ),
        migrations.AddField(
            model_name='documentmetadata',
            name='metadata_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metadata.MetadataType', verbose_name='Type'),
        ),
        migrations.AlterUniqueTogether(
            name='documentmetadata',
            unique_together=set([('document', 'metadata_type')]),
        ),
        migrations.AlterModelOptions(
            name='documentmetadata',
            options={'ordering': ('metadata_type',), 'verbose_name': 'Document metadata', 'verbose_name_plural': 'Document metadata'},
        ),
    ]
