
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import pim_snp_sg_member_ports
class pim_snp_sources(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mc-hms-operational - based on the path /igmp-snooping-state/pim-snp-groups/pim-snp-groups/pim-snp-sources. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: pim snooping source instance
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__src_addr','__src_flags','__src_uptime','__pim_snp_sg_member_ports',)

  _yang_name = 'pim-snp-sources'
  _rest_name = 'pim-snp-sources'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__src_uptime = YANGDynClass(base=unicode, is_leaf=True, yang_name="src-uptime", rest_name="src-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)
    self.__src_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__pim_snp_sg_member_ports = YANGDynClass(base=YANGListType("interface_name",pim_snp_sg_member_ports.pim_snp_sg_member_ports, yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}), is_container='list', yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__src_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="src-flags", rest_name="src-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'igmp-snooping-state', u'pim-snp-groups', u'pim-snp-groups', u'pim-snp-sources']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'igmp-snooping-state', u'pim-snp-groups', u'pim-snp-groups', u'pim-snp-sources']

  def _get_src_addr(self):
    """
    Getter method for src_addr, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/src_addr (inet:ipv4-address)

    YANG Description: source ip address
    """
    return self.__src_addr
      
  def _set_src_addr(self, v, load=False):
    """
    Setter method for src_addr, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/src_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_addr() directly.

    YANG Description: source ip address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__src_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_addr(self):
    self.__src_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_src_flags(self):
    """
    Getter method for src_flags, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/src_flags (uint8)

    YANG Description: pim snooping source flags
    """
    return self.__src_flags
      
  def _set_src_flags(self, v, load=False):
    """
    Setter method for src_flags, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/src_flags (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_flags is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_flags() directly.

    YANG Description: pim snooping source flags
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="src-flags", rest_name="src-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_flags must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="src-flags", rest_name="src-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint8', is_config=False)""",
        })

    self.__src_flags = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_flags(self):
    self.__src_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="src-flags", rest_name="src-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint8', is_config=False)


  def _get_src_uptime(self):
    """
    Getter method for src_uptime, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/src_uptime (string)

    YANG Description: src_uptime
    """
    return self.__src_uptime
      
  def _set_src_uptime(self, v, load=False):
    """
    Setter method for src_uptime, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/src_uptime (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_uptime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_uptime() directly.

    YANG Description: src_uptime
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="src-uptime", rest_name="src-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_uptime must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="src-uptime", rest_name="src-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)""",
        })

    self.__src_uptime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_uptime(self):
    self.__src_uptime = YANGDynClass(base=unicode, is_leaf=True, yang_name="src-uptime", rest_name="src-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)


  def _get_pim_snp_sg_member_ports(self):
    """
    Getter method for pim_snp_sg_member_ports, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/pim_snp_sg_member_ports (list)
    """
    return self.__pim_snp_sg_member_ports
      
  def _set_pim_snp_sg_member_ports(self, v, load=False):
    """
    Setter method for pim_snp_sg_member_ports, mapped from YANG variable /igmp_snooping_state/pim_snp_groups/pim_snp_groups/pim_snp_sources/pim_snp_sg_member_ports (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pim_snp_sg_member_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pim_snp_sg_member_ports() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_name",pim_snp_sg_member_ports.pim_snp_sg_member_ports, yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}), is_container='list', yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pim_snp_sg_member_ports must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_name",pim_snp_sg_member_ports.pim_snp_sg_member_ports, yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}), is_container='list', yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__pim_snp_sg_member_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pim_snp_sg_member_ports(self):
    self.__pim_snp_sg_member_ports = YANGDynClass(base=YANGListType("interface_name",pim_snp_sg_member_ports.pim_snp_sg_member_ports, yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}), is_container='list', yang_name="pim-snp-sg-member-ports", rest_name="pim-snp-sg-member-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-pim-snp-member-port-pim-snp-sg-member-ports-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)

  src_addr = __builtin__.property(_get_src_addr)
  src_flags = __builtin__.property(_get_src_flags)
  src_uptime = __builtin__.property(_get_src_uptime)
  pim_snp_sg_member_ports = __builtin__.property(_get_pim_snp_sg_member_ports)


  _pyangbind_elements = {'src_addr': src_addr, 'src_flags': src_flags, 'src_uptime': src_uptime, 'pim_snp_sg_member_ports': pim_snp_sg_member_ports, }


