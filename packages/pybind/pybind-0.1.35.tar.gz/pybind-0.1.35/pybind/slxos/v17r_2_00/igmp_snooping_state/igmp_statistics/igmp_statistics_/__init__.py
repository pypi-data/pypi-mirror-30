
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class igmp_statistics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mc-hms-operational - based on the path /igmp-snooping-state/igmp-statistics/igmp-statistics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_name','__query_edge_recvd','__query_edge_sent','__query_edge_rx_errors','__v1_report_edge_recvd','__v1_report_edge_sent','__v1_report_edge_rx_errors','__v2_report_edge_recvd','__v2_report_edge_sent','__v2_report_edge_rx_errors','__v3_report_edge_recvd','__v3_report_edge_sent','__v3_report_edge_rx_errors','__grp_leave_edge_recvd','__grp_leave_edge_sent','__grp_leave_edge_rx_errors','__pim_hello_edge_recvd','__pim_hello_edge_sent','__pim_hello_edge_rx_errors','__error_unknown_types','__error_bad_length','__error_bad_checksum',)

  _yang_name = 'igmp-statistics'
  _rest_name = 'igmp-statistics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__error_unknown_types = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-unknown-types", rest_name="error-unknown-types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__pim_hello_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-recvd", rest_name="pim-hello-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__query_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-recvd", rest_name="query-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__error_bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-checksum", rest_name="error-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v2_report_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-recvd", rest_name="v2-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__pim_hello_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-sent", rest_name="pim-hello-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__error_bad_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-length", rest_name="error-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v1_report_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-sent", rest_name="v1-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v1_report_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-recvd", rest_name="v1-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v2_report_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-sent", rest_name="v2-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__query_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-rx-errors", rest_name="query-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)
    self.__v2_report_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-rx-errors", rest_name="v2-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v3_report_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-rx-errors", rest_name="v3-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v1_report_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-rx-errors", rest_name="v1-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__pim_hello_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-rx-errors", rest_name="pim-hello-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__grp_leave_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-sent", rest_name="grp-leave-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__query_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-sent", rest_name="query-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__grp_leave_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-rx-errors", rest_name="grp-leave-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__grp_leave_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-recvd", rest_name="grp-leave-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v3_report_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-recvd", rest_name="v3-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    self.__v3_report_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-sent", rest_name="v3-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'igmp-snooping-state', u'igmp-statistics', u'igmp-statistics']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'igmp-snooping-state', u'igmp-statistics', u'igmp-statistics']

  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/interface_name (string)

    YANG Description: interface_name
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: interface_name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)


  def _get_query_edge_recvd(self):
    """
    Getter method for query_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/query_edge_recvd (uint32)

    YANG Description: query_edge_recvd
    """
    return self.__query_edge_recvd
      
  def _set_query_edge_recvd(self, v, load=False):
    """
    Setter method for query_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/query_edge_recvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_query_edge_recvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_query_edge_recvd() directly.

    YANG Description: query_edge_recvd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-recvd", rest_name="query-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """query_edge_recvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-recvd", rest_name="query-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__query_edge_recvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_query_edge_recvd(self):
    self.__query_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-recvd", rest_name="query-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_query_edge_sent(self):
    """
    Getter method for query_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/query_edge_sent (uint32)

    YANG Description: query_edge_sent
    """
    return self.__query_edge_sent
      
  def _set_query_edge_sent(self, v, load=False):
    """
    Setter method for query_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/query_edge_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_query_edge_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_query_edge_sent() directly.

    YANG Description: query_edge_sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-sent", rest_name="query-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """query_edge_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-sent", rest_name="query-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__query_edge_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_query_edge_sent(self):
    self.__query_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-sent", rest_name="query-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_query_edge_rx_errors(self):
    """
    Getter method for query_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/query_edge_rx_errors (uint32)

    YANG Description: query_edge_rx_errors
    """
    return self.__query_edge_rx_errors
      
  def _set_query_edge_rx_errors(self, v, load=False):
    """
    Setter method for query_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/query_edge_rx_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_query_edge_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_query_edge_rx_errors() directly.

    YANG Description: query_edge_rx_errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-rx-errors", rest_name="query-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """query_edge_rx_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-rx-errors", rest_name="query-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__query_edge_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_query_edge_rx_errors(self):
    self.__query_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="query-edge-rx-errors", rest_name="query-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v1_report_edge_recvd(self):
    """
    Getter method for v1_report_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v1_report_edge_recvd (uint32)

    YANG Description: v1_report_edge_recvd
    """
    return self.__v1_report_edge_recvd
      
  def _set_v1_report_edge_recvd(self, v, load=False):
    """
    Setter method for v1_report_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v1_report_edge_recvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v1_report_edge_recvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v1_report_edge_recvd() directly.

    YANG Description: v1_report_edge_recvd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-recvd", rest_name="v1-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v1_report_edge_recvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-recvd", rest_name="v1-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v1_report_edge_recvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v1_report_edge_recvd(self):
    self.__v1_report_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-recvd", rest_name="v1-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v1_report_edge_sent(self):
    """
    Getter method for v1_report_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v1_report_edge_sent (uint32)

    YANG Description: v1_report_edge_sent
    """
    return self.__v1_report_edge_sent
      
  def _set_v1_report_edge_sent(self, v, load=False):
    """
    Setter method for v1_report_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v1_report_edge_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v1_report_edge_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v1_report_edge_sent() directly.

    YANG Description: v1_report_edge_sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-sent", rest_name="v1-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v1_report_edge_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-sent", rest_name="v1-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v1_report_edge_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v1_report_edge_sent(self):
    self.__v1_report_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-sent", rest_name="v1-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v1_report_edge_rx_errors(self):
    """
    Getter method for v1_report_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v1_report_edge_rx_errors (uint32)

    YANG Description: v1_report_edge_rx_errors
    """
    return self.__v1_report_edge_rx_errors
      
  def _set_v1_report_edge_rx_errors(self, v, load=False):
    """
    Setter method for v1_report_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v1_report_edge_rx_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v1_report_edge_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v1_report_edge_rx_errors() directly.

    YANG Description: v1_report_edge_rx_errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-rx-errors", rest_name="v1-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v1_report_edge_rx_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-rx-errors", rest_name="v1-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v1_report_edge_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v1_report_edge_rx_errors(self):
    self.__v1_report_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v1-report-edge-rx-errors", rest_name="v1-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v2_report_edge_recvd(self):
    """
    Getter method for v2_report_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v2_report_edge_recvd (uint32)

    YANG Description: v2_report_edge_recvd
    """
    return self.__v2_report_edge_recvd
      
  def _set_v2_report_edge_recvd(self, v, load=False):
    """
    Setter method for v2_report_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v2_report_edge_recvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v2_report_edge_recvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v2_report_edge_recvd() directly.

    YANG Description: v2_report_edge_recvd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-recvd", rest_name="v2-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v2_report_edge_recvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-recvd", rest_name="v2-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v2_report_edge_recvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v2_report_edge_recvd(self):
    self.__v2_report_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-recvd", rest_name="v2-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v2_report_edge_sent(self):
    """
    Getter method for v2_report_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v2_report_edge_sent (uint32)

    YANG Description: v2_report_edge_sent
    """
    return self.__v2_report_edge_sent
      
  def _set_v2_report_edge_sent(self, v, load=False):
    """
    Setter method for v2_report_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v2_report_edge_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v2_report_edge_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v2_report_edge_sent() directly.

    YANG Description: v2_report_edge_sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-sent", rest_name="v2-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v2_report_edge_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-sent", rest_name="v2-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v2_report_edge_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v2_report_edge_sent(self):
    self.__v2_report_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-sent", rest_name="v2-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v2_report_edge_rx_errors(self):
    """
    Getter method for v2_report_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v2_report_edge_rx_errors (uint32)

    YANG Description: v2_report_edge_rx_errors
    """
    return self.__v2_report_edge_rx_errors
      
  def _set_v2_report_edge_rx_errors(self, v, load=False):
    """
    Setter method for v2_report_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v2_report_edge_rx_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v2_report_edge_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v2_report_edge_rx_errors() directly.

    YANG Description: v2_report_edge_rx_errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-rx-errors", rest_name="v2-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v2_report_edge_rx_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-rx-errors", rest_name="v2-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v2_report_edge_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v2_report_edge_rx_errors(self):
    self.__v2_report_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v2-report-edge-rx-errors", rest_name="v2-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v3_report_edge_recvd(self):
    """
    Getter method for v3_report_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v3_report_edge_recvd (uint32)

    YANG Description: v3_report_edge_recvd
    """
    return self.__v3_report_edge_recvd
      
  def _set_v3_report_edge_recvd(self, v, load=False):
    """
    Setter method for v3_report_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v3_report_edge_recvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v3_report_edge_recvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v3_report_edge_recvd() directly.

    YANG Description: v3_report_edge_recvd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-recvd", rest_name="v3-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v3_report_edge_recvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-recvd", rest_name="v3-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v3_report_edge_recvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v3_report_edge_recvd(self):
    self.__v3_report_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-recvd", rest_name="v3-report-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v3_report_edge_sent(self):
    """
    Getter method for v3_report_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v3_report_edge_sent (uint32)

    YANG Description: v3_report_edge_sent
    """
    return self.__v3_report_edge_sent
      
  def _set_v3_report_edge_sent(self, v, load=False):
    """
    Setter method for v3_report_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v3_report_edge_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v3_report_edge_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v3_report_edge_sent() directly.

    YANG Description: v3_report_edge_sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-sent", rest_name="v3-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v3_report_edge_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-sent", rest_name="v3-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v3_report_edge_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v3_report_edge_sent(self):
    self.__v3_report_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-sent", rest_name="v3-report-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_v3_report_edge_rx_errors(self):
    """
    Getter method for v3_report_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v3_report_edge_rx_errors (uint32)

    YANG Description: v3_report_edge_rx_errors
    """
    return self.__v3_report_edge_rx_errors
      
  def _set_v3_report_edge_rx_errors(self, v, load=False):
    """
    Setter method for v3_report_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/v3_report_edge_rx_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v3_report_edge_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v3_report_edge_rx_errors() directly.

    YANG Description: v3_report_edge_rx_errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-rx-errors", rest_name="v3-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v3_report_edge_rx_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-rx-errors", rest_name="v3-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v3_report_edge_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v3_report_edge_rx_errors(self):
    self.__v3_report_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v3-report-edge-rx-errors", rest_name="v3-report-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_grp_leave_edge_recvd(self):
    """
    Getter method for grp_leave_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/grp_leave_edge_recvd (uint32)

    YANG Description: grp_leave_edge_recvd
    """
    return self.__grp_leave_edge_recvd
      
  def _set_grp_leave_edge_recvd(self, v, load=False):
    """
    Setter method for grp_leave_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/grp_leave_edge_recvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grp_leave_edge_recvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grp_leave_edge_recvd() directly.

    YANG Description: grp_leave_edge_recvd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-recvd", rest_name="grp-leave-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grp_leave_edge_recvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-recvd", rest_name="grp-leave-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__grp_leave_edge_recvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grp_leave_edge_recvd(self):
    self.__grp_leave_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-recvd", rest_name="grp-leave-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_grp_leave_edge_sent(self):
    """
    Getter method for grp_leave_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/grp_leave_edge_sent (uint32)

    YANG Description: grp_leave_edge_sent
    """
    return self.__grp_leave_edge_sent
      
  def _set_grp_leave_edge_sent(self, v, load=False):
    """
    Setter method for grp_leave_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/grp_leave_edge_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grp_leave_edge_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grp_leave_edge_sent() directly.

    YANG Description: grp_leave_edge_sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-sent", rest_name="grp-leave-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grp_leave_edge_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-sent", rest_name="grp-leave-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__grp_leave_edge_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grp_leave_edge_sent(self):
    self.__grp_leave_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-sent", rest_name="grp-leave-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_grp_leave_edge_rx_errors(self):
    """
    Getter method for grp_leave_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/grp_leave_edge_rx_errors (uint32)

    YANG Description: grp_leave_edge_rx_errors
    """
    return self.__grp_leave_edge_rx_errors
      
  def _set_grp_leave_edge_rx_errors(self, v, load=False):
    """
    Setter method for grp_leave_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/grp_leave_edge_rx_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grp_leave_edge_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grp_leave_edge_rx_errors() directly.

    YANG Description: grp_leave_edge_rx_errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-rx-errors", rest_name="grp-leave-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grp_leave_edge_rx_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-rx-errors", rest_name="grp-leave-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__grp_leave_edge_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grp_leave_edge_rx_errors(self):
    self.__grp_leave_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="grp-leave-edge-rx-errors", rest_name="grp-leave-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_pim_hello_edge_recvd(self):
    """
    Getter method for pim_hello_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/pim_hello_edge_recvd (uint32)

    YANG Description: pim_hello_edge_recvd
    """
    return self.__pim_hello_edge_recvd
      
  def _set_pim_hello_edge_recvd(self, v, load=False):
    """
    Setter method for pim_hello_edge_recvd, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/pim_hello_edge_recvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pim_hello_edge_recvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pim_hello_edge_recvd() directly.

    YANG Description: pim_hello_edge_recvd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-recvd", rest_name="pim-hello-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pim_hello_edge_recvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-recvd", rest_name="pim-hello-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pim_hello_edge_recvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pim_hello_edge_recvd(self):
    self.__pim_hello_edge_recvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-recvd", rest_name="pim-hello-edge-recvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_pim_hello_edge_sent(self):
    """
    Getter method for pim_hello_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/pim_hello_edge_sent (uint32)

    YANG Description: pim_hello_edge_sent
    """
    return self.__pim_hello_edge_sent
      
  def _set_pim_hello_edge_sent(self, v, load=False):
    """
    Setter method for pim_hello_edge_sent, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/pim_hello_edge_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pim_hello_edge_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pim_hello_edge_sent() directly.

    YANG Description: pim_hello_edge_sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-sent", rest_name="pim-hello-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pim_hello_edge_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-sent", rest_name="pim-hello-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pim_hello_edge_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pim_hello_edge_sent(self):
    self.__pim_hello_edge_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-sent", rest_name="pim-hello-edge-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_pim_hello_edge_rx_errors(self):
    """
    Getter method for pim_hello_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/pim_hello_edge_rx_errors (uint32)

    YANG Description: pim_hello_edge_rx_errors
    """
    return self.__pim_hello_edge_rx_errors
      
  def _set_pim_hello_edge_rx_errors(self, v, load=False):
    """
    Setter method for pim_hello_edge_rx_errors, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/pim_hello_edge_rx_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pim_hello_edge_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pim_hello_edge_rx_errors() directly.

    YANG Description: pim_hello_edge_rx_errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-rx-errors", rest_name="pim-hello-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pim_hello_edge_rx_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-rx-errors", rest_name="pim-hello-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pim_hello_edge_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pim_hello_edge_rx_errors(self):
    self.__pim_hello_edge_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pim-hello-edge-rx-errors", rest_name="pim-hello-edge-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_error_unknown_types(self):
    """
    Getter method for error_unknown_types, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/error_unknown_types (uint32)

    YANG Description: error_unknown_types
    """
    return self.__error_unknown_types
      
  def _set_error_unknown_types(self, v, load=False):
    """
    Setter method for error_unknown_types, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/error_unknown_types (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_unknown_types is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_unknown_types() directly.

    YANG Description: error_unknown_types
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-unknown-types", rest_name="error-unknown-types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_unknown_types must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-unknown-types", rest_name="error-unknown-types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__error_unknown_types = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_unknown_types(self):
    self.__error_unknown_types = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-unknown-types", rest_name="error-unknown-types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_error_bad_length(self):
    """
    Getter method for error_bad_length, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/error_bad_length (uint32)

    YANG Description: error_bad_length
    """
    return self.__error_bad_length
      
  def _set_error_bad_length(self, v, load=False):
    """
    Setter method for error_bad_length, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/error_bad_length (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_bad_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_bad_length() directly.

    YANG Description: error_bad_length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-length", rest_name="error-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_bad_length must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-length", rest_name="error-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__error_bad_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_bad_length(self):
    self.__error_bad_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-length", rest_name="error-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)


  def _get_error_bad_checksum(self):
    """
    Getter method for error_bad_checksum, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/error_bad_checksum (uint32)

    YANG Description: error_bad_checksum
    """
    return self.__error_bad_checksum
      
  def _set_error_bad_checksum(self, v, load=False):
    """
    Setter method for error_bad_checksum, mapped from YANG variable /igmp_snooping_state/igmp_statistics/igmp_statistics/error_bad_checksum (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_bad_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_bad_checksum() directly.

    YANG Description: error_bad_checksum
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-checksum", rest_name="error-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_bad_checksum must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-checksum", rest_name="error-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)""",
        })

    self.__error_bad_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_bad_checksum(self):
    self.__error_bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="error-bad-checksum", rest_name="error-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='uint32', is_config=False)

  interface_name = __builtin__.property(_get_interface_name)
  query_edge_recvd = __builtin__.property(_get_query_edge_recvd)
  query_edge_sent = __builtin__.property(_get_query_edge_sent)
  query_edge_rx_errors = __builtin__.property(_get_query_edge_rx_errors)
  v1_report_edge_recvd = __builtin__.property(_get_v1_report_edge_recvd)
  v1_report_edge_sent = __builtin__.property(_get_v1_report_edge_sent)
  v1_report_edge_rx_errors = __builtin__.property(_get_v1_report_edge_rx_errors)
  v2_report_edge_recvd = __builtin__.property(_get_v2_report_edge_recvd)
  v2_report_edge_sent = __builtin__.property(_get_v2_report_edge_sent)
  v2_report_edge_rx_errors = __builtin__.property(_get_v2_report_edge_rx_errors)
  v3_report_edge_recvd = __builtin__.property(_get_v3_report_edge_recvd)
  v3_report_edge_sent = __builtin__.property(_get_v3_report_edge_sent)
  v3_report_edge_rx_errors = __builtin__.property(_get_v3_report_edge_rx_errors)
  grp_leave_edge_recvd = __builtin__.property(_get_grp_leave_edge_recvd)
  grp_leave_edge_sent = __builtin__.property(_get_grp_leave_edge_sent)
  grp_leave_edge_rx_errors = __builtin__.property(_get_grp_leave_edge_rx_errors)
  pim_hello_edge_recvd = __builtin__.property(_get_pim_hello_edge_recvd)
  pim_hello_edge_sent = __builtin__.property(_get_pim_hello_edge_sent)
  pim_hello_edge_rx_errors = __builtin__.property(_get_pim_hello_edge_rx_errors)
  error_unknown_types = __builtin__.property(_get_error_unknown_types)
  error_bad_length = __builtin__.property(_get_error_bad_length)
  error_bad_checksum = __builtin__.property(_get_error_bad_checksum)


  _pyangbind_elements = {'interface_name': interface_name, 'query_edge_recvd': query_edge_recvd, 'query_edge_sent': query_edge_sent, 'query_edge_rx_errors': query_edge_rx_errors, 'v1_report_edge_recvd': v1_report_edge_recvd, 'v1_report_edge_sent': v1_report_edge_sent, 'v1_report_edge_rx_errors': v1_report_edge_rx_errors, 'v2_report_edge_recvd': v2_report_edge_recvd, 'v2_report_edge_sent': v2_report_edge_sent, 'v2_report_edge_rx_errors': v2_report_edge_rx_errors, 'v3_report_edge_recvd': v3_report_edge_recvd, 'v3_report_edge_sent': v3_report_edge_sent, 'v3_report_edge_rx_errors': v3_report_edge_rx_errors, 'grp_leave_edge_recvd': grp_leave_edge_recvd, 'grp_leave_edge_sent': grp_leave_edge_sent, 'grp_leave_edge_rx_errors': grp_leave_edge_rx_errors, 'pim_hello_edge_recvd': pim_hello_edge_recvd, 'pim_hello_edge_sent': pim_hello_edge_sent, 'pim_hello_edge_rx_errors': pim_hello_edge_rx_errors, 'error_unknown_types': error_unknown_types, 'error_bad_length': error_bad_length, 'error_bad_checksum': error_bad_checksum, }


