
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import incl_src_ip
import excl_src_ip
class igmpv3_sources(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mc-hms-operational - based on the path /igmp-snooping-state/igmp-groups/igmp-groups/igmpv3-sources. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Igmp Snooping version 3 include/exclude source list
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_name','__incl_src_ip','__excl_src_ip',)

  _yang_name = 'igmpv3-sources'
  _rest_name = 'igmpv3-sources'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__incl_src_ip = YANGDynClass(base=YANGListType("ipv4_addr",incl_src_ip.incl_src_ip, yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}), is_container='list', yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)
    self.__excl_src_ip = YANGDynClass(base=YANGListType("ipv4_addr",excl_src_ip.excl_src_ip, yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}), is_container='list', yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'igmp-snooping-state', u'igmp-groups', u'igmp-groups', u'igmpv3-sources']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'igmp-snooping-state', u'igmp-groups', u'igmp-groups', u'igmpv3-sources']

  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /igmp_snooping_state/igmp_groups/igmp_groups/igmpv3_sources/interface_name (string)

    YANG Description: member ship interface for a igmp group
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /igmp_snooping_state/igmp_groups/igmp_groups/igmpv3_sources/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: member ship interface for a igmp group
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='string', is_config=False)


  def _get_incl_src_ip(self):
    """
    Getter method for incl_src_ip, mapped from YANG variable /igmp_snooping_state/igmp_groups/igmp_groups/igmpv3_sources/incl_src_ip (list)
    """
    return self.__incl_src_ip
      
  def _set_incl_src_ip(self, v, load=False):
    """
    Setter method for incl_src_ip, mapped from YANG variable /igmp_snooping_state/igmp_groups/igmp_groups/igmpv3_sources/incl_src_ip (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_incl_src_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_incl_src_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ipv4_addr",incl_src_ip.incl_src_ip, yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}), is_container='list', yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """incl_src_ip must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ipv4_addr",incl_src_ip.incl_src_ip, yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}), is_container='list', yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__incl_src_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_incl_src_ip(self):
    self.__incl_src_ip = YANGDynClass(base=YANGListType("ipv4_addr",incl_src_ip.incl_src_ip, yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}), is_container='list', yang_name="incl-src-ip", rest_name="incl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-incl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_excl_src_ip(self):
    """
    Getter method for excl_src_ip, mapped from YANG variable /igmp_snooping_state/igmp_groups/igmp_groups/igmpv3_sources/excl_src_ip (list)
    """
    return self.__excl_src_ip
      
  def _set_excl_src_ip(self, v, load=False):
    """
    Setter method for excl_src_ip, mapped from YANG variable /igmp_snooping_state/igmp_groups/igmp_groups/igmpv3_sources/excl_src_ip (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_excl_src_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_excl_src_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ipv4_addr",excl_src_ip.excl_src_ip, yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}), is_container='list', yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """excl_src_ip must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ipv4_addr",excl_src_ip.excl_src_ip, yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}), is_container='list', yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__excl_src_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_excl_src_ip(self):
    self.__excl_src_ip = YANGDynClass(base=YANGListType("ipv4_addr",excl_src_ip.excl_src_ip, yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-addr', extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}), is_container='list', yang_name="excl-src-ip", rest_name="excl-src-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-ipv4-addr-excl-src-ip-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)

  interface_name = __builtin__.property(_get_interface_name)
  incl_src_ip = __builtin__.property(_get_incl_src_ip)
  excl_src_ip = __builtin__.property(_get_excl_src_ip)


  _pyangbind_elements = {'interface_name': interface_name, 'incl_src_ip': incl_src_ip, 'excl_src_ip': excl_src_ip, }


