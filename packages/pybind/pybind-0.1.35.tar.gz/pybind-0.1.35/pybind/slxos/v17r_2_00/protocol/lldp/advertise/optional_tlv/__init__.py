
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class optional_tlv(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /protocol/lldp/advertise/optional-tlv. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__management_address','__port_description','__system_capabilities','__adv_tlv_system_description','__adv_tlv_system_name',)

  _yang_name = 'optional-tlv'
  _rest_name = 'optional-tlv'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__adv_tlv_system_description = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-description", rest_name="system-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Description', u'alt-name': u'system-description'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    self.__port_description = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-description", rest_name="port-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port-Description TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv port-description\n)', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    self.__adv_tlv_system_name = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-name", rest_name="system-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Name TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv system-name\n)', u'cli-show-no': None, u'alt-name': u'system-name'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    self.__management_address = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="management-address", rest_name="management-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Management Address TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    self.__system_capabilities = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-capabilities", rest_name="system-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Capabilities TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'protocol', u'lldp', u'advertise', u'optional-tlv']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'protocol', u'lldp', u'advertise', u'optional-tlv']

  def _get_management_address(self):
    """
    Getter method for management_address, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/management_address (empty)
    """
    return self.__management_address
      
  def _set_management_address(self, v, load=False):
    """
    Setter method for management_address, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/management_address (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_management_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_management_address() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="management-address", rest_name="management-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Management Address TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """management_address must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="management-address", rest_name="management-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Management Address TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)""",
        })

    self.__management_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_management_address(self):
    self.__management_address = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="management-address", rest_name="management-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Management Address TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)


  def _get_port_description(self):
    """
    Getter method for port_description, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/port_description (empty)
    """
    return self.__port_description
      
  def _set_port_description(self, v, load=False):
    """
    Setter method for port_description, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/port_description (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_description() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="port-description", rest_name="port-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port-Description TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv port-description\n)', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_description must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-description", rest_name="port-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port-Description TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv port-description\n)', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)""",
        })

    self.__port_description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_description(self):
    self.__port_description = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-description", rest_name="port-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port-Description TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv port-description\n)', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)


  def _get_system_capabilities(self):
    """
    Getter method for system_capabilities, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/system_capabilities (empty)
    """
    return self.__system_capabilities
      
  def _set_system_capabilities(self, v, load=False):
    """
    Setter method for system_capabilities, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/system_capabilities (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_capabilities is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_capabilities() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="system-capabilities", rest_name="system-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Capabilities TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_capabilities must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-capabilities", rest_name="system-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Capabilities TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)""",
        })

    self.__system_capabilities = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_capabilities(self):
    self.__system_capabilities = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="system-capabilities", rest_name="system-capabilities", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Capabilities TLV'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)


  def _get_adv_tlv_system_description(self):
    """
    Getter method for adv_tlv_system_description, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/adv_tlv_system_description (empty)
    """
    return self.__adv_tlv_system_description
      
  def _set_adv_tlv_system_description(self, v, load=False):
    """
    Setter method for adv_tlv_system_description, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/adv_tlv_system_description (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adv_tlv_system_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adv_tlv_system_description() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-description", rest_name="system-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Description', u'alt-name': u'system-description'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adv_tlv_system_description must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-description", rest_name="system-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Description', u'alt-name': u'system-description'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)""",
        })

    self.__adv_tlv_system_description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adv_tlv_system_description(self):
    self.__adv_tlv_system_description = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-description", rest_name="system-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Description', u'alt-name': u'system-description'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)


  def _get_adv_tlv_system_name(self):
    """
    Getter method for adv_tlv_system_name, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/adv_tlv_system_name (empty)
    """
    return self.__adv_tlv_system_name
      
  def _set_adv_tlv_system_name(self, v, load=False):
    """
    Setter method for adv_tlv_system_name, mapped from YANG variable /protocol/lldp/advertise/optional_tlv/adv_tlv_system_name (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adv_tlv_system_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adv_tlv_system_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-name", rest_name="system-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Name TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv system-name\n)', u'cli-show-no': None, u'alt-name': u'system-name'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adv_tlv_system_name must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-name", rest_name="system-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Name TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv system-name\n)', u'cli-show-no': None, u'alt-name': u'system-name'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)""",
        })

    self.__adv_tlv_system_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adv_tlv_system_name(self):
    self.__adv_tlv_system_name = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="adv-tlv-system-name", rest_name="system-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'System Name TLV', u'cli-run-template': u'$(.?\\r:no advertise optional-tlv system-name\n)', u'cli-show-no': None, u'alt-name': u'system-name'}}, namespace='urn:brocade.com:mgmt:brocade-lldp', defining_module='brocade-lldp', yang_type='empty', is_config=True)

  management_address = __builtin__.property(_get_management_address, _set_management_address)
  port_description = __builtin__.property(_get_port_description, _set_port_description)
  system_capabilities = __builtin__.property(_get_system_capabilities, _set_system_capabilities)
  adv_tlv_system_description = __builtin__.property(_get_adv_tlv_system_description, _set_adv_tlv_system_description)
  adv_tlv_system_name = __builtin__.property(_get_adv_tlv_system_name, _set_adv_tlv_system_name)


  _pyangbind_elements = {'management_address': management_address, 'port_description': port_description, 'system_capabilities': system_capabilities, 'adv_tlv_system_description': adv_tlv_system_description, 'adv_tlv_system_name': adv_tlv_system_name, }


