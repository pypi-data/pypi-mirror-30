
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import untagged_ports_list
import tagged_ports_list
class outer_vlan_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-nsm-operational - based on the path /bridge-domain-state/bridge-domain-list/outer-vlan-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: bd_vlan_tag_info
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__outer_vlan','__no_of_up_tagged_ports','__no_of_up_untagged_ports','__untagged_ports_list','__tagged_ports_list',)

  _yang_name = 'outer-vlan-list'
  _rest_name = 'outer-vlan-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__outer_vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="outer-vlan", rest_name="outer-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__no_of_up_untagged_ports = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-untagged-ports", rest_name="no-of-up-untagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__no_of_up_tagged_ports = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-tagged-ports", rest_name="no-of-up-tagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__untagged_ports_list = YANGDynClass(base=YANGListType("lif_name",untagged_ports_list.untagged_ports_list, yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)
    self.__tagged_ports_list = YANGDynClass(base=YANGListType("lif_name",tagged_ports_list.tagged_ports_list, yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bridge-domain-state', u'bridge-domain-list', u'outer-vlan-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bridge-domain-state', u'bridge-domain-list', u'outer-vlan-list']

  def _get_outer_vlan(self):
    """
    Getter method for outer_vlan, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/outer_vlan (uint32)

    YANG Description: outer_vlan
    """
    return self.__outer_vlan
      
  def _set_outer_vlan(self, v, load=False):
    """
    Setter method for outer_vlan, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/outer_vlan (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_outer_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_outer_vlan() directly.

    YANG Description: outer_vlan
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="outer-vlan", rest_name="outer-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """outer_vlan must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="outer-vlan", rest_name="outer-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__outer_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_outer_vlan(self):
    self.__outer_vlan = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="outer-vlan", rest_name="outer-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_no_of_up_tagged_ports(self):
    """
    Getter method for no_of_up_tagged_ports, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/no_of_up_tagged_ports (uint32)

    YANG Description: no_of_up_tagged_ports
    """
    return self.__no_of_up_tagged_ports
      
  def _set_no_of_up_tagged_ports(self, v, load=False):
    """
    Setter method for no_of_up_tagged_ports, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/no_of_up_tagged_ports (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_of_up_tagged_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_of_up_tagged_ports() directly.

    YANG Description: no_of_up_tagged_ports
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-tagged-ports", rest_name="no-of-up-tagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_of_up_tagged_ports must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-tagged-ports", rest_name="no-of-up-tagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__no_of_up_tagged_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_of_up_tagged_ports(self):
    self.__no_of_up_tagged_ports = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-tagged-ports", rest_name="no-of-up-tagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_no_of_up_untagged_ports(self):
    """
    Getter method for no_of_up_untagged_ports, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/no_of_up_untagged_ports (uint32)

    YANG Description: no_of_up_untagged_ports
    """
    return self.__no_of_up_untagged_ports
      
  def _set_no_of_up_untagged_ports(self, v, load=False):
    """
    Setter method for no_of_up_untagged_ports, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/no_of_up_untagged_ports (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_of_up_untagged_ports is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_of_up_untagged_ports() directly.

    YANG Description: no_of_up_untagged_ports
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-untagged-ports", rest_name="no-of-up-untagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_of_up_untagged_ports must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-untagged-ports", rest_name="no-of-up-untagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__no_of_up_untagged_ports = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_of_up_untagged_ports(self):
    self.__no_of_up_untagged_ports = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-of-up-untagged-ports", rest_name="no-of-up-untagged-ports", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_untagged_ports_list(self):
    """
    Getter method for untagged_ports_list, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/untagged_ports_list (list)

    YANG Description: untagged_port_list
    """
    return self.__untagged_ports_list
      
  def _set_untagged_ports_list(self, v, load=False):
    """
    Setter method for untagged_ports_list, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/untagged_ports_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_untagged_ports_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_untagged_ports_list() directly.

    YANG Description: untagged_port_list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("lif_name",untagged_ports_list.untagged_ports_list, yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """untagged_ports_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("lif_name",untagged_ports_list.untagged_ports_list, yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)""",
        })

    self.__untagged_ports_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_untagged_ports_list(self):
    self.__untagged_ports_list = YANGDynClass(base=YANGListType("lif_name",untagged_ports_list.untagged_ports_list, yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="untagged-ports-list", rest_name="untagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-untagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)


  def _get_tagged_ports_list(self):
    """
    Getter method for tagged_ports_list, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/tagged_ports_list (list)

    YANG Description: untagged_port_list
    """
    return self.__tagged_ports_list
      
  def _set_tagged_ports_list(self, v, load=False):
    """
    Setter method for tagged_ports_list, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list/tagged_ports_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tagged_ports_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tagged_ports_list() directly.

    YANG Description: untagged_port_list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("lif_name",tagged_ports_list.tagged_ports_list, yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tagged_ports_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("lif_name",tagged_ports_list.tagged_ports_list, yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)""",
        })

    self.__tagged_ports_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tagged_ports_list(self):
    self.__tagged_ports_list = YANGDynClass(base=YANGListType("lif_name",tagged_ports_list.tagged_ports_list, yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lif-name', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tagged-ports-list", rest_name="tagged-ports-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-tagged-port-list', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)

  outer_vlan = __builtin__.property(_get_outer_vlan)
  no_of_up_tagged_ports = __builtin__.property(_get_no_of_up_tagged_ports)
  no_of_up_untagged_ports = __builtin__.property(_get_no_of_up_untagged_ports)
  untagged_ports_list = __builtin__.property(_get_untagged_ports_list)
  tagged_ports_list = __builtin__.property(_get_tagged_ports_list)


  _pyangbind_elements = {'outer_vlan': outer_vlan, 'no_of_up_tagged_ports': no_of_up_tagged_ports, 'no_of_up_untagged_ports': no_of_up_untagged_ports, 'untagged_ports_list': untagged_ports_list, 'tagged_ports_list': tagged_ports_list, }


