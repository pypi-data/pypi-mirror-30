
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import slm_session_brief
import slm_session_detail
import slm_stats_session_brief
import slm_stats_session_detailed
class slm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag-operational - based on the path /cfm-state/slm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: CFM Y1731 SLM Details
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__slm_session_brief','__slm_session_detail','__slm_stats_session_brief','__slm_stats_session_detailed',)

  _yang_name = 'slm'
  _rest_name = 'slm'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__slm_stats_session_detailed = YANGDynClass(base=YANGListType("session_index",slm_stats_session_detailed.slm_stats_session_detailed, yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    self.__slm_session_brief = YANGDynClass(base=YANGListType("session_index",slm_session_brief.slm_session_brief, yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    self.__slm_stats_session_brief = YANGDynClass(base=YANGListType("session_index",slm_stats_session_brief.slm_stats_session_brief, yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    self.__slm_session_detail = YANGDynClass(base=YANGListType("session_index",slm_session_detail.slm_session_detail, yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cfm-state', u'slm']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cfm-state', u'slm']

  def _get_slm_session_brief(self):
    """
    Getter method for slm_session_brief, mapped from YANG variable /cfm_state/slm/slm_session_brief (list)

    YANG Description: Brief display of SLM configuration
    """
    return self.__slm_session_brief
      
  def _set_slm_session_brief(self, v, load=False):
    """
    Setter method for slm_session_brief, mapped from YANG variable /cfm_state/slm/slm_session_brief (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slm_session_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slm_session_brief() directly.

    YANG Description: Brief display of SLM configuration
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("session_index",slm_session_brief.slm_session_brief, yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slm_session_brief must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("session_index",slm_session_brief.slm_session_brief, yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)""",
        })

    self.__slm_session_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slm_session_brief(self):
    self.__slm_session_brief = YANGDynClass(base=YANGListType("session_index",slm_session_brief.slm_session_brief, yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-brief", rest_name="slm-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)


  def _get_slm_session_detail(self):
    """
    Getter method for slm_session_detail, mapped from YANG variable /cfm_state/slm/slm_session_detail (list)

    YANG Description: Detailed display of SLM configuration
    """
    return self.__slm_session_detail
      
  def _set_slm_session_detail(self, v, load=False):
    """
    Setter method for slm_session_detail, mapped from YANG variable /cfm_state/slm/slm_session_detail (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slm_session_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slm_session_detail() directly.

    YANG Description: Detailed display of SLM configuration
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("session_index",slm_session_detail.slm_session_detail, yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slm_session_detail must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("session_index",slm_session_detail.slm_session_detail, yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)""",
        })

    self.__slm_session_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slm_session_detail(self):
    self.__slm_session_detail = YANGDynClass(base=YANGListType("session_index",slm_session_detail.slm_session_detail, yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-session-detail", rest_name="slm-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-session-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)


  def _get_slm_stats_session_brief(self):
    """
    Getter method for slm_stats_session_brief, mapped from YANG variable /cfm_state/slm/slm_stats_session_brief (list)

    YANG Description: Brief display of SLM statistics
    """
    return self.__slm_stats_session_brief
      
  def _set_slm_stats_session_brief(self, v, load=False):
    """
    Setter method for slm_stats_session_brief, mapped from YANG variable /cfm_state/slm/slm_stats_session_brief (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slm_stats_session_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slm_stats_session_brief() directly.

    YANG Description: Brief display of SLM statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("session_index",slm_stats_session_brief.slm_stats_session_brief, yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slm_stats_session_brief must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("session_index",slm_stats_session_brief.slm_stats_session_brief, yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)""",
        })

    self.__slm_stats_session_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slm_stats_session_brief(self):
    self.__slm_stats_session_brief = YANGDynClass(base=YANGListType("session_index",slm_stats_session_brief.slm_stats_session_brief, yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-brief", rest_name="slm-stats-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)


  def _get_slm_stats_session_detailed(self):
    """
    Getter method for slm_stats_session_detailed, mapped from YANG variable /cfm_state/slm/slm_stats_session_detailed (list)

    YANG Description: Detailed display of SLM statistics
    """
    return self.__slm_stats_session_detailed
      
  def _set_slm_stats_session_detailed(self, v, load=False):
    """
    Setter method for slm_stats_session_detailed, mapped from YANG variable /cfm_state/slm/slm_stats_session_detailed (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slm_stats_session_detailed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slm_stats_session_detailed() directly.

    YANG Description: Detailed display of SLM statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("session_index",slm_stats_session_detailed.slm_stats_session_detailed, yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slm_stats_session_detailed must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("session_index",slm_stats_session_detailed.slm_stats_session_detailed, yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)""",
        })

    self.__slm_stats_session_detailed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slm_stats_session_detailed(self):
    self.__slm_stats_session_detailed = YANGDynClass(base=YANGListType("session_index",slm_stats_session_detailed.slm_stats_session_detailed, yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='session-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-detailed", rest_name="slm-stats-session-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)

  slm_session_brief = __builtin__.property(_get_slm_session_brief)
  slm_session_detail = __builtin__.property(_get_slm_session_detail)
  slm_stats_session_brief = __builtin__.property(_get_slm_stats_session_brief)
  slm_stats_session_detailed = __builtin__.property(_get_slm_stats_session_detailed)


  _pyangbind_elements = {'slm_session_brief': slm_session_brief, 'slm_session_detail': slm_session_detail, 'slm_stats_session_brief': slm_stats_session_brief, 'slm_stats_session_detailed': slm_stats_session_detailed, }


