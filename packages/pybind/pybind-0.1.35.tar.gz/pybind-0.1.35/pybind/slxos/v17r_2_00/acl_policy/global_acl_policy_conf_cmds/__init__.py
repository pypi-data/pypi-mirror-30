
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import enable_acl_log_raslog
class global_acl_policy_conf_cmds(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-acl-policy - based on the path /acl-policy/global-acl-policy-conf-cmds. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__allow_conflicting_rules','__allow_duplicate_rules','__enable_acl_cam_sharing','__enable_acl_log_raslog',)

  _yang_name = 'global-acl-policy-conf-cmds'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__enable_acl_cam_sharing = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-acl-cam-sharing", rest_name="enable-acl-cam-sharing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable ACL CAM Sharing', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)
    self.__allow_duplicate_rules = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-duplicate-rules", rest_name="allow-duplicate-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow duplicate rules in a ACL table', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)
    self.__enable_acl_log_raslog = YANGDynClass(base=enable_acl_log_raslog.enable_acl_log_raslog, is_container='container', presence=False, yang_name="enable-acl-log-raslog", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable ACL Message log to Raslog', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='container', is_config=True)
    self.__allow_conflicting_rules = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-conflicting-rules", rest_name="allow-conflicting-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow conflicting rules in a ACL table ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'acl-policy', u'global-acl-policy-conf-cmds']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'acl-policy']

  def _get_allow_conflicting_rules(self):
    """
    Getter method for allow_conflicting_rules, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/allow_conflicting_rules (empty)
    """
    return self.__allow_conflicting_rules
      
  def _set_allow_conflicting_rules(self, v, load=False):
    """
    Setter method for allow_conflicting_rules, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/allow_conflicting_rules (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allow_conflicting_rules is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allow_conflicting_rules() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="allow-conflicting-rules", rest_name="allow-conflicting-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow conflicting rules in a ACL table ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allow_conflicting_rules must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-conflicting-rules", rest_name="allow-conflicting-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow conflicting rules in a ACL table ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)""",
        })

    self.__allow_conflicting_rules = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allow_conflicting_rules(self):
    self.__allow_conflicting_rules = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-conflicting-rules", rest_name="allow-conflicting-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow conflicting rules in a ACL table ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)


  def _get_allow_duplicate_rules(self):
    """
    Getter method for allow_duplicate_rules, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/allow_duplicate_rules (empty)
    """
    return self.__allow_duplicate_rules
      
  def _set_allow_duplicate_rules(self, v, load=False):
    """
    Setter method for allow_duplicate_rules, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/allow_duplicate_rules (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_allow_duplicate_rules is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_allow_duplicate_rules() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="allow-duplicate-rules", rest_name="allow-duplicate-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow duplicate rules in a ACL table', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """allow_duplicate_rules must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-duplicate-rules", rest_name="allow-duplicate-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow duplicate rules in a ACL table', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)""",
        })

    self.__allow_duplicate_rules = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_allow_duplicate_rules(self):
    self.__allow_duplicate_rules = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="allow-duplicate-rules", rest_name="allow-duplicate-rules", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Allow duplicate rules in a ACL table', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)


  def _get_enable_acl_cam_sharing(self):
    """
    Getter method for enable_acl_cam_sharing, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/enable_acl_cam_sharing (empty)
    """
    return self.__enable_acl_cam_sharing
      
  def _set_enable_acl_cam_sharing(self, v, load=False):
    """
    Setter method for enable_acl_cam_sharing, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/enable_acl_cam_sharing (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_acl_cam_sharing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_acl_cam_sharing() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-acl-cam-sharing", rest_name="enable-acl-cam-sharing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable ACL CAM Sharing', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_acl_cam_sharing must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-acl-cam-sharing", rest_name="enable-acl-cam-sharing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable ACL CAM Sharing', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)""",
        })

    self.__enable_acl_cam_sharing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_acl_cam_sharing(self):
    self.__enable_acl_cam_sharing = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-acl-cam-sharing", rest_name="enable-acl-cam-sharing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable ACL CAM Sharing', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='empty', is_config=True)


  def _get_enable_acl_log_raslog(self):
    """
    Getter method for enable_acl_log_raslog, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/enable_acl_log_raslog (container)
    """
    return self.__enable_acl_log_raslog
      
  def _set_enable_acl_log_raslog(self, v, load=False):
    """
    Setter method for enable_acl_log_raslog, mapped from YANG variable /acl_policy/global_acl_policy_conf_cmds/enable_acl_log_raslog (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_acl_log_raslog is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_acl_log_raslog() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=enable_acl_log_raslog.enable_acl_log_raslog, is_container='container', presence=False, yang_name="enable-acl-log-raslog", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable ACL Message log to Raslog', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_acl_log_raslog must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=enable_acl_log_raslog.enable_acl_log_raslog, is_container='container', presence=False, yang_name="enable-acl-log-raslog", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable ACL Message log to Raslog', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='container', is_config=True)""",
        })

    self.__enable_acl_log_raslog = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_acl_log_raslog(self):
    self.__enable_acl_log_raslog = YANGDynClass(base=enable_acl_log_raslog.enable_acl_log_raslog, is_container='container', presence=False, yang_name="enable-acl-log-raslog", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable ACL Message log to Raslog', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-acl-policy', defining_module='brocade-acl-policy', yang_type='container', is_config=True)

  allow_conflicting_rules = __builtin__.property(_get_allow_conflicting_rules, _set_allow_conflicting_rules)
  allow_duplicate_rules = __builtin__.property(_get_allow_duplicate_rules, _set_allow_duplicate_rules)
  enable_acl_cam_sharing = __builtin__.property(_get_enable_acl_cam_sharing, _set_enable_acl_cam_sharing)
  enable_acl_log_raslog = __builtin__.property(_get_enable_acl_log_raslog, _set_enable_acl_log_raslog)


  _pyangbind_elements = {'allow_conflicting_rules': allow_conflicting_rules, 'allow_duplicate_rules': allow_duplicate_rules, 'enable_acl_cam_sharing': enable_acl_cam_sharing, 'enable_acl_log_raslog': enable_acl_log_raslog, }


