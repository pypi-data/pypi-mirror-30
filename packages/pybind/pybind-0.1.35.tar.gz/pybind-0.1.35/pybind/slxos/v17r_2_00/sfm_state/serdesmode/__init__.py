
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class serdesmode(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysmgr-operational - based on the path /sfm-state/serdesmode. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SFM Serdes Mode
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__serdesmode','__serdesmode_sfmid','__serdesmode_feid',)

  _yang_name = 'serdesmode'
  _rest_name = 'serdesmode'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__serdesmode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__serdesmode_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-feid", rest_name="serdesmode-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__serdesmode_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-sfmid", rest_name="serdesmode-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sfm-state', u'serdesmode']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'sfm-state', u'serdesmode']

  def _get_serdesmode(self):
    """
    Getter method for serdesmode, mapped from YANG variable /sfm_state/serdesmode/serdesmode (uint32)

    YANG Description: SFM Serdes Mode
    """
    return self.__serdesmode
      
  def _set_serdesmode(self, v, load=False):
    """
    Setter method for serdesmode, mapped from YANG variable /sfm_state/serdesmode/serdesmode (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serdesmode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serdesmode() directly.

    YANG Description: SFM Serdes Mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serdesmode must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__serdesmode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serdesmode(self):
    self.__serdesmode = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_serdesmode_sfmid(self):
    """
    Getter method for serdesmode_sfmid, mapped from YANG variable /sfm_state/serdesmode/serdesmode_sfmid (uint32)

    YANG Description: SFM Serdes Mode
    """
    return self.__serdesmode_sfmid
      
  def _set_serdesmode_sfmid(self, v, load=False):
    """
    Setter method for serdesmode_sfmid, mapped from YANG variable /sfm_state/serdesmode/serdesmode_sfmid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serdesmode_sfmid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serdesmode_sfmid() directly.

    YANG Description: SFM Serdes Mode
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-sfmid", rest_name="serdesmode-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serdesmode_sfmid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-sfmid", rest_name="serdesmode-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__serdesmode_sfmid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serdesmode_sfmid(self):
    self.__serdesmode_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-sfmid", rest_name="serdesmode-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_serdesmode_feid(self):
    """
    Getter method for serdesmode_feid, mapped from YANG variable /sfm_state/serdesmode/serdesmode_feid (uint32)

    YANG Description: SFM Serdes Mode
    """
    return self.__serdesmode_feid
      
  def _set_serdesmode_feid(self, v, load=False):
    """
    Setter method for serdesmode_feid, mapped from YANG variable /sfm_state/serdesmode/serdesmode_feid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serdesmode_feid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serdesmode_feid() directly.

    YANG Description: SFM Serdes Mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-feid", rest_name="serdesmode-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serdesmode_feid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-feid", rest_name="serdesmode-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__serdesmode_feid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serdesmode_feid(self):
    self.__serdesmode_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="serdesmode-feid", rest_name="serdesmode-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

  serdesmode = __builtin__.property(_get_serdesmode)
  serdesmode_sfmid = __builtin__.property(_get_serdesmode_sfmid)
  serdesmode_feid = __builtin__.property(_get_serdesmode_feid)


  _pyangbind_elements = {'serdesmode': serdesmode, 'serdesmode_sfmid': serdesmode_sfmid, 'serdesmode_feid': serdesmode_feid, }


