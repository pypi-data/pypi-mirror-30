
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class seq(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /ip/hide-ext-community-list-holder/extcommunity-list/extended/seq. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__extended_seq_id','__exp_ext_community_action','__ext_community_regex',)

  _yang_name = 'seq'
  _rest_name = 'seq'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__exp_ext_community_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="exp-ext-community-action", rest_name="exp-ext-community-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-action', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='action-t', is_config=True)
    self.__extended_seq_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="extended-seq-id", rest_name="extended-seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-seq-id', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)
    self.__ext_community_regex = YANGDynClass(base=unicode, is_leaf=True, yang_name="ext-community-regex", rest_name="ext-community-regex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Filter regular expression.', u'cli-drop-node-name': None, u'cli-suppress-no': None, u'code-name': u'extcommlist-extended-regex'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='extcommunity-list-reg-expr-t', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'ip', u'hide-ext-community-list-holder', u'extcommunity-list', u'extended', u'seq']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ip', u'extcommunity-list', u'extended', u'seq']

  def _get_extended_seq_id(self):
    """
    Getter method for extended_seq_id, mapped from YANG variable /ip/hide_ext_community_list_holder/extcommunity_list/extended/seq/extended_seq_id (uint32)
    """
    return self.__extended_seq_id
      
  def _set_extended_seq_id(self, v, load=False):
    """
    Setter method for extended_seq_id, mapped from YANG variable /ip/hide_ext_community_list_holder/extcommunity_list/extended/seq/extended_seq_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_extended_seq_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_extended_seq_id() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="extended-seq-id", rest_name="extended-seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-seq-id', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """extended_seq_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="extended-seq-id", rest_name="extended-seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-seq-id', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)""",
        })

    self.__extended_seq_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_extended_seq_id(self):
    self.__extended_seq_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="extended-seq-id", rest_name="extended-seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-seq-id', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)


  def _get_exp_ext_community_action(self):
    """
    Getter method for exp_ext_community_action, mapped from YANG variable /ip/hide_ext_community_list_holder/extcommunity_list/extended/seq/exp_ext_community_action (action-t)
    """
    return self.__exp_ext_community_action
      
  def _set_exp_ext_community_action(self, v, load=False):
    """
    Setter method for exp_ext_community_action, mapped from YANG variable /ip/hide_ext_community_list_holder/extcommunity_list/extended/seq/exp_ext_community_action (action-t)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exp_ext_community_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exp_ext_community_action() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="exp-ext-community-action", rest_name="exp-ext-community-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-action', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='action-t', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exp_ext_community_action must be of a type compatible with action-t""",
          'defined-type': "brocade-ip-policy:action-t",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="exp-ext-community-action", rest_name="exp-ext-community-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-action', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='action-t', is_config=True)""",
        })

    self.__exp_ext_community_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exp_ext_community_action(self):
    self.__exp_ext_community_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="exp-ext-community-action", rest_name="exp-ext-community-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'extcommlist-extended-action', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='action-t', is_config=True)


  def _get_ext_community_regex(self):
    """
    Getter method for ext_community_regex, mapped from YANG variable /ip/hide_ext_community_list_holder/extcommunity_list/extended/seq/ext_community_regex (extcommunity-list-reg-expr-t)
    """
    return self.__ext_community_regex
      
  def _set_ext_community_regex(self, v, load=False):
    """
    Setter method for ext_community_regex, mapped from YANG variable /ip/hide_ext_community_list_holder/extcommunity_list/extended/seq/ext_community_regex (extcommunity-list-reg-expr-t)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_community_regex is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_community_regex() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ext-community-regex", rest_name="ext-community-regex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Filter regular expression.', u'cli-drop-node-name': None, u'cli-suppress-no': None, u'code-name': u'extcommlist-extended-regex'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='extcommunity-list-reg-expr-t', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_community_regex must be of a type compatible with extcommunity-list-reg-expr-t""",
          'defined-type': "brocade-ip-policy:extcommunity-list-reg-expr-t",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ext-community-regex", rest_name="ext-community-regex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Filter regular expression.', u'cli-drop-node-name': None, u'cli-suppress-no': None, u'code-name': u'extcommlist-extended-regex'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='extcommunity-list-reg-expr-t', is_config=True)""",
        })

    self.__ext_community_regex = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_community_regex(self):
    self.__ext_community_regex = YANGDynClass(base=unicode, is_leaf=True, yang_name="ext-community-regex", rest_name="ext-community-regex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Filter regular expression.', u'cli-drop-node-name': None, u'cli-suppress-no': None, u'code-name': u'extcommlist-extended-regex'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='extcommunity-list-reg-expr-t', is_config=True)

  extended_seq_id = __builtin__.property(_get_extended_seq_id, _set_extended_seq_id)
  exp_ext_community_action = __builtin__.property(_get_exp_ext_community_action, _set_exp_ext_community_action)
  ext_community_regex = __builtin__.property(_get_ext_community_regex, _set_ext_community_regex)


  _pyangbind_elements = {'extended_seq_id': extended_seq_id, 'exp_ext_community_action': exp_ext_community_action, 'ext_community_regex': ext_community_regex, }


