
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import cngn_mon_dev
import cngn_mon_voq
import cngn_mon_del_pkt
import tmdevicestataggr
import non_empty_voq
import buf_pool_stats
import tmcpustatsslot
import tmcpustatsslotallgrp
import tm_top_discard_pkt_data
import tm_top_max_queue_depth_data
import tm_max_buff_util_data
import tmvoqstatistics
class tm_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysdiag-operational - based on the path /tm-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: TM statistics
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cngn_mon_dev','__cngn_mon_voq','__cngn_mon_del_pkt','__tmdevicestataggr','__non_empty_voq','__buf_pool_stats','__tmcpustatsslot','__tmcpustatsslotallgrp','__tm_top_discard_pkt_data','__tm_top_max_queue_depth_data','__tm_max_buff_util_data','__tmvoqstatistics',)

  _yang_name = 'tm-state'
  _rest_name = 'tm-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cngn_mon_del_pkt = YANGDynClass(base=cngn_mon_del_pkt.cngn_mon_del_pkt, is_container='container', presence=False, yang_name="cngn-mon-del-pkt", rest_name="cngn-mon-del-pkt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-del-pkt', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)
    self.__tmdevicestataggr = YANGDynClass(base=YANGListType("slot tower",tmdevicestataggr.tmdevicestataggr, yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__cngn_mon_dev = YANGDynClass(base=cngn_mon_dev.cngn_mon_dev, is_container='container', presence=False, yang_name="cngn-mon-dev", rest_name="cngn-mon-dev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-dev', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)
    self.__tmcpustatsslot = YANGDynClass(base=YANGListType("slot_id cpugroup_id priority",tmcpustatsslot.tmcpustatsslot, yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id cpugroup-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__tmvoqstatistics = YANGDynClass(base=YANGListType("ing_slot ing_tower egr_voqid",tmvoqstatistics.tmvoqstatistics, yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ing-slot ing-tower egr-voqid', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__tm_top_max_queue_depth_data = YANGDynClass(base=YANGListType("slot tower id",tm_top_max_queue_depth_data.tm_top_max_queue_depth_data, yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__buf_pool_stats = YANGDynClass(base=YANGListType("slot tower",buf_pool_stats.buf_pool_stats, yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__tm_max_buff_util_data = YANGDynClass(base=YANGListType("slot tower",tm_max_buff_util_data.tm_max_buff_util_data, yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__tmcpustatsslotallgrp = YANGDynClass(base=YANGListType("slot_id priority",tmcpustatsslotallgrp.tmcpustatsslotallgrp, yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__non_empty_voq = YANGDynClass(base=YANGListType("slot tower",non_empty_voq.non_empty_voq, yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}), is_container='list', yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__tm_top_discard_pkt_data = YANGDynClass(base=YANGListType("slot tower id",tm_top_discard_pkt_data.tm_top_discard_pkt_data, yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    self.__cngn_mon_voq = YANGDynClass(base=cngn_mon_voq.cngn_mon_voq, is_container='container', presence=False, yang_name="cngn-mon-voq", rest_name="cngn-mon-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'tm-state']

  def _get_cngn_mon_dev(self):
    """
    Getter method for cngn_mon_dev, mapped from YANG variable /tm_state/cngn_mon_dev (container)

    YANG Description: TM discard pkt config
    """
    return self.__cngn_mon_dev
      
  def _set_cngn_mon_dev(self, v, load=False):
    """
    Setter method for cngn_mon_dev, mapped from YANG variable /tm_state/cngn_mon_dev (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cngn_mon_dev is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cngn_mon_dev() directly.

    YANG Description: TM discard pkt config
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=cngn_mon_dev.cngn_mon_dev, is_container='container', presence=False, yang_name="cngn-mon-dev", rest_name="cngn-mon-dev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-dev', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cngn_mon_dev must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=cngn_mon_dev.cngn_mon_dev, is_container='container', presence=False, yang_name="cngn-mon-dev", rest_name="cngn-mon-dev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-dev', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)""",
        })

    self.__cngn_mon_dev = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cngn_mon_dev(self):
    self.__cngn_mon_dev = YANGDynClass(base=cngn_mon_dev.cngn_mon_dev, is_container='container', presence=False, yang_name="cngn-mon-dev", rest_name="cngn-mon-dev", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-dev', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)


  def _get_cngn_mon_voq(self):
    """
    Getter method for cngn_mon_voq, mapped from YANG variable /tm_state/cngn_mon_voq (container)

    YANG Description: TM discard voq pkt config
    """
    return self.__cngn_mon_voq
      
  def _set_cngn_mon_voq(self, v, load=False):
    """
    Setter method for cngn_mon_voq, mapped from YANG variable /tm_state/cngn_mon_voq (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cngn_mon_voq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cngn_mon_voq() directly.

    YANG Description: TM discard voq pkt config
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=cngn_mon_voq.cngn_mon_voq, is_container='container', presence=False, yang_name="cngn-mon-voq", rest_name="cngn-mon-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cngn_mon_voq must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=cngn_mon_voq.cngn_mon_voq, is_container='container', presence=False, yang_name="cngn-mon-voq", rest_name="cngn-mon-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)""",
        })

    self.__cngn_mon_voq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cngn_mon_voq(self):
    self.__cngn_mon_voq = YANGDynClass(base=cngn_mon_voq.cngn_mon_voq, is_container='container', presence=False, yang_name="cngn-mon-voq", rest_name="cngn-mon-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)


  def _get_cngn_mon_del_pkt(self):
    """
    Getter method for cngn_mon_del_pkt, mapped from YANG variable /tm_state/cngn_mon_del_pkt (container)

    YANG Description: TM delete pkt config
    """
    return self.__cngn_mon_del_pkt
      
  def _set_cngn_mon_del_pkt(self, v, load=False):
    """
    Setter method for cngn_mon_del_pkt, mapped from YANG variable /tm_state/cngn_mon_del_pkt (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cngn_mon_del_pkt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cngn_mon_del_pkt() directly.

    YANG Description: TM delete pkt config
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=cngn_mon_del_pkt.cngn_mon_del_pkt, is_container='container', presence=False, yang_name="cngn-mon-del-pkt", rest_name="cngn-mon-del-pkt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-del-pkt', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cngn_mon_del_pkt must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=cngn_mon_del_pkt.cngn_mon_del_pkt, is_container='container', presence=False, yang_name="cngn-mon-del-pkt", rest_name="cngn-mon-del-pkt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-del-pkt', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)""",
        })

    self.__cngn_mon_del_pkt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cngn_mon_del_pkt(self):
    self.__cngn_mon_del_pkt = YANGDynClass(base=cngn_mon_del_pkt.cngn_mon_del_pkt, is_container='container', presence=False, yang_name="cngn-mon-del-pkt", rest_name="cngn-mon-del-pkt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-cngn-mon-del-pkt', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='container', is_config=False)


  def _get_tmdevicestataggr(self):
    """
    Getter method for tmdevicestataggr, mapped from YANG variable /tm_state/tmdevicestataggr (list)

    YANG Description: Get TM device stats from all towers and all slots
    """
    return self.__tmdevicestataggr
      
  def _set_tmdevicestataggr(self, v, load=False):
    """
    Setter method for tmdevicestataggr, mapped from YANG variable /tm_state/tmdevicestataggr (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tmdevicestataggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tmdevicestataggr() directly.

    YANG Description: Get TM device stats from all towers and all slots
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot tower",tmdevicestataggr.tmdevicestataggr, yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tmdevicestataggr must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot tower",tmdevicestataggr.tmdevicestataggr, yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tmdevicestataggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tmdevicestataggr(self):
    self.__tmdevicestataggr = YANGDynClass(base=YANGListType("slot tower",tmdevicestataggr.tmdevicestataggr, yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmdevicestataggr", rest_name="tmdevicestataggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmdevicestataggr', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_non_empty_voq(self):
    """
    Getter method for non_empty_voq, mapped from YANG variable /tm_state/non_empty_voq (list)

    YANG Description: non empty voq's in the system
    """
    return self.__non_empty_voq
      
  def _set_non_empty_voq(self, v, load=False):
    """
    Setter method for non_empty_voq, mapped from YANG variable /tm_state/non_empty_voq (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_non_empty_voq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_non_empty_voq() directly.

    YANG Description: non empty voq's in the system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot tower",non_empty_voq.non_empty_voq, yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}), is_container='list', yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """non_empty_voq must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot tower",non_empty_voq.non_empty_voq, yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}), is_container='list', yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__non_empty_voq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_non_empty_voq(self):
    self.__non_empty_voq = YANGDynClass(base=YANGListType("slot tower",non_empty_voq.non_empty_voq, yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}), is_container='list', yang_name="non-empty-voq", rest_name="non-empty-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-non-empty-voq', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_buf_pool_stats(self):
    """
    Getter method for buf_pool_stats, mapped from YANG variable /tm_state/buf_pool_stats (list)

    YANG Description: TM buf pool stats per slot
    """
    return self.__buf_pool_stats
      
  def _set_buf_pool_stats(self, v, load=False):
    """
    Setter method for buf_pool_stats, mapped from YANG variable /tm_state/buf_pool_stats (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_buf_pool_stats is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_buf_pool_stats() directly.

    YANG Description: TM buf pool stats per slot
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot tower",buf_pool_stats.buf_pool_stats, yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """buf_pool_stats must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot tower",buf_pool_stats.buf_pool_stats, yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__buf_pool_stats = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_buf_pool_stats(self):
    self.__buf_pool_stats = YANGDynClass(base=YANGListType("slot tower",buf_pool_stats.buf_pool_stats, yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="buf-pool-stats", rest_name="buf-pool-stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-buf-pool-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_tmcpustatsslot(self):
    """
    Getter method for tmcpustatsslot, mapped from YANG variable /tm_state/tmcpustatsslot (list)

    YANG Description: TM voq stats for CPU port per slot
    """
    return self.__tmcpustatsslot
      
  def _set_tmcpustatsslot(self, v, load=False):
    """
    Setter method for tmcpustatsslot, mapped from YANG variable /tm_state/tmcpustatsslot (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tmcpustatsslot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tmcpustatsslot() directly.

    YANG Description: TM voq stats for CPU port per slot
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot_id cpugroup_id priority",tmcpustatsslot.tmcpustatsslot, yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id cpugroup-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tmcpustatsslot must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot_id cpugroup_id priority",tmcpustatsslot.tmcpustatsslot, yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id cpugroup-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tmcpustatsslot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tmcpustatsslot(self):
    self.__tmcpustatsslot = YANGDynClass(base=YANGListType("slot_id cpugroup_id priority",tmcpustatsslot.tmcpustatsslot, yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id cpugroup-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslot", rest_name="tmcpustatsslot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslot', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_tmcpustatsslotallgrp(self):
    """
    Getter method for tmcpustatsslotallgrp, mapped from YANG variable /tm_state/tmcpustatsslotallgrp (list)

    YANG Description: TM voq stats for CPU port per slot for all CPU group
    """
    return self.__tmcpustatsslotallgrp
      
  def _set_tmcpustatsslotallgrp(self, v, load=False):
    """
    Setter method for tmcpustatsslotallgrp, mapped from YANG variable /tm_state/tmcpustatsslotallgrp (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tmcpustatsslotallgrp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tmcpustatsslotallgrp() directly.

    YANG Description: TM voq stats for CPU port per slot for all CPU group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot_id priority",tmcpustatsslotallgrp.tmcpustatsslotallgrp, yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tmcpustatsslotallgrp must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot_id priority",tmcpustatsslotallgrp.tmcpustatsslotallgrp, yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tmcpustatsslotallgrp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tmcpustatsslotallgrp(self):
    self.__tmcpustatsslotallgrp = YANGDynClass(base=YANGListType("slot_id priority",tmcpustatsslotallgrp.tmcpustatsslotallgrp, yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot-id priority', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmcpustatsslotallgrp", rest_name="tmcpustatsslotallgrp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmcpustatsslotallgrp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_tm_top_discard_pkt_data(self):
    """
    Getter method for tm_top_discard_pkt_data, mapped from YANG variable /tm_state/tm_top_discard_pkt_data (list)

    YANG Description: TM voq stats to get list of top discarded destination ports
    """
    return self.__tm_top_discard_pkt_data
      
  def _set_tm_top_discard_pkt_data(self, v, load=False):
    """
    Setter method for tm_top_discard_pkt_data, mapped from YANG variable /tm_state/tm_top_discard_pkt_data (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tm_top_discard_pkt_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tm_top_discard_pkt_data() directly.

    YANG Description: TM voq stats to get list of top discarded destination ports
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot tower id",tm_top_discard_pkt_data.tm_top_discard_pkt_data, yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tm_top_discard_pkt_data must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot tower id",tm_top_discard_pkt_data.tm_top_discard_pkt_data, yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tm_top_discard_pkt_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tm_top_discard_pkt_data(self):
    self.__tm_top_discard_pkt_data = YANGDynClass(base=YANGListType("slot tower id",tm_top_discard_pkt_data.tm_top_discard_pkt_data, yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-discard-pkt-data", rest_name="tm-top-discard-pkt-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-discard-pkt-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_tm_top_max_queue_depth_data(self):
    """
    Getter method for tm_top_max_queue_depth_data, mapped from YANG variable /tm_state/tm_top_max_queue_depth_data (list)

    YANG Description: TM voq stats to get list of top max queue depth
    """
    return self.__tm_top_max_queue_depth_data
      
  def _set_tm_top_max_queue_depth_data(self, v, load=False):
    """
    Setter method for tm_top_max_queue_depth_data, mapped from YANG variable /tm_state/tm_top_max_queue_depth_data (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tm_top_max_queue_depth_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tm_top_max_queue_depth_data() directly.

    YANG Description: TM voq stats to get list of top max queue depth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot tower id",tm_top_max_queue_depth_data.tm_top_max_queue_depth_data, yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tm_top_max_queue_depth_data must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot tower id",tm_top_max_queue_depth_data.tm_top_max_queue_depth_data, yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tm_top_max_queue_depth_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tm_top_max_queue_depth_data(self):
    self.__tm_top_max_queue_depth_data = YANGDynClass(base=YANGListType("slot tower id",tm_top_max_queue_depth_data.tm_top_max_queue_depth_data, yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower id', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-top-max-queue-depth-data", rest_name="tm-top-max-queue-depth-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-top-max-queue-depth-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_tm_max_buff_util_data(self):
    """
    Getter method for tm_max_buff_util_data, mapped from YANG variable /tm_state/tm_max_buff_util_data (list)

    YANG Description: Snapshot of max TM buffer utilzation
    """
    return self.__tm_max_buff_util_data
      
  def _set_tm_max_buff_util_data(self, v, load=False):
    """
    Setter method for tm_max_buff_util_data, mapped from YANG variable /tm_state/tm_max_buff_util_data (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tm_max_buff_util_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tm_max_buff_util_data() directly.

    YANG Description: Snapshot of max TM buffer utilzation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("slot tower",tm_max_buff_util_data.tm_max_buff_util_data, yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tm_max_buff_util_data must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("slot tower",tm_max_buff_util_data.tm_max_buff_util_data, yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tm_max_buff_util_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tm_max_buff_util_data(self):
    self.__tm_max_buff_util_data = YANGDynClass(base=YANGListType("slot tower",tm_max_buff_util_data.tm_max_buff_util_data, yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='slot tower', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tm-max-buff-util-data", rest_name="tm-max-buff-util-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tm-max-buff-util-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)


  def _get_tmvoqstatistics(self):
    """
    Getter method for tmvoqstatistics, mapped from YANG variable /tm_state/tmvoqstatistics (list)

    YANG Description: Get TM VOQ statistics
    """
    return self.__tmvoqstatistics
      
  def _set_tmvoqstatistics(self, v, load=False):
    """
    Setter method for tmvoqstatistics, mapped from YANG variable /tm_state/tmvoqstatistics (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tmvoqstatistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tmvoqstatistics() directly.

    YANG Description: Get TM VOQ statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ing_slot ing_tower egr_voqid",tmvoqstatistics.tmvoqstatistics, yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ing-slot ing-tower egr-voqid', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tmvoqstatistics must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ing_slot ing_tower egr_voqid",tmvoqstatistics.tmvoqstatistics, yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ing-slot ing-tower egr-voqid', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)""",
        })

    self.__tmvoqstatistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tmvoqstatistics(self):
    self.__tmvoqstatistics = YANGDynClass(base=YANGListType("ing_slot ing_tower egr_voqid",tmvoqstatistics.tmvoqstatistics, yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ing-slot ing-tower egr-voqid', extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tmvoqstatistics", rest_name="tmvoqstatistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysdiag-tmvoqstatistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='list', is_config=False)

  cngn_mon_dev = __builtin__.property(_get_cngn_mon_dev)
  cngn_mon_voq = __builtin__.property(_get_cngn_mon_voq)
  cngn_mon_del_pkt = __builtin__.property(_get_cngn_mon_del_pkt)
  tmdevicestataggr = __builtin__.property(_get_tmdevicestataggr)
  non_empty_voq = __builtin__.property(_get_non_empty_voq)
  buf_pool_stats = __builtin__.property(_get_buf_pool_stats)
  tmcpustatsslot = __builtin__.property(_get_tmcpustatsslot)
  tmcpustatsslotallgrp = __builtin__.property(_get_tmcpustatsslotallgrp)
  tm_top_discard_pkt_data = __builtin__.property(_get_tm_top_discard_pkt_data)
  tm_top_max_queue_depth_data = __builtin__.property(_get_tm_top_max_queue_depth_data)
  tm_max_buff_util_data = __builtin__.property(_get_tm_max_buff_util_data)
  tmvoqstatistics = __builtin__.property(_get_tmvoqstatistics)


  _pyangbind_elements = {'cngn_mon_dev': cngn_mon_dev, 'cngn_mon_voq': cngn_mon_voq, 'cngn_mon_del_pkt': cngn_mon_del_pkt, 'tmdevicestataggr': tmdevicestataggr, 'non_empty_voq': non_empty_voq, 'buf_pool_stats': buf_pool_stats, 'tmcpustatsslot': tmcpustatsslot, 'tmcpustatsslotallgrp': tmcpustatsslotallgrp, 'tm_top_discard_pkt_data': tm_top_discard_pkt_data, 'tm_top_max_queue_depth_data': tm_top_max_queue_depth_data, 'tm_max_buff_util_data': tm_max_buff_util_data, 'tmvoqstatistics': tmvoqstatistics, }


