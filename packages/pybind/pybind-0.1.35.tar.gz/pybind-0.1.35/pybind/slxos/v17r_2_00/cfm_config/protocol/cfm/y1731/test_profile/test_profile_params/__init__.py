
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import start
import stop
import slm_threshold
import dmm_threshold
class test_profile_params(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag - based on the path /cfm-config/protocol/cfm/y1731/test-profile/test-profile-params. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__direction','__tx_interval','__measurement_interval','__cos','__tx_frame_count','__timeout','__start','__stop','__slm_threshold','__dmm_threshold',)

  _yang_name = 'test-profile-params'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__measurement_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1440']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(15), is_leaf=True, yang_name="measurement-interval", rest_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Measurement Interval in minutes', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    self.__direction = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'one-way': {'value': 1}, u'two-way': {'value': 2}},), default=unicode("two-way"), is_leaf=True, yang_name="direction", rest_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Direction as One-Way / Two-way', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-direction', is_config=True)
    self.__dmm_threshold = YANGDynClass(base=dmm_threshold.dmm_threshold, is_container='container', presence=False, yang_name="dmm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-DM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__tx_interval = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'60-seconds': {'value': 3}, u'10-seconds': {'value': 2}, u'1-second': {'value': 1}, u'600-seconds': {'value': 4}},), default=unicode("1-second"), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Transmission Interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-tx-interval', is_config=True)
    self.__stop = YANGDynClass(base=stop.stop, is_container='container', presence=False, yang_name="stop", rest_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure stop time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__tx_frame_count = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Tx Frame Count', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    self.__cos = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..8']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(7), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Class of Service ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)
    self.__slm_threshold = YANGDynClass(base=slm_threshold.slm_threshold, is_container='container', presence=False, yang_name="slm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__start = YANGDynClass(base=start.start, is_container='container', presence=False, yang_name="start", rest_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure start time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..4']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(1), is_leaf=True, yang_name="timeout", rest_name="timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Timeout in seconds ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cfm-config', u'protocol', u'cfm', u'y1731', u'test-profile', u'test-profile-params']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'protocol', u'cfm', u'y1731', u'test-profile']

  def _get_direction(self):
    """
    Getter method for direction, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/direction (y1731-profile-direction)
    """
    return self.__direction
      
  def _set_direction(self, v, load=False):
    """
    Setter method for direction, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/direction (y1731-profile-direction)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_direction is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_direction() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'one-way': {'value': 1}, u'two-way': {'value': 2}},), default=unicode("two-way"), is_leaf=True, yang_name="direction", rest_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Direction as One-Way / Two-way', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-direction', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """direction must be of a type compatible with y1731-profile-direction""",
          'defined-type': "brocade-dot1ag:y1731-profile-direction",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'one-way': {'value': 1}, u'two-way': {'value': 2}},), default=unicode("two-way"), is_leaf=True, yang_name="direction", rest_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Direction as One-Way / Two-way', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-direction', is_config=True)""",
        })

    self.__direction = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_direction(self):
    self.__direction = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'one-way': {'value': 1}, u'two-way': {'value': 2}},), default=unicode("two-way"), is_leaf=True, yang_name="direction", rest_name="direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Direction as One-Way / Two-way', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-direction', is_config=True)


  def _get_tx_interval(self):
    """
    Getter method for tx_interval, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/tx_interval (y1731-profile-tx-interval)
    """
    return self.__tx_interval
      
  def _set_tx_interval(self, v, load=False):
    """
    Setter method for tx_interval, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/tx_interval (y1731-profile-tx-interval)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'60-seconds': {'value': 3}, u'10-seconds': {'value': 2}, u'1-second': {'value': 1}, u'600-seconds': {'value': 4}},), default=unicode("1-second"), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Transmission Interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-tx-interval', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_interval must be of a type compatible with y1731-profile-tx-interval""",
          'defined-type': "brocade-dot1ag:y1731-profile-tx-interval",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'60-seconds': {'value': 3}, u'10-seconds': {'value': 2}, u'1-second': {'value': 1}, u'600-seconds': {'value': 4}},), default=unicode("1-second"), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Transmission Interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-tx-interval', is_config=True)""",
        })

    self.__tx_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_interval(self):
    self.__tx_interval = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'60-seconds': {'value': 3}, u'10-seconds': {'value': 2}, u'1-second': {'value': 1}, u'600-seconds': {'value': 4}},), default=unicode("1-second"), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Transmission Interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-tx-interval', is_config=True)


  def _get_measurement_interval(self):
    """
    Getter method for measurement_interval, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/measurement_interval (uint32)
    """
    return self.__measurement_interval
      
  def _set_measurement_interval(self, v, load=False):
    """
    Setter method for measurement_interval, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/measurement_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_measurement_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_measurement_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1440']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(15), is_leaf=True, yang_name="measurement-interval", rest_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Measurement Interval in minutes', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """measurement_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1440']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(15), is_leaf=True, yang_name="measurement-interval", rest_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Measurement Interval in minutes', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__measurement_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_measurement_interval(self):
    self.__measurement_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1440']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(15), is_leaf=True, yang_name="measurement-interval", rest_name="measurement-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Measurement Interval in minutes', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_cos(self):
    """
    Getter method for cos, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/cos (uint8)
    """
    return self.__cos
      
  def _set_cos(self, v, load=False):
    """
    Setter method for cos, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/cos (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cos() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..8']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(7), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Class of Service ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cos must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..8']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(7), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Class of Service ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)""",
        })

    self.__cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cos(self):
    self.__cos = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..8']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(7), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Class of Service ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)


  def _get_tx_frame_count(self):
    """
    Getter method for tx_frame_count, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/tx_frame_count (uint32)
    """
    return self.__tx_frame_count
      
  def _set_tx_frame_count(self, v, load=False):
    """
    Setter method for tx_frame_count, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/tx_frame_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_frame_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_frame_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Tx Frame Count', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_frame_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Tx Frame Count', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__tx_frame_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_frame_count(self):
    self.__tx_frame_count = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Tx Frame Count', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_timeout(self):
    """
    Getter method for timeout, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/timeout (uint8)
    """
    return self.__timeout
      
  def _set_timeout(self, v, load=False):
    """
    Setter method for timeout, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/timeout (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_timeout() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..4']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(1), is_leaf=True, yang_name="timeout", rest_name="timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Timeout in seconds ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """timeout must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..4']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(1), is_leaf=True, yang_name="timeout", rest_name="timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Timeout in seconds ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)""",
        })

    self.__timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_timeout(self):
    self.__timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1..4']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(1), is_leaf=True, yang_name="timeout", rest_name="timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Timeout in seconds ', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)


  def _get_start(self):
    """
    Getter method for start, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/start (container)
    """
    return self.__start
      
  def _set_start(self, v, load=False):
    """
    Setter method for start, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/start (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=start.start, is_container='container', presence=False, yang_name="start", rest_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure start time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=start.start, is_container='container', presence=False, yang_name="start", rest_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure start time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__start = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start(self):
    self.__start = YANGDynClass(base=start.start, is_container='container', presence=False, yang_name="start", rest_name="start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure start time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)


  def _get_stop(self):
    """
    Getter method for stop, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/stop (container)
    """
    return self.__stop
      
  def _set_stop(self, v, load=False):
    """
    Setter method for stop, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/stop (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stop() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=stop.stop, is_container='container', presence=False, yang_name="stop", rest_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure stop time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stop must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=stop.stop, is_container='container', presence=False, yang_name="stop", rest_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure stop time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__stop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stop(self):
    self.__stop = YANGDynClass(base=stop.stop, is_container='container', presence=False, yang_name="stop", rest_name="stop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure stop time', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)


  def _get_slm_threshold(self):
    """
    Getter method for slm_threshold, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/slm_threshold (container)
    """
    return self.__slm_threshold
      
  def _set_slm_threshold(self, v, load=False):
    """
    Setter method for slm_threshold, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/slm_threshold (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slm_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slm_threshold() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=slm_threshold.slm_threshold, is_container='container', presence=False, yang_name="slm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slm_threshold must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=slm_threshold.slm_threshold, is_container='container', presence=False, yang_name="slm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__slm_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slm_threshold(self):
    self.__slm_threshold = YANGDynClass(base=slm_threshold.slm_threshold, is_container='container', presence=False, yang_name="slm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)


  def _get_dmm_threshold(self):
    """
    Getter method for dmm_threshold, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/dmm_threshold (container)
    """
    return self.__dmm_threshold
      
  def _set_dmm_threshold(self, v, load=False):
    """
    Setter method for dmm_threshold, mapped from YANG variable /cfm_config/protocol/cfm/y1731/test_profile/test_profile_params/dmm_threshold (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dmm_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dmm_threshold() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=dmm_threshold.dmm_threshold, is_container='container', presence=False, yang_name="dmm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-DM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dmm_threshold must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dmm_threshold.dmm_threshold, is_container='container', presence=False, yang_name="dmm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-DM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__dmm_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dmm_threshold(self):
    self.__dmm_threshold = YANGDynClass(base=dmm_threshold.dmm_threshold, is_container='container', presence=False, yang_name="dmm-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-DM threshold', u'alt-name': u'threshold', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)

  direction = __builtin__.property(_get_direction, _set_direction)
  tx_interval = __builtin__.property(_get_tx_interval, _set_tx_interval)
  measurement_interval = __builtin__.property(_get_measurement_interval, _set_measurement_interval)
  cos = __builtin__.property(_get_cos, _set_cos)
  tx_frame_count = __builtin__.property(_get_tx_frame_count, _set_tx_frame_count)
  timeout = __builtin__.property(_get_timeout, _set_timeout)
  start = __builtin__.property(_get_start, _set_start)
  stop = __builtin__.property(_get_stop, _set_stop)
  slm_threshold = __builtin__.property(_get_slm_threshold, _set_slm_threshold)
  dmm_threshold = __builtin__.property(_get_dmm_threshold, _set_dmm_threshold)


  _pyangbind_elements = {'direction': direction, 'tx_interval': tx_interval, 'measurement_interval': measurement_interval, 'cos': cos, 'tx_frame_count': tx_frame_count, 'timeout': timeout, 'start': start, 'stop': stop, 'slm_threshold': slm_threshold, 'dmm_threshold': dmm_threshold, }


