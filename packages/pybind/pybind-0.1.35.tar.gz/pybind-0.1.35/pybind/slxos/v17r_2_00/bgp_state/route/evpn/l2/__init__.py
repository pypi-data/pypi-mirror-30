
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import mac
import arp
import nd
import auto_discovery
import ethernet_segment
import inclusive_multicast
import igmp_join_sync
import igmp_leave_sync
class l2(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-bgp-operational - based on the path /bgp-state/route/evpn/l2. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP EVPN L2 route information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mac','__arp','__nd','__auto_discovery','__ethernet_segment','__inclusive_multicast','__igmp_join_sync','__igmp_leave_sync',)

  _yang_name = 'l2'
  _rest_name = 'l2'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__arp = YANGDynClass(base=YANGListType("ipv4_address mac ethernet_tag l2vni",arp.arp, yang_name="arp", rest_name="arp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-address mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="arp", rest_name="arp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__auto_discovery = YANGDynClass(base=YANGListType("esi_value ethernet_tag",auto_discovery.auto_discovery, yang_name="auto-discovery", rest_name="auto-discovery", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-discovery", rest_name="auto-discovery", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__nd = YANGDynClass(base=YANGListType("ipv6_address mac ethernet_tag",nd.nd, yang_name="nd", rest_name="nd", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address mac ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}), is_container='list', yang_name="nd", rest_name="nd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__mac = YANGDynClass(base=YANGListType("mac ethernet_tag l2vni",mac.mac, yang_name="mac", rest_name="mac", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mac", rest_name="mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__igmp_leave_sync = YANGDynClass(base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address leave_grp_sync",igmp_leave_sync.igmp_leave_sync, yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address leave-grp-sync', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__igmp_join_sync = YANGDynClass(base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address",igmp_join_sync.igmp_join_sync, yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__inclusive_multicast = YANGDynClass(base=YANGListType("ethernet_tag ipv4_address",inclusive_multicast.inclusive_multicast, yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag ipv4-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    self.__ethernet_segment = YANGDynClass(base=YANGListType("esi_value ipv4_address ipv6_address",ethernet_segment.ethernet_segment, yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ipv4-address ipv6-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bgp-state', u'route', u'evpn', u'l2']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bgp-state', u'route', u'evpn', u'l2']

  def _get_mac(self):
    """
    Getter method for mac, mapped from YANG variable /bgp_state/route/evpn/l2/mac (list)

    YANG Description: EVPN L2 Routes type mac information
    """
    return self.__mac
      
  def _set_mac(self, v, load=False):
    """
    Setter method for mac, mapped from YANG variable /bgp_state/route/evpn/l2/mac (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac() directly.

    YANG Description: EVPN L2 Routes type mac information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("mac ethernet_tag l2vni",mac.mac, yang_name="mac", rest_name="mac", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mac", rest_name="mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mac ethernet_tag l2vni",mac.mac, yang_name="mac", rest_name="mac", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mac", rest_name="mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac(self):
    self.__mac = YANGDynClass(base=YANGListType("mac ethernet_tag l2vni",mac.mac, yang_name="mac", rest_name="mac", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mac", rest_name="mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-mac', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_arp(self):
    """
    Getter method for arp, mapped from YANG variable /bgp_state/route/evpn/l2/arp (list)

    YANG Description: EVPN L2 Routes type arp information
    """
    return self.__arp
      
  def _set_arp(self, v, load=False):
    """
    Setter method for arp, mapped from YANG variable /bgp_state/route/evpn/l2/arp (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arp() directly.

    YANG Description: EVPN L2 Routes type arp information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ipv4_address mac ethernet_tag l2vni",arp.arp, yang_name="arp", rest_name="arp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-address mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="arp", rest_name="arp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arp must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ipv4_address mac ethernet_tag l2vni",arp.arp, yang_name="arp", rest_name="arp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-address mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="arp", rest_name="arp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__arp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arp(self):
    self.__arp = YANGDynClass(base=YANGListType("ipv4_address mac ethernet_tag l2vni",arp.arp, yang_name="arp", rest_name="arp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv4-address mac ethernet-tag l2vni', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="arp", rest_name="arp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-arp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_nd(self):
    """
    Getter method for nd, mapped from YANG variable /bgp_state/route/evpn/l2/nd (list)

    YANG Description: EVPN L2 Routes type nd information
    """
    return self.__nd
      
  def _set_nd(self, v, load=False):
    """
    Setter method for nd, mapped from YANG variable /bgp_state/route/evpn/l2/nd (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nd() directly.

    YANG Description: EVPN L2 Routes type nd information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ipv6_address mac ethernet_tag",nd.nd, yang_name="nd", rest_name="nd", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address mac ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}), is_container='list', yang_name="nd", rest_name="nd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nd must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ipv6_address mac ethernet_tag",nd.nd, yang_name="nd", rest_name="nd", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address mac ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}), is_container='list', yang_name="nd", rest_name="nd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__nd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nd(self):
    self.__nd = YANGDynClass(base=YANGListType("ipv6_address mac ethernet_tag",nd.nd, yang_name="nd", rest_name="nd", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ipv6-address mac ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}), is_container='list', yang_name="nd", rest_name="nd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-nd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_auto_discovery(self):
    """
    Getter method for auto_discovery, mapped from YANG variable /bgp_state/route/evpn/l2/auto_discovery (list)

    YANG Description: EVPN L2 Routes type auto-discovery information
    """
    return self.__auto_discovery
      
  def _set_auto_discovery(self, v, load=False):
    """
    Setter method for auto_discovery, mapped from YANG variable /bgp_state/route/evpn/l2/auto_discovery (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_discovery is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_discovery() directly.

    YANG Description: EVPN L2 Routes type auto-discovery information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("esi_value ethernet_tag",auto_discovery.auto_discovery, yang_name="auto-discovery", rest_name="auto-discovery", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-discovery", rest_name="auto-discovery", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_discovery must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("esi_value ethernet_tag",auto_discovery.auto_discovery, yang_name="auto-discovery", rest_name="auto-discovery", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-discovery", rest_name="auto-discovery", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__auto_discovery = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_discovery(self):
    self.__auto_discovery = YANGDynClass(base=YANGListType("esi_value ethernet_tag",auto_discovery.auto_discovery, yang_name="auto-discovery", rest_name="auto-discovery", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-discovery", rest_name="auto-discovery", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-auto-discovery', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_ethernet_segment(self):
    """
    Getter method for ethernet_segment, mapped from YANG variable /bgp_state/route/evpn/l2/ethernet_segment (list)

    YANG Description: EVPN L2 Routes type ethernet-segment information
    """
    return self.__ethernet_segment
      
  def _set_ethernet_segment(self, v, load=False):
    """
    Setter method for ethernet_segment, mapped from YANG variable /bgp_state/route/evpn/l2/ethernet_segment (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ethernet_segment is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ethernet_segment() directly.

    YANG Description: EVPN L2 Routes type ethernet-segment information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("esi_value ipv4_address ipv6_address",ethernet_segment.ethernet_segment, yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ipv4-address ipv6-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ethernet_segment must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("esi_value ipv4_address ipv6_address",ethernet_segment.ethernet_segment, yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ipv4-address ipv6-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__ethernet_segment = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ethernet_segment(self):
    self.__ethernet_segment = YANGDynClass(base=YANGListType("esi_value ipv4_address ipv6_address",ethernet_segment.ethernet_segment, yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ipv4-address ipv6-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ethernet-segment", rest_name="ethernet-segment", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-ethernet-segment', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_inclusive_multicast(self):
    """
    Getter method for inclusive_multicast, mapped from YANG variable /bgp_state/route/evpn/l2/inclusive_multicast (list)

    YANG Description: EVPN L2 Routes type inclusive-multicast information
    """
    return self.__inclusive_multicast
      
  def _set_inclusive_multicast(self, v, load=False):
    """
    Setter method for inclusive_multicast, mapped from YANG variable /bgp_state/route/evpn/l2/inclusive_multicast (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inclusive_multicast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inclusive_multicast() directly.

    YANG Description: EVPN L2 Routes type inclusive-multicast information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ethernet_tag ipv4_address",inclusive_multicast.inclusive_multicast, yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag ipv4-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inclusive_multicast must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ethernet_tag ipv4_address",inclusive_multicast.inclusive_multicast, yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag ipv4-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__inclusive_multicast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inclusive_multicast(self):
    self.__inclusive_multicast = YANGDynClass(base=YANGListType("ethernet_tag ipv4_address",inclusive_multicast.inclusive_multicast, yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ethernet-tag ipv4-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="inclusive-multicast", rest_name="inclusive-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-inclusive-multicast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_igmp_join_sync(self):
    """
    Getter method for igmp_join_sync, mapped from YANG variable /bgp_state/route/evpn/l2/igmp_join_sync (list)

    YANG Description: EVPN L2 Routes type igmp-join-sync information
    """
    return self.__igmp_join_sync
      
  def _set_igmp_join_sync(self, v, load=False):
    """
    Setter method for igmp_join_sync, mapped from YANG variable /bgp_state/route/evpn/l2/igmp_join_sync (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_join_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_join_sync() directly.

    YANG Description: EVPN L2 Routes type igmp-join-sync information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address",igmp_join_sync.igmp_join_sync, yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_join_sync must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address",igmp_join_sync.igmp_join_sync, yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_join_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_join_sync(self):
    self.__igmp_join_sync = YANGDynClass(base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address",igmp_join_sync.igmp_join_sync, yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-join-sync", rest_name="igmp-join-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-join-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)


  def _get_igmp_leave_sync(self):
    """
    Getter method for igmp_leave_sync, mapped from YANG variable /bgp_state/route/evpn/l2/igmp_leave_sync (list)

    YANG Description: EVPN L2 Routes type igmp-leave-sync information
    """
    return self.__igmp_leave_sync
      
  def _set_igmp_leave_sync(self, v, load=False):
    """
    Setter method for igmp_leave_sync, mapped from YANG variable /bgp_state/route/evpn/l2/igmp_leave_sync (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_leave_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_leave_sync() directly.

    YANG Description: EVPN L2 Routes type igmp-leave-sync information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address leave_grp_sync",igmp_leave_sync.igmp_leave_sync, yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address leave-grp-sync', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_leave_sync must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address leave_grp_sync",igmp_leave_sync.igmp_leave_sync, yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address leave-grp-sync', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_leave_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_leave_sync(self):
    self.__igmp_leave_sync = YANGDynClass(base=YANGListType("esi_value ethernet_tag ipv4_orig_rtrid ipv6_orig_rtrid ipv4_grp_address ipv6_grp_address ipv4_src_address ipv6_src_address leave_grp_sync",igmp_leave_sync.igmp_leave_sync, yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='esi-value ethernet-tag ipv4-orig-rtrid ipv6-orig-rtrid ipv4-grp-address ipv6-grp-address ipv4-src-address ipv6-src-address leave-grp-sync', extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-leave-sync", rest_name="igmp-leave-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'bgp-evpn-l2-routes-type-igmp-leave-sync', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='list', is_config=False)

  mac = __builtin__.property(_get_mac)
  arp = __builtin__.property(_get_arp)
  nd = __builtin__.property(_get_nd)
  auto_discovery = __builtin__.property(_get_auto_discovery)
  ethernet_segment = __builtin__.property(_get_ethernet_segment)
  inclusive_multicast = __builtin__.property(_get_inclusive_multicast)
  igmp_join_sync = __builtin__.property(_get_igmp_join_sync)
  igmp_leave_sync = __builtin__.property(_get_igmp_leave_sync)


  _pyangbind_elements = {'mac': mac, 'arp': arp, 'nd': nd, 'auto_discovery': auto_discovery, 'ethernet_segment': ethernet_segment, 'inclusive_multicast': inclusive_multicast, 'igmp_join_sync': igmp_join_sync, 'igmp_leave_sync': igmp_leave_sync, }


