
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class last_update_time(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-bgp-operational - based on the path /bgp-state/neighbor/evpn/last-update-time. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Last update time
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__tx_nlri','__tx_withdraw','__rx_nlri','__rx_withdraw',)

  _yang_name = 'last-update-time'
  _rest_name = 'last-update-time'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__tx_withdraw = YANGDynClass(base=unicode, is_leaf=True, yang_name="tx-withdraw", rest_name="tx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    self.__rx_nlri = YANGDynClass(base=unicode, is_leaf=True, yang_name="rx-nlri", rest_name="rx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    self.__rx_withdraw = YANGDynClass(base=unicode, is_leaf=True, yang_name="rx-withdraw", rest_name="rx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    self.__tx_nlri = YANGDynClass(base=unicode, is_leaf=True, yang_name="tx-nlri", rest_name="tx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bgp-state', u'neighbor', u'evpn', u'last-update-time']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bgp-state', u'neighbor', u'evpn', u'last-update-time']

  def _get_tx_nlri(self):
    """
    Getter method for tx_nlri, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/tx_nlri (string)

    YANG Description: Tx NLRI
    """
    return self.__tx_nlri
      
  def _set_tx_nlri(self, v, load=False):
    """
    Setter method for tx_nlri, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/tx_nlri (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_nlri is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_nlri() directly.

    YANG Description: Tx NLRI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tx-nlri", rest_name="tx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_nlri must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tx-nlri", rest_name="tx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)""",
        })

    self.__tx_nlri = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_nlri(self):
    self.__tx_nlri = YANGDynClass(base=unicode, is_leaf=True, yang_name="tx-nlri", rest_name="tx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)


  def _get_tx_withdraw(self):
    """
    Getter method for tx_withdraw, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/tx_withdraw (string)

    YANG Description: Tx withdraw
    """
    return self.__tx_withdraw
      
  def _set_tx_withdraw(self, v, load=False):
    """
    Setter method for tx_withdraw, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/tx_withdraw (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_withdraw is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_withdraw() directly.

    YANG Description: Tx withdraw
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="tx-withdraw", rest_name="tx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_withdraw must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="tx-withdraw", rest_name="tx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)""",
        })

    self.__tx_withdraw = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_withdraw(self):
    self.__tx_withdraw = YANGDynClass(base=unicode, is_leaf=True, yang_name="tx-withdraw", rest_name="tx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)


  def _get_rx_nlri(self):
    """
    Getter method for rx_nlri, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/rx_nlri (string)

    YANG Description: Rx NLRI
    """
    return self.__rx_nlri
      
  def _set_rx_nlri(self, v, load=False):
    """
    Setter method for rx_nlri, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/rx_nlri (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_nlri is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_nlri() directly.

    YANG Description: Rx NLRI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rx-nlri", rest_name="rx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_nlri must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rx-nlri", rest_name="rx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)""",
        })

    self.__rx_nlri = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_nlri(self):
    self.__rx_nlri = YANGDynClass(base=unicode, is_leaf=True, yang_name="rx-nlri", rest_name="rx-nlri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)


  def _get_rx_withdraw(self):
    """
    Getter method for rx_withdraw, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/rx_withdraw (string)

    YANG Description: Rx withdraw
    """
    return self.__rx_withdraw
      
  def _set_rx_withdraw(self, v, load=False):
    """
    Setter method for rx_withdraw, mapped from YANG variable /bgp_state/neighbor/evpn/last_update_time/rx_withdraw (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_withdraw is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_withdraw() directly.

    YANG Description: Rx withdraw
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rx-withdraw", rest_name="rx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_withdraw must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rx-withdraw", rest_name="rx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)""",
        })

    self.__rx_withdraw = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_withdraw(self):
    self.__rx_withdraw = YANGDynClass(base=unicode, is_leaf=True, yang_name="rx-withdraw", rest_name="rx-withdraw", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)

  tx_nlri = __builtin__.property(_get_tx_nlri)
  tx_withdraw = __builtin__.property(_get_tx_withdraw)
  rx_nlri = __builtin__.property(_get_rx_nlri)
  rx_withdraw = __builtin__.property(_get_rx_withdraw)


  _pyangbind_elements = {'tx_nlri': tx_nlri, 'tx_withdraw': tx_withdraw, 'rx_nlri': rx_nlri, 'rx_withdraw': rx_withdraw, }


