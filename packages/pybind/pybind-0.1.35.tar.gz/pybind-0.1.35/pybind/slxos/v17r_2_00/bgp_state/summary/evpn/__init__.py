
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class evpn(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-bgp-operational - based on the path /bgp-state/summary/evpn. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP EVPN summary information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__router_id','__local_as','__confederation_id','__cluster_id_ipv4','__cluster_id','__max_ecmp_paths','__max_bgp_routes_in_rtm','__num_neighbor_configured','__num_neighbor_up','__num_routes_installed','__bytes_used_num_routes_installed','__num_routes_adv_all_neighbors','__num_routes_adv_all_neighbors_rib_out_entries','__bytes_used_num_routes_adv_all_neighbors','__num_attr_entries_installed','__bytes_used_num_attr_entries_installed','__update_msgs_dropped','__oom_received_routes','__oom_outgoing_routes','__oom_attribute_entries','__confederation_peers',)

  _yang_name = 'evpn'
  _rest_name = 'evpn'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="router-id", rest_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__num_routes_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-installed", rest_name="num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__oom_received_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-received-routes", rest_name="oom-received-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__confederation_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="confederation-id", rest_name="confederation-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__max_ecmp_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-ecmp-paths", rest_name="max-ecmp-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__cluster_id_ipv4 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="cluster-id-ipv4", rest_name="cluster-id-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__local_as = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-as", rest_name="local-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__num_routes_adv_all_neighbors_rib_out_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors-rib-out-entries", rest_name="num-routes-adv-all-neighbors-rib-out-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__num_attr_entries_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-attr-entries-installed", rest_name="num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__confederation_peers = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="confederation-peers", rest_name="confederation-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__update_msgs_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="update-msgs-dropped", rest_name="update-msgs-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__max_bgp_routes_in_rtm = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bgp-routes-in-rtm", rest_name="max-bgp-routes-in-rtm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__num_neighbor_configured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-configured", rest_name="num-neighbor-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__cluster_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cluster-id", rest_name="cluster-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__oom_attribute_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-attribute-entries", rest_name="oom-attribute-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__num_neighbor_up = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-up", rest_name="num-neighbor-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__num_routes_adv_all_neighbors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors", rest_name="num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__bytes_used_num_routes_adv_all_neighbors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-adv-all-neighbors", rest_name="bytes-used-num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__bytes_used_num_routes_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-installed", rest_name="bytes-used-num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__oom_outgoing_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-outgoing-routes", rest_name="oom-outgoing-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__bytes_used_num_attr_entries_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-attr-entries-installed", rest_name="bytes-used-num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bgp-state', u'summary', u'evpn']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bgp-state', u'summary', u'evpn']

  def _get_router_id(self):
    """
    Getter method for router_id, mapped from YANG variable /bgp_state/summary/evpn/router_id (inet:ipv4-address)

    YANG Description: Router identifier
    """
    return self.__router_id
      
  def _set_router_id(self, v, load=False):
    """
    Setter method for router_id, mapped from YANG variable /bgp_state/summary/evpn/router_id (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_id() directly.

    YANG Description: Router identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="router-id", rest_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_id must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="router-id", rest_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_id(self):
    self.__router_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="router-id", rest_name="router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_local_as(self):
    """
    Getter method for local_as, mapped from YANG variable /bgp_state/summary/evpn/local_as (uint32)

    YANG Description: Local AS Number
    """
    return self.__local_as
      
  def _set_local_as(self, v, load=False):
    """
    Setter method for local_as, mapped from YANG variable /bgp_state/summary/evpn/local_as (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_as is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_as() directly.

    YANG Description: Local AS Number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-as", rest_name="local-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_as must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-as", rest_name="local-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__local_as = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_as(self):
    self.__local_as = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="local-as", rest_name="local-as", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_confederation_id(self):
    """
    Getter method for confederation_id, mapped from YANG variable /bgp_state/summary/evpn/confederation_id (uint32)

    YANG Description: Confederation identifier
    """
    return self.__confederation_id
      
  def _set_confederation_id(self, v, load=False):
    """
    Setter method for confederation_id, mapped from YANG variable /bgp_state/summary/evpn/confederation_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_confederation_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_confederation_id() directly.

    YANG Description: Confederation identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="confederation-id", rest_name="confederation-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """confederation_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="confederation-id", rest_name="confederation-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__confederation_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_confederation_id(self):
    self.__confederation_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="confederation-id", rest_name="confederation-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_cluster_id_ipv4(self):
    """
    Getter method for cluster_id_ipv4, mapped from YANG variable /bgp_state/summary/evpn/cluster_id_ipv4 (inet:ipv4-address)

    YANG Description: Cluster Identifier Ipv4 address
    """
    return self.__cluster_id_ipv4
      
  def _set_cluster_id_ipv4(self, v, load=False):
    """
    Setter method for cluster_id_ipv4, mapped from YANG variable /bgp_state/summary/evpn/cluster_id_ipv4 (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_id_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_id_ipv4() directly.

    YANG Description: Cluster Identifier Ipv4 address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="cluster-id-ipv4", rest_name="cluster-id-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_id_ipv4 must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="cluster-id-ipv4", rest_name="cluster-id-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__cluster_id_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_id_ipv4(self):
    self.__cluster_id_ipv4 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="cluster-id-ipv4", rest_name="cluster-id-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_cluster_id(self):
    """
    Getter method for cluster_id, mapped from YANG variable /bgp_state/summary/evpn/cluster_id (uint32)

    YANG Description: Cluster Identifier
    """
    return self.__cluster_id
      
  def _set_cluster_id(self, v, load=False):
    """
    Setter method for cluster_id, mapped from YANG variable /bgp_state/summary/evpn/cluster_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_id() directly.

    YANG Description: Cluster Identifier
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cluster-id", rest_name="cluster-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cluster-id", rest_name="cluster-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__cluster_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_id(self):
    self.__cluster_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cluster-id", rest_name="cluster-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_max_ecmp_paths(self):
    """
    Getter method for max_ecmp_paths, mapped from YANG variable /bgp_state/summary/evpn/max_ecmp_paths (uint32)

    YANG Description: Maximum number of IP ECMP Paths supported for Load Sharing
    """
    return self.__max_ecmp_paths
      
  def _set_max_ecmp_paths(self, v, load=False):
    """
    Setter method for max_ecmp_paths, mapped from YANG variable /bgp_state/summary/evpn/max_ecmp_paths (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_ecmp_paths is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_ecmp_paths() directly.

    YANG Description: Maximum number of IP ECMP Paths supported for Load Sharing
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-ecmp-paths", rest_name="max-ecmp-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_ecmp_paths must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-ecmp-paths", rest_name="max-ecmp-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_ecmp_paths = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_ecmp_paths(self):
    self.__max_ecmp_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-ecmp-paths", rest_name="max-ecmp-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_max_bgp_routes_in_rtm(self):
    """
    Getter method for max_bgp_routes_in_rtm, mapped from YANG variable /bgp_state/summary/evpn/max_bgp_routes_in_rtm (uint32)

    YANG Description: Maximum number of BGP routes allowed in RTM
    """
    return self.__max_bgp_routes_in_rtm
      
  def _set_max_bgp_routes_in_rtm(self, v, load=False):
    """
    Setter method for max_bgp_routes_in_rtm, mapped from YANG variable /bgp_state/summary/evpn/max_bgp_routes_in_rtm (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_bgp_routes_in_rtm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_bgp_routes_in_rtm() directly.

    YANG Description: Maximum number of BGP routes allowed in RTM
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bgp-routes-in-rtm", rest_name="max-bgp-routes-in-rtm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_bgp_routes_in_rtm must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bgp-routes-in-rtm", rest_name="max-bgp-routes-in-rtm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_bgp_routes_in_rtm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_bgp_routes_in_rtm(self):
    self.__max_bgp_routes_in_rtm = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bgp-routes-in-rtm", rest_name="max-bgp-routes-in-rtm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_num_neighbor_configured(self):
    """
    Getter method for num_neighbor_configured, mapped from YANG variable /bgp_state/summary/evpn/num_neighbor_configured (uint32)

    YANG Description: Number of neighbors configured
    """
    return self.__num_neighbor_configured
      
  def _set_num_neighbor_configured(self, v, load=False):
    """
    Setter method for num_neighbor_configured, mapped from YANG variable /bgp_state/summary/evpn/num_neighbor_configured (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num_neighbor_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num_neighbor_configured() directly.

    YANG Description: Number of neighbors configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-configured", rest_name="num-neighbor-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num_neighbor_configured must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-configured", rest_name="num-neighbor-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__num_neighbor_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num_neighbor_configured(self):
    self.__num_neighbor_configured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-configured", rest_name="num-neighbor-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_num_neighbor_up(self):
    """
    Getter method for num_neighbor_up, mapped from YANG variable /bgp_state/summary/evpn/num_neighbor_up (uint32)

    YANG Description: Number of neighbors up
    """
    return self.__num_neighbor_up
      
  def _set_num_neighbor_up(self, v, load=False):
    """
    Setter method for num_neighbor_up, mapped from YANG variable /bgp_state/summary/evpn/num_neighbor_up (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num_neighbor_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num_neighbor_up() directly.

    YANG Description: Number of neighbors up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-up", rest_name="num-neighbor-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num_neighbor_up must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-up", rest_name="num-neighbor-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__num_neighbor_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num_neighbor_up(self):
    self.__num_neighbor_up = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-neighbor-up", rest_name="num-neighbor-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_num_routes_installed(self):
    """
    Getter method for num_routes_installed, mapped from YANG variable /bgp_state/summary/evpn/num_routes_installed (uint32)

    YANG Description: Number of routes installed
    """
    return self.__num_routes_installed
      
  def _set_num_routes_installed(self, v, load=False):
    """
    Setter method for num_routes_installed, mapped from YANG variable /bgp_state/summary/evpn/num_routes_installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num_routes_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num_routes_installed() directly.

    YANG Description: Number of routes installed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-installed", rest_name="num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num_routes_installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-installed", rest_name="num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__num_routes_installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num_routes_installed(self):
    self.__num_routes_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-installed", rest_name="num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_bytes_used_num_routes_installed(self):
    """
    Getter method for bytes_used_num_routes_installed, mapped from YANG variable /bgp_state/summary/evpn/bytes_used_num_routes_installed (uint32)

    YANG Description: Bytes used to store number of routes installed
    """
    return self.__bytes_used_num_routes_installed
      
  def _set_bytes_used_num_routes_installed(self, v, load=False):
    """
    Setter method for bytes_used_num_routes_installed, mapped from YANG variable /bgp_state/summary/evpn/bytes_used_num_routes_installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bytes_used_num_routes_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bytes_used_num_routes_installed() directly.

    YANG Description: Bytes used to store number of routes installed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-installed", rest_name="bytes-used-num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bytes_used_num_routes_installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-installed", rest_name="bytes-used-num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bytes_used_num_routes_installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bytes_used_num_routes_installed(self):
    self.__bytes_used_num_routes_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-installed", rest_name="bytes-used-num-routes-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_num_routes_adv_all_neighbors(self):
    """
    Getter method for num_routes_adv_all_neighbors, mapped from YANG variable /bgp_state/summary/evpn/num_routes_adv_all_neighbors (uint32)

    YANG Description: Number of routes advertised to all neighbors
    """
    return self.__num_routes_adv_all_neighbors
      
  def _set_num_routes_adv_all_neighbors(self, v, load=False):
    """
    Setter method for num_routes_adv_all_neighbors, mapped from YANG variable /bgp_state/summary/evpn/num_routes_adv_all_neighbors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num_routes_adv_all_neighbors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num_routes_adv_all_neighbors() directly.

    YANG Description: Number of routes advertised to all neighbors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors", rest_name="num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num_routes_adv_all_neighbors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors", rest_name="num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__num_routes_adv_all_neighbors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num_routes_adv_all_neighbors(self):
    self.__num_routes_adv_all_neighbors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors", rest_name="num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_num_routes_adv_all_neighbors_rib_out_entries(self):
    """
    Getter method for num_routes_adv_all_neighbors_rib_out_entries, mapped from YANG variable /bgp_state/summary/evpn/num_routes_adv_all_neighbors_rib_out_entries (uint32)

    YANG Description: Number of routes advertised to all neighbors(RIB out entries)
    """
    return self.__num_routes_adv_all_neighbors_rib_out_entries
      
  def _set_num_routes_adv_all_neighbors_rib_out_entries(self, v, load=False):
    """
    Setter method for num_routes_adv_all_neighbors_rib_out_entries, mapped from YANG variable /bgp_state/summary/evpn/num_routes_adv_all_neighbors_rib_out_entries (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num_routes_adv_all_neighbors_rib_out_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num_routes_adv_all_neighbors_rib_out_entries() directly.

    YANG Description: Number of routes advertised to all neighbors(RIB out entries)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors-rib-out-entries", rest_name="num-routes-adv-all-neighbors-rib-out-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num_routes_adv_all_neighbors_rib_out_entries must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors-rib-out-entries", rest_name="num-routes-adv-all-neighbors-rib-out-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__num_routes_adv_all_neighbors_rib_out_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num_routes_adv_all_neighbors_rib_out_entries(self):
    self.__num_routes_adv_all_neighbors_rib_out_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-routes-adv-all-neighbors-rib-out-entries", rest_name="num-routes-adv-all-neighbors-rib-out-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_bytes_used_num_routes_adv_all_neighbors(self):
    """
    Getter method for bytes_used_num_routes_adv_all_neighbors, mapped from YANG variable /bgp_state/summary/evpn/bytes_used_num_routes_adv_all_neighbors (uint32)

    YANG Description: Bytes used to store number of routes advertised to all neighbors
    """
    return self.__bytes_used_num_routes_adv_all_neighbors
      
  def _set_bytes_used_num_routes_adv_all_neighbors(self, v, load=False):
    """
    Setter method for bytes_used_num_routes_adv_all_neighbors, mapped from YANG variable /bgp_state/summary/evpn/bytes_used_num_routes_adv_all_neighbors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bytes_used_num_routes_adv_all_neighbors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bytes_used_num_routes_adv_all_neighbors() directly.

    YANG Description: Bytes used to store number of routes advertised to all neighbors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-adv-all-neighbors", rest_name="bytes-used-num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bytes_used_num_routes_adv_all_neighbors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-adv-all-neighbors", rest_name="bytes-used-num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bytes_used_num_routes_adv_all_neighbors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bytes_used_num_routes_adv_all_neighbors(self):
    self.__bytes_used_num_routes_adv_all_neighbors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-routes-adv-all-neighbors", rest_name="bytes-used-num-routes-adv-all-neighbors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_num_attr_entries_installed(self):
    """
    Getter method for num_attr_entries_installed, mapped from YANG variable /bgp_state/summary/evpn/num_attr_entries_installed (uint32)

    YANG Description: Number of attribute entries installed
    """
    return self.__num_attr_entries_installed
      
  def _set_num_attr_entries_installed(self, v, load=False):
    """
    Setter method for num_attr_entries_installed, mapped from YANG variable /bgp_state/summary/evpn/num_attr_entries_installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_num_attr_entries_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_num_attr_entries_installed() directly.

    YANG Description: Number of attribute entries installed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-attr-entries-installed", rest_name="num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """num_attr_entries_installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-attr-entries-installed", rest_name="num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__num_attr_entries_installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_num_attr_entries_installed(self):
    self.__num_attr_entries_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="num-attr-entries-installed", rest_name="num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_bytes_used_num_attr_entries_installed(self):
    """
    Getter method for bytes_used_num_attr_entries_installed, mapped from YANG variable /bgp_state/summary/evpn/bytes_used_num_attr_entries_installed (uint32)

    YANG Description: Bytes used to store number of attribute entries installed
    """
    return self.__bytes_used_num_attr_entries_installed
      
  def _set_bytes_used_num_attr_entries_installed(self, v, load=False):
    """
    Setter method for bytes_used_num_attr_entries_installed, mapped from YANG variable /bgp_state/summary/evpn/bytes_used_num_attr_entries_installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bytes_used_num_attr_entries_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bytes_used_num_attr_entries_installed() directly.

    YANG Description: Bytes used to store number of attribute entries installed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-attr-entries-installed", rest_name="bytes-used-num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bytes_used_num_attr_entries_installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-attr-entries-installed", rest_name="bytes-used-num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bytes_used_num_attr_entries_installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bytes_used_num_attr_entries_installed(self):
    self.__bytes_used_num_attr_entries_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bytes-used-num-attr-entries-installed", rest_name="bytes-used-num-attr-entries-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_update_msgs_dropped(self):
    """
    Getter method for update_msgs_dropped, mapped from YANG variable /bgp_state/summary/evpn/update_msgs_dropped (uint32)

    YANG Description: Update Messages dropped (no Memory for Attribute Entries)
    """
    return self.__update_msgs_dropped
      
  def _set_update_msgs_dropped(self, v, load=False):
    """
    Setter method for update_msgs_dropped, mapped from YANG variable /bgp_state/summary/evpn/update_msgs_dropped (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_update_msgs_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_update_msgs_dropped() directly.

    YANG Description: Update Messages dropped (no Memory for Attribute Entries)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="update-msgs-dropped", rest_name="update-msgs-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """update_msgs_dropped must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="update-msgs-dropped", rest_name="update-msgs-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__update_msgs_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_update_msgs_dropped(self):
    self.__update_msgs_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="update-msgs-dropped", rest_name="update-msgs-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_oom_received_routes(self):
    """
    Getter method for oom_received_routes, mapped from YANG variable /bgp_state/summary/evpn/oom_received_routes (uint32)

    YANG Description: Out of memory count for Received Routes(NLRI)
    """
    return self.__oom_received_routes
      
  def _set_oom_received_routes(self, v, load=False):
    """
    Setter method for oom_received_routes, mapped from YANG variable /bgp_state/summary/evpn/oom_received_routes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oom_received_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oom_received_routes() directly.

    YANG Description: Out of memory count for Received Routes(NLRI)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-received-routes", rest_name="oom-received-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oom_received_routes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-received-routes", rest_name="oom-received-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__oom_received_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oom_received_routes(self):
    self.__oom_received_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-received-routes", rest_name="oom-received-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_oom_outgoing_routes(self):
    """
    Getter method for oom_outgoing_routes, mapped from YANG variable /bgp_state/summary/evpn/oom_outgoing_routes (uint32)

    YANG Description: Out of memory count for outgoing routes(RIB-OUT)
    """
    return self.__oom_outgoing_routes
      
  def _set_oom_outgoing_routes(self, v, load=False):
    """
    Setter method for oom_outgoing_routes, mapped from YANG variable /bgp_state/summary/evpn/oom_outgoing_routes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oom_outgoing_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oom_outgoing_routes() directly.

    YANG Description: Out of memory count for outgoing routes(RIB-OUT)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-outgoing-routes", rest_name="oom-outgoing-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oom_outgoing_routes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-outgoing-routes", rest_name="oom-outgoing-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__oom_outgoing_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oom_outgoing_routes(self):
    self.__oom_outgoing_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-outgoing-routes", rest_name="oom-outgoing-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_oom_attribute_entries(self):
    """
    Getter method for oom_attribute_entries, mapped from YANG variable /bgp_state/summary/evpn/oom_attribute_entries (uint32)

    YANG Description: Out of memory count for attribute entries
    """
    return self.__oom_attribute_entries
      
  def _set_oom_attribute_entries(self, v, load=False):
    """
    Setter method for oom_attribute_entries, mapped from YANG variable /bgp_state/summary/evpn/oom_attribute_entries (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oom_attribute_entries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oom_attribute_entries() directly.

    YANG Description: Out of memory count for attribute entries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-attribute-entries", rest_name="oom-attribute-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oom_attribute_entries must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-attribute-entries", rest_name="oom-attribute-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__oom_attribute_entries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oom_attribute_entries(self):
    self.__oom_attribute_entries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="oom-attribute-entries", rest_name="oom-attribute-entries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_confederation_peers(self):
    """
    Getter method for confederation_peers, mapped from YANG variable /bgp_state/summary/evpn/confederation_peers (uint32)

    YANG Description: Confederation Peers
    """
    return self.__confederation_peers
      
  def _set_confederation_peers(self, v, load=False):
    """
    Setter method for confederation_peers, mapped from YANG variable /bgp_state/summary/evpn/confederation_peers (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_confederation_peers is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_confederation_peers() directly.

    YANG Description: Confederation Peers
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="confederation-peers", rest_name="confederation-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """confederation_peers must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="confederation-peers", rest_name="confederation-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__confederation_peers = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_confederation_peers(self):
    self.__confederation_peers = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="confederation-peers", rest_name="confederation-peers", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)

  router_id = __builtin__.property(_get_router_id)
  local_as = __builtin__.property(_get_local_as)
  confederation_id = __builtin__.property(_get_confederation_id)
  cluster_id_ipv4 = __builtin__.property(_get_cluster_id_ipv4)
  cluster_id = __builtin__.property(_get_cluster_id)
  max_ecmp_paths = __builtin__.property(_get_max_ecmp_paths)
  max_bgp_routes_in_rtm = __builtin__.property(_get_max_bgp_routes_in_rtm)
  num_neighbor_configured = __builtin__.property(_get_num_neighbor_configured)
  num_neighbor_up = __builtin__.property(_get_num_neighbor_up)
  num_routes_installed = __builtin__.property(_get_num_routes_installed)
  bytes_used_num_routes_installed = __builtin__.property(_get_bytes_used_num_routes_installed)
  num_routes_adv_all_neighbors = __builtin__.property(_get_num_routes_adv_all_neighbors)
  num_routes_adv_all_neighbors_rib_out_entries = __builtin__.property(_get_num_routes_adv_all_neighbors_rib_out_entries)
  bytes_used_num_routes_adv_all_neighbors = __builtin__.property(_get_bytes_used_num_routes_adv_all_neighbors)
  num_attr_entries_installed = __builtin__.property(_get_num_attr_entries_installed)
  bytes_used_num_attr_entries_installed = __builtin__.property(_get_bytes_used_num_attr_entries_installed)
  update_msgs_dropped = __builtin__.property(_get_update_msgs_dropped)
  oom_received_routes = __builtin__.property(_get_oom_received_routes)
  oom_outgoing_routes = __builtin__.property(_get_oom_outgoing_routes)
  oom_attribute_entries = __builtin__.property(_get_oom_attribute_entries)
  confederation_peers = __builtin__.property(_get_confederation_peers)


  _pyangbind_elements = {'router_id': router_id, 'local_as': local_as, 'confederation_id': confederation_id, 'cluster_id_ipv4': cluster_id_ipv4, 'cluster_id': cluster_id, 'max_ecmp_paths': max_ecmp_paths, 'max_bgp_routes_in_rtm': max_bgp_routes_in_rtm, 'num_neighbor_configured': num_neighbor_configured, 'num_neighbor_up': num_neighbor_up, 'num_routes_installed': num_routes_installed, 'bytes_used_num_routes_installed': bytes_used_num_routes_installed, 'num_routes_adv_all_neighbors': num_routes_adv_all_neighbors, 'num_routes_adv_all_neighbors_rib_out_entries': num_routes_adv_all_neighbors_rib_out_entries, 'bytes_used_num_routes_adv_all_neighbors': bytes_used_num_routes_adv_all_neighbors, 'num_attr_entries_installed': num_attr_entries_installed, 'bytes_used_num_attr_entries_installed': bytes_used_num_attr_entries_installed, 'update_msgs_dropped': update_msgs_dropped, 'oom_received_routes': oom_received_routes, 'oom_outgoing_routes': oom_outgoing_routes, 'oom_attribute_entries': oom_attribute_entries, 'confederation_peers': confederation_peers, }


