
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class update_source(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-bgp-operational - based on the path /bgp-state/neighbor/evpn/update-source. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Update source information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__type','__interface_name','__loopback_intf','__virtual_intf','__ethernet_port_id','__pos',)

  _yang_name = 'update-source'
  _rest_name = 'update-source'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__loopback_intf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="loopback-intf", rest_name="loopback-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__pos = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pos", rest_name="pos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__ethernet_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ethernet-port-id", rest_name="ethernet-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__virtual_intf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="virtual-intf", rest_name="virtual-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'virtual-intf': {'value': 2}, u'loopback-intf': {'value': 1}, u'pos': {'value': 4}, u'interface-name': {'value': 0}, u'ethernet-port-id': {'value': 3}},), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='update-source-types', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bgp-state', u'neighbor', u'evpn', u'update-source']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bgp-state', u'neighbor', u'evpn', u'update-source']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/type (update-source-types)

    YANG Description: Indicates the type of update source configuration
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/type (update-source-types)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: Indicates the type of update source configuration
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'virtual-intf': {'value': 2}, u'loopback-intf': {'value': 1}, u'pos': {'value': 4}, u'interface-name': {'value': 0}, u'ethernet-port-id': {'value': 3}},), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='update-source-types', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with update-source-types""",
          'defined-type': "brocade-bgp-operational:update-source-types",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'virtual-intf': {'value': 2}, u'loopback-intf': {'value': 1}, u'pos': {'value': 4}, u'interface-name': {'value': 0}, u'ethernet-port-id': {'value': 3}},), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='update-source-types', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'virtual-intf': {'value': 2}, u'loopback-intf': {'value': 1}, u'pos': {'value': 4}, u'interface-name': {'value': 0}, u'ethernet-port-id': {'value': 3}},), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='update-source-types', is_config=False)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/interface_name (string)

    YANG Description: Interface name
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: Interface name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='string', is_config=False)


  def _get_loopback_intf(self):
    """
    Getter method for loopback_intf, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/loopback_intf (uint32)

    YANG Description: Loopback id
    """
    return self.__loopback_intf
      
  def _set_loopback_intf(self, v, load=False):
    """
    Setter method for loopback_intf, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/loopback_intf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_loopback_intf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_loopback_intf() directly.

    YANG Description: Loopback id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="loopback-intf", rest_name="loopback-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """loopback_intf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="loopback-intf", rest_name="loopback-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__loopback_intf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_loopback_intf(self):
    self.__loopback_intf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="loopback-intf", rest_name="loopback-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_virtual_intf(self):
    """
    Getter method for virtual_intf, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/virtual_intf (uint32)

    YANG Description: Virtual interface id
    """
    return self.__virtual_intf
      
  def _set_virtual_intf(self, v, load=False):
    """
    Setter method for virtual_intf, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/virtual_intf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_intf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_intf() directly.

    YANG Description: Virtual interface id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="virtual-intf", rest_name="virtual-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_intf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="virtual-intf", rest_name="virtual-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__virtual_intf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_intf(self):
    self.__virtual_intf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="virtual-intf", rest_name="virtual-intf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_ethernet_port_id(self):
    """
    Getter method for ethernet_port_id, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/ethernet_port_id (uint32)

    YANG Description: Ethernet port id
    """
    return self.__ethernet_port_id
      
  def _set_ethernet_port_id(self, v, load=False):
    """
    Setter method for ethernet_port_id, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/ethernet_port_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ethernet_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ethernet_port_id() directly.

    YANG Description: Ethernet port id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ethernet-port-id", rest_name="ethernet-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ethernet_port_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ethernet-port-id", rest_name="ethernet-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ethernet_port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ethernet_port_id(self):
    self.__ethernet_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ethernet-port-id", rest_name="ethernet-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)


  def _get_pos(self):
    """
    Getter method for pos, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/pos (uint32)

    YANG Description: Pos
    """
    return self.__pos
      
  def _set_pos(self, v, load=False):
    """
    Setter method for pos, mapped from YANG variable /bgp_state/neighbor/evpn/update_source/pos (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pos() directly.

    YANG Description: Pos
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pos", rest_name="pos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pos must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pos", rest_name="pos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pos(self):
    self.__pos = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pos", rest_name="pos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-bgp-operational', defining_module='brocade-bgp-operational', yang_type='uint32', is_config=False)

  type = __builtin__.property(_get_type)
  interface_name = __builtin__.property(_get_interface_name)
  loopback_intf = __builtin__.property(_get_loopback_intf)
  virtual_intf = __builtin__.property(_get_virtual_intf)
  ethernet_port_id = __builtin__.property(_get_ethernet_port_id)
  pos = __builtin__.property(_get_pos)


  _pyangbind_elements = {'type': type, 'interface_name': interface_name, 'loopback_intf': loopback_intf, 'virtual_intf': virtual_intf, 'ethernet_port_id': ethernet_port_id, 'pos': pos, }


