
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class hw_route_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysdiag-operational - based on the path /hw-state/hw-route-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: HW Route Info
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__slot','__tower','__lpm_percent','__lem_percent','__lpm_ipv4','__lpm_ipv6','__lpm_other','__lem_ipv4','__lem_ipv6','__lem_other','__lpm_total','__lem_total',)

  _yang_name = 'hw-route-info'
  _rest_name = 'hw-route-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__slot = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    self.__lem_other = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-other", rest_name="lem-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__lpm_ipv4 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv4", rest_name="lpm-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__lpm_ipv6 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv6", rest_name="lpm-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__lpm_total = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-total", rest_name="lpm-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__lpm_percent = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lpm-percent", rest_name="lpm-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)
    self.__lem_percent = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lem-percent", rest_name="lem-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)
    self.__lem_total = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-total", rest_name="lem-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__tower = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    self.__lpm_other = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-other", rest_name="lpm-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__lem_ipv4 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv4", rest_name="lem-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    self.__lem_ipv6 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv6", rest_name="lem-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'hw-state', u'hw-route-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'hw-state', u'hw-route-info']

  def _get_slot(self):
    """
    Getter method for slot, mapped from YANG variable /hw_state/hw_route_info/slot (uint16)

    YANG Description: slot id
    """
    return self.__slot
      
  def _set_slot(self, v, load=False):
    """
    Setter method for slot, mapped from YANG variable /hw_state/hw_route_info/slot (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slot() directly.

    YANG Description: slot id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slot must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__slot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slot(self):
    self.__slot = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)


  def _get_tower(self):
    """
    Getter method for tower, mapped from YANG variable /hw_state/hw_route_info/tower (uint16)

    YANG Description: tower id
    """
    return self.__tower
      
  def _set_tower(self, v, load=False):
    """
    Setter method for tower, mapped from YANG variable /hw_state/hw_route_info/tower (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tower() directly.

    YANG Description: tower id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tower must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__tower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tower(self):
    self.__tower = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)


  def _get_lpm_percent(self):
    """
    Getter method for lpm_percent, mapped from YANG variable /hw_state/hw_route_info/lpm_percent (decimal64)

    YANG Description: lpm percent
    """
    return self.__lpm_percent
      
  def _set_lpm_percent(self, v, load=False):
    """
    Setter method for lpm_percent, mapped from YANG variable /hw_state/hw_route_info/lpm_percent (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lpm_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lpm_percent() directly.

    YANG Description: lpm percent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lpm-percent", rest_name="lpm-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lpm_percent must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lpm-percent", rest_name="lpm-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__lpm_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lpm_percent(self):
    self.__lpm_percent = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lpm-percent", rest_name="lpm-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)


  def _get_lem_percent(self):
    """
    Getter method for lem_percent, mapped from YANG variable /hw_state/hw_route_info/lem_percent (decimal64)

    YANG Description: lem percent
    """
    return self.__lem_percent
      
  def _set_lem_percent(self, v, load=False):
    """
    Setter method for lem_percent, mapped from YANG variable /hw_state/hw_route_info/lem_percent (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lem_percent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lem_percent() directly.

    YANG Description: lem percent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lem-percent", rest_name="lem-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lem_percent must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lem-percent", rest_name="lem-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__lem_percent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lem_percent(self):
    self.__lem_percent = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="lem-percent", rest_name="lem-percent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='decimal64', is_config=False)


  def _get_lpm_ipv4(self):
    """
    Getter method for lpm_ipv4, mapped from YANG variable /hw_state/hw_route_info/lpm_ipv4 (uint32)

    YANG Description: lpm ipv4
    """
    return self.__lpm_ipv4
      
  def _set_lpm_ipv4(self, v, load=False):
    """
    Setter method for lpm_ipv4, mapped from YANG variable /hw_state/hw_route_info/lpm_ipv4 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lpm_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lpm_ipv4() directly.

    YANG Description: lpm ipv4
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv4", rest_name="lpm-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lpm_ipv4 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv4", rest_name="lpm-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lpm_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lpm_ipv4(self):
    self.__lpm_ipv4 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv4", rest_name="lpm-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lpm_ipv6(self):
    """
    Getter method for lpm_ipv6, mapped from YANG variable /hw_state/hw_route_info/lpm_ipv6 (uint32)

    YANG Description: lpm ipv6
    """
    return self.__lpm_ipv6
      
  def _set_lpm_ipv6(self, v, load=False):
    """
    Setter method for lpm_ipv6, mapped from YANG variable /hw_state/hw_route_info/lpm_ipv6 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lpm_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lpm_ipv6() directly.

    YANG Description: lpm ipv6
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv6", rest_name="lpm-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lpm_ipv6 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv6", rest_name="lpm-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lpm_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lpm_ipv6(self):
    self.__lpm_ipv6 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-ipv6", rest_name="lpm-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lpm_other(self):
    """
    Getter method for lpm_other, mapped from YANG variable /hw_state/hw_route_info/lpm_other (uint32)

    YANG Description: lpm other
    """
    return self.__lpm_other
      
  def _set_lpm_other(self, v, load=False):
    """
    Setter method for lpm_other, mapped from YANG variable /hw_state/hw_route_info/lpm_other (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lpm_other is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lpm_other() directly.

    YANG Description: lpm other
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-other", rest_name="lpm-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lpm_other must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-other", rest_name="lpm-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lpm_other = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lpm_other(self):
    self.__lpm_other = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-other", rest_name="lpm-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lem_ipv4(self):
    """
    Getter method for lem_ipv4, mapped from YANG variable /hw_state/hw_route_info/lem_ipv4 (uint32)

    YANG Description: lem ipv4
    """
    return self.__lem_ipv4
      
  def _set_lem_ipv4(self, v, load=False):
    """
    Setter method for lem_ipv4, mapped from YANG variable /hw_state/hw_route_info/lem_ipv4 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lem_ipv4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lem_ipv4() directly.

    YANG Description: lem ipv4
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv4", rest_name="lem-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lem_ipv4 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv4", rest_name="lem-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lem_ipv4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lem_ipv4(self):
    self.__lem_ipv4 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv4", rest_name="lem-ipv4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lem_ipv6(self):
    """
    Getter method for lem_ipv6, mapped from YANG variable /hw_state/hw_route_info/lem_ipv6 (uint32)

    YANG Description: lem ipv6
    """
    return self.__lem_ipv6
      
  def _set_lem_ipv6(self, v, load=False):
    """
    Setter method for lem_ipv6, mapped from YANG variable /hw_state/hw_route_info/lem_ipv6 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lem_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lem_ipv6() directly.

    YANG Description: lem ipv6
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv6", rest_name="lem-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lem_ipv6 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv6", rest_name="lem-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lem_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lem_ipv6(self):
    self.__lem_ipv6 = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-ipv6", rest_name="lem-ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lem_other(self):
    """
    Getter method for lem_other, mapped from YANG variable /hw_state/hw_route_info/lem_other (uint32)

    YANG Description: lem other
    """
    return self.__lem_other
      
  def _set_lem_other(self, v, load=False):
    """
    Setter method for lem_other, mapped from YANG variable /hw_state/hw_route_info/lem_other (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lem_other is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lem_other() directly.

    YANG Description: lem other
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-other", rest_name="lem-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lem_other must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-other", rest_name="lem-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lem_other = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lem_other(self):
    self.__lem_other = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-other", rest_name="lem-other", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lpm_total(self):
    """
    Getter method for lpm_total, mapped from YANG variable /hw_state/hw_route_info/lpm_total (uint32)

    YANG Description: lpm total
    """
    return self.__lpm_total
      
  def _set_lpm_total(self, v, load=False):
    """
    Setter method for lpm_total, mapped from YANG variable /hw_state/hw_route_info/lpm_total (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lpm_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lpm_total() directly.

    YANG Description: lpm total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-total", rest_name="lpm-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lpm_total must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-total", rest_name="lpm-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lpm_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lpm_total(self):
    self.__lpm_total = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lpm-total", rest_name="lpm-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)


  def _get_lem_total(self):
    """
    Getter method for lem_total, mapped from YANG variable /hw_state/hw_route_info/lem_total (uint32)

    YANG Description: lem total
    """
    return self.__lem_total
      
  def _set_lem_total(self, v, load=False):
    """
    Setter method for lem_total, mapped from YANG variable /hw_state/hw_route_info/lem_total (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lem_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lem_total() directly.

    YANG Description: lem total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-total", rest_name="lem-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lem_total must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-total", rest_name="lem-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lem_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lem_total(self):
    self.__lem_total = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="lem-total", rest_name="lem-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint32', is_config=False)

  slot = __builtin__.property(_get_slot)
  tower = __builtin__.property(_get_tower)
  lpm_percent = __builtin__.property(_get_lpm_percent)
  lem_percent = __builtin__.property(_get_lem_percent)
  lpm_ipv4 = __builtin__.property(_get_lpm_ipv4)
  lpm_ipv6 = __builtin__.property(_get_lpm_ipv6)
  lpm_other = __builtin__.property(_get_lpm_other)
  lem_ipv4 = __builtin__.property(_get_lem_ipv4)
  lem_ipv6 = __builtin__.property(_get_lem_ipv6)
  lem_other = __builtin__.property(_get_lem_other)
  lpm_total = __builtin__.property(_get_lpm_total)
  lem_total = __builtin__.property(_get_lem_total)


  _pyangbind_elements = {'slot': slot, 'tower': tower, 'lpm_percent': lpm_percent, 'lem_percent': lem_percent, 'lpm_ipv4': lpm_ipv4, 'lpm_ipv6': lpm_ipv6, 'lpm_other': lpm_other, 'lem_ipv4': lem_ipv4, 'lem_ipv6': lem_ipv6, 'lem_other': lem_other, 'lpm_total': lpm_total, 'lem_total': lem_total, }


