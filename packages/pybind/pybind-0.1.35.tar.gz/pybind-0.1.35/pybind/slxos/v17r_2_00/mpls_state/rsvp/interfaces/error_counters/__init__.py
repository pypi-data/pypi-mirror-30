
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class error_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/rsvp/interfaces/error-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: RSVP interface error counters
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__recv_md5_auth_errors','__pkt_with_msgid_drop','__pkt_with_sref_drop','__nackobject_errors','__recv_md5_auth_errors_since_last_clear','__pkt_with_msgid_drop_since_last_clear','__pkt_with_sref_drop_since_last_clear','__nackobject_errors_since_last_clear',)

  _yang_name = 'error-counters'
  _rest_name = 'error-counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__recv_md5_auth_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors", rest_name="recv-md5-auth-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_msgid_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop-since-last-clear", rest_name="pkt-with-msgid-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_sref_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__nackobject_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_msgid_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop", rest_name="pkt-with-msgid-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_sref_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__recv_md5_auth_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors-since-last-clear", rest_name="recv-md5-auth-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__nackobject_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'rsvp', u'interfaces', u'error-counters']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'rsvp', u'interfaces', u'error-counters']

  def _get_recv_md5_auth_errors(self):
    """
    Getter method for recv_md5_auth_errors, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/recv_md5_auth_errors (uint64)

    YANG Description: MD5 authentication errors
    """
    return self.__recv_md5_auth_errors
      
  def _set_recv_md5_auth_errors(self, v, load=False):
    """
    Setter method for recv_md5_auth_errors, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/recv_md5_auth_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_recv_md5_auth_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_recv_md5_auth_errors() directly.

    YANG Description: MD5 authentication errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors", rest_name="recv-md5-auth-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """recv_md5_auth_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors", rest_name="recv-md5-auth-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__recv_md5_auth_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_recv_md5_auth_errors(self):
    self.__recv_md5_auth_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors", rest_name="recv-md5-auth-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_msgid_drop(self):
    """
    Getter method for pkt_with_msgid_drop, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_msgid_drop (uint64)

    YANG Description: Packets with message ID drop
    """
    return self.__pkt_with_msgid_drop
      
  def _set_pkt_with_msgid_drop(self, v, load=False):
    """
    Setter method for pkt_with_msgid_drop, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_msgid_drop (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_msgid_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_msgid_drop() directly.

    YANG Description: Packets with message ID drop
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop", rest_name="pkt-with-msgid-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_msgid_drop must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop", rest_name="pkt-with-msgid-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_msgid_drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_msgid_drop(self):
    self.__pkt_with_msgid_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop", rest_name="pkt-with-msgid-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_sref_drop(self):
    """
    Getter method for pkt_with_sref_drop, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_sref_drop (uint64)

    YANG Description: Packets with summary refresh drop
    """
    return self.__pkt_with_sref_drop
      
  def _set_pkt_with_sref_drop(self, v, load=False):
    """
    Setter method for pkt_with_sref_drop, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_sref_drop (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_sref_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_sref_drop() directly.

    YANG Description: Packets with summary refresh drop
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_sref_drop must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_sref_drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_sref_drop(self):
    self.__pkt_with_sref_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_nackobject_errors(self):
    """
    Getter method for nackobject_errors, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/nackobject_errors (uint64)

    YANG Description: RSVP NACK message errors
    """
    return self.__nackobject_errors
      
  def _set_nackobject_errors(self, v, load=False):
    """
    Setter method for nackobject_errors, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/nackobject_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nackobject_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nackobject_errors() directly.

    YANG Description: RSVP NACK message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nackobject_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__nackobject_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nackobject_errors(self):
    self.__nackobject_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_recv_md5_auth_errors_since_last_clear(self):
    """
    Getter method for recv_md5_auth_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/recv_md5_auth_errors_since_last_clear (uint64)

    YANG Description: MD5 authentication errors since last clear
    """
    return self.__recv_md5_auth_errors_since_last_clear
      
  def _set_recv_md5_auth_errors_since_last_clear(self, v, load=False):
    """
    Setter method for recv_md5_auth_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/recv_md5_auth_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_recv_md5_auth_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_recv_md5_auth_errors_since_last_clear() directly.

    YANG Description: MD5 authentication errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors-since-last-clear", rest_name="recv-md5-auth-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """recv_md5_auth_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors-since-last-clear", rest_name="recv-md5-auth-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__recv_md5_auth_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_recv_md5_auth_errors_since_last_clear(self):
    self.__recv_md5_auth_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="recv-md5-auth-errors-since-last-clear", rest_name="recv-md5-auth-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_msgid_drop_since_last_clear(self):
    """
    Getter method for pkt_with_msgid_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_msgid_drop_since_last_clear (uint64)

    YANG Description: Packets with message ID drop since last clear
    """
    return self.__pkt_with_msgid_drop_since_last_clear
      
  def _set_pkt_with_msgid_drop_since_last_clear(self, v, load=False):
    """
    Setter method for pkt_with_msgid_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_msgid_drop_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_msgid_drop_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_msgid_drop_since_last_clear() directly.

    YANG Description: Packets with message ID drop since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop-since-last-clear", rest_name="pkt-with-msgid-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_msgid_drop_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop-since-last-clear", rest_name="pkt-with-msgid-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_msgid_drop_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_msgid_drop_since_last_clear(self):
    self.__pkt_with_msgid_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msgid-drop-since-last-clear", rest_name="pkt-with-msgid-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_sref_drop_since_last_clear(self):
    """
    Getter method for pkt_with_sref_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_sref_drop_since_last_clear (uint64)

    YANG Description: Packets with summary refresh drop since last clear
    """
    return self.__pkt_with_sref_drop_since_last_clear
      
  def _set_pkt_with_sref_drop_since_last_clear(self, v, load=False):
    """
    Setter method for pkt_with_sref_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/pkt_with_sref_drop_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_sref_drop_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_sref_drop_since_last_clear() directly.

    YANG Description: Packets with summary refresh drop since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_sref_drop_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_sref_drop_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_sref_drop_since_last_clear(self):
    self.__pkt_with_sref_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_nackobject_errors_since_last_clear(self):
    """
    Getter method for nackobject_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/nackobject_errors_since_last_clear (uint64)

    YANG Description: RSVP NACK message errors since last clear
    """
    return self.__nackobject_errors_since_last_clear
      
  def _set_nackobject_errors_since_last_clear(self, v, load=False):
    """
    Setter method for nackobject_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/error_counters/nackobject_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nackobject_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nackobject_errors_since_last_clear() directly.

    YANG Description: RSVP NACK message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nackobject_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__nackobject_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nackobject_errors_since_last_clear(self):
    self.__nackobject_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)

  recv_md5_auth_errors = __builtin__.property(_get_recv_md5_auth_errors)
  pkt_with_msgid_drop = __builtin__.property(_get_pkt_with_msgid_drop)
  pkt_with_sref_drop = __builtin__.property(_get_pkt_with_sref_drop)
  nackobject_errors = __builtin__.property(_get_nackobject_errors)
  recv_md5_auth_errors_since_last_clear = __builtin__.property(_get_recv_md5_auth_errors_since_last_clear)
  pkt_with_msgid_drop_since_last_clear = __builtin__.property(_get_pkt_with_msgid_drop_since_last_clear)
  pkt_with_sref_drop_since_last_clear = __builtin__.property(_get_pkt_with_sref_drop_since_last_clear)
  nackobject_errors_since_last_clear = __builtin__.property(_get_nackobject_errors_since_last_clear)


  _pyangbind_elements = {'recv_md5_auth_errors': recv_md5_auth_errors, 'pkt_with_msgid_drop': pkt_with_msgid_drop, 'pkt_with_sref_drop': pkt_with_sref_drop, 'nackobject_errors': nackobject_errors, 'recv_md5_auth_errors_since_last_clear': recv_md5_auth_errors_since_last_clear, 'pkt_with_msgid_drop_since_last_clear': pkt_with_msgid_drop_since_last_clear, 'pkt_with_sref_drop_since_last_clear': pkt_with_sref_drop_since_last_clear, 'nackobject_errors_since_last_clear': nackobject_errors_since_last_clear, }


