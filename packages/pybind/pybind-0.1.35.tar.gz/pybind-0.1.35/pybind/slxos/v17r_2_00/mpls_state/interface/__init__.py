
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS interface information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_index','__interface_name','__admin_status','__oper_status','__mtu','__bypass_lsp_count','__max_lsp_priority_level','__is_ldp_enabled','__ldp_tunnel_count','__ldp_transit_tunnel_count','__is_gre_port','__admin_group','__admin_group_max','__admin_group_min','__te_metric','__max_bandwidth','__max_resv_bandwidth','__max_resv_bandwidth_percentage','__resv_bandwidth','__advert_unreserved_bandwidth','__under_provisioned_bandwidth',)

  _yang_name = 'interface'
  _rest_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__admin_group_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-max", rest_name="admin-group-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__max_resv_bandwidth_percentage = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth-percentage", rest_name="max-resv-bandwidth-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__advert_unreserved_bandwidth = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="advert-unreserved-bandwidth", rest_name="advert-unreserved-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__admin_group_min = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-min", rest_name="admin-group-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__admin_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_ldp_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ldp-enabled", rest_name="is-ldp-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__oper_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="oper-status", rest_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__max_lsp_priority_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-lsp-priority-level", rest_name="max-lsp-priority-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__max_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bandwidth", rest_name="max-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__admin_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="admin-status", rest_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__bypass_lsp_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bypass-lsp-count", rest_name="bypass-lsp-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__ldp_tunnel_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-tunnel-count", rest_name="ldp-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_gre_port = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-gre-port", rest_name="is-gre-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__max_resv_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth", rest_name="max-resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__resv_bandwidth = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="resv-bandwidth", rest_name="resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__ldp_transit_tunnel_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-transit-tunnel-count", rest_name="ldp-transit-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__under_provisioned_bandwidth = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="under-provisioned-bandwidth", rest_name="under-provisioned-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__interface_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interface-index", rest_name="interface-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'interface']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'interface']

  def _get_interface_index(self):
    """
    Getter method for interface_index, mapped from YANG variable /mpls_state/interface/interface_index (uint32)

    YANG Description: Interface index
    """
    return self.__interface_index
      
  def _set_interface_index(self, v, load=False):
    """
    Setter method for interface_index, mapped from YANG variable /mpls_state/interface/interface_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_index() directly.

    YANG Description: Interface index
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interface-index", rest_name="interface-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interface-index", rest_name="interface-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__interface_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_index(self):
    self.__interface_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="interface-index", rest_name="interface-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /mpls_state/interface/interface_name (string)

    YANG Description: Interface name
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /mpls_state/interface/interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: Interface name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_admin_status(self):
    """
    Getter method for admin_status, mapped from YANG variable /mpls_state/interface/admin_status (boolean)

    YANG Description: Admin status
    """
    return self.__admin_status
      
  def _set_admin_status(self, v, load=False):
    """
    Setter method for admin_status, mapped from YANG variable /mpls_state/interface/admin_status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_status() directly.

    YANG Description: Admin status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="admin-status", rest_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="admin-status", rest_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_status(self):
    self.__admin_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="admin-status", rest_name="admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_oper_status(self):
    """
    Getter method for oper_status, mapped from YANG variable /mpls_state/interface/oper_status (boolean)

    YANG Description: Operational status
    """
    return self.__oper_status
      
  def _set_oper_status(self, v, load=False):
    """
    Setter method for oper_status, mapped from YANG variable /mpls_state/interface/oper_status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_status() directly.

    YANG Description: Operational status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="oper-status", rest_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="oper-status", rest_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_status(self):
    self.__oper_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="oper-status", rest_name="oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /mpls_state/interface/mtu (uint32)

    YANG Description: Interface MTU
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /mpls_state/interface/mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: Interface MTU
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_bypass_lsp_count(self):
    """
    Getter method for bypass_lsp_count, mapped from YANG variable /mpls_state/interface/bypass_lsp_count (uint32)

    YANG Description: Bypass LSP count
    """
    return self.__bypass_lsp_count
      
  def _set_bypass_lsp_count(self, v, load=False):
    """
    Setter method for bypass_lsp_count, mapped from YANG variable /mpls_state/interface/bypass_lsp_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bypass_lsp_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bypass_lsp_count() directly.

    YANG Description: Bypass LSP count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bypass-lsp-count", rest_name="bypass-lsp-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bypass_lsp_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bypass-lsp-count", rest_name="bypass-lsp-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bypass_lsp_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bypass_lsp_count(self):
    self.__bypass_lsp_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bypass-lsp-count", rest_name="bypass-lsp-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_max_lsp_priority_level(self):
    """
    Getter method for max_lsp_priority_level, mapped from YANG variable /mpls_state/interface/max_lsp_priority_level (uint32)

    YANG Description: Maximum LSP priority level
    """
    return self.__max_lsp_priority_level
      
  def _set_max_lsp_priority_level(self, v, load=False):
    """
    Setter method for max_lsp_priority_level, mapped from YANG variable /mpls_state/interface/max_lsp_priority_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_lsp_priority_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_lsp_priority_level() directly.

    YANG Description: Maximum LSP priority level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-lsp-priority-level", rest_name="max-lsp-priority-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_lsp_priority_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-lsp-priority-level", rest_name="max-lsp-priority-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_lsp_priority_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_lsp_priority_level(self):
    self.__max_lsp_priority_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-lsp-priority-level", rest_name="max-lsp-priority-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_is_ldp_enabled(self):
    """
    Getter method for is_ldp_enabled, mapped from YANG variable /mpls_state/interface/is_ldp_enabled (boolean)

    YANG Description: Is LDP enabled on this interface
    """
    return self.__is_ldp_enabled
      
  def _set_is_ldp_enabled(self, v, load=False):
    """
    Setter method for is_ldp_enabled, mapped from YANG variable /mpls_state/interface/is_ldp_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_ldp_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_ldp_enabled() directly.

    YANG Description: Is LDP enabled on this interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-ldp-enabled", rest_name="is-ldp-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_ldp_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ldp-enabled", rest_name="is-ldp-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_ldp_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_ldp_enabled(self):
    self.__is_ldp_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ldp-enabled", rest_name="is-ldp-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_ldp_tunnel_count(self):
    """
    Getter method for ldp_tunnel_count, mapped from YANG variable /mpls_state/interface/ldp_tunnel_count (uint32)

    YANG Description: LDP tunnels starting through this interface
    """
    return self.__ldp_tunnel_count
      
  def _set_ldp_tunnel_count(self, v, load=False):
    """
    Setter method for ldp_tunnel_count, mapped from YANG variable /mpls_state/interface/ldp_tunnel_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_tunnel_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_tunnel_count() directly.

    YANG Description: LDP tunnels starting through this interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-tunnel-count", rest_name="ldp-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_tunnel_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-tunnel-count", rest_name="ldp-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ldp_tunnel_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_tunnel_count(self):
    self.__ldp_tunnel_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-tunnel-count", rest_name="ldp-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_ldp_transit_tunnel_count(self):
    """
    Getter method for ldp_transit_tunnel_count, mapped from YANG variable /mpls_state/interface/ldp_transit_tunnel_count (uint32)

    YANG Description: LDP tunnels tunnels transiting through this interface
    """
    return self.__ldp_transit_tunnel_count
      
  def _set_ldp_transit_tunnel_count(self, v, load=False):
    """
    Setter method for ldp_transit_tunnel_count, mapped from YANG variable /mpls_state/interface/ldp_transit_tunnel_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_transit_tunnel_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_transit_tunnel_count() directly.

    YANG Description: LDP tunnels tunnels transiting through this interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-transit-tunnel-count", rest_name="ldp-transit-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_transit_tunnel_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-transit-tunnel-count", rest_name="ldp-transit-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ldp_transit_tunnel_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_transit_tunnel_count(self):
    self.__ldp_transit_tunnel_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-transit-tunnel-count", rest_name="ldp-transit-tunnel-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_is_gre_port(self):
    """
    Getter method for is_gre_port, mapped from YANG variable /mpls_state/interface/is_gre_port (boolean)

    YANG Description: Is this a GRE tunnel
    """
    return self.__is_gre_port
      
  def _set_is_gre_port(self, v, load=False):
    """
    Setter method for is_gre_port, mapped from YANG variable /mpls_state/interface/is_gre_port (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_gre_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_gre_port() directly.

    YANG Description: Is this a GRE tunnel
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-gre-port", rest_name="is-gre-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_gre_port must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-gre-port", rest_name="is-gre-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_gre_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_gre_port(self):
    self.__is_gre_port = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-gre-port", rest_name="is-gre-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_admin_group(self):
    """
    Getter method for admin_group, mapped from YANG variable /mpls_state/interface/admin_group (uint32)

    YANG Description: Admin group
    """
    return self.__admin_group
      
  def _set_admin_group(self, v, load=False):
    """
    Setter method for admin_group, mapped from YANG variable /mpls_state/interface/admin_group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group() directly.

    YANG Description: Admin group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__admin_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group(self):
    self.__admin_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_admin_group_max(self):
    """
    Getter method for admin_group_max, mapped from YANG variable /mpls_state/interface/admin_group_max (uint8)

    YANG Description: Maximum admin group
    """
    return self.__admin_group_max
      
  def _set_admin_group_max(self, v, load=False):
    """
    Setter method for admin_group_max, mapped from YANG variable /mpls_state/interface/admin_group_max (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group_max() directly.

    YANG Description: Maximum admin group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-max", rest_name="admin-group-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group_max must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-max", rest_name="admin-group-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__admin_group_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group_max(self):
    self.__admin_group_max = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-max", rest_name="admin-group-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_admin_group_min(self):
    """
    Getter method for admin_group_min, mapped from YANG variable /mpls_state/interface/admin_group_min (uint8)

    YANG Description: Minimum admin group
    """
    return self.__admin_group_min
      
  def _set_admin_group_min(self, v, load=False):
    """
    Setter method for admin_group_min, mapped from YANG variable /mpls_state/interface/admin_group_min (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_group_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_group_min() directly.

    YANG Description: Minimum admin group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-min", rest_name="admin-group-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_group_min must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-min", rest_name="admin-group-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__admin_group_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_group_min(self):
    self.__admin_group_min = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="admin-group-min", rest_name="admin-group-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_te_metric(self):
    """
    Getter method for te_metric, mapped from YANG variable /mpls_state/interface/te_metric (uint32)

    YANG Description: TE metric (IGP default used if not set)
    """
    return self.__te_metric
      
  def _set_te_metric(self, v, load=False):
    """
    Setter method for te_metric, mapped from YANG variable /mpls_state/interface/te_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_te_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_te_metric() directly.

    YANG Description: TE metric (IGP default used if not set)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """te_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__te_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_te_metric(self):
    self.__te_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_max_bandwidth(self):
    """
    Getter method for max_bandwidth, mapped from YANG variable /mpls_state/interface/max_bandwidth (uint32)

    YANG Description: Maximum bandwidth
    """
    return self.__max_bandwidth
      
  def _set_max_bandwidth(self, v, load=False):
    """
    Setter method for max_bandwidth, mapped from YANG variable /mpls_state/interface/max_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_bandwidth() directly.

    YANG Description: Maximum bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bandwidth", rest_name="max-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bandwidth", rest_name="max-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_bandwidth(self):
    self.__max_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bandwidth", rest_name="max-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_max_resv_bandwidth(self):
    """
    Getter method for max_resv_bandwidth, mapped from YANG variable /mpls_state/interface/max_resv_bandwidth (uint32)

    YANG Description: Maximum reservable bandwidth
    """
    return self.__max_resv_bandwidth
      
  def _set_max_resv_bandwidth(self, v, load=False):
    """
    Setter method for max_resv_bandwidth, mapped from YANG variable /mpls_state/interface/max_resv_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_resv_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_resv_bandwidth() directly.

    YANG Description: Maximum reservable bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth", rest_name="max-resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_resv_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth", rest_name="max-resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_resv_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_resv_bandwidth(self):
    self.__max_resv_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth", rest_name="max-resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_max_resv_bandwidth_percentage(self):
    """
    Getter method for max_resv_bandwidth_percentage, mapped from YANG variable /mpls_state/interface/max_resv_bandwidth_percentage (uint32)

    YANG Description: Max reservable bandwidth percentage
    """
    return self.__max_resv_bandwidth_percentage
      
  def _set_max_resv_bandwidth_percentage(self, v, load=False):
    """
    Setter method for max_resv_bandwidth_percentage, mapped from YANG variable /mpls_state/interface/max_resv_bandwidth_percentage (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_resv_bandwidth_percentage is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_resv_bandwidth_percentage() directly.

    YANG Description: Max reservable bandwidth percentage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth-percentage", rest_name="max-resv-bandwidth-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_resv_bandwidth_percentage must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth-percentage", rest_name="max-resv-bandwidth-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_resv_bandwidth_percentage = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_resv_bandwidth_percentage(self):
    self.__max_resv_bandwidth_percentage = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-resv-bandwidth-percentage", rest_name="max-resv-bandwidth-percentage", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_resv_bandwidth(self):
    """
    Getter method for resv_bandwidth, mapped from YANG variable /mpls_state/interface/resv_bandwidth (uint32)

    YANG Description: Reservable bandwidth on different priority levels
    """
    return self.__resv_bandwidth
      
  def _set_resv_bandwidth(self, v, load=False):
    """
    Setter method for resv_bandwidth, mapped from YANG variable /mpls_state/interface/resv_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_bandwidth() directly.

    YANG Description: Reservable bandwidth on different priority levels
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="resv-bandwidth", rest_name="resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="resv-bandwidth", rest_name="resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__resv_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_bandwidth(self):
    self.__resv_bandwidth = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="resv-bandwidth", rest_name="resv-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_advert_unreserved_bandwidth(self):
    """
    Getter method for advert_unreserved_bandwidth, mapped from YANG variable /mpls_state/interface/advert_unreserved_bandwidth (uint32)

    YANG Description: Advertised unreserved bandwidth on different priority levels
    """
    return self.__advert_unreserved_bandwidth
      
  def _set_advert_unreserved_bandwidth(self, v, load=False):
    """
    Setter method for advert_unreserved_bandwidth, mapped from YANG variable /mpls_state/interface/advert_unreserved_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_advert_unreserved_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_advert_unreserved_bandwidth() directly.

    YANG Description: Advertised unreserved bandwidth on different priority levels
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="advert-unreserved-bandwidth", rest_name="advert-unreserved-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """advert_unreserved_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="advert-unreserved-bandwidth", rest_name="advert-unreserved-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__advert_unreserved_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_advert_unreserved_bandwidth(self):
    self.__advert_unreserved_bandwidth = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="advert-unreserved-bandwidth", rest_name="advert-unreserved-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_under_provisioned_bandwidth(self):
    """
    Getter method for under_provisioned_bandwidth, mapped from YANG variable /mpls_state/interface/under_provisioned_bandwidth (uint32)

    YANG Description: Under provisioned bandwidth (subject to soft preemption) on different priority levels
    """
    return self.__under_provisioned_bandwidth
      
  def _set_under_provisioned_bandwidth(self, v, load=False):
    """
    Setter method for under_provisioned_bandwidth, mapped from YANG variable /mpls_state/interface/under_provisioned_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_under_provisioned_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_under_provisioned_bandwidth() directly.

    YANG Description: Under provisioned bandwidth (subject to soft preemption) on different priority levels
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="under-provisioned-bandwidth", rest_name="under-provisioned-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """under_provisioned_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="under-provisioned-bandwidth", rest_name="under-provisioned-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__under_provisioned_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_under_provisioned_bandwidth(self):
    self.__under_provisioned_bandwidth = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="under-provisioned-bandwidth", rest_name="under-provisioned-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

  interface_index = __builtin__.property(_get_interface_index)
  interface_name = __builtin__.property(_get_interface_name)
  admin_status = __builtin__.property(_get_admin_status)
  oper_status = __builtin__.property(_get_oper_status)
  mtu = __builtin__.property(_get_mtu)
  bypass_lsp_count = __builtin__.property(_get_bypass_lsp_count)
  max_lsp_priority_level = __builtin__.property(_get_max_lsp_priority_level)
  is_ldp_enabled = __builtin__.property(_get_is_ldp_enabled)
  ldp_tunnel_count = __builtin__.property(_get_ldp_tunnel_count)
  ldp_transit_tunnel_count = __builtin__.property(_get_ldp_transit_tunnel_count)
  is_gre_port = __builtin__.property(_get_is_gre_port)
  admin_group = __builtin__.property(_get_admin_group)
  admin_group_max = __builtin__.property(_get_admin_group_max)
  admin_group_min = __builtin__.property(_get_admin_group_min)
  te_metric = __builtin__.property(_get_te_metric)
  max_bandwidth = __builtin__.property(_get_max_bandwidth)
  max_resv_bandwidth = __builtin__.property(_get_max_resv_bandwidth)
  max_resv_bandwidth_percentage = __builtin__.property(_get_max_resv_bandwidth_percentage)
  resv_bandwidth = __builtin__.property(_get_resv_bandwidth)
  advert_unreserved_bandwidth = __builtin__.property(_get_advert_unreserved_bandwidth)
  under_provisioned_bandwidth = __builtin__.property(_get_under_provisioned_bandwidth)


  _pyangbind_elements = {'interface_index': interface_index, 'interface_name': interface_name, 'admin_status': admin_status, 'oper_status': oper_status, 'mtu': mtu, 'bypass_lsp_count': bypass_lsp_count, 'max_lsp_priority_level': max_lsp_priority_level, 'is_ldp_enabled': is_ldp_enabled, 'ldp_tunnel_count': ldp_tunnel_count, 'ldp_transit_tunnel_count': ldp_transit_tunnel_count, 'is_gre_port': is_gre_port, 'admin_group': admin_group, 'admin_group_max': admin_group_max, 'admin_group_min': admin_group_min, 'te_metric': te_metric, 'max_bandwidth': max_bandwidth, 'max_resv_bandwidth': max_resv_bandwidth, 'max_resv_bandwidth_percentage': max_resv_bandwidth_percentage, 'resv_bandwidth': resv_bandwidth, 'advert_unreserved_bandwidth': advert_unreserved_bandwidth, 'under_provisioned_bandwidth': under_provisioned_bandwidth, }


