
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import vc_downstream
import vc_upstream
class ldp_fec_vc(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/ldp/ldp-fec-vc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: LDP VC FEC information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__vc_id','__peer_id','__peer_lblspc','__state','__peer_vc_type','__ingress','__egress','__vc_feccb','__vc_idx','__vc_fec_type','__prefix_pend_notif','__prefix_um_dist_done','__vc_type','__vc_grp_id','__vc_local_mtu','__vc_remote_mtu','__vc_mtu_enforcement','__vc_agi','__vc_local_flow_label_tx','__vc_local_flow_label_rx','__vc_remote_flow_label_tx','__vc_remote_flow_label_rx','__vc_control_word_preferred','__vc_control_word_in_use','__vc_downstream','__vc_upstream',)

  _yang_name = 'ldp-fec-vc'
  _rest_name = 'ldp-fec-vc'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ingress = YANGDynClass(base=unicode, is_leaf=True, yang_name="ingress", rest_name="ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_idx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-idx", rest_name="vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_feccb = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-feccb", rest_name="vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__egress = YANGDynClass(base=unicode, is_leaf=True, yang_name="egress", rest_name="egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_remote_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_local_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_remote_flow_label_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-rx", rest_name="vc-remote-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__state = YANGDynClass(base=unicode, is_leaf=True, yang_name="state", rest_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_remote_flow_label_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-tx", rest_name="vc-remote-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_control_word_in_use = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-in-use", rest_name="vc-control-word-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__peer_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="peer-id", rest_name="peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__vc_upstream = YANGDynClass(base=YANGListType("mapping_index",vc_upstream.vc_upstream, yang_name="vc-upstream", rest_name="vc-upstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-upstream", rest_name="vc-upstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__prefix_um_dist_done = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-um-dist-done", rest_name="prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_agi = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-agi", rest_name="vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_grp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-grp-id", rest_name="vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_mtu_enforcement = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-mtu-enforcement", rest_name="vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__peer_lblspc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-lblspc", rest_name="peer-lblspc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__peer_vc_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-vc-type", rest_name="peer-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_downstream = YANGDynClass(base=YANGListType("mapping_index",vc_downstream.vc_downstream, yang_name="vc-downstream", rest_name="vc-downstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-downstream", rest_name="vc-downstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__prefix_pend_notif = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-pend-notif", rest_name="prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_local_flow_label_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-rx", rest_name="vc-local-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_local_flow_label_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-tx", rest_name="vc-local-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_control_word_preferred = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-preferred", rest_name="vc-control-word-preferred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_fec_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-fec-type", rest_name="vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'ldp', u'ldp-fec-vc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'ldp', u'ldp-fec-vc']

  def _get_vc_id(self):
    """
    Getter method for vc_id, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_id (uint32)

    YANG Description: The VC ID associated with the VC FEC
    """
    return self.__vc_id
      
  def _set_vc_id(self, v, load=False):
    """
    Setter method for vc_id, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_id() directly.

    YANG Description: The VC ID associated with the VC FEC
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_id(self):
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_peer_id(self):
    """
    Getter method for peer_id, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/peer_id (inet:ipv4-address)

    YANG Description: peer id
    """
    return self.__peer_id
      
  def _set_peer_id(self, v, load=False):
    """
    Setter method for peer_id, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/peer_id (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_id() directly.

    YANG Description: peer id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="peer-id", rest_name="peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_id must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="peer-id", rest_name="peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__peer_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_id(self):
    self.__peer_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="peer-id", rest_name="peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_peer_lblspc(self):
    """
    Getter method for peer_lblspc, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/peer_lblspc (uint32)

    YANG Description: peer labelspace
    """
    return self.__peer_lblspc
      
  def _set_peer_lblspc(self, v, load=False):
    """
    Setter method for peer_lblspc, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/peer_lblspc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_lblspc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_lblspc() directly.

    YANG Description: peer labelspace
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-lblspc", rest_name="peer-lblspc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_lblspc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-lblspc", rest_name="peer-lblspc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_lblspc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_lblspc(self):
    self.__peer_lblspc = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-lblspc", rest_name="peer-lblspc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_state(self):
    """
    Getter method for state, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/state (string)

    YANG Description: State of the FEC which indicates the FEC advertised to any LDP session (state equal to 'current'). When it has no session, it is either called 'cur_no_sess' (currently no session) for local FECs or is marked 'retained' for non-local FECs
    """
    return self.__state
      
  def _set_state(self, v, load=False):
    """
    Setter method for state, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_state() directly.

    YANG Description: State of the FEC which indicates the FEC advertised to any LDP session (state equal to 'current'). When it has no session, it is either called 'cur_no_sess' (currently no session) for local FECs or is marked 'retained' for non-local FECs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="state", rest_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="state", rest_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_state(self):
    self.__state = YANGDynClass(base=unicode, is_leaf=True, yang_name="state", rest_name="state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_peer_vc_type(self):
    """
    Getter method for peer_vc_type, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/peer_vc_type (uint32)

    YANG Description: peer vc type
    """
    return self.__peer_vc_type
      
  def _set_peer_vc_type(self, v, load=False):
    """
    Setter method for peer_vc_type, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/peer_vc_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_vc_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_vc_type() directly.

    YANG Description: peer vc type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-vc-type", rest_name="peer-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_vc_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-vc-type", rest_name="peer-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_vc_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_vc_type(self):
    self.__peer_vc_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-vc-type", rest_name="peer-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_ingress(self):
    """
    Getter method for ingress, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/ingress (string)

    YANG Description: Whether the FEC is an ingress FEC
    """
    return self.__ingress
      
  def _set_ingress(self, v, load=False):
    """
    Setter method for ingress, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/ingress (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress() directly.

    YANG Description: Whether the FEC is an ingress FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ingress", rest_name="ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ingress", rest_name="ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__ingress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress(self):
    self.__ingress = YANGDynClass(base=unicode, is_leaf=True, yang_name="ingress", rest_name="ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_egress(self):
    """
    Getter method for egress, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/egress (string)

    YANG Description: Whether the FEC is an egress FEC
    """
    return self.__egress
      
  def _set_egress(self, v, load=False):
    """
    Setter method for egress, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/egress (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_egress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_egress() directly.

    YANG Description: Whether the FEC is an egress FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="egress", rest_name="egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """egress must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="egress", rest_name="egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__egress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_egress(self):
    self.__egress = YANGDynClass(base=unicode, is_leaf=True, yang_name="egress", rest_name="egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_vc_feccb(self):
    """
    Getter method for vc_feccb, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_feccb (uint32)

    YANG Description: Memory address of the FEC CB
    """
    return self.__vc_feccb
      
  def _set_vc_feccb(self, v, load=False):
    """
    Setter method for vc_feccb, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_feccb (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_feccb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_feccb() directly.

    YANG Description: Memory address of the FEC CB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-feccb", rest_name="vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_feccb must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-feccb", rest_name="vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_feccb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_feccb(self):
    self.__vc_feccb = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-feccb", rest_name="vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_idx(self):
    """
    Getter method for vc_idx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_idx (uint32)

    YANG Description: A monotonically increasing number assigned to each FEC in the LDP internal FEC tree
    """
    return self.__vc_idx
      
  def _set_vc_idx(self, v, load=False):
    """
    Setter method for vc_idx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_idx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_idx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_idx() directly.

    YANG Description: A monotonically increasing number assigned to each FEC in the LDP internal FEC tree
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-idx", rest_name="vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_idx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-idx", rest_name="vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_idx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_idx(self):
    self.__vc_idx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-idx", rest_name="vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_fec_type(self):
    """
    Getter method for vc_fec_type, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_fec_type (uint32)

    YANG Description: FEC type For VC FEC this value can be 128 or 129
    """
    return self.__vc_fec_type
      
  def _set_vc_fec_type(self, v, load=False):
    """
    Setter method for vc_fec_type, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_fec_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_fec_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_fec_type() directly.

    YANG Description: FEC type For VC FEC this value can be 128 or 129
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-fec-type", rest_name="vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_fec_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-fec-type", rest_name="vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_fec_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_fec_type(self):
    self.__vc_fec_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-fec-type", rest_name="vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_prefix_pend_notif(self):
    """
    Getter method for prefix_pend_notif, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/prefix_pend_notif (string)

    YANG Description: Any notification pending on this FEC
    """
    return self.__prefix_pend_notif
      
  def _set_prefix_pend_notif(self, v, load=False):
    """
    Setter method for prefix_pend_notif, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/prefix_pend_notif (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_pend_notif is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_pend_notif() directly.

    YANG Description: Any notification pending on this FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="prefix-pend-notif", rest_name="prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_pend_notif must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-pend-notif", rest_name="prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__prefix_pend_notif = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_pend_notif(self):
    self.__prefix_pend_notif = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-pend-notif", rest_name="prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_prefix_um_dist_done(self):
    """
    Getter method for prefix_um_dist_done, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/prefix_um_dist_done (string)

    YANG Description: Specifies when Upstream Mapping Distribution is complete
    """
    return self.__prefix_um_dist_done
      
  def _set_prefix_um_dist_done(self, v, load=False):
    """
    Setter method for prefix_um_dist_done, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/prefix_um_dist_done (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_um_dist_done is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_um_dist_done() directly.

    YANG Description: Specifies when Upstream Mapping Distribution is complete
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="prefix-um-dist-done", rest_name="prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_um_dist_done must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-um-dist-done", rest_name="prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__prefix_um_dist_done = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_um_dist_done(self):
    self.__prefix_um_dist_done = YANGDynClass(base=unicode, is_leaf=True, yang_name="prefix-um-dist-done", rest_name="prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_vc_type(self):
    """
    Getter method for vc_type, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_type (uint32)

    YANG Description: The VC type associated with the VC FEC
    """
    return self.__vc_type
      
  def _set_vc_type(self, v, load=False):
    """
    Setter method for vc_type, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_type() directly.

    YANG Description: The VC type associated with the VC FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_type(self):
    self.__vc_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_grp_id(self):
    """
    Getter method for vc_grp_id, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_grp_id (uint32)

    YANG Description: The Group ID associated with the VC FEC
    """
    return self.__vc_grp_id
      
  def _set_vc_grp_id(self, v, load=False):
    """
    Setter method for vc_grp_id, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_grp_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_grp_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_grp_id() directly.

    YANG Description: The Group ID associated with the VC FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-grp-id", rest_name="vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_grp_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-grp-id", rest_name="vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_grp_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_grp_id(self):
    self.__vc_grp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-grp-id", rest_name="vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_local_mtu(self):
    """
    Getter method for vc_local_mtu, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_local_mtu (uint32)

    YANG Description: The local MTU for a specified VC FEC
    """
    return self.__vc_local_mtu
      
  def _set_vc_local_mtu(self, v, load=False):
    """
    Setter method for vc_local_mtu, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_local_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_local_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_local_mtu() directly.

    YANG Description: The local MTU for a specified VC FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_local_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_local_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_local_mtu(self):
    self.__vc_local_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_remote_mtu(self):
    """
    Getter method for vc_remote_mtu, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_remote_mtu (uint32)

    YANG Description: The remote MTU for a specified VC FEC
    """
    return self.__vc_remote_mtu
      
  def _set_vc_remote_mtu(self, v, load=False):
    """
    Setter method for vc_remote_mtu, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_remote_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_remote_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_remote_mtu() directly.

    YANG Description: The remote MTU for a specified VC FEC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_remote_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_remote_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_remote_mtu(self):
    self.__vc_remote_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_mtu_enforcement(self):
    """
    Getter method for vc_mtu_enforcement, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_mtu_enforcement (uint32)

    YANG Description: The user configured MTU enforcement setting that displays Enabled when a specified VC ID is up
    """
    return self.__vc_mtu_enforcement
      
  def _set_vc_mtu_enforcement(self, v, load=False):
    """
    Setter method for vc_mtu_enforcement, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_mtu_enforcement (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_mtu_enforcement is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_mtu_enforcement() directly.

    YANG Description: The user configured MTU enforcement setting that displays Enabled when a specified VC ID is up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-mtu-enforcement", rest_name="vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_mtu_enforcement must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-mtu-enforcement", rest_name="vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_mtu_enforcement = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_mtu_enforcement(self):
    self.__vc_mtu_enforcement = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-mtu-enforcement", rest_name="vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_agi(self):
    """
    Getter method for vc_agi, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_agi (string)

    YANG Description: vc agi
    """
    return self.__vc_agi
      
  def _set_vc_agi(self, v, load=False):
    """
    Setter method for vc_agi, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_agi (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_agi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_agi() directly.

    YANG Description: vc agi
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vc-agi", rest_name="vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_agi must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-agi", rest_name="vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__vc_agi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_agi(self):
    self.__vc_agi = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-agi", rest_name="vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_vc_local_flow_label_tx(self):
    """
    Getter method for vc_local_flow_label_tx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_local_flow_label_tx (uint32)

    YANG Description: Transmitting the flow label is preferred
    """
    return self.__vc_local_flow_label_tx
      
  def _set_vc_local_flow_label_tx(self, v, load=False):
    """
    Setter method for vc_local_flow_label_tx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_local_flow_label_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_local_flow_label_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_local_flow_label_tx() directly.

    YANG Description: Transmitting the flow label is preferred
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-tx", rest_name="vc-local-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_local_flow_label_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-tx", rest_name="vc-local-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_local_flow_label_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_local_flow_label_tx(self):
    self.__vc_local_flow_label_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-tx", rest_name="vc-local-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_local_flow_label_rx(self):
    """
    Getter method for vc_local_flow_label_rx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_local_flow_label_rx (uint32)

    YANG Description: Receiving the flow label is preferred
    """
    return self.__vc_local_flow_label_rx
      
  def _set_vc_local_flow_label_rx(self, v, load=False):
    """
    Setter method for vc_local_flow_label_rx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_local_flow_label_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_local_flow_label_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_local_flow_label_rx() directly.

    YANG Description: Receiving the flow label is preferred
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-rx", rest_name="vc-local-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_local_flow_label_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-rx", rest_name="vc-local-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_local_flow_label_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_local_flow_label_rx(self):
    self.__vc_local_flow_label_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-flow-label-rx", rest_name="vc-local-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_remote_flow_label_tx(self):
    """
    Getter method for vc_remote_flow_label_tx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_remote_flow_label_tx (uint32)

    YANG Description: Transmitting the flow label is preferred
    """
    return self.__vc_remote_flow_label_tx
      
  def _set_vc_remote_flow_label_tx(self, v, load=False):
    """
    Setter method for vc_remote_flow_label_tx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_remote_flow_label_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_remote_flow_label_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_remote_flow_label_tx() directly.

    YANG Description: Transmitting the flow label is preferred
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-tx", rest_name="vc-remote-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_remote_flow_label_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-tx", rest_name="vc-remote-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_remote_flow_label_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_remote_flow_label_tx(self):
    self.__vc_remote_flow_label_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-tx", rest_name="vc-remote-flow-label-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_remote_flow_label_rx(self):
    """
    Getter method for vc_remote_flow_label_rx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_remote_flow_label_rx (uint32)

    YANG Description: Receiving the flow label is preferred
    """
    return self.__vc_remote_flow_label_rx
      
  def _set_vc_remote_flow_label_rx(self, v, load=False):
    """
    Setter method for vc_remote_flow_label_rx, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_remote_flow_label_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_remote_flow_label_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_remote_flow_label_rx() directly.

    YANG Description: Receiving the flow label is preferred
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-rx", rest_name="vc-remote-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_remote_flow_label_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-rx", rest_name="vc-remote-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_remote_flow_label_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_remote_flow_label_rx(self):
    self.__vc_remote_flow_label_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-flow-label-rx", rest_name="vc-remote-flow-label-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_control_word_preferred(self):
    """
    Getter method for vc_control_word_preferred, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_control_word_preferred (uint32)

    YANG Description: Control word is preferred
    """
    return self.__vc_control_word_preferred
      
  def _set_vc_control_word_preferred(self, v, load=False):
    """
    Setter method for vc_control_word_preferred, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_control_word_preferred (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_control_word_preferred is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_control_word_preferred() directly.

    YANG Description: Control word is preferred
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-preferred", rest_name="vc-control-word-preferred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_control_word_preferred must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-preferred", rest_name="vc-control-word-preferred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_control_word_preferred = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_control_word_preferred(self):
    self.__vc_control_word_preferred = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-preferred", rest_name="vc-control-word-preferred", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_control_word_in_use(self):
    """
    Getter method for vc_control_word_in_use, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_control_word_in_use (uint32)

    YANG Description: Control word is in use
    """
    return self.__vc_control_word_in_use
      
  def _set_vc_control_word_in_use(self, v, load=False):
    """
    Setter method for vc_control_word_in_use, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_control_word_in_use (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_control_word_in_use is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_control_word_in_use() directly.

    YANG Description: Control word is in use
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-in-use", rest_name="vc-control-word-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_control_word_in_use must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-in-use", rest_name="vc-control-word-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_control_word_in_use = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_control_word_in_use(self):
    self.__vc_control_word_in_use = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-control-word-in-use", rest_name="vc-control-word-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_downstream(self):
    """
    Getter method for vc_downstream, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_downstream (list)

    YANG Description: LDP VC fec for downstream mapping
    """
    return self.__vc_downstream
      
  def _set_vc_downstream(self, v, load=False):
    """
    Setter method for vc_downstream, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_downstream (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_downstream is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_downstream() directly.

    YANG Description: LDP VC fec for downstream mapping
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("mapping_index",vc_downstream.vc_downstream, yang_name="vc-downstream", rest_name="vc-downstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-downstream", rest_name="vc-downstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_downstream must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mapping_index",vc_downstream.vc_downstream, yang_name="vc-downstream", rest_name="vc-downstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-downstream", rest_name="vc-downstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__vc_downstream = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_downstream(self):
    self.__vc_downstream = YANGDynClass(base=YANGListType("mapping_index",vc_downstream.vc_downstream, yang_name="vc-downstream", rest_name="vc-downstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-downstream", rest_name="vc-downstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-downstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_vc_upstream(self):
    """
    Getter method for vc_upstream, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_upstream (list)

    YANG Description: LDP VC fec for upstream mapping
    """
    return self.__vc_upstream
      
  def _set_vc_upstream(self, v, load=False):
    """
    Setter method for vc_upstream, mapped from YANG variable /mpls_state/ldp/ldp_fec_vc/vc_upstream (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_upstream is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_upstream() directly.

    YANG Description: LDP VC fec for upstream mapping
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("mapping_index",vc_upstream.vc_upstream, yang_name="vc-upstream", rest_name="vc-upstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-upstream", rest_name="vc-upstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_upstream must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mapping_index",vc_upstream.vc_upstream, yang_name="vc-upstream", rest_name="vc-upstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-upstream", rest_name="vc-upstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__vc_upstream = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_upstream(self):
    self.__vc_upstream = YANGDynClass(base=YANGListType("mapping_index",vc_upstream.vc_upstream, yang_name="vc-upstream", rest_name="vc-upstream", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mapping-index', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-upstream", rest_name="vc-upstream", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-vc-fec-upstream', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  vc_id = __builtin__.property(_get_vc_id)
  peer_id = __builtin__.property(_get_peer_id)
  peer_lblspc = __builtin__.property(_get_peer_lblspc)
  state = __builtin__.property(_get_state)
  peer_vc_type = __builtin__.property(_get_peer_vc_type)
  ingress = __builtin__.property(_get_ingress)
  egress = __builtin__.property(_get_egress)
  vc_feccb = __builtin__.property(_get_vc_feccb)
  vc_idx = __builtin__.property(_get_vc_idx)
  vc_fec_type = __builtin__.property(_get_vc_fec_type)
  prefix_pend_notif = __builtin__.property(_get_prefix_pend_notif)
  prefix_um_dist_done = __builtin__.property(_get_prefix_um_dist_done)
  vc_type = __builtin__.property(_get_vc_type)
  vc_grp_id = __builtin__.property(_get_vc_grp_id)
  vc_local_mtu = __builtin__.property(_get_vc_local_mtu)
  vc_remote_mtu = __builtin__.property(_get_vc_remote_mtu)
  vc_mtu_enforcement = __builtin__.property(_get_vc_mtu_enforcement)
  vc_agi = __builtin__.property(_get_vc_agi)
  vc_local_flow_label_tx = __builtin__.property(_get_vc_local_flow_label_tx)
  vc_local_flow_label_rx = __builtin__.property(_get_vc_local_flow_label_rx)
  vc_remote_flow_label_tx = __builtin__.property(_get_vc_remote_flow_label_tx)
  vc_remote_flow_label_rx = __builtin__.property(_get_vc_remote_flow_label_rx)
  vc_control_word_preferred = __builtin__.property(_get_vc_control_word_preferred)
  vc_control_word_in_use = __builtin__.property(_get_vc_control_word_in_use)
  vc_downstream = __builtin__.property(_get_vc_downstream)
  vc_upstream = __builtin__.property(_get_vc_upstream)


  _pyangbind_elements = {'vc_id': vc_id, 'peer_id': peer_id, 'peer_lblspc': peer_lblspc, 'state': state, 'peer_vc_type': peer_vc_type, 'ingress': ingress, 'egress': egress, 'vc_feccb': vc_feccb, 'vc_idx': vc_idx, 'vc_fec_type': vc_fec_type, 'prefix_pend_notif': prefix_pend_notif, 'prefix_um_dist_done': prefix_um_dist_done, 'vc_type': vc_type, 'vc_grp_id': vc_grp_id, 'vc_local_mtu': vc_local_mtu, 'vc_remote_mtu': vc_remote_mtu, 'vc_mtu_enforcement': vc_mtu_enforcement, 'vc_agi': vc_agi, 'vc_local_flow_label_tx': vc_local_flow_label_tx, 'vc_local_flow_label_rx': vc_local_flow_label_rx, 'vc_remote_flow_label_tx': vc_remote_flow_label_tx, 'vc_remote_flow_label_rx': vc_remote_flow_label_rx, 'vc_control_word_preferred': vc_control_word_preferred, 'vc_control_word_in_use': vc_control_word_in_use, 'vc_downstream': vc_downstream, 'vc_upstream': vc_upstream, }


