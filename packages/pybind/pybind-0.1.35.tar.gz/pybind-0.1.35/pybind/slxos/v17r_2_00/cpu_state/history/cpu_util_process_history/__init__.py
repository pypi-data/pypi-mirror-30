
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class cpu_util_process_history(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-RAS-operational - based on the path /cpu-state/history/cpu-util-process-history. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  CPU utilization histogram per process
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cpu_process_id','__cpu_process_name','__cpu_util_current','__cpu_util_1m','__cpu_util_5m','__cpu_util_15m','__cpu_util_1h','__cpu_util_5h','__cpu_util_24h','__cpu_util_72h',)

  _yang_name = 'cpu-util-process-history'
  _rest_name = 'cpu-util-process-history'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cpu_util_1m = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1m", rest_name="cpu-util-1m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1h", rest_name="cpu-util-1h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_process_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-name", rest_name="cpu-process-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)
    self.__cpu_util_72h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72h", rest_name="cpu-util-72h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_15m = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15m", rest_name="cpu-util-15m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5h", rest_name="cpu-util-5h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5m = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5m", rest_name="cpu-util-5m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_24h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24h", rest_name="cpu-util-24h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cpu-state', u'history', u'cpu-util-process-history']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cpu-state', u'history', u'cpu-util-process-history']

  def _get_cpu_process_id(self):
    """
    Getter method for cpu_process_id, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_process_id (uint32)

    YANG Description: Process ID
    """
    return self.__cpu_process_id
      
  def _set_cpu_process_id(self, v, load=False):
    """
    Setter method for cpu_process_id, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_process_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_id() directly.

    YANG Description: Process ID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)""",
        })

    self.__cpu_process_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_id(self):
    self.__cpu_process_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)


  def _get_cpu_process_name(self):
    """
    Getter method for cpu_process_name, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_process_name (string)

    YANG Description: Process name
    """
    return self.__cpu_process_name
      
  def _set_cpu_process_name(self, v, load=False):
    """
    Setter method for cpu_process_name, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_process_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_name() directly.

    YANG Description: Process name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-name", rest_name="cpu-process-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-name", rest_name="cpu-process-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_name(self):
    self.__cpu_process_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-name", rest_name="cpu-process-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_util_current(self):
    """
    Getter method for cpu_util_current, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_current (decimal64)

    YANG Description: Current CPU utilization of the process
    """
    return self.__cpu_util_current
      
  def _set_cpu_util_current(self, v, load=False):
    """
    Setter method for cpu_util_current, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_current (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_current is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_current() directly.

    YANG Description: Current CPU utilization of the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_current must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_current = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_current(self):
    self.__cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1m(self):
    """
    Getter method for cpu_util_1m, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_1m (decimal64)

    YANG Description: CPU utilization of the process in the last 1 minute
    """
    return self.__cpu_util_1m
      
  def _set_cpu_util_1m(self, v, load=False):
    """
    Setter method for cpu_util_1m, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_1m (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1m is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1m() directly.

    YANG Description: CPU utilization of the process in the last 1 minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1m", rest_name="cpu-util-1m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1m must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1m", rest_name="cpu-util-1m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1m = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1m(self):
    self.__cpu_util_1m = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1m", rest_name="cpu-util-1m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5m(self):
    """
    Getter method for cpu_util_5m, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_5m (decimal64)

    YANG Description: CPU utilization of the process in the last 5 minute
    """
    return self.__cpu_util_5m
      
  def _set_cpu_util_5m(self, v, load=False):
    """
    Setter method for cpu_util_5m, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_5m (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5m is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5m() directly.

    YANG Description: CPU utilization of the process in the last 5 minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5m", rest_name="cpu-util-5m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5m must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5m", rest_name="cpu-util-5m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5m = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5m(self):
    self.__cpu_util_5m = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5m", rest_name="cpu-util-5m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_15m(self):
    """
    Getter method for cpu_util_15m, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_15m (decimal64)

    YANG Description: CPU utilization of the process in the last 15 minute
    """
    return self.__cpu_util_15m
      
  def _set_cpu_util_15m(self, v, load=False):
    """
    Setter method for cpu_util_15m, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_15m (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_15m is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_15m() directly.

    YANG Description: CPU utilization of the process in the last 15 minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15m", rest_name="cpu-util-15m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_15m must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15m", rest_name="cpu-util-15m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_15m = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_15m(self):
    self.__cpu_util_15m = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15m", rest_name="cpu-util-15m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1h(self):
    """
    Getter method for cpu_util_1h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_1h (decimal64)

    YANG Description: CPU utilization of the process in the last 1 hour
    """
    return self.__cpu_util_1h
      
  def _set_cpu_util_1h(self, v, load=False):
    """
    Setter method for cpu_util_1h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_1h (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1h is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1h() directly.

    YANG Description: CPU utilization of the process in the last 1 hour
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1h", rest_name="cpu-util-1h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1h must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1h", rest_name="cpu-util-1h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1h = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1h(self):
    self.__cpu_util_1h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1h", rest_name="cpu-util-1h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5h(self):
    """
    Getter method for cpu_util_5h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_5h (decimal64)

    YANG Description: CPU utilization of the process in the last 1 hour
    """
    return self.__cpu_util_5h
      
  def _set_cpu_util_5h(self, v, load=False):
    """
    Setter method for cpu_util_5h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_5h (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5h is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5h() directly.

    YANG Description: CPU utilization of the process in the last 1 hour
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5h", rest_name="cpu-util-5h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5h must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5h", rest_name="cpu-util-5h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5h = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5h(self):
    self.__cpu_util_5h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5h", rest_name="cpu-util-5h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_24h(self):
    """
    Getter method for cpu_util_24h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_24h (decimal64)

    YANG Description: CPU utilization of the process in the last 24 hour
    """
    return self.__cpu_util_24h
      
  def _set_cpu_util_24h(self, v, load=False):
    """
    Setter method for cpu_util_24h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_24h (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_24h is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_24h() directly.

    YANG Description: CPU utilization of the process in the last 24 hour
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24h", rest_name="cpu-util-24h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_24h must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24h", rest_name="cpu-util-24h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_24h = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_24h(self):
    self.__cpu_util_24h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24h", rest_name="cpu-util-24h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_72h(self):
    """
    Getter method for cpu_util_72h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_72h (decimal64)

    YANG Description: CPU utilization of the process in the last 72 hour
    """
    return self.__cpu_util_72h
      
  def _set_cpu_util_72h(self, v, load=False):
    """
    Setter method for cpu_util_72h, mapped from YANG variable /cpu_state/history/cpu_util_process_history/cpu_util_72h (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_72h is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_72h() directly.

    YANG Description: CPU utilization of the process in the last 72 hour
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72h", rest_name="cpu-util-72h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_72h must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72h", rest_name="cpu-util-72h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_72h = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_72h(self):
    self.__cpu_util_72h = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72h", rest_name="cpu-util-72h", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

  cpu_process_id = __builtin__.property(_get_cpu_process_id)
  cpu_process_name = __builtin__.property(_get_cpu_process_name)
  cpu_util_current = __builtin__.property(_get_cpu_util_current)
  cpu_util_1m = __builtin__.property(_get_cpu_util_1m)
  cpu_util_5m = __builtin__.property(_get_cpu_util_5m)
  cpu_util_15m = __builtin__.property(_get_cpu_util_15m)
  cpu_util_1h = __builtin__.property(_get_cpu_util_1h)
  cpu_util_5h = __builtin__.property(_get_cpu_util_5h)
  cpu_util_24h = __builtin__.property(_get_cpu_util_24h)
  cpu_util_72h = __builtin__.property(_get_cpu_util_72h)


  _pyangbind_elements = {'cpu_process_id': cpu_process_id, 'cpu_process_name': cpu_process_name, 'cpu_util_current': cpu_util_current, 'cpu_util_1m': cpu_util_1m, 'cpu_util_5m': cpu_util_5m, 'cpu_util_15m': cpu_util_15m, 'cpu_util_1h': cpu_util_1h, 'cpu_util_5h': cpu_util_5h, 'cpu_util_24h': cpu_util_24h, 'cpu_util_72h': cpu_util_72h, }


