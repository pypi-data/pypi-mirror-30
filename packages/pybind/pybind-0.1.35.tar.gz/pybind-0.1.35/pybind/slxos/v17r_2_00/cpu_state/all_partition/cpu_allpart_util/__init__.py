
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class cpu_allpart_util(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-RAS-operational - based on the path /cpu-state/all-partition/cpu-allpart-util. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: CPU utilization percentage of the blade MM/LC
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cpu_blade_name','__cpu_util_current','__cpu_util_user','__cpu_util_kernel','__cpu_util_iowait',)

  _yang_name = 'cpu-allpart-util'
  _rest_name = 'cpu-allpart-util'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cpu_util_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-user", rest_name="cpu-util-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-iowait", rest_name="cpu-util-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_blade_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-blade-name", rest_name="cpu-blade-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_util_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-kernel", rest_name="cpu-util-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cpu-state', u'all-partition', u'cpu-allpart-util']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cpu-state', u'all-partition', u'cpu-allpart-util']

  def _get_cpu_blade_name(self):
    """
    Getter method for cpu_blade_name, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_blade_name (string)

    YANG Description: MM/LC name
    """
    return self.__cpu_blade_name
      
  def _set_cpu_blade_name(self, v, load=False):
    """
    Setter method for cpu_blade_name, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_blade_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_blade_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_blade_name() directly.

    YANG Description: MM/LC name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-blade-name", rest_name="cpu-blade-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_blade_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-blade-name", rest_name="cpu-blade-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_blade_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_blade_name(self):
    self.__cpu_blade_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-blade-name", rest_name="cpu-blade-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_util_current(self):
    """
    Getter method for cpu_util_current, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_current (decimal64)

    YANG Description: Current Total CPU utilization
    """
    return self.__cpu_util_current
      
  def _set_cpu_util_current(self, v, load=False):
    """
    Setter method for cpu_util_current, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_current (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_current is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_current() directly.

    YANG Description: Current Total CPU utilization
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_current must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_current = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_current(self):
    self.__cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_user(self):
    """
    Getter method for cpu_util_user, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_user (decimal64)

    YANG Description: Current CPU utilization by user process
    """
    return self.__cpu_util_user
      
  def _set_cpu_util_user(self, v, load=False):
    """
    Setter method for cpu_util_user, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_user() directly.

    YANG Description: Current CPU utilization by user process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-user", rest_name="cpu-util-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-user", rest_name="cpu-util-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_user(self):
    self.__cpu_util_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-user", rest_name="cpu-util-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_kernel(self):
    """
    Getter method for cpu_util_kernel, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_kernel (decimal64)

    YANG Description:  Current CPU utilization by kernel processes 
    """
    return self.__cpu_util_kernel
      
  def _set_cpu_util_kernel(self, v, load=False):
    """
    Setter method for cpu_util_kernel, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_kernel() directly.

    YANG Description:  Current CPU utilization by kernel processes 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-kernel", rest_name="cpu-util-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-kernel", rest_name="cpu-util-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_kernel(self):
    self.__cpu_util_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-kernel", rest_name="cpu-util-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_iowait(self):
    """
    Getter method for cpu_util_iowait, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_iowait (decimal64)

    YANG Description: Current CPU utilization in iowait
    """
    return self.__cpu_util_iowait
      
  def _set_cpu_util_iowait(self, v, load=False):
    """
    Setter method for cpu_util_iowait, mapped from YANG variable /cpu_state/all_partition/cpu_allpart_util/cpu_util_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_iowait() directly.

    YANG Description: Current CPU utilization in iowait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-iowait", rest_name="cpu-util-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-iowait", rest_name="cpu-util-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_iowait(self):
    self.__cpu_util_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-iowait", rest_name="cpu-util-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

  cpu_blade_name = __builtin__.property(_get_cpu_blade_name)
  cpu_util_current = __builtin__.property(_get_cpu_util_current)
  cpu_util_user = __builtin__.property(_get_cpu_util_user)
  cpu_util_kernel = __builtin__.property(_get_cpu_util_kernel)
  cpu_util_iowait = __builtin__.property(_get_cpu_util_iowait)


  _pyangbind_elements = {'cpu_blade_name': cpu_blade_name, 'cpu_util_current': cpu_util_current, 'cpu_util_user': cpu_util_user, 'cpu_util_kernel': cpu_util_kernel, 'cpu_util_iowait': cpu_util_iowait, }


