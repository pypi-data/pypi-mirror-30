
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class interface_reliable_messaging(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /mpls-config/router/mpls/mpls-cmds-holder/mpls-interface/rsvp/interface-reliable-messaging. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__rapid_retrans_decay','__rapid_retrans_interval','__rapid_retry_limit','__rsvp_reliable_messaging_disable',)

  _yang_name = 'interface-reliable-messaging'
  _rest_name = 'reliable-messaging'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__rapid_retry_limit = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="rapid-retry-limit", rest_name="rapid-retry-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum number of retries for an unacknowledged message', u'alt-name': u'rapid-retry-limit'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__rsvp_reliable_messaging_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-reliable-messaging-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Reliable messaging on this interface', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    self.__rapid_retrans_decay = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..100']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="rapid-retrans-decay", rest_name="rapid-retrans-decay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Percentage increase in the rapid retransmission interval for each consecutive unacknowledged RSVP message', u'alt-name': u'rapid-retrans-decay'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__rapid_retrans_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..30000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2000), is_leaf=True, yang_name="rapid-retrans-interval", rest_name="rapid-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval for an unacknowledged message to be resent', u'alt-name': u'rapid-retrans-interval'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-config', u'router', u'mpls', u'mpls-cmds-holder', u'mpls-interface', u'rsvp', u'interface-reliable-messaging']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'mpls', u'mpls-interface', u'rsvp', u'reliable-messaging']

  def _get_rapid_retrans_decay(self):
    """
    Getter method for rapid_retrans_decay, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rapid_retrans_decay (uint32)
    """
    return self.__rapid_retrans_decay
      
  def _set_rapid_retrans_decay(self, v, load=False):
    """
    Setter method for rapid_retrans_decay, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rapid_retrans_decay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rapid_retrans_decay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rapid_retrans_decay() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..100']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="rapid-retrans-decay", rest_name="rapid-retrans-decay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Percentage increase in the rapid retransmission interval for each consecutive unacknowledged RSVP message', u'alt-name': u'rapid-retrans-decay'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rapid_retrans_decay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..100']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="rapid-retrans-decay", rest_name="rapid-retrans-decay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Percentage increase in the rapid retransmission interval for each consecutive unacknowledged RSVP message', u'alt-name': u'rapid-retrans-decay'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__rapid_retrans_decay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rapid_retrans_decay(self):
    self.__rapid_retrans_decay = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..100']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(100), is_leaf=True, yang_name="rapid-retrans-decay", rest_name="rapid-retrans-decay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Percentage increase in the rapid retransmission interval for each consecutive unacknowledged RSVP message', u'alt-name': u'rapid-retrans-decay'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_rapid_retrans_interval(self):
    """
    Getter method for rapid_retrans_interval, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rapid_retrans_interval (uint32)
    """
    return self.__rapid_retrans_interval
      
  def _set_rapid_retrans_interval(self, v, load=False):
    """
    Setter method for rapid_retrans_interval, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rapid_retrans_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rapid_retrans_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rapid_retrans_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..30000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2000), is_leaf=True, yang_name="rapid-retrans-interval", rest_name="rapid-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval for an unacknowledged message to be resent', u'alt-name': u'rapid-retrans-interval'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rapid_retrans_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..30000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2000), is_leaf=True, yang_name="rapid-retrans-interval", rest_name="rapid-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval for an unacknowledged message to be resent', u'alt-name': u'rapid-retrans-interval'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__rapid_retrans_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rapid_retrans_interval(self):
    self.__rapid_retrans_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..30000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2000), is_leaf=True, yang_name="rapid-retrans-interval", rest_name="rapid-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval for an unacknowledged message to be resent', u'alt-name': u'rapid-retrans-interval'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_rapid_retry_limit(self):
    """
    Getter method for rapid_retry_limit, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rapid_retry_limit (uint32)
    """
    return self.__rapid_retry_limit
      
  def _set_rapid_retry_limit(self, v, load=False):
    """
    Setter method for rapid_retry_limit, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rapid_retry_limit (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rapid_retry_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rapid_retry_limit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="rapid-retry-limit", rest_name="rapid-retry-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum number of retries for an unacknowledged message', u'alt-name': u'rapid-retry-limit'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rapid_retry_limit must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="rapid-retry-limit", rest_name="rapid-retry-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum number of retries for an unacknowledged message', u'alt-name': u'rapid-retry-limit'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__rapid_retry_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rapid_retry_limit(self):
    self.__rapid_retry_limit = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="rapid-retry-limit", rest_name="rapid-retry-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum number of retries for an unacknowledged message', u'alt-name': u'rapid-retry-limit'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_rsvp_reliable_messaging_disable(self):
    """
    Getter method for rsvp_reliable_messaging_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rsvp_reliable_messaging_disable (empty)
    """
    return self.__rsvp_reliable_messaging_disable
      
  def _set_rsvp_reliable_messaging_disable(self, v, load=False):
    """
    Setter method for rsvp_reliable_messaging_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging/rsvp_reliable_messaging_disable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_reliable_messaging_disable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_reliable_messaging_disable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rsvp-reliable-messaging-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Reliable messaging on this interface', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_reliable_messaging_disable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-reliable-messaging-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Reliable messaging on this interface', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)""",
        })

    self.__rsvp_reliable_messaging_disable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_reliable_messaging_disable(self):
    self.__rsvp_reliable_messaging_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-reliable-messaging-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Reliable messaging on this interface', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)

  rapid_retrans_decay = __builtin__.property(_get_rapid_retrans_decay, _set_rapid_retrans_decay)
  rapid_retrans_interval = __builtin__.property(_get_rapid_retrans_interval, _set_rapid_retrans_interval)
  rapid_retry_limit = __builtin__.property(_get_rapid_retry_limit, _set_rapid_retry_limit)
  rsvp_reliable_messaging_disable = __builtin__.property(_get_rsvp_reliable_messaging_disable, _set_rsvp_reliable_messaging_disable)


  _pyangbind_elements = {'rapid_retrans_decay': rapid_retrans_decay, 'rapid_retrans_interval': rapid_retrans_interval, 'rapid_retry_limit': rapid_retry_limit, 'rsvp_reliable_messaging_disable': rsvp_reliable_messaging_disable, }


