
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import system_utilization
import interface
import enhanced_voq_discard_pkts
import enhanced_voq_max_queue_depth
import tm_voq
import mpls_traffic_lsp
import mpls_traffic_bypass
import mpls_traffic_fec
class profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-telemetry - based on the path /telemetry/profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__system_utilization','__interface','__enhanced_voq_discard_pkts','__enhanced_voq_max_queue_depth','__tm_voq','__mpls_traffic_lsp','__mpls_traffic_bypass','__mpls_traffic_fec',)

  _yang_name = 'profile'
  _rest_name = 'profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__system_utilization = YANGDynClass(base=YANGListType("name",system_utilization.system_utilization, yang_name="system-utilization", rest_name="system-utilization", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}), is_container='list', yang_name="system-utilization", rest_name="system-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__mpls_traffic_bypass = YANGDynClass(base=YANGListType("name",mpls_traffic_bypass.mpls_traffic_bypass, yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__enhanced_voq_discard_pkts = YANGDynClass(base=YANGListType("name",enhanced_voq_discard_pkts.enhanced_voq_discard_pkts, yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}), is_container='list', yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__mpls_traffic_lsp = YANGDynClass(base=YANGListType("name",mpls_traffic_lsp.mpls_traffic_lsp, yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__enhanced_voq_max_queue_depth = YANGDynClass(base=YANGListType("name",enhanced_voq_max_queue_depth.enhanced_voq_max_queue_depth, yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}), is_container='list', yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__mpls_traffic_fec = YANGDynClass(base=YANGListType("name",mpls_traffic_fec.mpls_traffic_fec, yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__interface = YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    self.__tm_voq = YANGDynClass(base=YANGListType("name",tm_voq.tm_voq, yang_name="tm-voq", rest_name="tm-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}), is_container='list', yang_name="tm-voq", rest_name="tm-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'telemetry', u'profile']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'telemetry', u'profile']

  def _get_system_utilization(self):
    """
    Getter method for system_utilization, mapped from YANG variable /telemetry/profile/system_utilization (list)
    """
    return self.__system_utilization
      
  def _set_system_utilization(self, v, load=False):
    """
    Setter method for system_utilization, mapped from YANG variable /telemetry/profile/system_utilization (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_utilization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_utilization() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",system_utilization.system_utilization, yang_name="system-utilization", rest_name="system-utilization", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}), is_container='list', yang_name="system-utilization", rest_name="system-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_utilization must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",system_utilization.system_utilization, yang_name="system-utilization", rest_name="system-utilization", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}), is_container='list', yang_name="system-utilization", rest_name="system-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__system_utilization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_utilization(self):
    self.__system_utilization = YANGDynClass(base=YANGListType("name",system_utilization.system_utilization, yang_name="system-utilization", rest_name="system-utilization", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}), is_container='list', yang_name="system-utilization", rest_name="system-utilization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'SystemProfile', u'info': u'System Utilization profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /telemetry/profile/interface (list)
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /telemetry/profile/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("name",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'InterfaceProfile', u'info': u'Interface profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_enhanced_voq_discard_pkts(self):
    """
    Getter method for enhanced_voq_discard_pkts, mapped from YANG variable /telemetry/profile/enhanced_voq_discard_pkts (list)
    """
    return self.__enhanced_voq_discard_pkts
      
  def _set_enhanced_voq_discard_pkts(self, v, load=False):
    """
    Setter method for enhanced_voq_discard_pkts, mapped from YANG variable /telemetry/profile/enhanced_voq_discard_pkts (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enhanced_voq_discard_pkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enhanced_voq_discard_pkts() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",enhanced_voq_discard_pkts.enhanced_voq_discard_pkts, yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}), is_container='list', yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enhanced_voq_discard_pkts must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",enhanced_voq_discard_pkts.enhanced_voq_discard_pkts, yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}), is_container='list', yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__enhanced_voq_discard_pkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enhanced_voq_discard_pkts(self):
    self.__enhanced_voq_discard_pkts = YANGDynClass(base=YANGListType("name",enhanced_voq_discard_pkts.enhanced_voq_discard_pkts, yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}), is_container='list', yang_name="enhanced-voq-discard-pkts", rest_name="enhanced-voq-discard-pkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqDiscardPktsProfile', u'info': u'Enhanced VOQ discard packets'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_enhanced_voq_max_queue_depth(self):
    """
    Getter method for enhanced_voq_max_queue_depth, mapped from YANG variable /telemetry/profile/enhanced_voq_max_queue_depth (list)
    """
    return self.__enhanced_voq_max_queue_depth
      
  def _set_enhanced_voq_max_queue_depth(self, v, load=False):
    """
    Setter method for enhanced_voq_max_queue_depth, mapped from YANG variable /telemetry/profile/enhanced_voq_max_queue_depth (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enhanced_voq_max_queue_depth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enhanced_voq_max_queue_depth() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",enhanced_voq_max_queue_depth.enhanced_voq_max_queue_depth, yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}), is_container='list', yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enhanced_voq_max_queue_depth must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",enhanced_voq_max_queue_depth.enhanced_voq_max_queue_depth, yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}), is_container='list', yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__enhanced_voq_max_queue_depth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enhanced_voq_max_queue_depth(self):
    self.__enhanced_voq_max_queue_depth = YANGDynClass(base=YANGListType("name",enhanced_voq_max_queue_depth.enhanced_voq_max_queue_depth, yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}), is_container='list', yang_name="enhanced-voq-max-queue-depth", rest_name="enhanced-voq-max-queue-depth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'EnhancedVoqMaxQueueDepthProfile', u'info': u'Enhanced VOQ max queue depth'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_tm_voq(self):
    """
    Getter method for tm_voq, mapped from YANG variable /telemetry/profile/tm_voq (list)
    """
    return self.__tm_voq
      
  def _set_tm_voq(self, v, load=False):
    """
    Setter method for tm_voq, mapped from YANG variable /telemetry/profile/tm_voq (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tm_voq is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tm_voq() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",tm_voq.tm_voq, yang_name="tm-voq", rest_name="tm-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}), is_container='list', yang_name="tm-voq", rest_name="tm-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tm_voq must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",tm_voq.tm_voq, yang_name="tm-voq", rest_name="tm-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}), is_container='list', yang_name="tm-voq", rest_name="tm-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__tm_voq = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tm_voq(self):
    self.__tm_voq = YANGDynClass(base=YANGListType("name",tm_voq.tm_voq, yang_name="tm-voq", rest_name="tm-voq", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}), is_container='list', yang_name="tm-voq", rest_name="tm-voq", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'TmVoqProfile', u'info': u'TM VOQ'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_mpls_traffic_lsp(self):
    """
    Getter method for mpls_traffic_lsp, mapped from YANG variable /telemetry/profile/mpls_traffic_lsp (list)
    """
    return self.__mpls_traffic_lsp
      
  def _set_mpls_traffic_lsp(self, v, load=False):
    """
    Setter method for mpls_traffic_lsp, mapped from YANG variable /telemetry/profile/mpls_traffic_lsp (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_traffic_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_traffic_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",mpls_traffic_lsp.mpls_traffic_lsp, yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_traffic_lsp must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",mpls_traffic_lsp.mpls_traffic_lsp, yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__mpls_traffic_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_traffic_lsp(self):
    self.__mpls_traffic_lsp = YANGDynClass(base=YANGListType("name",mpls_traffic_lsp.mpls_traffic_lsp, yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-lsp", rest_name="mpls-traffic-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficlspProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_mpls_traffic_bypass(self):
    """
    Getter method for mpls_traffic_bypass, mapped from YANG variable /telemetry/profile/mpls_traffic_bypass (list)
    """
    return self.__mpls_traffic_bypass
      
  def _set_mpls_traffic_bypass(self, v, load=False):
    """
    Setter method for mpls_traffic_bypass, mapped from YANG variable /telemetry/profile/mpls_traffic_bypass (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_traffic_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_traffic_bypass() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",mpls_traffic_bypass.mpls_traffic_bypass, yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_traffic_bypass must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",mpls_traffic_bypass.mpls_traffic_bypass, yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__mpls_traffic_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_traffic_bypass(self):
    self.__mpls_traffic_bypass = YANGDynClass(base=YANGListType("name",mpls_traffic_bypass.mpls_traffic_bypass, yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-bypass", rest_name="mpls-traffic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficbypassProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)


  def _get_mpls_traffic_fec(self):
    """
    Getter method for mpls_traffic_fec, mapped from YANG variable /telemetry/profile/mpls_traffic_fec (list)
    """
    return self.__mpls_traffic_fec
      
  def _set_mpls_traffic_fec(self, v, load=False):
    """
    Setter method for mpls_traffic_fec, mapped from YANG variable /telemetry/profile/mpls_traffic_fec (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_traffic_fec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_traffic_fec() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",mpls_traffic_fec.mpls_traffic_fec, yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_traffic_fec must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",mpls_traffic_fec.mpls_traffic_fec, yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)""",
        })

    self.__mpls_traffic_fec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_traffic_fec(self):
    self.__mpls_traffic_fec = YANGDynClass(base=YANGListType("name",mpls_traffic_fec.mpls_traffic_fec, yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}), is_container='list', yang_name="mpls-traffic-fec", rest_name="mpls-traffic-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-suppress-list-no': None, u'callpoint': u'MplstrafficfecProfile', u'info': u'MPLS LSP profile'}}, namespace='urn:brocade.com:mgmt:brocade-telemetry', defining_module='brocade-telemetry', yang_type='list', is_config=True)

  system_utilization = __builtin__.property(_get_system_utilization, _set_system_utilization)
  interface = __builtin__.property(_get_interface, _set_interface)
  enhanced_voq_discard_pkts = __builtin__.property(_get_enhanced_voq_discard_pkts, _set_enhanced_voq_discard_pkts)
  enhanced_voq_max_queue_depth = __builtin__.property(_get_enhanced_voq_max_queue_depth, _set_enhanced_voq_max_queue_depth)
  tm_voq = __builtin__.property(_get_tm_voq, _set_tm_voq)
  mpls_traffic_lsp = __builtin__.property(_get_mpls_traffic_lsp, _set_mpls_traffic_lsp)
  mpls_traffic_bypass = __builtin__.property(_get_mpls_traffic_bypass, _set_mpls_traffic_bypass)
  mpls_traffic_fec = __builtin__.property(_get_mpls_traffic_fec, _set_mpls_traffic_fec)


  _pyangbind_elements = {'system_utilization': system_utilization, 'interface': interface, 'enhanced_voq_discard_pkts': enhanced_voq_discard_pkts, 'enhanced_voq_max_queue_depth': enhanced_voq_max_queue_depth, 'tm_voq': tm_voq, 'mpls_traffic_lsp': mpls_traffic_lsp, 'mpls_traffic_bypass': mpls_traffic_bypass, 'mpls_traffic_fec': mpls_traffic_fec, }


