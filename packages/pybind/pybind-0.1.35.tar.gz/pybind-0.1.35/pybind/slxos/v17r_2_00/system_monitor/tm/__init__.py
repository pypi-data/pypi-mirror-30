
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import discard_packet
import discard_voq_packet
import delete_packet
class tm(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-system-monitor - based on the path /system-monitor/tm. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__discard_packet','__discard_voq_packet','__delete_packet',)

  _yang_name = 'tm'
  _rest_name = 'tm'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__delete_packet = YANGDynClass(base=delete_packet.delete_packet, is_container='container', presence=False, yang_name="delete-packet", rest_name="delete-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager deleted packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)
    self.__discard_voq_packet = YANGDynClass(base=discard_voq_packet.discard_voq_packet, is_container='container', presence=False, yang_name="discard-voq-packet", rest_name="discard-voq-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager VOQ discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)
    self.__discard_packet = YANGDynClass(base=discard_packet.discard_packet, is_container='container', presence=False, yang_name="discard-packet", rest_name="discard-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system-monitor', u'tm']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'system-monitor', u'tm']

  def _get_discard_packet(self):
    """
    Getter method for discard_packet, mapped from YANG variable /system_monitor/tm/discard_packet (container)
    """
    return self.__discard_packet
      
  def _set_discard_packet(self, v, load=False):
    """
    Setter method for discard_packet, mapped from YANG variable /system_monitor/tm/discard_packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discard_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discard_packet() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=discard_packet.discard_packet, is_container='container', presence=False, yang_name="discard-packet", rest_name="discard-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discard_packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=discard_packet.discard_packet, is_container='container', presence=False, yang_name="discard-packet", rest_name="discard-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)""",
        })

    self.__discard_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discard_packet(self):
    self.__discard_packet = YANGDynClass(base=discard_packet.discard_packet, is_container='container', presence=False, yang_name="discard-packet", rest_name="discard-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)


  def _get_discard_voq_packet(self):
    """
    Getter method for discard_voq_packet, mapped from YANG variable /system_monitor/tm/discard_voq_packet (container)
    """
    return self.__discard_voq_packet
      
  def _set_discard_voq_packet(self, v, load=False):
    """
    Setter method for discard_voq_packet, mapped from YANG variable /system_monitor/tm/discard_voq_packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_discard_voq_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_discard_voq_packet() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=discard_voq_packet.discard_voq_packet, is_container='container', presence=False, yang_name="discard-voq-packet", rest_name="discard-voq-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager VOQ discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """discard_voq_packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=discard_voq_packet.discard_voq_packet, is_container='container', presence=False, yang_name="discard-voq-packet", rest_name="discard-voq-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager VOQ discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)""",
        })

    self.__discard_voq_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_discard_voq_packet(self):
    self.__discard_voq_packet = YANGDynClass(base=discard_voq_packet.discard_voq_packet, is_container='container', presence=False, yang_name="discard-voq-packet", rest_name="discard-voq-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager VOQ discarded packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)


  def _get_delete_packet(self):
    """
    Getter method for delete_packet, mapped from YANG variable /system_monitor/tm/delete_packet (container)
    """
    return self.__delete_packet
      
  def _set_delete_packet(self, v, load=False):
    """
    Setter method for delete_packet, mapped from YANG variable /system_monitor/tm/delete_packet (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delete_packet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delete_packet() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=delete_packet.delete_packet, is_container='container', presence=False, yang_name="delete-packet", rest_name="delete-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager deleted packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delete_packet must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=delete_packet.delete_packet, is_container='container', presence=False, yang_name="delete-packet", rest_name="delete-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager deleted packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)""",
        })

    self.__delete_packet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delete_packet(self):
    self.__delete_packet = YANGDynClass(base=delete_packet.delete_packet, is_container='container', presence=False, yang_name="delete-packet", rest_name="delete-packet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Manager deleted packet', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='container', is_config=True)

  discard_packet = __builtin__.property(_get_discard_packet, _set_discard_packet)
  discard_voq_packet = __builtin__.property(_get_discard_voq_packet, _set_discard_voq_packet)
  delete_packet = __builtin__.property(_get_delete_packet, _set_delete_packet)


  _pyangbind_elements = {'discard_packet': discard_packet, 'discard_voq_packet': discard_voq_packet, 'delete_packet': delete_packet, }


