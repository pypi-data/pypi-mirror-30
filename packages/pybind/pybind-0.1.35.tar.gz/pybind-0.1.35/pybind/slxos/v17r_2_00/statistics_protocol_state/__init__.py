
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class statistics_protocol_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-openflow-operational - based on the path /statistics-protocol-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: statistics protocol information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__connection_name','__hello_rx_total','__hello_tx_total','__hello_rx_last','__hello_tx_last','__echo_req_total','__echo_reply_total','__echo_req_last','__echo_reply_last','__experiment_total','__experiment_last','__feature_req_total','__feature_reply_total','__feature_req_last','__feature_reply_last','__get_config_req_total','__get_config_reply_total','__get_config_req_last','__get_config_reply_last','__set_config_total','__set_config_last','__packet_in_total','__packet_in_last','__flow_removed_total','__flow_removed_last','__port_status_total','__port_status_last','__error_total','__error_last','__multipart_req_total','__multipart_reply_total','__multipart_req_last','__multipart_reply_last','__packet_out_total','__packet_out_last','__flow_mod_total','__flow_mod_last','__group_mod_total','__group_mod_last','__meter_mod_total','__meter_mod_last','__barrier_req_total','__barrier_reply_total','__barrier_req_last','__barrier_reply_last','__role_req_total','__role_reply_total','__role_req_last','__role_reply_last','__get_async_req_total','__get_async_reply_total','__get_async_req_last','__get_async_reply_last','__set_async_reply_total','__set_async_req_last','__total_rx_total','__total_tx_total','__total_rx_last','__total_tx_last','__unknown_rx_total','__unknown_rx_last',)

  _yang_name = 'statistics-protocol-state'
  _rest_name = 'statistics-protocol-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__get_async_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-total", rest_name="get-async-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__feature_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-last", rest_name="feature-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_config_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-last", rest_name="get-config-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__unknown_rx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-total", rest_name="unknown-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__flow_mod_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-total", rest_name="flow-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__multipart_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-last", rest_name="multipart-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_async_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-last", rest_name="get-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__meter_mod_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-last", rest_name="meter-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__flow_mod_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-last", rest_name="flow-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__feature_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-last", rest_name="feature-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__meter_mod_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-total", rest_name="meter-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__total_rx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-total", rest_name="total-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__port_status_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-last", rest_name="port-status-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__echo_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-total", rest_name="echo-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__experiment_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-last", rest_name="experiment-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__role_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-total", rest_name="role-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__echo_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-last", rest_name="echo-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__error_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-total", rest_name="error-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__total_rx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-last", rest_name="total-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__total_tx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-total", rest_name="total-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__echo_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-last", rest_name="echo-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__flow_removed_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-total", rest_name="flow-removed-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__multipart_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-total", rest_name="multipart-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__echo_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-total", rest_name="echo-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__packet_in_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-last", rest_name="packet-in-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__feature_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-total", rest_name="feature-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__barrier_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-total", rest_name="barrier-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__hello_tx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-last", rest_name="hello-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__hello_rx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-total", rest_name="hello-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__barrier_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-last", rest_name="barrier-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__packet_out_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-last", rest_name="packet-out-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__multipart_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-total", rest_name="multipart-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_config_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-total", rest_name="get-config-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__multipart_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-last", rest_name="multipart-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__error_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-last", rest_name="error-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__flow_removed_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-last", rest_name="flow-removed-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_config_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-total", rest_name="get-config-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__barrier_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-total", rest_name="barrier-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__role_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-last", rest_name="role-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__group_mod_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-total", rest_name="group-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__hello_tx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-total", rest_name="hello-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__total_tx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-last", rest_name="total-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__role_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-total", rest_name="role-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__hello_rx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-last", rest_name="hello-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__set_config_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-last", rest_name="set-config-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__set_async_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-reply-total", rest_name="set-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__feature_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-total", rest_name="feature-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_config_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-last", rest_name="get-config-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__barrier_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-last", rest_name="barrier-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__experiment_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-total", rest_name="experiment-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__connection_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="connection-name", rest_name="connection-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='string', is_config=False)
    self.__packet_in_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-total", rest_name="packet-in-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__unknown_rx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-last", rest_name="unknown-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_async_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-total", rest_name="get-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__packet_out_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-total", rest_name="packet-out-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__set_async_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-req-last", rest_name="set-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__port_status_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-total", rest_name="port-status-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__role_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-last", rest_name="role-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__get_async_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-last", rest_name="get-async-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__group_mod_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-last", rest_name="group-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    self.__set_config_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-total", rest_name="set-config-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'statistics-protocol-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'statistics-protocol-state']

  def _get_connection_name(self):
    """
    Getter method for connection_name, mapped from YANG variable /statistics_protocol_state/connection_name (string)

    YANG Description: connection name
    """
    return self.__connection_name
      
  def _set_connection_name(self, v, load=False):
    """
    Setter method for connection_name, mapped from YANG variable /statistics_protocol_state/connection_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connection_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connection_name() directly.

    YANG Description: connection name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="connection-name", rest_name="connection-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connection_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="connection-name", rest_name="connection-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='string', is_config=False)""",
        })

    self.__connection_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connection_name(self):
    self.__connection_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="connection-name", rest_name="connection-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='string', is_config=False)


  def _get_hello_rx_total(self):
    """
    Getter method for hello_rx_total, mapped from YANG variable /statistics_protocol_state/hello_rx_total (uint64)

    YANG Description: Hello Rx total
    """
    return self.__hello_rx_total
      
  def _set_hello_rx_total(self, v, load=False):
    """
    Setter method for hello_rx_total, mapped from YANG variable /statistics_protocol_state/hello_rx_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_rx_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_rx_total() directly.

    YANG Description: Hello Rx total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-total", rest_name="hello-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_rx_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-total", rest_name="hello-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_rx_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_rx_total(self):
    self.__hello_rx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-total", rest_name="hello-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_hello_tx_total(self):
    """
    Getter method for hello_tx_total, mapped from YANG variable /statistics_protocol_state/hello_tx_total (uint64)

    YANG Description: Hello Tx total
    """
    return self.__hello_tx_total
      
  def _set_hello_tx_total(self, v, load=False):
    """
    Setter method for hello_tx_total, mapped from YANG variable /statistics_protocol_state/hello_tx_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_tx_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_tx_total() directly.

    YANG Description: Hello Tx total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-total", rest_name="hello-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_tx_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-total", rest_name="hello-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_tx_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_tx_total(self):
    self.__hello_tx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-total", rest_name="hello-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_hello_rx_last(self):
    """
    Getter method for hello_rx_last, mapped from YANG variable /statistics_protocol_state/hello_rx_last (uint64)

    YANG Description: Hello Rx since last clear
    """
    return self.__hello_rx_last
      
  def _set_hello_rx_last(self, v, load=False):
    """
    Setter method for hello_rx_last, mapped from YANG variable /statistics_protocol_state/hello_rx_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_rx_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_rx_last() directly.

    YANG Description: Hello Rx since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-last", rest_name="hello-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_rx_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-last", rest_name="hello-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_rx_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_rx_last(self):
    self.__hello_rx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-last", rest_name="hello-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_hello_tx_last(self):
    """
    Getter method for hello_tx_last, mapped from YANG variable /statistics_protocol_state/hello_tx_last (uint64)

    YANG Description: Hello Tx since last clear
    """
    return self.__hello_tx_last
      
  def _set_hello_tx_last(self, v, load=False):
    """
    Setter method for hello_tx_last, mapped from YANG variable /statistics_protocol_state/hello_tx_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_tx_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_tx_last() directly.

    YANG Description: Hello Tx since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-last", rest_name="hello-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_tx_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-last", rest_name="hello-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_tx_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_tx_last(self):
    self.__hello_tx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-last", rest_name="hello-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_echo_req_total(self):
    """
    Getter method for echo_req_total, mapped from YANG variable /statistics_protocol_state/echo_req_total (uint64)

    YANG Description: echo req total
    """
    return self.__echo_req_total
      
  def _set_echo_req_total(self, v, load=False):
    """
    Setter method for echo_req_total, mapped from YANG variable /statistics_protocol_state/echo_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_echo_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_echo_req_total() directly.

    YANG Description: echo req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-total", rest_name="echo-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """echo_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-total", rest_name="echo-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__echo_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_echo_req_total(self):
    self.__echo_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-total", rest_name="echo-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_echo_reply_total(self):
    """
    Getter method for echo_reply_total, mapped from YANG variable /statistics_protocol_state/echo_reply_total (uint64)

    YANG Description: echo reply total
    """
    return self.__echo_reply_total
      
  def _set_echo_reply_total(self, v, load=False):
    """
    Setter method for echo_reply_total, mapped from YANG variable /statistics_protocol_state/echo_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_echo_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_echo_reply_total() directly.

    YANG Description: echo reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-total", rest_name="echo-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """echo_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-total", rest_name="echo-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__echo_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_echo_reply_total(self):
    self.__echo_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-total", rest_name="echo-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_echo_req_last(self):
    """
    Getter method for echo_req_last, mapped from YANG variable /statistics_protocol_state/echo_req_last (uint64)

    YANG Description: echo req since last clear
    """
    return self.__echo_req_last
      
  def _set_echo_req_last(self, v, load=False):
    """
    Setter method for echo_req_last, mapped from YANG variable /statistics_protocol_state/echo_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_echo_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_echo_req_last() directly.

    YANG Description: echo req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-last", rest_name="echo-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """echo_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-last", rest_name="echo-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__echo_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_echo_req_last(self):
    self.__echo_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-req-last", rest_name="echo-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_echo_reply_last(self):
    """
    Getter method for echo_reply_last, mapped from YANG variable /statistics_protocol_state/echo_reply_last (uint64)

    YANG Description: echo reply since last clear
    """
    return self.__echo_reply_last
      
  def _set_echo_reply_last(self, v, load=False):
    """
    Setter method for echo_reply_last, mapped from YANG variable /statistics_protocol_state/echo_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_echo_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_echo_reply_last() directly.

    YANG Description: echo reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-last", rest_name="echo-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """echo_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-last", rest_name="echo-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__echo_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_echo_reply_last(self):
    self.__echo_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="echo-reply-last", rest_name="echo-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_experiment_total(self):
    """
    Getter method for experiment_total, mapped from YANG variable /statistics_protocol_state/experiment_total (uint64)

    YANG Description: experiment total
    """
    return self.__experiment_total
      
  def _set_experiment_total(self, v, load=False):
    """
    Setter method for experiment_total, mapped from YANG variable /statistics_protocol_state/experiment_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_experiment_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_experiment_total() directly.

    YANG Description: experiment total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-total", rest_name="experiment-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """experiment_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-total", rest_name="experiment-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__experiment_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_experiment_total(self):
    self.__experiment_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-total", rest_name="experiment-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_experiment_last(self):
    """
    Getter method for experiment_last, mapped from YANG variable /statistics_protocol_state/experiment_last (uint64)

    YANG Description: experiment since last clear
    """
    return self.__experiment_last
      
  def _set_experiment_last(self, v, load=False):
    """
    Setter method for experiment_last, mapped from YANG variable /statistics_protocol_state/experiment_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_experiment_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_experiment_last() directly.

    YANG Description: experiment since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-last", rest_name="experiment-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """experiment_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-last", rest_name="experiment-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__experiment_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_experiment_last(self):
    self.__experiment_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="experiment-last", rest_name="experiment-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_feature_req_total(self):
    """
    Getter method for feature_req_total, mapped from YANG variable /statistics_protocol_state/feature_req_total (uint64)

    YANG Description: feature req total
    """
    return self.__feature_req_total
      
  def _set_feature_req_total(self, v, load=False):
    """
    Setter method for feature_req_total, mapped from YANG variable /statistics_protocol_state/feature_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_feature_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_feature_req_total() directly.

    YANG Description: feature req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-total", rest_name="feature-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """feature_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-total", rest_name="feature-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__feature_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_feature_req_total(self):
    self.__feature_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-total", rest_name="feature-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_feature_reply_total(self):
    """
    Getter method for feature_reply_total, mapped from YANG variable /statistics_protocol_state/feature_reply_total (uint64)

    YANG Description: feature reply total
    """
    return self.__feature_reply_total
      
  def _set_feature_reply_total(self, v, load=False):
    """
    Setter method for feature_reply_total, mapped from YANG variable /statistics_protocol_state/feature_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_feature_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_feature_reply_total() directly.

    YANG Description: feature reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-total", rest_name="feature-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """feature_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-total", rest_name="feature-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__feature_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_feature_reply_total(self):
    self.__feature_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-total", rest_name="feature-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_feature_req_last(self):
    """
    Getter method for feature_req_last, mapped from YANG variable /statistics_protocol_state/feature_req_last (uint64)

    YANG Description: feature req since last clear
    """
    return self.__feature_req_last
      
  def _set_feature_req_last(self, v, load=False):
    """
    Setter method for feature_req_last, mapped from YANG variable /statistics_protocol_state/feature_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_feature_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_feature_req_last() directly.

    YANG Description: feature req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-last", rest_name="feature-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """feature_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-last", rest_name="feature-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__feature_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_feature_req_last(self):
    self.__feature_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-req-last", rest_name="feature-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_feature_reply_last(self):
    """
    Getter method for feature_reply_last, mapped from YANG variable /statistics_protocol_state/feature_reply_last (uint64)

    YANG Description: feature reply since last clear
    """
    return self.__feature_reply_last
      
  def _set_feature_reply_last(self, v, load=False):
    """
    Setter method for feature_reply_last, mapped from YANG variable /statistics_protocol_state/feature_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_feature_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_feature_reply_last() directly.

    YANG Description: feature reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-last", rest_name="feature-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """feature_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-last", rest_name="feature-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__feature_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_feature_reply_last(self):
    self.__feature_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="feature-reply-last", rest_name="feature-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_config_req_total(self):
    """
    Getter method for get_config_req_total, mapped from YANG variable /statistics_protocol_state/get_config_req_total (uint64)

    YANG Description: get_config req total
    """
    return self.__get_config_req_total
      
  def _set_get_config_req_total(self, v, load=False):
    """
    Setter method for get_config_req_total, mapped from YANG variable /statistics_protocol_state/get_config_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_config_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_config_req_total() directly.

    YANG Description: get_config req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-total", rest_name="get-config-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_config_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-total", rest_name="get-config-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_config_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_config_req_total(self):
    self.__get_config_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-total", rest_name="get-config-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_config_reply_total(self):
    """
    Getter method for get_config_reply_total, mapped from YANG variable /statistics_protocol_state/get_config_reply_total (uint64)

    YANG Description: get_config reply total
    """
    return self.__get_config_reply_total
      
  def _set_get_config_reply_total(self, v, load=False):
    """
    Setter method for get_config_reply_total, mapped from YANG variable /statistics_protocol_state/get_config_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_config_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_config_reply_total() directly.

    YANG Description: get_config reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-total", rest_name="get-config-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_config_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-total", rest_name="get-config-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_config_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_config_reply_total(self):
    self.__get_config_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-total", rest_name="get-config-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_config_req_last(self):
    """
    Getter method for get_config_req_last, mapped from YANG variable /statistics_protocol_state/get_config_req_last (uint64)

    YANG Description: get_config req since last clear
    """
    return self.__get_config_req_last
      
  def _set_get_config_req_last(self, v, load=False):
    """
    Setter method for get_config_req_last, mapped from YANG variable /statistics_protocol_state/get_config_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_config_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_config_req_last() directly.

    YANG Description: get_config req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-last", rest_name="get-config-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_config_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-last", rest_name="get-config-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_config_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_config_req_last(self):
    self.__get_config_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-req-last", rest_name="get-config-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_config_reply_last(self):
    """
    Getter method for get_config_reply_last, mapped from YANG variable /statistics_protocol_state/get_config_reply_last (uint64)

    YANG Description: get_config reply since last clear
    """
    return self.__get_config_reply_last
      
  def _set_get_config_reply_last(self, v, load=False):
    """
    Setter method for get_config_reply_last, mapped from YANG variable /statistics_protocol_state/get_config_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_config_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_config_reply_last() directly.

    YANG Description: get_config reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-last", rest_name="get-config-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_config_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-last", rest_name="get-config-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_config_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_config_reply_last(self):
    self.__get_config_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-config-reply-last", rest_name="get-config-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_set_config_total(self):
    """
    Getter method for set_config_total, mapped from YANG variable /statistics_protocol_state/set_config_total (uint64)

    YANG Description: set config total
    """
    return self.__set_config_total
      
  def _set_set_config_total(self, v, load=False):
    """
    Setter method for set_config_total, mapped from YANG variable /statistics_protocol_state/set_config_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_config_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_config_total() directly.

    YANG Description: set config total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-total", rest_name="set-config-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_config_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-total", rest_name="set-config-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__set_config_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_config_total(self):
    self.__set_config_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-total", rest_name="set-config-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_set_config_last(self):
    """
    Getter method for set_config_last, mapped from YANG variable /statistics_protocol_state/set_config_last (uint64)

    YANG Description: set config since last clear
    """
    return self.__set_config_last
      
  def _set_set_config_last(self, v, load=False):
    """
    Setter method for set_config_last, mapped from YANG variable /statistics_protocol_state/set_config_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_config_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_config_last() directly.

    YANG Description: set config since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-last", rest_name="set-config-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_config_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-last", rest_name="set-config-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__set_config_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_config_last(self):
    self.__set_config_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-config-last", rest_name="set-config-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_packet_in_total(self):
    """
    Getter method for packet_in_total, mapped from YANG variable /statistics_protocol_state/packet_in_total (uint64)

    YANG Description: packet_in total
    """
    return self.__packet_in_total
      
  def _set_packet_in_total(self, v, load=False):
    """
    Setter method for packet_in_total, mapped from YANG variable /statistics_protocol_state/packet_in_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_in_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_in_total() directly.

    YANG Description: packet_in total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-total", rest_name="packet-in-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_in_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-total", rest_name="packet-in-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__packet_in_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_in_total(self):
    self.__packet_in_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-total", rest_name="packet-in-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_packet_in_last(self):
    """
    Getter method for packet_in_last, mapped from YANG variable /statistics_protocol_state/packet_in_last (uint64)

    YANG Description: packet_in since last clear
    """
    return self.__packet_in_last
      
  def _set_packet_in_last(self, v, load=False):
    """
    Setter method for packet_in_last, mapped from YANG variable /statistics_protocol_state/packet_in_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_in_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_in_last() directly.

    YANG Description: packet_in since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-last", rest_name="packet-in-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_in_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-last", rest_name="packet-in-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__packet_in_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_in_last(self):
    self.__packet_in_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-in-last", rest_name="packet-in-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_flow_removed_total(self):
    """
    Getter method for flow_removed_total, mapped from YANG variable /statistics_protocol_state/flow_removed_total (uint64)

    YANG Description: flow_removed total
    """
    return self.__flow_removed_total
      
  def _set_flow_removed_total(self, v, load=False):
    """
    Setter method for flow_removed_total, mapped from YANG variable /statistics_protocol_state/flow_removed_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_removed_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_removed_total() directly.

    YANG Description: flow_removed total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-total", rest_name="flow-removed-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_removed_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-total", rest_name="flow-removed-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__flow_removed_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_removed_total(self):
    self.__flow_removed_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-total", rest_name="flow-removed-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_flow_removed_last(self):
    """
    Getter method for flow_removed_last, mapped from YANG variable /statistics_protocol_state/flow_removed_last (uint64)

    YANG Description: flow_removed since last clear
    """
    return self.__flow_removed_last
      
  def _set_flow_removed_last(self, v, load=False):
    """
    Setter method for flow_removed_last, mapped from YANG variable /statistics_protocol_state/flow_removed_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_removed_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_removed_last() directly.

    YANG Description: flow_removed since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-last", rest_name="flow-removed-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_removed_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-last", rest_name="flow-removed-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__flow_removed_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_removed_last(self):
    self.__flow_removed_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-removed-last", rest_name="flow-removed-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_port_status_total(self):
    """
    Getter method for port_status_total, mapped from YANG variable /statistics_protocol_state/port_status_total (uint64)

    YANG Description: port_status  total
    """
    return self.__port_status_total
      
  def _set_port_status_total(self, v, load=False):
    """
    Setter method for port_status_total, mapped from YANG variable /statistics_protocol_state/port_status_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_status_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_status_total() directly.

    YANG Description: port_status  total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-total", rest_name="port-status-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_status_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-total", rest_name="port-status-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__port_status_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_status_total(self):
    self.__port_status_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-total", rest_name="port-status-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_port_status_last(self):
    """
    Getter method for port_status_last, mapped from YANG variable /statistics_protocol_state/port_status_last (uint64)

    YANG Description: port_status  since last clear
    """
    return self.__port_status_last
      
  def _set_port_status_last(self, v, load=False):
    """
    Setter method for port_status_last, mapped from YANG variable /statistics_protocol_state/port_status_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_status_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_status_last() directly.

    YANG Description: port_status  since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-last", rest_name="port-status-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_status_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-last", rest_name="port-status-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__port_status_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_status_last(self):
    self.__port_status_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="port-status-last", rest_name="port-status-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_error_total(self):
    """
    Getter method for error_total, mapped from YANG variable /statistics_protocol_state/error_total (uint64)

    YANG Description: error total
    """
    return self.__error_total
      
  def _set_error_total(self, v, load=False):
    """
    Setter method for error_total, mapped from YANG variable /statistics_protocol_state/error_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_total() directly.

    YANG Description: error total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-total", rest_name="error-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-total", rest_name="error-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__error_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_total(self):
    self.__error_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-total", rest_name="error-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_error_last(self):
    """
    Getter method for error_last, mapped from YANG variable /statistics_protocol_state/error_last (uint64)

    YANG Description: error since last clear
    """
    return self.__error_last
      
  def _set_error_last(self, v, load=False):
    """
    Setter method for error_last, mapped from YANG variable /statistics_protocol_state/error_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_error_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_error_last() directly.

    YANG Description: error since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-last", rest_name="error-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """error_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-last", rest_name="error-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__error_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_error_last(self):
    self.__error_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="error-last", rest_name="error-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_multipart_req_total(self):
    """
    Getter method for multipart_req_total, mapped from YANG variable /statistics_protocol_state/multipart_req_total (uint64)

    YANG Description: multipart req total
    """
    return self.__multipart_req_total
      
  def _set_multipart_req_total(self, v, load=False):
    """
    Setter method for multipart_req_total, mapped from YANG variable /statistics_protocol_state/multipart_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipart_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipart_req_total() directly.

    YANG Description: multipart req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-total", rest_name="multipart-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipart_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-total", rest_name="multipart-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__multipart_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipart_req_total(self):
    self.__multipart_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-total", rest_name="multipart-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_multipart_reply_total(self):
    """
    Getter method for multipart_reply_total, mapped from YANG variable /statistics_protocol_state/multipart_reply_total (uint64)

    YANG Description: multipart reply total
    """
    return self.__multipart_reply_total
      
  def _set_multipart_reply_total(self, v, load=False):
    """
    Setter method for multipart_reply_total, mapped from YANG variable /statistics_protocol_state/multipart_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipart_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipart_reply_total() directly.

    YANG Description: multipart reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-total", rest_name="multipart-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipart_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-total", rest_name="multipart-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__multipart_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipart_reply_total(self):
    self.__multipart_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-total", rest_name="multipart-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_multipart_req_last(self):
    """
    Getter method for multipart_req_last, mapped from YANG variable /statistics_protocol_state/multipart_req_last (uint64)

    YANG Description: multipart req since last clear
    """
    return self.__multipart_req_last
      
  def _set_multipart_req_last(self, v, load=False):
    """
    Setter method for multipart_req_last, mapped from YANG variable /statistics_protocol_state/multipart_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipart_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipart_req_last() directly.

    YANG Description: multipart req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-last", rest_name="multipart-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipart_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-last", rest_name="multipart-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__multipart_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipart_req_last(self):
    self.__multipart_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-req-last", rest_name="multipart-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_multipart_reply_last(self):
    """
    Getter method for multipart_reply_last, mapped from YANG variable /statistics_protocol_state/multipart_reply_last (uint64)

    YANG Description: multipart reply since last clear
    """
    return self.__multipart_reply_last
      
  def _set_multipart_reply_last(self, v, load=False):
    """
    Setter method for multipart_reply_last, mapped from YANG variable /statistics_protocol_state/multipart_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multipart_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multipart_reply_last() directly.

    YANG Description: multipart reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-last", rest_name="multipart-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multipart_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-last", rest_name="multipart-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__multipart_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multipart_reply_last(self):
    self.__multipart_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="multipart-reply-last", rest_name="multipart-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_packet_out_total(self):
    """
    Getter method for packet_out_total, mapped from YANG variable /statistics_protocol_state/packet_out_total (uint64)

    YANG Description: packet_out total
    """
    return self.__packet_out_total
      
  def _set_packet_out_total(self, v, load=False):
    """
    Setter method for packet_out_total, mapped from YANG variable /statistics_protocol_state/packet_out_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_out_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_out_total() directly.

    YANG Description: packet_out total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-total", rest_name="packet-out-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_out_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-total", rest_name="packet-out-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__packet_out_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_out_total(self):
    self.__packet_out_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-total", rest_name="packet-out-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_packet_out_last(self):
    """
    Getter method for packet_out_last, mapped from YANG variable /statistics_protocol_state/packet_out_last (uint64)

    YANG Description: packet_out since last clear
    """
    return self.__packet_out_last
      
  def _set_packet_out_last(self, v, load=False):
    """
    Setter method for packet_out_last, mapped from YANG variable /statistics_protocol_state/packet_out_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_out_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_out_last() directly.

    YANG Description: packet_out since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-last", rest_name="packet-out-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_out_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-last", rest_name="packet-out-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__packet_out_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_out_last(self):
    self.__packet_out_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="packet-out-last", rest_name="packet-out-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_flow_mod_total(self):
    """
    Getter method for flow_mod_total, mapped from YANG variable /statistics_protocol_state/flow_mod_total (uint64)

    YANG Description: flow_mod total
    """
    return self.__flow_mod_total
      
  def _set_flow_mod_total(self, v, load=False):
    """
    Setter method for flow_mod_total, mapped from YANG variable /statistics_protocol_state/flow_mod_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_mod_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_mod_total() directly.

    YANG Description: flow_mod total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-total", rest_name="flow-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_mod_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-total", rest_name="flow-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__flow_mod_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_mod_total(self):
    self.__flow_mod_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-total", rest_name="flow-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_flow_mod_last(self):
    """
    Getter method for flow_mod_last, mapped from YANG variable /statistics_protocol_state/flow_mod_last (uint64)

    YANG Description: flow_mod since last clear
    """
    return self.__flow_mod_last
      
  def _set_flow_mod_last(self, v, load=False):
    """
    Setter method for flow_mod_last, mapped from YANG variable /statistics_protocol_state/flow_mod_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_mod_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_mod_last() directly.

    YANG Description: flow_mod since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-last", rest_name="flow-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_mod_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-last", rest_name="flow-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__flow_mod_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_mod_last(self):
    self.__flow_mod_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="flow-mod-last", rest_name="flow-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_group_mod_total(self):
    """
    Getter method for group_mod_total, mapped from YANG variable /statistics_protocol_state/group_mod_total (uint64)

    YANG Description: group_mod total
    """
    return self.__group_mod_total
      
  def _set_group_mod_total(self, v, load=False):
    """
    Setter method for group_mod_total, mapped from YANG variable /statistics_protocol_state/group_mod_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_mod_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_mod_total() directly.

    YANG Description: group_mod total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-total", rest_name="group-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_mod_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-total", rest_name="group-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__group_mod_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_mod_total(self):
    self.__group_mod_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-total", rest_name="group-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_group_mod_last(self):
    """
    Getter method for group_mod_last, mapped from YANG variable /statistics_protocol_state/group_mod_last (uint64)

    YANG Description: group_mod since last clear
    """
    return self.__group_mod_last
      
  def _set_group_mod_last(self, v, load=False):
    """
    Setter method for group_mod_last, mapped from YANG variable /statistics_protocol_state/group_mod_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_mod_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_mod_last() directly.

    YANG Description: group_mod since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-last", rest_name="group-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_mod_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-last", rest_name="group-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__group_mod_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_mod_last(self):
    self.__group_mod_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="group-mod-last", rest_name="group-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_meter_mod_total(self):
    """
    Getter method for meter_mod_total, mapped from YANG variable /statistics_protocol_state/meter_mod_total (uint64)

    YANG Description: meter_mod total
    """
    return self.__meter_mod_total
      
  def _set_meter_mod_total(self, v, load=False):
    """
    Setter method for meter_mod_total, mapped from YANG variable /statistics_protocol_state/meter_mod_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_meter_mod_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_meter_mod_total() directly.

    YANG Description: meter_mod total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-total", rest_name="meter-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """meter_mod_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-total", rest_name="meter-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__meter_mod_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_meter_mod_total(self):
    self.__meter_mod_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-total", rest_name="meter-mod-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_meter_mod_last(self):
    """
    Getter method for meter_mod_last, mapped from YANG variable /statistics_protocol_state/meter_mod_last (uint64)

    YANG Description: meter_mod since last clear
    """
    return self.__meter_mod_last
      
  def _set_meter_mod_last(self, v, load=False):
    """
    Setter method for meter_mod_last, mapped from YANG variable /statistics_protocol_state/meter_mod_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_meter_mod_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_meter_mod_last() directly.

    YANG Description: meter_mod since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-last", rest_name="meter-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """meter_mod_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-last", rest_name="meter-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__meter_mod_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_meter_mod_last(self):
    self.__meter_mod_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="meter-mod-last", rest_name="meter-mod-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_barrier_req_total(self):
    """
    Getter method for barrier_req_total, mapped from YANG variable /statistics_protocol_state/barrier_req_total (uint64)

    YANG Description: barrier req total
    """
    return self.__barrier_req_total
      
  def _set_barrier_req_total(self, v, load=False):
    """
    Setter method for barrier_req_total, mapped from YANG variable /statistics_protocol_state/barrier_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_barrier_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_barrier_req_total() directly.

    YANG Description: barrier req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-total", rest_name="barrier-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """barrier_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-total", rest_name="barrier-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__barrier_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_barrier_req_total(self):
    self.__barrier_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-total", rest_name="barrier-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_barrier_reply_total(self):
    """
    Getter method for barrier_reply_total, mapped from YANG variable /statistics_protocol_state/barrier_reply_total (uint64)

    YANG Description: barrier reply total
    """
    return self.__barrier_reply_total
      
  def _set_barrier_reply_total(self, v, load=False):
    """
    Setter method for barrier_reply_total, mapped from YANG variable /statistics_protocol_state/barrier_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_barrier_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_barrier_reply_total() directly.

    YANG Description: barrier reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-total", rest_name="barrier-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """barrier_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-total", rest_name="barrier-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__barrier_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_barrier_reply_total(self):
    self.__barrier_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-total", rest_name="barrier-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_barrier_req_last(self):
    """
    Getter method for barrier_req_last, mapped from YANG variable /statistics_protocol_state/barrier_req_last (uint64)

    YANG Description: barrier req since last clear
    """
    return self.__barrier_req_last
      
  def _set_barrier_req_last(self, v, load=False):
    """
    Setter method for barrier_req_last, mapped from YANG variable /statistics_protocol_state/barrier_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_barrier_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_barrier_req_last() directly.

    YANG Description: barrier req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-last", rest_name="barrier-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """barrier_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-last", rest_name="barrier-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__barrier_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_barrier_req_last(self):
    self.__barrier_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-req-last", rest_name="barrier-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_barrier_reply_last(self):
    """
    Getter method for barrier_reply_last, mapped from YANG variable /statistics_protocol_state/barrier_reply_last (uint64)

    YANG Description: barrier reply since last clear
    """
    return self.__barrier_reply_last
      
  def _set_barrier_reply_last(self, v, load=False):
    """
    Setter method for barrier_reply_last, mapped from YANG variable /statistics_protocol_state/barrier_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_barrier_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_barrier_reply_last() directly.

    YANG Description: barrier reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-last", rest_name="barrier-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """barrier_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-last", rest_name="barrier-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__barrier_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_barrier_reply_last(self):
    self.__barrier_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="barrier-reply-last", rest_name="barrier-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_role_req_total(self):
    """
    Getter method for role_req_total, mapped from YANG variable /statistics_protocol_state/role_req_total (uint64)

    YANG Description: role req total
    """
    return self.__role_req_total
      
  def _set_role_req_total(self, v, load=False):
    """
    Setter method for role_req_total, mapped from YANG variable /statistics_protocol_state/role_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role_req_total() directly.

    YANG Description: role req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-total", rest_name="role-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-total", rest_name="role-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__role_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role_req_total(self):
    self.__role_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-total", rest_name="role-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_role_reply_total(self):
    """
    Getter method for role_reply_total, mapped from YANG variable /statistics_protocol_state/role_reply_total (uint64)

    YANG Description: role reply total
    """
    return self.__role_reply_total
      
  def _set_role_reply_total(self, v, load=False):
    """
    Setter method for role_reply_total, mapped from YANG variable /statistics_protocol_state/role_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role_reply_total() directly.

    YANG Description: role reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-total", rest_name="role-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-total", rest_name="role-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__role_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role_reply_total(self):
    self.__role_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-total", rest_name="role-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_role_req_last(self):
    """
    Getter method for role_req_last, mapped from YANG variable /statistics_protocol_state/role_req_last (uint64)

    YANG Description: role req since last clear
    """
    return self.__role_req_last
      
  def _set_role_req_last(self, v, load=False):
    """
    Setter method for role_req_last, mapped from YANG variable /statistics_protocol_state/role_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role_req_last() directly.

    YANG Description: role req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-last", rest_name="role-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-last", rest_name="role-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__role_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role_req_last(self):
    self.__role_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-req-last", rest_name="role-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_role_reply_last(self):
    """
    Getter method for role_reply_last, mapped from YANG variable /statistics_protocol_state/role_reply_last (uint64)

    YANG Description: role reply since last clear
    """
    return self.__role_reply_last
      
  def _set_role_reply_last(self, v, load=False):
    """
    Setter method for role_reply_last, mapped from YANG variable /statistics_protocol_state/role_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_role_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_role_reply_last() directly.

    YANG Description: role reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-last", rest_name="role-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """role_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-last", rest_name="role-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__role_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_role_reply_last(self):
    self.__role_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="role-reply-last", rest_name="role-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_async_req_total(self):
    """
    Getter method for get_async_req_total, mapped from YANG variable /statistics_protocol_state/get_async_req_total (uint64)

    YANG Description: get_async req total
    """
    return self.__get_async_req_total
      
  def _set_get_async_req_total(self, v, load=False):
    """
    Setter method for get_async_req_total, mapped from YANG variable /statistics_protocol_state/get_async_req_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_async_req_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_async_req_total() directly.

    YANG Description: get_async req total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-total", rest_name="get-async-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_async_req_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-total", rest_name="get-async-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_async_req_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_async_req_total(self):
    self.__get_async_req_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-total", rest_name="get-async-req-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_async_reply_total(self):
    """
    Getter method for get_async_reply_total, mapped from YANG variable /statistics_protocol_state/get_async_reply_total (uint64)

    YANG Description: get_async reply total
    """
    return self.__get_async_reply_total
      
  def _set_get_async_reply_total(self, v, load=False):
    """
    Setter method for get_async_reply_total, mapped from YANG variable /statistics_protocol_state/get_async_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_async_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_async_reply_total() directly.

    YANG Description: get_async reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-total", rest_name="get-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_async_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-total", rest_name="get-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_async_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_async_reply_total(self):
    self.__get_async_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-total", rest_name="get-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_async_req_last(self):
    """
    Getter method for get_async_req_last, mapped from YANG variable /statistics_protocol_state/get_async_req_last (uint64)

    YANG Description: get_async req since last clear
    """
    return self.__get_async_req_last
      
  def _set_get_async_req_last(self, v, load=False):
    """
    Setter method for get_async_req_last, mapped from YANG variable /statistics_protocol_state/get_async_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_async_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_async_req_last() directly.

    YANG Description: get_async req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-last", rest_name="get-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_async_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-last", rest_name="get-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_async_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_async_req_last(self):
    self.__get_async_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-req-last", rest_name="get-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_get_async_reply_last(self):
    """
    Getter method for get_async_reply_last, mapped from YANG variable /statistics_protocol_state/get_async_reply_last (uint64)

    YANG Description: get_async reply since last clear
    """
    return self.__get_async_reply_last
      
  def _set_get_async_reply_last(self, v, load=False):
    """
    Setter method for get_async_reply_last, mapped from YANG variable /statistics_protocol_state/get_async_reply_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_async_reply_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_async_reply_last() directly.

    YANG Description: get_async reply since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-last", rest_name="get-async-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_async_reply_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-last", rest_name="get-async-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__get_async_reply_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_async_reply_last(self):
    self.__get_async_reply_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="get-async-reply-last", rest_name="get-async-reply-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_set_async_reply_total(self):
    """
    Getter method for set_async_reply_total, mapped from YANG variable /statistics_protocol_state/set_async_reply_total (uint64)

    YANG Description: set_async reply total
    """
    return self.__set_async_reply_total
      
  def _set_set_async_reply_total(self, v, load=False):
    """
    Setter method for set_async_reply_total, mapped from YANG variable /statistics_protocol_state/set_async_reply_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_async_reply_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_async_reply_total() directly.

    YANG Description: set_async reply total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-reply-total", rest_name="set-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_async_reply_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-reply-total", rest_name="set-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__set_async_reply_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_async_reply_total(self):
    self.__set_async_reply_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-reply-total", rest_name="set-async-reply-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_set_async_req_last(self):
    """
    Getter method for set_async_req_last, mapped from YANG variable /statistics_protocol_state/set_async_req_last (uint64)

    YANG Description: set_async req since last clear
    """
    return self.__set_async_req_last
      
  def _set_set_async_req_last(self, v, load=False):
    """
    Setter method for set_async_req_last, mapped from YANG variable /statistics_protocol_state/set_async_req_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_async_req_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_async_req_last() directly.

    YANG Description: set_async req since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-req-last", rest_name="set-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_async_req_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-req-last", rest_name="set-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__set_async_req_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_async_req_last(self):
    self.__set_async_req_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="set-async-req-last", rest_name="set-async-req-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_total_rx_total(self):
    """
    Getter method for total_rx_total, mapped from YANG variable /statistics_protocol_state/total_rx_total (uint64)

    YANG Description: total Rx total
    """
    return self.__total_rx_total
      
  def _set_total_rx_total(self, v, load=False):
    """
    Setter method for total_rx_total, mapped from YANG variable /statistics_protocol_state/total_rx_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_rx_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_rx_total() directly.

    YANG Description: total Rx total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-total", rest_name="total-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_rx_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-total", rest_name="total-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__total_rx_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_rx_total(self):
    self.__total_rx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-total", rest_name="total-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_total_tx_total(self):
    """
    Getter method for total_tx_total, mapped from YANG variable /statistics_protocol_state/total_tx_total (uint64)

    YANG Description: total Tx total
    """
    return self.__total_tx_total
      
  def _set_total_tx_total(self, v, load=False):
    """
    Setter method for total_tx_total, mapped from YANG variable /statistics_protocol_state/total_tx_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_tx_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_tx_total() directly.

    YANG Description: total Tx total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-total", rest_name="total-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_tx_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-total", rest_name="total-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__total_tx_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_tx_total(self):
    self.__total_tx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-total", rest_name="total-tx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_total_rx_last(self):
    """
    Getter method for total_rx_last, mapped from YANG variable /statistics_protocol_state/total_rx_last (uint64)

    YANG Description: total Rx since last clear
    """
    return self.__total_rx_last
      
  def _set_total_rx_last(self, v, load=False):
    """
    Setter method for total_rx_last, mapped from YANG variable /statistics_protocol_state/total_rx_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_rx_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_rx_last() directly.

    YANG Description: total Rx since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-last", rest_name="total-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_rx_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-last", rest_name="total-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__total_rx_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_rx_last(self):
    self.__total_rx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-rx-last", rest_name="total-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_total_tx_last(self):
    """
    Getter method for total_tx_last, mapped from YANG variable /statistics_protocol_state/total_tx_last (uint64)

    YANG Description: total Tx since last clear
    """
    return self.__total_tx_last
      
  def _set_total_tx_last(self, v, load=False):
    """
    Setter method for total_tx_last, mapped from YANG variable /statistics_protocol_state/total_tx_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_tx_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_tx_last() directly.

    YANG Description: total Tx since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-last", rest_name="total-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_tx_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-last", rest_name="total-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__total_tx_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_tx_last(self):
    self.__total_tx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-tx-last", rest_name="total-tx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_unknown_rx_total(self):
    """
    Getter method for unknown_rx_total, mapped from YANG variable /statistics_protocol_state/unknown_rx_total (uint64)

    YANG Description: unknown_rx total
    """
    return self.__unknown_rx_total
      
  def _set_unknown_rx_total(self, v, load=False):
    """
    Setter method for unknown_rx_total, mapped from YANG variable /statistics_protocol_state/unknown_rx_total (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_rx_total is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_rx_total() directly.

    YANG Description: unknown_rx total
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-total", rest_name="unknown-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_rx_total must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-total", rest_name="unknown-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__unknown_rx_total = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_rx_total(self):
    self.__unknown_rx_total = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-total", rest_name="unknown-rx-total", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)


  def _get_unknown_rx_last(self):
    """
    Getter method for unknown_rx_last, mapped from YANG variable /statistics_protocol_state/unknown_rx_last (uint64)

    YANG Description: unknown_rx since last clear
    """
    return self.__unknown_rx_last
      
  def _set_unknown_rx_last(self, v, load=False):
    """
    Setter method for unknown_rx_last, mapped from YANG variable /statistics_protocol_state/unknown_rx_last (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unknown_rx_last is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unknown_rx_last() directly.

    YANG Description: unknown_rx since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-last", rest_name="unknown-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unknown_rx_last must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-last", rest_name="unknown-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)""",
        })

    self.__unknown_rx_last = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unknown_rx_last(self):
    self.__unknown_rx_last = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="unknown-rx-last", rest_name="unknown-rx-last", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint64', is_config=False)

  connection_name = __builtin__.property(_get_connection_name)
  hello_rx_total = __builtin__.property(_get_hello_rx_total)
  hello_tx_total = __builtin__.property(_get_hello_tx_total)
  hello_rx_last = __builtin__.property(_get_hello_rx_last)
  hello_tx_last = __builtin__.property(_get_hello_tx_last)
  echo_req_total = __builtin__.property(_get_echo_req_total)
  echo_reply_total = __builtin__.property(_get_echo_reply_total)
  echo_req_last = __builtin__.property(_get_echo_req_last)
  echo_reply_last = __builtin__.property(_get_echo_reply_last)
  experiment_total = __builtin__.property(_get_experiment_total)
  experiment_last = __builtin__.property(_get_experiment_last)
  feature_req_total = __builtin__.property(_get_feature_req_total)
  feature_reply_total = __builtin__.property(_get_feature_reply_total)
  feature_req_last = __builtin__.property(_get_feature_req_last)
  feature_reply_last = __builtin__.property(_get_feature_reply_last)
  get_config_req_total = __builtin__.property(_get_get_config_req_total)
  get_config_reply_total = __builtin__.property(_get_get_config_reply_total)
  get_config_req_last = __builtin__.property(_get_get_config_req_last)
  get_config_reply_last = __builtin__.property(_get_get_config_reply_last)
  set_config_total = __builtin__.property(_get_set_config_total)
  set_config_last = __builtin__.property(_get_set_config_last)
  packet_in_total = __builtin__.property(_get_packet_in_total)
  packet_in_last = __builtin__.property(_get_packet_in_last)
  flow_removed_total = __builtin__.property(_get_flow_removed_total)
  flow_removed_last = __builtin__.property(_get_flow_removed_last)
  port_status_total = __builtin__.property(_get_port_status_total)
  port_status_last = __builtin__.property(_get_port_status_last)
  error_total = __builtin__.property(_get_error_total)
  error_last = __builtin__.property(_get_error_last)
  multipart_req_total = __builtin__.property(_get_multipart_req_total)
  multipart_reply_total = __builtin__.property(_get_multipart_reply_total)
  multipart_req_last = __builtin__.property(_get_multipart_req_last)
  multipart_reply_last = __builtin__.property(_get_multipart_reply_last)
  packet_out_total = __builtin__.property(_get_packet_out_total)
  packet_out_last = __builtin__.property(_get_packet_out_last)
  flow_mod_total = __builtin__.property(_get_flow_mod_total)
  flow_mod_last = __builtin__.property(_get_flow_mod_last)
  group_mod_total = __builtin__.property(_get_group_mod_total)
  group_mod_last = __builtin__.property(_get_group_mod_last)
  meter_mod_total = __builtin__.property(_get_meter_mod_total)
  meter_mod_last = __builtin__.property(_get_meter_mod_last)
  barrier_req_total = __builtin__.property(_get_barrier_req_total)
  barrier_reply_total = __builtin__.property(_get_barrier_reply_total)
  barrier_req_last = __builtin__.property(_get_barrier_req_last)
  barrier_reply_last = __builtin__.property(_get_barrier_reply_last)
  role_req_total = __builtin__.property(_get_role_req_total)
  role_reply_total = __builtin__.property(_get_role_reply_total)
  role_req_last = __builtin__.property(_get_role_req_last)
  role_reply_last = __builtin__.property(_get_role_reply_last)
  get_async_req_total = __builtin__.property(_get_get_async_req_total)
  get_async_reply_total = __builtin__.property(_get_get_async_reply_total)
  get_async_req_last = __builtin__.property(_get_get_async_req_last)
  get_async_reply_last = __builtin__.property(_get_get_async_reply_last)
  set_async_reply_total = __builtin__.property(_get_set_async_reply_total)
  set_async_req_last = __builtin__.property(_get_set_async_req_last)
  total_rx_total = __builtin__.property(_get_total_rx_total)
  total_tx_total = __builtin__.property(_get_total_tx_total)
  total_rx_last = __builtin__.property(_get_total_rx_last)
  total_tx_last = __builtin__.property(_get_total_tx_last)
  unknown_rx_total = __builtin__.property(_get_unknown_rx_total)
  unknown_rx_last = __builtin__.property(_get_unknown_rx_last)


  _pyangbind_elements = {'connection_name': connection_name, 'hello_rx_total': hello_rx_total, 'hello_tx_total': hello_tx_total, 'hello_rx_last': hello_rx_last, 'hello_tx_last': hello_tx_last, 'echo_req_total': echo_req_total, 'echo_reply_total': echo_reply_total, 'echo_req_last': echo_req_last, 'echo_reply_last': echo_reply_last, 'experiment_total': experiment_total, 'experiment_last': experiment_last, 'feature_req_total': feature_req_total, 'feature_reply_total': feature_reply_total, 'feature_req_last': feature_req_last, 'feature_reply_last': feature_reply_last, 'get_config_req_total': get_config_req_total, 'get_config_reply_total': get_config_reply_total, 'get_config_req_last': get_config_req_last, 'get_config_reply_last': get_config_reply_last, 'set_config_total': set_config_total, 'set_config_last': set_config_last, 'packet_in_total': packet_in_total, 'packet_in_last': packet_in_last, 'flow_removed_total': flow_removed_total, 'flow_removed_last': flow_removed_last, 'port_status_total': port_status_total, 'port_status_last': port_status_last, 'error_total': error_total, 'error_last': error_last, 'multipart_req_total': multipart_req_total, 'multipart_reply_total': multipart_reply_total, 'multipart_req_last': multipart_req_last, 'multipart_reply_last': multipart_reply_last, 'packet_out_total': packet_out_total, 'packet_out_last': packet_out_last, 'flow_mod_total': flow_mod_total, 'flow_mod_last': flow_mod_last, 'group_mod_total': group_mod_total, 'group_mod_last': group_mod_last, 'meter_mod_total': meter_mod_total, 'meter_mod_last': meter_mod_last, 'barrier_req_total': barrier_req_total, 'barrier_reply_total': barrier_reply_total, 'barrier_req_last': barrier_req_last, 'barrier_reply_last': barrier_reply_last, 'role_req_total': role_req_total, 'role_reply_total': role_reply_total, 'role_req_last': role_req_last, 'role_reply_last': role_reply_last, 'get_async_req_total': get_async_req_total, 'get_async_reply_total': get_async_reply_total, 'get_async_req_last': get_async_req_last, 'get_async_reply_last': get_async_reply_last, 'set_async_reply_total': set_async_reply_total, 'set_async_req_last': set_async_req_last, 'total_rx_total': total_rx_total, 'total_tx_total': total_tx_total, 'total_rx_last': total_rx_last, 'total_tx_last': total_tx_last, 'unknown_rx_total': unknown_rx_total, 'unknown_rx_last': unknown_rx_last, }


