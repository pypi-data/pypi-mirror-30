
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class pw_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-pw-profile - based on the path /pw-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__pw_profile_name','__mtu_value','__mtu_enforce','__vc_mode','__flow_label','__control_word',)

  _yang_name = 'pw-profile'
  _rest_name = 'pw-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word", rest_name="control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Control-word', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)
    self.__mtu_value = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'64..15966']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1500), is_leaf=True, yang_name="mtu-value", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'MTU value is used during Psuedo Wire setup signalling', u'alt-name': u'mtu', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='uint32', is_config=True)
    self.__mtu_enforce = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)
    self.__flow_label = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label", rest_name="flow-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Flow-label', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)
    self.__pw_profile_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Pw-profile name (Max Size - 64)', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)
    self.__vc_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'raw-passthrough': {'value': 3}, u'raw': {'value': 2}, u'tag': {'value': 1}},), default=unicode("raw"), is_leaf=True, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'pw-profile']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'pw-profile']

  def _get_pw_profile_name(self):
    """
    Getter method for pw_profile_name, mapped from YANG variable /pw_profile/pw_profile_name (common-def:name-string64)
    """
    return self.__pw_profile_name
      
  def _set_pw_profile_name(self, v, load=False):
    """
    Setter method for pw_profile_name, mapped from YANG variable /pw_profile/pw_profile_name (common-def:name-string64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_profile_name() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Pw-profile name (Max Size - 64)', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_profile_name must be of a type compatible with common-def:name-string64""",
          'defined-type': "common-def:name-string64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Pw-profile name (Max Size - 64)', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)""",
        })

    self.__pw_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_profile_name(self):
    self.__pw_profile_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Pw-profile name (Max Size - 64)', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)


  def _get_mtu_value(self):
    """
    Getter method for mtu_value, mapped from YANG variable /pw_profile/mtu_value (uint32)

    YANG Description: MTU value is used during Psuedo Wire setup signalling.
    """
    return self.__mtu_value
      
  def _set_mtu_value(self, v, load=False):
    """
    Setter method for mtu_value, mapped from YANG variable /pw_profile/mtu_value (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu_value() directly.

    YANG Description: MTU value is used during Psuedo Wire setup signalling.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'64..15966']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1500), is_leaf=True, yang_name="mtu-value", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'MTU value is used during Psuedo Wire setup signalling', u'alt-name': u'mtu', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu_value must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'64..15966']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1500), is_leaf=True, yang_name="mtu-value", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'MTU value is used during Psuedo Wire setup signalling', u'alt-name': u'mtu', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='uint32', is_config=True)""",
        })

    self.__mtu_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu_value(self):
    self.__mtu_value = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'64..15966']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1500), is_leaf=True, yang_name="mtu-value", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'MTU value is used during Psuedo Wire setup signalling', u'alt-name': u'mtu', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='uint32', is_config=True)


  def _get_mtu_enforce(self):
    """
    Getter method for mtu_enforce, mapped from YANG variable /pw_profile/mtu_enforce (boolean)

    YANG Description: Whether to enforce mtu check during PW signalling
    """
    return self.__mtu_enforce
      
  def _set_mtu_enforce(self, v, load=False):
    """
    Setter method for mtu_enforce, mapped from YANG variable /pw_profile/mtu_enforce (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu_enforce is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu_enforce() directly.

    YANG Description: Whether to enforce mtu check during PW signalling
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu_enforce must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)""",
        })

    self.__mtu_enforce = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu_enforce(self):
    self.__mtu_enforce = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)


  def _get_vc_mode(self):
    """
    Getter method for vc_mode, mapped from YANG variable /pw_profile/vc_mode (enumeration)

    YANG Description: Psuedo Wire type
    """
    return self.__vc_mode
      
  def _set_vc_mode(self, v, load=False):
    """
    Setter method for vc_mode, mapped from YANG variable /pw_profile/vc_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_mode() directly.

    YANG Description: Psuedo Wire type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'raw-passthrough': {'value': 3}, u'raw': {'value': 2}, u'tag': {'value': 1}},), default=unicode("raw"), is_leaf=True, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_mode must be of a type compatible with enumeration""",
          'defined-type': "brocade-pw-profile:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'raw-passthrough': {'value': 3}, u'raw': {'value': 2}, u'tag': {'value': 1}},), default=unicode("raw"), is_leaf=True, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='enumeration', is_config=True)""",
        })

    self.__vc_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_mode(self):
    self.__vc_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'raw-passthrough': {'value': 3}, u'raw': {'value': 2}, u'tag': {'value': 1}},), default=unicode("raw"), is_leaf=True, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='enumeration', is_config=True)


  def _get_flow_label(self):
    """
    Getter method for flow_label, mapped from YANG variable /pw_profile/flow_label (empty)

    YANG Description: Enable Flow-label
    """
    return self.__flow_label
      
  def _set_flow_label(self, v, load=False):
    """
    Setter method for flow_label, mapped from YANG variable /pw_profile/flow_label (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_label() directly.

    YANG Description: Enable Flow-label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="flow-label", rest_name="flow-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Flow-label', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_label must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label", rest_name="flow-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Flow-label', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)""",
        })

    self.__flow_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_label(self):
    self.__flow_label = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="flow-label", rest_name="flow-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Flow-label', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)


  def _get_control_word(self):
    """
    Getter method for control_word, mapped from YANG variable /pw_profile/control_word (empty)

    YANG Description: Enable Control-word
    """
    return self.__control_word
      
  def _set_control_word(self, v, load=False):
    """
    Setter method for control_word, mapped from YANG variable /pw_profile/control_word (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_control_word is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_control_word() directly.

    YANG Description: Enable Control-word
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="control-word", rest_name="control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Control-word', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """control_word must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word", rest_name="control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Control-word', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)""",
        })

    self.__control_word = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_control_word(self):
    self.__control_word = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="control-word", rest_name="control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Control-word', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='empty', is_config=True)

  pw_profile_name = __builtin__.property(_get_pw_profile_name, _set_pw_profile_name)
  mtu_value = __builtin__.property(_get_mtu_value, _set_mtu_value)
  mtu_enforce = __builtin__.property(_get_mtu_enforce, _set_mtu_enforce)
  vc_mode = __builtin__.property(_get_vc_mode, _set_vc_mode)
  flow_label = __builtin__.property(_get_flow_label, _set_flow_label)
  control_word = __builtin__.property(_get_control_word, _set_control_word)


  _pyangbind_elements = {'pw_profile_name': pw_profile_name, 'mtu_value': mtu_value, 'mtu_enforce': mtu_enforce, 'vc_mode': vc_mode, 'flow_label': flow_label, 'control_word': control_word, }


