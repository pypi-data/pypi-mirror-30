
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class route_parameter(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-hardware - based on the path /hardware/profile/route/predefined/route_parameter. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__hwopt_enable','__v4fibcomp_enable','__v6fibcomp_enable',)

  _yang_name = 'route_parameter'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__v6fibcomp_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v6fibcomp_enable", rest_name="v6_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv6 FIB Compression in profile', u'alt-name': u'v6_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v6fibcomp-subtype', is_config=True)
    self.__hwopt_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="hwopt_enable", rest_name="hw_opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable HW Optimization in profile', u'alt-name': u'hw_opt'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='hwopt-subtype', is_config=True)
    self.__v4fibcomp_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v4fibcomp_enable", rest_name="v4_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv4 FIB Compression in profile', u'alt-name': u'v4_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v4fibcomp-subtype', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'hardware', u'profile', u'route', u'predefined', u'route_parameter']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'hardware', u'profile', u'route']

  def _get_hwopt_enable(self):
    """
    Getter method for hwopt_enable, mapped from YANG variable /hardware/profile/route/predefined/route_parameter/hwopt_enable (hwopt-subtype)
    """
    return self.__hwopt_enable
      
  def _set_hwopt_enable(self, v, load=False):
    """
    Setter method for hwopt_enable, mapped from YANG variable /hardware/profile/route/predefined/route_parameter/hwopt_enable (hwopt-subtype)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hwopt_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hwopt_enable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="hwopt_enable", rest_name="hw_opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable HW Optimization in profile', u'alt-name': u'hw_opt'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='hwopt-subtype', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hwopt_enable must be of a type compatible with hwopt-subtype""",
          'defined-type': "brocade-hardware:hwopt-subtype",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="hwopt_enable", rest_name="hw_opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable HW Optimization in profile', u'alt-name': u'hw_opt'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='hwopt-subtype', is_config=True)""",
        })

    self.__hwopt_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hwopt_enable(self):
    self.__hwopt_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="hwopt_enable", rest_name="hw_opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable HW Optimization in profile', u'alt-name': u'hw_opt'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='hwopt-subtype', is_config=True)


  def _get_v4fibcomp_enable(self):
    """
    Getter method for v4fibcomp_enable, mapped from YANG variable /hardware/profile/route/predefined/route_parameter/v4fibcomp_enable (v4fibcomp-subtype)
    """
    return self.__v4fibcomp_enable
      
  def _set_v4fibcomp_enable(self, v, load=False):
    """
    Setter method for v4fibcomp_enable, mapped from YANG variable /hardware/profile/route/predefined/route_parameter/v4fibcomp_enable (v4fibcomp-subtype)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v4fibcomp_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v4fibcomp_enable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v4fibcomp_enable", rest_name="v4_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv4 FIB Compression in profile', u'alt-name': u'v4_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v4fibcomp-subtype', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v4fibcomp_enable must be of a type compatible with v4fibcomp-subtype""",
          'defined-type': "brocade-hardware:v4fibcomp-subtype",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v4fibcomp_enable", rest_name="v4_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv4 FIB Compression in profile', u'alt-name': u'v4_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v4fibcomp-subtype', is_config=True)""",
        })

    self.__v4fibcomp_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v4fibcomp_enable(self):
    self.__v4fibcomp_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v4fibcomp_enable", rest_name="v4_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv4 FIB Compression in profile', u'alt-name': u'v4_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v4fibcomp-subtype', is_config=True)


  def _get_v6fibcomp_enable(self):
    """
    Getter method for v6fibcomp_enable, mapped from YANG variable /hardware/profile/route/predefined/route_parameter/v6fibcomp_enable (v6fibcomp-subtype)
    """
    return self.__v6fibcomp_enable
      
  def _set_v6fibcomp_enable(self, v, load=False):
    """
    Setter method for v6fibcomp_enable, mapped from YANG variable /hardware/profile/route/predefined/route_parameter/v6fibcomp_enable (v6fibcomp-subtype)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6fibcomp_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6fibcomp_enable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v6fibcomp_enable", rest_name="v6_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv6 FIB Compression in profile', u'alt-name': u'v6_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v6fibcomp-subtype', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6fibcomp_enable must be of a type compatible with v6fibcomp-subtype""",
          'defined-type': "brocade-hardware:v6fibcomp-subtype",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v6fibcomp_enable", rest_name="v6_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv6 FIB Compression in profile', u'alt-name': u'v6_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v6fibcomp-subtype', is_config=True)""",
        })

    self.__v6fibcomp_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6fibcomp_enable(self):
    self.__v6fibcomp_enable = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="v6fibcomp_enable", rest_name="v6_fib_comp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable IPv6 FIB Compression in profile', u'alt-name': u'v6_fib_comp'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='v6fibcomp-subtype', is_config=True)

  hwopt_enable = __builtin__.property(_get_hwopt_enable, _set_hwopt_enable)
  v4fibcomp_enable = __builtin__.property(_get_v4fibcomp_enable, _set_v4fibcomp_enable)
  v6fibcomp_enable = __builtin__.property(_get_v6fibcomp_enable, _set_v6fibcomp_enable)


  _pyangbind_elements = {'hwopt_enable': hwopt_enable, 'v4fibcomp_enable': v4fibcomp_enable, 'v6fibcomp_enable': v6fibcomp_enable, }


