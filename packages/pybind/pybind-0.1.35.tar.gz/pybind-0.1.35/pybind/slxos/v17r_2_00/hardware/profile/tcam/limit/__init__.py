
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class limit(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-hardware - based on the path /hardware/profile/tcam/limit. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__l2l3v4_app','__v6_app','__flex_acl',)

  _yang_name = 'limit'
  _rest_name = 'limit'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__l2l3v4_app = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="l2l3v4-app", rest_name="l2l3v4-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'layer 2/3 IPv4 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)
    self.__flex_acl = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 24576']}), is_leaf=True, yang_name="flex-acl", rest_name="flex-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'flex ACL/user defined keys in ACL'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)
    self.__v6_app = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="v6-app", rest_name="v6-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IPv6 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'hardware', u'profile', u'tcam', u'limit']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'hardware', u'profile', u'tcam', u'limit']

  def _get_l2l3v4_app(self):
    """
    Getter method for l2l3v4_app, mapped from YANG variable /hardware/profile/tcam/limit/l2l3v4_app (uint32)
    """
    return self.__l2l3v4_app
      
  def _set_l2l3v4_app(self, v, load=False):
    """
    Setter method for l2l3v4_app, mapped from YANG variable /hardware/profile/tcam/limit/l2l3v4_app (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2l3v4_app is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2l3v4_app() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="l2l3v4-app", rest_name="l2l3v4-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'layer 2/3 IPv4 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2l3v4_app must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="l2l3v4-app", rest_name="l2l3v4-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'layer 2/3 IPv4 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)""",
        })

    self.__l2l3v4_app = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2l3v4_app(self):
    self.__l2l3v4_app = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="l2l3v4-app", rest_name="l2l3v4-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'layer 2/3 IPv4 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)


  def _get_v6_app(self):
    """
    Getter method for v6_app, mapped from YANG variable /hardware/profile/tcam/limit/v6_app (uint32)
    """
    return self.__v6_app
      
  def _set_v6_app(self, v, load=False):
    """
    Setter method for v6_app, mapped from YANG variable /hardware/profile/tcam/limit/v6_app (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_app is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_app() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="v6-app", rest_name="v6-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IPv6 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_app must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="v6-app", rest_name="v6-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IPv6 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)""",
        })

    self.__v6_app = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_app(self):
    self.__v6_app = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 12288']}), is_leaf=True, yang_name="v6-app", rest_name="v6-app", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IPv6 application set'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)


  def _get_flex_acl(self):
    """
    Getter method for flex_acl, mapped from YANG variable /hardware/profile/tcam/limit/flex_acl (uint32)
    """
    return self.__flex_acl
      
  def _set_flex_acl(self, v, load=False):
    """
    Setter method for flex_acl, mapped from YANG variable /hardware/profile/tcam/limit/flex_acl (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flex_acl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flex_acl() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 24576']}), is_leaf=True, yang_name="flex-acl", rest_name="flex-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'flex ACL/user defined keys in ACL'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flex_acl must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 24576']}), is_leaf=True, yang_name="flex-acl", rest_name="flex-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'flex ACL/user defined keys in ACL'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)""",
        })

    self.__flex_acl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flex_acl(self):
    self.__flex_acl = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 24576']}), is_leaf=True, yang_name="flex-acl", rest_name="flex-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'flex ACL/user defined keys in ACL'}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='uint32', is_config=True)

  l2l3v4_app = __builtin__.property(_get_l2l3v4_app, _set_l2l3v4_app)
  v6_app = __builtin__.property(_get_v6_app, _set_v6_app)
  flex_acl = __builtin__.property(_get_flex_acl, _set_flex_acl)


  _pyangbind_elements = {'l2l3v4_app': l2l3v4_app, 'v6_app': v6_app, 'flex_acl': flex_acl, }


