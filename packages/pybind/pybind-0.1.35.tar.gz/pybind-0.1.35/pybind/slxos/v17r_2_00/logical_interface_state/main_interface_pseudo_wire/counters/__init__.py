
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-nsm-operational - based on the path /logical-interface-state/main-interface-pseudo-wire/counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Lif counters
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__lif_type','__total_lifs','__protocol_status_up_lifs','__binded_lifs','__unbinded_lifs','__implicit_lifs','__explicit_lifs',)

  _yang_name = 'counters'
  _rest_name = 'counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__total_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-lifs", rest_name="total-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__binded_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="binded-lifs", rest_name="binded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__explicit_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="explicit-lifs", rest_name="explicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__unbinded_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unbinded-lifs", rest_name="unbinded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__protocol_status_up_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="protocol-status-up-lifs", rest_name="protocol-status-up-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__lif_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ethernet': {'value': 1}, u'port-channel': {'value': 2}, u'ccep': {'value': 3}},), is_leaf=True, yang_name="lif-type", rest_name="lif-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='intf-type', is_config=False)
    self.__implicit_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="implicit-lifs", rest_name="implicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'logical-interface-state', u'main-interface-pseudo-wire', u'counters']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'logical-interface-state', u'main-interface-pseudo-wire', u'counters']

  def _get_lif_type(self):
    """
    Getter method for lif_type, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/lif_type (intf-type)

    YANG Description: interface type
    """
    return self.__lif_type
      
  def _set_lif_type(self, v, load=False):
    """
    Setter method for lif_type, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/lif_type (intf-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lif_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lif_type() directly.

    YANG Description: interface type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ethernet': {'value': 1}, u'port-channel': {'value': 2}, u'ccep': {'value': 3}},), is_leaf=True, yang_name="lif-type", rest_name="lif-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='intf-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lif_type must be of a type compatible with intf-type""",
          'defined-type': "brocade-nsm-operational:intf-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ethernet': {'value': 1}, u'port-channel': {'value': 2}, u'ccep': {'value': 3}},), is_leaf=True, yang_name="lif-type", rest_name="lif-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='intf-type', is_config=False)""",
        })

    self.__lif_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lif_type(self):
    self.__lif_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ethernet': {'value': 1}, u'port-channel': {'value': 2}, u'ccep': {'value': 3}},), is_leaf=True, yang_name="lif-type", rest_name="lif-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='intf-type', is_config=False)


  def _get_total_lifs(self):
    """
    Getter method for total_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/total_lifs (uint32)

    YANG Description: total Lifs
    """
    return self.__total_lifs
      
  def _set_total_lifs(self, v, load=False):
    """
    Setter method for total_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/total_lifs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_lifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_lifs() directly.

    YANG Description: total Lifs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-lifs", rest_name="total-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_lifs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-lifs", rest_name="total-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__total_lifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_lifs(self):
    self.__total_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-lifs", rest_name="total-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_protocol_status_up_lifs(self):
    """
    Getter method for protocol_status_up_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/protocol_status_up_lifs (uint32)

    YANG Description: Protocol status up lifs
    """
    return self.__protocol_status_up_lifs
      
  def _set_protocol_status_up_lifs(self, v, load=False):
    """
    Setter method for protocol_status_up_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/protocol_status_up_lifs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_status_up_lifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_status_up_lifs() directly.

    YANG Description: Protocol status up lifs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="protocol-status-up-lifs", rest_name="protocol-status-up-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_status_up_lifs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="protocol-status-up-lifs", rest_name="protocol-status-up-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__protocol_status_up_lifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_status_up_lifs(self):
    self.__protocol_status_up_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="protocol-status-up-lifs", rest_name="protocol-status-up-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_binded_lifs(self):
    """
    Getter method for binded_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/binded_lifs (uint32)

    YANG Description: binded lifs
    """
    return self.__binded_lifs
      
  def _set_binded_lifs(self, v, load=False):
    """
    Setter method for binded_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/binded_lifs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binded_lifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binded_lifs() directly.

    YANG Description: binded lifs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="binded-lifs", rest_name="binded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binded_lifs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="binded-lifs", rest_name="binded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__binded_lifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binded_lifs(self):
    self.__binded_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="binded-lifs", rest_name="binded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_unbinded_lifs(self):
    """
    Getter method for unbinded_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/unbinded_lifs (uint32)

    YANG Description: unbinded lifs
    """
    return self.__unbinded_lifs
      
  def _set_unbinded_lifs(self, v, load=False):
    """
    Setter method for unbinded_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/unbinded_lifs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unbinded_lifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unbinded_lifs() directly.

    YANG Description: unbinded lifs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unbinded-lifs", rest_name="unbinded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unbinded_lifs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unbinded-lifs", rest_name="unbinded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unbinded_lifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unbinded_lifs(self):
    self.__unbinded_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unbinded-lifs", rest_name="unbinded-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_implicit_lifs(self):
    """
    Getter method for implicit_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/implicit_lifs (uint32)

    YANG Description: implicit lifs
    """
    return self.__implicit_lifs
      
  def _set_implicit_lifs(self, v, load=False):
    """
    Setter method for implicit_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/implicit_lifs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_implicit_lifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_implicit_lifs() directly.

    YANG Description: implicit lifs
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="implicit-lifs", rest_name="implicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """implicit_lifs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="implicit-lifs", rest_name="implicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__implicit_lifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_implicit_lifs(self):
    self.__implicit_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="implicit-lifs", rest_name="implicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_explicit_lifs(self):
    """
    Getter method for explicit_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/explicit_lifs (uint32)

    YANG Description: explicit lifs
    """
    return self.__explicit_lifs
      
  def _set_explicit_lifs(self, v, load=False):
    """
    Setter method for explicit_lifs, mapped from YANG variable /logical_interface_state/main_interface_pseudo_wire/counters/explicit_lifs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_explicit_lifs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_explicit_lifs() directly.

    YANG Description: explicit lifs
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="explicit-lifs", rest_name="explicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """explicit_lifs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="explicit-lifs", rest_name="explicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__explicit_lifs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_explicit_lifs(self):
    self.__explicit_lifs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="explicit-lifs", rest_name="explicit-lifs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)

  lif_type = __builtin__.property(_get_lif_type)
  total_lifs = __builtin__.property(_get_total_lifs)
  protocol_status_up_lifs = __builtin__.property(_get_protocol_status_up_lifs)
  binded_lifs = __builtin__.property(_get_binded_lifs)
  unbinded_lifs = __builtin__.property(_get_unbinded_lifs)
  implicit_lifs = __builtin__.property(_get_implicit_lifs)
  explicit_lifs = __builtin__.property(_get_explicit_lifs)


  _pyangbind_elements = {'lif_type': lif_type, 'total_lifs': total_lifs, 'protocol_status_up_lifs': protocol_status_up_lifs, 'binded_lifs': binded_lifs, 'unbinded_lifs': unbinded_lifs, 'implicit_lifs': implicit_lifs, 'explicit_lifs': explicit_lifs, }


