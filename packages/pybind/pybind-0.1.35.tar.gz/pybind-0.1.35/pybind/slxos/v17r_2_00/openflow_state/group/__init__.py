
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import group_info_list
class group(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-openflow-operational - based on the path /openflow-state/group. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Group details
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__max_groups','__max_bkts_per_group','__max_actions_per_bucket','__total_groups_all','__total_groups_select','__total_groups_indirect','__total_groups_fast_failover','__group_info_list',)

  _yang_name = 'group'
  _rest_name = 'group'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__group_info_list = YANGDynClass(base=YANGListType("group_id",group_info_list.group_info_list, yang_name="group-info-list", rest_name="group-info-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id', extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}), is_container='list', yang_name="group-info-list", rest_name="group-info-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='list', is_config=False)
    self.__total_groups_indirect = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-indirect", rest_name="total-groups-indirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    self.__total_groups_select = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-select", rest_name="total-groups-select", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    self.__max_bkts_per_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bkts-per-group", rest_name="max-bkts-per-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    self.__max_groups = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-groups", rest_name="max-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    self.__total_groups_all = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-all", rest_name="total-groups-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    self.__max_actions_per_bucket = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-actions-per-bucket", rest_name="max-actions-per-bucket", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    self.__total_groups_fast_failover = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-fast-failover", rest_name="total-groups-fast-failover", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'openflow-state', u'group']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'openflow-state', u'group']

  def _get_max_groups(self):
    """
    Getter method for max_groups, mapped from YANG variable /openflow_state/group/max_groups (uint32)

    YANG Description: Max number of total groups
    """
    return self.__max_groups
      
  def _set_max_groups(self, v, load=False):
    """
    Setter method for max_groups, mapped from YANG variable /openflow_state/group/max_groups (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_groups() directly.

    YANG Description: Max number of total groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-groups", rest_name="max-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_groups must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-groups", rest_name="max-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_groups(self):
    self.__max_groups = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-groups", rest_name="max-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_max_bkts_per_group(self):
    """
    Getter method for max_bkts_per_group, mapped from YANG variable /openflow_state/group/max_bkts_per_group (uint32)

    YANG Description: Max number of buckets per group
    """
    return self.__max_bkts_per_group
      
  def _set_max_bkts_per_group(self, v, load=False):
    """
    Setter method for max_bkts_per_group, mapped from YANG variable /openflow_state/group/max_bkts_per_group (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_bkts_per_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_bkts_per_group() directly.

    YANG Description: Max number of buckets per group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bkts-per-group", rest_name="max-bkts-per-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_bkts_per_group must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bkts-per-group", rest_name="max-bkts-per-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_bkts_per_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_bkts_per_group(self):
    self.__max_bkts_per_group = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-bkts-per-group", rest_name="max-bkts-per-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_max_actions_per_bucket(self):
    """
    Getter method for max_actions_per_bucket, mapped from YANG variable /openflow_state/group/max_actions_per_bucket (uint32)

    YANG Description: Max number of actions per bucket
    """
    return self.__max_actions_per_bucket
      
  def _set_max_actions_per_bucket(self, v, load=False):
    """
    Setter method for max_actions_per_bucket, mapped from YANG variable /openflow_state/group/max_actions_per_bucket (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_actions_per_bucket is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_actions_per_bucket() directly.

    YANG Description: Max number of actions per bucket
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-actions-per-bucket", rest_name="max-actions-per-bucket", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_actions_per_bucket must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-actions-per-bucket", rest_name="max-actions-per-bucket", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_actions_per_bucket = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_actions_per_bucket(self):
    self.__max_actions_per_bucket = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-actions-per-bucket", rest_name="max-actions-per-bucket", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_total_groups_all(self):
    """
    Getter method for total_groups_all, mapped from YANG variable /openflow_state/group/total_groups_all (uint32)

    YANG Description: TOTAL number of groups(Type:ALL) in the system
    """
    return self.__total_groups_all
      
  def _set_total_groups_all(self, v, load=False):
    """
    Setter method for total_groups_all, mapped from YANG variable /openflow_state/group/total_groups_all (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_groups_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_groups_all() directly.

    YANG Description: TOTAL number of groups(Type:ALL) in the system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-all", rest_name="total-groups-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_groups_all must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-all", rest_name="total-groups-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__total_groups_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_groups_all(self):
    self.__total_groups_all = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-all", rest_name="total-groups-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_total_groups_select(self):
    """
    Getter method for total_groups_select, mapped from YANG variable /openflow_state/group/total_groups_select (uint32)

    YANG Description: TOTAL number of groups(Type:SELECT) in the system
    """
    return self.__total_groups_select
      
  def _set_total_groups_select(self, v, load=False):
    """
    Setter method for total_groups_select, mapped from YANG variable /openflow_state/group/total_groups_select (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_groups_select is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_groups_select() directly.

    YANG Description: TOTAL number of groups(Type:SELECT) in the system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-select", rest_name="total-groups-select", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_groups_select must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-select", rest_name="total-groups-select", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__total_groups_select = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_groups_select(self):
    self.__total_groups_select = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-select", rest_name="total-groups-select", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_total_groups_indirect(self):
    """
    Getter method for total_groups_indirect, mapped from YANG variable /openflow_state/group/total_groups_indirect (uint32)

    YANG Description: TOTAL number of groups(Type:Indirect)in the system
    """
    return self.__total_groups_indirect
      
  def _set_total_groups_indirect(self, v, load=False):
    """
    Setter method for total_groups_indirect, mapped from YANG variable /openflow_state/group/total_groups_indirect (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_groups_indirect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_groups_indirect() directly.

    YANG Description: TOTAL number of groups(Type:Indirect)in the system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-indirect", rest_name="total-groups-indirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_groups_indirect must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-indirect", rest_name="total-groups-indirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__total_groups_indirect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_groups_indirect(self):
    self.__total_groups_indirect = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-indirect", rest_name="total-groups-indirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_total_groups_fast_failover(self):
    """
    Getter method for total_groups_fast_failover, mapped from YANG variable /openflow_state/group/total_groups_fast_failover (uint32)

    YANG Description: TOTAL number of groups(Type:Fast Failover)in the system
    """
    return self.__total_groups_fast_failover
      
  def _set_total_groups_fast_failover(self, v, load=False):
    """
    Setter method for total_groups_fast_failover, mapped from YANG variable /openflow_state/group/total_groups_fast_failover (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_groups_fast_failover is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_groups_fast_failover() directly.

    YANG Description: TOTAL number of groups(Type:Fast Failover)in the system
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-fast-failover", rest_name="total-groups-fast-failover", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_groups_fast_failover must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-fast-failover", rest_name="total-groups-fast-failover", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)""",
        })

    self.__total_groups_fast_failover = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_groups_fast_failover(self):
    self.__total_groups_fast_failover = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-groups-fast-failover", rest_name="total-groups-fast-failover", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='uint32', is_config=False)


  def _get_group_info_list(self):
    """
    Getter method for group_info_list, mapped from YANG variable /openflow_state/group/group_info_list (list)
    """
    return self.__group_info_list
      
  def _set_group_info_list(self, v, load=False):
    """
    Setter method for group_info_list, mapped from YANG variable /openflow_state/group/group_info_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_info_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_info_list() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("group_id",group_info_list.group_info_list, yang_name="group-info-list", rest_name="group-info-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id', extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}), is_container='list', yang_name="group-info-list", rest_name="group-info-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_info_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("group_id",group_info_list.group_info_list, yang_name="group-info-list", rest_name="group-info-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id', extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}), is_container='list', yang_name="group-info-list", rest_name="group-info-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='list', is_config=False)""",
        })

    self.__group_info_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_info_list(self):
    self.__group_info_list = YANGDynClass(base=YANGListType("group_id",group_info_list.group_info_list, yang_name="group-info-list", rest_name="group-info-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-id', extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}), is_container='list', yang_name="group-info-list", rest_name="group-info-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'openflow-group-info-group-info-list-2'}}, namespace='urn:brocade.com:mgmt:brocade-openflow-operational', defining_module='brocade-openflow-operational', yang_type='list', is_config=False)

  max_groups = __builtin__.property(_get_max_groups)
  max_bkts_per_group = __builtin__.property(_get_max_bkts_per_group)
  max_actions_per_bucket = __builtin__.property(_get_max_actions_per_bucket)
  total_groups_all = __builtin__.property(_get_total_groups_all)
  total_groups_select = __builtin__.property(_get_total_groups_select)
  total_groups_indirect = __builtin__.property(_get_total_groups_indirect)
  total_groups_fast_failover = __builtin__.property(_get_total_groups_fast_failover)
  group_info_list = __builtin__.property(_get_group_info_list)


  _pyangbind_elements = {'max_groups': max_groups, 'max_bkts_per_group': max_bkts_per_group, 'max_actions_per_bucket': max_actions_per_bucket, 'total_groups_all': total_groups_all, 'total_groups_select': total_groups_select, 'total_groups_indirect': total_groups_indirect, 'total_groups_fast_failover': total_groups_fast_failover, 'group_info_list': group_info_list, }


