
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class best_range(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/route-map/content/match/additional-paths/advertise-set/best-range. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Best number range
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__range_start','__range_end',)

  _yang_name = 'best-range'
  _rest_name = 'best-range'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__range_end = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-end", rest_name="range-end", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL  end-range <1-16>', u'cli-drop-node-name': None, u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best-range-end'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)
    self.__range_start = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-start", rest_name="range-start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'additional-paths-advertise-set-best-range-start', u'cli-drop-node-name': None, u'info': u'DECIMAL   start-range <1-16>', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'route-map', u'content', u'match', u'additional-paths', u'advertise-set', u'best-range']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'route-map', u'match', u'additional-paths', u'advertise-set', u'best-range']

  def _get_range_start(self):
    """
    Getter method for range_start, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best_range/range_start (uint32)

    YANG Description: DECIMAL   start-range <1-16>
    """
    return self.__range_start
      
  def _set_range_start(self, v, load=False):
    """
    Setter method for range_start, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best_range/range_start (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_range_start is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_range_start() directly.

    YANG Description: DECIMAL   start-range <1-16>
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-start", rest_name="range-start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'additional-paths-advertise-set-best-range-start', u'cli-drop-node-name': None, u'info': u'DECIMAL   start-range <1-16>', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """range_start must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-start", rest_name="range-start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'additional-paths-advertise-set-best-range-start', u'cli-drop-node-name': None, u'info': u'DECIMAL   start-range <1-16>', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)""",
        })

    self.__range_start = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_range_start(self):
    self.__range_start = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-start", rest_name="range-start", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'code-name': u'additional-paths-advertise-set-best-range-start', u'cli-drop-node-name': None, u'info': u'DECIMAL   start-range <1-16>', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)


  def _get_range_end(self):
    """
    Getter method for range_end, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best_range/range_end (uint32)

    YANG Description: DECIMAL  end-range <1-16>
    """
    return self.__range_end
      
  def _set_range_end(self, v, load=False):
    """
    Setter method for range_end, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best_range/range_end (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_range_end is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_range_end() directly.

    YANG Description: DECIMAL  end-range <1-16>
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-end", rest_name="range-end", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL  end-range <1-16>', u'cli-drop-node-name': None, u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best-range-end'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """range_end must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-end", rest_name="range-end", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL  end-range <1-16>', u'cli-drop-node-name': None, u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best-range-end'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)""",
        })

    self.__range_end = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_range_end(self):
    self.__range_end = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="range-end", rest_name="range-end", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL  end-range <1-16>', u'cli-drop-node-name': None, u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best-range-end'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)

  range_start = __builtin__.property(_get_range_start, _set_range_start)
  range_end = __builtin__.property(_get_range_end, _set_range_end)


  _pyangbind_elements = {'range_start': range_start, 'range_end': range_end, }


