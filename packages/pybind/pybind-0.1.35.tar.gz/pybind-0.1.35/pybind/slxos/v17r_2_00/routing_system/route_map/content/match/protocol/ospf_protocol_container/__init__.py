
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class ospf_protocol_container(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/route-map/content/match/protocol/ospf-protocol-container. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__protocol_ospf','__ospf_route_type',)

  _yang_name = 'ospf-protocol-container'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__protocol_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="protocol-ospf", rest_name="ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF protocol.', u'alt-name': u'ospf', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)
    self.__ospf_route_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-1': {'value': 1}, u'type-2': {'value': 2}, u'internal': {'value': 3}},), is_leaf=True, yang_name="ospf-route-type", rest_name="ospf-route-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'route-map', u'content', u'match', u'protocol', u'ospf-protocol-container']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'route-map', u'match', u'protocol']

  def _get_protocol_ospf(self):
    """
    Getter method for protocol_ospf, mapped from YANG variable /routing_system/route_map/content/match/protocol/ospf_protocol_container/protocol_ospf (empty)

    YANG Description: OSPF protocol.
    """
    return self.__protocol_ospf
      
  def _set_protocol_ospf(self, v, load=False):
    """
    Setter method for protocol_ospf, mapped from YANG variable /routing_system/route_map/content/match/protocol/ospf_protocol_container/protocol_ospf (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_ospf() directly.

    YANG Description: OSPF protocol.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="protocol-ospf", rest_name="ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF protocol.', u'alt-name': u'ospf', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_ospf must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="protocol-ospf", rest_name="ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF protocol.', u'alt-name': u'ospf', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)""",
        })

    self.__protocol_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_ospf(self):
    self.__protocol_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="protocol-ospf", rest_name="ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF protocol.', u'alt-name': u'ospf', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)


  def _get_ospf_route_type(self):
    """
    Getter method for ospf_route_type, mapped from YANG variable /routing_system/route_map/content/match/protocol/ospf_protocol_container/ospf_route_type (enumeration)
    """
    return self.__ospf_route_type
      
  def _set_ospf_route_type(self, v, load=False):
    """
    Setter method for ospf_route_type, mapped from YANG variable /routing_system/route_map/content/match/protocol/ospf_protocol_container/ospf_route_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ospf_route_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ospf_route_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-1': {'value': 1}, u'type-2': {'value': 2}, u'internal': {'value': 3}},), is_leaf=True, yang_name="ospf-route-type", rest_name="ospf-route-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ospf_route_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-ip-policy:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-1': {'value': 1}, u'type-2': {'value': 2}, u'internal': {'value': 3}},), is_leaf=True, yang_name="ospf-route-type", rest_name="ospf-route-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='enumeration', is_config=True)""",
        })

    self.__ospf_route_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ospf_route_type(self):
    self.__ospf_route_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-1': {'value': 1}, u'type-2': {'value': 2}, u'internal': {'value': 3}},), is_leaf=True, yang_name="ospf-route-type", rest_name="ospf-route-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='enumeration', is_config=True)

  protocol_ospf = __builtin__.property(_get_protocol_ospf, _set_protocol_ospf)
  ospf_route_type = __builtin__.property(_get_ospf_route_type, _set_ospf_route_type)


  _pyangbind_elements = {'protocol_ospf': protocol_ospf, 'ospf_route_type': ospf_route_type, }


