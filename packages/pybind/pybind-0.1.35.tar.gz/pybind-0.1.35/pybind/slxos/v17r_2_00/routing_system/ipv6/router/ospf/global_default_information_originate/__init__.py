
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class global_default_information_originate(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/ipv6/router/ospf/global-default-information-originate. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Control distribution of default information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__global_default_information_originate_always','__global_default_information_originate_metric','__global_default_information_originate_metric_type',)

  _yang_name = 'global-default-information-originate'
  _rest_name = 'default-information-originate'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__global_default_information_originate_always = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="global-default-information-originate-always", rest_name="always", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Always advertise default route', u'alt-name': u'always'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='empty', is_config=True)
    self.__global_default_information_originate_metric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="global-default-information-originate-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric for default route', u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='uint32', is_config=True)
    self.__global_default_information_originate_metric_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type1': {'value': 1}, u'type2': {'value': 2}},), is_leaf=True, yang_name="global-default-information-originate-metric-type", rest_name="metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric type for default route', u'alt-name': u'metric-type'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='ospf:metric-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'ipv6', u'router', u'ospf', u'global-default-information-originate']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ipv6', u'router', u'ospf', u'default-information-originate']

  def _get_global_default_information_originate_always(self):
    """
    Getter method for global_default_information_originate_always, mapped from YANG variable /routing_system/ipv6/router/ospf/global_default_information_originate/global_default_information_originate_always (empty)

    YANG Description: Always advertise default route
    """
    return self.__global_default_information_originate_always
      
  def _set_global_default_information_originate_always(self, v, load=False):
    """
    Setter method for global_default_information_originate_always, mapped from YANG variable /routing_system/ipv6/router/ospf/global_default_information_originate/global_default_information_originate_always (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_global_default_information_originate_always is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_global_default_information_originate_always() directly.

    YANG Description: Always advertise default route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="global-default-information-originate-always", rest_name="always", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Always advertise default route', u'alt-name': u'always'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """global_default_information_originate_always must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="global-default-information-originate-always", rest_name="always", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Always advertise default route', u'alt-name': u'always'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='empty', is_config=True)""",
        })

    self.__global_default_information_originate_always = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_global_default_information_originate_always(self):
    self.__global_default_information_originate_always = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="global-default-information-originate-always", rest_name="always", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Always advertise default route', u'alt-name': u'always'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='empty', is_config=True)


  def _get_global_default_information_originate_metric(self):
    """
    Getter method for global_default_information_originate_metric, mapped from YANG variable /routing_system/ipv6/router/ospf/global_default_information_originate/global_default_information_originate_metric (uint32)

    YANG Description: OSPF metric for default route
    """
    return self.__global_default_information_originate_metric
      
  def _set_global_default_information_originate_metric(self, v, load=False):
    """
    Setter method for global_default_information_originate_metric, mapped from YANG variable /routing_system/ipv6/router/ospf/global_default_information_originate/global_default_information_originate_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_global_default_information_originate_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_global_default_information_originate_metric() directly.

    YANG Description: OSPF metric for default route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="global-default-information-originate-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric for default route', u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """global_default_information_originate_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="global-default-information-originate-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric for default route', u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='uint32', is_config=True)""",
        })

    self.__global_default_information_originate_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_global_default_information_originate_metric(self):
    self.__global_default_information_originate_metric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="global-default-information-originate-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric for default route', u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='uint32', is_config=True)


  def _get_global_default_information_originate_metric_type(self):
    """
    Getter method for global_default_information_originate_metric_type, mapped from YANG variable /routing_system/ipv6/router/ospf/global_default_information_originate/global_default_information_originate_metric_type (ospf:metric-type)

    YANG Description: OSPF metric type for default route
    """
    return self.__global_default_information_originate_metric_type
      
  def _set_global_default_information_originate_metric_type(self, v, load=False):
    """
    Setter method for global_default_information_originate_metric_type, mapped from YANG variable /routing_system/ipv6/router/ospf/global_default_information_originate/global_default_information_originate_metric_type (ospf:metric-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_global_default_information_originate_metric_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_global_default_information_originate_metric_type() directly.

    YANG Description: OSPF metric type for default route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type1': {'value': 1}, u'type2': {'value': 2}},), is_leaf=True, yang_name="global-default-information-originate-metric-type", rest_name="metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric type for default route', u'alt-name': u'metric-type'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='ospf:metric-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """global_default_information_originate_metric_type must be of a type compatible with ospf:metric-type""",
          'defined-type': "ospf:metric-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type1': {'value': 1}, u'type2': {'value': 2}},), is_leaf=True, yang_name="global-default-information-originate-metric-type", rest_name="metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric type for default route', u'alt-name': u'metric-type'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='ospf:metric-type', is_config=True)""",
        })

    self.__global_default_information_originate_metric_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_global_default_information_originate_metric_type(self):
    self.__global_default_information_originate_metric_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type1': {'value': 1}, u'type2': {'value': 2}},), is_leaf=True, yang_name="global-default-information-originate-metric-type", rest_name="metric-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'OSPF metric type for default route', u'alt-name': u'metric-type'}}, namespace='urn:brocade.com:mgmt:brocade-ospfv3', defining_module='brocade-ospfv3', yang_type='ospf:metric-type', is_config=True)

  global_default_information_originate_always = __builtin__.property(_get_global_default_information_originate_always, _set_global_default_information_originate_always)
  global_default_information_originate_metric = __builtin__.property(_get_global_default_information_originate_metric, _set_global_default_information_originate_metric)
  global_default_information_originate_metric_type = __builtin__.property(_get_global_default_information_originate_metric_type, _set_global_default_information_originate_metric_type)


  _pyangbind_elements = {'global_default_information_originate_always': global_default_information_originate_always, 'global_default_information_originate_metric': global_default_information_originate_metric, 'global_default_information_originate_metric_type': global_default_information_originate_metric_type, }


