
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import oam_params
import ping_params
import traceroute_params
class ping_mpls_input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/ping-mpls/input/ping-mpls-input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ping_mpls_rsvp_lsp','__ping_mpls_rsvp_session_src','__ping_mpls_rsvp_session_dst','__ping_mpls_rsvp_session_id','__ping_mpls_ldp_prefix','__ping_mpls_ldp_prefix_address','__oam_params','__ping_params','__traceroute_params',)

  _yang_name = 'ping-mpls-input'
  _rest_name = 'ping-mpls-input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ping_mpls_rsvp_session_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ping-mpls-rsvp-session-id", rest_name="ping-mpls-rsvp-session-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__oam_params = YANGDynClass(base=oam_params.oam_params, is_container='container', presence=False, yang_name="oam-params", rest_name="oam-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__ping_mpls_rsvp_session_dst = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-dst", rest_name="ping-mpls-rsvp-session-dst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    self.__traceroute_params = YANGDynClass(base=traceroute_params.traceroute_params, is_container='container', presence=False, yang_name="traceroute-params", rest_name="traceroute-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__ping_mpls_ldp_prefix_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix-address", rest_name="ping-mpls-ldp-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    self.__ping_mpls_rsvp_session_src = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-src", rest_name="ping-mpls-rsvp-session-src", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    self.__ping_mpls_rsvp_lsp = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="ping-mpls-rsvp-lsp", rest_name="ping-mpls-rsvp-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__ping_mpls_ldp_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix", rest_name="ping-mpls-ldp-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)
    self.__ping_params = YANGDynClass(base=ping_params.ping_params, is_container='container', presence=False, yang_name="ping-params", rest_name="ping-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'ping-mpls', u'input', u'ping-mpls-input']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ping-mpls', u'input', u'ping-mpls-input']

  def _get_ping_mpls_rsvp_lsp(self):
    """
    Getter method for ping_mpls_rsvp_lsp, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_lsp (string)

    YANG Description: Ping mpls rsvp lsp
    """
    return self.__ping_mpls_rsvp_lsp
      
  def _set_ping_mpls_rsvp_lsp(self, v, load=False):
    """
    Setter method for ping_mpls_rsvp_lsp, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_lsp (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls_rsvp_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls_rsvp_lsp() directly.

    YANG Description: Ping mpls rsvp lsp
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="ping-mpls-rsvp-lsp", rest_name="ping-mpls-rsvp-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls_rsvp_lsp must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="ping-mpls-rsvp-lsp", rest_name="ping-mpls-rsvp-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__ping_mpls_rsvp_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls_rsvp_lsp(self):
    self.__ping_mpls_rsvp_lsp = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="ping-mpls-rsvp-lsp", rest_name="ping-mpls-rsvp-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_ping_mpls_rsvp_session_src(self):
    """
    Getter method for ping_mpls_rsvp_session_src, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_session_src (mpls-ipv4-address)

    YANG Description: Ping mpls rsvp session src
    """
    return self.__ping_mpls_rsvp_session_src
      
  def _set_ping_mpls_rsvp_session_src(self, v, load=False):
    """
    Setter method for ping_mpls_rsvp_session_src, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_session_src (mpls-ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls_rsvp_session_src is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls_rsvp_session_src() directly.

    YANG Description: Ping mpls rsvp session src
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-src", rest_name="ping-mpls-rsvp-session-src", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls_rsvp_session_src must be of a type compatible with mpls-ipv4-address""",
          'defined-type': "brocade-mpls:mpls-ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-src", rest_name="ping-mpls-rsvp-session-src", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)""",
        })

    self.__ping_mpls_rsvp_session_src = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls_rsvp_session_src(self):
    self.__ping_mpls_rsvp_session_src = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-src", rest_name="ping-mpls-rsvp-session-src", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)


  def _get_ping_mpls_rsvp_session_dst(self):
    """
    Getter method for ping_mpls_rsvp_session_dst, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_session_dst (mpls-ipv4-address)

    YANG Description: Ping mpls rsvp session dst
    """
    return self.__ping_mpls_rsvp_session_dst
      
  def _set_ping_mpls_rsvp_session_dst(self, v, load=False):
    """
    Setter method for ping_mpls_rsvp_session_dst, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_session_dst (mpls-ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls_rsvp_session_dst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls_rsvp_session_dst() directly.

    YANG Description: Ping mpls rsvp session dst
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-dst", rest_name="ping-mpls-rsvp-session-dst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls_rsvp_session_dst must be of a type compatible with mpls-ipv4-address""",
          'defined-type': "brocade-mpls:mpls-ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-dst", rest_name="ping-mpls-rsvp-session-dst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)""",
        })

    self.__ping_mpls_rsvp_session_dst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls_rsvp_session_dst(self):
    self.__ping_mpls_rsvp_session_dst = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-rsvp-session-dst", rest_name="ping-mpls-rsvp-session-dst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)


  def _get_ping_mpls_rsvp_session_id(self):
    """
    Getter method for ping_mpls_rsvp_session_id, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_session_id (uint32)

    YANG Description: Ping mpls rsvp session id
    """
    return self.__ping_mpls_rsvp_session_id
      
  def _set_ping_mpls_rsvp_session_id(self, v, load=False):
    """
    Setter method for ping_mpls_rsvp_session_id, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_rsvp_session_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls_rsvp_session_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls_rsvp_session_id() directly.

    YANG Description: Ping mpls rsvp session id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ping-mpls-rsvp-session-id", rest_name="ping-mpls-rsvp-session-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls_rsvp_session_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ping-mpls-rsvp-session-id", rest_name="ping-mpls-rsvp-session-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ping_mpls_rsvp_session_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls_rsvp_session_id(self):
    self.__ping_mpls_rsvp_session_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ping-mpls-rsvp-session-id", rest_name="ping-mpls-rsvp-session-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ping_mpls_ldp_prefix(self):
    """
    Getter method for ping_mpls_ldp_prefix, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_ldp_prefix (mpls-ipv4-prefix)

    YANG Description: Ping mpls ldp fec prefix
    """
    return self.__ping_mpls_ldp_prefix
      
  def _set_ping_mpls_ldp_prefix(self, v, load=False):
    """
    Setter method for ping_mpls_ldp_prefix, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_ldp_prefix (mpls-ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls_ldp_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls_ldp_prefix() directly.

    YANG Description: Ping mpls ldp fec prefix
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix", rest_name="ping-mpls-ldp-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls_ldp_prefix must be of a type compatible with mpls-ipv4-prefix""",
          'defined-type': "brocade-mpls:mpls-ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix", rest_name="ping-mpls-ldp-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)""",
        })

    self.__ping_mpls_ldp_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls_ldp_prefix(self):
    self.__ping_mpls_ldp_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix", rest_name="ping-mpls-ldp-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)


  def _get_ping_mpls_ldp_prefix_address(self):
    """
    Getter method for ping_mpls_ldp_prefix_address, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_ldp_prefix_address (mpls-ipv4-address)

    YANG Description: Ping mpls ldp fec address
    """
    return self.__ping_mpls_ldp_prefix_address
      
  def _set_ping_mpls_ldp_prefix_address(self, v, load=False):
    """
    Setter method for ping_mpls_ldp_prefix_address, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_mpls_ldp_prefix_address (mpls-ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls_ldp_prefix_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls_ldp_prefix_address() directly.

    YANG Description: Ping mpls ldp fec address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix-address", rest_name="ping-mpls-ldp-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls_ldp_prefix_address must be of a type compatible with mpls-ipv4-address""",
          'defined-type': "brocade-mpls:mpls-ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix-address", rest_name="ping-mpls-ldp-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)""",
        })

    self.__ping_mpls_ldp_prefix_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls_ldp_prefix_address(self):
    self.__ping_mpls_ldp_prefix_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ping-mpls-ldp-prefix-address", rest_name="ping-mpls-ldp-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)


  def _get_oam_params(self):
    """
    Getter method for oam_params, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/oam_params (container)
    """
    return self.__oam_params
      
  def _set_oam_params(self, v, load=False):
    """
    Setter method for oam_params, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/oam_params (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oam_params is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oam_params() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=oam_params.oam_params, is_container='container', presence=False, yang_name="oam-params", rest_name="oam-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oam_params must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=oam_params.oam_params, is_container='container', presence=False, yang_name="oam-params", rest_name="oam-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__oam_params = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oam_params(self):
    self.__oam_params = YANGDynClass(base=oam_params.oam_params, is_container='container', presence=False, yang_name="oam-params", rest_name="oam-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_ping_params(self):
    """
    Getter method for ping_params, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_params (container)
    """
    return self.__ping_params
      
  def _set_ping_params(self, v, load=False):
    """
    Setter method for ping_params, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/ping_params (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_params is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_params() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ping_params.ping_params, is_container='container', presence=False, yang_name="ping-params", rest_name="ping-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_params must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ping_params.ping_params, is_container='container', presence=False, yang_name="ping-params", rest_name="ping-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__ping_params = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_params(self):
    self.__ping_params = YANGDynClass(base=ping_params.ping_params, is_container='container', presence=False, yang_name="ping-params", rest_name="ping-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_traceroute_params(self):
    """
    Getter method for traceroute_params, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params (container)
    """
    return self.__traceroute_params
      
  def _set_traceroute_params(self, v, load=False):
    """
    Setter method for traceroute_params, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traceroute_params is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traceroute_params() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=traceroute_params.traceroute_params, is_container='container', presence=False, yang_name="traceroute-params", rest_name="traceroute-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traceroute_params must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=traceroute_params.traceroute_params, is_container='container', presence=False, yang_name="traceroute-params", rest_name="traceroute-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__traceroute_params = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traceroute_params(self):
    self.__traceroute_params = YANGDynClass(base=traceroute_params.traceroute_params, is_container='container', presence=False, yang_name="traceroute-params", rest_name="traceroute-params", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

  ping_mpls_rsvp_lsp = __builtin__.property(_get_ping_mpls_rsvp_lsp, _set_ping_mpls_rsvp_lsp)
  ping_mpls_rsvp_session_src = __builtin__.property(_get_ping_mpls_rsvp_session_src, _set_ping_mpls_rsvp_session_src)
  ping_mpls_rsvp_session_dst = __builtin__.property(_get_ping_mpls_rsvp_session_dst, _set_ping_mpls_rsvp_session_dst)
  ping_mpls_rsvp_session_id = __builtin__.property(_get_ping_mpls_rsvp_session_id, _set_ping_mpls_rsvp_session_id)
  ping_mpls_ldp_prefix = __builtin__.property(_get_ping_mpls_ldp_prefix, _set_ping_mpls_ldp_prefix)
  ping_mpls_ldp_prefix_address = __builtin__.property(_get_ping_mpls_ldp_prefix_address, _set_ping_mpls_ldp_prefix_address)
  oam_params = __builtin__.property(_get_oam_params, _set_oam_params)
  ping_params = __builtin__.property(_get_ping_params, _set_ping_params)
  traceroute_params = __builtin__.property(_get_traceroute_params, _set_traceroute_params)


  _pyangbind_elements = {'ping_mpls_rsvp_lsp': ping_mpls_rsvp_lsp, 'ping_mpls_rsvp_session_src': ping_mpls_rsvp_session_src, 'ping_mpls_rsvp_session_dst': ping_mpls_rsvp_session_dst, 'ping_mpls_rsvp_session_id': ping_mpls_rsvp_session_id, 'ping_mpls_ldp_prefix': ping_mpls_ldp_prefix, 'ping_mpls_ldp_prefix_address': ping_mpls_ldp_prefix_address, 'oam_params': oam_params, 'ping_params': ping_params, 'traceroute_params': traceroute_params, }


