
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_mpls_lsp_frr_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-bypass-lsp-debug/output/bypass-lsp/show-mpls-lsp-debug-info/show-mpls-lsp-frr-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__lsp_frr_operational_status','__lsp_frr_operational_status_active','__lsp_frr_down_reason','__lsp_frr_computation_mode_default','__lsp_frr_computation_mode_use_bypass_metric','__lsp_frr_computation_mode_use_bypass_liberal','__lsp_frr_group_computation_mode_default','__lsp_frr_group_computation_mode_add_penalty','__lsp_frr_group_computation_mode_exclude_groups','__lsp_frr_group_computation_mode_high_cost','__lsp_frr_out_port_id','__lsp_frr_out_port_name','__lsp_frr_out_label','__lsp_frr_path_cost','__lsp_frr_bypass_name','__lsp_frr_forwarding_protected_up','__lsp_frr_secondary_swithover_time','__lsp_frr_hold_time',)

  _yang_name = 'show-mpls-lsp-frr-info'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__lsp_frr_computation_mode_use_bypass_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-metric", rest_name="lsp-frr-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_group_computation_mode_add_penalty = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-add-penalty", rest_name="lsp-frr-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-default", rest_name="lsp-frr-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_hold_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-hold-time", rest_name="lsp-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_frr_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-label", rest_name="lsp-frr-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_frr_forwarding_protected_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-forwarding-protected-up", rest_name="lsp-frr-forwarding-protected-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_operational_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status", rest_name="lsp-frr-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_secondary_swithover_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-secondary-swithover-time", rest_name="lsp-frr-secondary-swithover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_frr_computation_mode_use_bypass_liberal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-liberal", rest_name="lsp-frr-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_out_port_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-out-port-name", rest_name="lsp-frr-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__lsp_frr_group_computation_mode_exclude_groups = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-exclude-groups", rest_name="lsp-frr-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_group_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-default", rest_name="lsp-frr-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_group_computation_mode_high_cost = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-high-cost", rest_name="lsp-frr-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-path-cost", rest_name="lsp-frr-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_frr_operational_status_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status-active", rest_name="lsp-frr-operational-status-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_frr_bypass_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-bypass-name", rest_name="lsp-frr-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__lsp_frr_out_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-port-id", rest_name="lsp-frr-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_frr_down_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-down-reason", rest_name="lsp-frr-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-bypass-lsp-debug', u'output', u'bypass-lsp', u'show-mpls-lsp-debug-info', u'show-mpls-lsp-frr-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-bypass-lsp-debug', u'output', u'bypass-lsp']

  def _get_lsp_frr_operational_status(self):
    """
    Getter method for lsp_frr_operational_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_operational_status (boolean)

    YANG Description: LSP detour or backup path operational status
    """
    return self.__lsp_frr_operational_status
      
  def _set_lsp_frr_operational_status(self, v, load=False):
    """
    Setter method for lsp_frr_operational_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_operational_status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_operational_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_operational_status() directly.

    YANG Description: LSP detour or backup path operational status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status", rest_name="lsp-frr-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_operational_status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status", rest_name="lsp-frr-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_operational_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_operational_status(self):
    self.__lsp_frr_operational_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status", rest_name="lsp-frr-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_operational_status_active(self):
    """
    Getter method for lsp_frr_operational_status_active, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_operational_status_active (boolean)

    YANG Description: LSP detour or backup path operational status is active
    """
    return self.__lsp_frr_operational_status_active
      
  def _set_lsp_frr_operational_status_active(self, v, load=False):
    """
    Setter method for lsp_frr_operational_status_active, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_operational_status_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_operational_status_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_operational_status_active() directly.

    YANG Description: LSP detour or backup path operational status is active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status-active", rest_name="lsp-frr-operational-status-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_operational_status_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status-active", rest_name="lsp-frr-operational-status-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_operational_status_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_operational_status_active(self):
    self.__lsp_frr_operational_status_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-operational-status-active", rest_name="lsp-frr-operational-status-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_down_reason(self):
    """
    Getter method for lsp_frr_down_reason, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_down_reason (string)

    YANG Description: LSP detour or backup down reason
    """
    return self.__lsp_frr_down_reason
      
  def _set_lsp_frr_down_reason(self, v, load=False):
    """
    Setter method for lsp_frr_down_reason, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_down_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_down_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_down_reason() directly.

    YANG Description: LSP detour or backup down reason
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lsp-frr-down-reason", rest_name="lsp-frr-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_down_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-down-reason", rest_name="lsp-frr-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__lsp_frr_down_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_down_reason(self):
    self.__lsp_frr_down_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-down-reason", rest_name="lsp-frr-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_lsp_frr_computation_mode_default(self):
    """
    Getter method for lsp_frr_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_computation_mode_default (boolean)

    YANG Description: LSP FRR path computaion mode default
    """
    return self.__lsp_frr_computation_mode_default
      
  def _set_lsp_frr_computation_mode_default(self, v, load=False):
    """
    Setter method for lsp_frr_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_computation_mode_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_computation_mode_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_computation_mode_default() directly.

    YANG Description: LSP FRR path computaion mode default
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-default", rest_name="lsp-frr-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_computation_mode_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-default", rest_name="lsp-frr-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_computation_mode_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_computation_mode_default(self):
    self.__lsp_frr_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-default", rest_name="lsp-frr-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_computation_mode_use_bypass_metric(self):
    """
    Getter method for lsp_frr_computation_mode_use_bypass_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_computation_mode_use_bypass_metric (boolean)

    YANG Description: LSP FRR path computaion mode is use bupass metric
    """
    return self.__lsp_frr_computation_mode_use_bypass_metric
      
  def _set_lsp_frr_computation_mode_use_bypass_metric(self, v, load=False):
    """
    Setter method for lsp_frr_computation_mode_use_bypass_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_computation_mode_use_bypass_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_computation_mode_use_bypass_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_computation_mode_use_bypass_metric() directly.

    YANG Description: LSP FRR path computaion mode is use bupass metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-metric", rest_name="lsp-frr-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_computation_mode_use_bypass_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-metric", rest_name="lsp-frr-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_computation_mode_use_bypass_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_computation_mode_use_bypass_metric(self):
    self.__lsp_frr_computation_mode_use_bypass_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-metric", rest_name="lsp-frr-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_computation_mode_use_bypass_liberal(self):
    """
    Getter method for lsp_frr_computation_mode_use_bypass_liberal, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_computation_mode_use_bypass_liberal (boolean)

    YANG Description: LSP FRR path computaion mode is use bypass liberal
    """
    return self.__lsp_frr_computation_mode_use_bypass_liberal
      
  def _set_lsp_frr_computation_mode_use_bypass_liberal(self, v, load=False):
    """
    Setter method for lsp_frr_computation_mode_use_bypass_liberal, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_computation_mode_use_bypass_liberal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_computation_mode_use_bypass_liberal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_computation_mode_use_bypass_liberal() directly.

    YANG Description: LSP FRR path computaion mode is use bypass liberal
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-liberal", rest_name="lsp-frr-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_computation_mode_use_bypass_liberal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-liberal", rest_name="lsp-frr-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_computation_mode_use_bypass_liberal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_computation_mode_use_bypass_liberal(self):
    self.__lsp_frr_computation_mode_use_bypass_liberal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-computation-mode-use-bypass-liberal", rest_name="lsp-frr-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_group_computation_mode_default(self):
    """
    Getter method for lsp_frr_group_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_default (boolean)

    YANG Description: LSP FRR path computaion group mode default
    """
    return self.__lsp_frr_group_computation_mode_default
      
  def _set_lsp_frr_group_computation_mode_default(self, v, load=False):
    """
    Setter method for lsp_frr_group_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_group_computation_mode_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_group_computation_mode_default() directly.

    YANG Description: LSP FRR path computaion group mode default
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-default", rest_name="lsp-frr-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_group_computation_mode_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-default", rest_name="lsp-frr-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_group_computation_mode_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_group_computation_mode_default(self):
    self.__lsp_frr_group_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-default", rest_name="lsp-frr-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_group_computation_mode_add_penalty(self):
    """
    Getter method for lsp_frr_group_computation_mode_add_penalty, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_add_penalty (boolean)

    YANG Description: LSP FRR path computaion group mode is add penalty
    """
    return self.__lsp_frr_group_computation_mode_add_penalty
      
  def _set_lsp_frr_group_computation_mode_add_penalty(self, v, load=False):
    """
    Setter method for lsp_frr_group_computation_mode_add_penalty, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_add_penalty (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_group_computation_mode_add_penalty is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_group_computation_mode_add_penalty() directly.

    YANG Description: LSP FRR path computaion group mode is add penalty
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-add-penalty", rest_name="lsp-frr-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_group_computation_mode_add_penalty must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-add-penalty", rest_name="lsp-frr-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_group_computation_mode_add_penalty = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_group_computation_mode_add_penalty(self):
    self.__lsp_frr_group_computation_mode_add_penalty = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-add-penalty", rest_name="lsp-frr-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_group_computation_mode_exclude_groups(self):
    """
    Getter method for lsp_frr_group_computation_mode_exclude_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_exclude_groups (boolean)

    YANG Description: LSP FRR path computaion group mode is exclude groups
    """
    return self.__lsp_frr_group_computation_mode_exclude_groups
      
  def _set_lsp_frr_group_computation_mode_exclude_groups(self, v, load=False):
    """
    Setter method for lsp_frr_group_computation_mode_exclude_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_exclude_groups (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_group_computation_mode_exclude_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_group_computation_mode_exclude_groups() directly.

    YANG Description: LSP FRR path computaion group mode is exclude groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-exclude-groups", rest_name="lsp-frr-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_group_computation_mode_exclude_groups must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-exclude-groups", rest_name="lsp-frr-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_group_computation_mode_exclude_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_group_computation_mode_exclude_groups(self):
    self.__lsp_frr_group_computation_mode_exclude_groups = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-exclude-groups", rest_name="lsp-frr-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_group_computation_mode_high_cost(self):
    """
    Getter method for lsp_frr_group_computation_mode_high_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_high_cost (boolean)

    YANG Description: LSP FRR path computaion group mode is exclude groups
    """
    return self.__lsp_frr_group_computation_mode_high_cost
      
  def _set_lsp_frr_group_computation_mode_high_cost(self, v, load=False):
    """
    Setter method for lsp_frr_group_computation_mode_high_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_group_computation_mode_high_cost (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_group_computation_mode_high_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_group_computation_mode_high_cost() directly.

    YANG Description: LSP FRR path computaion group mode is exclude groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-high-cost", rest_name="lsp-frr-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_group_computation_mode_high_cost must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-high-cost", rest_name="lsp-frr-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_group_computation_mode_high_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_group_computation_mode_high_cost(self):
    self.__lsp_frr_group_computation_mode_high_cost = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-group-computation-mode-high-cost", rest_name="lsp-frr-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_out_port_id(self):
    """
    Getter method for lsp_frr_out_port_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_out_port_id (uint32)

    YANG Description: LSP detour or backup path outgoing port id
    """
    return self.__lsp_frr_out_port_id
      
  def _set_lsp_frr_out_port_id(self, v, load=False):
    """
    Setter method for lsp_frr_out_port_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_out_port_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_out_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_out_port_id() directly.

    YANG Description: LSP detour or backup path outgoing port id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-port-id", rest_name="lsp-frr-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_out_port_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-port-id", rest_name="lsp-frr-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_frr_out_port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_out_port_id(self):
    self.__lsp_frr_out_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-port-id", rest_name="lsp-frr-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_frr_out_port_name(self):
    """
    Getter method for lsp_frr_out_port_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_out_port_name (string)

    YANG Description: LSP detour or backup path outgoing port name
    """
    return self.__lsp_frr_out_port_name
      
  def _set_lsp_frr_out_port_name(self, v, load=False):
    """
    Setter method for lsp_frr_out_port_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_out_port_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_out_port_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_out_port_name() directly.

    YANG Description: LSP detour or backup path outgoing port name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lsp-frr-out-port-name", rest_name="lsp-frr-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_out_port_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-out-port-name", rest_name="lsp-frr-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__lsp_frr_out_port_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_out_port_name(self):
    self.__lsp_frr_out_port_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-out-port-name", rest_name="lsp-frr-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_lsp_frr_out_label(self):
    """
    Getter method for lsp_frr_out_label, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_out_label (uint32)

    YANG Description: LSP detour or backup path outgoing label
    """
    return self.__lsp_frr_out_label
      
  def _set_lsp_frr_out_label(self, v, load=False):
    """
    Setter method for lsp_frr_out_label, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_out_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_out_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_out_label() directly.

    YANG Description: LSP detour or backup path outgoing label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-label", rest_name="lsp-frr-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_out_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-label", rest_name="lsp-frr-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_frr_out_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_out_label(self):
    self.__lsp_frr_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-out-label", rest_name="lsp-frr-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_frr_path_cost(self):
    """
    Getter method for lsp_frr_path_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_path_cost (uint32)

    YANG Description: LSP detour or backup path cost
    """
    return self.__lsp_frr_path_cost
      
  def _set_lsp_frr_path_cost(self, v, load=False):
    """
    Setter method for lsp_frr_path_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_path_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_path_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_path_cost() directly.

    YANG Description: LSP detour or backup path cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-path-cost", rest_name="lsp-frr-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_path_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-path-cost", rest_name="lsp-frr-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_frr_path_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_path_cost(self):
    self.__lsp_frr_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-path-cost", rest_name="lsp-frr-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_frr_bypass_name(self):
    """
    Getter method for lsp_frr_bypass_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_bypass_name (string)

    YANG Description: LSP backup path bypass name
    """
    return self.__lsp_frr_bypass_name
      
  def _set_lsp_frr_bypass_name(self, v, load=False):
    """
    Setter method for lsp_frr_bypass_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_bypass_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_bypass_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_bypass_name() directly.

    YANG Description: LSP backup path bypass name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lsp-frr-bypass-name", rest_name="lsp-frr-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_bypass_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-bypass-name", rest_name="lsp-frr-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__lsp_frr_bypass_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_bypass_name(self):
    self.__lsp_frr_bypass_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-frr-bypass-name", rest_name="lsp-frr-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_lsp_frr_forwarding_protected_up(self):
    """
    Getter method for lsp_frr_forwarding_protected_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_forwarding_protected_up (boolean)

    YANG Description: LSP FRR forwarding statee protected is up
    """
    return self.__lsp_frr_forwarding_protected_up
      
  def _set_lsp_frr_forwarding_protected_up(self, v, load=False):
    """
    Setter method for lsp_frr_forwarding_protected_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_forwarding_protected_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_forwarding_protected_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_forwarding_protected_up() directly.

    YANG Description: LSP FRR forwarding statee protected is up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-frr-forwarding-protected-up", rest_name="lsp-frr-forwarding-protected-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_forwarding_protected_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-forwarding-protected-up", rest_name="lsp-frr-forwarding-protected-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_frr_forwarding_protected_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_forwarding_protected_up(self):
    self.__lsp_frr_forwarding_protected_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-frr-forwarding-protected-up", rest_name="lsp-frr-forwarding-protected-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_frr_secondary_swithover_time(self):
    """
    Getter method for lsp_frr_secondary_swithover_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_secondary_swithover_time (uint32)

    YANG Description: LSP secondary switchover time
    """
    return self.__lsp_frr_secondary_swithover_time
      
  def _set_lsp_frr_secondary_swithover_time(self, v, load=False):
    """
    Setter method for lsp_frr_secondary_swithover_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_secondary_swithover_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_secondary_swithover_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_secondary_swithover_time() directly.

    YANG Description: LSP secondary switchover time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-secondary-swithover-time", rest_name="lsp-frr-secondary-swithover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_secondary_swithover_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-secondary-swithover-time", rest_name="lsp-frr-secondary-swithover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_frr_secondary_swithover_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_secondary_swithover_time(self):
    self.__lsp_frr_secondary_swithover_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-secondary-swithover-time", rest_name="lsp-frr-secondary-swithover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_frr_hold_time(self):
    """
    Getter method for lsp_frr_hold_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_hold_time (uint32)

    YANG Description: LSP lsp hold time
    """
    return self.__lsp_frr_hold_time
      
  def _set_lsp_frr_hold_time(self, v, load=False):
    """
    Setter method for lsp_frr_hold_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug/output/bypass_lsp/show_mpls_lsp_debug_info/show_mpls_lsp_frr_info/lsp_frr_hold_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_frr_hold_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_frr_hold_time() directly.

    YANG Description: LSP lsp hold time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-hold-time", rest_name="lsp-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_frr_hold_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-hold-time", rest_name="lsp-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_frr_hold_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_frr_hold_time(self):
    self.__lsp_frr_hold_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-frr-hold-time", rest_name="lsp-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)

  lsp_frr_operational_status = __builtin__.property(_get_lsp_frr_operational_status, _set_lsp_frr_operational_status)
  lsp_frr_operational_status_active = __builtin__.property(_get_lsp_frr_operational_status_active, _set_lsp_frr_operational_status_active)
  lsp_frr_down_reason = __builtin__.property(_get_lsp_frr_down_reason, _set_lsp_frr_down_reason)
  lsp_frr_computation_mode_default = __builtin__.property(_get_lsp_frr_computation_mode_default, _set_lsp_frr_computation_mode_default)
  lsp_frr_computation_mode_use_bypass_metric = __builtin__.property(_get_lsp_frr_computation_mode_use_bypass_metric, _set_lsp_frr_computation_mode_use_bypass_metric)
  lsp_frr_computation_mode_use_bypass_liberal = __builtin__.property(_get_lsp_frr_computation_mode_use_bypass_liberal, _set_lsp_frr_computation_mode_use_bypass_liberal)
  lsp_frr_group_computation_mode_default = __builtin__.property(_get_lsp_frr_group_computation_mode_default, _set_lsp_frr_group_computation_mode_default)
  lsp_frr_group_computation_mode_add_penalty = __builtin__.property(_get_lsp_frr_group_computation_mode_add_penalty, _set_lsp_frr_group_computation_mode_add_penalty)
  lsp_frr_group_computation_mode_exclude_groups = __builtin__.property(_get_lsp_frr_group_computation_mode_exclude_groups, _set_lsp_frr_group_computation_mode_exclude_groups)
  lsp_frr_group_computation_mode_high_cost = __builtin__.property(_get_lsp_frr_group_computation_mode_high_cost, _set_lsp_frr_group_computation_mode_high_cost)
  lsp_frr_out_port_id = __builtin__.property(_get_lsp_frr_out_port_id, _set_lsp_frr_out_port_id)
  lsp_frr_out_port_name = __builtin__.property(_get_lsp_frr_out_port_name, _set_lsp_frr_out_port_name)
  lsp_frr_out_label = __builtin__.property(_get_lsp_frr_out_label, _set_lsp_frr_out_label)
  lsp_frr_path_cost = __builtin__.property(_get_lsp_frr_path_cost, _set_lsp_frr_path_cost)
  lsp_frr_bypass_name = __builtin__.property(_get_lsp_frr_bypass_name, _set_lsp_frr_bypass_name)
  lsp_frr_forwarding_protected_up = __builtin__.property(_get_lsp_frr_forwarding_protected_up, _set_lsp_frr_forwarding_protected_up)
  lsp_frr_secondary_swithover_time = __builtin__.property(_get_lsp_frr_secondary_swithover_time, _set_lsp_frr_secondary_swithover_time)
  lsp_frr_hold_time = __builtin__.property(_get_lsp_frr_hold_time, _set_lsp_frr_hold_time)


  _pyangbind_elements = {'lsp_frr_operational_status': lsp_frr_operational_status, 'lsp_frr_operational_status_active': lsp_frr_operational_status_active, 'lsp_frr_down_reason': lsp_frr_down_reason, 'lsp_frr_computation_mode_default': lsp_frr_computation_mode_default, 'lsp_frr_computation_mode_use_bypass_metric': lsp_frr_computation_mode_use_bypass_metric, 'lsp_frr_computation_mode_use_bypass_liberal': lsp_frr_computation_mode_use_bypass_liberal, 'lsp_frr_group_computation_mode_default': lsp_frr_group_computation_mode_default, 'lsp_frr_group_computation_mode_add_penalty': lsp_frr_group_computation_mode_add_penalty, 'lsp_frr_group_computation_mode_exclude_groups': lsp_frr_group_computation_mode_exclude_groups, 'lsp_frr_group_computation_mode_high_cost': lsp_frr_group_computation_mode_high_cost, 'lsp_frr_out_port_id': lsp_frr_out_port_id, 'lsp_frr_out_port_name': lsp_frr_out_port_name, 'lsp_frr_out_label': lsp_frr_out_label, 'lsp_frr_path_cost': lsp_frr_path_cost, 'lsp_frr_bypass_name': lsp_frr_bypass_name, 'lsp_frr_forwarding_protected_up': lsp_frr_forwarding_protected_up, 'lsp_frr_secondary_swithover_time': lsp_frr_secondary_swithover_time, 'lsp_frr_hold_time': lsp_frr_hold_time, }


