
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class seq(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-uda-access-list - based on the path /uda/access-list/extended/uda-acl-ext/seq. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__seq_id','__action','__uda_value0','__uda_value_mask0','__uda_value1','__uda_value_mask1','__uda_value2','__uda_value_mask2','__uda_value3','__uda_value_mask3','__count','__log','__mirror','__sflow',)

  _yang_name = 'seq'
  _rest_name = 'seq'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__count = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    self.__log = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    self.__sflow = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-optional-in-sequence': None, u'info': u'Copy to sFlow Collector', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    self.__uda_value0 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value0", rest_name="uda-value0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    self.__seq_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uint64', is_config=True)
    self.__uda_value2 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value2", rest_name="uda-value2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    self.__uda_value3 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value3", rest_name="uda-value3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    self.__mirror = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    self.__uda_value1 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value1", rest_name="uda-value1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='enumeration', is_config=True)
    self.__uda_value_mask0 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask0", rest_name="uda-value-mask0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    self.__uda_value_mask1 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask1", rest_name="uda-value-mask1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    self.__uda_value_mask2 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask2", rest_name="uda-value-mask2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    self.__uda_value_mask3 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask3", rest_name="uda-value-mask3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask3', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'uda', u'access-list', u'extended', u'uda-acl-ext', u'seq']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'uda', u'access-list', u'extended', u'seq']

  def _get_seq_id(self):
    """
    Getter method for seq_id, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/seq_id (uint64)
    """
    return self.__seq_id
      
  def _set_seq_id(self, v, load=False):
    """
    Setter method for seq_id, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/seq_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq_id() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uint64', is_config=True)""",
        })

    self.__seq_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq_id(self):
    self.__seq_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uint64', is_config=True)


  def _get_action(self):
    """
    Getter method for action, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/action (enumeration)
    """
    return self.__action
      
  def _set_action(self, v, load=False):
    """
    Setter method for action, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action must be of a type compatible with enumeration""",
          'defined-type': "brocade-uda-access-list:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='enumeration', is_config=True)""",
        })

    self.__action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action(self):
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='enumeration', is_config=True)


  def _get_uda_value0(self):
    """
    Getter method for uda_value0, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value0 (uda-value-type)
    """
    return self.__uda_value0
      
  def _set_uda_value0(self, v, load=False):
    """
    Setter method for uda_value0, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value0 (uda-value-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value0 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value0() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value0", rest_name="uda-value0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value0 must be of a type compatible with uda-value-type""",
          'defined-type': "brocade-uda-access-list:uda-value-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value0", rest_name="uda-value0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)""",
        })

    self.__uda_value0 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value0(self):
    self.__uda_value0 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value0", rest_name="uda-value0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)


  def _get_uda_value_mask0(self):
    """
    Getter method for uda_value_mask0, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask0 (uda-mask-type)
    """
    return self.__uda_value_mask0
      
  def _set_uda_value_mask0(self, v, load=False):
    """
    Setter method for uda_value_mask0, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask0 (uda-mask-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value_mask0 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value_mask0() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask0", rest_name="uda-value-mask0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value_mask0 must be of a type compatible with uda-mask-type""",
          'defined-type': "brocade-uda-access-list:uda-mask-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask0", rest_name="uda-value-mask0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)""",
        })

    self.__uda_value_mask0 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value_mask0(self):
    self.__uda_value_mask0 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask0", rest_name="uda-value-mask0", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask0', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)


  def _get_uda_value1(self):
    """
    Getter method for uda_value1, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value1 (uda-value-type)
    """
    return self.__uda_value1
      
  def _set_uda_value1(self, v, load=False):
    """
    Setter method for uda_value1, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value1 (uda-value-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value1() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value1", rest_name="uda-value1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value1 must be of a type compatible with uda-value-type""",
          'defined-type': "brocade-uda-access-list:uda-value-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value1", rest_name="uda-value1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)""",
        })

    self.__uda_value1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value1(self):
    self.__uda_value1 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value1", rest_name="uda-value1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)


  def _get_uda_value_mask1(self):
    """
    Getter method for uda_value_mask1, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask1 (uda-mask-type)
    """
    return self.__uda_value_mask1
      
  def _set_uda_value_mask1(self, v, load=False):
    """
    Setter method for uda_value_mask1, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask1 (uda-mask-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value_mask1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value_mask1() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask1", rest_name="uda-value-mask1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value_mask1 must be of a type compatible with uda-mask-type""",
          'defined-type': "brocade-uda-access-list:uda-mask-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask1", rest_name="uda-value-mask1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)""",
        })

    self.__uda_value_mask1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value_mask1(self):
    self.__uda_value_mask1 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask1", rest_name="uda-value-mask1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask1', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)


  def _get_uda_value2(self):
    """
    Getter method for uda_value2, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value2 (uda-value-type)
    """
    return self.__uda_value2
      
  def _set_uda_value2(self, v, load=False):
    """
    Setter method for uda_value2, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value2 (uda-value-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value2() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value2", rest_name="uda-value2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value2 must be of a type compatible with uda-value-type""",
          'defined-type': "brocade-uda-access-list:uda-value-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value2", rest_name="uda-value2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)""",
        })

    self.__uda_value2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value2(self):
    self.__uda_value2 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value2", rest_name="uda-value2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)


  def _get_uda_value_mask2(self):
    """
    Getter method for uda_value_mask2, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask2 (uda-mask-type)
    """
    return self.__uda_value_mask2
      
  def _set_uda_value_mask2(self, v, load=False):
    """
    Setter method for uda_value_mask2, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask2 (uda-mask-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value_mask2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value_mask2() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask2", rest_name="uda-value-mask2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value_mask2 must be of a type compatible with uda-mask-type""",
          'defined-type': "brocade-uda-access-list:uda-mask-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask2", rest_name="uda-value-mask2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)""",
        })

    self.__uda_value_mask2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value_mask2(self):
    self.__uda_value_mask2 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask2", rest_name="uda-value-mask2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask2', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)


  def _get_uda_value3(self):
    """
    Getter method for uda_value3, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value3 (uda-value-type)
    """
    return self.__uda_value3
      
  def _set_uda_value3(self, v, load=False):
    """
    Setter method for uda_value3, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value3 (uda-value-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value3() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value3", rest_name="uda-value3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value3 must be of a type compatible with uda-value-type""",
          'defined-type': "brocade-uda-access-list:uda-value-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value3", rest_name="uda-value3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)""",
        })

    self.__uda_value3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value3(self):
    self.__uda_value3 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value3", rest_name="uda-value3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'uda-value3', u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-value-type', is_config=True)


  def _get_uda_value_mask3(self):
    """
    Getter method for uda_value_mask3, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask3 (uda-mask-type)
    """
    return self.__uda_value_mask3
      
  def _set_uda_value_mask3(self, v, load=False):
    """
    Setter method for uda_value_mask3, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/uda_value_mask3 (uda-mask-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uda_value_mask3 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uda_value_mask3() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask3", rest_name="uda-value-mask3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask3', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uda_value_mask3 must be of a type compatible with uda-mask-type""",
          'defined-type': "brocade-uda-access-list:uda-mask-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask3", rest_name="uda-value-mask3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask3', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)""",
        })

    self.__uda_value_mask3 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uda_value_mask3(self):
    self.__uda_value_mask3 = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0x[0-9a-fA-F]{1,8}'}), is_leaf=True, yang_name="uda-value-mask3", rest_name="uda-value-mask3", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mask3', u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='uda-mask-type', is_config=True)


  def _get_count(self):
    """
    Getter method for count, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/count (empty)
    """
    return self.__count
      
  def _set_count(self, v, load=False):
    """
    Setter method for count, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/count (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """count must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)""",
        })

    self.__count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_count(self):
    self.__count = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)


  def _get_log(self):
    """
    Getter method for log, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/log (empty)
    """
    return self.__log
      
  def _set_log(self, v, load=False):
    """
    Setter method for log, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/log (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)""",
        })

    self.__log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log(self):
    self.__log = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)


  def _get_mirror(self):
    """
    Getter method for mirror, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/mirror (empty)
    """
    return self.__mirror
      
  def _set_mirror(self, v, load=False):
    """
    Setter method for mirror, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/mirror (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mirror is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mirror() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mirror must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)""",
        })

    self.__mirror = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mirror(self):
    self.__mirror = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)


  def _get_sflow(self):
    """
    Getter method for sflow, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/sflow (empty)
    """
    return self.__sflow
      
  def _set_sflow(self, v, load=False):
    """
    Setter method for sflow, mapped from YANG variable /uda/access_list/extended/uda_acl_ext/seq/sflow (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sflow is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sflow() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-optional-in-sequence': None, u'info': u'Copy to sFlow Collector', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sflow must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-optional-in-sequence': None, u'info': u'Copy to sFlow Collector', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)""",
        })

    self.__sflow = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sflow(self):
    self.__sflow = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-optional-in-sequence': None, u'info': u'Copy to sFlow Collector', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-uda-access-list', defining_module='brocade-uda-access-list', yang_type='empty', is_config=True)

  seq_id = __builtin__.property(_get_seq_id, _set_seq_id)
  action = __builtin__.property(_get_action, _set_action)
  uda_value0 = __builtin__.property(_get_uda_value0, _set_uda_value0)
  uda_value_mask0 = __builtin__.property(_get_uda_value_mask0, _set_uda_value_mask0)
  uda_value1 = __builtin__.property(_get_uda_value1, _set_uda_value1)
  uda_value_mask1 = __builtin__.property(_get_uda_value_mask1, _set_uda_value_mask1)
  uda_value2 = __builtin__.property(_get_uda_value2, _set_uda_value2)
  uda_value_mask2 = __builtin__.property(_get_uda_value_mask2, _set_uda_value_mask2)
  uda_value3 = __builtin__.property(_get_uda_value3, _set_uda_value3)
  uda_value_mask3 = __builtin__.property(_get_uda_value_mask3, _set_uda_value_mask3)
  count = __builtin__.property(_get_count, _set_count)
  log = __builtin__.property(_get_log, _set_log)
  mirror = __builtin__.property(_get_mirror, _set_mirror)
  sflow = __builtin__.property(_get_sflow, _set_sflow)


  _pyangbind_elements = {'seq_id': seq_id, 'action': action, 'uda_value0': uda_value0, 'uda_value_mask0': uda_value_mask0, 'uda_value1': uda_value1, 'uda_value_mask1': uda_value_mask1, 'uda_value2': uda_value2, 'uda_value_mask2': uda_value_mask2, 'uda_value3': uda_value3, 'uda_value_mask3': uda_value_mask3, 'count': count, 'log': log, 'mirror': mirror, 'sflow': sflow, }


