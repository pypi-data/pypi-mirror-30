
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import node_public_ip_addresses
import node_public_ipv6_addresses
class cluster_node_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-cluster - based on the path /brocade_cluster_rpc/show-cluster-management/output/cluster-nodes/cluster-node-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__node_num','__node_serial_num','__node_condition','__node_status','__node_id','__node_is_principal','__node_switch_mac','__node_internal_ip_address','__node_public_ip_addresses','__node_public_ipv6_addresses','__firmware_version','__node_switchtype','__node_is_local',)

  _yang_name = 'cluster-node-info'
  _rest_name = 'cluster-node-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__node_switchtype = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    self.__node_switch_mac = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    self.__node_public_ipv6_addresses = YANGDynClass(base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)
    self.__node_is_local = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-local", rest_name="node-is-local", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)
    self.__node_condition = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    self.__node_internal_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='inet:ipv4-address', is_config=True)
    self.__node_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    self.__node_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-id", rest_name="node-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)
    self.__node_num = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)
    self.__node_public_ip_addresses = YANGDynClass(base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)
    self.__firmware_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    self.__node_is_principal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)
    self.__node_serial_num = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_cluster_rpc', u'show-cluster-management', u'output', u'cluster-nodes', u'cluster-node-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-cluster-management', u'output', u'cluster-nodes', u'cluster-node-info']

  def _get_node_num(self):
    """
    Getter method for node_num, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_num (uint16)

    YANG Description: Node number
    """
    return self.__node_num
      
  def _set_node_num(self, v, load=False):
    """
    Setter method for node_num, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_num (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_num() directly.

    YANG Description: Node number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_num must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)""",
        })

    self.__node_num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_num(self):
    self.__node_num = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)


  def _get_node_serial_num(self):
    """
    Getter method for node_serial_num, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_serial_num (string)

    YANG Description: Switch Serial number
    """
    return self.__node_serial_num
      
  def _set_node_serial_num(self, v, load=False):
    """
    Setter method for node_serial_num, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_serial_num (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_serial_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_serial_num() directly.

    YANG Description: Switch Serial number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_serial_num must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)""",
        })

    self.__node_serial_num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_serial_num(self):
    self.__node_serial_num = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)


  def _get_node_condition(self):
    """
    Getter method for node_condition, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_condition (string)

    YANG Description: Node condition which can be either Good/Degraded/Failed/Online
    """
    return self.__node_condition
      
  def _set_node_condition(self, v, load=False):
    """
    Setter method for node_condition, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_condition (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_condition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_condition() directly.

    YANG Description: Node condition which can be either Good/Degraded/Failed/Online
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_condition must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)""",
        })

    self.__node_condition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_condition(self):
    self.__node_condition = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)


  def _get_node_status(self):
    """
    Getter method for node_status, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_status (string)

    YANG Description: Reflects the node status(Standalone/Primary/Secondary) in the cluster
    """
    return self.__node_status
      
  def _set_node_status(self, v, load=False):
    """
    Setter method for node_status, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_status() directly.

    YANG Description: Reflects the node status(Standalone/Primary/Secondary) in the cluster
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)""",
        })

    self.__node_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_status(self):
    self.__node_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)


  def _get_node_id(self):
    """
    Getter method for node_id, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_id (uint16)

    YANG Description: Unique Node Identifier
    """
    return self.__node_id
      
  def _set_node_id(self, v, load=False):
    """
    Setter method for node_id, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_id() directly.

    YANG Description: Unique Node Identifier
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-id", rest_name="node-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-id", rest_name="node-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)""",
        })

    self.__node_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_id(self):
    self.__node_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-id", rest_name="node-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='uint16', is_config=True)


  def _get_node_is_principal(self):
    """
    Getter method for node_is_principal, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_is_principal (boolean)

    YANG Description: Whether node is management cluster principal.
    """
    return self.__node_is_principal
      
  def _set_node_is_principal(self, v, load=False):
    """
    Setter method for node_is_principal, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_is_principal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_is_principal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_is_principal() directly.

    YANG Description: Whether node is management cluster principal.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_is_principal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)""",
        })

    self.__node_is_principal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_is_principal(self):
    self.__node_is_principal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)


  def _get_node_switch_mac(self):
    """
    Getter method for node_switch_mac, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_switch_mac (string)

    YANG Description: Node switch mac address
    """
    return self.__node_switch_mac
      
  def _set_node_switch_mac(self, v, load=False):
    """
    Setter method for node_switch_mac, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_switch_mac (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switch_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switch_mac() directly.

    YANG Description: Node switch mac address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switch_mac must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)""",
        })

    self.__node_switch_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switch_mac(self):
    self.__node_switch_mac = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)


  def _get_node_internal_ip_address(self):
    """
    Getter method for node_internal_ip_address, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_internal_ip_address (inet:ipv4-address)

    YANG Description: Node internal IP address
    """
    return self.__node_internal_ip_address
      
  def _set_node_internal_ip_address(self, v, load=False):
    """
    Setter method for node_internal_ip_address, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_internal_ip_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_internal_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_internal_ip_address() directly.

    YANG Description: Node internal IP address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_internal_ip_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__node_internal_ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_internal_ip_address(self):
    self.__node_internal_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='inet:ipv4-address', is_config=True)


  def _get_node_public_ip_addresses(self):
    """
    Getter method for node_public_ip_addresses, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_public_ip_addresses (list)
    """
    return self.__node_public_ip_addresses
      
  def _set_node_public_ip_addresses(self, v, load=False):
    """
    Setter method for node_public_ip_addresses, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_public_ip_addresses (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_public_ip_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_public_ip_addresses() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_public_ip_addresses must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)""",
        })

    self.__node_public_ip_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_public_ip_addresses(self):
    self.__node_public_ip_addresses = YANGDynClass(base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)


  def _get_node_public_ipv6_addresses(self):
    """
    Getter method for node_public_ipv6_addresses, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_public_ipv6_addresses (list)
    """
    return self.__node_public_ipv6_addresses
      
  def _set_node_public_ipv6_addresses(self, v, load=False):
    """
    Setter method for node_public_ipv6_addresses, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_public_ipv6_addresses (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_public_ipv6_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_public_ipv6_addresses() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_public_ipv6_addresses must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)""",
        })

    self.__node_public_ipv6_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_public_ipv6_addresses(self):
    self.__node_public_ipv6_addresses = YANGDynClass(base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='list', is_config=True)


  def _get_firmware_version(self):
    """
    Getter method for firmware_version, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/firmware_version (string)

    YANG Description: Node Firmware version
    """
    return self.__firmware_version
      
  def _set_firmware_version(self, v, load=False):
    """
    Setter method for firmware_version, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/firmware_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_firmware_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_firmware_version() directly.

    YANG Description: Node Firmware version
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """firmware_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)""",
        })

    self.__firmware_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_firmware_version(self):
    self.__firmware_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)


  def _get_node_switchtype(self):
    """
    Getter method for node_switchtype, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_switchtype (string)

    YANG Description: Node switchtype.
    """
    return self.__node_switchtype
      
  def _set_node_switchtype(self, v, load=False):
    """
    Setter method for node_switchtype, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_switchtype (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switchtype is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switchtype() directly.

    YANG Description: Node switchtype.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switchtype must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)""",
        })

    self.__node_switchtype = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switchtype(self):
    self.__node_switchtype = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='string', is_config=True)


  def _get_node_is_local(self):
    """
    Getter method for node_is_local, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_is_local (boolean)

    YANG Description: Whether node is local. True indicates the RPC is run from this node in the managment cluster. False indicates its a remote node
    """
    return self.__node_is_local
      
  def _set_node_is_local(self, v, load=False):
    """
    Setter method for node_is_local, mapped from YANG variable /brocade_cluster_rpc/show_cluster_management/output/cluster_nodes/cluster_node_info/node_is_local (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_is_local is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_is_local() directly.

    YANG Description: Whether node is local. True indicates the RPC is run from this node in the managment cluster. False indicates its a remote node
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="node-is-local", rest_name="node-is-local", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_is_local must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-local", rest_name="node-is-local", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)""",
        })

    self.__node_is_local = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_is_local(self):
    self.__node_is_local = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-local", rest_name="node-is-local", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='http://brocade.com/ns/brocade-cluster', defining_module='brocade-cluster', yang_type='boolean', is_config=True)

  node_num = __builtin__.property(_get_node_num, _set_node_num)
  node_serial_num = __builtin__.property(_get_node_serial_num, _set_node_serial_num)
  node_condition = __builtin__.property(_get_node_condition, _set_node_condition)
  node_status = __builtin__.property(_get_node_status, _set_node_status)
  node_id = __builtin__.property(_get_node_id, _set_node_id)
  node_is_principal = __builtin__.property(_get_node_is_principal, _set_node_is_principal)
  node_switch_mac = __builtin__.property(_get_node_switch_mac, _set_node_switch_mac)
  node_internal_ip_address = __builtin__.property(_get_node_internal_ip_address, _set_node_internal_ip_address)
  node_public_ip_addresses = __builtin__.property(_get_node_public_ip_addresses, _set_node_public_ip_addresses)
  node_public_ipv6_addresses = __builtin__.property(_get_node_public_ipv6_addresses, _set_node_public_ipv6_addresses)
  firmware_version = __builtin__.property(_get_firmware_version, _set_firmware_version)
  node_switchtype = __builtin__.property(_get_node_switchtype, _set_node_switchtype)
  node_is_local = __builtin__.property(_get_node_is_local, _set_node_is_local)


  _pyangbind_elements = {'node_num': node_num, 'node_serial_num': node_serial_num, 'node_condition': node_condition, 'node_status': node_status, 'node_id': node_id, 'node_is_principal': node_is_principal, 'node_switch_mac': node_switch_mac, 'node_internal_ip_address': node_internal_ip_address, 'node_public_ip_addresses': node_public_ip_addresses, 'node_public_ipv6_addresses': node_public_ipv6_addresses, 'firmware_version': firmware_version, 'node_switchtype': node_switchtype, 'node_is_local': node_is_local, }


