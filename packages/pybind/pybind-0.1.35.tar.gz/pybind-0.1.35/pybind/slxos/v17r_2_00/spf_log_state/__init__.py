
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import spf_log_levels
class spf_log_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /spf-log-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS IPv4 or IPv6 SPF LOG information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__spf_log_version','__spf_log_levels',)

  _yang_name = 'spf-log-state'
  _rest_name = 'spf-log-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__spf_log_levels = YANGDynClass(base=YANGListType("level",spf_log_levels.spf_log_levels, yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}), is_container='list', yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__spf_log_version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="spf-log-version", rest_name="spf-log-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'spf-log-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'spf-log-state']

  def _get_spf_log_version(self):
    """
    Getter method for spf_log_version, mapped from YANG variable /spf_log_state/spf_log_version (isis-safi)

    YANG Description: Ipv4 or Ipv6 version
    """
    return self.__spf_log_version
      
  def _set_spf_log_version(self, v, load=False):
    """
    Setter method for spf_log_version, mapped from YANG variable /spf_log_state/spf_log_version (isis-safi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_log_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_log_version() directly.

    YANG Description: Ipv4 or Ipv6 version
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="spf-log-version", rest_name="spf-log-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_log_version must be of a type compatible with isis-safi""",
          'defined-type': "brocade-isis-operational:isis-safi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="spf-log-version", rest_name="spf-log-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)""",
        })

    self.__spf_log_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_log_version(self):
    self.__spf_log_version = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="spf-log-version", rest_name="spf-log-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)


  def _get_spf_log_levels(self):
    """
    Getter method for spf_log_levels, mapped from YANG variable /spf_log_state/spf_log_levels (list)

    YANG Description: ISIS SPF LOG Level (Level-1 and level-2
    """
    return self.__spf_log_levels
      
  def _set_spf_log_levels(self, v, load=False):
    """
    Setter method for spf_log_levels, mapped from YANG variable /spf_log_state/spf_log_levels (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_log_levels is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_log_levels() directly.

    YANG Description: ISIS SPF LOG Level (Level-1 and level-2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("level",spf_log_levels.spf_log_levels, yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}), is_container='list', yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_log_levels must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("level",spf_log_levels.spf_log_levels, yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}), is_container='list', yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__spf_log_levels = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_log_levels(self):
    self.__spf_log_levels = YANGDynClass(base=YANGListType("level",spf_log_levels.spf_log_levels, yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}), is_container='list', yang_name="spf-log-levels", rest_name="spf-log-levels", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-log-level', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  spf_log_version = __builtin__.property(_get_spf_log_version)
  spf_log_levels = __builtin__.property(_get_spf_log_levels)


  _pyangbind_elements = {'spf_log_version': spf_log_version, 'spf_log_levels': spf_log_levels, }


