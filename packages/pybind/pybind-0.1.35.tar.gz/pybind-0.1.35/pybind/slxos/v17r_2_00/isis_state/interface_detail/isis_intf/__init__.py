
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import circ_chstats
import mpls_info
import reverse_metric_info
import ldp_sync_info
import circ_metrics
import ip_info
import ip6_info
class isis_intf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state/interface-detail/isis-intf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS Interface configuration
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__intf_type','__intf_number','__v4circuit_enabled','__v6circuit_enabled','__circuit_id','__circuit_ifid','__circuit_state','__circuit_ip_state','__circuit_ipv6_state','__circuit_mode','__circuit_type','__circuit_encap','__is_circuit_passive','__mtu_size','__padding_enabled','__bfd_enabled','__circ_chstats','__mpls_info','__reverse_metric_info','__ldp_sync_info','__circ_metrics','__ip_info','__ip6_info',)

  _yang_name = 'isis-intf'
  _rest_name = 'isis-intf'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__circuit_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-level1-2': {'value': 0}, u'isis-level1': {'value': 1}, u'isis-level2': {'value': 2}},), is_leaf=True, yang_name="circuit-mode", rest_name="circuit-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-level', is_config=False)
    self.__ip6_info = YANGDynClass(base=YANGListType("ip6_add",ip6_info.ip6_info, yang_name="ip6-info", rest_name="ip6-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip6-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip6-info", rest_name="ip6-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__intf_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'eth': {'value': 1}, u've': {'value': 2}, u'invalid': {'value': 0}, u'loopback': {'value': 3}},), is_leaf=True, yang_name="intf-type", rest_name="intf-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-interface-type', is_config=False)
    self.__circuit_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-id", rest_name="circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__circuit_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-state", rest_name="circuit-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__reverse_metric_info = YANGDynClass(base=reverse_metric_info.reverse_metric_info, is_container='container', presence=False, yang_name="reverse-metric-info", rest_name="reverse-metric-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__circuit_ip_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-ip-state", rest_name="circuit-ip-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__circuit_ifid = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-ifid", rest_name="circuit-ifid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__circuit_encap = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ppp': {'value': 2}, u'undef': {'value': 0}, u'chdlc': {'value': 1}},), is_leaf=True, yang_name="circuit-encap", rest_name="circuit-encap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-encap', is_config=False)
    self.__intf_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="intf-number", rest_name="intf-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__mtu_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu-size", rest_name="mtu-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__ldp_sync_info = YANGDynClass(base=ldp_sync_info.ldp_sync_info, is_container='container', presence=False, yang_name="ldp-sync-info", rest_name="ldp-sync-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ldp-sync-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__v6circuit_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v6circuit-enabled", rest_name="v6circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__mpls_info = YANGDynClass(base=mpls_info.mpls_info, is_container='container', presence=False, yang_name="mpls-info", rest_name="mpls-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-mpls-te-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__ip_info = YANGDynClass(base=YANGListType("ip_add",ip_info.ip_info, yang_name="ip-info", rest_name="ip-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip-info", rest_name="ip-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__circ_chstats = YANGDynClass(base=circ_chstats.circ_chstats, is_container='container', presence=False, yang_name="circ-chstats", rest_name="circ-chstats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-circuit-change-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__padding_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="padding-enabled", rest_name="padding-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__circ_metrics = YANGDynClass(base=YANGListType("level",circ_metrics.circ_metrics, yang_name="circ-metrics", rest_name="circ-metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="circ-metrics", rest_name="circ-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__circuit_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-circ-lan': {'value': 2}, u'is-circ-ptpt': {'value': 1}, u'is-circ-unknown': {'value': 0}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-type', is_config=False)
    self.__v4circuit_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v4circuit-enabled", rest_name="v4circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__is_circuit_passive = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="is-circuit-passive", rest_name="is-circuit-passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__circuit_ipv6_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-ipv6-state", rest_name="circuit-ipv6-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__bfd_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state', u'interface-detail', u'isis-intf']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state', u'interface-detail', u'isis-intf']

  def _get_intf_type(self):
    """
    Getter method for intf_type, mapped from YANG variable /isis_state/interface_detail/isis_intf/intf_type (isis-interface-type)

    YANG Description: ISIS interface type
    """
    return self.__intf_type
      
  def _set_intf_type(self, v, load=False):
    """
    Setter method for intf_type, mapped from YANG variable /isis_state/interface_detail/isis_intf/intf_type (isis-interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_intf_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_intf_type() directly.

    YANG Description: ISIS interface type
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'eth': {'value': 1}, u've': {'value': 2}, u'invalid': {'value': 0}, u'loopback': {'value': 3}},), is_leaf=True, yang_name="intf-type", rest_name="intf-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-interface-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """intf_type must be of a type compatible with isis-interface-type""",
          'defined-type': "brocade-isis-operational:isis-interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'eth': {'value': 1}, u've': {'value': 2}, u'invalid': {'value': 0}, u'loopback': {'value': 3}},), is_leaf=True, yang_name="intf-type", rest_name="intf-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-interface-type', is_config=False)""",
        })

    self.__intf_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_intf_type(self):
    self.__intf_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'eth': {'value': 1}, u've': {'value': 2}, u'invalid': {'value': 0}, u'loopback': {'value': 3}},), is_leaf=True, yang_name="intf-type", rest_name="intf-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-interface-type', is_config=False)


  def _get_intf_number(self):
    """
    Getter method for intf_number, mapped from YANG variable /isis_state/interface_detail/isis_intf/intf_number (string)

    YANG Description: ISIS interface ID
    """
    return self.__intf_number
      
  def _set_intf_number(self, v, load=False):
    """
    Setter method for intf_number, mapped from YANG variable /isis_state/interface_detail/isis_intf/intf_number (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_intf_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_intf_number() directly.

    YANG Description: ISIS interface ID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="intf-number", rest_name="intf-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """intf_number must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="intf-number", rest_name="intf-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__intf_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_intf_number(self):
    self.__intf_number = YANGDynClass(base=unicode, is_leaf=True, yang_name="intf-number", rest_name="intf-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_v4circuit_enabled(self):
    """
    Getter method for v4circuit_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/v4circuit_enabled (isis-status)

    YANG Description: If port is ISIS enabled
    """
    return self.__v4circuit_enabled
      
  def _set_v4circuit_enabled(self, v, load=False):
    """
    Setter method for v4circuit_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/v4circuit_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v4circuit_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v4circuit_enabled() directly.

    YANG Description: If port is ISIS enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v4circuit-enabled", rest_name="v4circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v4circuit_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v4circuit-enabled", rest_name="v4circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__v4circuit_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v4circuit_enabled(self):
    self.__v4circuit_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v4circuit-enabled", rest_name="v4circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_v6circuit_enabled(self):
    """
    Getter method for v6circuit_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/v6circuit_enabled (isis-status)

    YANG Description: If port is ISISv6 enabled
    """
    return self.__v6circuit_enabled
      
  def _set_v6circuit_enabled(self, v, load=False):
    """
    Setter method for v6circuit_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/v6circuit_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6circuit_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6circuit_enabled() directly.

    YANG Description: If port is ISISv6 enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v6circuit-enabled", rest_name="v6circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6circuit_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v6circuit-enabled", rest_name="v6circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__v6circuit_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6circuit_enabled(self):
    self.__v6circuit_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="v6circuit-enabled", rest_name="v6circuit-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_circuit_id(self):
    """
    Getter method for circuit_id, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_id (uint16)

    YANG Description: ISIS Circuit ID
    """
    return self.__circuit_id
      
  def _set_circuit_id(self, v, load=False):
    """
    Setter method for circuit_id, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_id() directly.

    YANG Description: ISIS Circuit ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-id", rest_name="circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-id", rest_name="circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__circuit_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_id(self):
    self.__circuit_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-id", rest_name="circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_circuit_ifid(self):
    """
    Getter method for circuit_ifid, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_ifid (uint16)

    YANG Description: Hardware interface ID
    """
    return self.__circuit_ifid
      
  def _set_circuit_ifid(self, v, load=False):
    """
    Setter method for circuit_ifid, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_ifid (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_ifid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_ifid() directly.

    YANG Description: Hardware interface ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-ifid", rest_name="circuit-ifid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_ifid must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-ifid", rest_name="circuit-ifid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__circuit_ifid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_ifid(self):
    self.__circuit_ifid = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="circuit-ifid", rest_name="circuit-ifid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_circuit_state(self):
    """
    Getter method for circuit_state, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_state (boolean)

    YANG Description: Circuit State
    """
    return self.__circuit_state
      
  def _set_circuit_state(self, v, load=False):
    """
    Setter method for circuit_state, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_state (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_state() directly.

    YANG Description: Circuit State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="circuit-state", rest_name="circuit-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_state must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-state", rest_name="circuit-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__circuit_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_state(self):
    self.__circuit_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-state", rest_name="circuit-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_circuit_ip_state(self):
    """
    Getter method for circuit_ip_state, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_ip_state (boolean)

    YANG Description: ISIS IPv4 Enabled
    """
    return self.__circuit_ip_state
      
  def _set_circuit_ip_state(self, v, load=False):
    """
    Setter method for circuit_ip_state, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_ip_state (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_ip_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_ip_state() directly.

    YANG Description: ISIS IPv4 Enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="circuit-ip-state", rest_name="circuit-ip-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_ip_state must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-ip-state", rest_name="circuit-ip-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__circuit_ip_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_ip_state(self):
    self.__circuit_ip_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-ip-state", rest_name="circuit-ip-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_circuit_ipv6_state(self):
    """
    Getter method for circuit_ipv6_state, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_ipv6_state (boolean)

    YANG Description: ISIS IPv6 Enabled
    """
    return self.__circuit_ipv6_state
      
  def _set_circuit_ipv6_state(self, v, load=False):
    """
    Setter method for circuit_ipv6_state, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_ipv6_state (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_ipv6_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_ipv6_state() directly.

    YANG Description: ISIS IPv6 Enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="circuit-ipv6-state", rest_name="circuit-ipv6-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_ipv6_state must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-ipv6-state", rest_name="circuit-ipv6-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__circuit_ipv6_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_ipv6_state(self):
    self.__circuit_ipv6_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="circuit-ipv6-state", rest_name="circuit-ipv6-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_circuit_mode(self):
    """
    Getter method for circuit_mode, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_mode (isis-level)

    YANG Description: ISIS operation mode
    """
    return self.__circuit_mode
      
  def _set_circuit_mode(self, v, load=False):
    """
    Setter method for circuit_mode, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_mode (isis-level)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_mode() directly.

    YANG Description: ISIS operation mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-level1-2': {'value': 0}, u'isis-level1': {'value': 1}, u'isis-level2': {'value': 2}},), is_leaf=True, yang_name="circuit-mode", rest_name="circuit-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-level', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_mode must be of a type compatible with isis-level""",
          'defined-type': "brocade-isis-operational:isis-level",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-level1-2': {'value': 0}, u'isis-level1': {'value': 1}, u'isis-level2': {'value': 2}},), is_leaf=True, yang_name="circuit-mode", rest_name="circuit-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-level', is_config=False)""",
        })

    self.__circuit_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_mode(self):
    self.__circuit_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-level1-2': {'value': 0}, u'isis-level1': {'value': 1}, u'isis-level2': {'value': 2}},), is_leaf=True, yang_name="circuit-mode", rest_name="circuit-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-level', is_config=False)


  def _get_circuit_type(self):
    """
    Getter method for circuit_type, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_type (isis-circ-type)

    YANG Description: Type of ISIS Circuit
    """
    return self.__circuit_type
      
  def _set_circuit_type(self, v, load=False):
    """
    Setter method for circuit_type, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_type (isis-circ-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_type() directly.

    YANG Description: Type of ISIS Circuit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-circ-lan': {'value': 2}, u'is-circ-ptpt': {'value': 1}, u'is-circ-unknown': {'value': 0}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_type must be of a type compatible with isis-circ-type""",
          'defined-type': "brocade-isis-operational:isis-circ-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-circ-lan': {'value': 2}, u'is-circ-ptpt': {'value': 1}, u'is-circ-unknown': {'value': 0}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-type', is_config=False)""",
        })

    self.__circuit_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_type(self):
    self.__circuit_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-circ-lan': {'value': 2}, u'is-circ-ptpt': {'value': 1}, u'is-circ-unknown': {'value': 0}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-type', is_config=False)


  def _get_circuit_encap(self):
    """
    Getter method for circuit_encap, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_encap (isis-circ-encap)

    YANG Description: Circuit Encapsulation
    """
    return self.__circuit_encap
      
  def _set_circuit_encap(self, v, load=False):
    """
    Setter method for circuit_encap, mapped from YANG variable /isis_state/interface_detail/isis_intf/circuit_encap (isis-circ-encap)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_encap is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_encap() directly.

    YANG Description: Circuit Encapsulation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ppp': {'value': 2}, u'undef': {'value': 0}, u'chdlc': {'value': 1}},), is_leaf=True, yang_name="circuit-encap", rest_name="circuit-encap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-encap', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_encap must be of a type compatible with isis-circ-encap""",
          'defined-type': "brocade-isis-operational:isis-circ-encap",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ppp': {'value': 2}, u'undef': {'value': 0}, u'chdlc': {'value': 1}},), is_leaf=True, yang_name="circuit-encap", rest_name="circuit-encap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-encap', is_config=False)""",
        })

    self.__circuit_encap = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_encap(self):
    self.__circuit_encap = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ppp': {'value': 2}, u'undef': {'value': 0}, u'chdlc': {'value': 1}},), is_leaf=True, yang_name="circuit-encap", rest_name="circuit-encap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-circ-encap', is_config=False)


  def _get_is_circuit_passive(self):
    """
    Getter method for is_circuit_passive, mapped from YANG variable /isis_state/interface_detail/isis_intf/is_circuit_passive (isis-status)

    YANG Description: If Circuit is in Passive state
    """
    return self.__is_circuit_passive
      
  def _set_is_circuit_passive(self, v, load=False):
    """
    Setter method for is_circuit_passive, mapped from YANG variable /isis_state/interface_detail/isis_intf/is_circuit_passive (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_circuit_passive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_circuit_passive() directly.

    YANG Description: If Circuit is in Passive state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="is-circuit-passive", rest_name="is-circuit-passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_circuit_passive must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="is-circuit-passive", rest_name="is-circuit-passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__is_circuit_passive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_circuit_passive(self):
    self.__is_circuit_passive = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="is-circuit-passive", rest_name="is-circuit-passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_mtu_size(self):
    """
    Getter method for mtu_size, mapped from YANG variable /isis_state/interface_detail/isis_intf/mtu_size (uint16)

    YANG Description: MTU
    """
    return self.__mtu_size
      
  def _set_mtu_size(self, v, load=False):
    """
    Setter method for mtu_size, mapped from YANG variable /isis_state/interface_detail/isis_intf/mtu_size (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu_size() directly.

    YANG Description: MTU
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu-size", rest_name="mtu-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu_size must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu-size", rest_name="mtu-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__mtu_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu_size(self):
    self.__mtu_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mtu-size", rest_name="mtu-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_padding_enabled(self):
    """
    Getter method for padding_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/padding_enabled (isis-status)

    YANG Description: If Hello padding enabled
    """
    return self.__padding_enabled
      
  def _set_padding_enabled(self, v, load=False):
    """
    Setter method for padding_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/padding_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_padding_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_padding_enabled() directly.

    YANG Description: If Hello padding enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="padding-enabled", rest_name="padding-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """padding_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="padding-enabled", rest_name="padding-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__padding_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_padding_enabled(self):
    self.__padding_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="padding-enabled", rest_name="padding-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_bfd_enabled(self):
    """
    Getter method for bfd_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/bfd_enabled (isis-status)

    YANG Description: If BFD enabled
    """
    return self.__bfd_enabled
      
  def _set_bfd_enabled(self, v, load=False):
    """
    Setter method for bfd_enabled, mapped from YANG variable /isis_state/interface_detail/isis_intf/bfd_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_enabled() directly.

    YANG Description: If BFD enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__bfd_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_enabled(self):
    self.__bfd_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_circ_chstats(self):
    """
    Getter method for circ_chstats, mapped from YANG variable /isis_state/interface_detail/isis_intf/circ_chstats (container)

    YANG Description: ISIS circuit change statistics
    """
    return self.__circ_chstats
      
  def _set_circ_chstats(self, v, load=False):
    """
    Setter method for circ_chstats, mapped from YANG variable /isis_state/interface_detail/isis_intf/circ_chstats (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circ_chstats is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circ_chstats() directly.

    YANG Description: ISIS circuit change statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=circ_chstats.circ_chstats, is_container='container', presence=False, yang_name="circ-chstats", rest_name="circ-chstats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-circuit-change-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circ_chstats must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=circ_chstats.circ_chstats, is_container='container', presence=False, yang_name="circ-chstats", rest_name="circ-chstats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-circuit-change-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__circ_chstats = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circ_chstats(self):
    self.__circ_chstats = YANGDynClass(base=circ_chstats.circ_chstats, is_container='container', presence=False, yang_name="circ-chstats", rest_name="circ-chstats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-circuit-change-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_mpls_info(self):
    """
    Getter method for mpls_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/mpls_info (container)

    YANG Description: MPLS TE info
    """
    return self.__mpls_info
      
  def _set_mpls_info(self, v, load=False):
    """
    Setter method for mpls_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/mpls_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_info() directly.

    YANG Description: MPLS TE info
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls_info.mpls_info, is_container='container', presence=False, yang_name="mpls-info", rest_name="mpls-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-mpls-te-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mpls_info.mpls_info, is_container='container', presence=False, yang_name="mpls-info", rest_name="mpls-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-mpls-te-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__mpls_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_info(self):
    self.__mpls_info = YANGDynClass(base=mpls_info.mpls_info, is_container='container', presence=False, yang_name="mpls-info", rest_name="mpls-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-mpls-te-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_reverse_metric_info(self):
    """
    Getter method for reverse_metric_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/reverse_metric_info (container)

    YANG Description: ISIS interface reverse-metric configuration
    """
    return self.__reverse_metric_info
      
  def _set_reverse_metric_info(self, v, load=False):
    """
    Setter method for reverse_metric_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/reverse_metric_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reverse_metric_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reverse_metric_info() directly.

    YANG Description: ISIS interface reverse-metric configuration
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=reverse_metric_info.reverse_metric_info, is_container='container', presence=False, yang_name="reverse-metric-info", rest_name="reverse-metric-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reverse_metric_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=reverse_metric_info.reverse_metric_info, is_container='container', presence=False, yang_name="reverse-metric-info", rest_name="reverse-metric-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__reverse_metric_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reverse_metric_info(self):
    self.__reverse_metric_info = YANGDynClass(base=reverse_metric_info.reverse_metric_info, is_container='container', presence=False, yang_name="reverse-metric-info", rest_name="reverse-metric-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_ldp_sync_info(self):
    """
    Getter method for ldp_sync_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/ldp_sync_info (container)

    YANG Description: ISIS LDP sync info
    """
    return self.__ldp_sync_info
      
  def _set_ldp_sync_info(self, v, load=False):
    """
    Setter method for ldp_sync_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/ldp_sync_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_sync_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_sync_info() directly.

    YANG Description: ISIS LDP sync info
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ldp_sync_info.ldp_sync_info, is_container='container', presence=False, yang_name="ldp-sync-info", rest_name="ldp-sync-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ldp-sync-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_sync_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ldp_sync_info.ldp_sync_info, is_container='container', presence=False, yang_name="ldp-sync-info", rest_name="ldp-sync-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ldp-sync-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__ldp_sync_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_sync_info(self):
    self.__ldp_sync_info = YANGDynClass(base=ldp_sync_info.ldp_sync_info, is_container='container', presence=False, yang_name="ldp-sync-info", rest_name="ldp-sync-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ldp-sync-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_circ_metrics(self):
    """
    Getter method for circ_metrics, mapped from YANG variable /isis_state/interface_detail/isis_intf/circ_metrics (list)

    YANG Description: ISIS circuit attributes
    """
    return self.__circ_metrics
      
  def _set_circ_metrics(self, v, load=False):
    """
    Setter method for circ_metrics, mapped from YANG variable /isis_state/interface_detail/isis_intf/circ_metrics (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circ_metrics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circ_metrics() directly.

    YANG Description: ISIS circuit attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("level",circ_metrics.circ_metrics, yang_name="circ-metrics", rest_name="circ-metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="circ-metrics", rest_name="circ-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circ_metrics must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("level",circ_metrics.circ_metrics, yang_name="circ-metrics", rest_name="circ-metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="circ-metrics", rest_name="circ-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__circ_metrics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circ_metrics(self):
    self.__circ_metrics = YANGDynClass(base=YANGListType("level",circ_metrics.circ_metrics, yang_name="circ-metrics", rest_name="circ-metrics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="circ-metrics", rest_name="circ-metrics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-circ-metrics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)


  def _get_ip_info(self):
    """
    Getter method for ip_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/ip_info (list)

    YANG Description: ISIS circuit IPv4 info
    """
    return self.__ip_info
      
  def _set_ip_info(self, v, load=False):
    """
    Setter method for ip_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/ip_info (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_info() directly.

    YANG Description: ISIS circuit IPv4 info
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ip_add",ip_info.ip_info, yang_name="ip-info", rest_name="ip-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip-info", rest_name="ip-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_info must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_add",ip_info.ip_info, yang_name="ip-info", rest_name="ip-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip-info", rest_name="ip-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__ip_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_info(self):
    self.__ip_info = YANGDynClass(base=YANGListType("ip_add",ip_info.ip_info, yang_name="ip-info", rest_name="ip-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip-info", rest_name="ip-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)


  def _get_ip6_info(self):
    """
    Getter method for ip6_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/ip6_info (list)

    YANG Description: ISIS circuit IPv6 info
    """
    return self.__ip6_info
      
  def _set_ip6_info(self, v, load=False):
    """
    Setter method for ip6_info, mapped from YANG variable /isis_state/interface_detail/isis_intf/ip6_info (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip6_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip6_info() directly.

    YANG Description: ISIS circuit IPv6 info
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ip6_add",ip6_info.ip6_info, yang_name="ip6-info", rest_name="ip6-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip6-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip6-info", rest_name="ip6-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip6_info must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip6_add",ip6_info.ip6_info, yang_name="ip6-info", rest_name="ip6-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip6-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip6-info", rest_name="ip6-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__ip6_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip6_info(self):
    self.__ip6_info = YANGDynClass(base=YANGListType("ip6_add",ip6_info.ip6_info, yang_name="ip6-info", rest_name="ip6-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip6-add', extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ip6-info", rest_name="ip6-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-ip6-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  intf_type = __builtin__.property(_get_intf_type)
  intf_number = __builtin__.property(_get_intf_number)
  v4circuit_enabled = __builtin__.property(_get_v4circuit_enabled)
  v6circuit_enabled = __builtin__.property(_get_v6circuit_enabled)
  circuit_id = __builtin__.property(_get_circuit_id)
  circuit_ifid = __builtin__.property(_get_circuit_ifid)
  circuit_state = __builtin__.property(_get_circuit_state)
  circuit_ip_state = __builtin__.property(_get_circuit_ip_state)
  circuit_ipv6_state = __builtin__.property(_get_circuit_ipv6_state)
  circuit_mode = __builtin__.property(_get_circuit_mode)
  circuit_type = __builtin__.property(_get_circuit_type)
  circuit_encap = __builtin__.property(_get_circuit_encap)
  is_circuit_passive = __builtin__.property(_get_is_circuit_passive)
  mtu_size = __builtin__.property(_get_mtu_size)
  padding_enabled = __builtin__.property(_get_padding_enabled)
  bfd_enabled = __builtin__.property(_get_bfd_enabled)
  circ_chstats = __builtin__.property(_get_circ_chstats)
  mpls_info = __builtin__.property(_get_mpls_info)
  reverse_metric_info = __builtin__.property(_get_reverse_metric_info)
  ldp_sync_info = __builtin__.property(_get_ldp_sync_info)
  circ_metrics = __builtin__.property(_get_circ_metrics)
  ip_info = __builtin__.property(_get_ip_info)
  ip6_info = __builtin__.property(_get_ip6_info)


  _pyangbind_elements = {'intf_type': intf_type, 'intf_number': intf_number, 'v4circuit_enabled': v4circuit_enabled, 'v6circuit_enabled': v6circuit_enabled, 'circuit_id': circuit_id, 'circuit_ifid': circuit_ifid, 'circuit_state': circuit_state, 'circuit_ip_state': circuit_ip_state, 'circuit_ipv6_state': circuit_ipv6_state, 'circuit_mode': circuit_mode, 'circuit_type': circuit_type, 'circuit_encap': circuit_encap, 'is_circuit_passive': is_circuit_passive, 'mtu_size': mtu_size, 'padding_enabled': padding_enabled, 'bfd_enabled': bfd_enabled, 'circ_chstats': circ_chstats, 'mpls_info': mpls_info, 'reverse_metric_info': reverse_metric_info, 'ldp_sync_info': ldp_sync_info, 'circ_metrics': circ_metrics, 'ip_info': ip_info, 'ip6_info': ip6_info, }


