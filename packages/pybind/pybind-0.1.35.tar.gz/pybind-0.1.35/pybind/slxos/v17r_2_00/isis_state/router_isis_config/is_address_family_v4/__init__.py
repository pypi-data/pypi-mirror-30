
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import redist_static
import redist_connected
import redist_bgp
import redist_isis
import redist_ospf
import summary_address_v4
class is_address_family_v4(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state/router-isis-config/is-address-family-v4. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS ipv4 address family
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__afi','__safi','__originate_default_route','__originate_default_routemap_name','__default_metric','__l1_default_link_metric','__l2_default_link_metric','__administrative_distance','__maximum_equal_cost_paths','__redist_static','__redist_connected','__redist_bgp','__redist_isis','__redist_ospf','__l1_wide_metric_enabled','__l2_wide_metric_enabled','__ldp_sync_enabled','__ldp_sync_hold_down','__summary_address_v4',)

  _yang_name = 'is-address-family-v4'
  _rest_name = 'is-address-family-v4'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__summary_address_v4 = YANGDynClass(base=YANGListType("address",summary_address_v4.summary_address_v4, yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='address', extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}), is_container='list', yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__redist_static = YANGDynClass(base=redist_static.redist_static, is_container='container', presence=False, yang_name="redist-static", rest_name="redist-static", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-static-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__l1_default_link_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-default-link-metric", rest_name="l1-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__ldp_sync_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ldp-sync-enabled", rest_name="ldp-sync-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__afi = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-afi': {'value': 1}, u'isis-ipv4-afi': {'value': 0}},), is_leaf=True, yang_name="afi", rest_name="afi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-afi', is_config=False)
    self.__safi = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="safi", rest_name="safi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)
    self.__default_metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="default-metric", rest_name="default-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__administrative_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="administrative-distance", rest_name="administrative-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__redist_bgp = YANGDynClass(base=redist_bgp.redist_bgp, is_container='container', presence=False, yang_name="redist-bgp", rest_name="redist-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bgp-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__l2_wide_metric_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="l2-wide-metric-enabled", rest_name="l2-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__originate_default_routemap_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="originate-default-routemap-name", rest_name="originate-default-routemap-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__ldp_sync_hold_down = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ldp-sync-hold-down", rest_name="ldp-sync-hold-down", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__redist_connected = YANGDynClass(base=redist_connected.redist_connected, is_container='container', presence=False, yang_name="redist-connected", rest_name="redist-connected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-connected-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__maximum_equal_cost_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-equal-cost-paths", rest_name="maximum-equal-cost-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__originate_default_route = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="originate-default-route", rest_name="originate-default-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__l1_wide_metric_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="l1-wide-metric-enabled", rest_name="l1-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__l2_default_link_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-default-link-metric", rest_name="l2-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__redist_ospf = YANGDynClass(base=redist_ospf.redist_ospf, is_container='container', presence=False, yang_name="redist-ospf", rest_name="redist-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ospf-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__redist_isis = YANGDynClass(base=redist_isis.redist_isis, is_container='container', presence=False, yang_name="redist-isis", rest_name="redist-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state', u'router-isis-config', u'is-address-family-v4']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state', u'router-isis-config', u'is-address-family-v4']

  def _get_afi(self):
    """
    Getter method for afi, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/afi (isis-afi)

    YANG Description: AFI
    """
    return self.__afi
      
  def _set_afi(self, v, load=False):
    """
    Setter method for afi, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/afi (isis-afi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_afi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_afi() directly.

    YANG Description: AFI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-afi': {'value': 1}, u'isis-ipv4-afi': {'value': 0}},), is_leaf=True, yang_name="afi", rest_name="afi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-afi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """afi must be of a type compatible with isis-afi""",
          'defined-type': "brocade-isis-operational:isis-afi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-afi': {'value': 1}, u'isis-ipv4-afi': {'value': 0}},), is_leaf=True, yang_name="afi", rest_name="afi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-afi', is_config=False)""",
        })

    self.__afi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_afi(self):
    self.__afi = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-afi': {'value': 1}, u'isis-ipv4-afi': {'value': 0}},), is_leaf=True, yang_name="afi", rest_name="afi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-afi', is_config=False)


  def _get_safi(self):
    """
    Getter method for safi, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/safi (isis-safi)

    YANG Description: SAFI
    """
    return self.__safi
      
  def _set_safi(self, v, load=False):
    """
    Setter method for safi, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/safi (isis-safi)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_safi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_safi() directly.

    YANG Description: SAFI
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="safi", rest_name="safi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """safi must be of a type compatible with isis-safi""",
          'defined-type': "brocade-isis-operational:isis-safi",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="safi", rest_name="safi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)""",
        })

    self.__safi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_safi(self):
    self.__safi = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-ipv6-unicast-safi': {'value': 1}, u'isis-ipv4-unicast-safi': {'value': 0}},), is_leaf=True, yang_name="safi", rest_name="safi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-safi', is_config=False)


  def _get_originate_default_route(self):
    """
    Getter method for originate_default_route, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/originate_default_route (isis-status)

    YANG Description: Advertise a default route to neighboring ISs
    """
    return self.__originate_default_route
      
  def _set_originate_default_route(self, v, load=False):
    """
    Setter method for originate_default_route, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/originate_default_route (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originate_default_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originate_default_route() directly.

    YANG Description: Advertise a default route to neighboring ISs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="originate-default-route", rest_name="originate-default-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originate_default_route must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="originate-default-route", rest_name="originate-default-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__originate_default_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originate_default_route(self):
    self.__originate_default_route = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="originate-default-route", rest_name="originate-default-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_originate_default_routemap_name(self):
    """
    Getter method for originate_default_routemap_name, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/originate_default_routemap_name (string)

    YANG Description: Route map to originate the default route
    """
    return self.__originate_default_routemap_name
      
  def _set_originate_default_routemap_name(self, v, load=False):
    """
    Setter method for originate_default_routemap_name, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/originate_default_routemap_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_originate_default_routemap_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_originate_default_routemap_name() directly.

    YANG Description: Route map to originate the default route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="originate-default-routemap-name", rest_name="originate-default-routemap-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """originate_default_routemap_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="originate-default-routemap-name", rest_name="originate-default-routemap-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__originate_default_routemap_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_originate_default_routemap_name(self):
    self.__originate_default_routemap_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="originate-default-routemap-name", rest_name="originate-default-routemap-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_default_metric(self):
    """
    Getter method for default_metric, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/default_metric (uint16)

    YANG Description: Default redistribution metric
    """
    return self.__default_metric
      
  def _set_default_metric(self, v, load=False):
    """
    Setter method for default_metric, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/default_metric (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_metric() directly.

    YANG Description: Default redistribution metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="default-metric", rest_name="default-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_metric must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="default-metric", rest_name="default-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__default_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_metric(self):
    self.__default_metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="default-metric", rest_name="default-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_l1_default_link_metric(self):
    """
    Getter method for l1_default_link_metric, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l1_default_link_metric (uint32)

    YANG Description: Default IS-IS Level-1 Link metric
    """
    return self.__l1_default_link_metric
      
  def _set_l1_default_link_metric(self, v, load=False):
    """
    Setter method for l1_default_link_metric, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l1_default_link_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_default_link_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_default_link_metric() directly.

    YANG Description: Default IS-IS Level-1 Link metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-default-link-metric", rest_name="l1-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_default_link_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-default-link-metric", rest_name="l1-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_default_link_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_default_link_metric(self):
    self.__l1_default_link_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-default-link-metric", rest_name="l1-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_default_link_metric(self):
    """
    Getter method for l2_default_link_metric, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l2_default_link_metric (uint32)

    YANG Description: Default IS-IS Level-2 Link metric
    """
    return self.__l2_default_link_metric
      
  def _set_l2_default_link_metric(self, v, load=False):
    """
    Setter method for l2_default_link_metric, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l2_default_link_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_default_link_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_default_link_metric() directly.

    YANG Description: Default IS-IS Level-2 Link metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-default-link-metric", rest_name="l2-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_default_link_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-default-link-metric", rest_name="l2-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_default_link_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_default_link_metric(self):
    self.__l2_default_link_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-default-link-metric", rest_name="l2-default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_administrative_distance(self):
    """
    Getter method for administrative_distance, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/administrative_distance (uint32)

    YANG Description: Administrative Distance
    """
    return self.__administrative_distance
      
  def _set_administrative_distance(self, v, load=False):
    """
    Setter method for administrative_distance, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/administrative_distance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_administrative_distance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_administrative_distance() directly.

    YANG Description: Administrative Distance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="administrative-distance", rest_name="administrative-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """administrative_distance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="administrative-distance", rest_name="administrative-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__administrative_distance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_administrative_distance(self):
    self.__administrative_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="administrative-distance", rest_name="administrative-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_maximum_equal_cost_paths(self):
    """
    Getter method for maximum_equal_cost_paths, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/maximum_equal_cost_paths (uint32)

    YANG Description: Maximum paths
    """
    return self.__maximum_equal_cost_paths
      
  def _set_maximum_equal_cost_paths(self, v, load=False):
    """
    Setter method for maximum_equal_cost_paths, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/maximum_equal_cost_paths (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_equal_cost_paths is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_equal_cost_paths() directly.

    YANG Description: Maximum paths
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-equal-cost-paths", rest_name="maximum-equal-cost-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_equal_cost_paths must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-equal-cost-paths", rest_name="maximum-equal-cost-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__maximum_equal_cost_paths = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_equal_cost_paths(self):
    self.__maximum_equal_cost_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-equal-cost-paths", rest_name="maximum-equal-cost-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_redist_static(self):
    """
    Getter method for redist_static, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_static (container)

    YANG Description: IS-IS redistribution config for static route
    """
    return self.__redist_static
      
  def _set_redist_static(self, v, load=False):
    """
    Setter method for redist_static, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_static (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redist_static is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redist_static() directly.

    YANG Description: IS-IS redistribution config for static route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=redist_static.redist_static, is_container='container', presence=False, yang_name="redist-static", rest_name="redist-static", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-static-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redist_static must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=redist_static.redist_static, is_container='container', presence=False, yang_name="redist-static", rest_name="redist-static", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-static-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__redist_static = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redist_static(self):
    self.__redist_static = YANGDynClass(base=redist_static.redist_static, is_container='container', presence=False, yang_name="redist-static", rest_name="redist-static", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-static-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_redist_connected(self):
    """
    Getter method for redist_connected, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_connected (container)

    YANG Description: IS-IS redistribution config for directly connected routes
    """
    return self.__redist_connected
      
  def _set_redist_connected(self, v, load=False):
    """
    Setter method for redist_connected, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_connected (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redist_connected is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redist_connected() directly.

    YANG Description: IS-IS redistribution config for directly connected routes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=redist_connected.redist_connected, is_container='container', presence=False, yang_name="redist-connected", rest_name="redist-connected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-connected-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redist_connected must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=redist_connected.redist_connected, is_container='container', presence=False, yang_name="redist-connected", rest_name="redist-connected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-connected-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__redist_connected = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redist_connected(self):
    self.__redist_connected = YANGDynClass(base=redist_connected.redist_connected, is_container='container', presence=False, yang_name="redist-connected", rest_name="redist-connected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-connected-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_redist_bgp(self):
    """
    Getter method for redist_bgp, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_bgp (container)

    YANG Description: IS-IS redistribution config for BGP routes
    """
    return self.__redist_bgp
      
  def _set_redist_bgp(self, v, load=False):
    """
    Setter method for redist_bgp, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_bgp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redist_bgp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redist_bgp() directly.

    YANG Description: IS-IS redistribution config for BGP routes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=redist_bgp.redist_bgp, is_container='container', presence=False, yang_name="redist-bgp", rest_name="redist-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bgp-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redist_bgp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=redist_bgp.redist_bgp, is_container='container', presence=False, yang_name="redist-bgp", rest_name="redist-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bgp-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__redist_bgp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redist_bgp(self):
    self.__redist_bgp = YANGDynClass(base=redist_bgp.redist_bgp, is_container='container', presence=False, yang_name="redist-bgp", rest_name="redist-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bgp-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_redist_isis(self):
    """
    Getter method for redist_isis, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_isis (container)

    YANG Description: Redistribution config for IS-IS routes into IS-IS between levels
    """
    return self.__redist_isis
      
  def _set_redist_isis(self, v, load=False):
    """
    Setter method for redist_isis, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_isis (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redist_isis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redist_isis() directly.

    YANG Description: Redistribution config for IS-IS routes into IS-IS between levels
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=redist_isis.redist_isis, is_container='container', presence=False, yang_name="redist-isis", rest_name="redist-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redist_isis must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=redist_isis.redist_isis, is_container='container', presence=False, yang_name="redist-isis", rest_name="redist-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__redist_isis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redist_isis(self):
    self.__redist_isis = YANGDynClass(base=redist_isis.redist_isis, is_container='container', presence=False, yang_name="redist-isis", rest_name="redist-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-isis-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_redist_ospf(self):
    """
    Getter method for redist_ospf, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_ospf (container)

    YANG Description: Redistribution config for OSPF routes into IS-IS
    """
    return self.__redist_ospf
      
  def _set_redist_ospf(self, v, load=False):
    """
    Setter method for redist_ospf, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/redist_ospf (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redist_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redist_ospf() directly.

    YANG Description: Redistribution config for OSPF routes into IS-IS
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=redist_ospf.redist_ospf, is_container='container', presence=False, yang_name="redist-ospf", rest_name="redist-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ospf-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redist_ospf must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=redist_ospf.redist_ospf, is_container='container', presence=False, yang_name="redist-ospf", rest_name="redist-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ospf-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__redist_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redist_ospf(self):
    self.__redist_ospf = YANGDynClass(base=redist_ospf.redist_ospf, is_container='container', presence=False, yang_name="redist-ospf", rest_name="redist-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ospf-to-isis-redistribution', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l1_wide_metric_enabled(self):
    """
    Getter method for l1_wide_metric_enabled, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l1_wide_metric_enabled (boolean)

    YANG Description: Level-1 ISIS use wide-metric
    """
    return self.__l1_wide_metric_enabled
      
  def _set_l1_wide_metric_enabled(self, v, load=False):
    """
    Setter method for l1_wide_metric_enabled, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l1_wide_metric_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_wide_metric_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_wide_metric_enabled() directly.

    YANG Description: Level-1 ISIS use wide-metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="l1-wide-metric-enabled", rest_name="l1-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_wide_metric_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="l1-wide-metric-enabled", rest_name="l1-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__l1_wide_metric_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_wide_metric_enabled(self):
    self.__l1_wide_metric_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="l1-wide-metric-enabled", rest_name="l1-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_l2_wide_metric_enabled(self):
    """
    Getter method for l2_wide_metric_enabled, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l2_wide_metric_enabled (boolean)

    YANG Description: Level-2 ISIS use wide-metric
    """
    return self.__l2_wide_metric_enabled
      
  def _set_l2_wide_metric_enabled(self, v, load=False):
    """
    Setter method for l2_wide_metric_enabled, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/l2_wide_metric_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_wide_metric_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_wide_metric_enabled() directly.

    YANG Description: Level-2 ISIS use wide-metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="l2-wide-metric-enabled", rest_name="l2-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_wide_metric_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="l2-wide-metric-enabled", rest_name="l2-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__l2_wide_metric_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_wide_metric_enabled(self):
    self.__l2_wide_metric_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="l2-wide-metric-enabled", rest_name="l2-wide-metric-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_ldp_sync_enabled(self):
    """
    Getter method for ldp_sync_enabled, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/ldp_sync_enabled (isis-status)

    YANG Description: If LDP sync enabled on IS-IS interfaces
    """
    return self.__ldp_sync_enabled
      
  def _set_ldp_sync_enabled(self, v, load=False):
    """
    Setter method for ldp_sync_enabled, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/ldp_sync_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_sync_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_sync_enabled() directly.

    YANG Description: If LDP sync enabled on IS-IS interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ldp-sync-enabled", rest_name="ldp-sync-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_sync_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ldp-sync-enabled", rest_name="ldp-sync-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__ldp_sync_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_sync_enabled(self):
    self.__ldp_sync_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ldp-sync-enabled", rest_name="ldp-sync-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_ldp_sync_hold_down(self):
    """
    Getter method for ldp_sync_hold_down, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/ldp_sync_hold_down (uint16)

    YANG Description: LDP-Sync hold-down duration; 0 is infinite
    """
    return self.__ldp_sync_hold_down
      
  def _set_ldp_sync_hold_down(self, v, load=False):
    """
    Setter method for ldp_sync_hold_down, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/ldp_sync_hold_down (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_sync_hold_down is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_sync_hold_down() directly.

    YANG Description: LDP-Sync hold-down duration; 0 is infinite
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ldp-sync-hold-down", rest_name="ldp-sync-hold-down", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_sync_hold_down must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ldp-sync-hold-down", rest_name="ldp-sync-hold-down", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__ldp_sync_hold_down = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_sync_hold_down(self):
    self.__ldp_sync_hold_down = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ldp-sync-hold-down", rest_name="ldp-sync-hold-down", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_summary_address_v4(self):
    """
    Getter method for summary_address_v4, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/summary_address_v4 (list)

    YANG Description: IS-IS IPv4 address summary
    """
    return self.__summary_address_v4
      
  def _set_summary_address_v4(self, v, load=False):
    """
    Setter method for summary_address_v4, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4/summary_address_v4 (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_address_v4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_address_v4() directly.

    YANG Description: IS-IS IPv4 address summary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("address",summary_address_v4.summary_address_v4, yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='address', extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}), is_container='list', yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_address_v4 must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("address",summary_address_v4.summary_address_v4, yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='address', extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}), is_container='list', yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__summary_address_v4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_address_v4(self):
    self.__summary_address_v4 = YANGDynClass(base=YANGListType("address",summary_address_v4.summary_address_v4, yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='address', extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}), is_container='list', yang_name="summary-address-v4", rest_name="summary-address-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-summary-address', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  afi = __builtin__.property(_get_afi)
  safi = __builtin__.property(_get_safi)
  originate_default_route = __builtin__.property(_get_originate_default_route)
  originate_default_routemap_name = __builtin__.property(_get_originate_default_routemap_name)
  default_metric = __builtin__.property(_get_default_metric)
  l1_default_link_metric = __builtin__.property(_get_l1_default_link_metric)
  l2_default_link_metric = __builtin__.property(_get_l2_default_link_metric)
  administrative_distance = __builtin__.property(_get_administrative_distance)
  maximum_equal_cost_paths = __builtin__.property(_get_maximum_equal_cost_paths)
  redist_static = __builtin__.property(_get_redist_static)
  redist_connected = __builtin__.property(_get_redist_connected)
  redist_bgp = __builtin__.property(_get_redist_bgp)
  redist_isis = __builtin__.property(_get_redist_isis)
  redist_ospf = __builtin__.property(_get_redist_ospf)
  l1_wide_metric_enabled = __builtin__.property(_get_l1_wide_metric_enabled)
  l2_wide_metric_enabled = __builtin__.property(_get_l2_wide_metric_enabled)
  ldp_sync_enabled = __builtin__.property(_get_ldp_sync_enabled)
  ldp_sync_hold_down = __builtin__.property(_get_ldp_sync_hold_down)
  summary_address_v4 = __builtin__.property(_get_summary_address_v4)


  _pyangbind_elements = {'afi': afi, 'safi': safi, 'originate_default_route': originate_default_route, 'originate_default_routemap_name': originate_default_routemap_name, 'default_metric': default_metric, 'l1_default_link_metric': l1_default_link_metric, 'l2_default_link_metric': l2_default_link_metric, 'administrative_distance': administrative_distance, 'maximum_equal_cost_paths': maximum_equal_cost_paths, 'redist_static': redist_static, 'redist_connected': redist_connected, 'redist_bgp': redist_bgp, 'redist_isis': redist_isis, 'redist_ospf': redist_ospf, 'l1_wide_metric_enabled': l1_wide_metric_enabled, 'l2_wide_metric_enabled': l2_wide_metric_enabled, 'ldp_sync_enabled': ldp_sync_enabled, 'ldp_sync_hold_down': ldp_sync_hold_down, 'summary_address_v4': summary_address_v4, }


