
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import isis_system_info
import l1_auth_profile
import l2_auth_profile
import log_handler
import l1_spf_timer
import l2_spf_timer
import l1_spf6_timer
import l2_spf6_timer
import pspf_timer
import pspf6_timer
import is_address_family_v4
import is_address_family_v6
import reverse_metric
import debug_handler
class router_isis_config(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state/router-isis-config. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS Global configuration summary
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__nsr_state','__lsp_flood_count','__lsp_fast_flood_count','__fast_flood_wait_count','__hello_padding','__hello_padding_ptp','__csnp_interval','__lsp_gen_interval','__lsp_interval','__lsp_refresh_interval','__lsp_lifetime','__retransmit_interval','__pspf_enabled','__ispf_enabled','__istct_spf_enabled','__overload_state','__overload_startup_time','__overload_wait_on_bgp','__overload_bgp_wait_time','__enable_code_assertions','__graceful_restart_helper','__isis_hostname_enabled','__bfd','__bfd_holdover_interval','__isis_system_info','__l1_auth_profile','__l2_auth_profile','__log_handler','__l1_spf_timer','__l2_spf_timer','__l1_spf6_timer','__l2_spf6_timer','__pspf_timer','__pspf6_timer','__is_address_family_v4','__is_address_family_v6','__reverse_metric','__debug_handler',)

  _yang_name = 'router-isis-config'
  _rest_name = 'router-isis-config'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ispf_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ispf-enabled", rest_name="ispf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__overload_bgp_wait_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-bgp-wait-time", rest_name="overload-bgp-wait-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_auth_profile = YANGDynClass(base=l1_auth_profile.l1_auth_profile, is_container='container', presence=False, yang_name="l1-auth-profile", rest_name="l1-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l1-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__fast_flood_wait_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="fast-flood-wait-count", rest_name="fast-flood-wait-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__l1_spf6_timer = YANGDynClass(base=l1_spf6_timer.l1_spf6_timer, is_container='container', presence=False, yang_name="l1-spf6-timer", rest_name="l1-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__lsp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__debug_handler = YANGDynClass(base=debug_handler.debug_handler, is_container='container', presence=False, yang_name="debug-handler", rest_name="debug-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-debugger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__reverse_metric = YANGDynClass(base=reverse_metric.reverse_metric, is_container='container', presence=False, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__overload_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-state", rest_name="overload-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__is_address_family_v6 = YANGDynClass(base=is_address_family_v6.is_address_family_v6, is_container='container', presence=False, yang_name="is-address-family-v6", rest_name="is-address-family-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v6', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__retransmit_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__l2_spf6_timer = YANGDynClass(base=l2_spf6_timer.l2_spf6_timer, is_container='container', presence=False, yang_name="l2-spf6-timer", rest_name="l2-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__lsp_fast_flood_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-fast-flood-count", rest_name="lsp-fast-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__overload_startup_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-startup-time", rest_name="overload-startup-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__csnp_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__istct_spf_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="istct-spf-enabled", rest_name="istct-spf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__lsp_flood_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-flood-count", rest_name="lsp-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__nsr_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__l2_auth_profile = YANGDynClass(base=l2_auth_profile.l2_auth_profile, is_container='container', presence=False, yang_name="l2-auth-profile", rest_name="l2-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l2-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__overload_wait_on_bgp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-wait-on-bgp", rest_name="overload-wait-on-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__lsp_gen_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__lsp_refresh_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__lsp_lifetime = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-lifetime", rest_name="lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__isis_hostname_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="isis-hostname-enabled", rest_name="isis-hostname-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__hello_padding = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__isis_system_info = YANGDynClass(base=isis_system_info.isis_system_info, is_container='container', presence=False, yang_name="isis-system-info", rest_name="isis-system-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-system-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__graceful_restart_helper = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__pspf_timer = YANGDynClass(base=pspf_timer.pspf_timer, is_container='container', presence=False, yang_name="pspf-timer", rest_name="pspf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__bfd_holdover_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__is_address_family_v4 = YANGDynClass(base=is_address_family_v4.is_address_family_v4, is_container='container', presence=False, yang_name="is-address-family-v4", rest_name="is-address-family-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v4', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__enable_code_assertions = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="enable-code-assertions", rest_name="enable-code-assertions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__bfd = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__l2_spf_timer = YANGDynClass(base=l2_spf_timer.l2_spf_timer, is_container='container', presence=False, yang_name="l2-spf-timer", rest_name="l2-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__hello_padding_ptp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__l1_spf_timer = YANGDynClass(base=l1_spf_timer.l1_spf_timer, is_container='container', presence=False, yang_name="l1-spf-timer", rest_name="l1-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__log_handler = YANGDynClass(base=log_handler.log_handler, is_container='container', presence=False, yang_name="log-handler", rest_name="log-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-logger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__pspf6_timer = YANGDynClass(base=pspf6_timer.pspf6_timer, is_container='container', presence=False, yang_name="pspf6-timer", rest_name="pspf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf6-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__pspf_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="pspf-enabled", rest_name="pspf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state', u'router-isis-config']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state', u'router-isis-config']

  def _get_nsr_state(self):
    """
    Getter method for nsr_state, mapped from YANG variable /isis_state/router_isis_config/nsr_state (isis-status)

    YANG Description: If Non-stop routing enabled
    """
    return self.__nsr_state
      
  def _set_nsr_state(self, v, load=False):
    """
    Setter method for nsr_state, mapped from YANG variable /isis_state/router_isis_config/nsr_state (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsr_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsr_state() directly.

    YANG Description: If Non-stop routing enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsr_state must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__nsr_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsr_state(self):
    self.__nsr_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_lsp_flood_count(self):
    """
    Getter method for lsp_flood_count, mapped from YANG variable /isis_state/router_isis_config/lsp_flood_count (uint16)

    YANG Description: Number of LSPS can be transmitted in 100msec
    """
    return self.__lsp_flood_count
      
  def _set_lsp_flood_count(self, v, load=False):
    """
    Setter method for lsp_flood_count, mapped from YANG variable /isis_state/router_isis_config/lsp_flood_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_flood_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_flood_count() directly.

    YANG Description: Number of LSPS can be transmitted in 100msec
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-flood-count", rest_name="lsp-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_flood_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-flood-count", rest_name="lsp-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__lsp_flood_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_flood_count(self):
    self.__lsp_flood_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-flood-count", rest_name="lsp-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_lsp_fast_flood_count(self):
    """
    Getter method for lsp_fast_flood_count, mapped from YANG variable /isis_state/router_isis_config/lsp_fast_flood_count (uint16)

    YANG Description: Number of LSPs to be flooded before SPF run
    """
    return self.__lsp_fast_flood_count
      
  def _set_lsp_fast_flood_count(self, v, load=False):
    """
    Setter method for lsp_fast_flood_count, mapped from YANG variable /isis_state/router_isis_config/lsp_fast_flood_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_fast_flood_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_fast_flood_count() directly.

    YANG Description: Number of LSPs to be flooded before SPF run
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-fast-flood-count", rest_name="lsp-fast-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_fast_flood_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-fast-flood-count", rest_name="lsp-fast-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__lsp_fast_flood_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_fast_flood_count(self):
    self.__lsp_fast_flood_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-fast-flood-count", rest_name="lsp-fast-flood-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_fast_flood_wait_count(self):
    """
    Getter method for fast_flood_wait_count, mapped from YANG variable /isis_state/router_isis_config/fast_flood_wait_count (uint16)

    YANG Description: Number of 100msec iteration ISIS to wait without running SPF to succeed fast flood
    """
    return self.__fast_flood_wait_count
      
  def _set_fast_flood_wait_count(self, v, load=False):
    """
    Setter method for fast_flood_wait_count, mapped from YANG variable /isis_state/router_isis_config/fast_flood_wait_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fast_flood_wait_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fast_flood_wait_count() directly.

    YANG Description: Number of 100msec iteration ISIS to wait without running SPF to succeed fast flood
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="fast-flood-wait-count", rest_name="fast-flood-wait-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fast_flood_wait_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="fast-flood-wait-count", rest_name="fast-flood-wait-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__fast_flood_wait_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fast_flood_wait_count(self):
    self.__fast_flood_wait_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="fast-flood-wait-count", rest_name="fast-flood-wait-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_hello_padding(self):
    """
    Getter method for hello_padding, mapped from YANG variable /isis_state/router_isis_config/hello_padding (isis-status)

    YANG Description: If padding of IS-IS hello PDUs to full MTU enabled
    """
    return self.__hello_padding
      
  def _set_hello_padding(self, v, load=False):
    """
    Setter method for hello_padding, mapped from YANG variable /isis_state/router_isis_config/hello_padding (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_padding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_padding() directly.

    YANG Description: If padding of IS-IS hello PDUs to full MTU enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_padding must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__hello_padding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_padding(self):
    self.__hello_padding = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_hello_padding_ptp(self):
    """
    Getter method for hello_padding_ptp, mapped from YANG variable /isis_state/router_isis_config/hello_padding_ptp (isis-status)

    YANG Description: If padding of IS-IS hello PDUs enabled on P2P interfaces
    """
    return self.__hello_padding_ptp
      
  def _set_hello_padding_ptp(self, v, load=False):
    """
    Setter method for hello_padding_ptp, mapped from YANG variable /isis_state/router_isis_config/hello_padding_ptp (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_padding_ptp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_padding_ptp() directly.

    YANG Description: If padding of IS-IS hello PDUs enabled on P2P interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_padding_ptp must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__hello_padding_ptp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_padding_ptp(self):
    self.__hello_padding_ptp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_csnp_interval(self):
    """
    Getter method for csnp_interval, mapped from YANG variable /isis_state/router_isis_config/csnp_interval (uint16)

    YANG Description: Rate of transmission of CSNPs
    """
    return self.__csnp_interval
      
  def _set_csnp_interval(self, v, load=False):
    """
    Setter method for csnp_interval, mapped from YANG variable /isis_state/router_isis_config/csnp_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_csnp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_csnp_interval() directly.

    YANG Description: Rate of transmission of CSNPs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """csnp_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__csnp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_csnp_interval(self):
    self.__csnp_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_lsp_gen_interval(self):
    """
    Getter method for lsp_gen_interval, mapped from YANG variable /isis_state/router_isis_config/lsp_gen_interval (uint16)

    YANG Description: Minimum interval between regenerating same LSP
    """
    return self.__lsp_gen_interval
      
  def _set_lsp_gen_interval(self, v, load=False):
    """
    Setter method for lsp_gen_interval, mapped from YANG variable /isis_state/router_isis_config/lsp_gen_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_gen_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_gen_interval() directly.

    YANG Description: Minimum interval between regenerating same LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_gen_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__lsp_gen_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_gen_interval(self):
    self.__lsp_gen_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_lsp_interval(self):
    """
    Getter method for lsp_interval, mapped from YANG variable /isis_state/router_isis_config/lsp_interval (uint32)

    YANG Description: Rate of transmission of LSPs
    """
    return self.__lsp_interval
      
  def _set_lsp_interval(self, v, load=False):
    """
    Setter method for lsp_interval, mapped from YANG variable /isis_state/router_isis_config/lsp_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_interval() directly.

    YANG Description: Rate of transmission of LSPs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_interval(self):
    self.__lsp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_refresh_interval(self):
    """
    Getter method for lsp_refresh_interval, mapped from YANG variable /isis_state/router_isis_config/lsp_refresh_interval (uint16)

    YANG Description: LSP refresh interval
    """
    return self.__lsp_refresh_interval
      
  def _set_lsp_refresh_interval(self, v, load=False):
    """
    Setter method for lsp_refresh_interval, mapped from YANG variable /isis_state/router_isis_config/lsp_refresh_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_refresh_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_refresh_interval() directly.

    YANG Description: LSP refresh interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_refresh_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__lsp_refresh_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_refresh_interval(self):
    self.__lsp_refresh_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_lsp_lifetime(self):
    """
    Getter method for lsp_lifetime, mapped from YANG variable /isis_state/router_isis_config/lsp_lifetime (uint16)

    YANG Description: Maximum LSP lifetime
    """
    return self.__lsp_lifetime
      
  def _set_lsp_lifetime(self, v, load=False):
    """
    Setter method for lsp_lifetime, mapped from YANG variable /isis_state/router_isis_config/lsp_lifetime (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_lifetime() directly.

    YANG Description: Maximum LSP lifetime
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-lifetime", rest_name="lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_lifetime must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-lifetime", rest_name="lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__lsp_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_lifetime(self):
    self.__lsp_lifetime = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-lifetime", rest_name="lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_retransmit_interval(self):
    """
    Getter method for retransmit_interval, mapped from YANG variable /isis_state/router_isis_config/retransmit_interval (uint16)

    YANG Description: Time between retransmission of LSP
    """
    return self.__retransmit_interval
      
  def _set_retransmit_interval(self, v, load=False):
    """
    Setter method for retransmit_interval, mapped from YANG variable /isis_state/router_isis_config/retransmit_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retransmit_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retransmit_interval() directly.

    YANG Description: Time between retransmission of LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retransmit_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__retransmit_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retransmit_interval(self):
    self.__retransmit_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_pspf_enabled(self):
    """
    Getter method for pspf_enabled, mapped from YANG variable /isis_state/router_isis_config/pspf_enabled (isis-status)

    YANG Description: If Partial SPF Optimizations enabled
    """
    return self.__pspf_enabled
      
  def _set_pspf_enabled(self, v, load=False):
    """
    Setter method for pspf_enabled, mapped from YANG variable /isis_state/router_isis_config/pspf_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_enabled() directly.

    YANG Description: If Partial SPF Optimizations enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="pspf-enabled", rest_name="pspf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="pspf-enabled", rest_name="pspf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__pspf_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_enabled(self):
    self.__pspf_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="pspf-enabled", rest_name="pspf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_ispf_enabled(self):
    """
    Getter method for ispf_enabled, mapped from YANG variable /isis_state/router_isis_config/ispf_enabled (isis-status)

    YANG Description: If Incremental SPF Optimizations enabled
    """
    return self.__ispf_enabled
      
  def _set_ispf_enabled(self, v, load=False):
    """
    Setter method for ispf_enabled, mapped from YANG variable /isis_state/router_isis_config/ispf_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ispf_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ispf_enabled() directly.

    YANG Description: If Incremental SPF Optimizations enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ispf-enabled", rest_name="ispf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ispf_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ispf-enabled", rest_name="ispf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__ispf_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ispf_enabled(self):
    self.__ispf_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="ispf-enabled", rest_name="ispf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_istct_spf_enabled(self):
    """
    Getter method for istct_spf_enabled, mapped from YANG variable /isis_state/router_isis_config/istct_spf_enabled (isis-status)

    YANG Description: If incremental shortcut LSP SPF optimization enabled
    """
    return self.__istct_spf_enabled
      
  def _set_istct_spf_enabled(self, v, load=False):
    """
    Setter method for istct_spf_enabled, mapped from YANG variable /isis_state/router_isis_config/istct_spf_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_istct_spf_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_istct_spf_enabled() directly.

    YANG Description: If incremental shortcut LSP SPF optimization enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="istct-spf-enabled", rest_name="istct-spf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """istct_spf_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="istct-spf-enabled", rest_name="istct-spf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__istct_spf_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_istct_spf_enabled(self):
    self.__istct_spf_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="istct-spf-enabled", rest_name="istct-spf-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_overload_state(self):
    """
    Getter method for overload_state, mapped from YANG variable /isis_state/router_isis_config/overload_state (isis-status)

    YANG Description: If Overload-bit is set - indicates others that this IS could not be used
    """
    return self.__overload_state
      
  def _set_overload_state(self, v, load=False):
    """
    Setter method for overload_state, mapped from YANG variable /isis_state/router_isis_config/overload_state (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_state() directly.

    YANG Description: If Overload-bit is set - indicates others that this IS could not be used
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-state", rest_name="overload-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_state must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-state", rest_name="overload-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__overload_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_state(self):
    self.__overload_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-state", rest_name="overload-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_overload_startup_time(self):
    """
    Getter method for overload_startup_time, mapped from YANG variable /isis_state/router_isis_config/overload_startup_time (uint32)

    YANG Description: Time in seconds to stay temporarity in overloaded state on reboot
    """
    return self.__overload_startup_time
      
  def _set_overload_startup_time(self, v, load=False):
    """
    Setter method for overload_startup_time, mapped from YANG variable /isis_state/router_isis_config/overload_startup_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_startup_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_startup_time() directly.

    YANG Description: Time in seconds to stay temporarity in overloaded state on reboot
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-startup-time", rest_name="overload-startup-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_startup_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-startup-time", rest_name="overload-startup-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__overload_startup_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_startup_time(self):
    self.__overload_startup_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-startup-time", rest_name="overload-startup-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_overload_wait_on_bgp(self):
    """
    Getter method for overload_wait_on_bgp, mapped from YANG variable /isis_state/router_isis_config/overload_wait_on_bgp (isis-status)

    YANG Description: If IS to wait in overload-state temporarity till BGP converges on reboot
    """
    return self.__overload_wait_on_bgp
      
  def _set_overload_wait_on_bgp(self, v, load=False):
    """
    Setter method for overload_wait_on_bgp, mapped from YANG variable /isis_state/router_isis_config/overload_wait_on_bgp (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_wait_on_bgp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_wait_on_bgp() directly.

    YANG Description: If IS to wait in overload-state temporarity till BGP converges on reboot
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-wait-on-bgp", rest_name="overload-wait-on-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_wait_on_bgp must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-wait-on-bgp", rest_name="overload-wait-on-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__overload_wait_on_bgp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_wait_on_bgp(self):
    self.__overload_wait_on_bgp = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="overload-wait-on-bgp", rest_name="overload-wait-on-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_overload_bgp_wait_time(self):
    """
    Getter method for overload_bgp_wait_time, mapped from YANG variable /isis_state/router_isis_config/overload_bgp_wait_time (uint32)

    YANG Description: Maximum time in seconds to wait for BGP convergence
    """
    return self.__overload_bgp_wait_time
      
  def _set_overload_bgp_wait_time(self, v, load=False):
    """
    Setter method for overload_bgp_wait_time, mapped from YANG variable /isis_state/router_isis_config/overload_bgp_wait_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_bgp_wait_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_bgp_wait_time() directly.

    YANG Description: Maximum time in seconds to wait for BGP convergence
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-bgp-wait-time", rest_name="overload-bgp-wait-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_bgp_wait_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-bgp-wait-time", rest_name="overload-bgp-wait-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__overload_bgp_wait_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_bgp_wait_time(self):
    self.__overload_bgp_wait_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="overload-bgp-wait-time", rest_name="overload-bgp-wait-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_enable_code_assertions(self):
    """
    Getter method for enable_code_assertions, mapped from YANG variable /isis_state/router_isis_config/enable_code_assertions (isis-status)

    YANG Description: Enable code-assertions
    """
    return self.__enable_code_assertions
      
  def _set_enable_code_assertions(self, v, load=False):
    """
    Setter method for enable_code_assertions, mapped from YANG variable /isis_state/router_isis_config/enable_code_assertions (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_code_assertions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_code_assertions() directly.

    YANG Description: Enable code-assertions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="enable-code-assertions", rest_name="enable-code-assertions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_code_assertions must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="enable-code-assertions", rest_name="enable-code-assertions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__enable_code_assertions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_code_assertions(self):
    self.__enable_code_assertions = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="enable-code-assertions", rest_name="enable-code-assertions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_graceful_restart_helper(self):
    """
    Getter method for graceful_restart_helper, mapped from YANG variable /isis_state/router_isis_config/graceful_restart_helper (isis-status)

    YANG Description: Enable graceful restart helper support
    """
    return self.__graceful_restart_helper
      
  def _set_graceful_restart_helper(self, v, load=False):
    """
    Setter method for graceful_restart_helper, mapped from YANG variable /isis_state/router_isis_config/graceful_restart_helper (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_graceful_restart_helper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_graceful_restart_helper() directly.

    YANG Description: Enable graceful restart helper support
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """graceful_restart_helper must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__graceful_restart_helper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_graceful_restart_helper(self):
    self.__graceful_restart_helper = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_isis_hostname_enabled(self):
    """
    Getter method for isis_hostname_enabled, mapped from YANG variable /isis_state/router_isis_config/isis_hostname_enabled (isis-status)

    YANG Description: If IS-IS Hostname enabled
    """
    return self.__isis_hostname_enabled
      
  def _set_isis_hostname_enabled(self, v, load=False):
    """
    Setter method for isis_hostname_enabled, mapped from YANG variable /isis_state/router_isis_config/isis_hostname_enabled (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_hostname_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_hostname_enabled() directly.

    YANG Description: If IS-IS Hostname enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="isis-hostname-enabled", rest_name="isis-hostname-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_hostname_enabled must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="isis-hostname-enabled", rest_name="isis-hostname-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__isis_hostname_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_hostname_enabled(self):
    self.__isis_hostname_enabled = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="isis-hostname-enabled", rest_name="isis-hostname-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_bfd(self):
    """
    Getter method for bfd, mapped from YANG variable /isis_state/router_isis_config/bfd (boolean)

    YANG Description: bfd enabled
    """
    return self.__bfd
      
  def _set_bfd(self, v, load=False):
    """
    Setter method for bfd, mapped from YANG variable /isis_state/router_isis_config/bfd (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd() directly.

    YANG Description: bfd enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd(self):
    self.__bfd = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_bfd_holdover_interval(self):
    """
    Getter method for bfd_holdover_interval, mapped from YANG variable /isis_state/router_isis_config/bfd_holdover_interval (uint8)

    YANG Description: bfd holdover interval
    """
    return self.__bfd_holdover_interval
      
  def _set_bfd_holdover_interval(self, v, load=False):
    """
    Setter method for bfd_holdover_interval, mapped from YANG variable /isis_state/router_isis_config/bfd_holdover_interval (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_holdover_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_holdover_interval() directly.

    YANG Description: bfd holdover interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_holdover_interval must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__bfd_holdover_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_holdover_interval(self):
    self.__bfd_holdover_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_isis_system_info(self):
    """
    Getter method for isis_system_info, mapped from YANG variable /isis_state/router_isis_config/isis_system_info (container)

    YANG Description: information specific to a single instance of IS-IS protocol running on a router
    """
    return self.__isis_system_info
      
  def _set_isis_system_info(self, v, load=False):
    """
    Setter method for isis_system_info, mapped from YANG variable /isis_state/router_isis_config/isis_system_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_system_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_system_info() directly.

    YANG Description: information specific to a single instance of IS-IS protocol running on a router
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isis_system_info.isis_system_info, is_container='container', presence=False, yang_name="isis-system-info", rest_name="isis-system-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-system-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_system_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=isis_system_info.isis_system_info, is_container='container', presence=False, yang_name="isis-system-info", rest_name="isis-system-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-system-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__isis_system_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_system_info(self):
    self.__isis_system_info = YANGDynClass(base=isis_system_info.isis_system_info, is_container='container', presence=False, yang_name="isis-system-info", rest_name="isis-system-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-system-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l1_auth_profile(self):
    """
    Getter method for l1_auth_profile, mapped from YANG variable /isis_state/router_isis_config/l1_auth_profile (container)

    YANG Description: IS-IS Authentication profile for incoming Level-1 PDUs for LSPs, CSNPs and PSNPs
    """
    return self.__l1_auth_profile
      
  def _set_l1_auth_profile(self, v, load=False):
    """
    Setter method for l1_auth_profile, mapped from YANG variable /isis_state/router_isis_config/l1_auth_profile (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_auth_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_auth_profile() directly.

    YANG Description: IS-IS Authentication profile for incoming Level-1 PDUs for LSPs, CSNPs and PSNPs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l1_auth_profile.l1_auth_profile, is_container='container', presence=False, yang_name="l1-auth-profile", rest_name="l1-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l1-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_auth_profile must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l1_auth_profile.l1_auth_profile, is_container='container', presence=False, yang_name="l1-auth-profile", rest_name="l1-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l1-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__l1_auth_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_auth_profile(self):
    self.__l1_auth_profile = YANGDynClass(base=l1_auth_profile.l1_auth_profile, is_container='container', presence=False, yang_name="l1-auth-profile", rest_name="l1-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l1-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l2_auth_profile(self):
    """
    Getter method for l2_auth_profile, mapped from YANG variable /isis_state/router_isis_config/l2_auth_profile (container)

    YANG Description: IS-IS Authentication profile for incoming Level-2 PDUs for LSPs, CSNPs and PSNPs
    """
    return self.__l2_auth_profile
      
  def _set_l2_auth_profile(self, v, load=False):
    """
    Setter method for l2_auth_profile, mapped from YANG variable /isis_state/router_isis_config/l2_auth_profile (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_auth_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_auth_profile() directly.

    YANG Description: IS-IS Authentication profile for incoming Level-2 PDUs for LSPs, CSNPs and PSNPs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2_auth_profile.l2_auth_profile, is_container='container', presence=False, yang_name="l2-auth-profile", rest_name="l2-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l2-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_auth_profile must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2_auth_profile.l2_auth_profile, is_container='container', presence=False, yang_name="l2-auth-profile", rest_name="l2-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l2-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__l2_auth_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_auth_profile(self):
    self.__l2_auth_profile = YANGDynClass(base=l2_auth_profile.l2_auth_profile, is_container='container', presence=False, yang_name="l2-auth-profile", rest_name="l2-auth-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-l2-authentication-profile', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_log_handler(self):
    """
    Getter method for log_handler, mapped from YANG variable /isis_state/router_isis_config/log_handler (container)

    YANG Description: IS-IS logging handler
    """
    return self.__log_handler
      
  def _set_log_handler(self, v, load=False):
    """
    Setter method for log_handler, mapped from YANG variable /isis_state/router_isis_config/log_handler (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log_handler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log_handler() directly.

    YANG Description: IS-IS logging handler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=log_handler.log_handler, is_container='container', presence=False, yang_name="log-handler", rest_name="log-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-logger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log_handler must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=log_handler.log_handler, is_container='container', presence=False, yang_name="log-handler", rest_name="log-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-logger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__log_handler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log_handler(self):
    self.__log_handler = YANGDynClass(base=log_handler.log_handler, is_container='container', presence=False, yang_name="log-handler", rest_name="log-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-logger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l1_spf_timer(self):
    """
    Getter method for l1_spf_timer, mapped from YANG variable /isis_state/router_isis_config/l1_spf_timer (container)

    YANG Description: Timer for IS-IS Level-1 SPF calculation for IPv4
    """
    return self.__l1_spf_timer
      
  def _set_l1_spf_timer(self, v, load=False):
    """
    Setter method for l1_spf_timer, mapped from YANG variable /isis_state/router_isis_config/l1_spf_timer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_spf_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_spf_timer() directly.

    YANG Description: Timer for IS-IS Level-1 SPF calculation for IPv4
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l1_spf_timer.l1_spf_timer, is_container='container', presence=False, yang_name="l1-spf-timer", rest_name="l1-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_spf_timer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l1_spf_timer.l1_spf_timer, is_container='container', presence=False, yang_name="l1-spf-timer", rest_name="l1-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__l1_spf_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_spf_timer(self):
    self.__l1_spf_timer = YANGDynClass(base=l1_spf_timer.l1_spf_timer, is_container='container', presence=False, yang_name="l1-spf-timer", rest_name="l1-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l2_spf_timer(self):
    """
    Getter method for l2_spf_timer, mapped from YANG variable /isis_state/router_isis_config/l2_spf_timer (container)

    YANG Description: Timer for IS-IS Level-2 SPF calculation for IPv4
    """
    return self.__l2_spf_timer
      
  def _set_l2_spf_timer(self, v, load=False):
    """
    Setter method for l2_spf_timer, mapped from YANG variable /isis_state/router_isis_config/l2_spf_timer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_spf_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_spf_timer() directly.

    YANG Description: Timer for IS-IS Level-2 SPF calculation for IPv4
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2_spf_timer.l2_spf_timer, is_container='container', presence=False, yang_name="l2-spf-timer", rest_name="l2-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_spf_timer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2_spf_timer.l2_spf_timer, is_container='container', presence=False, yang_name="l2-spf-timer", rest_name="l2-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__l2_spf_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_spf_timer(self):
    self.__l2_spf_timer = YANGDynClass(base=l2_spf_timer.l2_spf_timer, is_container='container', presence=False, yang_name="l2-spf-timer", rest_name="l2-spf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l1_spf6_timer(self):
    """
    Getter method for l1_spf6_timer, mapped from YANG variable /isis_state/router_isis_config/l1_spf6_timer (container)

    YANG Description: Timer for IS-IS Level-1 SPF calculation for IPv6
    """
    return self.__l1_spf6_timer
      
  def _set_l1_spf6_timer(self, v, load=False):
    """
    Setter method for l1_spf6_timer, mapped from YANG variable /isis_state/router_isis_config/l1_spf6_timer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_spf6_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_spf6_timer() directly.

    YANG Description: Timer for IS-IS Level-1 SPF calculation for IPv6
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l1_spf6_timer.l1_spf6_timer, is_container='container', presence=False, yang_name="l1-spf6-timer", rest_name="l1-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_spf6_timer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l1_spf6_timer.l1_spf6_timer, is_container='container', presence=False, yang_name="l1-spf6-timer", rest_name="l1-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__l1_spf6_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_spf6_timer(self):
    self.__l1_spf6_timer = YANGDynClass(base=l1_spf6_timer.l1_spf6_timer, is_container='container', presence=False, yang_name="l1-spf6-timer", rest_name="l1-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l1', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_l2_spf6_timer(self):
    """
    Getter method for l2_spf6_timer, mapped from YANG variable /isis_state/router_isis_config/l2_spf6_timer (container)

    YANG Description: Timer for IS-IS Level-2 SPF calculation for IPv6
    """
    return self.__l2_spf6_timer
      
  def _set_l2_spf6_timer(self, v, load=False):
    """
    Setter method for l2_spf6_timer, mapped from YANG variable /isis_state/router_isis_config/l2_spf6_timer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_spf6_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_spf6_timer() directly.

    YANG Description: Timer for IS-IS Level-2 SPF calculation for IPv6
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2_spf6_timer.l2_spf6_timer, is_container='container', presence=False, yang_name="l2-spf6-timer", rest_name="l2-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_spf6_timer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=l2_spf6_timer.l2_spf6_timer, is_container='container', presence=False, yang_name="l2-spf6-timer", rest_name="l2-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__l2_spf6_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_spf6_timer(self):
    self.__l2_spf6_timer = YANGDynClass(base=l2_spf6_timer.l2_spf6_timer, is_container='container', presence=False, yang_name="l2-spf6-timer", rest_name="l2-spf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-spf6-timer-l2', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_pspf_timer(self):
    """
    Getter method for pspf_timer, mapped from YANG variable /isis_state/router_isis_config/pspf_timer (container)

    YANG Description: Timer for IS-IS Partial SPF calculation for IPv4
    """
    return self.__pspf_timer
      
  def _set_pspf_timer(self, v, load=False):
    """
    Setter method for pspf_timer, mapped from YANG variable /isis_state/router_isis_config/pspf_timer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_timer() directly.

    YANG Description: Timer for IS-IS Partial SPF calculation for IPv4
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pspf_timer.pspf_timer, is_container='container', presence=False, yang_name="pspf-timer", rest_name="pspf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_timer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pspf_timer.pspf_timer, is_container='container', presence=False, yang_name="pspf-timer", rest_name="pspf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__pspf_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_timer(self):
    self.__pspf_timer = YANGDynClass(base=pspf_timer.pspf_timer, is_container='container', presence=False, yang_name="pspf-timer", rest_name="pspf-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_pspf6_timer(self):
    """
    Getter method for pspf6_timer, mapped from YANG variable /isis_state/router_isis_config/pspf6_timer (container)

    YANG Description: Timer for IS-IS Partial SPF calculation for IPv6
    """
    return self.__pspf6_timer
      
  def _set_pspf6_timer(self, v, load=False):
    """
    Setter method for pspf6_timer, mapped from YANG variable /isis_state/router_isis_config/pspf6_timer (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf6_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf6_timer() directly.

    YANG Description: Timer for IS-IS Partial SPF calculation for IPv6
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=pspf6_timer.pspf6_timer, is_container='container', presence=False, yang_name="pspf6-timer", rest_name="pspf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf6-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf6_timer must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=pspf6_timer.pspf6_timer, is_container='container', presence=False, yang_name="pspf6-timer", rest_name="pspf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf6-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__pspf6_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf6_timer(self):
    self.__pspf6_timer = YANGDynClass(base=pspf6_timer.pspf6_timer, is_container='container', presence=False, yang_name="pspf6-timer", rest_name="pspf6-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-pspf6-timer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_is_address_family_v4(self):
    """
    Getter method for is_address_family_v4, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4 (container)

    YANG Description: ISIS ipv4 address family
    """
    return self.__is_address_family_v4
      
  def _set_is_address_family_v4(self, v, load=False):
    """
    Setter method for is_address_family_v4, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v4 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_address_family_v4 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_address_family_v4() directly.

    YANG Description: ISIS ipv4 address family
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=is_address_family_v4.is_address_family_v4, is_container='container', presence=False, yang_name="is-address-family-v4", rest_name="is-address-family-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v4', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_address_family_v4 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=is_address_family_v4.is_address_family_v4, is_container='container', presence=False, yang_name="is-address-family-v4", rest_name="is-address-family-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v4', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__is_address_family_v4 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_address_family_v4(self):
    self.__is_address_family_v4 = YANGDynClass(base=is_address_family_v4.is_address_family_v4, is_container='container', presence=False, yang_name="is-address-family-v4", rest_name="is-address-family-v4", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v4', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_is_address_family_v6(self):
    """
    Getter method for is_address_family_v6, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v6 (container)

    YANG Description: ISIS ipv6 address family
    """
    return self.__is_address_family_v6
      
  def _set_is_address_family_v6(self, v, load=False):
    """
    Setter method for is_address_family_v6, mapped from YANG variable /isis_state/router_isis_config/is_address_family_v6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_address_family_v6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_address_family_v6() directly.

    YANG Description: ISIS ipv6 address family
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=is_address_family_v6.is_address_family_v6, is_container='container', presence=False, yang_name="is-address-family-v6", rest_name="is-address-family-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v6', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_address_family_v6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=is_address_family_v6.is_address_family_v6, is_container='container', presence=False, yang_name="is-address-family-v6", rest_name="is-address-family-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v6', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__is_address_family_v6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_address_family_v6(self):
    self.__is_address_family_v6 = YANGDynClass(base=is_address_family_v6.is_address_family_v6, is_container='container', presence=False, yang_name="is-address-family-v6", rest_name="is-address-family-v6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-address-family-v6', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_reverse_metric(self):
    """
    Getter method for reverse_metric, mapped from YANG variable /isis_state/router_isis_config/reverse_metric (container)

    YANG Description: IS-IS system level reverse-metric configuration
    """
    return self.__reverse_metric
      
  def _set_reverse_metric(self, v, load=False):
    """
    Setter method for reverse_metric, mapped from YANG variable /isis_state/router_isis_config/reverse_metric (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reverse_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reverse_metric() directly.

    YANG Description: IS-IS system level reverse-metric configuration
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=reverse_metric.reverse_metric, is_container='container', presence=False, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reverse_metric must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=reverse_metric.reverse_metric, is_container='container', presence=False, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__reverse_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reverse_metric(self):
    self.__reverse_metric = YANGDynClass(base=reverse_metric.reverse_metric, is_container='container', presence=False, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-reverse-metric-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_debug_handler(self):
    """
    Getter method for debug_handler, mapped from YANG variable /isis_state/router_isis_config/debug_handler (container)

    YANG Description: IS-IS debug handler
    """
    return self.__debug_handler
      
  def _set_debug_handler(self, v, load=False):
    """
    Setter method for debug_handler, mapped from YANG variable /isis_state/router_isis_config/debug_handler (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_debug_handler is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_debug_handler() directly.

    YANG Description: IS-IS debug handler
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=debug_handler.debug_handler, is_container='container', presence=False, yang_name="debug-handler", rest_name="debug-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-debugger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """debug_handler must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=debug_handler.debug_handler, is_container='container', presence=False, yang_name="debug-handler", rest_name="debug-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-debugger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__debug_handler = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_debug_handler(self):
    self.__debug_handler = YANGDynClass(base=debug_handler.debug_handler, is_container='container', presence=False, yang_name="debug-handler", rest_name="debug-handler", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-debugger', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)

  nsr_state = __builtin__.property(_get_nsr_state)
  lsp_flood_count = __builtin__.property(_get_lsp_flood_count)
  lsp_fast_flood_count = __builtin__.property(_get_lsp_fast_flood_count)
  fast_flood_wait_count = __builtin__.property(_get_fast_flood_wait_count)
  hello_padding = __builtin__.property(_get_hello_padding)
  hello_padding_ptp = __builtin__.property(_get_hello_padding_ptp)
  csnp_interval = __builtin__.property(_get_csnp_interval)
  lsp_gen_interval = __builtin__.property(_get_lsp_gen_interval)
  lsp_interval = __builtin__.property(_get_lsp_interval)
  lsp_refresh_interval = __builtin__.property(_get_lsp_refresh_interval)
  lsp_lifetime = __builtin__.property(_get_lsp_lifetime)
  retransmit_interval = __builtin__.property(_get_retransmit_interval)
  pspf_enabled = __builtin__.property(_get_pspf_enabled)
  ispf_enabled = __builtin__.property(_get_ispf_enabled)
  istct_spf_enabled = __builtin__.property(_get_istct_spf_enabled)
  overload_state = __builtin__.property(_get_overload_state)
  overload_startup_time = __builtin__.property(_get_overload_startup_time)
  overload_wait_on_bgp = __builtin__.property(_get_overload_wait_on_bgp)
  overload_bgp_wait_time = __builtin__.property(_get_overload_bgp_wait_time)
  enable_code_assertions = __builtin__.property(_get_enable_code_assertions)
  graceful_restart_helper = __builtin__.property(_get_graceful_restart_helper)
  isis_hostname_enabled = __builtin__.property(_get_isis_hostname_enabled)
  bfd = __builtin__.property(_get_bfd)
  bfd_holdover_interval = __builtin__.property(_get_bfd_holdover_interval)
  isis_system_info = __builtin__.property(_get_isis_system_info)
  l1_auth_profile = __builtin__.property(_get_l1_auth_profile)
  l2_auth_profile = __builtin__.property(_get_l2_auth_profile)
  log_handler = __builtin__.property(_get_log_handler)
  l1_spf_timer = __builtin__.property(_get_l1_spf_timer)
  l2_spf_timer = __builtin__.property(_get_l2_spf_timer)
  l1_spf6_timer = __builtin__.property(_get_l1_spf6_timer)
  l2_spf6_timer = __builtin__.property(_get_l2_spf6_timer)
  pspf_timer = __builtin__.property(_get_pspf_timer)
  pspf6_timer = __builtin__.property(_get_pspf6_timer)
  is_address_family_v4 = __builtin__.property(_get_is_address_family_v4)
  is_address_family_v6 = __builtin__.property(_get_is_address_family_v6)
  reverse_metric = __builtin__.property(_get_reverse_metric)
  debug_handler = __builtin__.property(_get_debug_handler)


  _pyangbind_elements = {'nsr_state': nsr_state, 'lsp_flood_count': lsp_flood_count, 'lsp_fast_flood_count': lsp_fast_flood_count, 'fast_flood_wait_count': fast_flood_wait_count, 'hello_padding': hello_padding, 'hello_padding_ptp': hello_padding_ptp, 'csnp_interval': csnp_interval, 'lsp_gen_interval': lsp_gen_interval, 'lsp_interval': lsp_interval, 'lsp_refresh_interval': lsp_refresh_interval, 'lsp_lifetime': lsp_lifetime, 'retransmit_interval': retransmit_interval, 'pspf_enabled': pspf_enabled, 'ispf_enabled': ispf_enabled, 'istct_spf_enabled': istct_spf_enabled, 'overload_state': overload_state, 'overload_startup_time': overload_startup_time, 'overload_wait_on_bgp': overload_wait_on_bgp, 'overload_bgp_wait_time': overload_bgp_wait_time, 'enable_code_assertions': enable_code_assertions, 'graceful_restart_helper': graceful_restart_helper, 'isis_hostname_enabled': isis_hostname_enabled, 'bfd': bfd, 'bfd_holdover_interval': bfd_holdover_interval, 'isis_system_info': isis_system_info, 'l1_auth_profile': l1_auth_profile, 'l2_auth_profile': l2_auth_profile, 'log_handler': log_handler, 'l1_spf_timer': l1_spf_timer, 'l2_spf_timer': l2_spf_timer, 'l1_spf6_timer': l1_spf6_timer, 'l2_spf6_timer': l2_spf6_timer, 'pspf_timer': pspf_timer, 'pspf6_timer': pspf6_timer, 'is_address_family_v4': is_address_family_v4, 'is_address_family_v6': is_address_family_v6, 'reverse_metric': reverse_metric, 'debug_handler': debug_handler, }


