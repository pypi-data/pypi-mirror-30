
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import lsp_entry
class database(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state/database. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS LSP database
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__isis_operation','__level','__lsp_level1_count','__lsp_level2_count','__lsp_level1_loading','__lsp_level2_loading','__lsp_level1_fragments','__lsp_level2_fragments','__lsp_level1_pseudo','__lsp_level2_pseudo','__lsp_level1_pseudo_fragments','__lsp_level2_pseudo_fragments','__lsp_level1_my_count','__lsp_level2_my_count','__lsp_level1_my_lsp_fragments','__lsp_level2_my_lsp_fragments','__lsp_level1_my_pseudo','__lsp_level2_my_pseudo','__lsp_level1_my_pseudo_fragments','__lsp_level2_my_pseudo_fragments','__lsp_level1_checksum','__lsp_level2_checksum','__lsp_entry',)

  _yang_name = 'database'
  _rest_name = 'database'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__isis_operation = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-operation", rest_name="isis-operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__lsp_entry = YANGDynClass(base=YANGListType("lsp_level lsp_id",lsp_entry.lsp_entry, yang_name="lsp-entry", rest_name="lsp-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-level lsp-id', extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-entry", rest_name="lsp-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__lsp_level2_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-fragments", rest_name="lsp-level2-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo-fragments", rest_name="lsp-level2-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_my_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo", rest_name="lsp-level1-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_my_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo-fragments", rest_name="lsp-level2-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_loading = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-loading", rest_name="lsp-level1-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-checksum", rest_name="lsp-level2-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_my_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo-fragments", rest_name="lsp-level1-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo", rest_name="lsp-level1-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-count", rest_name="lsp-level2-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_my_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-count", rest_name="lsp-level2-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-fragments", rest_name="lsp-level1-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_my_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo", rest_name="lsp-level2-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-count", rest_name="lsp-level1-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="level", rest_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo", rest_name="lsp-level2-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_my_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-count", rest_name="lsp-level1-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_my_lsp_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-lsp-fragments", rest_name="lsp-level2-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-checksum", rest_name="lsp-level1-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo-fragments", rest_name="lsp-level1-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level2_loading = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-loading", rest_name="lsp-level2-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level1_my_lsp_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-lsp-fragments", rest_name="lsp-level1-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state', u'database']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state', u'database']

  def _get_isis_operation(self):
    """
    Getter method for isis_operation, mapped from YANG variable /isis_state/database/isis_operation (boolean)

    YANG Description: IS-IS Operational State
    """
    return self.__isis_operation
      
  def _set_isis_operation(self, v, load=False):
    """
    Setter method for isis_operation, mapped from YANG variable /isis_state/database/isis_operation (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_operation is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_operation() directly.

    YANG Description: IS-IS Operational State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="isis-operation", rest_name="isis-operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_operation must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-operation", rest_name="isis-operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__isis_operation = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_operation(self):
    self.__isis_operation = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-operation", rest_name="isis-operation", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_level(self):
    """
    Getter method for level, mapped from YANG variable /isis_state/database/level (uint32)

    YANG Description: IS-Level
    """
    return self.__level
      
  def _set_level(self, v, load=False):
    """
    Setter method for level, mapped from YANG variable /isis_state/database/level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_level() directly.

    YANG Description: IS-Level
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="level", rest_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="level", rest_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_level(self):
    self.__level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="level", rest_name="level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_count(self):
    """
    Getter method for lsp_level1_count, mapped from YANG variable /isis_state/database/lsp_level1_count (uint32)

    YANG Description: LSP Level1 Count
    """
    return self.__lsp_level1_count
      
  def _set_lsp_level1_count(self, v, load=False):
    """
    Setter method for lsp_level1_count, mapped from YANG variable /isis_state/database/lsp_level1_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_count() directly.

    YANG Description: LSP Level1 Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-count", rest_name="lsp-level1-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-count", rest_name="lsp-level1-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_count(self):
    self.__lsp_level1_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-count", rest_name="lsp-level1-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_count(self):
    """
    Getter method for lsp_level2_count, mapped from YANG variable /isis_state/database/lsp_level2_count (uint32)

    YANG Description: LSP Level2 Count
    """
    return self.__lsp_level2_count
      
  def _set_lsp_level2_count(self, v, load=False):
    """
    Setter method for lsp_level2_count, mapped from YANG variable /isis_state/database/lsp_level2_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_count() directly.

    YANG Description: LSP Level2 Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-count", rest_name="lsp-level2-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-count", rest_name="lsp-level2-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_count(self):
    self.__lsp_level2_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-count", rest_name="lsp-level2-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_loading(self):
    """
    Getter method for lsp_level1_loading, mapped from YANG variable /isis_state/database/lsp_level1_loading (uint32)

    YANG Description: LSP Level Loading Count
    """
    return self.__lsp_level1_loading
      
  def _set_lsp_level1_loading(self, v, load=False):
    """
    Setter method for lsp_level1_loading, mapped from YANG variable /isis_state/database/lsp_level1_loading (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_loading is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_loading() directly.

    YANG Description: LSP Level Loading Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-loading", rest_name="lsp-level1-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_loading must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-loading", rest_name="lsp-level1-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_loading = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_loading(self):
    self.__lsp_level1_loading = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-loading", rest_name="lsp-level1-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_loading(self):
    """
    Getter method for lsp_level2_loading, mapped from YANG variable /isis_state/database/lsp_level2_loading (uint32)

    YANG Description: LSP Level2 Loading Count
    """
    return self.__lsp_level2_loading
      
  def _set_lsp_level2_loading(self, v, load=False):
    """
    Setter method for lsp_level2_loading, mapped from YANG variable /isis_state/database/lsp_level2_loading (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_loading is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_loading() directly.

    YANG Description: LSP Level2 Loading Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-loading", rest_name="lsp-level2-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_loading must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-loading", rest_name="lsp-level2-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_loading = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_loading(self):
    self.__lsp_level2_loading = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-loading", rest_name="lsp-level2-loading", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_fragments(self):
    """
    Getter method for lsp_level1_fragments, mapped from YANG variable /isis_state/database/lsp_level1_fragments (uint32)

    YANG Description: LSP Level1 Fragments Count
    """
    return self.__lsp_level1_fragments
      
  def _set_lsp_level1_fragments(self, v, load=False):
    """
    Setter method for lsp_level1_fragments, mapped from YANG variable /isis_state/database/lsp_level1_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_fragments() directly.

    YANG Description: LSP Level1 Fragments Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-fragments", rest_name="lsp-level1-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-fragments", rest_name="lsp-level1-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_fragments(self):
    self.__lsp_level1_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-fragments", rest_name="lsp-level1-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_fragments(self):
    """
    Getter method for lsp_level2_fragments, mapped from YANG variable /isis_state/database/lsp_level2_fragments (uint32)

    YANG Description: LSP Level2 Fragments Count
    """
    return self.__lsp_level2_fragments
      
  def _set_lsp_level2_fragments(self, v, load=False):
    """
    Setter method for lsp_level2_fragments, mapped from YANG variable /isis_state/database/lsp_level2_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_fragments() directly.

    YANG Description: LSP Level2 Fragments Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-fragments", rest_name="lsp-level2-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-fragments", rest_name="lsp-level2-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_fragments(self):
    self.__lsp_level2_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-fragments", rest_name="lsp-level2-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_pseudo(self):
    """
    Getter method for lsp_level1_pseudo, mapped from YANG variable /isis_state/database/lsp_level1_pseudo (uint32)

    YANG Description: LSP Level1 Pseudo Count
    """
    return self.__lsp_level1_pseudo
      
  def _set_lsp_level1_pseudo(self, v, load=False):
    """
    Setter method for lsp_level1_pseudo, mapped from YANG variable /isis_state/database/lsp_level1_pseudo (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_pseudo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_pseudo() directly.

    YANG Description: LSP Level1 Pseudo Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo", rest_name="lsp-level1-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_pseudo must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo", rest_name="lsp-level1-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_pseudo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_pseudo(self):
    self.__lsp_level1_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo", rest_name="lsp-level1-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_pseudo(self):
    """
    Getter method for lsp_level2_pseudo, mapped from YANG variable /isis_state/database/lsp_level2_pseudo (uint32)

    YANG Description: LSP Level2 Pseudo Count
    """
    return self.__lsp_level2_pseudo
      
  def _set_lsp_level2_pseudo(self, v, load=False):
    """
    Setter method for lsp_level2_pseudo, mapped from YANG variable /isis_state/database/lsp_level2_pseudo (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_pseudo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_pseudo() directly.

    YANG Description: LSP Level2 Pseudo Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo", rest_name="lsp-level2-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_pseudo must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo", rest_name="lsp-level2-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_pseudo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_pseudo(self):
    self.__lsp_level2_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo", rest_name="lsp-level2-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_pseudo_fragments(self):
    """
    Getter method for lsp_level1_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level1_pseudo_fragments (uint32)

    YANG Description: LSP Level1 Pseudo Framgents Count
    """
    return self.__lsp_level1_pseudo_fragments
      
  def _set_lsp_level1_pseudo_fragments(self, v, load=False):
    """
    Setter method for lsp_level1_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level1_pseudo_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_pseudo_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_pseudo_fragments() directly.

    YANG Description: LSP Level1 Pseudo Framgents Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo-fragments", rest_name="lsp-level1-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_pseudo_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo-fragments", rest_name="lsp-level1-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_pseudo_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_pseudo_fragments(self):
    self.__lsp_level1_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-pseudo-fragments", rest_name="lsp-level1-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_pseudo_fragments(self):
    """
    Getter method for lsp_level2_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level2_pseudo_fragments (uint32)

    YANG Description: LSP Level2 Pseudo Framgents Count
    """
    return self.__lsp_level2_pseudo_fragments
      
  def _set_lsp_level2_pseudo_fragments(self, v, load=False):
    """
    Setter method for lsp_level2_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level2_pseudo_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_pseudo_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_pseudo_fragments() directly.

    YANG Description: LSP Level2 Pseudo Framgents Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo-fragments", rest_name="lsp-level2-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_pseudo_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo-fragments", rest_name="lsp-level2-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_pseudo_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_pseudo_fragments(self):
    self.__lsp_level2_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-pseudo-fragments", rest_name="lsp-level2-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_my_count(self):
    """
    Getter method for lsp_level1_my_count, mapped from YANG variable /isis_state/database/lsp_level1_my_count (uint32)

    YANG Description: LSP Level1 My Count
    """
    return self.__lsp_level1_my_count
      
  def _set_lsp_level1_my_count(self, v, load=False):
    """
    Setter method for lsp_level1_my_count, mapped from YANG variable /isis_state/database/lsp_level1_my_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_my_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_my_count() directly.

    YANG Description: LSP Level1 My Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-count", rest_name="lsp-level1-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_my_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-count", rest_name="lsp-level1-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_my_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_my_count(self):
    self.__lsp_level1_my_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-count", rest_name="lsp-level1-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_my_count(self):
    """
    Getter method for lsp_level2_my_count, mapped from YANG variable /isis_state/database/lsp_level2_my_count (uint32)

    YANG Description: LSP Level2 My Count
    """
    return self.__lsp_level2_my_count
      
  def _set_lsp_level2_my_count(self, v, load=False):
    """
    Setter method for lsp_level2_my_count, mapped from YANG variable /isis_state/database/lsp_level2_my_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_my_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_my_count() directly.

    YANG Description: LSP Level2 My Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-count", rest_name="lsp-level2-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_my_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-count", rest_name="lsp-level2-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_my_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_my_count(self):
    self.__lsp_level2_my_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-count", rest_name="lsp-level2-my-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_my_lsp_fragments(self):
    """
    Getter method for lsp_level1_my_lsp_fragments, mapped from YANG variable /isis_state/database/lsp_level1_my_lsp_fragments (uint32)

    YANG Description: LSP Level1 My Fragments Count
    """
    return self.__lsp_level1_my_lsp_fragments
      
  def _set_lsp_level1_my_lsp_fragments(self, v, load=False):
    """
    Setter method for lsp_level1_my_lsp_fragments, mapped from YANG variable /isis_state/database/lsp_level1_my_lsp_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_my_lsp_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_my_lsp_fragments() directly.

    YANG Description: LSP Level1 My Fragments Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-lsp-fragments", rest_name="lsp-level1-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_my_lsp_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-lsp-fragments", rest_name="lsp-level1-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_my_lsp_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_my_lsp_fragments(self):
    self.__lsp_level1_my_lsp_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-lsp-fragments", rest_name="lsp-level1-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_my_lsp_fragments(self):
    """
    Getter method for lsp_level2_my_lsp_fragments, mapped from YANG variable /isis_state/database/lsp_level2_my_lsp_fragments (uint32)

    YANG Description: LSP Level2 My Framgents Count
    """
    return self.__lsp_level2_my_lsp_fragments
      
  def _set_lsp_level2_my_lsp_fragments(self, v, load=False):
    """
    Setter method for lsp_level2_my_lsp_fragments, mapped from YANG variable /isis_state/database/lsp_level2_my_lsp_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_my_lsp_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_my_lsp_fragments() directly.

    YANG Description: LSP Level2 My Framgents Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-lsp-fragments", rest_name="lsp-level2-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_my_lsp_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-lsp-fragments", rest_name="lsp-level2-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_my_lsp_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_my_lsp_fragments(self):
    self.__lsp_level2_my_lsp_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-lsp-fragments", rest_name="lsp-level2-my-lsp-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_my_pseudo(self):
    """
    Getter method for lsp_level1_my_pseudo, mapped from YANG variable /isis_state/database/lsp_level1_my_pseudo (uint32)

    YANG Description: LSP Level1 My Pseudo Count
    """
    return self.__lsp_level1_my_pseudo
      
  def _set_lsp_level1_my_pseudo(self, v, load=False):
    """
    Setter method for lsp_level1_my_pseudo, mapped from YANG variable /isis_state/database/lsp_level1_my_pseudo (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_my_pseudo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_my_pseudo() directly.

    YANG Description: LSP Level1 My Pseudo Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo", rest_name="lsp-level1-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_my_pseudo must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo", rest_name="lsp-level1-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_my_pseudo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_my_pseudo(self):
    self.__lsp_level1_my_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo", rest_name="lsp-level1-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_my_pseudo(self):
    """
    Getter method for lsp_level2_my_pseudo, mapped from YANG variable /isis_state/database/lsp_level2_my_pseudo (uint32)

    YANG Description: LSP Level2 My Pseudo Count
    """
    return self.__lsp_level2_my_pseudo
      
  def _set_lsp_level2_my_pseudo(self, v, load=False):
    """
    Setter method for lsp_level2_my_pseudo, mapped from YANG variable /isis_state/database/lsp_level2_my_pseudo (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_my_pseudo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_my_pseudo() directly.

    YANG Description: LSP Level2 My Pseudo Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo", rest_name="lsp-level2-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_my_pseudo must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo", rest_name="lsp-level2-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_my_pseudo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_my_pseudo(self):
    self.__lsp_level2_my_pseudo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo", rest_name="lsp-level2-my-pseudo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_my_pseudo_fragments(self):
    """
    Getter method for lsp_level1_my_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level1_my_pseudo_fragments (uint32)

    YANG Description: LSP Level1 My Pseudo Framtents Count
    """
    return self.__lsp_level1_my_pseudo_fragments
      
  def _set_lsp_level1_my_pseudo_fragments(self, v, load=False):
    """
    Setter method for lsp_level1_my_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level1_my_pseudo_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_my_pseudo_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_my_pseudo_fragments() directly.

    YANG Description: LSP Level1 My Pseudo Framtents Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo-fragments", rest_name="lsp-level1-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_my_pseudo_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo-fragments", rest_name="lsp-level1-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_my_pseudo_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_my_pseudo_fragments(self):
    self.__lsp_level1_my_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-my-pseudo-fragments", rest_name="lsp-level1-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_my_pseudo_fragments(self):
    """
    Getter method for lsp_level2_my_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level2_my_pseudo_fragments (uint32)

    YANG Description: LSP Level2 My Pseudo Framtents Count
    """
    return self.__lsp_level2_my_pseudo_fragments
      
  def _set_lsp_level2_my_pseudo_fragments(self, v, load=False):
    """
    Setter method for lsp_level2_my_pseudo_fragments, mapped from YANG variable /isis_state/database/lsp_level2_my_pseudo_fragments (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_my_pseudo_fragments is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_my_pseudo_fragments() directly.

    YANG Description: LSP Level2 My Pseudo Framtents Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo-fragments", rest_name="lsp-level2-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_my_pseudo_fragments must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo-fragments", rest_name="lsp-level2-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_my_pseudo_fragments = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_my_pseudo_fragments(self):
    self.__lsp_level2_my_pseudo_fragments = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-my-pseudo-fragments", rest_name="lsp-level2-my-pseudo-fragments", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level1_checksum(self):
    """
    Getter method for lsp_level1_checksum, mapped from YANG variable /isis_state/database/lsp_level1_checksum (uint32)

    YANG Description: LSP Level1 Sum of Checksum
    """
    return self.__lsp_level1_checksum
      
  def _set_lsp_level1_checksum(self, v, load=False):
    """
    Setter method for lsp_level1_checksum, mapped from YANG variable /isis_state/database/lsp_level1_checksum (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level1_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level1_checksum() directly.

    YANG Description: LSP Level1 Sum of Checksum
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-checksum", rest_name="lsp-level1-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level1_checksum must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-checksum", rest_name="lsp-level1-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level1_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level1_checksum(self):
    self.__lsp_level1_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level1-checksum", rest_name="lsp-level1-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_level2_checksum(self):
    """
    Getter method for lsp_level2_checksum, mapped from YANG variable /isis_state/database/lsp_level2_checksum (uint32)

    YANG Description: LSP Level2 Sum of Checksum
    """
    return self.__lsp_level2_checksum
      
  def _set_lsp_level2_checksum(self, v, load=False):
    """
    Setter method for lsp_level2_checksum, mapped from YANG variable /isis_state/database/lsp_level2_checksum (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level2_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level2_checksum() directly.

    YANG Description: LSP Level2 Sum of Checksum
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-checksum", rest_name="lsp-level2-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level2_checksum must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-checksum", rest_name="lsp-level2-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level2_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level2_checksum(self):
    self.__lsp_level2_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level2-checksum", rest_name="lsp-level2-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_entry(self):
    """
    Getter method for lsp_entry, mapped from YANG variable /isis_state/database/lsp_entry (list)

    YANG Description: ISIS LSP MO
    """
    return self.__lsp_entry
      
  def _set_lsp_entry(self, v, load=False):
    """
    Setter method for lsp_entry, mapped from YANG variable /isis_state/database/lsp_entry (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_entry() directly.

    YANG Description: ISIS LSP MO
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("lsp_level lsp_id",lsp_entry.lsp_entry, yang_name="lsp-entry", rest_name="lsp-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-level lsp-id', extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-entry", rest_name="lsp-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_entry must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("lsp_level lsp_id",lsp_entry.lsp_entry, yang_name="lsp-entry", rest_name="lsp-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-level lsp-id', extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-entry", rest_name="lsp-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__lsp_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_entry(self):
    self.__lsp_entry = YANGDynClass(base=YANGListType("lsp_level lsp_id",lsp_entry.lsp_entry, yang_name="lsp-entry", rest_name="lsp-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-level lsp-id', extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-entry", rest_name="lsp-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  isis_operation = __builtin__.property(_get_isis_operation)
  level = __builtin__.property(_get_level)
  lsp_level1_count = __builtin__.property(_get_lsp_level1_count)
  lsp_level2_count = __builtin__.property(_get_lsp_level2_count)
  lsp_level1_loading = __builtin__.property(_get_lsp_level1_loading)
  lsp_level2_loading = __builtin__.property(_get_lsp_level2_loading)
  lsp_level1_fragments = __builtin__.property(_get_lsp_level1_fragments)
  lsp_level2_fragments = __builtin__.property(_get_lsp_level2_fragments)
  lsp_level1_pseudo = __builtin__.property(_get_lsp_level1_pseudo)
  lsp_level2_pseudo = __builtin__.property(_get_lsp_level2_pseudo)
  lsp_level1_pseudo_fragments = __builtin__.property(_get_lsp_level1_pseudo_fragments)
  lsp_level2_pseudo_fragments = __builtin__.property(_get_lsp_level2_pseudo_fragments)
  lsp_level1_my_count = __builtin__.property(_get_lsp_level1_my_count)
  lsp_level2_my_count = __builtin__.property(_get_lsp_level2_my_count)
  lsp_level1_my_lsp_fragments = __builtin__.property(_get_lsp_level1_my_lsp_fragments)
  lsp_level2_my_lsp_fragments = __builtin__.property(_get_lsp_level2_my_lsp_fragments)
  lsp_level1_my_pseudo = __builtin__.property(_get_lsp_level1_my_pseudo)
  lsp_level2_my_pseudo = __builtin__.property(_get_lsp_level2_my_pseudo)
  lsp_level1_my_pseudo_fragments = __builtin__.property(_get_lsp_level1_my_pseudo_fragments)
  lsp_level2_my_pseudo_fragments = __builtin__.property(_get_lsp_level2_my_pseudo_fragments)
  lsp_level1_checksum = __builtin__.property(_get_lsp_level1_checksum)
  lsp_level2_checksum = __builtin__.property(_get_lsp_level2_checksum)
  lsp_entry = __builtin__.property(_get_lsp_entry)


  _pyangbind_elements = {'isis_operation': isis_operation, 'level': level, 'lsp_level1_count': lsp_level1_count, 'lsp_level2_count': lsp_level2_count, 'lsp_level1_loading': lsp_level1_loading, 'lsp_level2_loading': lsp_level2_loading, 'lsp_level1_fragments': lsp_level1_fragments, 'lsp_level2_fragments': lsp_level2_fragments, 'lsp_level1_pseudo': lsp_level1_pseudo, 'lsp_level2_pseudo': lsp_level2_pseudo, 'lsp_level1_pseudo_fragments': lsp_level1_pseudo_fragments, 'lsp_level2_pseudo_fragments': lsp_level2_pseudo_fragments, 'lsp_level1_my_count': lsp_level1_my_count, 'lsp_level2_my_count': lsp_level2_my_count, 'lsp_level1_my_lsp_fragments': lsp_level1_my_lsp_fragments, 'lsp_level2_my_lsp_fragments': lsp_level2_my_lsp_fragments, 'lsp_level1_my_pseudo': lsp_level1_my_pseudo, 'lsp_level2_my_pseudo': lsp_level2_my_pseudo, 'lsp_level1_my_pseudo_fragments': lsp_level1_my_pseudo_fragments, 'lsp_level2_my_pseudo_fragments': lsp_level2_my_pseudo_fragments, 'lsp_level1_checksum': lsp_level1_checksum, 'lsp_level2_checksum': lsp_level2_checksum, 'lsp_entry': lsp_entry, }


