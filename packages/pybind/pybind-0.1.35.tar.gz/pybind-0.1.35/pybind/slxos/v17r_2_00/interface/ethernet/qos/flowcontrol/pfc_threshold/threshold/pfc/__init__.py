
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class pfc(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface/ethernet/qos/flowcontrol/pfc-threshold/threshold/pfc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__pfc_threshold_cos','__pfc_threshold_tx_on','__pfc_threshold_tx_off',)

  _yang_name = 'pfc'
  _rest_name = 'pfc'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__pfc_threshold_cos = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="pfc-threshold-cos", rest_name="pfc-threshold-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'0-7;;CoS value'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='cos-id-type', is_config=True)
    self.__pfc_threshold_tx_off = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-off", rest_name="off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx Off threshold', u'alt-name': u'off'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)
    self.__pfc_threshold_tx_on = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-on", rest_name="on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx On threshold', u'alt-name': u'on', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface', u'ethernet', u'qos', u'flowcontrol', u'pfc-threshold', u'threshold', u'pfc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Ethernet', u'qos', u'flowcontrol', u'threshold', u'pfc']

  def _get_pfc_threshold_cos(self):
    """
    Getter method for pfc_threshold_cos, mapped from YANG variable /interface/ethernet/qos/flowcontrol/pfc_threshold/threshold/pfc/pfc_threshold_cos (cos-id-type)
    """
    return self.__pfc_threshold_cos
      
  def _set_pfc_threshold_cos(self, v, load=False):
    """
    Setter method for pfc_threshold_cos, mapped from YANG variable /interface/ethernet/qos/flowcontrol/pfc_threshold/threshold/pfc/pfc_threshold_cos (cos-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pfc_threshold_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pfc_threshold_cos() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="pfc-threshold-cos", rest_name="pfc-threshold-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'0-7;;CoS value'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='cos-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pfc_threshold_cos must be of a type compatible with cos-id-type""",
          'defined-type': "brocade-qos-mls:cos-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="pfc-threshold-cos", rest_name="pfc-threshold-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'0-7;;CoS value'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='cos-id-type', is_config=True)""",
        })

    self.__pfc_threshold_cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pfc_threshold_cos(self):
    self.__pfc_threshold_cos = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="pfc-threshold-cos", rest_name="pfc-threshold-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'0-7;;CoS value'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='cos-id-type', is_config=True)


  def _get_pfc_threshold_tx_on(self):
    """
    Getter method for pfc_threshold_tx_on, mapped from YANG variable /interface/ethernet/qos/flowcontrol/pfc_threshold/threshold/pfc/pfc_threshold_tx_on (flowcontrol-threshold-type)
    """
    return self.__pfc_threshold_tx_on
      
  def _set_pfc_threshold_tx_on(self, v, load=False):
    """
    Setter method for pfc_threshold_tx_on, mapped from YANG variable /interface/ethernet/qos/flowcontrol/pfc_threshold/threshold/pfc/pfc_threshold_tx_on (flowcontrol-threshold-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pfc_threshold_tx_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pfc_threshold_tx_on() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-on", rest_name="on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx On threshold', u'alt-name': u'on', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pfc_threshold_tx_on must be of a type compatible with flowcontrol-threshold-type""",
          'defined-type': "brocade-qos-mls:flowcontrol-threshold-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-on", rest_name="on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx On threshold', u'alt-name': u'on', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)""",
        })

    self.__pfc_threshold_tx_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pfc_threshold_tx_on(self):
    self.__pfc_threshold_tx_on = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-on", rest_name="on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx On threshold', u'alt-name': u'on', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)


  def _get_pfc_threshold_tx_off(self):
    """
    Getter method for pfc_threshold_tx_off, mapped from YANG variable /interface/ethernet/qos/flowcontrol/pfc_threshold/threshold/pfc/pfc_threshold_tx_off (flowcontrol-threshold-type)
    """
    return self.__pfc_threshold_tx_off
      
  def _set_pfc_threshold_tx_off(self, v, load=False):
    """
    Setter method for pfc_threshold_tx_off, mapped from YANG variable /interface/ethernet/qos/flowcontrol/pfc_threshold/threshold/pfc/pfc_threshold_tx_off (flowcontrol-threshold-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pfc_threshold_tx_off is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pfc_threshold_tx_off() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-off", rest_name="off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx Off threshold', u'alt-name': u'off'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pfc_threshold_tx_off must be of a type compatible with flowcontrol-threshold-type""",
          'defined-type': "brocade-qos-mls:flowcontrol-threshold-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-off", rest_name="off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx Off threshold', u'alt-name': u'off'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)""",
        })

    self.__pfc_threshold_tx_off = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pfc_threshold_tx_off(self):
    self.__pfc_threshold_tx_off = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 1572864']}), is_leaf=True, yang_name="pfc-threshold-tx-off", rest_name="off", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Tx Off threshold', u'alt-name': u'off'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='flowcontrol-threshold-type', is_config=True)

  pfc_threshold_cos = __builtin__.property(_get_pfc_threshold_cos, _set_pfc_threshold_cos)
  pfc_threshold_tx_on = __builtin__.property(_get_pfc_threshold_tx_on, _set_pfc_threshold_tx_on)
  pfc_threshold_tx_off = __builtin__.property(_get_pfc_threshold_tx_off, _set_pfc_threshold_tx_off)


  _pyangbind_elements = {'pfc_threshold_cos': pfc_threshold_cos, 'pfc_threshold_tx_on': pfc_threshold_tx_on, 'pfc_threshold_tx_off': pfc_threshold_tx_off, }


