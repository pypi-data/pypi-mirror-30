
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class traffic_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /traffic-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IS-IS packet counts
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__l1_hello_rx','__l1_hello_tx','__l2_hello_rx','__l2_hello_tx','__pp_hello_rx','__pp_hello_tx','__l1_lsp_rx','__l1_lsp_tx','__l2_lsp_rx','__l2_lsp_tx','__l1_csnp_rx','__l1_csnp_tx','__l2_csnp_rx','__l2_csnp_tx','__l1_psnp_rx','__l1_psnp_tx','__l2_psnp_rx','__l2_psnp_tx',)

  _yang_name = 'traffic-state'
  _rest_name = 'traffic-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__l1_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-tx", rest_name="l1-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_psnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-tx", rest_name="l1-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pp_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-tx", rest_name="pp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_psnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-tx", rest_name="l2-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_lsp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-rx", rest_name="l1-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_csnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-rx", rest_name="l2-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_csnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-tx", rest_name="l2-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_lsp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-tx", rest_name="l1-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_csnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-rx", rest_name="l1-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pp_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-rx", rest_name="pp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_psnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-rx", rest_name="l2-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_psnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-rx", rest_name="l1-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-tx", rest_name="l2-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-rx", rest_name="l1-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_lsp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-tx", rest_name="l2-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_csnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-tx", rest_name="l1-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_lsp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-rx", rest_name="l2-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-rx", rest_name="l2-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'traffic-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'traffic-state']

  def _get_l1_hello_rx(self):
    """
    Getter method for l1_hello_rx, mapped from YANG variable /traffic_state/l1_hello_rx (uint32)

    YANG Description: L1 Hello Rx Count
    """
    return self.__l1_hello_rx
      
  def _set_l1_hello_rx(self, v, load=False):
    """
    Setter method for l1_hello_rx, mapped from YANG variable /traffic_state/l1_hello_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_hello_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_hello_rx() directly.

    YANG Description: L1 Hello Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-rx", rest_name="l1-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_hello_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-rx", rest_name="l1-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_hello_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_hello_rx(self):
    self.__l1_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-rx", rest_name="l1-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_hello_tx(self):
    """
    Getter method for l1_hello_tx, mapped from YANG variable /traffic_state/l1_hello_tx (uint32)

    YANG Description: L1 Hello Tx Count
    """
    return self.__l1_hello_tx
      
  def _set_l1_hello_tx(self, v, load=False):
    """
    Setter method for l1_hello_tx, mapped from YANG variable /traffic_state/l1_hello_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_hello_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_hello_tx() directly.

    YANG Description: L1 Hello Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-tx", rest_name="l1-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_hello_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-tx", rest_name="l1-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_hello_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_hello_tx(self):
    self.__l1_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-hello-tx", rest_name="l1-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_hello_rx(self):
    """
    Getter method for l2_hello_rx, mapped from YANG variable /traffic_state/l2_hello_rx (uint32)

    YANG Description: L2 Hello Rx Count
    """
    return self.__l2_hello_rx
      
  def _set_l2_hello_rx(self, v, load=False):
    """
    Setter method for l2_hello_rx, mapped from YANG variable /traffic_state/l2_hello_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_hello_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_hello_rx() directly.

    YANG Description: L2 Hello Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-rx", rest_name="l2-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_hello_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-rx", rest_name="l2-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_hello_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_hello_rx(self):
    self.__l2_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-rx", rest_name="l2-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_hello_tx(self):
    """
    Getter method for l2_hello_tx, mapped from YANG variable /traffic_state/l2_hello_tx (uint32)

    YANG Description: L2 Hello Tx Count
    """
    return self.__l2_hello_tx
      
  def _set_l2_hello_tx(self, v, load=False):
    """
    Setter method for l2_hello_tx, mapped from YANG variable /traffic_state/l2_hello_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_hello_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_hello_tx() directly.

    YANG Description: L2 Hello Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-tx", rest_name="l2-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_hello_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-tx", rest_name="l2-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_hello_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_hello_tx(self):
    self.__l2_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-hello-tx", rest_name="l2-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pp_hello_rx(self):
    """
    Getter method for pp_hello_rx, mapped from YANG variable /traffic_state/pp_hello_rx (uint32)

    YANG Description: PP Rx Count
    """
    return self.__pp_hello_rx
      
  def _set_pp_hello_rx(self, v, load=False):
    """
    Setter method for pp_hello_rx, mapped from YANG variable /traffic_state/pp_hello_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pp_hello_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pp_hello_rx() directly.

    YANG Description: PP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-rx", rest_name="pp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pp_hello_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-rx", rest_name="pp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pp_hello_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pp_hello_rx(self):
    self.__pp_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-rx", rest_name="pp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pp_hello_tx(self):
    """
    Getter method for pp_hello_tx, mapped from YANG variable /traffic_state/pp_hello_tx (uint32)

    YANG Description: PP Tx Count
    """
    return self.__pp_hello_tx
      
  def _set_pp_hello_tx(self, v, load=False):
    """
    Setter method for pp_hello_tx, mapped from YANG variable /traffic_state/pp_hello_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pp_hello_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pp_hello_tx() directly.

    YANG Description: PP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-tx", rest_name="pp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pp_hello_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-tx", rest_name="pp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pp_hello_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pp_hello_tx(self):
    self.__pp_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pp-hello-tx", rest_name="pp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_lsp_rx(self):
    """
    Getter method for l1_lsp_rx, mapped from YANG variable /traffic_state/l1_lsp_rx (uint32)

    YANG Description: L1 LSP Rx Count
    """
    return self.__l1_lsp_rx
      
  def _set_l1_lsp_rx(self, v, load=False):
    """
    Setter method for l1_lsp_rx, mapped from YANG variable /traffic_state/l1_lsp_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_lsp_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_lsp_rx() directly.

    YANG Description: L1 LSP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-rx", rest_name="l1-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_lsp_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-rx", rest_name="l1-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_lsp_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_lsp_rx(self):
    self.__l1_lsp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-rx", rest_name="l1-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_lsp_tx(self):
    """
    Getter method for l1_lsp_tx, mapped from YANG variable /traffic_state/l1_lsp_tx (uint32)

    YANG Description: L1 LSP Tx Count
    """
    return self.__l1_lsp_tx
      
  def _set_l1_lsp_tx(self, v, load=False):
    """
    Setter method for l1_lsp_tx, mapped from YANG variable /traffic_state/l1_lsp_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_lsp_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_lsp_tx() directly.

    YANG Description: L1 LSP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-tx", rest_name="l1-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_lsp_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-tx", rest_name="l1-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_lsp_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_lsp_tx(self):
    self.__l1_lsp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-lsp-tx", rest_name="l1-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_lsp_rx(self):
    """
    Getter method for l2_lsp_rx, mapped from YANG variable /traffic_state/l2_lsp_rx (uint32)

    YANG Description: L2 LSP Rx Count
    """
    return self.__l2_lsp_rx
      
  def _set_l2_lsp_rx(self, v, load=False):
    """
    Setter method for l2_lsp_rx, mapped from YANG variable /traffic_state/l2_lsp_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_lsp_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_lsp_rx() directly.

    YANG Description: L2 LSP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-rx", rest_name="l2-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_lsp_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-rx", rest_name="l2-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_lsp_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_lsp_rx(self):
    self.__l2_lsp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-rx", rest_name="l2-lsp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_lsp_tx(self):
    """
    Getter method for l2_lsp_tx, mapped from YANG variable /traffic_state/l2_lsp_tx (uint32)

    YANG Description: L2 LSP Tx Count
    """
    return self.__l2_lsp_tx
      
  def _set_l2_lsp_tx(self, v, load=False):
    """
    Setter method for l2_lsp_tx, mapped from YANG variable /traffic_state/l2_lsp_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_lsp_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_lsp_tx() directly.

    YANG Description: L2 LSP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-tx", rest_name="l2-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_lsp_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-tx", rest_name="l2-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_lsp_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_lsp_tx(self):
    self.__l2_lsp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-lsp-tx", rest_name="l2-lsp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_csnp_rx(self):
    """
    Getter method for l1_csnp_rx, mapped from YANG variable /traffic_state/l1_csnp_rx (uint32)

    YANG Description: L1 CSNP Rx Count
    """
    return self.__l1_csnp_rx
      
  def _set_l1_csnp_rx(self, v, load=False):
    """
    Setter method for l1_csnp_rx, mapped from YANG variable /traffic_state/l1_csnp_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_csnp_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_csnp_rx() directly.

    YANG Description: L1 CSNP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-rx", rest_name="l1-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_csnp_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-rx", rest_name="l1-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_csnp_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_csnp_rx(self):
    self.__l1_csnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-rx", rest_name="l1-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_csnp_tx(self):
    """
    Getter method for l1_csnp_tx, mapped from YANG variable /traffic_state/l1_csnp_tx (uint32)

    YANG Description: L1 CSNP Tx Count
    """
    return self.__l1_csnp_tx
      
  def _set_l1_csnp_tx(self, v, load=False):
    """
    Setter method for l1_csnp_tx, mapped from YANG variable /traffic_state/l1_csnp_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_csnp_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_csnp_tx() directly.

    YANG Description: L1 CSNP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-tx", rest_name="l1-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_csnp_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-tx", rest_name="l1-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_csnp_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_csnp_tx(self):
    self.__l1_csnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-csnp-tx", rest_name="l1-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_csnp_rx(self):
    """
    Getter method for l2_csnp_rx, mapped from YANG variable /traffic_state/l2_csnp_rx (uint32)

    YANG Description: L2 CSNP Rx Count
    """
    return self.__l2_csnp_rx
      
  def _set_l2_csnp_rx(self, v, load=False):
    """
    Setter method for l2_csnp_rx, mapped from YANG variable /traffic_state/l2_csnp_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_csnp_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_csnp_rx() directly.

    YANG Description: L2 CSNP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-rx", rest_name="l2-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_csnp_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-rx", rest_name="l2-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_csnp_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_csnp_rx(self):
    self.__l2_csnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-rx", rest_name="l2-csnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_csnp_tx(self):
    """
    Getter method for l2_csnp_tx, mapped from YANG variable /traffic_state/l2_csnp_tx (uint32)

    YANG Description: L2 CSNP Tx Count
    """
    return self.__l2_csnp_tx
      
  def _set_l2_csnp_tx(self, v, load=False):
    """
    Setter method for l2_csnp_tx, mapped from YANG variable /traffic_state/l2_csnp_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_csnp_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_csnp_tx() directly.

    YANG Description: L2 CSNP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-tx", rest_name="l2-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_csnp_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-tx", rest_name="l2-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_csnp_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_csnp_tx(self):
    self.__l2_csnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-csnp-tx", rest_name="l2-csnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_psnp_rx(self):
    """
    Getter method for l1_psnp_rx, mapped from YANG variable /traffic_state/l1_psnp_rx (uint32)

    YANG Description: L1 PSNP Rx Count
    """
    return self.__l1_psnp_rx
      
  def _set_l1_psnp_rx(self, v, load=False):
    """
    Setter method for l1_psnp_rx, mapped from YANG variable /traffic_state/l1_psnp_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_psnp_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_psnp_rx() directly.

    YANG Description: L1 PSNP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-rx", rest_name="l1-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_psnp_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-rx", rest_name="l1-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_psnp_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_psnp_rx(self):
    self.__l1_psnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-rx", rest_name="l1-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1_psnp_tx(self):
    """
    Getter method for l1_psnp_tx, mapped from YANG variable /traffic_state/l1_psnp_tx (uint32)

    YANG Description: L1 PSNP Tx Count
    """
    return self.__l1_psnp_tx
      
  def _set_l1_psnp_tx(self, v, load=False):
    """
    Setter method for l1_psnp_tx, mapped from YANG variable /traffic_state/l1_psnp_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_psnp_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_psnp_tx() directly.

    YANG Description: L1 PSNP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-tx", rest_name="l1-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_psnp_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-tx", rest_name="l1-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1_psnp_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_psnp_tx(self):
    self.__l1_psnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1-psnp-tx", rest_name="l1-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_psnp_rx(self):
    """
    Getter method for l2_psnp_rx, mapped from YANG variable /traffic_state/l2_psnp_rx (uint32)

    YANG Description: L2 PSNP Rx Count
    """
    return self.__l2_psnp_rx
      
  def _set_l2_psnp_rx(self, v, load=False):
    """
    Setter method for l2_psnp_rx, mapped from YANG variable /traffic_state/l2_psnp_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_psnp_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_psnp_rx() directly.

    YANG Description: L2 PSNP Rx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-rx", rest_name="l2-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_psnp_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-rx", rest_name="l2-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_psnp_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_psnp_rx(self):
    self.__l2_psnp_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-rx", rest_name="l2-psnp-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2_psnp_tx(self):
    """
    Getter method for l2_psnp_tx, mapped from YANG variable /traffic_state/l2_psnp_tx (uint32)

    YANG Description: L2 PSNP Tx Count
    """
    return self.__l2_psnp_tx
      
  def _set_l2_psnp_tx(self, v, load=False):
    """
    Setter method for l2_psnp_tx, mapped from YANG variable /traffic_state/l2_psnp_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_psnp_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_psnp_tx() directly.

    YANG Description: L2 PSNP Tx Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-tx", rest_name="l2-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_psnp_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-tx", rest_name="l2-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2_psnp_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_psnp_tx(self):
    self.__l2_psnp_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2-psnp-tx", rest_name="l2-psnp-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

  l1_hello_rx = __builtin__.property(_get_l1_hello_rx)
  l1_hello_tx = __builtin__.property(_get_l1_hello_tx)
  l2_hello_rx = __builtin__.property(_get_l2_hello_rx)
  l2_hello_tx = __builtin__.property(_get_l2_hello_tx)
  pp_hello_rx = __builtin__.property(_get_pp_hello_rx)
  pp_hello_tx = __builtin__.property(_get_pp_hello_tx)
  l1_lsp_rx = __builtin__.property(_get_l1_lsp_rx)
  l1_lsp_tx = __builtin__.property(_get_l1_lsp_tx)
  l2_lsp_rx = __builtin__.property(_get_l2_lsp_rx)
  l2_lsp_tx = __builtin__.property(_get_l2_lsp_tx)
  l1_csnp_rx = __builtin__.property(_get_l1_csnp_rx)
  l1_csnp_tx = __builtin__.property(_get_l1_csnp_tx)
  l2_csnp_rx = __builtin__.property(_get_l2_csnp_rx)
  l2_csnp_tx = __builtin__.property(_get_l2_csnp_tx)
  l1_psnp_rx = __builtin__.property(_get_l1_psnp_rx)
  l1_psnp_tx = __builtin__.property(_get_l1_psnp_tx)
  l2_psnp_rx = __builtin__.property(_get_l2_psnp_rx)
  l2_psnp_tx = __builtin__.property(_get_l2_psnp_tx)


  _pyangbind_elements = {'l1_hello_rx': l1_hello_rx, 'l1_hello_tx': l1_hello_tx, 'l2_hello_rx': l2_hello_rx, 'l2_hello_tx': l2_hello_tx, 'pp_hello_rx': pp_hello_rx, 'pp_hello_tx': pp_hello_tx, 'l1_lsp_rx': l1_lsp_rx, 'l1_lsp_tx': l1_lsp_tx, 'l2_lsp_rx': l2_lsp_rx, 'l2_lsp_tx': l2_lsp_tx, 'l1_csnp_rx': l1_csnp_rx, 'l1_csnp_tx': l1_csnp_tx, 'l2_csnp_rx': l2_csnp_rx, 'l2_csnp_tx': l2_csnp_tx, 'l1_psnp_rx': l1_psnp_rx, 'l1_psnp_tx': l1_psnp_tx, 'l2_psnp_rx': l2_psnp_rx, 'l2_psnp_tx': l2_psnp_tx, }


