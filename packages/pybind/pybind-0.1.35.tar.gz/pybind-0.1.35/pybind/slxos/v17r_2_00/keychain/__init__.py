
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import key
class keychain(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-keychain - based on the path /keychain. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__name_of_keychain','__accept_tolerance','__key',)

  _yang_name = 'keychain'
  _rest_name = 'keychain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__accept_tolerance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..600']}), is_leaf=True, yang_name="accept-tolerance", rest_name="accept-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Tolerance value in seconds', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)
    self.__name_of_keychain = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'4..32']}), is_leaf=True, yang_name="name-of-keychain", rest_name="name-of-keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'name of the keychain', u'cli-full-command': None, u'cli-full-no': None, u'cli-suppress-range': None, u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='string', is_config=True)
    self.__key = YANGDynClass(base=YANGListType("key_id",key.key, yang_name="key", rest_name="key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key-id', extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}), is_container='list', yang_name="key", rest_name="key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'keychain']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'keychain']

  def _get_name_of_keychain(self):
    """
    Getter method for name_of_keychain, mapped from YANG variable /keychain/name_of_keychain (string)
    """
    return self.__name_of_keychain
      
  def _set_name_of_keychain(self, v, load=False):
    """
    Setter method for name_of_keychain, mapped from YANG variable /keychain/name_of_keychain (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name_of_keychain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name_of_keychain() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'4..32']}), is_leaf=True, yang_name="name-of-keychain", rest_name="name-of-keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'name of the keychain', u'cli-full-command': None, u'cli-full-no': None, u'cli-suppress-range': None, u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name_of_keychain must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'4..32']}), is_leaf=True, yang_name="name-of-keychain", rest_name="name-of-keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'name of the keychain', u'cli-full-command': None, u'cli-full-no': None, u'cli-suppress-range': None, u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='string', is_config=True)""",
        })

    self.__name_of_keychain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name_of_keychain(self):
    self.__name_of_keychain = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'4..32']}), is_leaf=True, yang_name="name-of-keychain", rest_name="name-of-keychain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'name of the keychain', u'cli-full-command': None, u'cli-full-no': None, u'cli-suppress-range': None, u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='string', is_config=True)


  def _get_accept_tolerance(self):
    """
    Getter method for accept_tolerance, mapped from YANG variable /keychain/accept_tolerance (uint32)
    """
    return self.__accept_tolerance
      
  def _set_accept_tolerance(self, v, load=False):
    """
    Setter method for accept_tolerance, mapped from YANG variable /keychain/accept_tolerance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_accept_tolerance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_accept_tolerance() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..600']}), is_leaf=True, yang_name="accept-tolerance", rest_name="accept-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Tolerance value in seconds', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """accept_tolerance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..600']}), is_leaf=True, yang_name="accept-tolerance", rest_name="accept-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Tolerance value in seconds', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)""",
        })

    self.__accept_tolerance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_accept_tolerance(self):
    self.__accept_tolerance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..600']}), is_leaf=True, yang_name="accept-tolerance", rest_name="accept-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Tolerance value in seconds', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)


  def _get_key(self):
    """
    Getter method for key, mapped from YANG variable /keychain/key (list)
    """
    return self.__key
      
  def _set_key(self, v, load=False):
    """
    Setter method for key, mapped from YANG variable /keychain/key (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("key_id",key.key, yang_name="key", rest_name="key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key-id', extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}), is_container='list', yang_name="key", rest_name="key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("key_id",key.key, yang_name="key", rest_name="key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key-id', extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}), is_container='list', yang_name="key", rest_name="key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='list', is_config=True)""",
        })

    self.__key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key(self):
    self.__key = YANGDynClass(base=YANGListType("key_id",key.key, yang_name="key", rest_name="key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='key-id', extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}), is_container='list', yang_name="key", rest_name="key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enter Key-ID(max of 8 keys per Key chain)', u'cli-no-key-completion': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'callpoint': u'Key', u'cli-mode-name': u'config-$(../name-of-keychain)key-$(key-id)'}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='list', is_config=True)

  name_of_keychain = __builtin__.property(_get_name_of_keychain, _set_name_of_keychain)
  accept_tolerance = __builtin__.property(_get_accept_tolerance, _set_accept_tolerance)
  key = __builtin__.property(_get_key, _set_key)


  _pyangbind_elements = {'name_of_keychain': name_of_keychain, 'accept_tolerance': accept_tolerance, 'key': key, }


