
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import key_string
import accept_lifetime
class key(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-keychain - based on the path /keychain/key. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__key_id','__key_string','__accept_lifetime','__key_algorithm',)

  _yang_name = 'key'
  _rest_name = 'key'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__key_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="key-id", rest_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-full-no': None, u'info': u'unique key-id(Range: 1 - 65535)', u'cli-suppress-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)
    self.__key_algorithm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HMAC-SHA-256': {'value': 1}, u'HMAC-SHA-512': {'value': 3}, u'HMAC-SHA-1': {'value': 0}, u'HMAC-SHA-384': {'value': 2}},), is_leaf=True, yang_name="key-algorithm", rest_name="key-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'specify HMAC algorithm for the key', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='key_algo', is_config=True)
    self.__accept_lifetime = YANGDynClass(base=accept_lifetime.accept_lifetime, is_container='container', presence=False, yang_name="accept-lifetime", rest_name="accept-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)
    self.__key_string = YANGDynClass(base=key_string.key_string, is_container='container', presence=False, yang_name="key-string", rest_name="key-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'keychain', u'key']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'keychain', u'key']

  def _get_key_id(self):
    """
    Getter method for key_id, mapped from YANG variable /keychain/key/key_id (uint32)
    """
    return self.__key_id
      
  def _set_key_id(self, v, load=False):
    """
    Setter method for key_id, mapped from YANG variable /keychain/key/key_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_id() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="key-id", rest_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-full-no': None, u'info': u'unique key-id(Range: 1 - 65535)', u'cli-suppress-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="key-id", rest_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-full-no': None, u'info': u'unique key-id(Range: 1 - 65535)', u'cli-suppress-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)""",
        })

    self.__key_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_id(self):
    self.__key_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="key-id", rest_name="key-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-full-no': None, u'info': u'unique key-id(Range: 1 - 65535)', u'cli-suppress-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='uint32', is_config=True)


  def _get_key_string(self):
    """
    Getter method for key_string, mapped from YANG variable /keychain/key/key_string (container)
    """
    return self.__key_string
      
  def _set_key_string(self, v, load=False):
    """
    Setter method for key_string, mapped from YANG variable /keychain/key/key_string (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_string is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_string() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=key_string.key_string, is_container='container', presence=False, yang_name="key-string", rest_name="key-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_string must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=key_string.key_string, is_container='container', presence=False, yang_name="key-string", rest_name="key-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)""",
        })

    self.__key_string = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_string(self):
    self.__key_string = YANGDynClass(base=key_string.key_string, is_container='container', presence=False, yang_name="key-string", rest_name="key-string", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)


  def _get_accept_lifetime(self):
    """
    Getter method for accept_lifetime, mapped from YANG variable /keychain/key/accept_lifetime (container)
    """
    return self.__accept_lifetime
      
  def _set_accept_lifetime(self, v, load=False):
    """
    Setter method for accept_lifetime, mapped from YANG variable /keychain/key/accept_lifetime (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_accept_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_accept_lifetime() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=accept_lifetime.accept_lifetime, is_container='container', presence=False, yang_name="accept-lifetime", rest_name="accept-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """accept_lifetime must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=accept_lifetime.accept_lifetime, is_container='container', presence=False, yang_name="accept-lifetime", rest_name="accept-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)""",
        })

    self.__accept_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_accept_lifetime(self):
    self.__accept_lifetime = YANGDynClass(base=accept_lifetime.accept_lifetime, is_container='container', presence=False, yang_name="accept-lifetime", rest_name="accept-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='container', is_config=True)


  def _get_key_algorithm(self):
    """
    Getter method for key_algorithm, mapped from YANG variable /keychain/key/key_algorithm (key_algo)
    """
    return self.__key_algorithm
      
  def _set_key_algorithm(self, v, load=False):
    """
    Setter method for key_algorithm, mapped from YANG variable /keychain/key/key_algorithm (key_algo)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_key_algorithm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_key_algorithm() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HMAC-SHA-256': {'value': 1}, u'HMAC-SHA-512': {'value': 3}, u'HMAC-SHA-1': {'value': 0}, u'HMAC-SHA-384': {'value': 2}},), is_leaf=True, yang_name="key-algorithm", rest_name="key-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'specify HMAC algorithm for the key', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='key_algo', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """key_algorithm must be of a type compatible with key_algo""",
          'defined-type': "brocade-keychain:key_algo",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HMAC-SHA-256': {'value': 1}, u'HMAC-SHA-512': {'value': 3}, u'HMAC-SHA-1': {'value': 0}, u'HMAC-SHA-384': {'value': 2}},), is_leaf=True, yang_name="key-algorithm", rest_name="key-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'specify HMAC algorithm for the key', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='key_algo', is_config=True)""",
        })

    self.__key_algorithm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_key_algorithm(self):
    self.__key_algorithm = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'HMAC-SHA-256': {'value': 1}, u'HMAC-SHA-512': {'value': 3}, u'HMAC-SHA-1': {'value': 0}, u'HMAC-SHA-384': {'value': 2}},), is_leaf=True, yang_name="key-algorithm", rest_name="key-algorithm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'specify HMAC algorithm for the key', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-keychain', defining_module='brocade-keychain', yang_type='key_algo', is_config=True)

  key_id = __builtin__.property(_get_key_id, _set_key_id)
  key_string = __builtin__.property(_get_key_string, _set_key_string)
  accept_lifetime = __builtin__.property(_get_accept_lifetime, _set_accept_lifetime)
  key_algorithm = __builtin__.property(_get_key_algorithm, _set_key_algorithm)


  _pyangbind_elements = {'key_id': key_id, 'key_string': key_string, 'accept_lifetime': accept_lifetime, 'key_algorithm': key_algorithm, }


