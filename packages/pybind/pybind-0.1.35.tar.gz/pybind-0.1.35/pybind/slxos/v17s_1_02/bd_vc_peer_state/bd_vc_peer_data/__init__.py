
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import vc_proto_tnnl
import vc_assigned_lsp
class bd_vc_peer_data(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-pwm-operational - based on the path /bd-vc-peer-state/bd-vc-peer-data. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  VC peer
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__vc_peer_address','__vc_peer_state','__vc_peer_uptime','__vc_peer_load_balance','__vc_peer_cos_enabled','__vc_peer_cos_value','__vc_ldp_tnnl_in_use','__vc_local_label','__vc_remote_label','__vc_local_mtu','__vc_remote_mtu','__vc_local_type','__vc_remote_type','__vc_proto_tnnl','__vc_assigned_lsp',)

  _yang_name = 'bd-vc-peer-data'
  _rest_name = 'bd-vc-peer-data'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__vc_peer_cos_value = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-peer-cos-value", rest_name="vc-peer-cos-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint8', is_config=False)
    self.__vc_local_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-type", rest_name="vc-local-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    self.__vc_peer_load_balance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vc-peer-load-balance", rest_name="vc-peer-load-balance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)
    self.__vc_proto_tnnl = YANGDynClass(base=YANGListType("vc_proto_name",vc_proto_tnnl.vc_proto_tnnl, yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-proto-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)
    self.__vc_assigned_lsp = YANGDynClass(base=YANGListType("vc_lsp_name",vc_assigned_lsp.vc_assigned_lsp, yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-lsp-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)
    self.__vc_remote_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-type", rest_name="vc-remote-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    self.__vc_peer_uptime = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-peer-uptime", rest_name="vc-peer-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)
    self.__vc_peer_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vc-peer-address", rest_name="vc-peer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__vc_peer_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-peer-state", rest_name="vc-peer-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)
    self.__vc_local_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    self.__vc_local_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-label", rest_name="vc-local-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    self.__vc_peer_cos_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vc-peer-cos-enabled", rest_name="vc-peer-cos-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)
    self.__vc_remote_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    self.__vc_ldp_tnnl_in_use = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-ldp-tnnl-in-use", rest_name="vc-ldp-tnnl-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)
    self.__vc_remote_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-label", rest_name="vc-remote-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bd-vc-peer-state', u'bd-vc-peer-data']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bd-vc-peer-state', u'bd-vc-peer-data']

  def _get_vc_peer_address(self):
    """
    Getter method for vc_peer_address, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_address (inet:ipv4-address)

    YANG Description: peer address name
    """
    return self.__vc_peer_address
      
  def _set_vc_peer_address(self, v, load=False):
    """
    Setter method for vc_peer_address, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_peer_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_peer_address() directly.

    YANG Description: peer address name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vc-peer-address", rest_name="vc-peer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_peer_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vc-peer-address", rest_name="vc-peer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__vc_peer_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_peer_address(self):
    self.__vc_peer_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="vc-peer-address", rest_name="vc-peer-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_vc_peer_state(self):
    """
    Getter method for vc_peer_state, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_state (string)

    YANG Description: peer state
    """
    return self.__vc_peer_state
      
  def _set_vc_peer_state(self, v, load=False):
    """
    Setter method for vc_peer_state, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_peer_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_peer_state() directly.

    YANG Description: peer state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vc-peer-state", rest_name="vc-peer-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_peer_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-peer-state", rest_name="vc-peer-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)""",
        })

    self.__vc_peer_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_peer_state(self):
    self.__vc_peer_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-peer-state", rest_name="vc-peer-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)


  def _get_vc_peer_uptime(self):
    """
    Getter method for vc_peer_uptime, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_uptime (string)

    YANG Description: peer uptime
    """
    return self.__vc_peer_uptime
      
  def _set_vc_peer_uptime(self, v, load=False):
    """
    Setter method for vc_peer_uptime, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_uptime (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_peer_uptime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_peer_uptime() directly.

    YANG Description: peer uptime
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vc-peer-uptime", rest_name="vc-peer-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_peer_uptime must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-peer-uptime", rest_name="vc-peer-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)""",
        })

    self.__vc_peer_uptime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_peer_uptime(self):
    self.__vc_peer_uptime = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-peer-uptime", rest_name="vc-peer-uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)


  def _get_vc_peer_load_balance(self):
    """
    Getter method for vc_peer_load_balance, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_load_balance (boolean)

    YANG Description: peer load balance
    """
    return self.__vc_peer_load_balance
      
  def _set_vc_peer_load_balance(self, v, load=False):
    """
    Setter method for vc_peer_load_balance, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_load_balance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_peer_load_balance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_peer_load_balance() directly.

    YANG Description: peer load balance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="vc-peer-load-balance", rest_name="vc-peer-load-balance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_peer_load_balance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vc-peer-load-balance", rest_name="vc-peer-load-balance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__vc_peer_load_balance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_peer_load_balance(self):
    self.__vc_peer_load_balance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vc-peer-load-balance", rest_name="vc-peer-load-balance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)


  def _get_vc_peer_cos_enabled(self):
    """
    Getter method for vc_peer_cos_enabled, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_cos_enabled (boolean)

    YANG Description: peer cos enabled
    """
    return self.__vc_peer_cos_enabled
      
  def _set_vc_peer_cos_enabled(self, v, load=False):
    """
    Setter method for vc_peer_cos_enabled, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_cos_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_peer_cos_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_peer_cos_enabled() directly.

    YANG Description: peer cos enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="vc-peer-cos-enabled", rest_name="vc-peer-cos-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_peer_cos_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vc-peer-cos-enabled", rest_name="vc-peer-cos-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__vc_peer_cos_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_peer_cos_enabled(self):
    self.__vc_peer_cos_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="vc-peer-cos-enabled", rest_name="vc-peer-cos-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='boolean', is_config=False)


  def _get_vc_peer_cos_value(self):
    """
    Getter method for vc_peer_cos_value, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_cos_value (uint8)

    YANG Description: peer cos value
    """
    return self.__vc_peer_cos_value
      
  def _set_vc_peer_cos_value(self, v, load=False):
    """
    Setter method for vc_peer_cos_value, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_peer_cos_value (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_peer_cos_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_peer_cos_value() directly.

    YANG Description: peer cos value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-peer-cos-value", rest_name="vc-peer-cos-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_peer_cos_value must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-peer-cos-value", rest_name="vc-peer-cos-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_peer_cos_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_peer_cos_value(self):
    self.__vc_peer_cos_value = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-peer-cos-value", rest_name="vc-peer-cos-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint8', is_config=False)


  def _get_vc_ldp_tnnl_in_use(self):
    """
    Getter method for vc_ldp_tnnl_in_use, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_ldp_tnnl_in_use (string)

    YANG Description: peer tunnel in use
    """
    return self.__vc_ldp_tnnl_in_use
      
  def _set_vc_ldp_tnnl_in_use(self, v, load=False):
    """
    Setter method for vc_ldp_tnnl_in_use, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_ldp_tnnl_in_use (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_ldp_tnnl_in_use is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_ldp_tnnl_in_use() directly.

    YANG Description: peer tunnel in use
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vc-ldp-tnnl-in-use", rest_name="vc-ldp-tnnl-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_ldp_tnnl_in_use must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-ldp-tnnl-in-use", rest_name="vc-ldp-tnnl-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)""",
        })

    self.__vc_ldp_tnnl_in_use = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_ldp_tnnl_in_use(self):
    self.__vc_ldp_tnnl_in_use = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-ldp-tnnl-in-use", rest_name="vc-ldp-tnnl-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='string', is_config=False)


  def _get_vc_local_label(self):
    """
    Getter method for vc_local_label, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_local_label (uint32)

    YANG Description: vc_local_label
    """
    return self.__vc_local_label
      
  def _set_vc_local_label(self, v, load=False):
    """
    Setter method for vc_local_label, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_local_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_local_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_local_label() directly.

    YANG Description: vc_local_label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-label", rest_name="vc-local-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_local_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-label", rest_name="vc-local-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_local_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_local_label(self):
    self.__vc_local_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-label", rest_name="vc-local-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_vc_remote_label(self):
    """
    Getter method for vc_remote_label, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_remote_label (uint32)

    YANG Description: vc_remote_label
    """
    return self.__vc_remote_label
      
  def _set_vc_remote_label(self, v, load=False):
    """
    Setter method for vc_remote_label, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_remote_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_remote_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_remote_label() directly.

    YANG Description: vc_remote_label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-label", rest_name="vc-remote-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_remote_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-label", rest_name="vc-remote-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_remote_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_remote_label(self):
    self.__vc_remote_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-label", rest_name="vc-remote-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_vc_local_mtu(self):
    """
    Getter method for vc_local_mtu, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_local_mtu (uint32)

    YANG Description: vc_local_mtu
    """
    return self.__vc_local_mtu
      
  def _set_vc_local_mtu(self, v, load=False):
    """
    Setter method for vc_local_mtu, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_local_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_local_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_local_mtu() directly.

    YANG Description: vc_local_mtu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_local_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_local_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_local_mtu(self):
    self.__vc_local_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-mtu", rest_name="vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_vc_remote_mtu(self):
    """
    Getter method for vc_remote_mtu, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_remote_mtu (uint32)

    YANG Description: vc_remote_mtu
    """
    return self.__vc_remote_mtu
      
  def _set_vc_remote_mtu(self, v, load=False):
    """
    Setter method for vc_remote_mtu, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_remote_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_remote_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_remote_mtu() directly.

    YANG Description: vc_remote_mtu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_remote_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_remote_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_remote_mtu(self):
    self.__vc_remote_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-mtu", rest_name="vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_vc_local_type(self):
    """
    Getter method for vc_local_type, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_local_type (uint32)

    YANG Description: vc_local_type
    """
    return self.__vc_local_type
      
  def _set_vc_local_type(self, v, load=False):
    """
    Setter method for vc_local_type, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_local_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_local_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_local_type() directly.

    YANG Description: vc_local_type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-type", rest_name="vc-local-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_local_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-type", rest_name="vc-local-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_local_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_local_type(self):
    self.__vc_local_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-local-type", rest_name="vc-local-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_vc_remote_type(self):
    """
    Getter method for vc_remote_type, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_remote_type (uint32)

    YANG Description: vc_remote_type
    """
    return self.__vc_remote_type
      
  def _set_vc_remote_type(self, v, load=False):
    """
    Setter method for vc_remote_type, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_remote_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_remote_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_remote_type() directly.

    YANG Description: vc_remote_type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-type", rest_name="vc-remote-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_remote_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-type", rest_name="vc-remote-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_remote_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_remote_type(self):
    self.__vc_remote_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-remote-type", rest_name="vc-remote-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_vc_proto_tnnl(self):
    """
    Getter method for vc_proto_tnnl, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_proto_tnnl (list)

    YANG Description: VC proto tnnl
    """
    return self.__vc_proto_tnnl
      
  def _set_vc_proto_tnnl(self, v, load=False):
    """
    Setter method for vc_proto_tnnl, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_proto_tnnl (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_proto_tnnl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_proto_tnnl() directly.

    YANG Description: VC proto tnnl
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vc_proto_name",vc_proto_tnnl.vc_proto_tnnl, yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-proto-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_proto_tnnl must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vc_proto_name",vc_proto_tnnl.vc_proto_tnnl, yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-proto-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)""",
        })

    self.__vc_proto_tnnl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_proto_tnnl(self):
    self.__vc_proto_tnnl = YANGDynClass(base=YANGListType("vc_proto_name",vc_proto_tnnl.vc_proto_tnnl, yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-proto-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-proto-tnnl", rest_name="vc-proto-tnnl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-proto-tnnl', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)


  def _get_vc_assigned_lsp(self):
    """
    Getter method for vc_assigned_lsp, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_assigned_lsp (list)

    YANG Description:  VC assigned lsp
    """
    return self.__vc_assigned_lsp
      
  def _set_vc_assigned_lsp(self, v, load=False):
    """
    Setter method for vc_assigned_lsp, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data/vc_assigned_lsp (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_assigned_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_assigned_lsp() directly.

    YANG Description:  VC assigned lsp
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vc_lsp_name",vc_assigned_lsp.vc_assigned_lsp, yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-lsp-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_assigned_lsp must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vc_lsp_name",vc_assigned_lsp.vc_assigned_lsp, yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-lsp-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)""",
        })

    self.__vc_assigned_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_assigned_lsp(self):
    self.__vc_assigned_lsp = YANGDynClass(base=YANGListType("vc_lsp_name",vc_assigned_lsp.vc_assigned_lsp, yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-lsp-name', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="vc-assigned-lsp", rest_name="vc-assigned-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-assigned-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)

  vc_peer_address = __builtin__.property(_get_vc_peer_address)
  vc_peer_state = __builtin__.property(_get_vc_peer_state)
  vc_peer_uptime = __builtin__.property(_get_vc_peer_uptime)
  vc_peer_load_balance = __builtin__.property(_get_vc_peer_load_balance)
  vc_peer_cos_enabled = __builtin__.property(_get_vc_peer_cos_enabled)
  vc_peer_cos_value = __builtin__.property(_get_vc_peer_cos_value)
  vc_ldp_tnnl_in_use = __builtin__.property(_get_vc_ldp_tnnl_in_use)
  vc_local_label = __builtin__.property(_get_vc_local_label)
  vc_remote_label = __builtin__.property(_get_vc_remote_label)
  vc_local_mtu = __builtin__.property(_get_vc_local_mtu)
  vc_remote_mtu = __builtin__.property(_get_vc_remote_mtu)
  vc_local_type = __builtin__.property(_get_vc_local_type)
  vc_remote_type = __builtin__.property(_get_vc_remote_type)
  vc_proto_tnnl = __builtin__.property(_get_vc_proto_tnnl)
  vc_assigned_lsp = __builtin__.property(_get_vc_assigned_lsp)


  _pyangbind_elements = {'vc_peer_address': vc_peer_address, 'vc_peer_state': vc_peer_state, 'vc_peer_uptime': vc_peer_uptime, 'vc_peer_load_balance': vc_peer_load_balance, 'vc_peer_cos_enabled': vc_peer_cos_enabled, 'vc_peer_cos_value': vc_peer_cos_value, 'vc_ldp_tnnl_in_use': vc_ldp_tnnl_in_use, 'vc_local_label': vc_local_label, 'vc_remote_label': vc_remote_label, 'vc_local_mtu': vc_local_mtu, 'vc_remote_mtu': vc_remote_mtu, 'vc_local_type': vc_local_type, 'vc_remote_type': vc_remote_type, 'vc_proto_tnnl': vc_proto_tnnl, 'vc_assigned_lsp': vc_assigned_lsp, }


