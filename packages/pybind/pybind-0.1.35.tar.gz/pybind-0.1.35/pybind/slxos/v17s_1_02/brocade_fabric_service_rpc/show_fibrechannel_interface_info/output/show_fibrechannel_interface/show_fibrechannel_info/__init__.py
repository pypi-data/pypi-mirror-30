
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_fibrechannel_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fabric-service - based on the path /brocade_fabric_service_rpc/show-fibrechannel-interface-info/output/show-fibrechannel-interface/show-fibrechannel-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__port_interface','__port_index','__port_type','__port_wwn','__remote_port_wwn','__remote_node_wwn','__port_state','__port_status','__port_status_message','__port_health','__port_trunked','__port_trunk_master','__port_actual_distance','__port_desired_credit','__port_buffer_allocated','__port_licensed','__port_address','__port_fec','__port_configured_speed','__port_actual_speed',)

  _yang_name = 'show-fibrechannel-info'
  _rest_name = 'show-fibrechannel-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__port_desired_credit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-desired-credit", rest_name="port-desired-credit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides Fibre Channel port Desired Credit\nInformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__port_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="port-wwn", rest_name="port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Local Fibre Channel port WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    self.__port_health = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-health", rest_name="port-health", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port health\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    self.__port_buffer_allocated = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-buffer-allocated", rest_name="port-buffer-allocated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Buffer\nAllocation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__port_fec = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-fec", rest_name="port-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide FEC operational status on a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    self.__port_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="port-interface", rest_name="port-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port\nInterface[rbridge-id/slot/port]'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)
    self.__port_actual_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-actual-distance", rest_name="port-actual-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Actual\nDistance Information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__port_trunked = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-trunked", rest_name="port-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)
    self.__remote_port_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-port-wwn", rest_name="remote-port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port remotePort WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    self.__port_actual_speed = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-actual-speed", rest_name="port-actual-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the actual speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    self.__port_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port State -\nOnline/Offline'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    self.__port_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-index", rest_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port index'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__remote_node_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-node-wwn", rest_name="remote-node-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel ports remoteNode WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    self.__port_licensed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-licensed", rest_name="port-licensed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides if the port is\nlicensed or not. Set to TRUE\nfor licenced ports'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)
    self.__port_type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'E-Port|U-Port|G-Port|F-Port', 'length': [u'6']}), is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='porttype-type', is_config=True)
    self.__port_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]*', 'length': [u'6']}), is_leaf=True, yang_name="port-address", rest_name="port-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'24 bit PID of a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='fabric-portid-type', is_config=True)
    self.__port_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-status", rest_name="port-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port Status -\nOnline/No_Module/No_Light/Disabled\nIn_Sync/No_Sync'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    self.__port_configured_speed = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-configured-speed", rest_name="port-configured-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the configured speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    self.__port_trunk_master = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-trunk-master", rest_name="port-trunk-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\nmaster information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__port_status_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-status-message", rest_name="port-status-message", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port status\nmessages'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_fabric_service_rpc', u'show-fibrechannel-interface-info', u'output', u'show-fibrechannel-interface', u'show-fibrechannel-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-fibrechannel-interface-info', u'output', u'show-fibrechannel-interface', u'show-fibrechannel-info']

  def _get_port_interface(self):
    """
    Getter method for port_interface, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_interface (interface:interface-type)

    YANG Description: The Fibre Channel port interface.
It is represented in the format
rbridge-id/slot/port.
    """
    return self.__port_interface
      
  def _set_port_interface(self, v, load=False):
    """
    Setter method for port_interface, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_interface (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_interface() directly.

    YANG Description: The Fibre Channel port interface.
It is represented in the format
rbridge-id/slot/port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="port-interface", rest_name="port-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port\nInterface[rbridge-id/slot/port]'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_interface must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="port-interface", rest_name="port-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port\nInterface[rbridge-id/slot/port]'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__port_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_interface(self):
    self.__port_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="port-interface", rest_name="port-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port\nInterface[rbridge-id/slot/port]'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)


  def _get_port_index(self):
    """
    Getter method for port_index, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_index (uint32)

    YANG Description: The Fibre Channel port index of the
RBridge.
    """
    return self.__port_index
      
  def _set_port_index(self, v, load=False):
    """
    Setter method for port_index, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_index() directly.

    YANG Description: The Fibre Channel port index of the
RBridge.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-index", rest_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port index'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-index", rest_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port index'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__port_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_index(self):
    self.__port_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-index", rest_name="port-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Fibre Channel port index'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_port_type(self):
    """
    Getter method for port_type, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_type (porttype-type)
    """
    return self.__port_type
      
  def _set_port_type(self, v, load=False):
    """
    Setter method for port_type, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_type (porttype-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'E-Port|U-Port|G-Port|F-Port', 'length': [u'6']}), is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='porttype-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_type must be of a type compatible with porttype-type""",
          'defined-type': "brocade-fabric-service:porttype-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'E-Port|U-Port|G-Port|F-Port', 'length': [u'6']}), is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='porttype-type', is_config=True)""",
        })

    self.__port_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_type(self):
    self.__port_type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'E-Port|U-Port|G-Port|F-Port', 'length': [u'6']}), is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='porttype-type', is_config=True)


  def _get_port_wwn(self):
    """
    Getter method for port_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_wwn (common-def:wwn-type)

    YANG Description: Local Fibre Channel port WWN.
    """
    return self.__port_wwn
      
  def _set_port_wwn(self, v, load=False):
    """
    Setter method for port_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_wwn (common-def:wwn-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_wwn() directly.

    YANG Description: Local Fibre Channel port WWN.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="port-wwn", rest_name="port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Local Fibre Channel port WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_wwn must be of a type compatible with common-def:wwn-type""",
          'defined-type': "common-def:wwn-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="port-wwn", rest_name="port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Local Fibre Channel port WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)""",
        })

    self.__port_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_wwn(self):
    self.__port_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="port-wwn", rest_name="port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Local Fibre Channel port WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)


  def _get_remote_port_wwn(self):
    """
    Getter method for remote_port_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/remote_port_wwn (common-def:wwn-type)

    YANG Description: WWN of the remote port that connects
to this Fibre Channel port.
    """
    return self.__remote_port_wwn
      
  def _set_remote_port_wwn(self, v, load=False):
    """
    Setter method for remote_port_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/remote_port_wwn (common-def:wwn-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_port_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_port_wwn() directly.

    YANG Description: WWN of the remote port that connects
to this Fibre Channel port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-port-wwn", rest_name="remote-port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port remotePort WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_port_wwn must be of a type compatible with common-def:wwn-type""",
          'defined-type': "common-def:wwn-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-port-wwn", rest_name="remote-port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port remotePort WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)""",
        })

    self.__remote_port_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_port_wwn(self):
    self.__remote_port_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-port-wwn", rest_name="remote-port-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port remotePort WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)


  def _get_remote_node_wwn(self):
    """
    Getter method for remote_node_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/remote_node_wwn (common-def:wwn-type)

    YANG Description: WWN of the remote switch that connects
to this Fibre Channel port.
    """
    return self.__remote_node_wwn
      
  def _set_remote_node_wwn(self, v, load=False):
    """
    Setter method for remote_node_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/remote_node_wwn (common-def:wwn-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_node_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_node_wwn() directly.

    YANG Description: WWN of the remote switch that connects
to this Fibre Channel port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-node-wwn", rest_name="remote-node-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel ports remoteNode WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_node_wwn must be of a type compatible with common-def:wwn-type""",
          'defined-type': "common-def:wwn-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-node-wwn", rest_name="remote-node-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel ports remoteNode WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)""",
        })

    self.__remote_node_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_node_wwn(self):
    self.__remote_node_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="remote-node-wwn", rest_name="remote-node-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel ports remoteNode WWN'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)


  def _get_port_state(self):
    """
    Getter method for port_state, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_state (string)

    YANG Description: This specifies the Fibre Channel port
State. The state can be 
Online or Offline.
    """
    return self.__port_state
      
  def _set_port_state(self, v, load=False):
    """
    Setter method for port_state, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_state() directly.

    YANG Description: This specifies the Fibre Channel port
State. The state can be 
Online or Offline.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port State -\nOnline/Offline'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port State -\nOnline/Offline'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_state(self):
    self.__port_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port State -\nOnline/Offline'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)


  def _get_port_status(self):
    """
    Getter method for port_status, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_status (string)

    YANG Description: Provides the Fibre Channel port
status. The Fibre Channel port status
can be Online, No Module, No Light,
In Sync, No Sync etc.
    """
    return self.__port_status
      
  def _set_port_status(self, v, load=False):
    """
    Setter method for port_status, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_status() directly.

    YANG Description: Provides the Fibre Channel port
status. The Fibre Channel port status
can be Online, No Module, No Light,
In Sync, No Sync etc.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-status", rest_name="port-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port Status -\nOnline/No_Module/No_Light/Disabled\nIn_Sync/No_Sync'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-status", rest_name="port-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port Status -\nOnline/No_Module/No_Light/Disabled\nIn_Sync/No_Sync'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_status(self):
    self.__port_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-status", rest_name="port-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Fibre Channel port Status -\nOnline/No_Module/No_Light/Disabled\nIn_Sync/No_Sync'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)


  def _get_port_status_message(self):
    """
    Getter method for port_status_message, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_status_message (string)

    YANG Description: Provides the Fibre Channel port status
messages. It consists of messages like
down stream, trunk port, trunk
master etc.
    """
    return self.__port_status_message
      
  def _set_port_status_message(self, v, load=False):
    """
    Setter method for port_status_message, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_status_message (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_status_message is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_status_message() directly.

    YANG Description: Provides the Fibre Channel port status
messages. It consists of messages like
down stream, trunk port, trunk
master etc.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-status-message", rest_name="port-status-message", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port status\nmessages'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_status_message must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-status-message", rest_name="port-status-message", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port status\nmessages'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_status_message = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_status_message(self):
    self.__port_status_message = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-status-message", rest_name="port-status-message", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port status\nmessages'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)


  def _get_port_health(self):
    """
    Getter method for port_health, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_health (string)

    YANG Description: Provides the Fibre Channel port health
information. It consists of information
like fabric watch licence details, etc.
    """
    return self.__port_health
      
  def _set_port_health(self, v, load=False):
    """
    Setter method for port_health, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_health (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_health is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_health() directly.

    YANG Description: Provides the Fibre Channel port health
information. It consists of information
like fabric watch licence details, etc.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-health", rest_name="port-health", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port health\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_health must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-health", rest_name="port-health", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port health\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_health = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_health(self):
    self.__port_health = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-health", rest_name="port-health", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port health\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)


  def _get_port_trunked(self):
    """
    Getter method for port_trunked, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_trunked (boolean)

    YANG Description: Provides the Fibre Channel port trunk
information. This parameter is set to
'true' for trunked ports and 'false' for
non trunked ports.
    """
    return self.__port_trunked
      
  def _set_port_trunked(self, v, load=False):
    """
    Setter method for port_trunked, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_trunked (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_trunked is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_trunked() directly.

    YANG Description: Provides the Fibre Channel port trunk
information. This parameter is set to
'true' for trunked ports and 'false' for
non trunked ports.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="port-trunked", rest_name="port-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_trunked must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-trunked", rest_name="port-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)""",
        })

    self.__port_trunked = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_trunked(self):
    self.__port_trunked = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-trunked", rest_name="port-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\ninformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)


  def _get_port_trunk_master(self):
    """
    Getter method for port_trunk_master, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_trunk_master (uint32)

    YANG Description: Provides the Fibre Channel port trunk
master information. This parameter value
is set to '1' for trunk master and
'0' for slave ports.
    """
    return self.__port_trunk_master
      
  def _set_port_trunk_master(self, v, load=False):
    """
    Setter method for port_trunk_master, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_trunk_master (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_trunk_master is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_trunk_master() directly.

    YANG Description: Provides the Fibre Channel port trunk
master information. This parameter value
is set to '1' for trunk master and
'0' for slave ports.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-trunk-master", rest_name="port-trunk-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\nmaster information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_trunk_master must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-trunk-master", rest_name="port-trunk-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\nmaster information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__port_trunk_master = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_trunk_master(self):
    self.__port_trunk_master = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-trunk-master", rest_name="port-trunk-master", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port trunk\nmaster information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_port_actual_distance(self):
    """
    Getter method for port_actual_distance, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_actual_distance (uint32)

    YANG Description: Provides the Fibre Channel port Actual
Distance Information.
    """
    return self.__port_actual_distance
      
  def _set_port_actual_distance(self, v, load=False):
    """
    Setter method for port_actual_distance, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_actual_distance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_actual_distance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_actual_distance() directly.

    YANG Description: Provides the Fibre Channel port Actual
Distance Information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-actual-distance", rest_name="port-actual-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Actual\nDistance Information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_actual_distance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-actual-distance", rest_name="port-actual-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Actual\nDistance Information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__port_actual_distance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_actual_distance(self):
    self.__port_actual_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-actual-distance", rest_name="port-actual-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Actual\nDistance Information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_port_desired_credit(self):
    """
    Getter method for port_desired_credit, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_desired_credit (uint32)

    YANG Description: Provides the Fibre Channel port Desired
Credit Information.
    """
    return self.__port_desired_credit
      
  def _set_port_desired_credit(self, v, load=False):
    """
    Setter method for port_desired_credit, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_desired_credit (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_desired_credit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_desired_credit() directly.

    YANG Description: Provides the Fibre Channel port Desired
Credit Information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-desired-credit", rest_name="port-desired-credit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides Fibre Channel port Desired Credit\nInformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_desired_credit must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-desired-credit", rest_name="port-desired-credit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides Fibre Channel port Desired Credit\nInformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__port_desired_credit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_desired_credit(self):
    self.__port_desired_credit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-desired-credit", rest_name="port-desired-credit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides Fibre Channel port Desired Credit\nInformation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_port_buffer_allocated(self):
    """
    Getter method for port_buffer_allocated, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_buffer_allocated (uint32)

    YANG Description: Provides the Fibre Channel port Buffer
Allocation.
    """
    return self.__port_buffer_allocated
      
  def _set_port_buffer_allocated(self, v, load=False):
    """
    Setter method for port_buffer_allocated, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_buffer_allocated (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_buffer_allocated is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_buffer_allocated() directly.

    YANG Description: Provides the Fibre Channel port Buffer
Allocation.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-buffer-allocated", rest_name="port-buffer-allocated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Buffer\nAllocation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_buffer_allocated must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-buffer-allocated", rest_name="port-buffer-allocated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Buffer\nAllocation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__port_buffer_allocated = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_buffer_allocated(self):
    self.__port_buffer_allocated = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-buffer-allocated", rest_name="port-buffer-allocated", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides the Fibre Channel port Buffer\nAllocation'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_port_licensed(self):
    """
    Getter method for port_licensed, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_licensed (boolean)

    YANG Description: Indicates if the port is
licensed or not. This is set to 'true'
for licenced ports and 'false' for
non licenced ports.
    """
    return self.__port_licensed
      
  def _set_port_licensed(self, v, load=False):
    """
    Setter method for port_licensed, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_licensed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_licensed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_licensed() directly.

    YANG Description: Indicates if the port is
licensed or not. This is set to 'true'
for licenced ports and 'false' for
non licenced ports.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="port-licensed", rest_name="port-licensed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides if the port is\nlicensed or not. Set to TRUE\nfor licenced ports'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_licensed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-licensed", rest_name="port-licensed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides if the port is\nlicensed or not. Set to TRUE\nfor licenced ports'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)""",
        })

    self.__port_licensed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_licensed(self):
    self.__port_licensed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-licensed", rest_name="port-licensed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provides if the port is\nlicensed or not. Set to TRUE\nfor licenced ports'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='boolean', is_config=True)


  def _get_port_address(self):
    """
    Getter method for port_address, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_address (fabric-portid-type)

    YANG Description: Fibre Channel address (24 bit
address PID).
Uses hexadecimal format.
    """
    return self.__port_address
      
  def _set_port_address(self, v, load=False):
    """
    Setter method for port_address, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_address (fabric-portid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_address() directly.

    YANG Description: Fibre Channel address (24 bit
address PID).
Uses hexadecimal format.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]*', 'length': [u'6']}), is_leaf=True, yang_name="port-address", rest_name="port-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'24 bit PID of a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='fabric-portid-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_address must be of a type compatible with fabric-portid-type""",
          'defined-type': "brocade-fabric-service:fabric-portid-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]*', 'length': [u'6']}), is_leaf=True, yang_name="port-address", rest_name="port-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'24 bit PID of a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='fabric-portid-type', is_config=True)""",
        })

    self.__port_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_address(self):
    self.__port_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]*', 'length': [u'6']}), is_leaf=True, yang_name="port-address", rest_name="port-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'24 bit PID of a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='fabric-portid-type', is_config=True)


  def _get_port_fec(self):
    """
    Getter method for port_fec, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_fec (string)

    YANG Description: Provide port FEC operational status of a port.
  Active - When FEC enabled and operational on a port. 
  Inactive - When FEC is not operational on a port. 
  Not Supported - When the platform doesn't support FEC feature.
    """
    return self.__port_fec
      
  def _set_port_fec(self, v, load=False):
    """
    Setter method for port_fec, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_fec (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_fec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_fec() directly.

    YANG Description: Provide port FEC operational status of a port.
  Active - When FEC enabled and operational on a port. 
  Inactive - When FEC is not operational on a port. 
  Not Supported - When the platform doesn't support FEC feature.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-fec", rest_name="port-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide FEC operational status on a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_fec must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-fec", rest_name="port-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide FEC operational status on a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_fec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_fec(self):
    self.__port_fec = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-fec", rest_name="port-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide FEC operational status on a port'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)


  def _get_port_configured_speed(self):
    """
    Getter method for port_configured_speed, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_configured_speed (string)

    YANG Description: Provides the Fibre Channel port Configured
Speed Information.
    """
    return self.__port_configured_speed
      
  def _set_port_configured_speed(self, v, load=False):
    """
    Setter method for port_configured_speed, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_configured_speed (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_configured_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_configured_speed() directly.

    YANG Description: Provides the Fibre Channel port Configured
Speed Information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-configured-speed", rest_name="port-configured-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the configured speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_configured_speed must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-configured-speed", rest_name="port-configured-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the configured speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_configured_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_configured_speed(self):
    self.__port_configured_speed = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-configured-speed", rest_name="port-configured-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the configured speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)


  def _get_port_actual_speed(self):
    """
    Getter method for port_actual_speed, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_actual_speed (string)

    YANG Description: Provides the Fibre Channel port Actual
speed Information.
    """
    return self.__port_actual_speed
      
  def _set_port_actual_speed(self, v, load=False):
    """
    Setter method for port_actual_speed, mapped from YANG variable /brocade_fabric_service_rpc/show_fibrechannel_interface_info/output/show_fibrechannel_interface/show_fibrechannel_info/port_actual_speed (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_actual_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_actual_speed() directly.

    YANG Description: Provides the Fibre Channel port Actual
speed Information.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-actual-speed", rest_name="port-actual-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the actual speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_actual_speed must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-actual-speed", rest_name="port-actual-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the actual speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)""",
        })

    self.__port_actual_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_actual_speed(self):
    self.__port_actual_speed = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-actual-speed", rest_name="port-actual-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Provide the actual speed of the port.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='string', is_config=True)

  port_interface = __builtin__.property(_get_port_interface, _set_port_interface)
  port_index = __builtin__.property(_get_port_index, _set_port_index)
  port_type = __builtin__.property(_get_port_type, _set_port_type)
  port_wwn = __builtin__.property(_get_port_wwn, _set_port_wwn)
  remote_port_wwn = __builtin__.property(_get_remote_port_wwn, _set_remote_port_wwn)
  remote_node_wwn = __builtin__.property(_get_remote_node_wwn, _set_remote_node_wwn)
  port_state = __builtin__.property(_get_port_state, _set_port_state)
  port_status = __builtin__.property(_get_port_status, _set_port_status)
  port_status_message = __builtin__.property(_get_port_status_message, _set_port_status_message)
  port_health = __builtin__.property(_get_port_health, _set_port_health)
  port_trunked = __builtin__.property(_get_port_trunked, _set_port_trunked)
  port_trunk_master = __builtin__.property(_get_port_trunk_master, _set_port_trunk_master)
  port_actual_distance = __builtin__.property(_get_port_actual_distance, _set_port_actual_distance)
  port_desired_credit = __builtin__.property(_get_port_desired_credit, _set_port_desired_credit)
  port_buffer_allocated = __builtin__.property(_get_port_buffer_allocated, _set_port_buffer_allocated)
  port_licensed = __builtin__.property(_get_port_licensed, _set_port_licensed)
  port_address = __builtin__.property(_get_port_address, _set_port_address)
  port_fec = __builtin__.property(_get_port_fec, _set_port_fec)
  port_configured_speed = __builtin__.property(_get_port_configured_speed, _set_port_configured_speed)
  port_actual_speed = __builtin__.property(_get_port_actual_speed, _set_port_actual_speed)


  _pyangbind_elements = {'port_interface': port_interface, 'port_index': port_index, 'port_type': port_type, 'port_wwn': port_wwn, 'remote_port_wwn': remote_port_wwn, 'remote_node_wwn': remote_node_wwn, 'port_state': port_state, 'port_status': port_status, 'port_status_message': port_status_message, 'port_health': port_health, 'port_trunked': port_trunked, 'port_trunk_master': port_trunk_master, 'port_actual_distance': port_actual_distance, 'port_desired_credit': port_desired_credit, 'port_buffer_allocated': port_buffer_allocated, 'port_licensed': port_licensed, 'port_address': port_address, 'port_fec': port_fec, 'port_configured_speed': port_configured_speed, 'port_actual_speed': port_actual_speed, }


