
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import multicast_ssm_mapping
import igmp_statistics
import debug_igmp
import igmp_snooping_vlans
import igmp_snooping_mrouters
import igmp_l3_interfaces
import igmp_groups
import pim_snp_groups
import igmp_multicast_snooping_vlans
import igmp_interface_statistics
class igmp_snooping_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mc-hms-operational - based on the path /igmp-snooping-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IGMP Snooping Root MO
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__multicast_ssm_mapping','__igmp_statistics','__debug_igmp','__igmp_snooping_vlans','__igmp_snooping_mrouters','__igmp_l3_interfaces','__igmp_groups','__pim_snp_groups','__igmp_multicast_snooping_vlans','__igmp_interface_statistics',)

  _yang_name = 'igmp-snooping-state'
  _rest_name = 'igmp-snooping-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__igmp_snooping_mrouters = YANGDynClass(base=YANGListType("vlan_id",igmp_snooping_mrouters.igmp_snooping_mrouters, yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__pim_snp_groups = YANGDynClass(base=YANGListType("vlan_id",pim_snp_groups.pim_snp_groups, yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__multicast_ssm_mapping = YANGDynClass(base=multicast_ssm_mapping.multicast_ssm_mapping, is_container='container', presence=False, yang_name="multicast-ssm-mapping", rest_name="multicast-ssm-mapping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-multicast-ssm-mapping', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    self.__debug_igmp = YANGDynClass(base=debug_igmp.debug_igmp, is_container='container', presence=False, yang_name="debug-igmp", rest_name="debug-igmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-show-debug', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    self.__igmp_interface_statistics = YANGDynClass(base=igmp_interface_statistics.igmp_interface_statistics, is_container='container', presence=False, yang_name="igmp-interface-statistics", rest_name="igmp-interface-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-igmp-interface-statistics-igmp-interface-statistics-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    self.__igmp_statistics = YANGDynClass(base=igmp_statistics.igmp_statistics, is_container='container', presence=False, yang_name="igmp-statistics", rest_name="igmp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    self.__igmp_multicast_snooping_vlans = YANGDynClass(base=YANGListType("vlan_id",igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans, yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__igmp_l3_interfaces = YANGDynClass(base=YANGListType("interface_name",igmp_l3_interfaces.igmp_l3_interfaces, yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__igmp_groups = YANGDynClass(base=YANGListType("group_addr interface_name",igmp_groups.igmp_groups, yang_name="igmp-groups", rest_name="igmp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-addr interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-groups", rest_name="igmp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    self.__igmp_snooping_vlans = YANGDynClass(base=YANGListType("vlan_id",igmp_snooping_vlans.igmp_snooping_vlans, yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'igmp-snooping-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'igmp-snooping-state']

  def _get_multicast_ssm_mapping(self):
    """
    Getter method for multicast_ssm_mapping, mapped from YANG variable /igmp_snooping_state/multicast_ssm_mapping (container)

    YANG Description: Source Specific Multicast Operational Information
    """
    return self.__multicast_ssm_mapping
      
  def _set_multicast_ssm_mapping(self, v, load=False):
    """
    Setter method for multicast_ssm_mapping, mapped from YANG variable /igmp_snooping_state/multicast_ssm_mapping (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multicast_ssm_mapping is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multicast_ssm_mapping() directly.

    YANG Description: Source Specific Multicast Operational Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=multicast_ssm_mapping.multicast_ssm_mapping, is_container='container', presence=False, yang_name="multicast-ssm-mapping", rest_name="multicast-ssm-mapping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-multicast-ssm-mapping', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multicast_ssm_mapping must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=multicast_ssm_mapping.multicast_ssm_mapping, is_container='container', presence=False, yang_name="multicast-ssm-mapping", rest_name="multicast-ssm-mapping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-multicast-ssm-mapping', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)""",
        })

    self.__multicast_ssm_mapping = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multicast_ssm_mapping(self):
    self.__multicast_ssm_mapping = YANGDynClass(base=multicast_ssm_mapping.multicast_ssm_mapping, is_container='container', presence=False, yang_name="multicast-ssm-mapping", rest_name="multicast-ssm-mapping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-multicast-ssm-mapping', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)


  def _get_igmp_statistics(self):
    """
    Getter method for igmp_statistics, mapped from YANG variable /igmp_snooping_state/igmp_statistics (container)

    YANG Description: Igmp snooping statistics
    """
    return self.__igmp_statistics
      
  def _set_igmp_statistics(self, v, load=False):
    """
    Setter method for igmp_statistics, mapped from YANG variable /igmp_snooping_state/igmp_statistics (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_statistics() directly.

    YANG Description: Igmp snooping statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=igmp_statistics.igmp_statistics, is_container='container', presence=False, yang_name="igmp-statistics", rest_name="igmp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_statistics must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=igmp_statistics.igmp_statistics, is_container='container', presence=False, yang_name="igmp-statistics", rest_name="igmp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)""",
        })

    self.__igmp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_statistics(self):
    self.__igmp_statistics = YANGDynClass(base=igmp_statistics.igmp_statistics, is_container='container', presence=False, yang_name="igmp-statistics", rest_name="igmp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)


  def _get_debug_igmp(self):
    """
    Getter method for debug_igmp, mapped from YANG variable /igmp_snooping_state/debug_igmp (container)

    YANG Description: Debug info for IGMP Snooping
    """
    return self.__debug_igmp
      
  def _set_debug_igmp(self, v, load=False):
    """
    Setter method for debug_igmp, mapped from YANG variable /igmp_snooping_state/debug_igmp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_debug_igmp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_debug_igmp() directly.

    YANG Description: Debug info for IGMP Snooping
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=debug_igmp.debug_igmp, is_container='container', presence=False, yang_name="debug-igmp", rest_name="debug-igmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-show-debug', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """debug_igmp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=debug_igmp.debug_igmp, is_container='container', presence=False, yang_name="debug-igmp", rest_name="debug-igmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-show-debug', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)""",
        })

    self.__debug_igmp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_debug_igmp(self):
    self.__debug_igmp = YANGDynClass(base=debug_igmp.debug_igmp, is_container='container', presence=False, yang_name="debug-igmp", rest_name="debug-igmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-show-debug', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)


  def _get_igmp_snooping_vlans(self):
    """
    Getter method for igmp_snooping_vlans, mapped from YANG variable /igmp_snooping_state/igmp_snooping_vlans (list)

    YANG Description: Igmp snooping enabled interface List
    """
    return self.__igmp_snooping_vlans
      
  def _set_igmp_snooping_vlans(self, v, load=False):
    """
    Setter method for igmp_snooping_vlans, mapped from YANG variable /igmp_snooping_state/igmp_snooping_vlans (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_snooping_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_snooping_vlans() directly.

    YANG Description: Igmp snooping enabled interface List
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vlan_id",igmp_snooping_vlans.igmp_snooping_vlans, yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_snooping_vlans must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan_id",igmp_snooping_vlans.igmp_snooping_vlans, yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_snooping_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_snooping_vlans(self):
    self.__igmp_snooping_vlans = YANGDynClass(base=YANGListType("vlan_id",igmp_snooping_vlans.igmp_snooping_vlans, yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-vlans", rest_name="igmp-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_igmp_snooping_mrouters(self):
    """
    Getter method for igmp_snooping_mrouters, mapped from YANG variable /igmp_snooping_state/igmp_snooping_mrouters (list)

    YANG Description: Igmp snoopig mrouter list
    """
    return self.__igmp_snooping_mrouters
      
  def _set_igmp_snooping_mrouters(self, v, load=False):
    """
    Setter method for igmp_snooping_mrouters, mapped from YANG variable /igmp_snooping_state/igmp_snooping_mrouters (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_snooping_mrouters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_snooping_mrouters() directly.

    YANG Description: Igmp snoopig mrouter list
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vlan_id",igmp_snooping_mrouters.igmp_snooping_mrouters, yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_snooping_mrouters must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan_id",igmp_snooping_mrouters.igmp_snooping_mrouters, yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_snooping_mrouters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_snooping_mrouters(self):
    self.__igmp_snooping_mrouters = YANGDynClass(base=YANGListType("vlan_id",igmp_snooping_mrouters.igmp_snooping_mrouters, yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-snooping-mrouters", rest_name="igmp-snooping-mrouters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-snooping-mrouters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_igmp_l3_interfaces(self):
    """
    Getter method for igmp_l3_interfaces, mapped from YANG variable /igmp_snooping_state/igmp_l3_interfaces (list)

    YANG Description: Igmp L3 interface List
    """
    return self.__igmp_l3_interfaces
      
  def _set_igmp_l3_interfaces(self, v, load=False):
    """
    Setter method for igmp_l3_interfaces, mapped from YANG variable /igmp_snooping_state/igmp_l3_interfaces (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_l3_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_l3_interfaces() directly.

    YANG Description: Igmp L3 interface List
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_name",igmp_l3_interfaces.igmp_l3_interfaces, yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_l3_interfaces must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_name",igmp_l3_interfaces.igmp_l3_interfaces, yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_l3_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_l3_interfaces(self):
    self.__igmp_l3_interfaces = YANGDynClass(base=YANGListType("interface_name",igmp_l3_interfaces.igmp_l3_interfaces, yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-l3-interfaces", rest_name="igmp-l3-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-l3-interfaces', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_igmp_groups(self):
    """
    Getter method for igmp_groups, mapped from YANG variable /igmp_snooping_state/igmp_groups (list)

    YANG Description: Igmp Snooping Group Information
    """
    return self.__igmp_groups
      
  def _set_igmp_groups(self, v, load=False):
    """
    Setter method for igmp_groups, mapped from YANG variable /igmp_snooping_state/igmp_groups (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_groups() directly.

    YANG Description: Igmp Snooping Group Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("group_addr interface_name",igmp_groups.igmp_groups, yang_name="igmp-groups", rest_name="igmp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-addr interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-groups", rest_name="igmp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_groups must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("group_addr interface_name",igmp_groups.igmp_groups, yang_name="igmp-groups", rest_name="igmp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-addr interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-groups", rest_name="igmp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_groups(self):
    self.__igmp_groups = YANGDynClass(base=YANGListType("group_addr interface_name",igmp_groups.igmp_groups, yang_name="igmp-groups", rest_name="igmp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='group-addr interface-name', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-groups", rest_name="igmp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_pim_snp_groups(self):
    """
    Getter method for pim_snp_groups, mapped from YANG variable /igmp_snooping_state/pim_snp_groups (list)

    YANG Description: Pim Snooping Group Information
    """
    return self.__pim_snp_groups
      
  def _set_pim_snp_groups(self, v, load=False):
    """
    Setter method for pim_snp_groups, mapped from YANG variable /igmp_snooping_state/pim_snp_groups (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pim_snp_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pim_snp_groups() directly.

    YANG Description: Pim Snooping Group Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vlan_id",pim_snp_groups.pim_snp_groups, yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pim_snp_groups must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan_id",pim_snp_groups.pim_snp_groups, yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__pim_snp_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pim_snp_groups(self):
    self.__pim_snp_groups = YANGDynClass(base=YANGListType("vlan_id",pim_snp_groups.pim_snp_groups, yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-snp-groups", rest_name="pim-snp-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-pim-snp-groups', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_igmp_multicast_snooping_vlans(self):
    """
    Getter method for igmp_multicast_snooping_vlans, mapped from YANG variable /igmp_snooping_state/igmp_multicast_snooping_vlans (list)

    YANG Description: Multicast snooping vlan
    """
    return self.__igmp_multicast_snooping_vlans
      
  def _set_igmp_multicast_snooping_vlans(self, v, load=False):
    """
    Setter method for igmp_multicast_snooping_vlans, mapped from YANG variable /igmp_snooping_state/igmp_multicast_snooping_vlans (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_multicast_snooping_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_multicast_snooping_vlans() directly.

    YANG Description: Multicast snooping vlan
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vlan_id",igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans, yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_multicast_snooping_vlans must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vlan_id",igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans, yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)""",
        })

    self.__igmp_multicast_snooping_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_multicast_snooping_vlans(self):
    self.__igmp_multicast_snooping_vlans = YANGDynClass(base=YANGListType("vlan_id",igmp_multicast_snooping_vlans.igmp_multicast_snooping_vlans, yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vlan-id', extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}), is_container='list', yang_name="igmp-multicast-snooping-vlans", rest_name="igmp-multicast-snooping-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc-hms-igmp-multicast-snooping-vlans', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='list', is_config=False)


  def _get_igmp_interface_statistics(self):
    """
    Getter method for igmp_interface_statistics, mapped from YANG variable /igmp_snooping_state/igmp_interface_statistics (container)
    """
    return self.__igmp_interface_statistics
      
  def _set_igmp_interface_statistics(self, v, load=False):
    """
    Setter method for igmp_interface_statistics, mapped from YANG variable /igmp_snooping_state/igmp_interface_statistics (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_interface_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_interface_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=igmp_interface_statistics.igmp_interface_statistics, is_container='container', presence=False, yang_name="igmp-interface-statistics", rest_name="igmp-interface-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-igmp-interface-statistics-igmp-interface-statistics-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_interface_statistics must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=igmp_interface_statistics.igmp_interface_statistics, is_container='container', presence=False, yang_name="igmp-interface-statistics", rest_name="igmp-interface-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-igmp-interface-statistics-igmp-interface-statistics-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)""",
        })

    self.__igmp_interface_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_interface_statistics(self):
    self.__igmp_interface_statistics = YANGDynClass(base=igmp_interface_statistics.igmp_interface_statistics, is_container='container', presence=False, yang_name="igmp-interface-statistics", rest_name="igmp-interface-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mc_hms-igmp-interface-statistics-igmp-interface-statistics-1'}}, namespace='urn:brocade.com:mgmt:brocade-mc-hms-operational', defining_module='brocade-mc-hms-operational', yang_type='container', is_config=False)

  multicast_ssm_mapping = __builtin__.property(_get_multicast_ssm_mapping)
  igmp_statistics = __builtin__.property(_get_igmp_statistics)
  debug_igmp = __builtin__.property(_get_debug_igmp)
  igmp_snooping_vlans = __builtin__.property(_get_igmp_snooping_vlans)
  igmp_snooping_mrouters = __builtin__.property(_get_igmp_snooping_mrouters)
  igmp_l3_interfaces = __builtin__.property(_get_igmp_l3_interfaces)
  igmp_groups = __builtin__.property(_get_igmp_groups)
  pim_snp_groups = __builtin__.property(_get_pim_snp_groups)
  igmp_multicast_snooping_vlans = __builtin__.property(_get_igmp_multicast_snooping_vlans)
  igmp_interface_statistics = __builtin__.property(_get_igmp_interface_statistics)


  _pyangbind_elements = {'multicast_ssm_mapping': multicast_ssm_mapping, 'igmp_statistics': igmp_statistics, 'debug_igmp': debug_igmp, 'igmp_snooping_vlans': igmp_snooping_vlans, 'igmp_snooping_mrouters': igmp_snooping_mrouters, 'igmp_l3_interfaces': igmp_l3_interfaces, 'igmp_groups': igmp_groups, 'pim_snp_groups': pim_snp_groups, 'igmp_multicast_snooping_vlans': igmp_multicast_snooping_vlans, 'igmp_interface_statistics': igmp_interface_statistics, }


