
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class connectivity(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysmgr-operational - based on the path /sfm-state/connectivity. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SFM Links Connectivity
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__connectivity_count','__connectivity_sfmid','__connectivity_feid','__connectivity_type','__connectivity_linkid','__connectivity_moduleid','__connectivity_port',)

  _yang_name = 'connectivity'
  _rest_name = 'connectivity'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__connectivity_port = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-port", rest_name="connectivity-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__connectivity_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="connectivity-type", rest_name="connectivity-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='string', is_config=False)
    self.__connectivity_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-feid", rest_name="connectivity-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__connectivity_moduleid = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-moduleid", rest_name="connectivity-moduleid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__connectivity_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-count", rest_name="connectivity-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__connectivity_linkid = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-linkid", rest_name="connectivity-linkid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__connectivity_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-sfmid", rest_name="connectivity-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sfm-state', u'connectivity']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'sfm-state', u'connectivity']

  def _get_connectivity_count(self):
    """
    Getter method for connectivity_count, mapped from YANG variable /sfm_state/connectivity/connectivity_count (uint32)

    YANG Description: Connectivity-Count
    """
    return self.__connectivity_count
      
  def _set_connectivity_count(self, v, load=False):
    """
    Setter method for connectivity_count, mapped from YANG variable /sfm_state/connectivity/connectivity_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_count() directly.

    YANG Description: Connectivity-Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-count", rest_name="connectivity-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-count", rest_name="connectivity-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__connectivity_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_count(self):
    self.__connectivity_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-count", rest_name="connectivity-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_connectivity_sfmid(self):
    """
    Getter method for connectivity_sfmid, mapped from YANG variable /sfm_state/connectivity/connectivity_sfmid (uint32)

    YANG Description: Connectivity-SFMID
    """
    return self.__connectivity_sfmid
      
  def _set_connectivity_sfmid(self, v, load=False):
    """
    Setter method for connectivity_sfmid, mapped from YANG variable /sfm_state/connectivity/connectivity_sfmid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_sfmid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_sfmid() directly.

    YANG Description: Connectivity-SFMID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-sfmid", rest_name="connectivity-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_sfmid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-sfmid", rest_name="connectivity-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__connectivity_sfmid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_sfmid(self):
    self.__connectivity_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-sfmid", rest_name="connectivity-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_connectivity_feid(self):
    """
    Getter method for connectivity_feid, mapped from YANG variable /sfm_state/connectivity/connectivity_feid (uint32)

    YANG Description: Connectivity-SFMID
    """
    return self.__connectivity_feid
      
  def _set_connectivity_feid(self, v, load=False):
    """
    Setter method for connectivity_feid, mapped from YANG variable /sfm_state/connectivity/connectivity_feid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_feid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_feid() directly.

    YANG Description: Connectivity-SFMID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-feid", rest_name="connectivity-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_feid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-feid", rest_name="connectivity-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__connectivity_feid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_feid(self):
    self.__connectivity_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="connectivity-feid", rest_name="connectivity-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_connectivity_type(self):
    """
    Getter method for connectivity_type, mapped from YANG variable /sfm_state/connectivity/connectivity_type (string)

    YANG Description: CONNECTIVITY-Type
    """
    return self.__connectivity_type
      
  def _set_connectivity_type(self, v, load=False):
    """
    Setter method for connectivity_type, mapped from YANG variable /sfm_state/connectivity/connectivity_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_type() directly.

    YANG Description: CONNECTIVITY-Type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="connectivity-type", rest_name="connectivity-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="connectivity-type", rest_name="connectivity-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='string', is_config=False)""",
        })

    self.__connectivity_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_type(self):
    self.__connectivity_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="connectivity-type", rest_name="connectivity-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='string', is_config=False)


  def _get_connectivity_linkid(self):
    """
    Getter method for connectivity_linkid, mapped from YANG variable /sfm_state/connectivity/connectivity_linkid (uint32)

    YANG Description: CONNECTIVITY-LINKID
    """
    return self.__connectivity_linkid
      
  def _set_connectivity_linkid(self, v, load=False):
    """
    Setter method for connectivity_linkid, mapped from YANG variable /sfm_state/connectivity/connectivity_linkid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_linkid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_linkid() directly.

    YANG Description: CONNECTIVITY-LINKID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-linkid", rest_name="connectivity-linkid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_linkid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-linkid", rest_name="connectivity-linkid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__connectivity_linkid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_linkid(self):
    self.__connectivity_linkid = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-linkid", rest_name="connectivity-linkid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_connectivity_moduleid(self):
    """
    Getter method for connectivity_moduleid, mapped from YANG variable /sfm_state/connectivity/connectivity_moduleid (uint32)

    YANG Description: CONNECTIVITY-MODID
    """
    return self.__connectivity_moduleid
      
  def _set_connectivity_moduleid(self, v, load=False):
    """
    Setter method for connectivity_moduleid, mapped from YANG variable /sfm_state/connectivity/connectivity_moduleid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_moduleid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_moduleid() directly.

    YANG Description: CONNECTIVITY-MODID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-moduleid", rest_name="connectivity-moduleid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_moduleid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-moduleid", rest_name="connectivity-moduleid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__connectivity_moduleid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_moduleid(self):
    self.__connectivity_moduleid = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-moduleid", rest_name="connectivity-moduleid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_connectivity_port(self):
    """
    Getter method for connectivity_port, mapped from YANG variable /sfm_state/connectivity/connectivity_port (uint32)

    YANG Description: CONNECTIVITY-PORT
    """
    return self.__connectivity_port
      
  def _set_connectivity_port(self, v, load=False):
    """
    Setter method for connectivity_port, mapped from YANG variable /sfm_state/connectivity/connectivity_port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity_port() directly.

    YANG Description: CONNECTIVITY-PORT
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-port", rest_name="connectivity-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity_port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-port", rest_name="connectivity-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__connectivity_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity_port(self):
    self.__connectivity_port = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="connectivity-port", rest_name="connectivity-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

  connectivity_count = __builtin__.property(_get_connectivity_count)
  connectivity_sfmid = __builtin__.property(_get_connectivity_sfmid)
  connectivity_feid = __builtin__.property(_get_connectivity_feid)
  connectivity_type = __builtin__.property(_get_connectivity_type)
  connectivity_linkid = __builtin__.property(_get_connectivity_linkid)
  connectivity_moduleid = __builtin__.property(_get_connectivity_moduleid)
  connectivity_port = __builtin__.property(_get_connectivity_port)


  _pyangbind_elements = {'connectivity_count': connectivity_count, 'connectivity_sfmid': connectivity_sfmid, 'connectivity_feid': connectivity_feid, 'connectivity_type': connectivity_type, 'connectivity_linkid': connectivity_linkid, 'connectivity_moduleid': connectivity_moduleid, 'connectivity_port': connectivity_port, }


