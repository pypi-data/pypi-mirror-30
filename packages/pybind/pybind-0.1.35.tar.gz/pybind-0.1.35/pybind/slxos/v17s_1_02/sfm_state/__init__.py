
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import mcast
import statistics
import links
import queue
import thresholds
import connectivity
import serdesmode
class sfm_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysmgr-operational - based on the path /sfm-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SFM Operational Information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mcast','__statistics','__links','__queue','__thresholds','__connectivity','__serdesmode',)

  _yang_name = 'sfm-state'
  _rest_name = 'sfm-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__statistics = YANGDynClass(base=YANGListType("statistics_sfmid",statistics.statistics, yang_name="statistics", rest_name="statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='statistics-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    self.__links = YANGDynClass(base=YANGListType("links_sfmid",links.links, yang_name="links", rest_name="links", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='links-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}), is_container='list', yang_name="links", rest_name="links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    self.__thresholds = YANGDynClass(base=YANGListType("thresholds_sfmid",thresholds.thresholds, yang_name="thresholds", rest_name="thresholds", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='thresholds-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}), is_container='list', yang_name="thresholds", rest_name="thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    self.__mcast = YANGDynClass(base=YANGListType("mcastid",mcast.mcast, yang_name="mcast", rest_name="mcast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcastid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mcast", rest_name="mcast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    self.__queue = YANGDynClass(base=YANGListType("queue_sfmid",queue.queue, yang_name="queue", rest_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='queue-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}), is_container='list', yang_name="queue", rest_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    self.__connectivity = YANGDynClass(base=YANGListType("connectivity_sfmid",connectivity.connectivity, yang_name="connectivity", rest_name="connectivity", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='connectivity-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}), is_container='list', yang_name="connectivity", rest_name="connectivity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    self.__serdesmode = YANGDynClass(base=YANGListType("serdesmode_sfmid",serdesmode.serdesmode, yang_name="serdesmode", rest_name="serdesmode", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serdesmode-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}), is_container='list', yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sfm-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'sfm-state']

  def _get_mcast(self):
    """
    Getter method for mcast, mapped from YANG variable /sfm_state/mcast (list)

    YANG Description: MCAST Operational Information
    """
    return self.__mcast
      
  def _set_mcast(self, v, load=False):
    """
    Setter method for mcast, mapped from YANG variable /sfm_state/mcast (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mcast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mcast() directly.

    YANG Description: MCAST Operational Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("mcastid",mcast.mcast, yang_name="mcast", rest_name="mcast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcastid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mcast", rest_name="mcast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mcast must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mcastid",mcast.mcast, yang_name="mcast", rest_name="mcast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcastid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mcast", rest_name="mcast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__mcast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mcast(self):
    self.__mcast = YANGDynClass(base=YANGListType("mcastid",mcast.mcast, yang_name="mcast", rest_name="mcast", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcastid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}), is_container='list', yang_name="mcast", rest_name="mcast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-mcast', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)


  def _get_statistics(self):
    """
    Getter method for statistics, mapped from YANG variable /sfm_state/statistics (list)

    YANG Description: SFM Statistics
    """
    return self.__statistics
      
  def _set_statistics(self, v, load=False):
    """
    Setter method for statistics, mapped from YANG variable /sfm_state/statistics (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("statistics_sfmid",statistics.statistics, yang_name="statistics", rest_name="statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='statistics-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("statistics_sfmid",statistics.statistics, yang_name="statistics", rest_name="statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='statistics-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics(self):
    self.__statistics = YANGDynClass(base=YANGListType("statistics_sfmid",statistics.statistics, yang_name="statistics", rest_name="statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='statistics-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)


  def _get_links(self):
    """
    Getter method for links, mapped from YANG variable /sfm_state/links (list)

    YANG Description: SFM Links
    """
    return self.__links
      
  def _set_links(self, v, load=False):
    """
    Setter method for links, mapped from YANG variable /sfm_state/links (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links() directly.

    YANG Description: SFM Links
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("links_sfmid",links.links, yang_name="links", rest_name="links", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='links-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}), is_container='list', yang_name="links", rest_name="links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("links_sfmid",links.links, yang_name="links", rest_name="links", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='links-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}), is_container='list', yang_name="links", rest_name="links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__links = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links(self):
    self.__links = YANGDynClass(base=YANGListType("links_sfmid",links.links, yang_name="links", rest_name="links", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='links-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}), is_container='list', yang_name="links", rest_name="links", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-links', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)


  def _get_queue(self):
    """
    Getter method for queue, mapped from YANG variable /sfm_state/queue (list)

    YANG Description: SFM Queue
    """
    return self.__queue
      
  def _set_queue(self, v, load=False):
    """
    Setter method for queue, mapped from YANG variable /sfm_state/queue (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue() directly.

    YANG Description: SFM Queue
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("queue_sfmid",queue.queue, yang_name="queue", rest_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='queue-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}), is_container='list', yang_name="queue", rest_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("queue_sfmid",queue.queue, yang_name="queue", rest_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='queue-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}), is_container='list', yang_name="queue", rest_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__queue = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue(self):
    self.__queue = YANGDynClass(base=YANGListType("queue_sfmid",queue.queue, yang_name="queue", rest_name="queue", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='queue-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}), is_container='list', yang_name="queue", rest_name="queue", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-queue', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)


  def _get_thresholds(self):
    """
    Getter method for thresholds, mapped from YANG variable /sfm_state/thresholds (list)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds
      
  def _set_thresholds(self, v, load=False):
    """
    Setter method for thresholds, mapped from YANG variable /sfm_state/thresholds (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("thresholds_sfmid",thresholds.thresholds, yang_name="thresholds", rest_name="thresholds", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='thresholds-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}), is_container='list', yang_name="thresholds", rest_name="thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("thresholds_sfmid",thresholds.thresholds, yang_name="thresholds", rest_name="thresholds", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='thresholds-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}), is_container='list', yang_name="thresholds", rest_name="thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__thresholds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds(self):
    self.__thresholds = YANGDynClass(base=YANGListType("thresholds_sfmid",thresholds.thresholds, yang_name="thresholds", rest_name="thresholds", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='thresholds-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}), is_container='list', yang_name="thresholds", rest_name="thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-thresholds', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)


  def _get_connectivity(self):
    """
    Getter method for connectivity, mapped from YANG variable /sfm_state/connectivity (list)

    YANG Description: SFM Links Connectivity
    """
    return self.__connectivity
      
  def _set_connectivity(self, v, load=False):
    """
    Setter method for connectivity, mapped from YANG variable /sfm_state/connectivity (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_connectivity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_connectivity() directly.

    YANG Description: SFM Links Connectivity
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("connectivity_sfmid",connectivity.connectivity, yang_name="connectivity", rest_name="connectivity", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='connectivity-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}), is_container='list', yang_name="connectivity", rest_name="connectivity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """connectivity must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("connectivity_sfmid",connectivity.connectivity, yang_name="connectivity", rest_name="connectivity", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='connectivity-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}), is_container='list', yang_name="connectivity", rest_name="connectivity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__connectivity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_connectivity(self):
    self.__connectivity = YANGDynClass(base=YANGListType("connectivity_sfmid",connectivity.connectivity, yang_name="connectivity", rest_name="connectivity", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='connectivity-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}), is_container='list', yang_name="connectivity", rest_name="connectivity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-connectivity', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)


  def _get_serdesmode(self):
    """
    Getter method for serdesmode, mapped from YANG variable /sfm_state/serdesmode (list)

    YANG Description: SFM Serdes Mode
    """
    return self.__serdesmode
      
  def _set_serdesmode(self, v, load=False):
    """
    Setter method for serdesmode, mapped from YANG variable /sfm_state/serdesmode (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_serdesmode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_serdesmode() directly.

    YANG Description: SFM Serdes Mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("serdesmode_sfmid",serdesmode.serdesmode, yang_name="serdesmode", rest_name="serdesmode", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serdesmode-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}), is_container='list', yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """serdesmode must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("serdesmode_sfmid",serdesmode.serdesmode, yang_name="serdesmode", rest_name="serdesmode", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serdesmode-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}), is_container='list', yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)""",
        })

    self.__serdesmode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_serdesmode(self):
    self.__serdesmode = YANGDynClass(base=YANGListType("serdesmode_sfmid",serdesmode.serdesmode, yang_name="serdesmode", rest_name="serdesmode", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='serdesmode-sfmid', extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}), is_container='list', yang_name="serdesmode", rest_name="serdesmode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'sysmgr-serdesmode', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='list', is_config=False)

  mcast = __builtin__.property(_get_mcast)
  statistics = __builtin__.property(_get_statistics)
  links = __builtin__.property(_get_links)
  queue = __builtin__.property(_get_queue)
  thresholds = __builtin__.property(_get_thresholds)
  connectivity = __builtin__.property(_get_connectivity)
  serdesmode = __builtin__.property(_get_serdesmode)


  _pyangbind_elements = {'mcast': mcast, 'statistics': statistics, 'links': links, 'queue': queue, 'thresholds': thresholds, 'connectivity': connectivity, 'serdesmode': serdesmode, }


