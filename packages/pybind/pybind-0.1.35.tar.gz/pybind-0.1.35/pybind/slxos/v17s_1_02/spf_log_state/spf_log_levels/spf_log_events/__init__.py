
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class spf_log_events(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /spf-log-state/spf-log-levels/spf-log-events. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SPF Log event
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__spf_log_index','__isis_spf_log_reason','__isis_lsp_name','__brief_reason','__event_count','__node_count','__time_stamp_ms','__duration_ms','__ipv4_routes','__ipv6_routes','__first_trigger_change','__first_trigger_time_stamp_ms','__first_trigger_detail_reason','__last_trigger_change','__last_trigger_time_stamp_ms','__last_trigger_detail_reason',)

  _yang_name = 'spf-log-events'
  _rest_name = 'spf-log-events'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__last_trigger_time_stamp_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-trigger-time-stamp-ms", rest_name="last-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__time_stamp_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="time-stamp-ms", rest_name="time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__event_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="event-count", rest_name="event-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__isis_spf_log_reason = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-spf-reason-clear-route': {'value': 33}, u'isis-spf-reason-ispf': {'value': 41}, u'isis-spf-reason-multi-topo-config-change': {'value': 48}, u'isis-spf-reason-build-table': {'value': 2}, u'isis-spf-reason-isis-port-cfg': {'value': 37}, u'isis-spf-reason-redis-policy-change': {'value': 30}, u'isis-spf-reason-ipv4-bfd-down': {'value': 45}, u'isis-spf-reason-ipv4-alt': {'value': 3}, u'isis-spf-reason-ipv6-max-paths': {'value': 47}, u'isis-spf-reason-rtm-ecmp-change': {'value': 32}, u'isis-spf-reason-adj-state-chg': {'value': 12}, u'isis-spf-reason-overload-exit': {'value': 39}, u'isis-spf-reason-ipv6-traverse': {'value': 6}, u'isis-spf-reason-level-change': {'value': 21}, u'isis-spf-reason-ipv6-bfd-down': {'value': 46}, u'isis-spf-reason-none': {'value': 0}, u'isis-spf-reason-adj-change': {'value': 17}, u'isis-spf-reason-summary-addr-chg': {'value': 11}, u'isis-spf-reason-lsp-header': {'value': 15}, u'isis-spf-reason-kickall': {'value': 1}, u'isis-spf-reason-ipv6-alt': {'value': 5}, u'isis-spf-reason-nlpid-change': {'value': 35}, u'isis-spf-reason-build-plsp-nondis': {'value': 9}, u'isis-spf-reason-router-enable': {'value': 36}, u'isis-spf-reason-tlv-change': {'value': 24}, u'isis-spf-reason-recal-interlevel-route': {'value': 40}, u'isis-spf-reason-lsp-db-clear': {'value': 22}, u'isis-spf-reason-pspf-new-lsp': {'value': 8}, u'isis-spf-reason-ipv6addr-change': {'value': 20}, u'isis-spf-reason-attflag': {'value': 13}, u'isis-spf-reason-tlv-content-change': {'value': 25}, u'isis-spf-reason-ipaddr-change': {'value': 19}, u'isis-spf-reason-pspf-purge-lsp': {'value': 7}, u'isis-spf-reason-build-plsp': {'value': 10}, u'isis-spf-reason-tnl-state-chg': {'value': 42}, u'isis-spf-reason-clear-all-route': {'value': 34}, u'isis-spf-reason-ipaddr-cfg-change': {'value': 16}, u'isis-spf-reason-ip6metric-change': {'value': 43}, u'isis-spf-reason-redis-list-change': {'value': 29}, u'isis-spf-reason-istct-spf': {'value': 44}, u'isis-spf-reason-circ-change': {'value': 28}, u'isis-spf-reason-max-paths': {'value': 31}, u'isis-spf-reason-ipv4-traverse': {'value': 4}, u'isis-spf-reason-metric-change': {'value': 23}, u'isis-spf-reason-pspf-not-enable': {'value': 26}, u'isis-spf-reason-admin-dist': {'value': 14}, u'isis-spf-reason-user-trig': {'value': 38}, u'isis-spf-reason-overload': {'value': 27}, u'isis-spf-reason-area-change': {'value': 18}},), is_leaf=True, yang_name="isis-spf-log-reason", rest_name="isis-spf-log-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-log-reason-code', is_config=False)
    self.__spf_log_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="spf-log-index", rest_name="spf-log-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__ipv6_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__brief_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="brief-reason", rest_name="brief-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__first_trigger_time_stamp_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="first-trigger-time-stamp-ms", rest_name="first-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__ipv4_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__first_trigger_change = YANGDynClass(base=unicode, is_leaf=True, yang_name="first-trigger-change", rest_name="first-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__first_trigger_detail_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="first-trigger-detail-reason", rest_name="first-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__isis_lsp_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="isis-lsp-name", rest_name="isis-lsp-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__duration_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="duration-ms", rest_name="duration-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__node_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-count", rest_name="node-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__last_trigger_detail_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-trigger-detail-reason", rest_name="last-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__last_trigger_change = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-trigger-change", rest_name="last-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'spf-log-state', u'spf-log-levels', u'spf-log-events']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'spf-log-state', u'spf-log-levels', u'spf-log-events']

  def _get_spf_log_index(self):
    """
    Getter method for spf_log_index, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/spf_log_index (uint16)

    YANG Description: SPF LOG event Index
    """
    return self.__spf_log_index
      
  def _set_spf_log_index(self, v, load=False):
    """
    Setter method for spf_log_index, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/spf_log_index (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_log_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_log_index() directly.

    YANG Description: SPF LOG event Index
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="spf-log-index", rest_name="spf-log-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_log_index must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="spf-log-index", rest_name="spf-log-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__spf_log_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_log_index(self):
    self.__spf_log_index = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="spf-log-index", rest_name="spf-log-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_isis_spf_log_reason(self):
    """
    Getter method for isis_spf_log_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/isis_spf_log_reason (isis-spf-log-reason-code)

    YANG Description: ISIS SPF reason code for event
    """
    return self.__isis_spf_log_reason
      
  def _set_isis_spf_log_reason(self, v, load=False):
    """
    Setter method for isis_spf_log_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/isis_spf_log_reason (isis-spf-log-reason-code)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_spf_log_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_spf_log_reason() directly.

    YANG Description: ISIS SPF reason code for event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-spf-reason-clear-route': {'value': 33}, u'isis-spf-reason-ispf': {'value': 41}, u'isis-spf-reason-multi-topo-config-change': {'value': 48}, u'isis-spf-reason-build-table': {'value': 2}, u'isis-spf-reason-isis-port-cfg': {'value': 37}, u'isis-spf-reason-redis-policy-change': {'value': 30}, u'isis-spf-reason-ipv4-bfd-down': {'value': 45}, u'isis-spf-reason-ipv4-alt': {'value': 3}, u'isis-spf-reason-ipv6-max-paths': {'value': 47}, u'isis-spf-reason-rtm-ecmp-change': {'value': 32}, u'isis-spf-reason-adj-state-chg': {'value': 12}, u'isis-spf-reason-overload-exit': {'value': 39}, u'isis-spf-reason-ipv6-traverse': {'value': 6}, u'isis-spf-reason-level-change': {'value': 21}, u'isis-spf-reason-ipv6-bfd-down': {'value': 46}, u'isis-spf-reason-none': {'value': 0}, u'isis-spf-reason-adj-change': {'value': 17}, u'isis-spf-reason-summary-addr-chg': {'value': 11}, u'isis-spf-reason-lsp-header': {'value': 15}, u'isis-spf-reason-kickall': {'value': 1}, u'isis-spf-reason-ipv6-alt': {'value': 5}, u'isis-spf-reason-nlpid-change': {'value': 35}, u'isis-spf-reason-build-plsp-nondis': {'value': 9}, u'isis-spf-reason-router-enable': {'value': 36}, u'isis-spf-reason-tlv-change': {'value': 24}, u'isis-spf-reason-recal-interlevel-route': {'value': 40}, u'isis-spf-reason-lsp-db-clear': {'value': 22}, u'isis-spf-reason-pspf-new-lsp': {'value': 8}, u'isis-spf-reason-ipv6addr-change': {'value': 20}, u'isis-spf-reason-attflag': {'value': 13}, u'isis-spf-reason-tlv-content-change': {'value': 25}, u'isis-spf-reason-ipaddr-change': {'value': 19}, u'isis-spf-reason-pspf-purge-lsp': {'value': 7}, u'isis-spf-reason-build-plsp': {'value': 10}, u'isis-spf-reason-tnl-state-chg': {'value': 42}, u'isis-spf-reason-clear-all-route': {'value': 34}, u'isis-spf-reason-ipaddr-cfg-change': {'value': 16}, u'isis-spf-reason-ip6metric-change': {'value': 43}, u'isis-spf-reason-redis-list-change': {'value': 29}, u'isis-spf-reason-istct-spf': {'value': 44}, u'isis-spf-reason-circ-change': {'value': 28}, u'isis-spf-reason-max-paths': {'value': 31}, u'isis-spf-reason-ipv4-traverse': {'value': 4}, u'isis-spf-reason-metric-change': {'value': 23}, u'isis-spf-reason-pspf-not-enable': {'value': 26}, u'isis-spf-reason-admin-dist': {'value': 14}, u'isis-spf-reason-user-trig': {'value': 38}, u'isis-spf-reason-overload': {'value': 27}, u'isis-spf-reason-area-change': {'value': 18}},), is_leaf=True, yang_name="isis-spf-log-reason", rest_name="isis-spf-log-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-log-reason-code', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_spf_log_reason must be of a type compatible with isis-spf-log-reason-code""",
          'defined-type': "brocade-isis-operational:isis-spf-log-reason-code",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-spf-reason-clear-route': {'value': 33}, u'isis-spf-reason-ispf': {'value': 41}, u'isis-spf-reason-multi-topo-config-change': {'value': 48}, u'isis-spf-reason-build-table': {'value': 2}, u'isis-spf-reason-isis-port-cfg': {'value': 37}, u'isis-spf-reason-redis-policy-change': {'value': 30}, u'isis-spf-reason-ipv4-bfd-down': {'value': 45}, u'isis-spf-reason-ipv4-alt': {'value': 3}, u'isis-spf-reason-ipv6-max-paths': {'value': 47}, u'isis-spf-reason-rtm-ecmp-change': {'value': 32}, u'isis-spf-reason-adj-state-chg': {'value': 12}, u'isis-spf-reason-overload-exit': {'value': 39}, u'isis-spf-reason-ipv6-traverse': {'value': 6}, u'isis-spf-reason-level-change': {'value': 21}, u'isis-spf-reason-ipv6-bfd-down': {'value': 46}, u'isis-spf-reason-none': {'value': 0}, u'isis-spf-reason-adj-change': {'value': 17}, u'isis-spf-reason-summary-addr-chg': {'value': 11}, u'isis-spf-reason-lsp-header': {'value': 15}, u'isis-spf-reason-kickall': {'value': 1}, u'isis-spf-reason-ipv6-alt': {'value': 5}, u'isis-spf-reason-nlpid-change': {'value': 35}, u'isis-spf-reason-build-plsp-nondis': {'value': 9}, u'isis-spf-reason-router-enable': {'value': 36}, u'isis-spf-reason-tlv-change': {'value': 24}, u'isis-spf-reason-recal-interlevel-route': {'value': 40}, u'isis-spf-reason-lsp-db-clear': {'value': 22}, u'isis-spf-reason-pspf-new-lsp': {'value': 8}, u'isis-spf-reason-ipv6addr-change': {'value': 20}, u'isis-spf-reason-attflag': {'value': 13}, u'isis-spf-reason-tlv-content-change': {'value': 25}, u'isis-spf-reason-ipaddr-change': {'value': 19}, u'isis-spf-reason-pspf-purge-lsp': {'value': 7}, u'isis-spf-reason-build-plsp': {'value': 10}, u'isis-spf-reason-tnl-state-chg': {'value': 42}, u'isis-spf-reason-clear-all-route': {'value': 34}, u'isis-spf-reason-ipaddr-cfg-change': {'value': 16}, u'isis-spf-reason-ip6metric-change': {'value': 43}, u'isis-spf-reason-redis-list-change': {'value': 29}, u'isis-spf-reason-istct-spf': {'value': 44}, u'isis-spf-reason-circ-change': {'value': 28}, u'isis-spf-reason-max-paths': {'value': 31}, u'isis-spf-reason-ipv4-traverse': {'value': 4}, u'isis-spf-reason-metric-change': {'value': 23}, u'isis-spf-reason-pspf-not-enable': {'value': 26}, u'isis-spf-reason-admin-dist': {'value': 14}, u'isis-spf-reason-user-trig': {'value': 38}, u'isis-spf-reason-overload': {'value': 27}, u'isis-spf-reason-area-change': {'value': 18}},), is_leaf=True, yang_name="isis-spf-log-reason", rest_name="isis-spf-log-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-log-reason-code', is_config=False)""",
        })

    self.__isis_spf_log_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_spf_log_reason(self):
    self.__isis_spf_log_reason = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'isis-spf-reason-clear-route': {'value': 33}, u'isis-spf-reason-ispf': {'value': 41}, u'isis-spf-reason-multi-topo-config-change': {'value': 48}, u'isis-spf-reason-build-table': {'value': 2}, u'isis-spf-reason-isis-port-cfg': {'value': 37}, u'isis-spf-reason-redis-policy-change': {'value': 30}, u'isis-spf-reason-ipv4-bfd-down': {'value': 45}, u'isis-spf-reason-ipv4-alt': {'value': 3}, u'isis-spf-reason-ipv6-max-paths': {'value': 47}, u'isis-spf-reason-rtm-ecmp-change': {'value': 32}, u'isis-spf-reason-adj-state-chg': {'value': 12}, u'isis-spf-reason-overload-exit': {'value': 39}, u'isis-spf-reason-ipv6-traverse': {'value': 6}, u'isis-spf-reason-level-change': {'value': 21}, u'isis-spf-reason-ipv6-bfd-down': {'value': 46}, u'isis-spf-reason-none': {'value': 0}, u'isis-spf-reason-adj-change': {'value': 17}, u'isis-spf-reason-summary-addr-chg': {'value': 11}, u'isis-spf-reason-lsp-header': {'value': 15}, u'isis-spf-reason-kickall': {'value': 1}, u'isis-spf-reason-ipv6-alt': {'value': 5}, u'isis-spf-reason-nlpid-change': {'value': 35}, u'isis-spf-reason-build-plsp-nondis': {'value': 9}, u'isis-spf-reason-router-enable': {'value': 36}, u'isis-spf-reason-tlv-change': {'value': 24}, u'isis-spf-reason-recal-interlevel-route': {'value': 40}, u'isis-spf-reason-lsp-db-clear': {'value': 22}, u'isis-spf-reason-pspf-new-lsp': {'value': 8}, u'isis-spf-reason-ipv6addr-change': {'value': 20}, u'isis-spf-reason-attflag': {'value': 13}, u'isis-spf-reason-tlv-content-change': {'value': 25}, u'isis-spf-reason-ipaddr-change': {'value': 19}, u'isis-spf-reason-pspf-purge-lsp': {'value': 7}, u'isis-spf-reason-build-plsp': {'value': 10}, u'isis-spf-reason-tnl-state-chg': {'value': 42}, u'isis-spf-reason-clear-all-route': {'value': 34}, u'isis-spf-reason-ipaddr-cfg-change': {'value': 16}, u'isis-spf-reason-ip6metric-change': {'value': 43}, u'isis-spf-reason-redis-list-change': {'value': 29}, u'isis-spf-reason-istct-spf': {'value': 44}, u'isis-spf-reason-circ-change': {'value': 28}, u'isis-spf-reason-max-paths': {'value': 31}, u'isis-spf-reason-ipv4-traverse': {'value': 4}, u'isis-spf-reason-metric-change': {'value': 23}, u'isis-spf-reason-pspf-not-enable': {'value': 26}, u'isis-spf-reason-admin-dist': {'value': 14}, u'isis-spf-reason-user-trig': {'value': 38}, u'isis-spf-reason-overload': {'value': 27}, u'isis-spf-reason-area-change': {'value': 18}},), is_leaf=True, yang_name="isis-spf-log-reason", rest_name="isis-spf-log-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-log-reason-code', is_config=False)


  def _get_isis_lsp_name(self):
    """
    Getter method for isis_lsp_name, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/isis_lsp_name (string)

    YANG Description: ISIS SPF LSP Name
    """
    return self.__isis_lsp_name
      
  def _set_isis_lsp_name(self, v, load=False):
    """
    Setter method for isis_lsp_name, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/isis_lsp_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_lsp_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_lsp_name() directly.

    YANG Description: ISIS SPF LSP Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="isis-lsp-name", rest_name="isis-lsp-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_lsp_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="isis-lsp-name", rest_name="isis-lsp-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__isis_lsp_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_lsp_name(self):
    self.__isis_lsp_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="isis-lsp-name", rest_name="isis-lsp-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_brief_reason(self):
    """
    Getter method for brief_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/brief_reason (string)

    YANG Description: ISIS SPF reason
    """
    return self.__brief_reason
      
  def _set_brief_reason(self, v, load=False):
    """
    Setter method for brief_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/brief_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_brief_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_brief_reason() directly.

    YANG Description: ISIS SPF reason
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="brief-reason", rest_name="brief-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """brief_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="brief-reason", rest_name="brief-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__brief_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_brief_reason(self):
    self.__brief_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="brief-reason", rest_name="brief-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_event_count(self):
    """
    Getter method for event_count, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/event_count (uint16)
    """
    return self.__event_count
      
  def _set_event_count(self, v, load=False):
    """
    Setter method for event_count, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/event_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_event_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_event_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="event-count", rest_name="event-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """event_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="event-count", rest_name="event-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__event_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_event_count(self):
    self.__event_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="event-count", rest_name="event-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_node_count(self):
    """
    Getter method for node_count, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/node_count (uint16)
    """
    return self.__node_count
      
  def _set_node_count(self, v, load=False):
    """
    Setter method for node_count, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/node_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-count", rest_name="node-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-count", rest_name="node-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__node_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_count(self):
    self.__node_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-count", rest_name="node-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_time_stamp_ms(self):
    """
    Getter method for time_stamp_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/time_stamp_ms (uint32)

    YANG Description: Time stamp in hundred millisecond
    """
    return self.__time_stamp_ms
      
  def _set_time_stamp_ms(self, v, load=False):
    """
    Setter method for time_stamp_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/time_stamp_ms (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_stamp_ms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_stamp_ms() directly.

    YANG Description: Time stamp in hundred millisecond
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="time-stamp-ms", rest_name="time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_stamp_ms must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="time-stamp-ms", rest_name="time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__time_stamp_ms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_stamp_ms(self):
    self.__time_stamp_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="time-stamp-ms", rest_name="time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_duration_ms(self):
    """
    Getter method for duration_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/duration_ms (uint32)

    YANG Description: SPF run time
    """
    return self.__duration_ms
      
  def _set_duration_ms(self, v, load=False):
    """
    Setter method for duration_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/duration_ms (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_duration_ms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_duration_ms() directly.

    YANG Description: SPF run time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="duration-ms", rest_name="duration-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """duration_ms must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="duration-ms", rest_name="duration-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__duration_ms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_duration_ms(self):
    self.__duration_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="duration-ms", rest_name="duration-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_ipv4_routes(self):
    """
    Getter method for ipv4_routes, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/ipv4_routes (uint32)
    """
    return self.__ipv4_routes
      
  def _set_ipv4_routes(self, v, load=False):
    """
    Setter method for ipv4_routes, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/ipv4_routes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4_routes() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4_routes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ipv4_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4_routes(self):
    self.__ipv4_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_ipv6_routes(self):
    """
    Getter method for ipv6_routes, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/ipv6_routes (uint32)
    """
    return self.__ipv6_routes
      
  def _set_ipv6_routes(self, v, load=False):
    """
    Setter method for ipv6_routes, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/ipv6_routes (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6_routes() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6_routes must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ipv6_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6_routes(self):
    self.__ipv6_routes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_first_trigger_change(self):
    """
    Getter method for first_trigger_change, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/first_trigger_change (string)

    YANG Description: Add, delete or modify event
    """
    return self.__first_trigger_change
      
  def _set_first_trigger_change(self, v, load=False):
    """
    Setter method for first_trigger_change, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/first_trigger_change (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_first_trigger_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_first_trigger_change() directly.

    YANG Description: Add, delete or modify event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="first-trigger-change", rest_name="first-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """first_trigger_change must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="first-trigger-change", rest_name="first-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__first_trigger_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_first_trigger_change(self):
    self.__first_trigger_change = YANGDynClass(base=unicode, is_leaf=True, yang_name="first-trigger-change", rest_name="first-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_first_trigger_time_stamp_ms(self):
    """
    Getter method for first_trigger_time_stamp_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/first_trigger_time_stamp_ms (uint32)

    YANG Description: Time stamp in hundred millisecond
    """
    return self.__first_trigger_time_stamp_ms
      
  def _set_first_trigger_time_stamp_ms(self, v, load=False):
    """
    Setter method for first_trigger_time_stamp_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/first_trigger_time_stamp_ms (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_first_trigger_time_stamp_ms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_first_trigger_time_stamp_ms() directly.

    YANG Description: Time stamp in hundred millisecond
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="first-trigger-time-stamp-ms", rest_name="first-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """first_trigger_time_stamp_ms must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="first-trigger-time-stamp-ms", rest_name="first-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__first_trigger_time_stamp_ms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_first_trigger_time_stamp_ms(self):
    self.__first_trigger_time_stamp_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="first-trigger-time-stamp-ms", rest_name="first-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_first_trigger_detail_reason(self):
    """
    Getter method for first_trigger_detail_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/first_trigger_detail_reason (string)

    YANG Description: Decoded reason for the event
    """
    return self.__first_trigger_detail_reason
      
  def _set_first_trigger_detail_reason(self, v, load=False):
    """
    Setter method for first_trigger_detail_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/first_trigger_detail_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_first_trigger_detail_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_first_trigger_detail_reason() directly.

    YANG Description: Decoded reason for the event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="first-trigger-detail-reason", rest_name="first-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """first_trigger_detail_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="first-trigger-detail-reason", rest_name="first-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__first_trigger_detail_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_first_trigger_detail_reason(self):
    self.__first_trigger_detail_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="first-trigger-detail-reason", rest_name="first-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_last_trigger_change(self):
    """
    Getter method for last_trigger_change, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/last_trigger_change (string)

    YANG Description: Add, delete or modify event
    """
    return self.__last_trigger_change
      
  def _set_last_trigger_change(self, v, load=False):
    """
    Setter method for last_trigger_change, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/last_trigger_change (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_trigger_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_trigger_change() directly.

    YANG Description: Add, delete or modify event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-trigger-change", rest_name="last-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_trigger_change must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-trigger-change", rest_name="last-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__last_trigger_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_trigger_change(self):
    self.__last_trigger_change = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-trigger-change", rest_name="last-trigger-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_last_trigger_time_stamp_ms(self):
    """
    Getter method for last_trigger_time_stamp_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/last_trigger_time_stamp_ms (uint32)

    YANG Description: Time stamp in hundred millisecond
    """
    return self.__last_trigger_time_stamp_ms
      
  def _set_last_trigger_time_stamp_ms(self, v, load=False):
    """
    Setter method for last_trigger_time_stamp_ms, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/last_trigger_time_stamp_ms (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_trigger_time_stamp_ms is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_trigger_time_stamp_ms() directly.

    YANG Description: Time stamp in hundred millisecond
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-trigger-time-stamp-ms", rest_name="last-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_trigger_time_stamp_ms must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-trigger-time-stamp-ms", rest_name="last-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__last_trigger_time_stamp_ms = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_trigger_time_stamp_ms(self):
    self.__last_trigger_time_stamp_ms = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-trigger-time-stamp-ms", rest_name="last-trigger-time-stamp-ms", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_last_trigger_detail_reason(self):
    """
    Getter method for last_trigger_detail_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/last_trigger_detail_reason (string)

    YANG Description: Decoded reason for the event
    """
    return self.__last_trigger_detail_reason
      
  def _set_last_trigger_detail_reason(self, v, load=False):
    """
    Setter method for last_trigger_detail_reason, mapped from YANG variable /spf_log_state/spf_log_levels/spf_log_events/last_trigger_detail_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_trigger_detail_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_trigger_detail_reason() directly.

    YANG Description: Decoded reason for the event
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-trigger-detail-reason", rest_name="last-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_trigger_detail_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-trigger-detail-reason", rest_name="last-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__last_trigger_detail_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_trigger_detail_reason(self):
    self.__last_trigger_detail_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-trigger-detail-reason", rest_name="last-trigger-detail-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)

  spf_log_index = __builtin__.property(_get_spf_log_index)
  isis_spf_log_reason = __builtin__.property(_get_isis_spf_log_reason)
  isis_lsp_name = __builtin__.property(_get_isis_lsp_name)
  brief_reason = __builtin__.property(_get_brief_reason)
  event_count = __builtin__.property(_get_event_count)
  node_count = __builtin__.property(_get_node_count)
  time_stamp_ms = __builtin__.property(_get_time_stamp_ms)
  duration_ms = __builtin__.property(_get_duration_ms)
  ipv4_routes = __builtin__.property(_get_ipv4_routes)
  ipv6_routes = __builtin__.property(_get_ipv6_routes)
  first_trigger_change = __builtin__.property(_get_first_trigger_change)
  first_trigger_time_stamp_ms = __builtin__.property(_get_first_trigger_time_stamp_ms)
  first_trigger_detail_reason = __builtin__.property(_get_first_trigger_detail_reason)
  last_trigger_change = __builtin__.property(_get_last_trigger_change)
  last_trigger_time_stamp_ms = __builtin__.property(_get_last_trigger_time_stamp_ms)
  last_trigger_detail_reason = __builtin__.property(_get_last_trigger_detail_reason)


  _pyangbind_elements = {'spf_log_index': spf_log_index, 'isis_spf_log_reason': isis_spf_log_reason, 'isis_lsp_name': isis_lsp_name, 'brief_reason': brief_reason, 'event_count': event_count, 'node_count': node_count, 'time_stamp_ms': time_stamp_ms, 'duration_ms': duration_ms, 'ipv4_routes': ipv4_routes, 'ipv6_routes': ipv6_routes, 'first_trigger_change': first_trigger_change, 'first_trigger_time_stamp_ms': first_trigger_time_stamp_ms, 'first_trigger_detail_reason': first_trigger_detail_reason, 'last_trigger_change': last_trigger_change, 'last_trigger_time_stamp_ms': last_trigger_time_stamp_ms, 'last_trigger_detail_reason': last_trigger_detail_reason, }


