
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import ldp
import summary
import memory
import policy
import rsvp
import dynamic_bypass
import te
import autobw_threshold_table_summary
import statistics_oam
import bfd
import interface
import path
import auto_bandwidth_template
import autobw_threshold_table_entry
import lsp
import forwarding_entry
import route
import tunnel_traffic_statistics
import transit_traffic_statistics
class mpls_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS Operational Information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ldp','__summary','__memory','__policy','__rsvp','__dynamic_bypass','__te','__autobw_threshold_table_summary','__statistics_oam','__bfd','__interface','__path','__auto_bandwidth_template','__autobw_threshold_table_entry','__lsp','__forwarding_entry','__route','__tunnel_traffic_statistics','__transit_traffic_statistics',)

  _yang_name = 'mpls-state'
  _rest_name = 'mpls-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__autobw_threshold_table_entry = YANGDynClass(base=YANGListType("bandwidth",autobw_threshold_table_entry.autobw_threshold_table_entry, yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bandwidth', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__statistics_oam = YANGDynClass(base=statistics_oam.statistics_oam, is_container='container', presence=False, yang_name="statistics-oam", rest_name="statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-statistics-oam', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__lsp = YANGDynClass(base=YANGListType("lsp_name",lsp.lsp, yang_name="lsp", rest_name="lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp", rest_name="lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__bfd = YANGDynClass(base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-bfd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__forwarding_entry = YANGDynClass(base=YANGListType("entry_index sync_index",forwarding_entry.forwarding_entry, yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index sync-index', extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__transit_traffic_statistics = YANGDynClass(base=YANGListType("in_label",transit_traffic_statistics.transit_traffic_statistics, yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='in-label', extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__route = YANGDynClass(base=YANGListType("entry_index",route.route, yang_name="route", rest_name="route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index', extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}), is_container='list', yang_name="route", rest_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__tunnel_traffic_statistics = YANGDynClass(base=YANGListType("index",tunnel_traffic_statistics.tunnel_traffic_statistics, yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='index', extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__summary = YANGDynClass(base=summary.summary, is_container='container', presence=False, yang_name="summary", rest_name="summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__interface = YANGDynClass(base=YANGListType("interface_index",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-index', extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__ldp = YANGDynClass(base=ldp.ldp, is_container='container', presence=False, yang_name="ldp", rest_name="ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__auto_bandwidth_template = YANGDynClass(base=YANGListType("name",auto_bandwidth_template.auto_bandwidth_template, yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__autobw_threshold_table_summary = YANGDynClass(base=autobw_threshold_table_summary.autobw_threshold_table_summary, is_container='container', presence=False, yang_name="autobw-threshold-table-summary", rest_name="autobw-threshold-table-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__memory = YANGDynClass(base=memory.memory, is_container='container', presence=False, yang_name="memory", rest_name="memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-memory', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__policy = YANGDynClass(base=policy.policy, is_container='container', presence=False, yang_name="policy", rest_name="policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-policy', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__path = YANGDynClass(base=YANGListType("path_name",path.path, yang_name="path", rest_name="path", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='path-name', extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}), is_container='list', yang_name="path", rest_name="path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__te = YANGDynClass(base=te.te, is_container='container', presence=False, yang_name="te", rest_name="te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-te', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__dynamic_bypass = YANGDynClass(base=dynamic_bypass.dynamic_bypass, is_container='container', presence=False, yang_name="dynamic-bypass", rest_name="dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-dynamic-bypass', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__rsvp = YANGDynClass(base=rsvp.rsvp, is_container='container', presence=False, yang_name="rsvp", rest_name="rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state']

  def _get_ldp(self):
    """
    Getter method for ldp, mapped from YANG variable /mpls_state/ldp (container)

    YANG Description: LDP Operational Information
    """
    return self.__ldp
      
  def _set_ldp(self, v, load=False):
    """
    Setter method for ldp, mapped from YANG variable /mpls_state/ldp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp() directly.

    YANG Description: LDP Operational Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ldp.ldp, is_container='container', presence=False, yang_name="ldp", rest_name="ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ldp.ldp, is_container='container', presence=False, yang_name="ldp", rest_name="ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__ldp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp(self):
    self.__ldp = YANGDynClass(base=ldp.ldp, is_container='container', presence=False, yang_name="ldp", rest_name="ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_summary(self):
    """
    Getter method for summary, mapped from YANG variable /mpls_state/summary (container)

    YANG Description: MPLS Summary
    """
    return self.__summary
      
  def _set_summary(self, v, load=False):
    """
    Setter method for summary, mapped from YANG variable /mpls_state/summary (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary() directly.

    YANG Description: MPLS Summary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=summary.summary, is_container='container', presence=False, yang_name="summary", rest_name="summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=summary.summary, is_container='container', presence=False, yang_name="summary", rest_name="summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary(self):
    self.__summary = YANGDynClass(base=summary.summary, is_container='container', presence=False, yang_name="summary", rest_name="summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_memory(self):
    """
    Getter method for memory, mapped from YANG variable /mpls_state/memory (container)

    YANG Description: MPLS memory information
    """
    return self.__memory
      
  def _set_memory(self, v, load=False):
    """
    Setter method for memory, mapped from YANG variable /mpls_state/memory (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_memory() directly.

    YANG Description: MPLS memory information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=memory.memory, is_container='container', presence=False, yang_name="memory", rest_name="memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-memory', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """memory must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=memory.memory, is_container='container', presence=False, yang_name="memory", rest_name="memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-memory', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_memory(self):
    self.__memory = YANGDynClass(base=memory.memory, is_container='container', presence=False, yang_name="memory", rest_name="memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-memory', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_policy(self):
    """
    Getter method for policy, mapped from YANG variable /mpls_state/policy (container)

    YANG Description: MPLS Policy
    """
    return self.__policy
      
  def _set_policy(self, v, load=False):
    """
    Setter method for policy, mapped from YANG variable /mpls_state/policy (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy() directly.

    YANG Description: MPLS Policy
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=policy.policy, is_container='container', presence=False, yang_name="policy", rest_name="policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-policy', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=policy.policy, is_container='container', presence=False, yang_name="policy", rest_name="policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-policy', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy(self):
    self.__policy = YANGDynClass(base=policy.policy, is_container='container', presence=False, yang_name="policy", rest_name="policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-policy', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_rsvp(self):
    """
    Getter method for rsvp, mapped from YANG variable /mpls_state/rsvp (container)

    YANG Description: MPLS RSVP Operational Information
    """
    return self.__rsvp
      
  def _set_rsvp(self, v, load=False):
    """
    Setter method for rsvp, mapped from YANG variable /mpls_state/rsvp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp() directly.

    YANG Description: MPLS RSVP Operational Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rsvp.rsvp, is_container='container', presence=False, yang_name="rsvp", rest_name="rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rsvp.rsvp, is_container='container', presence=False, yang_name="rsvp", rest_name="rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__rsvp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp(self):
    self.__rsvp = YANGDynClass(base=rsvp.rsvp, is_container='container', presence=False, yang_name="rsvp", rest_name="rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_dynamic_bypass(self):
    """
    Getter method for dynamic_bypass, mapped from YANG variable /mpls_state/dynamic_bypass (container)

    YANG Description: MPLS dynamic bypass
    """
    return self.__dynamic_bypass
      
  def _set_dynamic_bypass(self, v, load=False):
    """
    Setter method for dynamic_bypass, mapped from YANG variable /mpls_state/dynamic_bypass (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_bypass() directly.

    YANG Description: MPLS dynamic bypass
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=dynamic_bypass.dynamic_bypass, is_container='container', presence=False, yang_name="dynamic-bypass", rest_name="dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-dynamic-bypass', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_bypass must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=dynamic_bypass.dynamic_bypass, is_container='container', presence=False, yang_name="dynamic-bypass", rest_name="dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-dynamic-bypass', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__dynamic_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_bypass(self):
    self.__dynamic_bypass = YANGDynClass(base=dynamic_bypass.dynamic_bypass, is_container='container', presence=False, yang_name="dynamic-bypass", rest_name="dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-dynamic-bypass', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_te(self):
    """
    Getter method for te, mapped from YANG variable /mpls_state/te (container)

    YANG Description: MPLS Traffic Engineering Operational Information
    """
    return self.__te
      
  def _set_te(self, v, load=False):
    """
    Setter method for te, mapped from YANG variable /mpls_state/te (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_te is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_te() directly.

    YANG Description: MPLS Traffic Engineering Operational Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=te.te, is_container='container', presence=False, yang_name="te", rest_name="te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-te', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """te must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=te.te, is_container='container', presence=False, yang_name="te", rest_name="te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-te', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__te = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_te(self):
    self.__te = YANGDynClass(base=te.te, is_container='container', presence=False, yang_name="te", rest_name="te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-te', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_autobw_threshold_table_summary(self):
    """
    Getter method for autobw_threshold_table_summary, mapped from YANG variable /mpls_state/autobw_threshold_table_summary (container)

    YANG Description: MPLS Auto Bandwidth Threshold TableSummary
    """
    return self.__autobw_threshold_table_summary
      
  def _set_autobw_threshold_table_summary(self, v, load=False):
    """
    Setter method for autobw_threshold_table_summary, mapped from YANG variable /mpls_state/autobw_threshold_table_summary (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_autobw_threshold_table_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_autobw_threshold_table_summary() directly.

    YANG Description: MPLS Auto Bandwidth Threshold TableSummary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=autobw_threshold_table_summary.autobw_threshold_table_summary, is_container='container', presence=False, yang_name="autobw-threshold-table-summary", rest_name="autobw-threshold-table-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """autobw_threshold_table_summary must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=autobw_threshold_table_summary.autobw_threshold_table_summary, is_container='container', presence=False, yang_name="autobw-threshold-table-summary", rest_name="autobw-threshold-table-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__autobw_threshold_table_summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_autobw_threshold_table_summary(self):
    self.__autobw_threshold_table_summary = YANGDynClass(base=autobw_threshold_table_summary.autobw_threshold_table_summary, is_container='container', presence=False, yang_name="autobw-threshold-table-summary", rest_name="autobw-threshold-table-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_statistics_oam(self):
    """
    Getter method for statistics_oam, mapped from YANG variable /mpls_state/statistics_oam (container)

    YANG Description: OAM packet statistics
    """
    return self.__statistics_oam
      
  def _set_statistics_oam(self, v, load=False):
    """
    Setter method for statistics_oam, mapped from YANG variable /mpls_state/statistics_oam (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_oam is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_oam() directly.

    YANG Description: OAM packet statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=statistics_oam.statistics_oam, is_container='container', presence=False, yang_name="statistics-oam", rest_name="statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-statistics-oam', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_oam must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=statistics_oam.statistics_oam, is_container='container', presence=False, yang_name="statistics-oam", rest_name="statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-statistics-oam', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__statistics_oam = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_oam(self):
    self.__statistics_oam = YANGDynClass(base=statistics_oam.statistics_oam, is_container='container', presence=False, yang_name="statistics-oam", rest_name="statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-statistics-oam', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_bfd(self):
    """
    Getter method for bfd, mapped from YANG variable /mpls_state/bfd (container)

    YANG Description: MPLS BFD
    """
    return self.__bfd
      
  def _set_bfd(self, v, load=False):
    """
    Setter method for bfd, mapped from YANG variable /mpls_state/bfd (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd() directly.

    YANG Description: MPLS BFD
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-bfd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-bfd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd(self):
    self.__bfd = YANGDynClass(base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-bfd', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_interface(self):
    """
    Getter method for interface, mapped from YANG variable /mpls_state/interface (list)

    YANG Description: MPLS interface information
    """
    return self.__interface
      
  def _set_interface(self, v, load=False):
    """
    Setter method for interface, mapped from YANG variable /mpls_state/interface (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface() directly.

    YANG Description: MPLS interface information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_index",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-index', extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_index",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-index', extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface(self):
    self.__interface = YANGDynClass(base=YANGListType("interface_index",interface.interface, yang_name="interface", rest_name="interface", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-index', extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interface", rest_name="interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_path(self):
    """
    Getter method for path, mapped from YANG variable /mpls_state/path (list)

    YANG Description: MPLS Path
    """
    return self.__path
      
  def _set_path(self, v, load=False):
    """
    Setter method for path, mapped from YANG variable /mpls_state/path (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path() directly.

    YANG Description: MPLS Path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("path_name",path.path, yang_name="path", rest_name="path", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='path-name', extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}), is_container='list', yang_name="path", rest_name="path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("path_name",path.path, yang_name="path", rest_name="path", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='path-name', extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}), is_container='list', yang_name="path", rest_name="path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path(self):
    self.__path = YANGDynClass(base=YANGListType("path_name",path.path, yang_name="path", rest_name="path", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='path-name', extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}), is_container='list', yang_name="path", rest_name="path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-path', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_auto_bandwidth_template(self):
    """
    Getter method for auto_bandwidth_template, mapped from YANG variable /mpls_state/auto_bandwidth_template (list)

    YANG Description: MPLS Auto Bandwidth Template Information
    """
    return self.__auto_bandwidth_template
      
  def _set_auto_bandwidth_template(self, v, load=False):
    """
    Setter method for auto_bandwidth_template, mapped from YANG variable /mpls_state/auto_bandwidth_template (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_bandwidth_template is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_bandwidth_template() directly.

    YANG Description: MPLS Auto Bandwidth Template Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",auto_bandwidth_template.auto_bandwidth_template, yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_bandwidth_template must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",auto_bandwidth_template.auto_bandwidth_template, yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__auto_bandwidth_template = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_bandwidth_template(self):
    self.__auto_bandwidth_template = YANGDynClass(base=YANGListType("name",auto_bandwidth_template.auto_bandwidth_template, yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}), is_container='list', yang_name="auto-bandwidth-template", rest_name="auto-bandwidth-template", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-template', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_autobw_threshold_table_entry(self):
    """
    Getter method for autobw_threshold_table_entry, mapped from YANG variable /mpls_state/autobw_threshold_table_entry (list)

    YANG Description: MPLS Auto Bandwidth Threshold Table Information
    """
    return self.__autobw_threshold_table_entry
      
  def _set_autobw_threshold_table_entry(self, v, load=False):
    """
    Setter method for autobw_threshold_table_entry, mapped from YANG variable /mpls_state/autobw_threshold_table_entry (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_autobw_threshold_table_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_autobw_threshold_table_entry() directly.

    YANG Description: MPLS Auto Bandwidth Threshold Table Information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("bandwidth",autobw_threshold_table_entry.autobw_threshold_table_entry, yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bandwidth', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """autobw_threshold_table_entry must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("bandwidth",autobw_threshold_table_entry.autobw_threshold_table_entry, yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bandwidth', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__autobw_threshold_table_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_autobw_threshold_table_entry(self):
    self.__autobw_threshold_table_entry = YANGDynClass(base=YANGListType("bandwidth",autobw_threshold_table_entry.autobw_threshold_table_entry, yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='bandwidth', extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="autobw-threshold-table-entry", rest_name="autobw-threshold-table-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-autobw-threshold-table-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_lsp(self):
    """
    Getter method for lsp, mapped from YANG variable /mpls_state/lsp (list)

    YANG Description: MPLS LSP operational information
    """
    return self.__lsp
      
  def _set_lsp(self, v, load=False):
    """
    Setter method for lsp, mapped from YANG variable /mpls_state/lsp (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp() directly.

    YANG Description: MPLS LSP operational information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("lsp_name",lsp.lsp, yang_name="lsp", rest_name="lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp", rest_name="lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("lsp_name",lsp.lsp, yang_name="lsp", rest_name="lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp", rest_name="lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp(self):
    self.__lsp = YANGDynClass(base=YANGListType("lsp_name",lsp.lsp, yang_name="lsp", rest_name="lsp", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='lsp-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp", rest_name="lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_forwarding_entry(self):
    """
    Getter method for forwarding_entry, mapped from YANG variable /mpls_state/forwarding_entry (list)

    YANG Description: Forwarding entries created by MPLS
    """
    return self.__forwarding_entry
      
  def _set_forwarding_entry(self, v, load=False):
    """
    Setter method for forwarding_entry, mapped from YANG variable /mpls_state/forwarding_entry (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forwarding_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forwarding_entry() directly.

    YANG Description: Forwarding entries created by MPLS
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("entry_index sync_index",forwarding_entry.forwarding_entry, yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index sync-index', extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forwarding_entry must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("entry_index sync_index",forwarding_entry.forwarding_entry, yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index sync-index', extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__forwarding_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forwarding_entry(self):
    self.__forwarding_entry = YANGDynClass(base=YANGListType("entry_index sync_index",forwarding_entry.forwarding_entry, yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index sync-index', extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="forwarding-entry", rest_name="forwarding-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-forwarding-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_route(self):
    """
    Getter method for route, mapped from YANG variable /mpls_state/route (list)

    YANG Description: Routes installed by MPLS
    """
    return self.__route
      
  def _set_route(self, v, load=False):
    """
    Setter method for route, mapped from YANG variable /mpls_state/route (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_route() directly.

    YANG Description: Routes installed by MPLS
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("entry_index",route.route, yang_name="route", rest_name="route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index', extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}), is_container='list', yang_name="route", rest_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """route must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("entry_index",route.route, yang_name="route", rest_name="route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index', extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}), is_container='list', yang_name="route", rest_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_route(self):
    self.__route = YANGDynClass(base=YANGListType("entry_index",route.route, yang_name="route", rest_name="route", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='entry-index', extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}), is_container='list', yang_name="route", rest_name="route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-route', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_tunnel_traffic_statistics(self):
    """
    Getter method for tunnel_traffic_statistics, mapped from YANG variable /mpls_state/tunnel_traffic_statistics (list)

    YANG Description: Tunnel Traffic Statistics
    """
    return self.__tunnel_traffic_statistics
      
  def _set_tunnel_traffic_statistics(self, v, load=False):
    """
    Setter method for tunnel_traffic_statistics, mapped from YANG variable /mpls_state/tunnel_traffic_statistics (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tunnel_traffic_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tunnel_traffic_statistics() directly.

    YANG Description: Tunnel Traffic Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("index",tunnel_traffic_statistics.tunnel_traffic_statistics, yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='index', extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tunnel_traffic_statistics must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("index",tunnel_traffic_statistics.tunnel_traffic_statistics, yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='index', extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__tunnel_traffic_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tunnel_traffic_statistics(self):
    self.__tunnel_traffic_statistics = YANGDynClass(base=YANGListType("index",tunnel_traffic_statistics.tunnel_traffic_statistics, yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='index', extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="tunnel-traffic-statistics", rest_name="tunnel-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-tunnel-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_transit_traffic_statistics(self):
    """
    Getter method for transit_traffic_statistics, mapped from YANG variable /mpls_state/transit_traffic_statistics (list)

    YANG Description: Transit Traffic Statistics
    """
    return self.__transit_traffic_statistics
      
  def _set_transit_traffic_statistics(self, v, load=False):
    """
    Setter method for transit_traffic_statistics, mapped from YANG variable /mpls_state/transit_traffic_statistics (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transit_traffic_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transit_traffic_statistics() directly.

    YANG Description: Transit Traffic Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("in_label",transit_traffic_statistics.transit_traffic_statistics, yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='in-label', extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transit_traffic_statistics must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("in_label",transit_traffic_statistics.transit_traffic_statistics, yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='in-label', extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__transit_traffic_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transit_traffic_statistics(self):
    self.__transit_traffic_statistics = YANGDynClass(base=YANGListType("in_label",transit_traffic_statistics.transit_traffic_statistics, yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='in-label', extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}), is_container='list', yang_name="transit-traffic-statistics", rest_name="transit-traffic-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-transit-traffic-statistics', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  ldp = __builtin__.property(_get_ldp)
  summary = __builtin__.property(_get_summary)
  memory = __builtin__.property(_get_memory)
  policy = __builtin__.property(_get_policy)
  rsvp = __builtin__.property(_get_rsvp)
  dynamic_bypass = __builtin__.property(_get_dynamic_bypass)
  te = __builtin__.property(_get_te)
  autobw_threshold_table_summary = __builtin__.property(_get_autobw_threshold_table_summary)
  statistics_oam = __builtin__.property(_get_statistics_oam)
  bfd = __builtin__.property(_get_bfd)
  interface = __builtin__.property(_get_interface)
  path = __builtin__.property(_get_path)
  auto_bandwidth_template = __builtin__.property(_get_auto_bandwidth_template)
  autobw_threshold_table_entry = __builtin__.property(_get_autobw_threshold_table_entry)
  lsp = __builtin__.property(_get_lsp)
  forwarding_entry = __builtin__.property(_get_forwarding_entry)
  route = __builtin__.property(_get_route)
  tunnel_traffic_statistics = __builtin__.property(_get_tunnel_traffic_statistics)
  transit_traffic_statistics = __builtin__.property(_get_transit_traffic_statistics)


  _pyangbind_elements = {'ldp': ldp, 'summary': summary, 'memory': memory, 'policy': policy, 'rsvp': rsvp, 'dynamic_bypass': dynamic_bypass, 'te': te, 'autobw_threshold_table_summary': autobw_threshold_table_summary, 'statistics_oam': statistics_oam, 'bfd': bfd, 'interface': interface, 'path': path, 'auto_bandwidth_template': auto_bandwidth_template, 'autobw_threshold_table_entry': autobw_threshold_table_entry, 'lsp': lsp, 'forwarding_entry': forwarding_entry, 'route': route, 'tunnel_traffic_statistics': tunnel_traffic_statistics, 'transit_traffic_statistics': transit_traffic_statistics, }


