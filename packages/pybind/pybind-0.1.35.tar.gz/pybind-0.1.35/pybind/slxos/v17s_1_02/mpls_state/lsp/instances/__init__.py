
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import config_exclude_interfaces
import config_exclude_any
import config_include_any
import config_include_all
import cspf_path_hops
import cspf_exclude_hops
import rsvp_session_rro_hops
import config_frr_exclude_any
import config_frr_include_any
import config_frr_include_all
class instances(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/lsp/instances. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS LSP instancses information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__instance_id','__lsp_id','__current_instance','__new_instance','__old_instance','__is_primary','__is_current_secondary','__is_selected_secondary','__instance_admin_up','__instance_is_up','__instance_is_active','__is_adaptive','__is_bypass','__is_dynamic_bypass','__config_admin_up','__config_from_address_configured','__config_from_address','__config_to_address','__config_type_bypass','__config_type_dynamic','__config_adaptive','__config_ospf_area','__config_isis_level','__config_number_of_retries_configured','__config_number_of_retries','__config_path_select_mode','__config_path_selected_path','__config_path_selected_secondary_name','__config_revert_time_configured','__config_revert_time','__config_retry_count_configured','__config_retry_count','__config_enable_ldp_tunnelling','__config_shortcut_ospf','__config_shortcut_area_configured','__config_shortcut_area','__config_notify_ospf','__config_shortcut_isis','__config_isis_shortcut_level_configured','__config_isis_shortcut_level','__config_notify_isis','__config_metric_configured','__config_metric','__config_ospf_ignore_metric','__config_ospf_relative_metric','__config_ospf_announce_metric','__config_ospf_aaf','__config_isis_ignore_metric','__config_isis_relative_metric','__config_isis_announce_configured','__config_isis_announce_metric','__config_path_configured','__config_path','__config_reoptimize_timer_configured','__config_reoptimize_time','__config_tspec_mtu_configured','__config_tspec_mtu','__config_cos_configured','__config_cos','__config_mtu_configured','__config_mtu','__config_tie_breaking_configured','__config_tie_break_random','__config_tie_break_least_fill','__config_tie_break_most_fill','__config_cspf_disabled','__config_rro_disabled','__config_hot_standby','__config_pinned','__config_persistenct','__config_frr_global_revertive','__config_frr_hold_time','__config_soft_prempt','__config_exclude_interface_change','__config_prority_configured','__config_setup_prority','__config_holding_prority','__config_hop_limit_configured','__config_hop_limit','__config_traffic_eng_rate_configured','__config_traffic_eng_mean_rate','__config_traffic_eng_max_rate','__config_traffic_eng_max_burst','__config_abw_configured','__config_bfd_configured','__config_admin_group_configured','__config_cspf_computation_mode','__path_computed_by_cspf','__path_computed_by_interface_constraint','__cspf_computation_mode','__cspf_group_computation_mode_default','__cspf_group_computation_mode_add_penalty','__cspf_group_computation_mode_exclude_groups','__cspf_group_computation_mode_high_cost','__cspf_path_cost','__cspf_path_area','__cspf_computation_error','__cspf_exclude_hops_present','__rsvp_session_present','__rsvp_session_state_up','__rsvp_session_state','__rsvp_session_path_error_code','__rsvp_session_path_error_value','__rsvp_session_path_error_node_address','__rsvp_session_rro_hops_present','__config_exclude_interface_configured','__maximum_bandwidth','__unreserved_priority_0_bandwidth','__unreserved_priority_1_bandwidth','__unreserved_priority_2_bandwidth','__unreserved_priority_3_bandwidth','__unreserved_priority_4_bandwidth','__unreserved_priority_5_bandwidth','__unreserved_priority_6_bandwidth','__unreserved_priority_7_bandwidth','__config_frr_configured','__config_frr_one_to_one','__config_frr_one_to_many','__config_frr_priority_configured','__config_frr_setup_priority','__config_frr_holding_priority','__config_frr_hop_limit_configured','__config_frr_hop_limit','__config_frr_bandwidth_configured','__config_frr_bandwidth','__config_frr_admin_group_configured','__reoptimize_ignore_count','__reoptimize_time_count','__instance_frr_configured','__instance_frr_up','__instance_frr_active','__instance_out_port_id','__instance_out_port_name','__instance_out_label','__instance_revert_time','__instance_retry_count','__instance_up_down_count','__instance_metric','__instance_down_reason','__config_exclude_interfaces','__config_exclude_any','__config_include_any','__config_include_all','__cspf_path_hops','__cspf_exclude_hops','__rsvp_session_rro_hops','__config_frr_exclude_any','__config_frr_include_any','__config_frr_include_all',)

  _yang_name = 'instances'
  _rest_name = 'instances'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__config_path_selected_path = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary-path': {'value': 1}, u'secondary-path': {'value': 2}},), is_leaf=True, yang_name="config-path-selected-path", rest_name="config-path-selected-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-selected-path', is_config=False)
    self.__config_type_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-type-bypass", rest_name="config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_isis_shortcut_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-shortcut-level", rest_name="config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_frr_priority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-priority-configured", rest_name="config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_bfd_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-bfd-configured", rest_name="config-bfd-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_frr_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-hop-limit", rest_name="config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__cspf_exclude_hops = YANGDynClass(base=YANGListType("hop_index hop_address",cspf_exclude_hops.cspf_exclude_hops, yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}), is_container='list', yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__config_number_of_retries_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-number-of-retries-configured", rest_name="config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rsvp_session_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rsvp-session-state", rest_name="rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__config_frr_include_all = YANGDynClass(base=YANGListType("admin_group_id",config_frr_include_all.config_frr_include_all, yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}), is_container='list', yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__config_frr_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-setup-priority", rest_name="config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__instance_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-label", rest_name="instance-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-mtu-configured", rest_name="config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_ospf_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-ospf-ignore-metric", rest_name="config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__unreserved_priority_1_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-1-bandwidth", rest_name="unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_metric_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-metric-configured", rest_name="config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-hot-standby", rest_name="config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_include_any = YANGDynClass(base=YANGListType("admin_group_id",config_include_any.config_include_any, yang_name="config-include-any", rest_name="config-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}), is_container='list', yang_name="config-include-any", rest_name="config-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__config_frr_global_revertive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-global-revertive", rest_name="config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_path_selected_secondary_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="config-path-selected-secondary-name", rest_name="config-path-selected-secondary-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__config_abw_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-abw-configured", rest_name="config-abw-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_exclude_any = YANGDynClass(base=YANGListType("admin_group_id",config_exclude_any.config_exclude_any, yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}), is_container='list', yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__unreserved_priority_5_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-5-bandwidth", rest_name="unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_frr_up = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-up", rest_name="instance-frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__cspf_path_area = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-area", rest_name="cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_frr_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-hop-limit-configured", rest_name="config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__is_current_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-current-secondary", rest_name="is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_tie_break_random = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-random", rest_name="config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_frr_hold_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-hold-time", rest_name="config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-selected-secondary", rest_name="is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__instance_is_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-is-active", rest_name="instance-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__is_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-bypass", rest_name="is-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_traffic_eng_max_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-rate", rest_name="config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__cspf_computation_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-computation-error", rest_name="cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__reoptimize_time_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-time-count", rest_name="reoptimize-time-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__cspf_group_computation_mode_add_penalty = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-add-penalty", rest_name="cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_cos_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-cos-configured", rest_name="config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_persistenct = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-persistenct", rest_name="config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rsvp_session_rro_hops = YANGDynClass(base=YANGListType("hop_index hop_address",rsvp_session_rro_hops.rsvp_session_rro_hops, yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}), is_container='list', yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__cspf_exclude_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-exclude-hops-present", rest_name="cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_from_address_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-from-address-configured", rest_name="config-from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_holding_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-holding-prority", rest_name="config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__config_ospf_aaf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-aaf", rest_name="config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-id", rest_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_traffic_eng_mean_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-mean-rate", rest_name="config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__unreserved_priority_3_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-3-bandwidth", rest_name="unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_frr_active = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-active", rest_name="instance-frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_revert_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-revert-time", rest_name="config-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_frr_one_to_many = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-many", rest_name="config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__instance_frr_configured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-configured", rest_name="instance-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_out_port_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="instance-out-port-name", rest_name="instance-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__config_isis_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-relative-metric", rest_name="config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_frr_bandwidth_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-bandwidth-configured", rest_name="config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_tie_break_least_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-least-fill", rest_name="config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_cspf_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="config-cspf-computation-mode", rest_name="config-cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)
    self.__config_frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-bandwidth", rest_name="config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_prority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-prority-configured", rest_name="config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_from_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-from-address", rest_name="config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__is_dynamic_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-dynamic-bypass", rest_name="is-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_frr_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-configured", rest_name="config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_reoptimize_timer_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-reoptimize-timer-configured", rest_name="config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_ospf_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-ospf-area", rest_name="config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__config_adaptive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-adaptive", rest_name="config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_ospf_announce_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-ospf-announce-metric", rest_name="config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_retry_count_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-retry-count-configured", rest_name="config-retry-count-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_exclude_interface_change = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-change", rest_name="config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rsvp_session_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-present", rest_name="rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_frr_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-admin-group-configured", rest_name="config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_setup_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-setup-prority", rest_name="config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__config_path_select_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'manual': {'value': 1}, u'unconditional': {'value': 2}},), is_leaf=True, yang_name="config-path-select-mode", rest_name="config-path-select-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-path-selection-mode', is_config=False)
    self.__config_number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-number-of-retries", rest_name="config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_rro_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-rro-disabled", rest_name="config-rro-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__instance_up_down_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-up-down-count", rest_name="instance-up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_shortcut_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-ospf", rest_name="config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-cos", rest_name="config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__cspf_group_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-default", rest_name="cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_enable_ldp_tunnelling = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-enable-ldp-tunnelling", rest_name="config-enable-ldp-tunnelling", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_isis_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-level", rest_name="config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_exclude_interfaces = YANGDynClass(base=YANGListType("exclude_interface_name",config_exclude_interfaces.config_exclude_interfaces, yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='exclude-interface-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__rsvp_session_rro_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-rro-hops-present", rest_name="rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_isis_announce_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-announce-metric", rest_name="config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-admin-up", rest_name="config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_notify_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-notify-ospf", rest_name="config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_shortcut_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-isis", rest_name="config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_pinned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-pinned", rest_name="config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__instance_down_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="instance-down-reason", rest_name="instance-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__lsp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_exclude_interface_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-configured", rest_name="config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__reoptimize_ignore_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-ignore-count", rest_name="reoptimize-ignore-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="instance-metric", rest_name="instance-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__rsvp_session_path_error_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-value", rest_name="rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__path_computed_by_interface_constraint = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-computed-by-interface-constraint", rest_name="path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_traffic_eng_rate_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-traffic-eng-rate-configured", rest_name="config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__instance_is_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-is-up", rest_name="instance-is-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-retry-count", rest_name="config-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-admin-group-configured", rest_name="config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-mtu", rest_name="config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_frr_holding_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-holding-priority", rest_name="config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__instance_revert_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-revert-time", rest_name="instance-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_shortcut_area_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-area-configured", rest_name="config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_traffic_eng_max_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-burst", rest_name="config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_tspec_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tspec-mtu-configured", rest_name="config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_tie_break_most_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-most-fill", rest_name="config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__unreserved_priority_0_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-0-bandwidth", rest_name="unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-admin-up", rest_name="instance-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_frr_one_to_one = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-one", rest_name="config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-hop-limit", rest_name="config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__unreserved_priority_7_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-7-bandwidth", rest_name="unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_frr_exclude_any = YANGDynClass(base=YANGListType("admin_group_id",config_frr_exclude_any.config_frr_exclude_any, yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}), is_container='list', yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__config_ospf_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-relative-metric", rest_name="config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__instance_retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-retry-count", rest_name="instance-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_isis_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-ignore-metric", rest_name="config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rsvp_session_path_error_code = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-code", rest_name="rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_isis_shortcut_level_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-shortcut-level-configured", rest_name="config-isis-shortcut-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_soft_prempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-soft-prempt", rest_name="config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__cspf_path_hops = YANGDynClass(base=YANGListType("hop_index hop_address",cspf_path_hops.cspf_path_hops, yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}), is_container='list', yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__config_type_dynamic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-type-dynamic", rest_name="config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_cspf_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-cspf-disabled", rest_name="config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__unreserved_priority_2_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-2-bandwidth", rest_name="unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="config-path", rest_name="config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__unreserved_priority_4_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-4-bandwidth", rest_name="unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_notify_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-notify-isis", rest_name="config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-hop-limit-configured", rest_name="config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_isis_announce_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-announce-configured", rest_name="config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__current_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="current-instance", rest_name="current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__maximum_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-bandwidth", rest_name="maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__rsvp_session_state_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-state-up", rest_name="rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_to_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-to-address", rest_name="config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__config_path_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-path-configured", rest_name="config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__old_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="old-instance", rest_name="old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rsvp_session_path_error_node_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rsvp-session-path-error-node-address", rest_name="rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__config_frr_include_any = YANGDynClass(base=YANGListType("admin_group_id",config_frr_include_any.config_frr_include_any, yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}), is_container='list', yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__cspf_group_computation_mode_high_cost = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-high-cost", rest_name="cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__cspf_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)
    self.__new_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="new-instance", rest_name="new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__cspf_group_computation_mode_exclude_groups = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-exclude-groups", rest_name="cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-metric", rest_name="config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_adaptive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-adaptive", rest_name="is-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_tie_breaking_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-breaking-configured", rest_name="config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__instance_out_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-port-id", rest_name="instance-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__path_computed_by_cspf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-computed-by-cspf", rest_name="path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_shortcut_area = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-shortcut-area", rest_name="config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_primary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-primary", rest_name="is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_revert_time_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-revert-time-configured", rest_name="config-revert-time-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__config_reoptimize_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-reoptimize-time", rest_name="config-reoptimize-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__unreserved_priority_6_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-6-bandwidth", rest_name="unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_include_all = YANGDynClass(base=YANGListType("admin_group_id",config_include_all.config_include_all, yang_name="config-include-all", rest_name="config-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}), is_container='list', yang_name="config-include-all", rest_name="config-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__cspf_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-cost", rest_name="cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__config_tspec_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-tspec-mtu", rest_name="config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'lsp', u'instances']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'lsp', u'instances']

  def _get_instance_id(self):
    """
    Getter method for instance_id, mapped from YANG variable /mpls_state/lsp/instances/instance_id (uint32)

    YANG Description: lsp_instance_id
    """
    return self.__instance_id
      
  def _set_instance_id(self, v, load=False):
    """
    Setter method for instance_id, mapped from YANG variable /mpls_state/lsp/instances/instance_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_id() directly.

    YANG Description: lsp_instance_id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-id", rest_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-id", rest_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_id(self):
    self.__instance_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-id", rest_name="instance-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_lsp_id(self):
    """
    Getter method for lsp_id, mapped from YANG variable /mpls_state/lsp/instances/lsp_id (uint32)

    YANG Description: lsp tunnel index
    """
    return self.__lsp_id
      
  def _set_lsp_id(self, v, load=False):
    """
    Setter method for lsp_id, mapped from YANG variable /mpls_state/lsp/instances/lsp_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_id() directly.

    YANG Description: lsp tunnel index
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_id(self):
    self.__lsp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_current_instance(self):
    """
    Getter method for current_instance, mapped from YANG variable /mpls_state/lsp/instances/current_instance (boolean)

    YANG Description: lsp_current_instance
    """
    return self.__current_instance
      
  def _set_current_instance(self, v, load=False):
    """
    Setter method for current_instance, mapped from YANG variable /mpls_state/lsp/instances/current_instance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_instance() directly.

    YANG Description: lsp_current_instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="current-instance", rest_name="current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_instance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="current-instance", rest_name="current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__current_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_instance(self):
    self.__current_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="current-instance", rest_name="current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_new_instance(self):
    """
    Getter method for new_instance, mapped from YANG variable /mpls_state/lsp/instances/new_instance (boolean)

    YANG Description: lsp_new_instance
    """
    return self.__new_instance
      
  def _set_new_instance(self, v, load=False):
    """
    Setter method for new_instance, mapped from YANG variable /mpls_state/lsp/instances/new_instance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_new_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_new_instance() directly.

    YANG Description: lsp_new_instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="new-instance", rest_name="new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """new_instance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="new-instance", rest_name="new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__new_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_new_instance(self):
    self.__new_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="new-instance", rest_name="new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_old_instance(self):
    """
    Getter method for old_instance, mapped from YANG variable /mpls_state/lsp/instances/old_instance (boolean)

    YANG Description: lsp_old_instance
    """
    return self.__old_instance
      
  def _set_old_instance(self, v, load=False):
    """
    Setter method for old_instance, mapped from YANG variable /mpls_state/lsp/instances/old_instance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_old_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_old_instance() directly.

    YANG Description: lsp_old_instance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="old-instance", rest_name="old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """old_instance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="old-instance", rest_name="old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__old_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_old_instance(self):
    self.__old_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="old-instance", rest_name="old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_primary(self):
    """
    Getter method for is_primary, mapped from YANG variable /mpls_state/lsp/instances/is_primary (boolean)

    YANG Description: lsp_is_primary
    """
    return self.__is_primary
      
  def _set_is_primary(self, v, load=False):
    """
    Setter method for is_primary, mapped from YANG variable /mpls_state/lsp/instances/is_primary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_primary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_primary() directly.

    YANG Description: lsp_is_primary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-primary", rest_name="is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_primary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-primary", rest_name="is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_primary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_primary(self):
    self.__is_primary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-primary", rest_name="is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_current_secondary(self):
    """
    Getter method for is_current_secondary, mapped from YANG variable /mpls_state/lsp/instances/is_current_secondary (boolean)

    YANG Description: lsp_is_current_secondary
    """
    return self.__is_current_secondary
      
  def _set_is_current_secondary(self, v, load=False):
    """
    Setter method for is_current_secondary, mapped from YANG variable /mpls_state/lsp/instances/is_current_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_current_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_current_secondary() directly.

    YANG Description: lsp_is_current_secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-current-secondary", rest_name="is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_current_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-current-secondary", rest_name="is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_current_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_current_secondary(self):
    self.__is_current_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-current-secondary", rest_name="is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_selected_secondary(self):
    """
    Getter method for is_selected_secondary, mapped from YANG variable /mpls_state/lsp/instances/is_selected_secondary (boolean)

    YANG Description: lsp_is_selected_secondary
    """
    return self.__is_selected_secondary
      
  def _set_is_selected_secondary(self, v, load=False):
    """
    Setter method for is_selected_secondary, mapped from YANG variable /mpls_state/lsp/instances/is_selected_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_selected_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_selected_secondary() directly.

    YANG Description: lsp_is_selected_secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-selected-secondary", rest_name="is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_selected_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-selected-secondary", rest_name="is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_selected_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_selected_secondary(self):
    self.__is_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-selected-secondary", rest_name="is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_instance_admin_up(self):
    """
    Getter method for instance_admin_up, mapped from YANG variable /mpls_state/lsp/instances/instance_admin_up (boolean)

    YANG Description: lsp_instance_admin_up
    """
    return self.__instance_admin_up
      
  def _set_instance_admin_up(self, v, load=False):
    """
    Setter method for instance_admin_up, mapped from YANG variable /mpls_state/lsp/instances/instance_admin_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_admin_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_admin_up() directly.

    YANG Description: lsp_instance_admin_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="instance-admin-up", rest_name="instance-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_admin_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-admin-up", rest_name="instance-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__instance_admin_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_admin_up(self):
    self.__instance_admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-admin-up", rest_name="instance-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_instance_is_up(self):
    """
    Getter method for instance_is_up, mapped from YANG variable /mpls_state/lsp/instances/instance_is_up (boolean)

    YANG Description: lsp_instance_is_up
    """
    return self.__instance_is_up
      
  def _set_instance_is_up(self, v, load=False):
    """
    Setter method for instance_is_up, mapped from YANG variable /mpls_state/lsp/instances/instance_is_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_is_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_is_up() directly.

    YANG Description: lsp_instance_is_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="instance-is-up", rest_name="instance-is-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_is_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-is-up", rest_name="instance-is-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__instance_is_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_is_up(self):
    self.__instance_is_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-is-up", rest_name="instance-is-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_instance_is_active(self):
    """
    Getter method for instance_is_active, mapped from YANG variable /mpls_state/lsp/instances/instance_is_active (boolean)

    YANG Description: lsp_instance_is_active
    """
    return self.__instance_is_active
      
  def _set_instance_is_active(self, v, load=False):
    """
    Setter method for instance_is_active, mapped from YANG variable /mpls_state/lsp/instances/instance_is_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_is_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_is_active() directly.

    YANG Description: lsp_instance_is_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="instance-is-active", rest_name="instance-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_is_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-is-active", rest_name="instance-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__instance_is_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_is_active(self):
    self.__instance_is_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="instance-is-active", rest_name="instance-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_adaptive(self):
    """
    Getter method for is_adaptive, mapped from YANG variable /mpls_state/lsp/instances/is_adaptive (boolean)

    YANG Description: lsp_is_adaptive
    """
    return self.__is_adaptive
      
  def _set_is_adaptive(self, v, load=False):
    """
    Setter method for is_adaptive, mapped from YANG variable /mpls_state/lsp/instances/is_adaptive (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_adaptive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_adaptive() directly.

    YANG Description: lsp_is_adaptive
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-adaptive", rest_name="is-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_adaptive must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-adaptive", rest_name="is-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_adaptive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_adaptive(self):
    self.__is_adaptive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-adaptive", rest_name="is-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_bypass(self):
    """
    Getter method for is_bypass, mapped from YANG variable /mpls_state/lsp/instances/is_bypass (boolean)

    YANG Description: lsp_is_bypass
    """
    return self.__is_bypass
      
  def _set_is_bypass(self, v, load=False):
    """
    Setter method for is_bypass, mapped from YANG variable /mpls_state/lsp/instances/is_bypass (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_bypass() directly.

    YANG Description: lsp_is_bypass
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-bypass", rest_name="is-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_bypass must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-bypass", rest_name="is-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_bypass(self):
    self.__is_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-bypass", rest_name="is-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_dynamic_bypass(self):
    """
    Getter method for is_dynamic_bypass, mapped from YANG variable /mpls_state/lsp/instances/is_dynamic_bypass (boolean)

    YANG Description: lsp_is_dynamic_bypass
    """
    return self.__is_dynamic_bypass
      
  def _set_is_dynamic_bypass(self, v, load=False):
    """
    Setter method for is_dynamic_bypass, mapped from YANG variable /mpls_state/lsp/instances/is_dynamic_bypass (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_dynamic_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_dynamic_bypass() directly.

    YANG Description: lsp_is_dynamic_bypass
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-dynamic-bypass", rest_name="is-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_dynamic_bypass must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-dynamic-bypass", rest_name="is-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_dynamic_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_dynamic_bypass(self):
    self.__is_dynamic_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-dynamic-bypass", rest_name="is-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_admin_up(self):
    """
    Getter method for config_admin_up, mapped from YANG variable /mpls_state/lsp/instances/config_admin_up (boolean)

    YANG Description: lsp_config_admin_up
    """
    return self.__config_admin_up
      
  def _set_config_admin_up(self, v, load=False):
    """
    Setter method for config_admin_up, mapped from YANG variable /mpls_state/lsp/instances/config_admin_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_admin_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_admin_up() directly.

    YANG Description: lsp_config_admin_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-admin-up", rest_name="config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_admin_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-admin-up", rest_name="config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_admin_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_admin_up(self):
    self.__config_admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-admin-up", rest_name="config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_from_address_configured(self):
    """
    Getter method for config_from_address_configured, mapped from YANG variable /mpls_state/lsp/instances/config_from_address_configured (boolean)

    YANG Description: lsp_config_from_address_configured
    """
    return self.__config_from_address_configured
      
  def _set_config_from_address_configured(self, v, load=False):
    """
    Setter method for config_from_address_configured, mapped from YANG variable /mpls_state/lsp/instances/config_from_address_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_from_address_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_from_address_configured() directly.

    YANG Description: lsp_config_from_address_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-from-address-configured", rest_name="config-from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_from_address_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-from-address-configured", rest_name="config-from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_from_address_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_from_address_configured(self):
    self.__config_from_address_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-from-address-configured", rest_name="config-from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_from_address(self):
    """
    Getter method for config_from_address, mapped from YANG variable /mpls_state/lsp/instances/config_from_address (inet:ipv4-address)

    YANG Description: lsp_config_from_address
    """
    return self.__config_from_address
      
  def _set_config_from_address(self, v, load=False):
    """
    Setter method for config_from_address, mapped from YANG variable /mpls_state/lsp/instances/config_from_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_from_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_from_address() directly.

    YANG Description: lsp_config_from_address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-from-address", rest_name="config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_from_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-from-address", rest_name="config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__config_from_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_from_address(self):
    self.__config_from_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-from-address", rest_name="config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_config_to_address(self):
    """
    Getter method for config_to_address, mapped from YANG variable /mpls_state/lsp/instances/config_to_address (inet:ipv4-address)

    YANG Description: lsp_config_to_address
    """
    return self.__config_to_address
      
  def _set_config_to_address(self, v, load=False):
    """
    Setter method for config_to_address, mapped from YANG variable /mpls_state/lsp/instances/config_to_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_to_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_to_address() directly.

    YANG Description: lsp_config_to_address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-to-address", rest_name="config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_to_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-to-address", rest_name="config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__config_to_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_to_address(self):
    self.__config_to_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-to-address", rest_name="config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_config_type_bypass(self):
    """
    Getter method for config_type_bypass, mapped from YANG variable /mpls_state/lsp/instances/config_type_bypass (boolean)

    YANG Description: lsp_config_type_bypass
    """
    return self.__config_type_bypass
      
  def _set_config_type_bypass(self, v, load=False):
    """
    Setter method for config_type_bypass, mapped from YANG variable /mpls_state/lsp/instances/config_type_bypass (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_type_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_type_bypass() directly.

    YANG Description: lsp_config_type_bypass
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-type-bypass", rest_name="config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_type_bypass must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-type-bypass", rest_name="config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_type_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_type_bypass(self):
    self.__config_type_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-type-bypass", rest_name="config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_type_dynamic(self):
    """
    Getter method for config_type_dynamic, mapped from YANG variable /mpls_state/lsp/instances/config_type_dynamic (boolean)

    YANG Description: lsp_config_type_dynamic
    """
    return self.__config_type_dynamic
      
  def _set_config_type_dynamic(self, v, load=False):
    """
    Setter method for config_type_dynamic, mapped from YANG variable /mpls_state/lsp/instances/config_type_dynamic (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_type_dynamic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_type_dynamic() directly.

    YANG Description: lsp_config_type_dynamic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-type-dynamic", rest_name="config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_type_dynamic must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-type-dynamic", rest_name="config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_type_dynamic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_type_dynamic(self):
    self.__config_type_dynamic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-type-dynamic", rest_name="config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_adaptive(self):
    """
    Getter method for config_adaptive, mapped from YANG variable /mpls_state/lsp/instances/config_adaptive (boolean)

    YANG Description: lsp_config_adaptive
    """
    return self.__config_adaptive
      
  def _set_config_adaptive(self, v, load=False):
    """
    Setter method for config_adaptive, mapped from YANG variable /mpls_state/lsp/instances/config_adaptive (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_adaptive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_adaptive() directly.

    YANG Description: lsp_config_adaptive
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-adaptive", rest_name="config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_adaptive must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-adaptive", rest_name="config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_adaptive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_adaptive(self):
    self.__config_adaptive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-adaptive", rest_name="config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_ospf_area(self):
    """
    Getter method for config_ospf_area, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_area (inet:ipv4-address)

    YANG Description: lsp_config_ospf_area
    """
    return self.__config_ospf_area
      
  def _set_config_ospf_area(self, v, load=False):
    """
    Setter method for config_ospf_area, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_area (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_ospf_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_ospf_area() directly.

    YANG Description: lsp_config_ospf_area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-ospf-area", rest_name="config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_ospf_area must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-ospf-area", rest_name="config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__config_ospf_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_ospf_area(self):
    self.__config_ospf_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="config-ospf-area", rest_name="config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_config_isis_level(self):
    """
    Getter method for config_isis_level, mapped from YANG variable /mpls_state/lsp/instances/config_isis_level (uint32)

    YANG Description: lsp_config_isis_level
    """
    return self.__config_isis_level
      
  def _set_config_isis_level(self, v, load=False):
    """
    Setter method for config_isis_level, mapped from YANG variable /mpls_state/lsp/instances/config_isis_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_level() directly.

    YANG Description: lsp_config_isis_level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-level", rest_name="config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-level", rest_name="config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_isis_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_level(self):
    self.__config_isis_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-level", rest_name="config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_number_of_retries_configured(self):
    """
    Getter method for config_number_of_retries_configured, mapped from YANG variable /mpls_state/lsp/instances/config_number_of_retries_configured (boolean)

    YANG Description: lsp_config_number_of_retries_configured
    """
    return self.__config_number_of_retries_configured
      
  def _set_config_number_of_retries_configured(self, v, load=False):
    """
    Setter method for config_number_of_retries_configured, mapped from YANG variable /mpls_state/lsp/instances/config_number_of_retries_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_number_of_retries_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_number_of_retries_configured() directly.

    YANG Description: lsp_config_number_of_retries_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-number-of-retries-configured", rest_name="config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_number_of_retries_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-number-of-retries-configured", rest_name="config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_number_of_retries_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_number_of_retries_configured(self):
    self.__config_number_of_retries_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-number-of-retries-configured", rest_name="config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_number_of_retries(self):
    """
    Getter method for config_number_of_retries, mapped from YANG variable /mpls_state/lsp/instances/config_number_of_retries (uint32)

    YANG Description: lsp_config_number_of_retries
    """
    return self.__config_number_of_retries
      
  def _set_config_number_of_retries(self, v, load=False):
    """
    Setter method for config_number_of_retries, mapped from YANG variable /mpls_state/lsp/instances/config_number_of_retries (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_number_of_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_number_of_retries() directly.

    YANG Description: lsp_config_number_of_retries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-number-of-retries", rest_name="config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_number_of_retries must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-number-of-retries", rest_name="config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_number_of_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_number_of_retries(self):
    self.__config_number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-number-of-retries", rest_name="config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_path_select_mode(self):
    """
    Getter method for config_path_select_mode, mapped from YANG variable /mpls_state/lsp/instances/config_path_select_mode (lsp-path-selection-mode)

    YANG Description: LSP path selection mode configured
    """
    return self.__config_path_select_mode
      
  def _set_config_path_select_mode(self, v, load=False):
    """
    Setter method for config_path_select_mode, mapped from YANG variable /mpls_state/lsp/instances/config_path_select_mode (lsp-path-selection-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_path_select_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_path_select_mode() directly.

    YANG Description: LSP path selection mode configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'manual': {'value': 1}, u'unconditional': {'value': 2}},), is_leaf=True, yang_name="config-path-select-mode", rest_name="config-path-select-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-path-selection-mode', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_path_select_mode must be of a type compatible with lsp-path-selection-mode""",
          'defined-type': "brocade-mpls-operational:lsp-path-selection-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'manual': {'value': 1}, u'unconditional': {'value': 2}},), is_leaf=True, yang_name="config-path-select-mode", rest_name="config-path-select-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-path-selection-mode', is_config=False)""",
        })

    self.__config_path_select_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_path_select_mode(self):
    self.__config_path_select_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'manual': {'value': 1}, u'unconditional': {'value': 2}},), is_leaf=True, yang_name="config-path-select-mode", rest_name="config-path-select-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-path-selection-mode', is_config=False)


  def _get_config_path_selected_path(self):
    """
    Getter method for config_path_selected_path, mapped from YANG variable /mpls_state/lsp/instances/config_path_selected_path (lsp-selected-path)

    YANG Description: Selected LSP path
    """
    return self.__config_path_selected_path
      
  def _set_config_path_selected_path(self, v, load=False):
    """
    Setter method for config_path_selected_path, mapped from YANG variable /mpls_state/lsp/instances/config_path_selected_path (lsp-selected-path)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_path_selected_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_path_selected_path() directly.

    YANG Description: Selected LSP path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary-path': {'value': 1}, u'secondary-path': {'value': 2}},), is_leaf=True, yang_name="config-path-selected-path", rest_name="config-path-selected-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-selected-path', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_path_selected_path must be of a type compatible with lsp-selected-path""",
          'defined-type': "brocade-mpls-operational:lsp-selected-path",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary-path': {'value': 1}, u'secondary-path': {'value': 2}},), is_leaf=True, yang_name="config-path-selected-path", rest_name="config-path-selected-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-selected-path', is_config=False)""",
        })

    self.__config_path_selected_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_path_selected_path(self):
    self.__config_path_selected_path = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary-path': {'value': 1}, u'secondary-path': {'value': 2}},), is_leaf=True, yang_name="config-path-selected-path", rest_name="config-path-selected-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-selected-path', is_config=False)


  def _get_config_path_selected_secondary_name(self):
    """
    Getter method for config_path_selected_secondary_name, mapped from YANG variable /mpls_state/lsp/instances/config_path_selected_secondary_name (string)

    YANG Description: LSP name of selected secondary path
    """
    return self.__config_path_selected_secondary_name
      
  def _set_config_path_selected_secondary_name(self, v, load=False):
    """
    Setter method for config_path_selected_secondary_name, mapped from YANG variable /mpls_state/lsp/instances/config_path_selected_secondary_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_path_selected_secondary_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_path_selected_secondary_name() directly.

    YANG Description: LSP name of selected secondary path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="config-path-selected-secondary-name", rest_name="config-path-selected-secondary-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_path_selected_secondary_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="config-path-selected-secondary-name", rest_name="config-path-selected-secondary-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__config_path_selected_secondary_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_path_selected_secondary_name(self):
    self.__config_path_selected_secondary_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="config-path-selected-secondary-name", rest_name="config-path-selected-secondary-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_config_revert_time_configured(self):
    """
    Getter method for config_revert_time_configured, mapped from YANG variable /mpls_state/lsp/instances/config_revert_time_configured (boolean)

    YANG Description: lsp_config_revert_time_configured
    """
    return self.__config_revert_time_configured
      
  def _set_config_revert_time_configured(self, v, load=False):
    """
    Setter method for config_revert_time_configured, mapped from YANG variable /mpls_state/lsp/instances/config_revert_time_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_revert_time_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_revert_time_configured() directly.

    YANG Description: lsp_config_revert_time_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-revert-time-configured", rest_name="config-revert-time-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_revert_time_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-revert-time-configured", rest_name="config-revert-time-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_revert_time_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_revert_time_configured(self):
    self.__config_revert_time_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-revert-time-configured", rest_name="config-revert-time-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_revert_time(self):
    """
    Getter method for config_revert_time, mapped from YANG variable /mpls_state/lsp/instances/config_revert_time (uint32)

    YANG Description: lsp_config_revert_time
    """
    return self.__config_revert_time
      
  def _set_config_revert_time(self, v, load=False):
    """
    Setter method for config_revert_time, mapped from YANG variable /mpls_state/lsp/instances/config_revert_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_revert_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_revert_time() directly.

    YANG Description: lsp_config_revert_time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-revert-time", rest_name="config-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_revert_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-revert-time", rest_name="config-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_revert_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_revert_time(self):
    self.__config_revert_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-revert-time", rest_name="config-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_retry_count_configured(self):
    """
    Getter method for config_retry_count_configured, mapped from YANG variable /mpls_state/lsp/instances/config_retry_count_configured (boolean)

    YANG Description: lsp_config_retry_count_configured
    """
    return self.__config_retry_count_configured
      
  def _set_config_retry_count_configured(self, v, load=False):
    """
    Setter method for config_retry_count_configured, mapped from YANG variable /mpls_state/lsp/instances/config_retry_count_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_retry_count_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_retry_count_configured() directly.

    YANG Description: lsp_config_retry_count_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-retry-count-configured", rest_name="config-retry-count-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_retry_count_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-retry-count-configured", rest_name="config-retry-count-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_retry_count_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_retry_count_configured(self):
    self.__config_retry_count_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-retry-count-configured", rest_name="config-retry-count-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_retry_count(self):
    """
    Getter method for config_retry_count, mapped from YANG variable /mpls_state/lsp/instances/config_retry_count (uint32)

    YANG Description: lsp_config_retry_count
    """
    return self.__config_retry_count
      
  def _set_config_retry_count(self, v, load=False):
    """
    Setter method for config_retry_count, mapped from YANG variable /mpls_state/lsp/instances/config_retry_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_retry_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_retry_count() directly.

    YANG Description: lsp_config_retry_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-retry-count", rest_name="config-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_retry_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-retry-count", rest_name="config-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_retry_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_retry_count(self):
    self.__config_retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-retry-count", rest_name="config-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_enable_ldp_tunnelling(self):
    """
    Getter method for config_enable_ldp_tunnelling, mapped from YANG variable /mpls_state/lsp/instances/config_enable_ldp_tunnelling (boolean)

    YANG Description: lsp_config_enable_ldp_tunnelling
    """
    return self.__config_enable_ldp_tunnelling
      
  def _set_config_enable_ldp_tunnelling(self, v, load=False):
    """
    Setter method for config_enable_ldp_tunnelling, mapped from YANG variable /mpls_state/lsp/instances/config_enable_ldp_tunnelling (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_enable_ldp_tunnelling is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_enable_ldp_tunnelling() directly.

    YANG Description: lsp_config_enable_ldp_tunnelling
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-enable-ldp-tunnelling", rest_name="config-enable-ldp-tunnelling", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_enable_ldp_tunnelling must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-enable-ldp-tunnelling", rest_name="config-enable-ldp-tunnelling", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_enable_ldp_tunnelling = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_enable_ldp_tunnelling(self):
    self.__config_enable_ldp_tunnelling = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-enable-ldp-tunnelling", rest_name="config-enable-ldp-tunnelling", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_shortcut_ospf(self):
    """
    Getter method for config_shortcut_ospf, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_ospf (boolean)

    YANG Description: lsp_config_shortcut_ospf
    """
    return self.__config_shortcut_ospf
      
  def _set_config_shortcut_ospf(self, v, load=False):
    """
    Setter method for config_shortcut_ospf, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_ospf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_shortcut_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_shortcut_ospf() directly.

    YANG Description: lsp_config_shortcut_ospf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-shortcut-ospf", rest_name="config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_shortcut_ospf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-ospf", rest_name="config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_shortcut_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_shortcut_ospf(self):
    self.__config_shortcut_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-ospf", rest_name="config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_shortcut_area_configured(self):
    """
    Getter method for config_shortcut_area_configured, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_area_configured (boolean)

    YANG Description: lsp_config_shortcut_area_configured
    """
    return self.__config_shortcut_area_configured
      
  def _set_config_shortcut_area_configured(self, v, load=False):
    """
    Setter method for config_shortcut_area_configured, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_area_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_shortcut_area_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_shortcut_area_configured() directly.

    YANG Description: lsp_config_shortcut_area_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-shortcut-area-configured", rest_name="config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_shortcut_area_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-area-configured", rest_name="config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_shortcut_area_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_shortcut_area_configured(self):
    self.__config_shortcut_area_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-area-configured", rest_name="config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_shortcut_area(self):
    """
    Getter method for config_shortcut_area, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_area (uint32)

    YANG Description: lsp_config_shortcut_area
    """
    return self.__config_shortcut_area
      
  def _set_config_shortcut_area(self, v, load=False):
    """
    Setter method for config_shortcut_area, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_area (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_shortcut_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_shortcut_area() directly.

    YANG Description: lsp_config_shortcut_area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-shortcut-area", rest_name="config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_shortcut_area must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-shortcut-area", rest_name="config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_shortcut_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_shortcut_area(self):
    self.__config_shortcut_area = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-shortcut-area", rest_name="config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_notify_ospf(self):
    """
    Getter method for config_notify_ospf, mapped from YANG variable /mpls_state/lsp/instances/config_notify_ospf (boolean)

    YANG Description: lsp_config_notify_ospf
    """
    return self.__config_notify_ospf
      
  def _set_config_notify_ospf(self, v, load=False):
    """
    Setter method for config_notify_ospf, mapped from YANG variable /mpls_state/lsp/instances/config_notify_ospf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_notify_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_notify_ospf() directly.

    YANG Description: lsp_config_notify_ospf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-notify-ospf", rest_name="config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_notify_ospf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-notify-ospf", rest_name="config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_notify_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_notify_ospf(self):
    self.__config_notify_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-notify-ospf", rest_name="config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_shortcut_isis(self):
    """
    Getter method for config_shortcut_isis, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_isis (boolean)

    YANG Description: lsp_config_shortcut_isis
    """
    return self.__config_shortcut_isis
      
  def _set_config_shortcut_isis(self, v, load=False):
    """
    Setter method for config_shortcut_isis, mapped from YANG variable /mpls_state/lsp/instances/config_shortcut_isis (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_shortcut_isis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_shortcut_isis() directly.

    YANG Description: lsp_config_shortcut_isis
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-shortcut-isis", rest_name="config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_shortcut_isis must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-isis", rest_name="config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_shortcut_isis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_shortcut_isis(self):
    self.__config_shortcut_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-shortcut-isis", rest_name="config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_isis_shortcut_level_configured(self):
    """
    Getter method for config_isis_shortcut_level_configured, mapped from YANG variable /mpls_state/lsp/instances/config_isis_shortcut_level_configured (boolean)

    YANG Description: lsp_config_isis_shortcut_level_configured
    """
    return self.__config_isis_shortcut_level_configured
      
  def _set_config_isis_shortcut_level_configured(self, v, load=False):
    """
    Setter method for config_isis_shortcut_level_configured, mapped from YANG variable /mpls_state/lsp/instances/config_isis_shortcut_level_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_shortcut_level_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_shortcut_level_configured() directly.

    YANG Description: lsp_config_isis_shortcut_level_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-isis-shortcut-level-configured", rest_name="config-isis-shortcut-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_shortcut_level_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-shortcut-level-configured", rest_name="config-isis-shortcut-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_isis_shortcut_level_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_shortcut_level_configured(self):
    self.__config_isis_shortcut_level_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-shortcut-level-configured", rest_name="config-isis-shortcut-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_isis_shortcut_level(self):
    """
    Getter method for config_isis_shortcut_level, mapped from YANG variable /mpls_state/lsp/instances/config_isis_shortcut_level (uint32)

    YANG Description: lsp_config_isis_shortcut_level
    """
    return self.__config_isis_shortcut_level
      
  def _set_config_isis_shortcut_level(self, v, load=False):
    """
    Setter method for config_isis_shortcut_level, mapped from YANG variable /mpls_state/lsp/instances/config_isis_shortcut_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_shortcut_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_shortcut_level() directly.

    YANG Description: lsp_config_isis_shortcut_level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-shortcut-level", rest_name="config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_shortcut_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-shortcut-level", rest_name="config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_isis_shortcut_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_shortcut_level(self):
    self.__config_isis_shortcut_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-shortcut-level", rest_name="config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_notify_isis(self):
    """
    Getter method for config_notify_isis, mapped from YANG variable /mpls_state/lsp/instances/config_notify_isis (boolean)

    YANG Description: lsp_config_notify_isis
    """
    return self.__config_notify_isis
      
  def _set_config_notify_isis(self, v, load=False):
    """
    Setter method for config_notify_isis, mapped from YANG variable /mpls_state/lsp/instances/config_notify_isis (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_notify_isis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_notify_isis() directly.

    YANG Description: lsp_config_notify_isis
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-notify-isis", rest_name="config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_notify_isis must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-notify-isis", rest_name="config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_notify_isis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_notify_isis(self):
    self.__config_notify_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-notify-isis", rest_name="config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_metric_configured(self):
    """
    Getter method for config_metric_configured, mapped from YANG variable /mpls_state/lsp/instances/config_metric_configured (boolean)

    YANG Description: lsp_config_metric_configured
    """
    return self.__config_metric_configured
      
  def _set_config_metric_configured(self, v, load=False):
    """
    Setter method for config_metric_configured, mapped from YANG variable /mpls_state/lsp/instances/config_metric_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_metric_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_metric_configured() directly.

    YANG Description: lsp_config_metric_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-metric-configured", rest_name="config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_metric_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-metric-configured", rest_name="config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_metric_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_metric_configured(self):
    self.__config_metric_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-metric-configured", rest_name="config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_metric(self):
    """
    Getter method for config_metric, mapped from YANG variable /mpls_state/lsp/instances/config_metric (uint32)

    YANG Description: lsp_config_metric
    """
    return self.__config_metric
      
  def _set_config_metric(self, v, load=False):
    """
    Setter method for config_metric, mapped from YANG variable /mpls_state/lsp/instances/config_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_metric() directly.

    YANG Description: lsp_config_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-metric", rest_name="config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-metric", rest_name="config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_metric(self):
    self.__config_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-metric", rest_name="config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_ospf_ignore_metric(self):
    """
    Getter method for config_ospf_ignore_metric, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_ignore_metric (boolean)

    YANG Description: lsp_config_ospf_ignore_metric
    """
    return self.__config_ospf_ignore_metric
      
  def _set_config_ospf_ignore_metric(self, v, load=False):
    """
    Setter method for config_ospf_ignore_metric, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_ignore_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_ospf_ignore_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_ospf_ignore_metric() directly.

    YANG Description: lsp_config_ospf_ignore_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-ospf-ignore-metric", rest_name="config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_ospf_ignore_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-ospf-ignore-metric", rest_name="config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_ospf_ignore_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_ospf_ignore_metric(self):
    self.__config_ospf_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-ospf-ignore-metric", rest_name="config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_ospf_relative_metric(self):
    """
    Getter method for config_ospf_relative_metric, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_relative_metric (uint32)

    YANG Description: lsp_config_ospf_relative_metric
    """
    return self.__config_ospf_relative_metric
      
  def _set_config_ospf_relative_metric(self, v, load=False):
    """
    Setter method for config_ospf_relative_metric, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_relative_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_ospf_relative_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_ospf_relative_metric() directly.

    YANG Description: lsp_config_ospf_relative_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-relative-metric", rest_name="config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_ospf_relative_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-relative-metric", rest_name="config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_ospf_relative_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_ospf_relative_metric(self):
    self.__config_ospf_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-relative-metric", rest_name="config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_ospf_announce_metric(self):
    """
    Getter method for config_ospf_announce_metric, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_announce_metric (boolean)

    YANG Description: lsp_config_ospf_announce_metric
    """
    return self.__config_ospf_announce_metric
      
  def _set_config_ospf_announce_metric(self, v, load=False):
    """
    Setter method for config_ospf_announce_metric, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_announce_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_ospf_announce_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_ospf_announce_metric() directly.

    YANG Description: lsp_config_ospf_announce_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-ospf-announce-metric", rest_name="config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_ospf_announce_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-ospf-announce-metric", rest_name="config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_ospf_announce_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_ospf_announce_metric(self):
    self.__config_ospf_announce_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-ospf-announce-metric", rest_name="config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_ospf_aaf(self):
    """
    Getter method for config_ospf_aaf, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_aaf (uint32)

    YANG Description: lsp_config_ospf_aaf
    """
    return self.__config_ospf_aaf
      
  def _set_config_ospf_aaf(self, v, load=False):
    """
    Setter method for config_ospf_aaf, mapped from YANG variable /mpls_state/lsp/instances/config_ospf_aaf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_ospf_aaf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_ospf_aaf() directly.

    YANG Description: lsp_config_ospf_aaf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-aaf", rest_name="config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_ospf_aaf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-aaf", rest_name="config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_ospf_aaf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_ospf_aaf(self):
    self.__config_ospf_aaf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-ospf-aaf", rest_name="config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_isis_ignore_metric(self):
    """
    Getter method for config_isis_ignore_metric, mapped from YANG variable /mpls_state/lsp/instances/config_isis_ignore_metric (boolean)

    YANG Description: lsp_config_isis_ignore_metric
    """
    return self.__config_isis_ignore_metric
      
  def _set_config_isis_ignore_metric(self, v, load=False):
    """
    Setter method for config_isis_ignore_metric, mapped from YANG variable /mpls_state/lsp/instances/config_isis_ignore_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_ignore_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_ignore_metric() directly.

    YANG Description: lsp_config_isis_ignore_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-isis-ignore-metric", rest_name="config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_ignore_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-ignore-metric", rest_name="config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_isis_ignore_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_ignore_metric(self):
    self.__config_isis_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-ignore-metric", rest_name="config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_isis_relative_metric(self):
    """
    Getter method for config_isis_relative_metric, mapped from YANG variable /mpls_state/lsp/instances/config_isis_relative_metric (uint32)

    YANG Description: lsp_config_isis_relative_metric
    """
    return self.__config_isis_relative_metric
      
  def _set_config_isis_relative_metric(self, v, load=False):
    """
    Setter method for config_isis_relative_metric, mapped from YANG variable /mpls_state/lsp/instances/config_isis_relative_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_relative_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_relative_metric() directly.

    YANG Description: lsp_config_isis_relative_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-relative-metric", rest_name="config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_relative_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-relative-metric", rest_name="config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_isis_relative_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_relative_metric(self):
    self.__config_isis_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-relative-metric", rest_name="config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_isis_announce_configured(self):
    """
    Getter method for config_isis_announce_configured, mapped from YANG variable /mpls_state/lsp/instances/config_isis_announce_configured (boolean)

    YANG Description: lsp_config_isis_announce_configured
    """
    return self.__config_isis_announce_configured
      
  def _set_config_isis_announce_configured(self, v, load=False):
    """
    Setter method for config_isis_announce_configured, mapped from YANG variable /mpls_state/lsp/instances/config_isis_announce_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_announce_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_announce_configured() directly.

    YANG Description: lsp_config_isis_announce_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-isis-announce-configured", rest_name="config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_announce_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-announce-configured", rest_name="config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_isis_announce_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_announce_configured(self):
    self.__config_isis_announce_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-isis-announce-configured", rest_name="config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_isis_announce_metric(self):
    """
    Getter method for config_isis_announce_metric, mapped from YANG variable /mpls_state/lsp/instances/config_isis_announce_metric (uint32)

    YANG Description: lsp_config_isis_announce_metric
    """
    return self.__config_isis_announce_metric
      
  def _set_config_isis_announce_metric(self, v, load=False):
    """
    Setter method for config_isis_announce_metric, mapped from YANG variable /mpls_state/lsp/instances/config_isis_announce_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_isis_announce_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_isis_announce_metric() directly.

    YANG Description: lsp_config_isis_announce_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-announce-metric", rest_name="config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_isis_announce_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-announce-metric", rest_name="config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_isis_announce_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_isis_announce_metric(self):
    self.__config_isis_announce_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-isis-announce-metric", rest_name="config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_path_configured(self):
    """
    Getter method for config_path_configured, mapped from YANG variable /mpls_state/lsp/instances/config_path_configured (boolean)

    YANG Description: lsp_config_path_configured
    """
    return self.__config_path_configured
      
  def _set_config_path_configured(self, v, load=False):
    """
    Setter method for config_path_configured, mapped from YANG variable /mpls_state/lsp/instances/config_path_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_path_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_path_configured() directly.

    YANG Description: lsp_config_path_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-path-configured", rest_name="config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_path_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-path-configured", rest_name="config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_path_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_path_configured(self):
    self.__config_path_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-path-configured", rest_name="config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_path(self):
    """
    Getter method for config_path, mapped from YANG variable /mpls_state/lsp/instances/config_path (string)

    YANG Description: lsp_config_path
    """
    return self.__config_path
      
  def _set_config_path(self, v, load=False):
    """
    Setter method for config_path, mapped from YANG variable /mpls_state/lsp/instances/config_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_path() directly.

    YANG Description: lsp_config_path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="config-path", rest_name="config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="config-path", rest_name="config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__config_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_path(self):
    self.__config_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="config-path", rest_name="config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_config_reoptimize_timer_configured(self):
    """
    Getter method for config_reoptimize_timer_configured, mapped from YANG variable /mpls_state/lsp/instances/config_reoptimize_timer_configured (boolean)

    YANG Description: lsp_config_reoptimize_timer_configured
    """
    return self.__config_reoptimize_timer_configured
      
  def _set_config_reoptimize_timer_configured(self, v, load=False):
    """
    Setter method for config_reoptimize_timer_configured, mapped from YANG variable /mpls_state/lsp/instances/config_reoptimize_timer_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_reoptimize_timer_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_reoptimize_timer_configured() directly.

    YANG Description: lsp_config_reoptimize_timer_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-reoptimize-timer-configured", rest_name="config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_reoptimize_timer_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-reoptimize-timer-configured", rest_name="config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_reoptimize_timer_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_reoptimize_timer_configured(self):
    self.__config_reoptimize_timer_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-reoptimize-timer-configured", rest_name="config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_reoptimize_time(self):
    """
    Getter method for config_reoptimize_time, mapped from YANG variable /mpls_state/lsp/instances/config_reoptimize_time (uint32)

    YANG Description: lsp_config_reoptimize_time
    """
    return self.__config_reoptimize_time
      
  def _set_config_reoptimize_time(self, v, load=False):
    """
    Setter method for config_reoptimize_time, mapped from YANG variable /mpls_state/lsp/instances/config_reoptimize_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_reoptimize_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_reoptimize_time() directly.

    YANG Description: lsp_config_reoptimize_time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-reoptimize-time", rest_name="config-reoptimize-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_reoptimize_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-reoptimize-time", rest_name="config-reoptimize-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_reoptimize_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_reoptimize_time(self):
    self.__config_reoptimize_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-reoptimize-time", rest_name="config-reoptimize-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_tspec_mtu_configured(self):
    """
    Getter method for config_tspec_mtu_configured, mapped from YANG variable /mpls_state/lsp/instances/config_tspec_mtu_configured (boolean)

    YANG Description: lsp_config_tspec_mtu_configured
    """
    return self.__config_tspec_mtu_configured
      
  def _set_config_tspec_mtu_configured(self, v, load=False):
    """
    Setter method for config_tspec_mtu_configured, mapped from YANG variable /mpls_state/lsp/instances/config_tspec_mtu_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_tspec_mtu_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_tspec_mtu_configured() directly.

    YANG Description: lsp_config_tspec_mtu_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-tspec-mtu-configured", rest_name="config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_tspec_mtu_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tspec-mtu-configured", rest_name="config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_tspec_mtu_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_tspec_mtu_configured(self):
    self.__config_tspec_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tspec-mtu-configured", rest_name="config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_tspec_mtu(self):
    """
    Getter method for config_tspec_mtu, mapped from YANG variable /mpls_state/lsp/instances/config_tspec_mtu (uint32)

    YANG Description: lsp_config_tspec_mtu
    """
    return self.__config_tspec_mtu
      
  def _set_config_tspec_mtu(self, v, load=False):
    """
    Setter method for config_tspec_mtu, mapped from YANG variable /mpls_state/lsp/instances/config_tspec_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_tspec_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_tspec_mtu() directly.

    YANG Description: lsp_config_tspec_mtu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-tspec-mtu", rest_name="config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_tspec_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-tspec-mtu", rest_name="config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_tspec_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_tspec_mtu(self):
    self.__config_tspec_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-tspec-mtu", rest_name="config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_cos_configured(self):
    """
    Getter method for config_cos_configured, mapped from YANG variable /mpls_state/lsp/instances/config_cos_configured (boolean)

    YANG Description: lsp_config_cos_configured
    """
    return self.__config_cos_configured
      
  def _set_config_cos_configured(self, v, load=False):
    """
    Setter method for config_cos_configured, mapped from YANG variable /mpls_state/lsp/instances/config_cos_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_cos_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_cos_configured() directly.

    YANG Description: lsp_config_cos_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-cos-configured", rest_name="config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_cos_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-cos-configured", rest_name="config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_cos_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_cos_configured(self):
    self.__config_cos_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-cos-configured", rest_name="config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_cos(self):
    """
    Getter method for config_cos, mapped from YANG variable /mpls_state/lsp/instances/config_cos (uint8)

    YANG Description: lsp_config_cos
    """
    return self.__config_cos
      
  def _set_config_cos(self, v, load=False):
    """
    Setter method for config_cos, mapped from YANG variable /mpls_state/lsp/instances/config_cos (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_cos() directly.

    YANG Description: lsp_config_cos
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-cos", rest_name="config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_cos must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-cos", rest_name="config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_cos(self):
    self.__config_cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-cos", rest_name="config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_mtu_configured(self):
    """
    Getter method for config_mtu_configured, mapped from YANG variable /mpls_state/lsp/instances/config_mtu_configured (boolean)

    YANG Description: lsp_config_mtu_configured
    """
    return self.__config_mtu_configured
      
  def _set_config_mtu_configured(self, v, load=False):
    """
    Setter method for config_mtu_configured, mapped from YANG variable /mpls_state/lsp/instances/config_mtu_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_mtu_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_mtu_configured() directly.

    YANG Description: lsp_config_mtu_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-mtu-configured", rest_name="config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_mtu_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-mtu-configured", rest_name="config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_mtu_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_mtu_configured(self):
    self.__config_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-mtu-configured", rest_name="config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_mtu(self):
    """
    Getter method for config_mtu, mapped from YANG variable /mpls_state/lsp/instances/config_mtu (uint32)

    YANG Description: lsp_config_mtu
    """
    return self.__config_mtu
      
  def _set_config_mtu(self, v, load=False):
    """
    Setter method for config_mtu, mapped from YANG variable /mpls_state/lsp/instances/config_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_mtu() directly.

    YANG Description: lsp_config_mtu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-mtu", rest_name="config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-mtu", rest_name="config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_mtu(self):
    self.__config_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-mtu", rest_name="config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_tie_breaking_configured(self):
    """
    Getter method for config_tie_breaking_configured, mapped from YANG variable /mpls_state/lsp/instances/config_tie_breaking_configured (boolean)

    YANG Description: lsp_config_tie_breaking_configured
    """
    return self.__config_tie_breaking_configured
      
  def _set_config_tie_breaking_configured(self, v, load=False):
    """
    Setter method for config_tie_breaking_configured, mapped from YANG variable /mpls_state/lsp/instances/config_tie_breaking_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_tie_breaking_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_tie_breaking_configured() directly.

    YANG Description: lsp_config_tie_breaking_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-tie-breaking-configured", rest_name="config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_tie_breaking_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-breaking-configured", rest_name="config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_tie_breaking_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_tie_breaking_configured(self):
    self.__config_tie_breaking_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-breaking-configured", rest_name="config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_tie_break_random(self):
    """
    Getter method for config_tie_break_random, mapped from YANG variable /mpls_state/lsp/instances/config_tie_break_random (boolean)

    YANG Description: lsp_config_tie_break_random
    """
    return self.__config_tie_break_random
      
  def _set_config_tie_break_random(self, v, load=False):
    """
    Setter method for config_tie_break_random, mapped from YANG variable /mpls_state/lsp/instances/config_tie_break_random (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_tie_break_random is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_tie_break_random() directly.

    YANG Description: lsp_config_tie_break_random
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-tie-break-random", rest_name="config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_tie_break_random must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-random", rest_name="config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_tie_break_random = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_tie_break_random(self):
    self.__config_tie_break_random = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-random", rest_name="config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_tie_break_least_fill(self):
    """
    Getter method for config_tie_break_least_fill, mapped from YANG variable /mpls_state/lsp/instances/config_tie_break_least_fill (boolean)

    YANG Description: lsp_config_tie_break_least_fill
    """
    return self.__config_tie_break_least_fill
      
  def _set_config_tie_break_least_fill(self, v, load=False):
    """
    Setter method for config_tie_break_least_fill, mapped from YANG variable /mpls_state/lsp/instances/config_tie_break_least_fill (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_tie_break_least_fill is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_tie_break_least_fill() directly.

    YANG Description: lsp_config_tie_break_least_fill
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-tie-break-least-fill", rest_name="config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_tie_break_least_fill must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-least-fill", rest_name="config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_tie_break_least_fill = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_tie_break_least_fill(self):
    self.__config_tie_break_least_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-least-fill", rest_name="config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_tie_break_most_fill(self):
    """
    Getter method for config_tie_break_most_fill, mapped from YANG variable /mpls_state/lsp/instances/config_tie_break_most_fill (boolean)

    YANG Description: lsp_config_tie_break_most_fill
    """
    return self.__config_tie_break_most_fill
      
  def _set_config_tie_break_most_fill(self, v, load=False):
    """
    Setter method for config_tie_break_most_fill, mapped from YANG variable /mpls_state/lsp/instances/config_tie_break_most_fill (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_tie_break_most_fill is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_tie_break_most_fill() directly.

    YANG Description: lsp_config_tie_break_most_fill
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-tie-break-most-fill", rest_name="config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_tie_break_most_fill must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-most-fill", rest_name="config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_tie_break_most_fill = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_tie_break_most_fill(self):
    self.__config_tie_break_most_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-tie-break-most-fill", rest_name="config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_cspf_disabled(self):
    """
    Getter method for config_cspf_disabled, mapped from YANG variable /mpls_state/lsp/instances/config_cspf_disabled (boolean)

    YANG Description: lsp_config_cspf_disabled
    """
    return self.__config_cspf_disabled
      
  def _set_config_cspf_disabled(self, v, load=False):
    """
    Setter method for config_cspf_disabled, mapped from YANG variable /mpls_state/lsp/instances/config_cspf_disabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_cspf_disabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_cspf_disabled() directly.

    YANG Description: lsp_config_cspf_disabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-cspf-disabled", rest_name="config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_cspf_disabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-cspf-disabled", rest_name="config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_cspf_disabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_cspf_disabled(self):
    self.__config_cspf_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-cspf-disabled", rest_name="config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_rro_disabled(self):
    """
    Getter method for config_rro_disabled, mapped from YANG variable /mpls_state/lsp/instances/config_rro_disabled (boolean)

    YANG Description: lsp_config_rro_disabled
    """
    return self.__config_rro_disabled
      
  def _set_config_rro_disabled(self, v, load=False):
    """
    Setter method for config_rro_disabled, mapped from YANG variable /mpls_state/lsp/instances/config_rro_disabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_rro_disabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_rro_disabled() directly.

    YANG Description: lsp_config_rro_disabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-rro-disabled", rest_name="config-rro-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_rro_disabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-rro-disabled", rest_name="config-rro-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_rro_disabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_rro_disabled(self):
    self.__config_rro_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-rro-disabled", rest_name="config-rro-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_hot_standby(self):
    """
    Getter method for config_hot_standby, mapped from YANG variable /mpls_state/lsp/instances/config_hot_standby (boolean)

    YANG Description: lsp_config_hot_standby
    """
    return self.__config_hot_standby
      
  def _set_config_hot_standby(self, v, load=False):
    """
    Setter method for config_hot_standby, mapped from YANG variable /mpls_state/lsp/instances/config_hot_standby (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_hot_standby is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_hot_standby() directly.

    YANG Description: lsp_config_hot_standby
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-hot-standby", rest_name="config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_hot_standby must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-hot-standby", rest_name="config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_hot_standby = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_hot_standby(self):
    self.__config_hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-hot-standby", rest_name="config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_pinned(self):
    """
    Getter method for config_pinned, mapped from YANG variable /mpls_state/lsp/instances/config_pinned (boolean)

    YANG Description: lsp_config_pinned
    """
    return self.__config_pinned
      
  def _set_config_pinned(self, v, load=False):
    """
    Setter method for config_pinned, mapped from YANG variable /mpls_state/lsp/instances/config_pinned (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_pinned is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_pinned() directly.

    YANG Description: lsp_config_pinned
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-pinned", rest_name="config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_pinned must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-pinned", rest_name="config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_pinned = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_pinned(self):
    self.__config_pinned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-pinned", rest_name="config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_persistenct(self):
    """
    Getter method for config_persistenct, mapped from YANG variable /mpls_state/lsp/instances/config_persistenct (boolean)

    YANG Description: lsp_config_persistenct
    """
    return self.__config_persistenct
      
  def _set_config_persistenct(self, v, load=False):
    """
    Setter method for config_persistenct, mapped from YANG variable /mpls_state/lsp/instances/config_persistenct (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_persistenct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_persistenct() directly.

    YANG Description: lsp_config_persistenct
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-persistenct", rest_name="config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_persistenct must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-persistenct", rest_name="config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_persistenct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_persistenct(self):
    self.__config_persistenct = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-persistenct", rest_name="config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_global_revertive(self):
    """
    Getter method for config_frr_global_revertive, mapped from YANG variable /mpls_state/lsp/instances/config_frr_global_revertive (boolean)

    YANG Description: lsp_config_frr_global_revertive
    """
    return self.__config_frr_global_revertive
      
  def _set_config_frr_global_revertive(self, v, load=False):
    """
    Setter method for config_frr_global_revertive, mapped from YANG variable /mpls_state/lsp/instances/config_frr_global_revertive (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_global_revertive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_global_revertive() directly.

    YANG Description: lsp_config_frr_global_revertive
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-global-revertive", rest_name="config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_global_revertive must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-global-revertive", rest_name="config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_global_revertive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_global_revertive(self):
    self.__config_frr_global_revertive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-global-revertive", rest_name="config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_hold_time(self):
    """
    Getter method for config_frr_hold_time, mapped from YANG variable /mpls_state/lsp/instances/config_frr_hold_time (uint32)

    YANG Description: lsp_config_frr_hold_time
    """
    return self.__config_frr_hold_time
      
  def _set_config_frr_hold_time(self, v, load=False):
    """
    Setter method for config_frr_hold_time, mapped from YANG variable /mpls_state/lsp/instances/config_frr_hold_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_hold_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_hold_time() directly.

    YANG Description: lsp_config_frr_hold_time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-hold-time", rest_name="config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_hold_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-hold-time", rest_name="config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_frr_hold_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_hold_time(self):
    self.__config_frr_hold_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-hold-time", rest_name="config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_soft_prempt(self):
    """
    Getter method for config_soft_prempt, mapped from YANG variable /mpls_state/lsp/instances/config_soft_prempt (boolean)

    YANG Description: lsp_config_soft_prempt
    """
    return self.__config_soft_prempt
      
  def _set_config_soft_prempt(self, v, load=False):
    """
    Setter method for config_soft_prempt, mapped from YANG variable /mpls_state/lsp/instances/config_soft_prempt (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_soft_prempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_soft_prempt() directly.

    YANG Description: lsp_config_soft_prempt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-soft-prempt", rest_name="config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_soft_prempt must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-soft-prempt", rest_name="config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_soft_prempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_soft_prempt(self):
    self.__config_soft_prempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-soft-prempt", rest_name="config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_exclude_interface_change(self):
    """
    Getter method for config_exclude_interface_change, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_interface_change (boolean)

    YANG Description: lsp_config_exclude_interface_change
    """
    return self.__config_exclude_interface_change
      
  def _set_config_exclude_interface_change(self, v, load=False):
    """
    Setter method for config_exclude_interface_change, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_interface_change (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_exclude_interface_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_exclude_interface_change() directly.

    YANG Description: lsp_config_exclude_interface_change
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-change", rest_name="config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_exclude_interface_change must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-change", rest_name="config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_exclude_interface_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_exclude_interface_change(self):
    self.__config_exclude_interface_change = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-change", rest_name="config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_prority_configured(self):
    """
    Getter method for config_prority_configured, mapped from YANG variable /mpls_state/lsp/instances/config_prority_configured (boolean)

    YANG Description: lsp_config_prority_configured
    """
    return self.__config_prority_configured
      
  def _set_config_prority_configured(self, v, load=False):
    """
    Setter method for config_prority_configured, mapped from YANG variable /mpls_state/lsp/instances/config_prority_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_prority_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_prority_configured() directly.

    YANG Description: lsp_config_prority_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-prority-configured", rest_name="config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_prority_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-prority-configured", rest_name="config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_prority_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_prority_configured(self):
    self.__config_prority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-prority-configured", rest_name="config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_setup_prority(self):
    """
    Getter method for config_setup_prority, mapped from YANG variable /mpls_state/lsp/instances/config_setup_prority (uint8)

    YANG Description: lsp_config_setup_prority
    """
    return self.__config_setup_prority
      
  def _set_config_setup_prority(self, v, load=False):
    """
    Setter method for config_setup_prority, mapped from YANG variable /mpls_state/lsp/instances/config_setup_prority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_setup_prority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_setup_prority() directly.

    YANG Description: lsp_config_setup_prority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-setup-prority", rest_name="config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_setup_prority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-setup-prority", rest_name="config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_setup_prority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_setup_prority(self):
    self.__config_setup_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-setup-prority", rest_name="config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_holding_prority(self):
    """
    Getter method for config_holding_prority, mapped from YANG variable /mpls_state/lsp/instances/config_holding_prority (uint8)

    YANG Description: lsp_config_holding_prority
    """
    return self.__config_holding_prority
      
  def _set_config_holding_prority(self, v, load=False):
    """
    Setter method for config_holding_prority, mapped from YANG variable /mpls_state/lsp/instances/config_holding_prority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_holding_prority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_holding_prority() directly.

    YANG Description: lsp_config_holding_prority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-holding-prority", rest_name="config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_holding_prority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-holding-prority", rest_name="config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_holding_prority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_holding_prority(self):
    self.__config_holding_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-holding-prority", rest_name="config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_hop_limit_configured(self):
    """
    Getter method for config_hop_limit_configured, mapped from YANG variable /mpls_state/lsp/instances/config_hop_limit_configured (boolean)

    YANG Description: lsp_config_hop_limit_configured
    """
    return self.__config_hop_limit_configured
      
  def _set_config_hop_limit_configured(self, v, load=False):
    """
    Setter method for config_hop_limit_configured, mapped from YANG variable /mpls_state/lsp/instances/config_hop_limit_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_hop_limit_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_hop_limit_configured() directly.

    YANG Description: lsp_config_hop_limit_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-hop-limit-configured", rest_name="config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_hop_limit_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-hop-limit-configured", rest_name="config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_hop_limit_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_hop_limit_configured(self):
    self.__config_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-hop-limit-configured", rest_name="config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_hop_limit(self):
    """
    Getter method for config_hop_limit, mapped from YANG variable /mpls_state/lsp/instances/config_hop_limit (uint8)

    YANG Description: lsp_config_hop_limit
    """
    return self.__config_hop_limit
      
  def _set_config_hop_limit(self, v, load=False):
    """
    Setter method for config_hop_limit, mapped from YANG variable /mpls_state/lsp/instances/config_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_hop_limit() directly.

    YANG Description: lsp_config_hop_limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-hop-limit", rest_name="config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-hop-limit", rest_name="config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_hop_limit(self):
    self.__config_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-hop-limit", rest_name="config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_traffic_eng_rate_configured(self):
    """
    Getter method for config_traffic_eng_rate_configured, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_rate_configured (boolean)

    YANG Description: lsp_config_traffic_eng_rate_configured
    """
    return self.__config_traffic_eng_rate_configured
      
  def _set_config_traffic_eng_rate_configured(self, v, load=False):
    """
    Setter method for config_traffic_eng_rate_configured, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_rate_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_traffic_eng_rate_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_traffic_eng_rate_configured() directly.

    YANG Description: lsp_config_traffic_eng_rate_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-traffic-eng-rate-configured", rest_name="config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_traffic_eng_rate_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-traffic-eng-rate-configured", rest_name="config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_traffic_eng_rate_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_traffic_eng_rate_configured(self):
    self.__config_traffic_eng_rate_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-traffic-eng-rate-configured", rest_name="config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_traffic_eng_mean_rate(self):
    """
    Getter method for config_traffic_eng_mean_rate, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_mean_rate (uint32)

    YANG Description: lsp_config_traffic_eng_mean_rate
    """
    return self.__config_traffic_eng_mean_rate
      
  def _set_config_traffic_eng_mean_rate(self, v, load=False):
    """
    Setter method for config_traffic_eng_mean_rate, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_mean_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_traffic_eng_mean_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_traffic_eng_mean_rate() directly.

    YANG Description: lsp_config_traffic_eng_mean_rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-mean-rate", rest_name="config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_traffic_eng_mean_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-mean-rate", rest_name="config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_traffic_eng_mean_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_traffic_eng_mean_rate(self):
    self.__config_traffic_eng_mean_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-mean-rate", rest_name="config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_traffic_eng_max_rate(self):
    """
    Getter method for config_traffic_eng_max_rate, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_max_rate (uint32)

    YANG Description: lsp_config_traffic_eng_max_rate
    """
    return self.__config_traffic_eng_max_rate
      
  def _set_config_traffic_eng_max_rate(self, v, load=False):
    """
    Setter method for config_traffic_eng_max_rate, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_max_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_traffic_eng_max_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_traffic_eng_max_rate() directly.

    YANG Description: lsp_config_traffic_eng_max_rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-rate", rest_name="config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_traffic_eng_max_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-rate", rest_name="config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_traffic_eng_max_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_traffic_eng_max_rate(self):
    self.__config_traffic_eng_max_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-rate", rest_name="config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_traffic_eng_max_burst(self):
    """
    Getter method for config_traffic_eng_max_burst, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_max_burst (uint32)

    YANG Description: lsp_config_traffic_eng_max_burst
    """
    return self.__config_traffic_eng_max_burst
      
  def _set_config_traffic_eng_max_burst(self, v, load=False):
    """
    Setter method for config_traffic_eng_max_burst, mapped from YANG variable /mpls_state/lsp/instances/config_traffic_eng_max_burst (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_traffic_eng_max_burst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_traffic_eng_max_burst() directly.

    YANG Description: lsp_config_traffic_eng_max_burst
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-burst", rest_name="config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_traffic_eng_max_burst must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-burst", rest_name="config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_traffic_eng_max_burst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_traffic_eng_max_burst(self):
    self.__config_traffic_eng_max_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-traffic-eng-max-burst", rest_name="config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_abw_configured(self):
    """
    Getter method for config_abw_configured, mapped from YANG variable /mpls_state/lsp/instances/config_abw_configured (boolean)

    YANG Description: lsp_config_abw_configured
    """
    return self.__config_abw_configured
      
  def _set_config_abw_configured(self, v, load=False):
    """
    Setter method for config_abw_configured, mapped from YANG variable /mpls_state/lsp/instances/config_abw_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_abw_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_abw_configured() directly.

    YANG Description: lsp_config_abw_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-abw-configured", rest_name="config-abw-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_abw_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-abw-configured", rest_name="config-abw-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_abw_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_abw_configured(self):
    self.__config_abw_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-abw-configured", rest_name="config-abw-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_bfd_configured(self):
    """
    Getter method for config_bfd_configured, mapped from YANG variable /mpls_state/lsp/instances/config_bfd_configured (boolean)

    YANG Description: lsp_config_bfd_configured
    """
    return self.__config_bfd_configured
      
  def _set_config_bfd_configured(self, v, load=False):
    """
    Setter method for config_bfd_configured, mapped from YANG variable /mpls_state/lsp/instances/config_bfd_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_bfd_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_bfd_configured() directly.

    YANG Description: lsp_config_bfd_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-bfd-configured", rest_name="config-bfd-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_bfd_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-bfd-configured", rest_name="config-bfd-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_bfd_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_bfd_configured(self):
    self.__config_bfd_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-bfd-configured", rest_name="config-bfd-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_admin_group_configured(self):
    """
    Getter method for config_admin_group_configured, mapped from YANG variable /mpls_state/lsp/instances/config_admin_group_configured (boolean)

    YANG Description: lsp_config_admin_group_configured
    """
    return self.__config_admin_group_configured
      
  def _set_config_admin_group_configured(self, v, load=False):
    """
    Setter method for config_admin_group_configured, mapped from YANG variable /mpls_state/lsp/instances/config_admin_group_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_admin_group_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_admin_group_configured() directly.

    YANG Description: lsp_config_admin_group_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-admin-group-configured", rest_name="config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_admin_group_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-admin-group-configured", rest_name="config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_admin_group_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_admin_group_configured(self):
    self.__config_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-admin-group-configured", rest_name="config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_cspf_computation_mode(self):
    """
    Getter method for config_cspf_computation_mode, mapped from YANG variable /mpls_state/lsp/instances/config_cspf_computation_mode (lsp-cspf-computation-mode)

    YANG Description: lsp configured cspf computation mode
    """
    return self.__config_cspf_computation_mode
      
  def _set_config_cspf_computation_mode(self, v, load=False):
    """
    Setter method for config_cspf_computation_mode, mapped from YANG variable /mpls_state/lsp/instances/config_cspf_computation_mode (lsp-cspf-computation-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_cspf_computation_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_cspf_computation_mode() directly.

    YANG Description: lsp configured cspf computation mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="config-cspf-computation-mode", rest_name="config-cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_cspf_computation_mode must be of a type compatible with lsp-cspf-computation-mode""",
          'defined-type': "brocade-mpls-operational:lsp-cspf-computation-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="config-cspf-computation-mode", rest_name="config-cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)""",
        })

    self.__config_cspf_computation_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_cspf_computation_mode(self):
    self.__config_cspf_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="config-cspf-computation-mode", rest_name="config-cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)


  def _get_path_computed_by_cspf(self):
    """
    Getter method for path_computed_by_cspf, mapped from YANG variable /mpls_state/lsp/instances/path_computed_by_cspf (boolean)

    YANG Description: lsp_path_computed_by_cspf
    """
    return self.__path_computed_by_cspf
      
  def _set_path_computed_by_cspf(self, v, load=False):
    """
    Setter method for path_computed_by_cspf, mapped from YANG variable /mpls_state/lsp/instances/path_computed_by_cspf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_computed_by_cspf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_computed_by_cspf() directly.

    YANG Description: lsp_path_computed_by_cspf
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="path-computed-by-cspf", rest_name="path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_computed_by_cspf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-computed-by-cspf", rest_name="path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__path_computed_by_cspf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_computed_by_cspf(self):
    self.__path_computed_by_cspf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-computed-by-cspf", rest_name="path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_path_computed_by_interface_constraint(self):
    """
    Getter method for path_computed_by_interface_constraint, mapped from YANG variable /mpls_state/lsp/instances/path_computed_by_interface_constraint (boolean)

    YANG Description: lsp_path_computed_by_interface_constraint
    """
    return self.__path_computed_by_interface_constraint
      
  def _set_path_computed_by_interface_constraint(self, v, load=False):
    """
    Setter method for path_computed_by_interface_constraint, mapped from YANG variable /mpls_state/lsp/instances/path_computed_by_interface_constraint (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_computed_by_interface_constraint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_computed_by_interface_constraint() directly.

    YANG Description: lsp_path_computed_by_interface_constraint
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="path-computed-by-interface-constraint", rest_name="path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_computed_by_interface_constraint must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-computed-by-interface-constraint", rest_name="path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__path_computed_by_interface_constraint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_computed_by_interface_constraint(self):
    self.__path_computed_by_interface_constraint = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-computed-by-interface-constraint", rest_name="path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_cspf_computation_mode(self):
    """
    Getter method for cspf_computation_mode, mapped from YANG variable /mpls_state/lsp/instances/cspf_computation_mode (lsp-cspf-computation-mode)

    YANG Description: lsp cspf computation mode
    """
    return self.__cspf_computation_mode
      
  def _set_cspf_computation_mode(self, v, load=False):
    """
    Setter method for cspf_computation_mode, mapped from YANG variable /mpls_state/lsp/instances/cspf_computation_mode (lsp-cspf-computation-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_computation_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_computation_mode() directly.

    YANG Description: lsp cspf computation mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_computation_mode must be of a type compatible with lsp-cspf-computation-mode""",
          'defined-type': "brocade-mpls-operational:lsp-cspf-computation-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)""",
        })

    self.__cspf_computation_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_computation_mode(self):
    self.__cspf_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cspf-computation-mode-default': {'value': 1}, u'cspf-computation-mode-use-bypass-metric': {'value': 2}, u'cspf-computation-mode-use-igp-metric-global': {'value': 7}, u'cspf-computation-mode-use-igp-metric': {'value': 5}, u'cspf-computation-mode-use-te-metric': {'value': 4}, u'cspf-computation-mode-use-bypass-liberal': {'value': 3}, u'cspf-computation-mode-use-te-metric-global': {'value': 6}},), is_leaf=True, yang_name="cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-cspf-computation-mode', is_config=False)


  def _get_cspf_group_computation_mode_default(self):
    """
    Getter method for cspf_group_computation_mode_default, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_default (boolean)

    YANG Description: lsp_cspf_group_computation_mode_default
    """
    return self.__cspf_group_computation_mode_default
      
  def _set_cspf_group_computation_mode_default(self, v, load=False):
    """
    Setter method for cspf_group_computation_mode_default, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_computation_mode_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_computation_mode_default() directly.

    YANG Description: lsp_cspf_group_computation_mode_default
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-default", rest_name="cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_computation_mode_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-default", rest_name="cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__cspf_group_computation_mode_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_computation_mode_default(self):
    self.__cspf_group_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-default", rest_name="cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_cspf_group_computation_mode_add_penalty(self):
    """
    Getter method for cspf_group_computation_mode_add_penalty, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_add_penalty (boolean)

    YANG Description: lsp_cspf_group_computation_mode_add_penalty
    """
    return self.__cspf_group_computation_mode_add_penalty
      
  def _set_cspf_group_computation_mode_add_penalty(self, v, load=False):
    """
    Setter method for cspf_group_computation_mode_add_penalty, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_add_penalty (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_computation_mode_add_penalty is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_computation_mode_add_penalty() directly.

    YANG Description: lsp_cspf_group_computation_mode_add_penalty
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-add-penalty", rest_name="cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_computation_mode_add_penalty must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-add-penalty", rest_name="cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__cspf_group_computation_mode_add_penalty = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_computation_mode_add_penalty(self):
    self.__cspf_group_computation_mode_add_penalty = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-add-penalty", rest_name="cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_cspf_group_computation_mode_exclude_groups(self):
    """
    Getter method for cspf_group_computation_mode_exclude_groups, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_exclude_groups (boolean)

    YANG Description: lsp_cspf_group_computation_mode_exclude_groups
    """
    return self.__cspf_group_computation_mode_exclude_groups
      
  def _set_cspf_group_computation_mode_exclude_groups(self, v, load=False):
    """
    Setter method for cspf_group_computation_mode_exclude_groups, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_exclude_groups (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_computation_mode_exclude_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_computation_mode_exclude_groups() directly.

    YANG Description: lsp_cspf_group_computation_mode_exclude_groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-exclude-groups", rest_name="cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_computation_mode_exclude_groups must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-exclude-groups", rest_name="cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__cspf_group_computation_mode_exclude_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_computation_mode_exclude_groups(self):
    self.__cspf_group_computation_mode_exclude_groups = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-exclude-groups", rest_name="cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_cspf_group_computation_mode_high_cost(self):
    """
    Getter method for cspf_group_computation_mode_high_cost, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_high_cost (boolean)

    YANG Description: lsp_cspf_group_computation_mode_high_cost
    """
    return self.__cspf_group_computation_mode_high_cost
      
  def _set_cspf_group_computation_mode_high_cost(self, v, load=False):
    """
    Setter method for cspf_group_computation_mode_high_cost, mapped from YANG variable /mpls_state/lsp/instances/cspf_group_computation_mode_high_cost (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_computation_mode_high_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_computation_mode_high_cost() directly.

    YANG Description: lsp_cspf_group_computation_mode_high_cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-high-cost", rest_name="cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_computation_mode_high_cost must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-high-cost", rest_name="cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__cspf_group_computation_mode_high_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_computation_mode_high_cost(self):
    self.__cspf_group_computation_mode_high_cost = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-group-computation-mode-high-cost", rest_name="cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_cspf_path_cost(self):
    """
    Getter method for cspf_path_cost, mapped from YANG variable /mpls_state/lsp/instances/cspf_path_cost (uint32)

    YANG Description: lsp_cspf_path_cost
    """
    return self.__cspf_path_cost
      
  def _set_cspf_path_cost(self, v, load=False):
    """
    Setter method for cspf_path_cost, mapped from YANG variable /mpls_state/lsp/instances/cspf_path_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_path_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_path_cost() directly.

    YANG Description: lsp_cspf_path_cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-cost", rest_name="cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_path_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-cost", rest_name="cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__cspf_path_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_path_cost(self):
    self.__cspf_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-cost", rest_name="cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_cspf_path_area(self):
    """
    Getter method for cspf_path_area, mapped from YANG variable /mpls_state/lsp/instances/cspf_path_area (uint32)

    YANG Description: lsp_cspf_path_area
    """
    return self.__cspf_path_area
      
  def _set_cspf_path_area(self, v, load=False):
    """
    Setter method for cspf_path_area, mapped from YANG variable /mpls_state/lsp/instances/cspf_path_area (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_path_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_path_area() directly.

    YANG Description: lsp_cspf_path_area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-area", rest_name="cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_path_area must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-area", rest_name="cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__cspf_path_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_path_area(self):
    self.__cspf_path_area = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-path-area", rest_name="cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_cspf_computation_error(self):
    """
    Getter method for cspf_computation_error, mapped from YANG variable /mpls_state/lsp/instances/cspf_computation_error (uint32)

    YANG Description: lsp_cspf_computation_error
    """
    return self.__cspf_computation_error
      
  def _set_cspf_computation_error(self, v, load=False):
    """
    Setter method for cspf_computation_error, mapped from YANG variable /mpls_state/lsp/instances/cspf_computation_error (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_computation_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_computation_error() directly.

    YANG Description: lsp_cspf_computation_error
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-computation-error", rest_name="cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_computation_error must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-computation-error", rest_name="cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__cspf_computation_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_computation_error(self):
    self.__cspf_computation_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cspf-computation-error", rest_name="cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_cspf_exclude_hops_present(self):
    """
    Getter method for cspf_exclude_hops_present, mapped from YANG variable /mpls_state/lsp/instances/cspf_exclude_hops_present (boolean)

    YANG Description: lsp_cspf_exclude_hops_present
    """
    return self.__cspf_exclude_hops_present
      
  def _set_cspf_exclude_hops_present(self, v, load=False):
    """
    Setter method for cspf_exclude_hops_present, mapped from YANG variable /mpls_state/lsp/instances/cspf_exclude_hops_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_exclude_hops_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_exclude_hops_present() directly.

    YANG Description: lsp_cspf_exclude_hops_present
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="cspf-exclude-hops-present", rest_name="cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_exclude_hops_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-exclude-hops-present", rest_name="cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__cspf_exclude_hops_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_exclude_hops_present(self):
    self.__cspf_exclude_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="cspf-exclude-hops-present", rest_name="cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rsvp_session_present(self):
    """
    Getter method for rsvp_session_present, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_present (boolean)

    YANG Description: lsp_rsvp_session_present
    """
    return self.__rsvp_session_present
      
  def _set_rsvp_session_present(self, v, load=False):
    """
    Setter method for rsvp_session_present, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_present() directly.

    YANG Description: lsp_rsvp_session_present
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rsvp-session-present", rest_name="rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-present", rest_name="rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rsvp_session_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_present(self):
    self.__rsvp_session_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-present", rest_name="rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rsvp_session_state_up(self):
    """
    Getter method for rsvp_session_state_up, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_state_up (boolean)

    YANG Description: lsp_rsvp_session_state_up
    """
    return self.__rsvp_session_state_up
      
  def _set_rsvp_session_state_up(self, v, load=False):
    """
    Setter method for rsvp_session_state_up, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_state_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_state_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_state_up() directly.

    YANG Description: lsp_rsvp_session_state_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rsvp-session-state-up", rest_name="rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_state_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-state-up", rest_name="rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rsvp_session_state_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_state_up(self):
    self.__rsvp_session_state_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-state-up", rest_name="rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rsvp_session_state(self):
    """
    Getter method for rsvp_session_state, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_state (uint8)

    YANG Description: lsp_rsvp_session_state
    """
    return self.__rsvp_session_state
      
  def _set_rsvp_session_state(self, v, load=False):
    """
    Setter method for rsvp_session_state, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_state (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_state() directly.

    YANG Description: lsp_rsvp_session_state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rsvp-session-state", rest_name="rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_state must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rsvp-session-state", rest_name="rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__rsvp_session_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_state(self):
    self.__rsvp_session_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rsvp-session-state", rest_name="rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_rsvp_session_path_error_code(self):
    """
    Getter method for rsvp_session_path_error_code, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_path_error_code (uint32)

    YANG Description: lsp_rsvp_session_path_error_code
    """
    return self.__rsvp_session_path_error_code
      
  def _set_rsvp_session_path_error_code(self, v, load=False):
    """
    Setter method for rsvp_session_path_error_code, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_path_error_code (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_path_error_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_path_error_code() directly.

    YANG Description: lsp_rsvp_session_path_error_code
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-code", rest_name="rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_path_error_code must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-code", rest_name="rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rsvp_session_path_error_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_path_error_code(self):
    self.__rsvp_session_path_error_code = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-code", rest_name="rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_rsvp_session_path_error_value(self):
    """
    Getter method for rsvp_session_path_error_value, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_path_error_value (uint32)

    YANG Description: lsp_rsvp_session_path_error_value
    """
    return self.__rsvp_session_path_error_value
      
  def _set_rsvp_session_path_error_value(self, v, load=False):
    """
    Setter method for rsvp_session_path_error_value, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_path_error_value (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_path_error_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_path_error_value() directly.

    YANG Description: lsp_rsvp_session_path_error_value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-value", rest_name="rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_path_error_value must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-value", rest_name="rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rsvp_session_path_error_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_path_error_value(self):
    self.__rsvp_session_path_error_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-session-path-error-value", rest_name="rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_rsvp_session_path_error_node_address(self):
    """
    Getter method for rsvp_session_path_error_node_address, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_path_error_node_address (inet:ipv4-address)

    YANG Description: lsp_rsvp_session_path_error_node_address
    """
    return self.__rsvp_session_path_error_node_address
      
  def _set_rsvp_session_path_error_node_address(self, v, load=False):
    """
    Setter method for rsvp_session_path_error_node_address, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_path_error_node_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_path_error_node_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_path_error_node_address() directly.

    YANG Description: lsp_rsvp_session_path_error_node_address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rsvp-session-path-error-node-address", rest_name="rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_path_error_node_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rsvp-session-path-error-node-address", rest_name="rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__rsvp_session_path_error_node_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_path_error_node_address(self):
    self.__rsvp_session_path_error_node_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rsvp-session-path-error-node-address", rest_name="rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_rsvp_session_rro_hops_present(self):
    """
    Getter method for rsvp_session_rro_hops_present, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_rro_hops_present (boolean)

    YANG Description: lsp_rsvp_session_rro_hops_present
    """
    return self.__rsvp_session_rro_hops_present
      
  def _set_rsvp_session_rro_hops_present(self, v, load=False):
    """
    Setter method for rsvp_session_rro_hops_present, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_rro_hops_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_rro_hops_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_rro_hops_present() directly.

    YANG Description: lsp_rsvp_session_rro_hops_present
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rsvp-session-rro-hops-present", rest_name="rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_rro_hops_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-rro-hops-present", rest_name="rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rsvp_session_rro_hops_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_rro_hops_present(self):
    self.__rsvp_session_rro_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-session-rro-hops-present", rest_name="rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_exclude_interface_configured(self):
    """
    Getter method for config_exclude_interface_configured, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_interface_configured (boolean)

    YANG Description: lsp_config_exclude_interface_configured
    """
    return self.__config_exclude_interface_configured
      
  def _set_config_exclude_interface_configured(self, v, load=False):
    """
    Setter method for config_exclude_interface_configured, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_interface_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_exclude_interface_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_exclude_interface_configured() directly.

    YANG Description: lsp_config_exclude_interface_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-configured", rest_name="config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_exclude_interface_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-configured", rest_name="config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_exclude_interface_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_exclude_interface_configured(self):
    self.__config_exclude_interface_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-exclude-interface-configured", rest_name="config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_maximum_bandwidth(self):
    """
    Getter method for maximum_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/maximum_bandwidth (uint32)

    YANG Description: lsp_maximum_bandwidth
    """
    return self.__maximum_bandwidth
      
  def _set_maximum_bandwidth(self, v, load=False):
    """
    Setter method for maximum_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/maximum_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maximum_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maximum_bandwidth() directly.

    YANG Description: lsp_maximum_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-bandwidth", rest_name="maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maximum_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-bandwidth", rest_name="maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__maximum_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maximum_bandwidth(self):
    self.__maximum_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maximum-bandwidth", rest_name="maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_0_bandwidth(self):
    """
    Getter method for unreserved_priority_0_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_0_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_0_bandwidth
    """
    return self.__unreserved_priority_0_bandwidth
      
  def _set_unreserved_priority_0_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_0_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_0_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_0_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_0_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_0_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-0-bandwidth", rest_name="unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_0_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-0-bandwidth", rest_name="unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_0_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_0_bandwidth(self):
    self.__unreserved_priority_0_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-0-bandwidth", rest_name="unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_1_bandwidth(self):
    """
    Getter method for unreserved_priority_1_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_1_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_1_bandwidth
    """
    return self.__unreserved_priority_1_bandwidth
      
  def _set_unreserved_priority_1_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_1_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_1_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_1_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_1_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_1_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-1-bandwidth", rest_name="unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_1_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-1-bandwidth", rest_name="unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_1_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_1_bandwidth(self):
    self.__unreserved_priority_1_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-1-bandwidth", rest_name="unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_2_bandwidth(self):
    """
    Getter method for unreserved_priority_2_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_2_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_2_bandwidth
    """
    return self.__unreserved_priority_2_bandwidth
      
  def _set_unreserved_priority_2_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_2_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_2_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_2_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_2_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_2_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-2-bandwidth", rest_name="unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_2_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-2-bandwidth", rest_name="unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_2_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_2_bandwidth(self):
    self.__unreserved_priority_2_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-2-bandwidth", rest_name="unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_3_bandwidth(self):
    """
    Getter method for unreserved_priority_3_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_3_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_3_bandwidth
    """
    return self.__unreserved_priority_3_bandwidth
      
  def _set_unreserved_priority_3_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_3_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_3_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_3_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_3_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_3_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-3-bandwidth", rest_name="unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_3_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-3-bandwidth", rest_name="unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_3_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_3_bandwidth(self):
    self.__unreserved_priority_3_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-3-bandwidth", rest_name="unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_4_bandwidth(self):
    """
    Getter method for unreserved_priority_4_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_4_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_4_bandwidth
    """
    return self.__unreserved_priority_4_bandwidth
      
  def _set_unreserved_priority_4_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_4_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_4_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_4_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_4_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_4_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-4-bandwidth", rest_name="unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_4_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-4-bandwidth", rest_name="unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_4_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_4_bandwidth(self):
    self.__unreserved_priority_4_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-4-bandwidth", rest_name="unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_5_bandwidth(self):
    """
    Getter method for unreserved_priority_5_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_5_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_5_bandwidth
    """
    return self.__unreserved_priority_5_bandwidth
      
  def _set_unreserved_priority_5_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_5_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_5_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_5_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_5_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_5_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-5-bandwidth", rest_name="unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_5_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-5-bandwidth", rest_name="unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_5_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_5_bandwidth(self):
    self.__unreserved_priority_5_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-5-bandwidth", rest_name="unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_6_bandwidth(self):
    """
    Getter method for unreserved_priority_6_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_6_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_6_bandwidth
    """
    return self.__unreserved_priority_6_bandwidth
      
  def _set_unreserved_priority_6_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_6_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_6_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_6_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_6_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_6_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-6-bandwidth", rest_name="unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_6_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-6-bandwidth", rest_name="unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_6_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_6_bandwidth(self):
    self.__unreserved_priority_6_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-6-bandwidth", rest_name="unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_unreserved_priority_7_bandwidth(self):
    """
    Getter method for unreserved_priority_7_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_7_bandwidth (uint32)

    YANG Description: lsp_unreserved_priority_7_bandwidth
    """
    return self.__unreserved_priority_7_bandwidth
      
  def _set_unreserved_priority_7_bandwidth(self, v, load=False):
    """
    Setter method for unreserved_priority_7_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/unreserved_priority_7_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_unreserved_priority_7_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_unreserved_priority_7_bandwidth() directly.

    YANG Description: lsp_unreserved_priority_7_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-7-bandwidth", rest_name="unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """unreserved_priority_7_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-7-bandwidth", rest_name="unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__unreserved_priority_7_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_unreserved_priority_7_bandwidth(self):
    self.__unreserved_priority_7_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="unreserved-priority-7-bandwidth", rest_name="unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_frr_configured(self):
    """
    Getter method for config_frr_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_configured (boolean)

    YANG Description: lsp_config_frr_configured
    """
    return self.__config_frr_configured
      
  def _set_config_frr_configured(self, v, load=False):
    """
    Setter method for config_frr_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_configured() directly.

    YANG Description: lsp_config_frr_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-configured", rest_name="config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-configured", rest_name="config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_configured(self):
    self.__config_frr_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-configured", rest_name="config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_one_to_one(self):
    """
    Getter method for config_frr_one_to_one, mapped from YANG variable /mpls_state/lsp/instances/config_frr_one_to_one (boolean)

    YANG Description: lsp_config_frr_one_to_one
    """
    return self.__config_frr_one_to_one
      
  def _set_config_frr_one_to_one(self, v, load=False):
    """
    Setter method for config_frr_one_to_one, mapped from YANG variable /mpls_state/lsp/instances/config_frr_one_to_one (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_one_to_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_one_to_one() directly.

    YANG Description: lsp_config_frr_one_to_one
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-one", rest_name="config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_one_to_one must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-one", rest_name="config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_one_to_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_one_to_one(self):
    self.__config_frr_one_to_one = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-one", rest_name="config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_one_to_many(self):
    """
    Getter method for config_frr_one_to_many, mapped from YANG variable /mpls_state/lsp/instances/config_frr_one_to_many (boolean)

    YANG Description: lsp_config_frr_one_to_many
    """
    return self.__config_frr_one_to_many
      
  def _set_config_frr_one_to_many(self, v, load=False):
    """
    Setter method for config_frr_one_to_many, mapped from YANG variable /mpls_state/lsp/instances/config_frr_one_to_many (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_one_to_many is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_one_to_many() directly.

    YANG Description: lsp_config_frr_one_to_many
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-many", rest_name="config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_one_to_many must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-many", rest_name="config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_one_to_many = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_one_to_many(self):
    self.__config_frr_one_to_many = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-one-to-many", rest_name="config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_priority_configured(self):
    """
    Getter method for config_frr_priority_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_priority_configured (boolean)

    YANG Description: lsp_config_frr_priority_configured
    """
    return self.__config_frr_priority_configured
      
  def _set_config_frr_priority_configured(self, v, load=False):
    """
    Setter method for config_frr_priority_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_priority_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_priority_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_priority_configured() directly.

    YANG Description: lsp_config_frr_priority_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-priority-configured", rest_name="config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_priority_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-priority-configured", rest_name="config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_priority_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_priority_configured(self):
    self.__config_frr_priority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-priority-configured", rest_name="config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_setup_priority(self):
    """
    Getter method for config_frr_setup_priority, mapped from YANG variable /mpls_state/lsp/instances/config_frr_setup_priority (uint8)

    YANG Description: lsp_config_frr_setup_priority
    """
    return self.__config_frr_setup_priority
      
  def _set_config_frr_setup_priority(self, v, load=False):
    """
    Setter method for config_frr_setup_priority, mapped from YANG variable /mpls_state/lsp/instances/config_frr_setup_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_setup_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_setup_priority() directly.

    YANG Description: lsp_config_frr_setup_priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-setup-priority", rest_name="config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_setup_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-setup-priority", rest_name="config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_frr_setup_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_setup_priority(self):
    self.__config_frr_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-setup-priority", rest_name="config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_frr_holding_priority(self):
    """
    Getter method for config_frr_holding_priority, mapped from YANG variable /mpls_state/lsp/instances/config_frr_holding_priority (uint8)

    YANG Description: lsp_config_frr_holding_priority
    """
    return self.__config_frr_holding_priority
      
  def _set_config_frr_holding_priority(self, v, load=False):
    """
    Setter method for config_frr_holding_priority, mapped from YANG variable /mpls_state/lsp/instances/config_frr_holding_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_holding_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_holding_priority() directly.

    YANG Description: lsp_config_frr_holding_priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-holding-priority", rest_name="config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_holding_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-holding-priority", rest_name="config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_frr_holding_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_holding_priority(self):
    self.__config_frr_holding_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-holding-priority", rest_name="config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_frr_hop_limit_configured(self):
    """
    Getter method for config_frr_hop_limit_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_hop_limit_configured (boolean)

    YANG Description: lsp_config_frr_hop_limit_configured
    """
    return self.__config_frr_hop_limit_configured
      
  def _set_config_frr_hop_limit_configured(self, v, load=False):
    """
    Setter method for config_frr_hop_limit_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_hop_limit_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_hop_limit_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_hop_limit_configured() directly.

    YANG Description: lsp_config_frr_hop_limit_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-hop-limit-configured", rest_name="config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_hop_limit_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-hop-limit-configured", rest_name="config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_hop_limit_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_hop_limit_configured(self):
    self.__config_frr_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-hop-limit-configured", rest_name="config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_hop_limit(self):
    """
    Getter method for config_frr_hop_limit, mapped from YANG variable /mpls_state/lsp/instances/config_frr_hop_limit (uint8)

    YANG Description: lsp_config_frr_hop_limit
    """
    return self.__config_frr_hop_limit
      
  def _set_config_frr_hop_limit(self, v, load=False):
    """
    Setter method for config_frr_hop_limit, mapped from YANG variable /mpls_state/lsp/instances/config_frr_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_hop_limit() directly.

    YANG Description: lsp_config_frr_hop_limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-hop-limit", rest_name="config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-hop-limit", rest_name="config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__config_frr_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_hop_limit(self):
    self.__config_frr_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="config-frr-hop-limit", rest_name="config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_config_frr_bandwidth_configured(self):
    """
    Getter method for config_frr_bandwidth_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_bandwidth_configured (boolean)

    YANG Description: lsp_config_frr_bandwidth_configured
    """
    return self.__config_frr_bandwidth_configured
      
  def _set_config_frr_bandwidth_configured(self, v, load=False):
    """
    Setter method for config_frr_bandwidth_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_bandwidth_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_bandwidth_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_bandwidth_configured() directly.

    YANG Description: lsp_config_frr_bandwidth_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-bandwidth-configured", rest_name="config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_bandwidth_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-bandwidth-configured", rest_name="config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_bandwidth_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_bandwidth_configured(self):
    self.__config_frr_bandwidth_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-bandwidth-configured", rest_name="config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_config_frr_bandwidth(self):
    """
    Getter method for config_frr_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/config_frr_bandwidth (uint32)

    YANG Description: lsp_config_frr_bandwidth
    """
    return self.__config_frr_bandwidth
      
  def _set_config_frr_bandwidth(self, v, load=False):
    """
    Setter method for config_frr_bandwidth, mapped from YANG variable /mpls_state/lsp/instances/config_frr_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_bandwidth() directly.

    YANG Description: lsp_config_frr_bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-bandwidth", rest_name="config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-bandwidth", rest_name="config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__config_frr_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_bandwidth(self):
    self.__config_frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="config-frr-bandwidth", rest_name="config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_config_frr_admin_group_configured(self):
    """
    Getter method for config_frr_admin_group_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_admin_group_configured (boolean)

    YANG Description: lsp_config_frr_admin_group_configured
    """
    return self.__config_frr_admin_group_configured
      
  def _set_config_frr_admin_group_configured(self, v, load=False):
    """
    Setter method for config_frr_admin_group_configured, mapped from YANG variable /mpls_state/lsp/instances/config_frr_admin_group_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_admin_group_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_admin_group_configured() directly.

    YANG Description: lsp_config_frr_admin_group_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="config-frr-admin-group-configured", rest_name="config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_admin_group_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-admin-group-configured", rest_name="config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__config_frr_admin_group_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_admin_group_configured(self):
    self.__config_frr_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="config-frr-admin-group-configured", rest_name="config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_reoptimize_ignore_count(self):
    """
    Getter method for reoptimize_ignore_count, mapped from YANG variable /mpls_state/lsp/instances/reoptimize_ignore_count (uint32)

    YANG Description: lsp_reoptimize_ignore_count
    """
    return self.__reoptimize_ignore_count
      
  def _set_reoptimize_ignore_count(self, v, load=False):
    """
    Setter method for reoptimize_ignore_count, mapped from YANG variable /mpls_state/lsp/instances/reoptimize_ignore_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reoptimize_ignore_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reoptimize_ignore_count() directly.

    YANG Description: lsp_reoptimize_ignore_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-ignore-count", rest_name="reoptimize-ignore-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reoptimize_ignore_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-ignore-count", rest_name="reoptimize-ignore-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__reoptimize_ignore_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reoptimize_ignore_count(self):
    self.__reoptimize_ignore_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-ignore-count", rest_name="reoptimize-ignore-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_reoptimize_time_count(self):
    """
    Getter method for reoptimize_time_count, mapped from YANG variable /mpls_state/lsp/instances/reoptimize_time_count (uint32)

    YANG Description: lsp_reoptimize_time_count
    """
    return self.__reoptimize_time_count
      
  def _set_reoptimize_time_count(self, v, load=False):
    """
    Setter method for reoptimize_time_count, mapped from YANG variable /mpls_state/lsp/instances/reoptimize_time_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reoptimize_time_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reoptimize_time_count() directly.

    YANG Description: lsp_reoptimize_time_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-time-count", rest_name="reoptimize-time-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reoptimize_time_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-time-count", rest_name="reoptimize-time-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__reoptimize_time_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reoptimize_time_count(self):
    self.__reoptimize_time_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-time-count", rest_name="reoptimize-time-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_frr_configured(self):
    """
    Getter method for instance_frr_configured, mapped from YANG variable /mpls_state/lsp/instances/instance_frr_configured (uint32)

    YANG Description: lsp_instance_frr_configured
    """
    return self.__instance_frr_configured
      
  def _set_instance_frr_configured(self, v, load=False):
    """
    Setter method for instance_frr_configured, mapped from YANG variable /mpls_state/lsp/instances/instance_frr_configured (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_frr_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_frr_configured() directly.

    YANG Description: lsp_instance_frr_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-configured", rest_name="instance-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_frr_configured must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-configured", rest_name="instance-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_frr_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_frr_configured(self):
    self.__instance_frr_configured = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-configured", rest_name="instance-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_frr_up(self):
    """
    Getter method for instance_frr_up, mapped from YANG variable /mpls_state/lsp/instances/instance_frr_up (uint32)

    YANG Description: lsp_instance_frr_up
    """
    return self.__instance_frr_up
      
  def _set_instance_frr_up(self, v, load=False):
    """
    Setter method for instance_frr_up, mapped from YANG variable /mpls_state/lsp/instances/instance_frr_up (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_frr_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_frr_up() directly.

    YANG Description: lsp_instance_frr_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-up", rest_name="instance-frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_frr_up must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-up", rest_name="instance-frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_frr_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_frr_up(self):
    self.__instance_frr_up = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-up", rest_name="instance-frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_frr_active(self):
    """
    Getter method for instance_frr_active, mapped from YANG variable /mpls_state/lsp/instances/instance_frr_active (uint32)

    YANG Description: lsp_instance_frr_active
    """
    return self.__instance_frr_active
      
  def _set_instance_frr_active(self, v, load=False):
    """
    Setter method for instance_frr_active, mapped from YANG variable /mpls_state/lsp/instances/instance_frr_active (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_frr_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_frr_active() directly.

    YANG Description: lsp_instance_frr_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-active", rest_name="instance-frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_frr_active must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-active", rest_name="instance-frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_frr_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_frr_active(self):
    self.__instance_frr_active = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-frr-active", rest_name="instance-frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_out_port_id(self):
    """
    Getter method for instance_out_port_id, mapped from YANG variable /mpls_state/lsp/instances/instance_out_port_id (uint32)

    YANG Description: lsp_instance_out_port_id
    """
    return self.__instance_out_port_id
      
  def _set_instance_out_port_id(self, v, load=False):
    """
    Setter method for instance_out_port_id, mapped from YANG variable /mpls_state/lsp/instances/instance_out_port_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_out_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_out_port_id() directly.

    YANG Description: lsp_instance_out_port_id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-port-id", rest_name="instance-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_out_port_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-port-id", rest_name="instance-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_out_port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_out_port_id(self):
    self.__instance_out_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-port-id", rest_name="instance-out-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_out_port_name(self):
    """
    Getter method for instance_out_port_name, mapped from YANG variable /mpls_state/lsp/instances/instance_out_port_name (string)

    YANG Description: lsp_instance_out_port_name
    """
    return self.__instance_out_port_name
      
  def _set_instance_out_port_name(self, v, load=False):
    """
    Setter method for instance_out_port_name, mapped from YANG variable /mpls_state/lsp/instances/instance_out_port_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_out_port_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_out_port_name() directly.

    YANG Description: lsp_instance_out_port_name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="instance-out-port-name", rest_name="instance-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_out_port_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="instance-out-port-name", rest_name="instance-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__instance_out_port_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_out_port_name(self):
    self.__instance_out_port_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="instance-out-port-name", rest_name="instance-out-port-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_instance_out_label(self):
    """
    Getter method for instance_out_label, mapped from YANG variable /mpls_state/lsp/instances/instance_out_label (uint32)

    YANG Description: lsp_instance_out_label
    """
    return self.__instance_out_label
      
  def _set_instance_out_label(self, v, load=False):
    """
    Setter method for instance_out_label, mapped from YANG variable /mpls_state/lsp/instances/instance_out_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_out_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_out_label() directly.

    YANG Description: lsp_instance_out_label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-label", rest_name="instance-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_out_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-label", rest_name="instance-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_out_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_out_label(self):
    self.__instance_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-out-label", rest_name="instance-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_revert_time(self):
    """
    Getter method for instance_revert_time, mapped from YANG variable /mpls_state/lsp/instances/instance_revert_time (uint32)

    YANG Description: lsp_instance_revert_time
    """
    return self.__instance_revert_time
      
  def _set_instance_revert_time(self, v, load=False):
    """
    Setter method for instance_revert_time, mapped from YANG variable /mpls_state/lsp/instances/instance_revert_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_revert_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_revert_time() directly.

    YANG Description: lsp_instance_revert_time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-revert-time", rest_name="instance-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_revert_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-revert-time", rest_name="instance-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_revert_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_revert_time(self):
    self.__instance_revert_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-revert-time", rest_name="instance-revert-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_retry_count(self):
    """
    Getter method for instance_retry_count, mapped from YANG variable /mpls_state/lsp/instances/instance_retry_count (uint32)

    YANG Description: lsp_instance_retry_count
    """
    return self.__instance_retry_count
      
  def _set_instance_retry_count(self, v, load=False):
    """
    Setter method for instance_retry_count, mapped from YANG variable /mpls_state/lsp/instances/instance_retry_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_retry_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_retry_count() directly.

    YANG Description: lsp_instance_retry_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-retry-count", rest_name="instance-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_retry_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-retry-count", rest_name="instance-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_retry_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_retry_count(self):
    self.__instance_retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-retry-count", rest_name="instance-retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_up_down_count(self):
    """
    Getter method for instance_up_down_count, mapped from YANG variable /mpls_state/lsp/instances/instance_up_down_count (uint32)

    YANG Description: lsp_instance_up_down_count
    """
    return self.__instance_up_down_count
      
  def _set_instance_up_down_count(self, v, load=False):
    """
    Setter method for instance_up_down_count, mapped from YANG variable /mpls_state/lsp/instances/instance_up_down_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_up_down_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_up_down_count() directly.

    YANG Description: lsp_instance_up_down_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-up-down-count", rest_name="instance-up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_up_down_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-up-down-count", rest_name="instance-up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__instance_up_down_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_up_down_count(self):
    self.__instance_up_down_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="instance-up-down-count", rest_name="instance-up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_instance_metric(self):
    """
    Getter method for instance_metric, mapped from YANG variable /mpls_state/lsp/instances/instance_metric (uint8)

    YANG Description: lsp_instance_metric
    """
    return self.__instance_metric
      
  def _set_instance_metric(self, v, load=False):
    """
    Setter method for instance_metric, mapped from YANG variable /mpls_state/lsp/instances/instance_metric (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_metric() directly.

    YANG Description: lsp_instance_metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="instance-metric", rest_name="instance-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_metric must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="instance-metric", rest_name="instance-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__instance_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_metric(self):
    self.__instance_metric = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="instance-metric", rest_name="instance-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_instance_down_reason(self):
    """
    Getter method for instance_down_reason, mapped from YANG variable /mpls_state/lsp/instances/instance_down_reason (string)

    YANG Description: lsp_instance_down_reason
    """
    return self.__instance_down_reason
      
  def _set_instance_down_reason(self, v, load=False):
    """
    Setter method for instance_down_reason, mapped from YANG variable /mpls_state/lsp/instances/instance_down_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_instance_down_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_instance_down_reason() directly.

    YANG Description: lsp_instance_down_reason
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="instance-down-reason", rest_name="instance-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """instance_down_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="instance-down-reason", rest_name="instance-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__instance_down_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_instance_down_reason(self):
    self.__instance_down_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="instance-down-reason", rest_name="instance-down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_config_exclude_interfaces(self):
    """
    Getter method for config_exclude_interfaces, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_interfaces (list)

    YANG Description: MPLS LSP admin group
    """
    return self.__config_exclude_interfaces
      
  def _set_config_exclude_interfaces(self, v, load=False):
    """
    Setter method for config_exclude_interfaces, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_interfaces (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_exclude_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_exclude_interfaces() directly.

    YANG Description: MPLS LSP admin group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("exclude_interface_name",config_exclude_interfaces.config_exclude_interfaces, yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='exclude-interface-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_exclude_interfaces must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("exclude_interface_name",config_exclude_interfaces.config_exclude_interfaces, yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='exclude-interface-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_exclude_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_exclude_interfaces(self):
    self.__config_exclude_interfaces = YANGDynClass(base=YANGListType("exclude_interface_name",config_exclude_interfaces.config_exclude_interfaces, yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='exclude-interface-name', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}), is_container='list', yang_name="config-exclude-interfaces", rest_name="config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-exclude-interface', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_config_exclude_any(self):
    """
    Getter method for config_exclude_any, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_any (list)
    """
    return self.__config_exclude_any
      
  def _set_config_exclude_any(self, v, load=False):
    """
    Setter method for config_exclude_any, mapped from YANG variable /mpls_state/lsp/instances/config_exclude_any (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_exclude_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_exclude_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("admin_group_id",config_exclude_any.config_exclude_any, yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}), is_container='list', yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_exclude_any must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("admin_group_id",config_exclude_any.config_exclude_any, yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}), is_container='list', yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_exclude_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_exclude_any(self):
    self.__config_exclude_any = YANGDynClass(base=YANGListType("admin_group_id",config_exclude_any.config_exclude_any, yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}), is_container='list', yang_name="config-exclude-any", rest_name="config-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_config_include_any(self):
    """
    Getter method for config_include_any, mapped from YANG variable /mpls_state/lsp/instances/config_include_any (list)
    """
    return self.__config_include_any
      
  def _set_config_include_any(self, v, load=False):
    """
    Setter method for config_include_any, mapped from YANG variable /mpls_state/lsp/instances/config_include_any (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_include_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_include_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("admin_group_id",config_include_any.config_include_any, yang_name="config-include-any", rest_name="config-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}), is_container='list', yang_name="config-include-any", rest_name="config-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_include_any must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("admin_group_id",config_include_any.config_include_any, yang_name="config-include-any", rest_name="config-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}), is_container='list', yang_name="config-include-any", rest_name="config-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_include_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_include_any(self):
    self.__config_include_any = YANGDynClass(base=YANGListType("admin_group_id",config_include_any.config_include_any, yang_name="config-include-any", rest_name="config-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}), is_container='list', yang_name="config-include-any", rest_name="config-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_config_include_all(self):
    """
    Getter method for config_include_all, mapped from YANG variable /mpls_state/lsp/instances/config_include_all (list)
    """
    return self.__config_include_all
      
  def _set_config_include_all(self, v, load=False):
    """
    Setter method for config_include_all, mapped from YANG variable /mpls_state/lsp/instances/config_include_all (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_include_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_include_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("admin_group_id",config_include_all.config_include_all, yang_name="config-include-all", rest_name="config-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}), is_container='list', yang_name="config-include-all", rest_name="config-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_include_all must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("admin_group_id",config_include_all.config_include_all, yang_name="config-include-all", rest_name="config-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}), is_container='list', yang_name="config-include-all", rest_name="config-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_include_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_include_all(self):
    self.__config_include_all = YANGDynClass(base=YANGListType("admin_group_id",config_include_all.config_include_all, yang_name="config-include-all", rest_name="config-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}), is_container='list', yang_name="config-include-all", rest_name="config-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_cspf_path_hops(self):
    """
    Getter method for cspf_path_hops, mapped from YANG variable /mpls_state/lsp/instances/cspf_path_hops (list)
    """
    return self.__cspf_path_hops
      
  def _set_cspf_path_hops(self, v, load=False):
    """
    Setter method for cspf_path_hops, mapped from YANG variable /mpls_state/lsp/instances/cspf_path_hops (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_path_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_path_hops() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("hop_index hop_address",cspf_path_hops.cspf_path_hops, yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}), is_container='list', yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_path_hops must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("hop_index hop_address",cspf_path_hops.cspf_path_hops, yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}), is_container='list', yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__cspf_path_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_path_hops(self):
    self.__cspf_path_hops = YANGDynClass(base=YANGListType("hop_index hop_address",cspf_path_hops.cspf_path_hops, yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}), is_container='list', yang_name="cspf-path-hops", rest_name="cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-path-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_cspf_exclude_hops(self):
    """
    Getter method for cspf_exclude_hops, mapped from YANG variable /mpls_state/lsp/instances/cspf_exclude_hops (list)
    """
    return self.__cspf_exclude_hops
      
  def _set_cspf_exclude_hops(self, v, load=False):
    """
    Setter method for cspf_exclude_hops, mapped from YANG variable /mpls_state/lsp/instances/cspf_exclude_hops (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_exclude_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_exclude_hops() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("hop_index hop_address",cspf_exclude_hops.cspf_exclude_hops, yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}), is_container='list', yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_exclude_hops must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("hop_index hop_address",cspf_exclude_hops.cspf_exclude_hops, yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}), is_container='list', yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__cspf_exclude_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_exclude_hops(self):
    self.__cspf_exclude_hops = YANGDynClass(base=YANGListType("hop_index hop_address",cspf_exclude_hops.cspf_exclude_hops, yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}), is_container='list', yang_name="cspf-exclude-hops", rest_name="cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-cspf-exclude-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_rsvp_session_rro_hops(self):
    """
    Getter method for rsvp_session_rro_hops, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_rro_hops (list)
    """
    return self.__rsvp_session_rro_hops
      
  def _set_rsvp_session_rro_hops(self, v, load=False):
    """
    Setter method for rsvp_session_rro_hops, mapped from YANG variable /mpls_state/lsp/instances/rsvp_session_rro_hops (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_session_rro_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_session_rro_hops() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("hop_index hop_address",rsvp_session_rro_hops.rsvp_session_rro_hops, yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}), is_container='list', yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_session_rro_hops must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("hop_index hop_address",rsvp_session_rro_hops.rsvp_session_rro_hops, yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}), is_container='list', yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__rsvp_session_rro_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_session_rro_hops(self):
    self.__rsvp_session_rro_hops = YANGDynClass(base=YANGListType("hop_index hop_address",rsvp_session_rro_hops.rsvp_session_rro_hops, yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='hop-index hop-address', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}), is_container='list', yang_name="rsvp-session-rro-hops", rest_name="rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-hop-rsvp-session-rro-hops-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_config_frr_exclude_any(self):
    """
    Getter method for config_frr_exclude_any, mapped from YANG variable /mpls_state/lsp/instances/config_frr_exclude_any (list)
    """
    return self.__config_frr_exclude_any
      
  def _set_config_frr_exclude_any(self, v, load=False):
    """
    Setter method for config_frr_exclude_any, mapped from YANG variable /mpls_state/lsp/instances/config_frr_exclude_any (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_exclude_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_exclude_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("admin_group_id",config_frr_exclude_any.config_frr_exclude_any, yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}), is_container='list', yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_exclude_any must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("admin_group_id",config_frr_exclude_any.config_frr_exclude_any, yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}), is_container='list', yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_frr_exclude_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_exclude_any(self):
    self.__config_frr_exclude_any = YANGDynClass(base=YANGListType("admin_group_id",config_frr_exclude_any.config_frr_exclude_any, yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}), is_container='list', yang_name="config-frr-exclude-any", rest_name="config-frr-exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-exclude-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_config_frr_include_any(self):
    """
    Getter method for config_frr_include_any, mapped from YANG variable /mpls_state/lsp/instances/config_frr_include_any (list)
    """
    return self.__config_frr_include_any
      
  def _set_config_frr_include_any(self, v, load=False):
    """
    Setter method for config_frr_include_any, mapped from YANG variable /mpls_state/lsp/instances/config_frr_include_any (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_include_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_include_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("admin_group_id",config_frr_include_any.config_frr_include_any, yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}), is_container='list', yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_include_any must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("admin_group_id",config_frr_include_any.config_frr_include_any, yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}), is_container='list', yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_frr_include_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_include_any(self):
    self.__config_frr_include_any = YANGDynClass(base=YANGListType("admin_group_id",config_frr_include_any.config_frr_include_any, yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}), is_container='list', yang_name="config-frr-include-any", rest_name="config-frr-include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-any-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_config_frr_include_all(self):
    """
    Getter method for config_frr_include_all, mapped from YANG variable /mpls_state/lsp/instances/config_frr_include_all (list)
    """
    return self.__config_frr_include_all
      
  def _set_config_frr_include_all(self, v, load=False):
    """
    Setter method for config_frr_include_all, mapped from YANG variable /mpls_state/lsp/instances/config_frr_include_all (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_frr_include_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_frr_include_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("admin_group_id",config_frr_include_all.config_frr_include_all, yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}), is_container='list', yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_frr_include_all must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("admin_group_id",config_frr_include_all.config_frr_include_all, yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}), is_container='list', yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__config_frr_include_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_frr_include_all(self):
    self.__config_frr_include_all = YANGDynClass(base=YANGListType("admin_group_id",config_frr_include_all.config_frr_include_all, yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='admin-group-id', extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}), is_container='list', yang_name="config-frr-include-all", rest_name="config-frr-include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-lsp-admin-group-config-frr-include-all-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  instance_id = __builtin__.property(_get_instance_id)
  lsp_id = __builtin__.property(_get_lsp_id)
  current_instance = __builtin__.property(_get_current_instance)
  new_instance = __builtin__.property(_get_new_instance)
  old_instance = __builtin__.property(_get_old_instance)
  is_primary = __builtin__.property(_get_is_primary)
  is_current_secondary = __builtin__.property(_get_is_current_secondary)
  is_selected_secondary = __builtin__.property(_get_is_selected_secondary)
  instance_admin_up = __builtin__.property(_get_instance_admin_up)
  instance_is_up = __builtin__.property(_get_instance_is_up)
  instance_is_active = __builtin__.property(_get_instance_is_active)
  is_adaptive = __builtin__.property(_get_is_adaptive)
  is_bypass = __builtin__.property(_get_is_bypass)
  is_dynamic_bypass = __builtin__.property(_get_is_dynamic_bypass)
  config_admin_up = __builtin__.property(_get_config_admin_up)
  config_from_address_configured = __builtin__.property(_get_config_from_address_configured)
  config_from_address = __builtin__.property(_get_config_from_address)
  config_to_address = __builtin__.property(_get_config_to_address)
  config_type_bypass = __builtin__.property(_get_config_type_bypass)
  config_type_dynamic = __builtin__.property(_get_config_type_dynamic)
  config_adaptive = __builtin__.property(_get_config_adaptive)
  config_ospf_area = __builtin__.property(_get_config_ospf_area)
  config_isis_level = __builtin__.property(_get_config_isis_level)
  config_number_of_retries_configured = __builtin__.property(_get_config_number_of_retries_configured)
  config_number_of_retries = __builtin__.property(_get_config_number_of_retries)
  config_path_select_mode = __builtin__.property(_get_config_path_select_mode)
  config_path_selected_path = __builtin__.property(_get_config_path_selected_path)
  config_path_selected_secondary_name = __builtin__.property(_get_config_path_selected_secondary_name)
  config_revert_time_configured = __builtin__.property(_get_config_revert_time_configured)
  config_revert_time = __builtin__.property(_get_config_revert_time)
  config_retry_count_configured = __builtin__.property(_get_config_retry_count_configured)
  config_retry_count = __builtin__.property(_get_config_retry_count)
  config_enable_ldp_tunnelling = __builtin__.property(_get_config_enable_ldp_tunnelling)
  config_shortcut_ospf = __builtin__.property(_get_config_shortcut_ospf)
  config_shortcut_area_configured = __builtin__.property(_get_config_shortcut_area_configured)
  config_shortcut_area = __builtin__.property(_get_config_shortcut_area)
  config_notify_ospf = __builtin__.property(_get_config_notify_ospf)
  config_shortcut_isis = __builtin__.property(_get_config_shortcut_isis)
  config_isis_shortcut_level_configured = __builtin__.property(_get_config_isis_shortcut_level_configured)
  config_isis_shortcut_level = __builtin__.property(_get_config_isis_shortcut_level)
  config_notify_isis = __builtin__.property(_get_config_notify_isis)
  config_metric_configured = __builtin__.property(_get_config_metric_configured)
  config_metric = __builtin__.property(_get_config_metric)
  config_ospf_ignore_metric = __builtin__.property(_get_config_ospf_ignore_metric)
  config_ospf_relative_metric = __builtin__.property(_get_config_ospf_relative_metric)
  config_ospf_announce_metric = __builtin__.property(_get_config_ospf_announce_metric)
  config_ospf_aaf = __builtin__.property(_get_config_ospf_aaf)
  config_isis_ignore_metric = __builtin__.property(_get_config_isis_ignore_metric)
  config_isis_relative_metric = __builtin__.property(_get_config_isis_relative_metric)
  config_isis_announce_configured = __builtin__.property(_get_config_isis_announce_configured)
  config_isis_announce_metric = __builtin__.property(_get_config_isis_announce_metric)
  config_path_configured = __builtin__.property(_get_config_path_configured)
  config_path = __builtin__.property(_get_config_path)
  config_reoptimize_timer_configured = __builtin__.property(_get_config_reoptimize_timer_configured)
  config_reoptimize_time = __builtin__.property(_get_config_reoptimize_time)
  config_tspec_mtu_configured = __builtin__.property(_get_config_tspec_mtu_configured)
  config_tspec_mtu = __builtin__.property(_get_config_tspec_mtu)
  config_cos_configured = __builtin__.property(_get_config_cos_configured)
  config_cos = __builtin__.property(_get_config_cos)
  config_mtu_configured = __builtin__.property(_get_config_mtu_configured)
  config_mtu = __builtin__.property(_get_config_mtu)
  config_tie_breaking_configured = __builtin__.property(_get_config_tie_breaking_configured)
  config_tie_break_random = __builtin__.property(_get_config_tie_break_random)
  config_tie_break_least_fill = __builtin__.property(_get_config_tie_break_least_fill)
  config_tie_break_most_fill = __builtin__.property(_get_config_tie_break_most_fill)
  config_cspf_disabled = __builtin__.property(_get_config_cspf_disabled)
  config_rro_disabled = __builtin__.property(_get_config_rro_disabled)
  config_hot_standby = __builtin__.property(_get_config_hot_standby)
  config_pinned = __builtin__.property(_get_config_pinned)
  config_persistenct = __builtin__.property(_get_config_persistenct)
  config_frr_global_revertive = __builtin__.property(_get_config_frr_global_revertive)
  config_frr_hold_time = __builtin__.property(_get_config_frr_hold_time)
  config_soft_prempt = __builtin__.property(_get_config_soft_prempt)
  config_exclude_interface_change = __builtin__.property(_get_config_exclude_interface_change)
  config_prority_configured = __builtin__.property(_get_config_prority_configured)
  config_setup_prority = __builtin__.property(_get_config_setup_prority)
  config_holding_prority = __builtin__.property(_get_config_holding_prority)
  config_hop_limit_configured = __builtin__.property(_get_config_hop_limit_configured)
  config_hop_limit = __builtin__.property(_get_config_hop_limit)
  config_traffic_eng_rate_configured = __builtin__.property(_get_config_traffic_eng_rate_configured)
  config_traffic_eng_mean_rate = __builtin__.property(_get_config_traffic_eng_mean_rate)
  config_traffic_eng_max_rate = __builtin__.property(_get_config_traffic_eng_max_rate)
  config_traffic_eng_max_burst = __builtin__.property(_get_config_traffic_eng_max_burst)
  config_abw_configured = __builtin__.property(_get_config_abw_configured)
  config_bfd_configured = __builtin__.property(_get_config_bfd_configured)
  config_admin_group_configured = __builtin__.property(_get_config_admin_group_configured)
  config_cspf_computation_mode = __builtin__.property(_get_config_cspf_computation_mode)
  path_computed_by_cspf = __builtin__.property(_get_path_computed_by_cspf)
  path_computed_by_interface_constraint = __builtin__.property(_get_path_computed_by_interface_constraint)
  cspf_computation_mode = __builtin__.property(_get_cspf_computation_mode)
  cspf_group_computation_mode_default = __builtin__.property(_get_cspf_group_computation_mode_default)
  cspf_group_computation_mode_add_penalty = __builtin__.property(_get_cspf_group_computation_mode_add_penalty)
  cspf_group_computation_mode_exclude_groups = __builtin__.property(_get_cspf_group_computation_mode_exclude_groups)
  cspf_group_computation_mode_high_cost = __builtin__.property(_get_cspf_group_computation_mode_high_cost)
  cspf_path_cost = __builtin__.property(_get_cspf_path_cost)
  cspf_path_area = __builtin__.property(_get_cspf_path_area)
  cspf_computation_error = __builtin__.property(_get_cspf_computation_error)
  cspf_exclude_hops_present = __builtin__.property(_get_cspf_exclude_hops_present)
  rsvp_session_present = __builtin__.property(_get_rsvp_session_present)
  rsvp_session_state_up = __builtin__.property(_get_rsvp_session_state_up)
  rsvp_session_state = __builtin__.property(_get_rsvp_session_state)
  rsvp_session_path_error_code = __builtin__.property(_get_rsvp_session_path_error_code)
  rsvp_session_path_error_value = __builtin__.property(_get_rsvp_session_path_error_value)
  rsvp_session_path_error_node_address = __builtin__.property(_get_rsvp_session_path_error_node_address)
  rsvp_session_rro_hops_present = __builtin__.property(_get_rsvp_session_rro_hops_present)
  config_exclude_interface_configured = __builtin__.property(_get_config_exclude_interface_configured)
  maximum_bandwidth = __builtin__.property(_get_maximum_bandwidth)
  unreserved_priority_0_bandwidth = __builtin__.property(_get_unreserved_priority_0_bandwidth)
  unreserved_priority_1_bandwidth = __builtin__.property(_get_unreserved_priority_1_bandwidth)
  unreserved_priority_2_bandwidth = __builtin__.property(_get_unreserved_priority_2_bandwidth)
  unreserved_priority_3_bandwidth = __builtin__.property(_get_unreserved_priority_3_bandwidth)
  unreserved_priority_4_bandwidth = __builtin__.property(_get_unreserved_priority_4_bandwidth)
  unreserved_priority_5_bandwidth = __builtin__.property(_get_unreserved_priority_5_bandwidth)
  unreserved_priority_6_bandwidth = __builtin__.property(_get_unreserved_priority_6_bandwidth)
  unreserved_priority_7_bandwidth = __builtin__.property(_get_unreserved_priority_7_bandwidth)
  config_frr_configured = __builtin__.property(_get_config_frr_configured)
  config_frr_one_to_one = __builtin__.property(_get_config_frr_one_to_one)
  config_frr_one_to_many = __builtin__.property(_get_config_frr_one_to_many)
  config_frr_priority_configured = __builtin__.property(_get_config_frr_priority_configured)
  config_frr_setup_priority = __builtin__.property(_get_config_frr_setup_priority)
  config_frr_holding_priority = __builtin__.property(_get_config_frr_holding_priority)
  config_frr_hop_limit_configured = __builtin__.property(_get_config_frr_hop_limit_configured)
  config_frr_hop_limit = __builtin__.property(_get_config_frr_hop_limit)
  config_frr_bandwidth_configured = __builtin__.property(_get_config_frr_bandwidth_configured)
  config_frr_bandwidth = __builtin__.property(_get_config_frr_bandwidth)
  config_frr_admin_group_configured = __builtin__.property(_get_config_frr_admin_group_configured)
  reoptimize_ignore_count = __builtin__.property(_get_reoptimize_ignore_count)
  reoptimize_time_count = __builtin__.property(_get_reoptimize_time_count)
  instance_frr_configured = __builtin__.property(_get_instance_frr_configured)
  instance_frr_up = __builtin__.property(_get_instance_frr_up)
  instance_frr_active = __builtin__.property(_get_instance_frr_active)
  instance_out_port_id = __builtin__.property(_get_instance_out_port_id)
  instance_out_port_name = __builtin__.property(_get_instance_out_port_name)
  instance_out_label = __builtin__.property(_get_instance_out_label)
  instance_revert_time = __builtin__.property(_get_instance_revert_time)
  instance_retry_count = __builtin__.property(_get_instance_retry_count)
  instance_up_down_count = __builtin__.property(_get_instance_up_down_count)
  instance_metric = __builtin__.property(_get_instance_metric)
  instance_down_reason = __builtin__.property(_get_instance_down_reason)
  config_exclude_interfaces = __builtin__.property(_get_config_exclude_interfaces)
  config_exclude_any = __builtin__.property(_get_config_exclude_any)
  config_include_any = __builtin__.property(_get_config_include_any)
  config_include_all = __builtin__.property(_get_config_include_all)
  cspf_path_hops = __builtin__.property(_get_cspf_path_hops)
  cspf_exclude_hops = __builtin__.property(_get_cspf_exclude_hops)
  rsvp_session_rro_hops = __builtin__.property(_get_rsvp_session_rro_hops)
  config_frr_exclude_any = __builtin__.property(_get_config_frr_exclude_any)
  config_frr_include_any = __builtin__.property(_get_config_frr_include_any)
  config_frr_include_all = __builtin__.property(_get_config_frr_include_all)


  _pyangbind_elements = {'instance_id': instance_id, 'lsp_id': lsp_id, 'current_instance': current_instance, 'new_instance': new_instance, 'old_instance': old_instance, 'is_primary': is_primary, 'is_current_secondary': is_current_secondary, 'is_selected_secondary': is_selected_secondary, 'instance_admin_up': instance_admin_up, 'instance_is_up': instance_is_up, 'instance_is_active': instance_is_active, 'is_adaptive': is_adaptive, 'is_bypass': is_bypass, 'is_dynamic_bypass': is_dynamic_bypass, 'config_admin_up': config_admin_up, 'config_from_address_configured': config_from_address_configured, 'config_from_address': config_from_address, 'config_to_address': config_to_address, 'config_type_bypass': config_type_bypass, 'config_type_dynamic': config_type_dynamic, 'config_adaptive': config_adaptive, 'config_ospf_area': config_ospf_area, 'config_isis_level': config_isis_level, 'config_number_of_retries_configured': config_number_of_retries_configured, 'config_number_of_retries': config_number_of_retries, 'config_path_select_mode': config_path_select_mode, 'config_path_selected_path': config_path_selected_path, 'config_path_selected_secondary_name': config_path_selected_secondary_name, 'config_revert_time_configured': config_revert_time_configured, 'config_revert_time': config_revert_time, 'config_retry_count_configured': config_retry_count_configured, 'config_retry_count': config_retry_count, 'config_enable_ldp_tunnelling': config_enable_ldp_tunnelling, 'config_shortcut_ospf': config_shortcut_ospf, 'config_shortcut_area_configured': config_shortcut_area_configured, 'config_shortcut_area': config_shortcut_area, 'config_notify_ospf': config_notify_ospf, 'config_shortcut_isis': config_shortcut_isis, 'config_isis_shortcut_level_configured': config_isis_shortcut_level_configured, 'config_isis_shortcut_level': config_isis_shortcut_level, 'config_notify_isis': config_notify_isis, 'config_metric_configured': config_metric_configured, 'config_metric': config_metric, 'config_ospf_ignore_metric': config_ospf_ignore_metric, 'config_ospf_relative_metric': config_ospf_relative_metric, 'config_ospf_announce_metric': config_ospf_announce_metric, 'config_ospf_aaf': config_ospf_aaf, 'config_isis_ignore_metric': config_isis_ignore_metric, 'config_isis_relative_metric': config_isis_relative_metric, 'config_isis_announce_configured': config_isis_announce_configured, 'config_isis_announce_metric': config_isis_announce_metric, 'config_path_configured': config_path_configured, 'config_path': config_path, 'config_reoptimize_timer_configured': config_reoptimize_timer_configured, 'config_reoptimize_time': config_reoptimize_time, 'config_tspec_mtu_configured': config_tspec_mtu_configured, 'config_tspec_mtu': config_tspec_mtu, 'config_cos_configured': config_cos_configured, 'config_cos': config_cos, 'config_mtu_configured': config_mtu_configured, 'config_mtu': config_mtu, 'config_tie_breaking_configured': config_tie_breaking_configured, 'config_tie_break_random': config_tie_break_random, 'config_tie_break_least_fill': config_tie_break_least_fill, 'config_tie_break_most_fill': config_tie_break_most_fill, 'config_cspf_disabled': config_cspf_disabled, 'config_rro_disabled': config_rro_disabled, 'config_hot_standby': config_hot_standby, 'config_pinned': config_pinned, 'config_persistenct': config_persistenct, 'config_frr_global_revertive': config_frr_global_revertive, 'config_frr_hold_time': config_frr_hold_time, 'config_soft_prempt': config_soft_prempt, 'config_exclude_interface_change': config_exclude_interface_change, 'config_prority_configured': config_prority_configured, 'config_setup_prority': config_setup_prority, 'config_holding_prority': config_holding_prority, 'config_hop_limit_configured': config_hop_limit_configured, 'config_hop_limit': config_hop_limit, 'config_traffic_eng_rate_configured': config_traffic_eng_rate_configured, 'config_traffic_eng_mean_rate': config_traffic_eng_mean_rate, 'config_traffic_eng_max_rate': config_traffic_eng_max_rate, 'config_traffic_eng_max_burst': config_traffic_eng_max_burst, 'config_abw_configured': config_abw_configured, 'config_bfd_configured': config_bfd_configured, 'config_admin_group_configured': config_admin_group_configured, 'config_cspf_computation_mode': config_cspf_computation_mode, 'path_computed_by_cspf': path_computed_by_cspf, 'path_computed_by_interface_constraint': path_computed_by_interface_constraint, 'cspf_computation_mode': cspf_computation_mode, 'cspf_group_computation_mode_default': cspf_group_computation_mode_default, 'cspf_group_computation_mode_add_penalty': cspf_group_computation_mode_add_penalty, 'cspf_group_computation_mode_exclude_groups': cspf_group_computation_mode_exclude_groups, 'cspf_group_computation_mode_high_cost': cspf_group_computation_mode_high_cost, 'cspf_path_cost': cspf_path_cost, 'cspf_path_area': cspf_path_area, 'cspf_computation_error': cspf_computation_error, 'cspf_exclude_hops_present': cspf_exclude_hops_present, 'rsvp_session_present': rsvp_session_present, 'rsvp_session_state_up': rsvp_session_state_up, 'rsvp_session_state': rsvp_session_state, 'rsvp_session_path_error_code': rsvp_session_path_error_code, 'rsvp_session_path_error_value': rsvp_session_path_error_value, 'rsvp_session_path_error_node_address': rsvp_session_path_error_node_address, 'rsvp_session_rro_hops_present': rsvp_session_rro_hops_present, 'config_exclude_interface_configured': config_exclude_interface_configured, 'maximum_bandwidth': maximum_bandwidth, 'unreserved_priority_0_bandwidth': unreserved_priority_0_bandwidth, 'unreserved_priority_1_bandwidth': unreserved_priority_1_bandwidth, 'unreserved_priority_2_bandwidth': unreserved_priority_2_bandwidth, 'unreserved_priority_3_bandwidth': unreserved_priority_3_bandwidth, 'unreserved_priority_4_bandwidth': unreserved_priority_4_bandwidth, 'unreserved_priority_5_bandwidth': unreserved_priority_5_bandwidth, 'unreserved_priority_6_bandwidth': unreserved_priority_6_bandwidth, 'unreserved_priority_7_bandwidth': unreserved_priority_7_bandwidth, 'config_frr_configured': config_frr_configured, 'config_frr_one_to_one': config_frr_one_to_one, 'config_frr_one_to_many': config_frr_one_to_many, 'config_frr_priority_configured': config_frr_priority_configured, 'config_frr_setup_priority': config_frr_setup_priority, 'config_frr_holding_priority': config_frr_holding_priority, 'config_frr_hop_limit_configured': config_frr_hop_limit_configured, 'config_frr_hop_limit': config_frr_hop_limit, 'config_frr_bandwidth_configured': config_frr_bandwidth_configured, 'config_frr_bandwidth': config_frr_bandwidth, 'config_frr_admin_group_configured': config_frr_admin_group_configured, 'reoptimize_ignore_count': reoptimize_ignore_count, 'reoptimize_time_count': reoptimize_time_count, 'instance_frr_configured': instance_frr_configured, 'instance_frr_up': instance_frr_up, 'instance_frr_active': instance_frr_active, 'instance_out_port_id': instance_out_port_id, 'instance_out_port_name': instance_out_port_name, 'instance_out_label': instance_out_label, 'instance_revert_time': instance_revert_time, 'instance_retry_count': instance_retry_count, 'instance_up_down_count': instance_up_down_count, 'instance_metric': instance_metric, 'instance_down_reason': instance_down_reason, 'config_exclude_interfaces': config_exclude_interfaces, 'config_exclude_any': config_exclude_any, 'config_include_any': config_include_any, 'config_include_all': config_include_all, 'cspf_path_hops': cspf_path_hops, 'cspf_exclude_hops': cspf_exclude_hops, 'rsvp_session_rro_hops': rsvp_session_rro_hops, 'config_frr_exclude_any': config_frr_exclude_any, 'config_frr_include_any': config_frr_include_any, 'config_frr_include_all': config_frr_include_all, }


