
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import backup_ingress
import backup_transit
class backup(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/lsp/backup. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS LSP detail backup information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__backup_present','__backup_count','__backup_ingress_count','__backup_ingress_active_count','__backup_transit_count','__backup_transit_active_count','__backup_ingress','__backup_transit',)

  _yang_name = 'backup'
  _rest_name = 'backup'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__backup_ingress_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-count", rest_name="backup-ingress-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__backup_transit = YANGDynClass(base=YANGListType("backup_from_address backup_to_address backup_name",backup_transit.backup_transit, yang_name="backup-transit", rest_name="backup-transit", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}), is_container='list', yang_name="backup-transit", rest_name="backup-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__backup_ingress_active_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-active-count", rest_name="backup-ingress-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__backup_transit_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-count", rest_name="backup-transit-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__backup_transit_active_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-active-count", rest_name="backup-transit-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__backup_ingress = YANGDynClass(base=YANGListType("backup_from_address backup_to_address backup_name",backup_ingress.backup_ingress, yang_name="backup-ingress", rest_name="backup-ingress", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}), is_container='list', yang_name="backup-ingress", rest_name="backup-ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__backup_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup-present", rest_name="backup-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__backup_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-count", rest_name="backup-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'lsp', u'backup']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'lsp', u'backup']

  def _get_backup_present(self):
    """
    Getter method for backup_present, mapped from YANG variable /mpls_state/lsp/backup/backup_present (boolean)

    YANG Description: lsp_backup_present
    """
    return self.__backup_present
      
  def _set_backup_present(self, v, load=False):
    """
    Setter method for backup_present, mapped from YANG variable /mpls_state/lsp/backup/backup_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_present() directly.

    YANG Description: lsp_backup_present
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="backup-present", rest_name="backup-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup-present", rest_name="backup-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__backup_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_present(self):
    self.__backup_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="backup-present", rest_name="backup-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_backup_count(self):
    """
    Getter method for backup_count, mapped from YANG variable /mpls_state/lsp/backup/backup_count (uint32)

    YANG Description: lsp_backup_count
    """
    return self.__backup_count
      
  def _set_backup_count(self, v, load=False):
    """
    Setter method for backup_count, mapped from YANG variable /mpls_state/lsp/backup/backup_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_count() directly.

    YANG Description: lsp_backup_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-count", rest_name="backup-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-count", rest_name="backup-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__backup_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_count(self):
    self.__backup_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-count", rest_name="backup-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_backup_ingress_count(self):
    """
    Getter method for backup_ingress_count, mapped from YANG variable /mpls_state/lsp/backup/backup_ingress_count (uint32)

    YANG Description: lsp_backup_ingress_count
    """
    return self.__backup_ingress_count
      
  def _set_backup_ingress_count(self, v, load=False):
    """
    Setter method for backup_ingress_count, mapped from YANG variable /mpls_state/lsp/backup/backup_ingress_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_ingress_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_ingress_count() directly.

    YANG Description: lsp_backup_ingress_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-count", rest_name="backup-ingress-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_ingress_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-count", rest_name="backup-ingress-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__backup_ingress_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_ingress_count(self):
    self.__backup_ingress_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-count", rest_name="backup-ingress-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_backup_ingress_active_count(self):
    """
    Getter method for backup_ingress_active_count, mapped from YANG variable /mpls_state/lsp/backup/backup_ingress_active_count (uint32)

    YANG Description: lsp_backup_ingress_active_count
    """
    return self.__backup_ingress_active_count
      
  def _set_backup_ingress_active_count(self, v, load=False):
    """
    Setter method for backup_ingress_active_count, mapped from YANG variable /mpls_state/lsp/backup/backup_ingress_active_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_ingress_active_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_ingress_active_count() directly.

    YANG Description: lsp_backup_ingress_active_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-active-count", rest_name="backup-ingress-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_ingress_active_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-active-count", rest_name="backup-ingress-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__backup_ingress_active_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_ingress_active_count(self):
    self.__backup_ingress_active_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-ingress-active-count", rest_name="backup-ingress-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_backup_transit_count(self):
    """
    Getter method for backup_transit_count, mapped from YANG variable /mpls_state/lsp/backup/backup_transit_count (uint32)

    YANG Description: lsp_backup_transit_count
    """
    return self.__backup_transit_count
      
  def _set_backup_transit_count(self, v, load=False):
    """
    Setter method for backup_transit_count, mapped from YANG variable /mpls_state/lsp/backup/backup_transit_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_transit_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_transit_count() directly.

    YANG Description: lsp_backup_transit_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-count", rest_name="backup-transit-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_transit_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-count", rest_name="backup-transit-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__backup_transit_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_transit_count(self):
    self.__backup_transit_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-count", rest_name="backup-transit-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_backup_transit_active_count(self):
    """
    Getter method for backup_transit_active_count, mapped from YANG variable /mpls_state/lsp/backup/backup_transit_active_count (uint32)

    YANG Description: lsp_backup_transit_active_count
    """
    return self.__backup_transit_active_count
      
  def _set_backup_transit_active_count(self, v, load=False):
    """
    Setter method for backup_transit_active_count, mapped from YANG variable /mpls_state/lsp/backup/backup_transit_active_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_transit_active_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_transit_active_count() directly.

    YANG Description: lsp_backup_transit_active_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-active-count", rest_name="backup-transit-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_transit_active_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-active-count", rest_name="backup-transit-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__backup_transit_active_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_transit_active_count(self):
    self.__backup_transit_active_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="backup-transit-active-count", rest_name="backup-transit-active-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_backup_ingress(self):
    """
    Getter method for backup_ingress, mapped from YANG variable /mpls_state/lsp/backup/backup_ingress (list)
    """
    return self.__backup_ingress
      
  def _set_backup_ingress(self, v, load=False):
    """
    Setter method for backup_ingress, mapped from YANG variable /mpls_state/lsp/backup/backup_ingress (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_ingress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_ingress() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("backup_from_address backup_to_address backup_name",backup_ingress.backup_ingress, yang_name="backup-ingress", rest_name="backup-ingress", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}), is_container='list', yang_name="backup-ingress", rest_name="backup-ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_ingress must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("backup_from_address backup_to_address backup_name",backup_ingress.backup_ingress, yang_name="backup-ingress", rest_name="backup-ingress", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}), is_container='list', yang_name="backup-ingress", rest_name="backup-ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__backup_ingress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_ingress(self):
    self.__backup_ingress = YANGDynClass(base=YANGListType("backup_from_address backup_to_address backup_name",backup_ingress.backup_ingress, yang_name="backup-ingress", rest_name="backup-ingress", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}), is_container='list', yang_name="backup-ingress", rest_name="backup-ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-ingress-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_backup_transit(self):
    """
    Getter method for backup_transit, mapped from YANG variable /mpls_state/lsp/backup/backup_transit (list)
    """
    return self.__backup_transit
      
  def _set_backup_transit(self, v, load=False):
    """
    Setter method for backup_transit, mapped from YANG variable /mpls_state/lsp/backup/backup_transit (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backup_transit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backup_transit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("backup_from_address backup_to_address backup_name",backup_transit.backup_transit, yang_name="backup-transit", rest_name="backup-transit", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}), is_container='list', yang_name="backup-transit", rest_name="backup-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backup_transit must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("backup_from_address backup_to_address backup_name",backup_transit.backup_transit, yang_name="backup-transit", rest_name="backup-transit", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}), is_container='list', yang_name="backup-transit", rest_name="backup-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__backup_transit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backup_transit(self):
    self.__backup_transit = YANGDynClass(base=YANGListType("backup_from_address backup_to_address backup_name",backup_transit.backup_transit, yang_name="backup-transit", rest_name="backup-transit", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='backup-from-address backup-to-address backup-name', extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}), is_container='list', yang_name="backup-transit", rest_name="backup-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-backup-backup-transit-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  backup_present = __builtin__.property(_get_backup_present)
  backup_count = __builtin__.property(_get_backup_count)
  backup_ingress_count = __builtin__.property(_get_backup_ingress_count)
  backup_ingress_active_count = __builtin__.property(_get_backup_ingress_active_count)
  backup_transit_count = __builtin__.property(_get_backup_transit_count)
  backup_transit_active_count = __builtin__.property(_get_backup_transit_active_count)
  backup_ingress = __builtin__.property(_get_backup_ingress)
  backup_transit = __builtin__.property(_get_backup_transit)


  _pyangbind_elements = {'backup_present': backup_present, 'backup_count': backup_count, 'backup_ingress_count': backup_ingress_count, 'backup_ingress_active_count': backup_ingress_active_count, 'backup_transit_count': backup_transit_count, 'backup_transit_active_count': backup_transit_active_count, 'backup_ingress': backup_ingress, 'backup_transit': backup_transit, }


