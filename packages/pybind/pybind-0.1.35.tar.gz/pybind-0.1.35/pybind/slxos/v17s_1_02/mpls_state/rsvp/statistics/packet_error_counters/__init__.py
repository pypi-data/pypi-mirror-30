
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class packet_error_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/rsvp/statistics/packet-error-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: RSVP error packet counters
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__rx_pkt_bad_length','__rx_pkt_unknown_type','__rx_pkt_bad_version','__rx_pkt_bad_checksum','__mem_alloc_fail','__rx_md5_auth_error','__path_state_timeout','__resv_state_timeout','__pkt_with_msg_id_drop','__pkt_with_sref_drop','__rx_pkt_bad_length_since_last_clear','__rx_pkt_unknown_type_since_last_clear','__rx_pkt_bad_version_since_last_clear','__rx_pkt_bad_checksum_since_last_clear','__mem_alloc_fail_since_last_clear','__rx_md5_auth_error_since_last_clear','__path_state_timeout_since_last_clear','__resv_state_timeout_since_last_clear','__pkt_with_msg_id_drop_since_last_clear','__pkt_with_sref_drop_since_last_clear','__path_errors','__resv_errors','__patherr_errors','__resverr_errors','__pathtear_errors','__resvtear_errors','__resvconf_errors','__bundle_errors','__ack_errors','__sumrefresh_errors','__hello_errors','__nackobject_errors','__path_errors_since_last_clear','__resv_errors_since_last_clear','__patherr_errors_since_last_clear','__resverr_errors_since_last_clear','__pathtear_errors_since_last_clear','__resvtear_errors_since_last_clear','__resvconf_errors_since_last_clear','__bundle_errors_since_last_clear','__ack_errors_since_last_clear','__sumrefresh_errors_since_last_clear','__hello_errors_since_last_clear','__nackobject_errors_since_last_clear',)

  _yang_name = 'packet-error-counters'
  _rest_name = 'packet-error-counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__nackobject_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__hello_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors", rest_name="hello-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_state_timeout = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout", rest_name="resv-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resverr_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors-since-last-clear", rest_name="resverr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors", rest_name="path-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors", rest_name="resv-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_bad_checksum_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum-since-last-clear", rest_name="rx-pkt-bad-checksum-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_md5_auth_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error", rest_name="rx-md5-auth-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__ack_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors-since-last-clear", rest_name="ack-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__bundle_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors", rest_name="bundle-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__patherr_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors", rest_name="patherr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__bundle_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors-since-last-clear", rest_name="bundle-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_sref_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum", rest_name="rx-pkt-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__sumrefresh_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors", rest_name="sumrefresh-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_bad_version_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version-since-last-clear", rest_name="rx-pkt-bad-version-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pathtear_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors", rest_name="pathtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__hello_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors-since-last-clear", rest_name="hello-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__nackobject_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_msg_id_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop", rest_name="pkt-with-msg-id-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_state_timeout_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout-since-last-clear", rest_name="resv-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__patherr_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors-since-last-clear", rest_name="patherr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__sumrefresh_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors-since-last-clear", rest_name="sumrefresh-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_state_timeout_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout-since-last-clear", rest_name="path-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvconf_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors-since-last-clear", rest_name="resvconf-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_sref_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_unknown_type_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type-since-last-clear", rest_name="rx-pkt-unknown-type-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__mem_alloc_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail", rest_name="mem-alloc-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_state_timeout = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout", rest_name="path-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_bad_version = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version", rest_name="rx-pkt-bad-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pkt_with_msg_id_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop-since-last-clear", rest_name="pkt-with-msg-id-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors-since-last-clear", rest_name="path-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvtear_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors-since-last-clear", rest_name="resvtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors-since-last-clear", rest_name="resv-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvconf_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors", rest_name="resvconf-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pathtear_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors-since-last-clear", rest_name="pathtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_bad_length_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length-since-last-clear", rest_name="rx-pkt-bad-length-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_md5_auth_error_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error-since-last-clear", rest_name="rx-md5-auth-error-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvtear_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors", rest_name="resvtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resverr_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors", rest_name="resverr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__mem_alloc_fail_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail-since-last-clear", rest_name="mem-alloc-fail-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_bad_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length", rest_name="rx-pkt-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__rx_pkt_unknown_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type", rest_name="rx-pkt-unknown-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__ack_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors", rest_name="ack-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'rsvp', u'statistics', u'packet-error-counters']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'rsvp', u'statistics', u'packet-error-counters']

  def _get_rx_pkt_bad_length(self):
    """
    Getter method for rx_pkt_bad_length, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_length (uint64)

    YANG Description: RSVP received packet bad length
    """
    return self.__rx_pkt_bad_length
      
  def _set_rx_pkt_bad_length(self, v, load=False):
    """
    Setter method for rx_pkt_bad_length, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_length (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_bad_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_bad_length() directly.

    YANG Description: RSVP received packet bad length
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length", rest_name="rx-pkt-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_bad_length must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length", rest_name="rx-pkt-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_bad_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_bad_length(self):
    self.__rx_pkt_bad_length = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length", rest_name="rx-pkt-bad-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_unknown_type(self):
    """
    Getter method for rx_pkt_unknown_type, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_unknown_type (uint64)

    YANG Description: RSVP received packet unknown type
    """
    return self.__rx_pkt_unknown_type
      
  def _set_rx_pkt_unknown_type(self, v, load=False):
    """
    Setter method for rx_pkt_unknown_type, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_unknown_type (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_unknown_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_unknown_type() directly.

    YANG Description: RSVP received packet unknown type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type", rest_name="rx-pkt-unknown-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_unknown_type must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type", rest_name="rx-pkt-unknown-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_unknown_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_unknown_type(self):
    self.__rx_pkt_unknown_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type", rest_name="rx-pkt-unknown-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_bad_version(self):
    """
    Getter method for rx_pkt_bad_version, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_version (uint64)

    YANG Description: RSVP received packet bad version
    """
    return self.__rx_pkt_bad_version
      
  def _set_rx_pkt_bad_version(self, v, load=False):
    """
    Setter method for rx_pkt_bad_version, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_version (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_bad_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_bad_version() directly.

    YANG Description: RSVP received packet bad version
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version", rest_name="rx-pkt-bad-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_bad_version must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version", rest_name="rx-pkt-bad-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_bad_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_bad_version(self):
    self.__rx_pkt_bad_version = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version", rest_name="rx-pkt-bad-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_bad_checksum(self):
    """
    Getter method for rx_pkt_bad_checksum, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_checksum (uint64)

    YANG Description: RSVP received packet bad checksum
    """
    return self.__rx_pkt_bad_checksum
      
  def _set_rx_pkt_bad_checksum(self, v, load=False):
    """
    Setter method for rx_pkt_bad_checksum, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_checksum (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_bad_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_bad_checksum() directly.

    YANG Description: RSVP received packet bad checksum
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum", rest_name="rx-pkt-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_bad_checksum must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum", rest_name="rx-pkt-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_bad_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_bad_checksum(self):
    self.__rx_pkt_bad_checksum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum", rest_name="rx-pkt-bad-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_mem_alloc_fail(self):
    """
    Getter method for mem_alloc_fail, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/mem_alloc_fail (uint64)

    YANG Description: Memory allocation failed for RSVP packet
    """
    return self.__mem_alloc_fail
      
  def _set_mem_alloc_fail(self, v, load=False):
    """
    Setter method for mem_alloc_fail, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/mem_alloc_fail (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mem_alloc_fail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mem_alloc_fail() directly.

    YANG Description: Memory allocation failed for RSVP packet
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail", rest_name="mem-alloc-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mem_alloc_fail must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail", rest_name="mem-alloc-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__mem_alloc_fail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mem_alloc_fail(self):
    self.__mem_alloc_fail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail", rest_name="mem-alloc-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_md5_auth_error(self):
    """
    Getter method for rx_md5_auth_error, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_md5_auth_error (uint64)

    YANG Description: RSVP received MD5 auth error
    """
    return self.__rx_md5_auth_error
      
  def _set_rx_md5_auth_error(self, v, load=False):
    """
    Setter method for rx_md5_auth_error, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_md5_auth_error (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_md5_auth_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_md5_auth_error() directly.

    YANG Description: RSVP received MD5 auth error
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error", rest_name="rx-md5-auth-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_md5_auth_error must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error", rest_name="rx-md5-auth-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_md5_auth_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_md5_auth_error(self):
    self.__rx_md5_auth_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error", rest_name="rx-md5-auth-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_state_timeout(self):
    """
    Getter method for path_state_timeout, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_state_timeout (uint64)

    YANG Description: Path state timeout
    """
    return self.__path_state_timeout
      
  def _set_path_state_timeout(self, v, load=False):
    """
    Setter method for path_state_timeout, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_state_timeout (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_state_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_state_timeout() directly.

    YANG Description: Path state timeout
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout", rest_name="path-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_state_timeout must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout", rest_name="path-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_state_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_state_timeout(self):
    self.__path_state_timeout = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout", rest_name="path-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_state_timeout(self):
    """
    Getter method for resv_state_timeout, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_state_timeout (uint64)

    YANG Description: Resv state timeout
    """
    return self.__resv_state_timeout
      
  def _set_resv_state_timeout(self, v, load=False):
    """
    Setter method for resv_state_timeout, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_state_timeout (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_state_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_state_timeout() directly.

    YANG Description: Resv state timeout
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout", rest_name="resv-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_state_timeout must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout", rest_name="resv-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_state_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_state_timeout(self):
    self.__resv_state_timeout = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout", rest_name="resv-state-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_msg_id_drop(self):
    """
    Getter method for pkt_with_msg_id_drop, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_msg_id_drop (uint64)

    YANG Description: Packet with message id drop error
    """
    return self.__pkt_with_msg_id_drop
      
  def _set_pkt_with_msg_id_drop(self, v, load=False):
    """
    Setter method for pkt_with_msg_id_drop, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_msg_id_drop (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_msg_id_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_msg_id_drop() directly.

    YANG Description: Packet with message id drop error
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop", rest_name="pkt-with-msg-id-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_msg_id_drop must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop", rest_name="pkt-with-msg-id-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_msg_id_drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_msg_id_drop(self):
    self.__pkt_with_msg_id_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop", rest_name="pkt-with-msg-id-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_sref_drop(self):
    """
    Getter method for pkt_with_sref_drop, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_sref_drop (uint64)

    YANG Description: Packet with SREF drop error
    """
    return self.__pkt_with_sref_drop
      
  def _set_pkt_with_sref_drop(self, v, load=False):
    """
    Setter method for pkt_with_sref_drop, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_sref_drop (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_sref_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_sref_drop() directly.

    YANG Description: Packet with SREF drop error
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_sref_drop must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_sref_drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_sref_drop(self):
    self.__pkt_with_sref_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop", rest_name="pkt-with-sref-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_bad_length_since_last_clear(self):
    """
    Getter method for rx_pkt_bad_length_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_length_since_last_clear (uint64)

    YANG Description: RSVP received packet bad length since last clear
    """
    return self.__rx_pkt_bad_length_since_last_clear
      
  def _set_rx_pkt_bad_length_since_last_clear(self, v, load=False):
    """
    Setter method for rx_pkt_bad_length_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_length_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_bad_length_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_bad_length_since_last_clear() directly.

    YANG Description: RSVP received packet bad length since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length-since-last-clear", rest_name="rx-pkt-bad-length-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_bad_length_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length-since-last-clear", rest_name="rx-pkt-bad-length-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_bad_length_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_bad_length_since_last_clear(self):
    self.__rx_pkt_bad_length_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-length-since-last-clear", rest_name="rx-pkt-bad-length-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_unknown_type_since_last_clear(self):
    """
    Getter method for rx_pkt_unknown_type_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_unknown_type_since_last_clear (uint64)

    YANG Description: RSVP received packet unknown type since last clear
    """
    return self.__rx_pkt_unknown_type_since_last_clear
      
  def _set_rx_pkt_unknown_type_since_last_clear(self, v, load=False):
    """
    Setter method for rx_pkt_unknown_type_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_unknown_type_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_unknown_type_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_unknown_type_since_last_clear() directly.

    YANG Description: RSVP received packet unknown type since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type-since-last-clear", rest_name="rx-pkt-unknown-type-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_unknown_type_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type-since-last-clear", rest_name="rx-pkt-unknown-type-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_unknown_type_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_unknown_type_since_last_clear(self):
    self.__rx_pkt_unknown_type_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-unknown-type-since-last-clear", rest_name="rx-pkt-unknown-type-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_bad_version_since_last_clear(self):
    """
    Getter method for rx_pkt_bad_version_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_version_since_last_clear (uint64)

    YANG Description: RSVP received packet bad version since last clear
    """
    return self.__rx_pkt_bad_version_since_last_clear
      
  def _set_rx_pkt_bad_version_since_last_clear(self, v, load=False):
    """
    Setter method for rx_pkt_bad_version_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_version_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_bad_version_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_bad_version_since_last_clear() directly.

    YANG Description: RSVP received packet bad version since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version-since-last-clear", rest_name="rx-pkt-bad-version-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_bad_version_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version-since-last-clear", rest_name="rx-pkt-bad-version-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_bad_version_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_bad_version_since_last_clear(self):
    self.__rx_pkt_bad_version_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-version-since-last-clear", rest_name="rx-pkt-bad-version-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkt_bad_checksum_since_last_clear(self):
    """
    Getter method for rx_pkt_bad_checksum_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_checksum_since_last_clear (uint64)

    YANG Description: RSVP received packet bad checksum since last clear
    """
    return self.__rx_pkt_bad_checksum_since_last_clear
      
  def _set_rx_pkt_bad_checksum_since_last_clear(self, v, load=False):
    """
    Setter method for rx_pkt_bad_checksum_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_pkt_bad_checksum_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkt_bad_checksum_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkt_bad_checksum_since_last_clear() directly.

    YANG Description: RSVP received packet bad checksum since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum-since-last-clear", rest_name="rx-pkt-bad-checksum-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkt_bad_checksum_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum-since-last-clear", rest_name="rx-pkt-bad-checksum-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkt_bad_checksum_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkt_bad_checksum_since_last_clear(self):
    self.__rx_pkt_bad_checksum_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkt-bad-checksum-since-last-clear", rest_name="rx-pkt-bad-checksum-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_mem_alloc_fail_since_last_clear(self):
    """
    Getter method for mem_alloc_fail_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/mem_alloc_fail_since_last_clear (uint64)

    YANG Description: Memory allocation failed for RSVP packet since last clear
    """
    return self.__mem_alloc_fail_since_last_clear
      
  def _set_mem_alloc_fail_since_last_clear(self, v, load=False):
    """
    Setter method for mem_alloc_fail_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/mem_alloc_fail_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mem_alloc_fail_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mem_alloc_fail_since_last_clear() directly.

    YANG Description: Memory allocation failed for RSVP packet since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail-since-last-clear", rest_name="mem-alloc-fail-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mem_alloc_fail_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail-since-last-clear", rest_name="mem-alloc-fail-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__mem_alloc_fail_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mem_alloc_fail_since_last_clear(self):
    self.__mem_alloc_fail_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mem-alloc-fail-since-last-clear", rest_name="mem-alloc-fail-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_rx_md5_auth_error_since_last_clear(self):
    """
    Getter method for rx_md5_auth_error_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_md5_auth_error_since_last_clear (uint64)

    YANG Description: RSVP received MD5 auth error since last clear
    """
    return self.__rx_md5_auth_error_since_last_clear
      
  def _set_rx_md5_auth_error_since_last_clear(self, v, load=False):
    """
    Setter method for rx_md5_auth_error_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/rx_md5_auth_error_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_md5_auth_error_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_md5_auth_error_since_last_clear() directly.

    YANG Description: RSVP received MD5 auth error since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error-since-last-clear", rest_name="rx-md5-auth-error-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_md5_auth_error_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error-since-last-clear", rest_name="rx-md5-auth-error-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_md5_auth_error_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_md5_auth_error_since_last_clear(self):
    self.__rx_md5_auth_error_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-md5-auth-error-since-last-clear", rest_name="rx-md5-auth-error-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_state_timeout_since_last_clear(self):
    """
    Getter method for path_state_timeout_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_state_timeout_since_last_clear (uint64)

    YANG Description: Path state timeout since last clear
    """
    return self.__path_state_timeout_since_last_clear
      
  def _set_path_state_timeout_since_last_clear(self, v, load=False):
    """
    Setter method for path_state_timeout_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_state_timeout_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_state_timeout_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_state_timeout_since_last_clear() directly.

    YANG Description: Path state timeout since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout-since-last-clear", rest_name="path-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_state_timeout_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout-since-last-clear", rest_name="path-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_state_timeout_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_state_timeout_since_last_clear(self):
    self.__path_state_timeout_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-state-timeout-since-last-clear", rest_name="path-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_state_timeout_since_last_clear(self):
    """
    Getter method for resv_state_timeout_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_state_timeout_since_last_clear (uint64)

    YANG Description: Resv state timeout since last clear
    """
    return self.__resv_state_timeout_since_last_clear
      
  def _set_resv_state_timeout_since_last_clear(self, v, load=False):
    """
    Setter method for resv_state_timeout_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_state_timeout_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_state_timeout_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_state_timeout_since_last_clear() directly.

    YANG Description: Resv state timeout since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout-since-last-clear", rest_name="resv-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_state_timeout_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout-since-last-clear", rest_name="resv-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_state_timeout_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_state_timeout_since_last_clear(self):
    self.__resv_state_timeout_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-state-timeout-since-last-clear", rest_name="resv-state-timeout-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_msg_id_drop_since_last_clear(self):
    """
    Getter method for pkt_with_msg_id_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_msg_id_drop_since_last_clear (uint64)

    YANG Description: Packet with message id drop error since last clear
    """
    return self.__pkt_with_msg_id_drop_since_last_clear
      
  def _set_pkt_with_msg_id_drop_since_last_clear(self, v, load=False):
    """
    Setter method for pkt_with_msg_id_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_msg_id_drop_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_msg_id_drop_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_msg_id_drop_since_last_clear() directly.

    YANG Description: Packet with message id drop error since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop-since-last-clear", rest_name="pkt-with-msg-id-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_msg_id_drop_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop-since-last-clear", rest_name="pkt-with-msg-id-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_msg_id_drop_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_msg_id_drop_since_last_clear(self):
    self.__pkt_with_msg_id_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-msg-id-drop-since-last-clear", rest_name="pkt-with-msg-id-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pkt_with_sref_drop_since_last_clear(self):
    """
    Getter method for pkt_with_sref_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_sref_drop_since_last_clear (uint64)

    YANG Description: Packet with SREF drop error since last clear
    """
    return self.__pkt_with_sref_drop_since_last_clear
      
  def _set_pkt_with_sref_drop_since_last_clear(self, v, load=False):
    """
    Setter method for pkt_with_sref_drop_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pkt_with_sref_drop_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pkt_with_sref_drop_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pkt_with_sref_drop_since_last_clear() directly.

    YANG Description: Packet with SREF drop error since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pkt_with_sref_drop_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pkt_with_sref_drop_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pkt_with_sref_drop_since_last_clear(self):
    self.__pkt_with_sref_drop_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pkt-with-sref-drop-since-last-clear", rest_name="pkt-with-sref-drop-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_errors(self):
    """
    Getter method for path_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_errors (uint64)

    YANG Description: RSVP Path message errors
    """
    return self.__path_errors
      
  def _set_path_errors(self, v, load=False):
    """
    Setter method for path_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_errors() directly.

    YANG Description: RSVP Path message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors", rest_name="path-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors", rest_name="path-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_errors(self):
    self.__path_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors", rest_name="path-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_errors(self):
    """
    Getter method for resv_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_errors (uint64)

    YANG Description: RSVP Resv message errors
    """
    return self.__resv_errors
      
  def _set_resv_errors(self, v, load=False):
    """
    Setter method for resv_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_errors() directly.

    YANG Description: RSVP Resv message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors", rest_name="resv-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors", rest_name="resv-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_errors(self):
    self.__resv_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors", rest_name="resv-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_patherr_errors(self):
    """
    Getter method for patherr_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/patherr_errors (uint64)

    YANG Description: RSVP PathErr message errors
    """
    return self.__patherr_errors
      
  def _set_patherr_errors(self, v, load=False):
    """
    Setter method for patherr_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/patherr_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_patherr_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_patherr_errors() directly.

    YANG Description: RSVP PathErr message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors", rest_name="patherr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """patherr_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors", rest_name="patherr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__patherr_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_patherr_errors(self):
    self.__patherr_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors", rest_name="patherr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resverr_errors(self):
    """
    Getter method for resverr_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resverr_errors (uint64)

    YANG Description: RSVP ResvErr message errors
    """
    return self.__resverr_errors
      
  def _set_resverr_errors(self, v, load=False):
    """
    Setter method for resverr_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resverr_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resverr_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resverr_errors() directly.

    YANG Description: RSVP ResvErr message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors", rest_name="resverr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resverr_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors", rest_name="resverr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resverr_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resverr_errors(self):
    self.__resverr_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors", rest_name="resverr-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pathtear_errors(self):
    """
    Getter method for pathtear_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pathtear_errors (uint64)

    YANG Description: RSVP PathTear message errors
    """
    return self.__pathtear_errors
      
  def _set_pathtear_errors(self, v, load=False):
    """
    Setter method for pathtear_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pathtear_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pathtear_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pathtear_errors() directly.

    YANG Description: RSVP PathTear message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors", rest_name="pathtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pathtear_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors", rest_name="pathtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pathtear_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pathtear_errors(self):
    self.__pathtear_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors", rest_name="pathtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvtear_errors(self):
    """
    Getter method for resvtear_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvtear_errors (uint64)

    YANG Description: RSVP ResvTear message errors
    """
    return self.__resvtear_errors
      
  def _set_resvtear_errors(self, v, load=False):
    """
    Setter method for resvtear_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvtear_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvtear_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvtear_errors() directly.

    YANG Description: RSVP ResvTear message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors", rest_name="resvtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvtear_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors", rest_name="resvtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvtear_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvtear_errors(self):
    self.__resvtear_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors", rest_name="resvtear-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvconf_errors(self):
    """
    Getter method for resvconf_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvconf_errors (uint64)

    YANG Description: RSVP ResvConf message errors
    """
    return self.__resvconf_errors
      
  def _set_resvconf_errors(self, v, load=False):
    """
    Setter method for resvconf_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvconf_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvconf_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvconf_errors() directly.

    YANG Description: RSVP ResvConf message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors", rest_name="resvconf-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvconf_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors", rest_name="resvconf-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvconf_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvconf_errors(self):
    self.__resvconf_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors", rest_name="resvconf-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_bundle_errors(self):
    """
    Getter method for bundle_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/bundle_errors (uint64)

    YANG Description: RSVP Bundle message errors
    """
    return self.__bundle_errors
      
  def _set_bundle_errors(self, v, load=False):
    """
    Setter method for bundle_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/bundle_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bundle_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bundle_errors() directly.

    YANG Description: RSVP Bundle message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors", rest_name="bundle-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bundle_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors", rest_name="bundle-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__bundle_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bundle_errors(self):
    self.__bundle_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors", rest_name="bundle-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_ack_errors(self):
    """
    Getter method for ack_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/ack_errors (uint64)

    YANG Description: RSVP acknowledgement errors
    """
    return self.__ack_errors
      
  def _set_ack_errors(self, v, load=False):
    """
    Setter method for ack_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/ack_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack_errors() directly.

    YANG Description: RSVP acknowledgement errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors", rest_name="ack-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors", rest_name="ack-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ack_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack_errors(self):
    self.__ack_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors", rest_name="ack-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_sumrefresh_errors(self):
    """
    Getter method for sumrefresh_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/sumrefresh_errors (uint64)

    YANG Description: RSVP SumRefresh message errors
    """
    return self.__sumrefresh_errors
      
  def _set_sumrefresh_errors(self, v, load=False):
    """
    Setter method for sumrefresh_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/sumrefresh_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sumrefresh_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sumrefresh_errors() directly.

    YANG Description: RSVP SumRefresh message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors", rest_name="sumrefresh-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sumrefresh_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors", rest_name="sumrefresh-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__sumrefresh_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sumrefresh_errors(self):
    self.__sumrefresh_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors", rest_name="sumrefresh-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_hello_errors(self):
    """
    Getter method for hello_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/hello_errors (uint64)

    YANG Description: RSVP hello message errors
    """
    return self.__hello_errors
      
  def _set_hello_errors(self, v, load=False):
    """
    Setter method for hello_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/hello_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_errors() directly.

    YANG Description: RSVP hello message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors", rest_name="hello-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors", rest_name="hello-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_errors(self):
    self.__hello_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors", rest_name="hello-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_nackobject_errors(self):
    """
    Getter method for nackobject_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/nackobject_errors (uint64)

    YANG Description: RSVP NACK message errors
    """
    return self.__nackobject_errors
      
  def _set_nackobject_errors(self, v, load=False):
    """
    Setter method for nackobject_errors, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/nackobject_errors (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nackobject_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nackobject_errors() directly.

    YANG Description: RSVP NACK message errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nackobject_errors must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__nackobject_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nackobject_errors(self):
    self.__nackobject_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors", rest_name="nackobject-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_errors_since_last_clear(self):
    """
    Getter method for path_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_errors_since_last_clear (uint64)

    YANG Description: RSVP Path message errors since last clear
    """
    return self.__path_errors_since_last_clear
      
  def _set_path_errors_since_last_clear(self, v, load=False):
    """
    Setter method for path_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/path_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_errors_since_last_clear() directly.

    YANG Description: RSVP Path message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors-since-last-clear", rest_name="path-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors-since-last-clear", rest_name="path-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_errors_since_last_clear(self):
    self.__path_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-errors-since-last-clear", rest_name="path-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_errors_since_last_clear(self):
    """
    Getter method for resv_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_errors_since_last_clear (uint64)

    YANG Description: RSVP Resv message errors since last clear
    """
    return self.__resv_errors_since_last_clear
      
  def _set_resv_errors_since_last_clear(self, v, load=False):
    """
    Setter method for resv_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resv_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_errors_since_last_clear() directly.

    YANG Description: RSVP Resv message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors-since-last-clear", rest_name="resv-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors-since-last-clear", rest_name="resv-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_errors_since_last_clear(self):
    self.__resv_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-errors-since-last-clear", rest_name="resv-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_patherr_errors_since_last_clear(self):
    """
    Getter method for patherr_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/patherr_errors_since_last_clear (uint64)

    YANG Description: RSVP PathErr message errors since last clear
    """
    return self.__patherr_errors_since_last_clear
      
  def _set_patherr_errors_since_last_clear(self, v, load=False):
    """
    Setter method for patherr_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/patherr_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_patherr_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_patherr_errors_since_last_clear() directly.

    YANG Description: RSVP PathErr message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors-since-last-clear", rest_name="patherr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """patherr_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors-since-last-clear", rest_name="patherr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__patherr_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_patherr_errors_since_last_clear(self):
    self.__patherr_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-errors-since-last-clear", rest_name="patherr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resverr_errors_since_last_clear(self):
    """
    Getter method for resverr_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resverr_errors_since_last_clear (uint64)

    YANG Description: RSVP ResvErr message errors since last clear
    """
    return self.__resverr_errors_since_last_clear
      
  def _set_resverr_errors_since_last_clear(self, v, load=False):
    """
    Setter method for resverr_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resverr_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resverr_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resverr_errors_since_last_clear() directly.

    YANG Description: RSVP ResvErr message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors-since-last-clear", rest_name="resverr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resverr_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors-since-last-clear", rest_name="resverr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resverr_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resverr_errors_since_last_clear(self):
    self.__resverr_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-errors-since-last-clear", rest_name="resverr-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pathtear_errors_since_last_clear(self):
    """
    Getter method for pathtear_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pathtear_errors_since_last_clear (uint64)

    YANG Description: RSVP PathTear message errors since last clear
    """
    return self.__pathtear_errors_since_last_clear
      
  def _set_pathtear_errors_since_last_clear(self, v, load=False):
    """
    Setter method for pathtear_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/pathtear_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pathtear_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pathtear_errors_since_last_clear() directly.

    YANG Description: RSVP PathTear message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors-since-last-clear", rest_name="pathtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pathtear_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors-since-last-clear", rest_name="pathtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pathtear_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pathtear_errors_since_last_clear(self):
    self.__pathtear_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-errors-since-last-clear", rest_name="pathtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvtear_errors_since_last_clear(self):
    """
    Getter method for resvtear_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvtear_errors_since_last_clear (uint64)

    YANG Description: RSVP ResvTear message errors since last clear
    """
    return self.__resvtear_errors_since_last_clear
      
  def _set_resvtear_errors_since_last_clear(self, v, load=False):
    """
    Setter method for resvtear_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvtear_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvtear_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvtear_errors_since_last_clear() directly.

    YANG Description: RSVP ResvTear message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors-since-last-clear", rest_name="resvtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvtear_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors-since-last-clear", rest_name="resvtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvtear_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvtear_errors_since_last_clear(self):
    self.__resvtear_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-errors-since-last-clear", rest_name="resvtear-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvconf_errors_since_last_clear(self):
    """
    Getter method for resvconf_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvconf_errors_since_last_clear (uint64)

    YANG Description: RSVP ResvConf message errors since last clear
    """
    return self.__resvconf_errors_since_last_clear
      
  def _set_resvconf_errors_since_last_clear(self, v, load=False):
    """
    Setter method for resvconf_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/resvconf_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvconf_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvconf_errors_since_last_clear() directly.

    YANG Description: RSVP ResvConf message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors-since-last-clear", rest_name="resvconf-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvconf_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors-since-last-clear", rest_name="resvconf-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvconf_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvconf_errors_since_last_clear(self):
    self.__resvconf_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-errors-since-last-clear", rest_name="resvconf-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_bundle_errors_since_last_clear(self):
    """
    Getter method for bundle_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/bundle_errors_since_last_clear (uint64)

    YANG Description: RSVP Bundle message errors since last clear
    """
    return self.__bundle_errors_since_last_clear
      
  def _set_bundle_errors_since_last_clear(self, v, load=False):
    """
    Setter method for bundle_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/bundle_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bundle_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bundle_errors_since_last_clear() directly.

    YANG Description: RSVP Bundle message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors-since-last-clear", rest_name="bundle-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bundle_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors-since-last-clear", rest_name="bundle-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__bundle_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bundle_errors_since_last_clear(self):
    self.__bundle_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-errors-since-last-clear", rest_name="bundle-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_ack_errors_since_last_clear(self):
    """
    Getter method for ack_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/ack_errors_since_last_clear (uint64)

    YANG Description: RSVP acknowledgement errors sice last clear
    """
    return self.__ack_errors_since_last_clear
      
  def _set_ack_errors_since_last_clear(self, v, load=False):
    """
    Setter method for ack_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/ack_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack_errors_since_last_clear() directly.

    YANG Description: RSVP acknowledgement errors sice last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors-since-last-clear", rest_name="ack-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors-since-last-clear", rest_name="ack-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ack_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack_errors_since_last_clear(self):
    self.__ack_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-errors-since-last-clear", rest_name="ack-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_sumrefresh_errors_since_last_clear(self):
    """
    Getter method for sumrefresh_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/sumrefresh_errors_since_last_clear (uint64)

    YANG Description: RSVP SumRefresh message errors since last clear
    """
    return self.__sumrefresh_errors_since_last_clear
      
  def _set_sumrefresh_errors_since_last_clear(self, v, load=False):
    """
    Setter method for sumrefresh_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/sumrefresh_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sumrefresh_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sumrefresh_errors_since_last_clear() directly.

    YANG Description: RSVP SumRefresh message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors-since-last-clear", rest_name="sumrefresh-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sumrefresh_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors-since-last-clear", rest_name="sumrefresh-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__sumrefresh_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sumrefresh_errors_since_last_clear(self):
    self.__sumrefresh_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-errors-since-last-clear", rest_name="sumrefresh-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_hello_errors_since_last_clear(self):
    """
    Getter method for hello_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/hello_errors_since_last_clear (uint64)

    YANG Description: RSVP hello message errors since last clear
    """
    return self.__hello_errors_since_last_clear
      
  def _set_hello_errors_since_last_clear(self, v, load=False):
    """
    Setter method for hello_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/hello_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_errors_since_last_clear() directly.

    YANG Description: RSVP hello message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors-since-last-clear", rest_name="hello-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors-since-last-clear", rest_name="hello-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_errors_since_last_clear(self):
    self.__hello_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-errors-since-last-clear", rest_name="hello-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_nackobject_errors_since_last_clear(self):
    """
    Getter method for nackobject_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/nackobject_errors_since_last_clear (uint64)

    YANG Description: RSVP NACK message errors since last clear
    """
    return self.__nackobject_errors_since_last_clear
      
  def _set_nackobject_errors_since_last_clear(self, v, load=False):
    """
    Setter method for nackobject_errors_since_last_clear, mapped from YANG variable /mpls_state/rsvp/statistics/packet_error_counters/nackobject_errors_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nackobject_errors_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nackobject_errors_since_last_clear() directly.

    YANG Description: RSVP NACK message errors since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nackobject_errors_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__nackobject_errors_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nackobject_errors_since_last_clear(self):
    self.__nackobject_errors_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="nackobject-errors-since-last-clear", rest_name="nackobject-errors-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)

  rx_pkt_bad_length = __builtin__.property(_get_rx_pkt_bad_length)
  rx_pkt_unknown_type = __builtin__.property(_get_rx_pkt_unknown_type)
  rx_pkt_bad_version = __builtin__.property(_get_rx_pkt_bad_version)
  rx_pkt_bad_checksum = __builtin__.property(_get_rx_pkt_bad_checksum)
  mem_alloc_fail = __builtin__.property(_get_mem_alloc_fail)
  rx_md5_auth_error = __builtin__.property(_get_rx_md5_auth_error)
  path_state_timeout = __builtin__.property(_get_path_state_timeout)
  resv_state_timeout = __builtin__.property(_get_resv_state_timeout)
  pkt_with_msg_id_drop = __builtin__.property(_get_pkt_with_msg_id_drop)
  pkt_with_sref_drop = __builtin__.property(_get_pkt_with_sref_drop)
  rx_pkt_bad_length_since_last_clear = __builtin__.property(_get_rx_pkt_bad_length_since_last_clear)
  rx_pkt_unknown_type_since_last_clear = __builtin__.property(_get_rx_pkt_unknown_type_since_last_clear)
  rx_pkt_bad_version_since_last_clear = __builtin__.property(_get_rx_pkt_bad_version_since_last_clear)
  rx_pkt_bad_checksum_since_last_clear = __builtin__.property(_get_rx_pkt_bad_checksum_since_last_clear)
  mem_alloc_fail_since_last_clear = __builtin__.property(_get_mem_alloc_fail_since_last_clear)
  rx_md5_auth_error_since_last_clear = __builtin__.property(_get_rx_md5_auth_error_since_last_clear)
  path_state_timeout_since_last_clear = __builtin__.property(_get_path_state_timeout_since_last_clear)
  resv_state_timeout_since_last_clear = __builtin__.property(_get_resv_state_timeout_since_last_clear)
  pkt_with_msg_id_drop_since_last_clear = __builtin__.property(_get_pkt_with_msg_id_drop_since_last_clear)
  pkt_with_sref_drop_since_last_clear = __builtin__.property(_get_pkt_with_sref_drop_since_last_clear)
  path_errors = __builtin__.property(_get_path_errors)
  resv_errors = __builtin__.property(_get_resv_errors)
  patherr_errors = __builtin__.property(_get_patherr_errors)
  resverr_errors = __builtin__.property(_get_resverr_errors)
  pathtear_errors = __builtin__.property(_get_pathtear_errors)
  resvtear_errors = __builtin__.property(_get_resvtear_errors)
  resvconf_errors = __builtin__.property(_get_resvconf_errors)
  bundle_errors = __builtin__.property(_get_bundle_errors)
  ack_errors = __builtin__.property(_get_ack_errors)
  sumrefresh_errors = __builtin__.property(_get_sumrefresh_errors)
  hello_errors = __builtin__.property(_get_hello_errors)
  nackobject_errors = __builtin__.property(_get_nackobject_errors)
  path_errors_since_last_clear = __builtin__.property(_get_path_errors_since_last_clear)
  resv_errors_since_last_clear = __builtin__.property(_get_resv_errors_since_last_clear)
  patherr_errors_since_last_clear = __builtin__.property(_get_patherr_errors_since_last_clear)
  resverr_errors_since_last_clear = __builtin__.property(_get_resverr_errors_since_last_clear)
  pathtear_errors_since_last_clear = __builtin__.property(_get_pathtear_errors_since_last_clear)
  resvtear_errors_since_last_clear = __builtin__.property(_get_resvtear_errors_since_last_clear)
  resvconf_errors_since_last_clear = __builtin__.property(_get_resvconf_errors_since_last_clear)
  bundle_errors_since_last_clear = __builtin__.property(_get_bundle_errors_since_last_clear)
  ack_errors_since_last_clear = __builtin__.property(_get_ack_errors_since_last_clear)
  sumrefresh_errors_since_last_clear = __builtin__.property(_get_sumrefresh_errors_since_last_clear)
  hello_errors_since_last_clear = __builtin__.property(_get_hello_errors_since_last_clear)
  nackobject_errors_since_last_clear = __builtin__.property(_get_nackobject_errors_since_last_clear)


  _pyangbind_elements = {'rx_pkt_bad_length': rx_pkt_bad_length, 'rx_pkt_unknown_type': rx_pkt_unknown_type, 'rx_pkt_bad_version': rx_pkt_bad_version, 'rx_pkt_bad_checksum': rx_pkt_bad_checksum, 'mem_alloc_fail': mem_alloc_fail, 'rx_md5_auth_error': rx_md5_auth_error, 'path_state_timeout': path_state_timeout, 'resv_state_timeout': resv_state_timeout, 'pkt_with_msg_id_drop': pkt_with_msg_id_drop, 'pkt_with_sref_drop': pkt_with_sref_drop, 'rx_pkt_bad_length_since_last_clear': rx_pkt_bad_length_since_last_clear, 'rx_pkt_unknown_type_since_last_clear': rx_pkt_unknown_type_since_last_clear, 'rx_pkt_bad_version_since_last_clear': rx_pkt_bad_version_since_last_clear, 'rx_pkt_bad_checksum_since_last_clear': rx_pkt_bad_checksum_since_last_clear, 'mem_alloc_fail_since_last_clear': mem_alloc_fail_since_last_clear, 'rx_md5_auth_error_since_last_clear': rx_md5_auth_error_since_last_clear, 'path_state_timeout_since_last_clear': path_state_timeout_since_last_clear, 'resv_state_timeout_since_last_clear': resv_state_timeout_since_last_clear, 'pkt_with_msg_id_drop_since_last_clear': pkt_with_msg_id_drop_since_last_clear, 'pkt_with_sref_drop_since_last_clear': pkt_with_sref_drop_since_last_clear, 'path_errors': path_errors, 'resv_errors': resv_errors, 'patherr_errors': patherr_errors, 'resverr_errors': resverr_errors, 'pathtear_errors': pathtear_errors, 'resvtear_errors': resvtear_errors, 'resvconf_errors': resvconf_errors, 'bundle_errors': bundle_errors, 'ack_errors': ack_errors, 'sumrefresh_errors': sumrefresh_errors, 'hello_errors': hello_errors, 'nackobject_errors': nackobject_errors, 'path_errors_since_last_clear': path_errors_since_last_clear, 'resv_errors_since_last_clear': resv_errors_since_last_clear, 'patherr_errors_since_last_clear': patherr_errors_since_last_clear, 'resverr_errors_since_last_clear': resverr_errors_since_last_clear, 'pathtear_errors_since_last_clear': pathtear_errors_since_last_clear, 'resvtear_errors_since_last_clear': resvtear_errors_since_last_clear, 'resvconf_errors_since_last_clear': resvconf_errors_since_last_clear, 'bundle_errors_since_last_clear': bundle_errors_since_last_clear, 'ack_errors_since_last_clear': ack_errors_since_last_clear, 'sumrefresh_errors_since_last_clear': sumrefresh_errors_since_last_clear, 'hello_errors_since_last_clear': hello_errors_since_last_clear, 'nackobject_errors_since_last_clear': nackobject_errors_since_last_clear, }


