
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import ldp_fec_summary
import ldp_fec_prefixes
import ldp_fec_vcs
import ldp_fec_prefix_longer
import ldp_fec_vcid
import ldp_fec_prefix_prefix
class fec(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/ldp/fec. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: 
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ldp_fec_summary','__ldp_fec_prefixes','__ldp_fec_vcs','__ldp_fec_prefix_longer','__ldp_fec_vcid','__ldp_fec_prefix_prefix',)

  _yang_name = 'fec'
  _rest_name = 'fec'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ldp_fec_prefix_longer = YANGDynClass(base=YANGListType("prefix",ldp_fec_prefix_longer.ldp_fec_prefix_longer, yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__ldp_fec_prefix_prefix = YANGDynClass(base=ldp_fec_prefix_prefix.ldp_fec_prefix_prefix, is_container='container', presence=False, yang_name="ldp-fec-prefix-prefix", rest_name="ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-prefix-ldp-fec-prefix-prefix-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__ldp_fec_vcid = YANGDynClass(base=YANGListType("vc_id",ldp_fec_vcid.ldp_fec_vcid, yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-id', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__ldp_fec_summary = YANGDynClass(base=ldp_fec_summary.ldp_fec_summary, is_container='container', presence=False, yang_name="ldp-fec-summary", rest_name="ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__ldp_fec_prefixes = YANGDynClass(base=ldp_fec_prefixes.ldp_fec_prefixes, is_container='container', presence=False, yang_name="ldp-fec-prefixes", rest_name="ldp-fec-prefixes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefixes', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    self.__ldp_fec_vcs = YANGDynClass(base=ldp_fec_vcs.ldp_fec_vcs, is_container='container', presence=False, yang_name="ldp-fec-vcs", rest_name="ldp-fec-vcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcs', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'ldp', u'fec']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'ldp', u'fec']

  def _get_ldp_fec_summary(self):
    """
    Getter method for ldp_fec_summary, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_summary (container)
    """
    return self.__ldp_fec_summary
      
  def _set_ldp_fec_summary(self, v, load=False):
    """
    Setter method for ldp_fec_summary, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_summary (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_summary() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ldp_fec_summary.ldp_fec_summary, is_container='container', presence=False, yang_name="ldp-fec-summary", rest_name="ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_summary must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ldp_fec_summary.ldp_fec_summary, is_container='container', presence=False, yang_name="ldp-fec-summary", rest_name="ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__ldp_fec_summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_summary(self):
    self.__ldp_fec_summary = YANGDynClass(base=ldp_fec_summary.ldp_fec_summary, is_container='container', presence=False, yang_name="ldp-fec-summary", rest_name="ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-summary', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_ldp_fec_prefixes(self):
    """
    Getter method for ldp_fec_prefixes, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_prefixes (container)
    """
    return self.__ldp_fec_prefixes
      
  def _set_ldp_fec_prefixes(self, v, load=False):
    """
    Setter method for ldp_fec_prefixes, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_prefixes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefixes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefixes() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ldp_fec_prefixes.ldp_fec_prefixes, is_container='container', presence=False, yang_name="ldp-fec-prefixes", rest_name="ldp-fec-prefixes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefixes', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefixes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ldp_fec_prefixes.ldp_fec_prefixes, is_container='container', presence=False, yang_name="ldp-fec-prefixes", rest_name="ldp-fec-prefixes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefixes', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__ldp_fec_prefixes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefixes(self):
    self.__ldp_fec_prefixes = YANGDynClass(base=ldp_fec_prefixes.ldp_fec_prefixes, is_container='container', presence=False, yang_name="ldp-fec-prefixes", rest_name="ldp-fec-prefixes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefixes', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_ldp_fec_vcs(self):
    """
    Getter method for ldp_fec_vcs, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs (container)
    """
    return self.__ldp_fec_vcs
      
  def _set_ldp_fec_vcs(self, v, load=False):
    """
    Setter method for ldp_fec_vcs, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vcs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vcs() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ldp_fec_vcs.ldp_fec_vcs, is_container='container', presence=False, yang_name="ldp-fec-vcs", rest_name="ldp-fec-vcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcs', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vcs must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ldp_fec_vcs.ldp_fec_vcs, is_container='container', presence=False, yang_name="ldp-fec-vcs", rest_name="ldp-fec-vcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcs', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__ldp_fec_vcs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vcs(self):
    self.__ldp_fec_vcs = YANGDynClass(base=ldp_fec_vcs.ldp_fec_vcs, is_container='container', presence=False, yang_name="ldp-fec-vcs", rest_name="ldp-fec-vcs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcs', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)


  def _get_ldp_fec_prefix_longer(self):
    """
    Getter method for ldp_fec_prefix_longer, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_prefix_longer (list)
    """
    return self.__ldp_fec_prefix_longer
      
  def _set_ldp_fec_prefix_longer(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_longer, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_prefix_longer (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_longer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_longer() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("prefix",ldp_fec_prefix_longer.ldp_fec_prefix_longer, yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_longer must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("prefix",ldp_fec_prefix_longer.ldp_fec_prefix_longer, yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__ldp_fec_prefix_longer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_longer(self):
    self.__ldp_fec_prefix_longer = YANGDynClass(base=YANGListType("prefix",ldp_fec_prefix_longer.ldp_fec_prefix_longer, yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='prefix', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-prefix-longer", rest_name="ldp-fec-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-longer', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_ldp_fec_vcid(self):
    """
    Getter method for ldp_fec_vcid, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcid (list)
    """
    return self.__ldp_fec_vcid
      
  def _set_ldp_fec_vcid(self, v, load=False):
    """
    Setter method for ldp_fec_vcid, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcid (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vcid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vcid() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vc_id",ldp_fec_vcid.ldp_fec_vcid, yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-id', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vcid must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vc_id",ldp_fec_vcid.ldp_fec_vcid, yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-id', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__ldp_fec_vcid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vcid(self):
    self.__ldp_fec_vcid = YANGDynClass(base=YANGListType("vc_id",ldp_fec_vcid.ldp_fec_vcid, yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-id', extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}), is_container='list', yang_name="ldp-fec-vcid", rest_name="ldp-fec-vcid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-vcid', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_ldp_fec_prefix_prefix(self):
    """
    Getter method for ldp_fec_prefix_prefix, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_prefix_prefix (container)
    """
    return self.__ldp_fec_prefix_prefix
      
  def _set_ldp_fec_prefix_prefix(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_prefix, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_prefix_prefix (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_prefix() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ldp_fec_prefix_prefix.ldp_fec_prefix_prefix, is_container='container', presence=False, yang_name="ldp-fec-prefix-prefix", rest_name="ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-prefix-ldp-fec-prefix-prefix-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_prefix must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ldp_fec_prefix_prefix.ldp_fec_prefix_prefix, is_container='container', presence=False, yang_name="ldp-fec-prefix-prefix", rest_name="ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-prefix-ldp-fec-prefix-prefix-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)""",
        })

    self.__ldp_fec_prefix_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_prefix(self):
    self.__ldp_fec_prefix_prefix = YANGDynClass(base=ldp_fec_prefix_prefix.ldp_fec_prefix_prefix, is_container='container', presence=False, yang_name="ldp-fec-prefix-prefix", rest_name="ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-ldp-fec-prefix-prefix-ldp-fec-prefix-prefix-1'}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='container', is_config=False)

  ldp_fec_summary = __builtin__.property(_get_ldp_fec_summary)
  ldp_fec_prefixes = __builtin__.property(_get_ldp_fec_prefixes)
  ldp_fec_vcs = __builtin__.property(_get_ldp_fec_vcs)
  ldp_fec_prefix_longer = __builtin__.property(_get_ldp_fec_prefix_longer)
  ldp_fec_vcid = __builtin__.property(_get_ldp_fec_vcid)
  ldp_fec_prefix_prefix = __builtin__.property(_get_ldp_fec_prefix_prefix)


  _pyangbind_elements = {'ldp_fec_summary': ldp_fec_summary, 'ldp_fec_prefixes': ldp_fec_prefixes, 'ldp_fec_vcs': ldp_fec_vcs, 'ldp_fec_prefix_longer': ldp_fec_prefix_longer, 'ldp_fec_vcid': ldp_fec_vcid, 'ldp_fec_prefix_prefix': ldp_fec_prefix_prefix, }


