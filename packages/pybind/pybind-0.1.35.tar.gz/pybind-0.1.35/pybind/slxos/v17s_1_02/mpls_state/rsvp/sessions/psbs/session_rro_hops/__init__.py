
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class session_rro_hops(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/rsvp/sessions/psbs/session-rro-hops. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS RSVP record route object hop
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ip_addr','__rro_flag_is_local_protect_available','__rro_flag_is_local_protect_in_use','__rro_flag_rro_is_router_id','__rro_flag_rro_node_protect','__rro_flag_rro_bandwidth_protect',)

  _yang_name = 'session-rro-hops'
  _rest_name = 'session-rro-hops'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__rro_flag_is_local_protect_in_use = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-in-use", rest_name="rro-flag-is-local-protect-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-addr", rest_name="ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__rro_flag_is_local_protect_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-available", rest_name="rro-flag-is-local-protect-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rro_flag_rro_node_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-node-protect", rest_name="rro-flag-rro-node-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rro_flag_rro_is_router_id = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-is-router-id", rest_name="rro-flag-rro-is-router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__rro_flag_rro_bandwidth_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-bandwidth-protect", rest_name="rro-flag-rro-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'rsvp', u'sessions', u'psbs', u'session-rro-hops']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'rsvp', u'sessions', u'psbs', u'session-rro-hops']

  def _get_ip_addr(self):
    """
    Getter method for ip_addr, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/ip_addr (inet:ipv4-address)

    YANG Description: IP address of the hop
    """
    return self.__ip_addr
      
  def _set_ip_addr(self, v, load=False):
    """
    Setter method for ip_addr, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/ip_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_addr() directly.

    YANG Description: IP address of the hop
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-addr", rest_name="ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-addr", rest_name="ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__ip_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_addr(self):
    self.__ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ip-addr", rest_name="ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_rro_flag_is_local_protect_available(self):
    """
    Getter method for rro_flag_is_local_protect_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_is_local_protect_available (boolean)

    YANG Description: RRO flag - is local protection available
    """
    return self.__rro_flag_is_local_protect_available
      
  def _set_rro_flag_is_local_protect_available(self, v, load=False):
    """
    Setter method for rro_flag_is_local_protect_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_is_local_protect_available (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rro_flag_is_local_protect_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rro_flag_is_local_protect_available() directly.

    YANG Description: RRO flag - is local protection available
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-available", rest_name="rro-flag-is-local-protect-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rro_flag_is_local_protect_available must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-available", rest_name="rro-flag-is-local-protect-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rro_flag_is_local_protect_available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rro_flag_is_local_protect_available(self):
    self.__rro_flag_is_local_protect_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-available", rest_name="rro-flag-is-local-protect-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rro_flag_is_local_protect_in_use(self):
    """
    Getter method for rro_flag_is_local_protect_in_use, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_is_local_protect_in_use (boolean)

    YANG Description: RRO flag - is local protection in use
    """
    return self.__rro_flag_is_local_protect_in_use
      
  def _set_rro_flag_is_local_protect_in_use(self, v, load=False):
    """
    Setter method for rro_flag_is_local_protect_in_use, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_is_local_protect_in_use (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rro_flag_is_local_protect_in_use is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rro_flag_is_local_protect_in_use() directly.

    YANG Description: RRO flag - is local protection in use
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-in-use", rest_name="rro-flag-is-local-protect-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rro_flag_is_local_protect_in_use must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-in-use", rest_name="rro-flag-is-local-protect-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rro_flag_is_local_protect_in_use = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rro_flag_is_local_protect_in_use(self):
    self.__rro_flag_is_local_protect_in_use = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-is-local-protect-in-use", rest_name="rro-flag-is-local-protect-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rro_flag_rro_is_router_id(self):
    """
    Getter method for rro_flag_rro_is_router_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_rro_is_router_id (boolean)

    YANG Description: RRO flag - is the address a router id
    """
    return self.__rro_flag_rro_is_router_id
      
  def _set_rro_flag_rro_is_router_id(self, v, load=False):
    """
    Setter method for rro_flag_rro_is_router_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_rro_is_router_id (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rro_flag_rro_is_router_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rro_flag_rro_is_router_id() directly.

    YANG Description: RRO flag - is the address a router id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-is-router-id", rest_name="rro-flag-rro-is-router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rro_flag_rro_is_router_id must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-is-router-id", rest_name="rro-flag-rro-is-router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rro_flag_rro_is_router_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rro_flag_rro_is_router_id(self):
    self.__rro_flag_rro_is_router_id = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-is-router-id", rest_name="rro-flag-rro-is-router-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rro_flag_rro_node_protect(self):
    """
    Getter method for rro_flag_rro_node_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_rro_node_protect (boolean)

    YANG Description: Is this hop protecting a node
    """
    return self.__rro_flag_rro_node_protect
      
  def _set_rro_flag_rro_node_protect(self, v, load=False):
    """
    Setter method for rro_flag_rro_node_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_rro_node_protect (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rro_flag_rro_node_protect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rro_flag_rro_node_protect() directly.

    YANG Description: Is this hop protecting a node
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-node-protect", rest_name="rro-flag-rro-node-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rro_flag_rro_node_protect must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-node-protect", rest_name="rro-flag-rro-node-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rro_flag_rro_node_protect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rro_flag_rro_node_protect(self):
    self.__rro_flag_rro_node_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-node-protect", rest_name="rro-flag-rro-node-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_rro_flag_rro_bandwidth_protect(self):
    """
    Getter method for rro_flag_rro_bandwidth_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_rro_bandwidth_protect (boolean)

    YANG Description: Is bandwidth protection available
    """
    return self.__rro_flag_rro_bandwidth_protect
      
  def _set_rro_flag_rro_bandwidth_protect(self, v, load=False):
    """
    Setter method for rro_flag_rro_bandwidth_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops/rro_flag_rro_bandwidth_protect (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rro_flag_rro_bandwidth_protect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rro_flag_rro_bandwidth_protect() directly.

    YANG Description: Is bandwidth protection available
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-bandwidth-protect", rest_name="rro-flag-rro-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rro_flag_rro_bandwidth_protect must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-bandwidth-protect", rest_name="rro-flag-rro-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__rro_flag_rro_bandwidth_protect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rro_flag_rro_bandwidth_protect(self):
    self.__rro_flag_rro_bandwidth_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rro-flag-rro-bandwidth-protect", rest_name="rro-flag-rro-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)

  ip_addr = __builtin__.property(_get_ip_addr)
  rro_flag_is_local_protect_available = __builtin__.property(_get_rro_flag_is_local_protect_available)
  rro_flag_is_local_protect_in_use = __builtin__.property(_get_rro_flag_is_local_protect_in_use)
  rro_flag_rro_is_router_id = __builtin__.property(_get_rro_flag_rro_is_router_id)
  rro_flag_rro_node_protect = __builtin__.property(_get_rro_flag_rro_node_protect)
  rro_flag_rro_bandwidth_protect = __builtin__.property(_get_rro_flag_rro_bandwidth_protect)


  _pyangbind_elements = {'ip_addr': ip_addr, 'rro_flag_is_local_protect_available': rro_flag_is_local_protect_available, 'rro_flag_is_local_protect_in_use': rro_flag_is_local_protect_in_use, 'rro_flag_rro_is_router_id': rro_flag_rro_is_router_id, 'rro_flag_rro_node_protect': rro_flag_rro_node_protect, 'rro_flag_rro_bandwidth_protect': rro_flag_rro_bandwidth_protect, }


