
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class key(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/ldp/fec/ldp-fec-vcs/key. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__type','__prefix_len','__inet_addr_type','__inet_addr_len','__inet_addr','__vc_ldp_peer_id','__data_fec_type','__vc_type','__vc_control_word_config','__vc_use_control_word','__vc_group_id','__vc_id','__vc_agi_offset','__vc_agi_len','__vc_saii_offset','__vc_saii_len','__vc_taii_offset','__vc_taii_len','__vc_gen_id_size','__vc_gen_id',)

  _yang_name = 'key'
  _rest_name = 'key'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__vc_agi_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-len", rest_name="vc-agi-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_taii_offset = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-offset", rest_name="vc-taii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_ldp_peer_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-ldp-peer-id", rest_name="vc-ldp-peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__vc_taii_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-len", rest_name="vc-taii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__data_fec_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="data-fec-type", rest_name="data-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_group_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-group-id", rest_name="vc-group-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__inet_addr = YANGDynClass(base=unicode, is_leaf=True, yang_name="inet-addr", rest_name="inet-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__inet_addr_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-len", rest_name="inet-addr-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_gen_id_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-gen-id-size", rest_name="vc-gen-id-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__vc_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__inet_addr_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-type", rest_name="inet-addr-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__vc_agi_offset = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-offset", rest_name="vc-agi-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_saii_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-len", rest_name="vc-saii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__prefix_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="prefix-len", rest_name="prefix-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_gen_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-gen-id", rest_name="vc-gen-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_use_control_word = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-use-control-word", rest_name="vc-use-control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_saii_offset = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-offset", rest_name="vc-saii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__vc_control_word_config = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-control-word-config", rest_name="vc-control-word-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'ldp', u'fec', u'ldp-fec-vcs', u'key']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'ldp', u'fec', u'ldp-fec-vcs', u'key']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/type (uint8)

    YANG Description: type
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/type (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_prefix_len(self):
    """
    Getter method for prefix_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/prefix_len (uint8)

    YANG Description: prefix_len
    """
    return self.__prefix_len
      
  def _set_prefix_len(self, v, load=False):
    """
    Setter method for prefix_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/prefix_len (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_prefix_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_prefix_len() directly.

    YANG Description: prefix_len
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="prefix-len", rest_name="prefix-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """prefix_len must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="prefix-len", rest_name="prefix-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__prefix_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_prefix_len(self):
    self.__prefix_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="prefix-len", rest_name="prefix-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_inet_addr_type(self):
    """
    Getter method for inet_addr_type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/inet_addr_type (uint8)

    YANG Description: inet_addr_type
    """
    return self.__inet_addr_type
      
  def _set_inet_addr_type(self, v, load=False):
    """
    Setter method for inet_addr_type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/inet_addr_type (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inet_addr_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inet_addr_type() directly.

    YANG Description: inet_addr_type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-type", rest_name="inet-addr-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inet_addr_type must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-type", rest_name="inet-addr-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__inet_addr_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inet_addr_type(self):
    self.__inet_addr_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-type", rest_name="inet-addr-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_inet_addr_len(self):
    """
    Getter method for inet_addr_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/inet_addr_len (uint8)

    YANG Description: inet_addr_len
    """
    return self.__inet_addr_len
      
  def _set_inet_addr_len(self, v, load=False):
    """
    Setter method for inet_addr_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/inet_addr_len (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inet_addr_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inet_addr_len() directly.

    YANG Description: inet_addr_len
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-len", rest_name="inet-addr-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inet_addr_len must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-len", rest_name="inet-addr-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__inet_addr_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inet_addr_len(self):
    self.__inet_addr_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="inet-addr-len", rest_name="inet-addr-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_inet_addr(self):
    """
    Getter method for inet_addr, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/inet_addr (string)

    YANG Description: inet_addr
    """
    return self.__inet_addr
      
  def _set_inet_addr(self, v, load=False):
    """
    Setter method for inet_addr, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/inet_addr (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inet_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inet_addr() directly.

    YANG Description: inet_addr
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="inet-addr", rest_name="inet-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inet_addr must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="inet-addr", rest_name="inet-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__inet_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inet_addr(self):
    self.__inet_addr = YANGDynClass(base=unicode, is_leaf=True, yang_name="inet-addr", rest_name="inet-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_vc_ldp_peer_id(self):
    """
    Getter method for vc_ldp_peer_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_ldp_peer_id (string)

    YANG Description: vc_ldp_peer_id
    """
    return self.__vc_ldp_peer_id
      
  def _set_vc_ldp_peer_id(self, v, load=False):
    """
    Setter method for vc_ldp_peer_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_ldp_peer_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_ldp_peer_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_ldp_peer_id() directly.

    YANG Description: vc_ldp_peer_id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vc-ldp-peer-id", rest_name="vc-ldp-peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_ldp_peer_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-ldp-peer-id", rest_name="vc-ldp-peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__vc_ldp_peer_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_ldp_peer_id(self):
    self.__vc_ldp_peer_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-ldp-peer-id", rest_name="vc-ldp-peer-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_data_fec_type(self):
    """
    Getter method for data_fec_type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/data_fec_type (uint8)

    YANG Description: data_fec_type
    """
    return self.__data_fec_type
      
  def _set_data_fec_type(self, v, load=False):
    """
    Setter method for data_fec_type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/data_fec_type (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_data_fec_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_data_fec_type() directly.

    YANG Description: data_fec_type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="data-fec-type", rest_name="data-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """data_fec_type must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="data-fec-type", rest_name="data-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__data_fec_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_data_fec_type(self):
    self.__data_fec_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="data-fec-type", rest_name="data-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_type(self):
    """
    Getter method for vc_type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_type (uint16)

    YANG Description: vc_type
    """
    return self.__vc_type
      
  def _set_vc_type(self, v, load=False):
    """
    Setter method for vc_type, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_type (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_type() directly.

    YANG Description: vc_type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_type must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__vc_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_type(self):
    self.__vc_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-type", rest_name="vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)


  def _get_vc_control_word_config(self):
    """
    Getter method for vc_control_word_config, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_control_word_config (uint8)

    YANG Description: vc_control_word_config
    """
    return self.__vc_control_word_config
      
  def _set_vc_control_word_config(self, v, load=False):
    """
    Setter method for vc_control_word_config, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_control_word_config (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_control_word_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_control_word_config() directly.

    YANG Description: vc_control_word_config
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-control-word-config", rest_name="vc-control-word-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_control_word_config must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-control-word-config", rest_name="vc-control-word-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_control_word_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_control_word_config(self):
    self.__vc_control_word_config = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-control-word-config", rest_name="vc-control-word-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_use_control_word(self):
    """
    Getter method for vc_use_control_word, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_use_control_word (uint8)

    YANG Description: vc_use_control_word
    """
    return self.__vc_use_control_word
      
  def _set_vc_use_control_word(self, v, load=False):
    """
    Setter method for vc_use_control_word, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_use_control_word (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_use_control_word is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_use_control_word() directly.

    YANG Description: vc_use_control_word
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-use-control-word", rest_name="vc-use-control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_use_control_word must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-use-control-word", rest_name="vc-use-control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_use_control_word = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_use_control_word(self):
    self.__vc_use_control_word = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-use-control-word", rest_name="vc-use-control-word", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_group_id(self):
    """
    Getter method for vc_group_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_group_id (uint32)

    YANG Description: vc_group_id
    """
    return self.__vc_group_id
      
  def _set_vc_group_id(self, v, load=False):
    """
    Setter method for vc_group_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_group_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_group_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_group_id() directly.

    YANG Description: vc_group_id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-group-id", rest_name="vc-group-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_group_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-group-id", rest_name="vc-group-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_group_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_group_id(self):
    self.__vc_group_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-group-id", rest_name="vc-group-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_id(self):
    """
    Getter method for vc_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_id (uint32)

    YANG Description: vc_id
    """
    return self.__vc_id
      
  def _set_vc_id(self, v, load=False):
    """
    Setter method for vc_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_id() directly.

    YANG Description: vc_id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_id(self):
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_vc_agi_offset(self):
    """
    Getter method for vc_agi_offset, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_agi_offset (uint8)

    YANG Description: vc_agi_offset
    """
    return self.__vc_agi_offset
      
  def _set_vc_agi_offset(self, v, load=False):
    """
    Setter method for vc_agi_offset, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_agi_offset (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_agi_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_agi_offset() directly.

    YANG Description: vc_agi_offset
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-offset", rest_name="vc-agi-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_agi_offset must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-offset", rest_name="vc-agi-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_agi_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_agi_offset(self):
    self.__vc_agi_offset = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-offset", rest_name="vc-agi-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_agi_len(self):
    """
    Getter method for vc_agi_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_agi_len (uint8)

    YANG Description: vc_agi_len
    """
    return self.__vc_agi_len
      
  def _set_vc_agi_len(self, v, load=False):
    """
    Setter method for vc_agi_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_agi_len (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_agi_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_agi_len() directly.

    YANG Description: vc_agi_len
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-len", rest_name="vc-agi-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_agi_len must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-len", rest_name="vc-agi-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_agi_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_agi_len(self):
    self.__vc_agi_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-agi-len", rest_name="vc-agi-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_saii_offset(self):
    """
    Getter method for vc_saii_offset, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_saii_offset (uint8)

    YANG Description: vc_saii_offset
    """
    return self.__vc_saii_offset
      
  def _set_vc_saii_offset(self, v, load=False):
    """
    Setter method for vc_saii_offset, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_saii_offset (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_saii_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_saii_offset() directly.

    YANG Description: vc_saii_offset
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-offset", rest_name="vc-saii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_saii_offset must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-offset", rest_name="vc-saii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_saii_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_saii_offset(self):
    self.__vc_saii_offset = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-offset", rest_name="vc-saii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_saii_len(self):
    """
    Getter method for vc_saii_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_saii_len (uint8)

    YANG Description: vc_saii_len
    """
    return self.__vc_saii_len
      
  def _set_vc_saii_len(self, v, load=False):
    """
    Setter method for vc_saii_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_saii_len (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_saii_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_saii_len() directly.

    YANG Description: vc_saii_len
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-len", rest_name="vc-saii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_saii_len must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-len", rest_name="vc-saii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_saii_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_saii_len(self):
    self.__vc_saii_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-saii-len", rest_name="vc-saii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_taii_offset(self):
    """
    Getter method for vc_taii_offset, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_taii_offset (uint8)

    YANG Description: vc_taii_offset
    """
    return self.__vc_taii_offset
      
  def _set_vc_taii_offset(self, v, load=False):
    """
    Setter method for vc_taii_offset, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_taii_offset (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_taii_offset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_taii_offset() directly.

    YANG Description: vc_taii_offset
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-offset", rest_name="vc-taii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_taii_offset must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-offset", rest_name="vc-taii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_taii_offset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_taii_offset(self):
    self.__vc_taii_offset = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-offset", rest_name="vc-taii-offset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_taii_len(self):
    """
    Getter method for vc_taii_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_taii_len (uint8)

    YANG Description: vc_taii_len
    """
    return self.__vc_taii_len
      
  def _set_vc_taii_len(self, v, load=False):
    """
    Setter method for vc_taii_len, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_taii_len (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_taii_len is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_taii_len() directly.

    YANG Description: vc_taii_len
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-len", rest_name="vc-taii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_taii_len must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-len", rest_name="vc-taii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__vc_taii_len = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_taii_len(self):
    self.__vc_taii_len = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="vc-taii-len", rest_name="vc-taii-len", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_vc_gen_id_size(self):
    """
    Getter method for vc_gen_id_size, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_gen_id_size (uint16)

    YANG Description: vc_gen_id_size
    """
    return self.__vc_gen_id_size
      
  def _set_vc_gen_id_size(self, v, load=False):
    """
    Setter method for vc_gen_id_size, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_gen_id_size (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_gen_id_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_gen_id_size() directly.

    YANG Description: vc_gen_id_size
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-gen-id-size", rest_name="vc-gen-id-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_gen_id_size must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-gen-id-size", rest_name="vc-gen-id-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__vc_gen_id_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_gen_id_size(self):
    self.__vc_gen_id_size = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vc-gen-id-size", rest_name="vc-gen-id-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)


  def _get_vc_gen_id(self):
    """
    Getter method for vc_gen_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_gen_id (string)

    YANG Description: vc_gen_id
    """
    return self.__vc_gen_id
      
  def _set_vc_gen_id(self, v, load=False):
    """
    Setter method for vc_gen_id, mapped from YANG variable /mpls_state/ldp/fec/ldp_fec_vcs/key/vc_gen_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_gen_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_gen_id() directly.

    YANG Description: vc_gen_id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vc-gen-id", rest_name="vc-gen-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_gen_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-gen-id", rest_name="vc-gen-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__vc_gen_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_gen_id(self):
    self.__vc_gen_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="vc-gen-id", rest_name="vc-gen-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)

  type = __builtin__.property(_get_type)
  prefix_len = __builtin__.property(_get_prefix_len)
  inet_addr_type = __builtin__.property(_get_inet_addr_type)
  inet_addr_len = __builtin__.property(_get_inet_addr_len)
  inet_addr = __builtin__.property(_get_inet_addr)
  vc_ldp_peer_id = __builtin__.property(_get_vc_ldp_peer_id)
  data_fec_type = __builtin__.property(_get_data_fec_type)
  vc_type = __builtin__.property(_get_vc_type)
  vc_control_word_config = __builtin__.property(_get_vc_control_word_config)
  vc_use_control_word = __builtin__.property(_get_vc_use_control_word)
  vc_group_id = __builtin__.property(_get_vc_group_id)
  vc_id = __builtin__.property(_get_vc_id)
  vc_agi_offset = __builtin__.property(_get_vc_agi_offset)
  vc_agi_len = __builtin__.property(_get_vc_agi_len)
  vc_saii_offset = __builtin__.property(_get_vc_saii_offset)
  vc_saii_len = __builtin__.property(_get_vc_saii_len)
  vc_taii_offset = __builtin__.property(_get_vc_taii_offset)
  vc_taii_len = __builtin__.property(_get_vc_taii_len)
  vc_gen_id_size = __builtin__.property(_get_vc_gen_id_size)
  vc_gen_id = __builtin__.property(_get_vc_gen_id)


  _pyangbind_elements = {'type': type, 'prefix_len': prefix_len, 'inet_addr_type': inet_addr_type, 'inet_addr_len': inet_addr_len, 'inet_addr': inet_addr, 'vc_ldp_peer_id': vc_ldp_peer_id, 'data_fec_type': data_fec_type, 'vc_type': vc_type, 'vc_control_word_config': vc_control_word_config, 'vc_use_control_word': vc_use_control_word, 'vc_group_id': vc_group_id, 'vc_id': vc_id, 'vc_agi_offset': vc_agi_offset, 'vc_agi_len': vc_agi_len, 'vc_saii_offset': vc_saii_offset, 'vc_saii_len': vc_saii_len, 'vc_taii_offset': vc_taii_offset, 'vc_taii_len': vc_taii_len, 'vc_gen_id_size': vc_gen_id_size, 'vc_gen_id': vc_gen_id, }


