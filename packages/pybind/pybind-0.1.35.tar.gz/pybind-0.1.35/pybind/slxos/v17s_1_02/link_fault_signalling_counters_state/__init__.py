
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class link_fault_signalling_counters_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-nsm-operational - based on the path /link-fault-signalling-counters-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Link fault signalling counters
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__name','__local_fault_counter','__remote_fault_counter','__local_fault_time','__remote_fault_time',)

  _yang_name = 'link-fault-signalling-counters-state'
  _rest_name = 'link-fault-signalling-counters-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__remote_fault_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-time", rest_name="remote-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    self.__local_fault_counter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-counter", rest_name="local-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    self.__local_fault_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-time", rest_name="local-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", rest_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)
    self.__remote_fault_counter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-counter", rest_name="remote-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'link-fault-signalling-counters-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'link-fault-signalling-counters-state']

  def _get_name(self):
    """
    Getter method for name, mapped from YANG variable /link_fault_signalling_counters_state/name (string)

    YANG Description: Port name
    """
    return self.__name
      
  def _set_name(self, v, load=False):
    """
    Setter method for name, mapped from YANG variable /link_fault_signalling_counters_state/name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_name() directly.

    YANG Description: Port name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="name", rest_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="name", rest_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)""",
        })

    self.__name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_name(self):
    self.__name = YANGDynClass(base=unicode, is_leaf=True, yang_name="name", rest_name="name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)


  def _get_local_fault_counter(self):
    """
    Getter method for local_fault_counter, mapped from YANG variable /link_fault_signalling_counters_state/local_fault_counter (uint64)

    YANG Description: Local Link fault counter
    """
    return self.__local_fault_counter
      
  def _set_local_fault_counter(self, v, load=False):
    """
    Setter method for local_fault_counter, mapped from YANG variable /link_fault_signalling_counters_state/local_fault_counter (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_fault_counter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_fault_counter() directly.

    YANG Description: Local Link fault counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-counter", rest_name="local-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_fault_counter must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-counter", rest_name="local-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)""",
        })

    self.__local_fault_counter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_fault_counter(self):
    self.__local_fault_counter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-counter", rest_name="local-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)


  def _get_remote_fault_counter(self):
    """
    Getter method for remote_fault_counter, mapped from YANG variable /link_fault_signalling_counters_state/remote_fault_counter (uint64)

    YANG Description: Remote Link fault counter
    """
    return self.__remote_fault_counter
      
  def _set_remote_fault_counter(self, v, load=False):
    """
    Setter method for remote_fault_counter, mapped from YANG variable /link_fault_signalling_counters_state/remote_fault_counter (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_fault_counter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_fault_counter() directly.

    YANG Description: Remote Link fault counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-counter", rest_name="remote-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_fault_counter must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-counter", rest_name="remote-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)""",
        })

    self.__remote_fault_counter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_fault_counter(self):
    self.__remote_fault_counter = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-counter", rest_name="remote-fault-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)


  def _get_local_fault_time(self):
    """
    Getter method for local_fault_time, mapped from YANG variable /link_fault_signalling_counters_state/local_fault_time (uint64)

    YANG Description: Local Link fault time
    """
    return self.__local_fault_time
      
  def _set_local_fault_time(self, v, load=False):
    """
    Setter method for local_fault_time, mapped from YANG variable /link_fault_signalling_counters_state/local_fault_time (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_fault_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_fault_time() directly.

    YANG Description: Local Link fault time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-time", rest_name="local-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_fault_time must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-time", rest_name="local-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)""",
        })

    self.__local_fault_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_fault_time(self):
    self.__local_fault_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="local-fault-time", rest_name="local-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)


  def _get_remote_fault_time(self):
    """
    Getter method for remote_fault_time, mapped from YANG variable /link_fault_signalling_counters_state/remote_fault_time (uint64)

    YANG Description: Remote Link fault time
    """
    return self.__remote_fault_time
      
  def _set_remote_fault_time(self, v, load=False):
    """
    Setter method for remote_fault_time, mapped from YANG variable /link_fault_signalling_counters_state/remote_fault_time (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_fault_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_fault_time() directly.

    YANG Description: Remote Link fault time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-time", rest_name="remote-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_fault_time must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-time", rest_name="remote-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)""",
        })

    self.__remote_fault_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_fault_time(self):
    self.__remote_fault_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="remote-fault-time", rest_name="remote-fault-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint64', is_config=False)

  name = __builtin__.property(_get_name)
  local_fault_counter = __builtin__.property(_get_local_fault_counter)
  remote_fault_counter = __builtin__.property(_get_remote_fault_counter)
  local_fault_time = __builtin__.property(_get_local_fault_time)
  remote_fault_time = __builtin__.property(_get_remote_fault_time)


  _pyangbind_elements = {'name': name, 'local_fault_counter': local_fault_counter, 'remote_fault_counter': remote_fault_counter, 'local_fault_time': local_fault_time, 'remote_fault_time': remote_fault_time, }


