
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import firmware_version_info
class node_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-firmware-ext - based on the path /brocade_firmware_ext_rpc/show-firmware-version/output/show-firmware-version/node-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__slot_no','__node_instance_no','__node_type','__is_active_cp','__firmware_version_info',)

  _yang_name = 'node-info'
  _rest_name = 'node-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__node_instance_no = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="node-instance-no", rest_name="node-instance-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)
    self.__firmware_version_info = YANGDynClass(base=YANGListType(False,firmware_version_info.firmware_version_info, yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='list', is_config=True)
    self.__node_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-mm': {'value': 0}, u'type-lc': {'value': 2}},), is_leaf=True, yang_name="node-type", rest_name="node-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='node-type-enum', is_config=True)
    self.__slot_no = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="slot-no", rest_name="slot-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)
    self.__is_active_cp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-active-cp", rest_name="is-active-cp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_firmware_ext_rpc', u'show-firmware-version', u'output', u'show-firmware-version', u'node-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-firmware-version', u'output', u'show-firmware-version', u'node-info']

  def _get_slot_no(self):
    """
    Getter method for slot_no, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/slot_no (uint32)
    """
    return self.__slot_no
      
  def _set_slot_no(self, v, load=False):
    """
    Setter method for slot_no, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/slot_no (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slot_no is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slot_no() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="slot-no", rest_name="slot-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slot_no must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="slot-no", rest_name="slot-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)""",
        })

    self.__slot_no = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slot_no(self):
    self.__slot_no = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="slot-no", rest_name="slot-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)


  def _get_node_instance_no(self):
    """
    Getter method for node_instance_no, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/node_instance_no (uint32)
    """
    return self.__node_instance_no
      
  def _set_node_instance_no(self, v, load=False):
    """
    Setter method for node_instance_no, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/node_instance_no (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_instance_no is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_instance_no() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="node-instance-no", rest_name="node-instance-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_instance_no must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="node-instance-no", rest_name="node-instance-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)""",
        })

    self.__node_instance_no = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_instance_no(self):
    self.__node_instance_no = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="node-instance-no", rest_name="node-instance-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='uint32', is_config=True)


  def _get_node_type(self):
    """
    Getter method for node_type, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/node_type (node-type-enum)
    """
    return self.__node_type
      
  def _set_node_type(self, v, load=False):
    """
    Setter method for node_type, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/node_type (node-type-enum)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-mm': {'value': 0}, u'type-lc': {'value': 2}},), is_leaf=True, yang_name="node-type", rest_name="node-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='node-type-enum', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_type must be of a type compatible with node-type-enum""",
          'defined-type': "brocade-firmware-ext:node-type-enum",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-mm': {'value': 0}, u'type-lc': {'value': 2}},), is_leaf=True, yang_name="node-type", rest_name="node-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='node-type-enum', is_config=True)""",
        })

    self.__node_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_type(self):
    self.__node_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'type-mm': {'value': 0}, u'type-lc': {'value': 2}},), is_leaf=True, yang_name="node-type", rest_name="node-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='node-type-enum', is_config=True)


  def _get_is_active_cp(self):
    """
    Getter method for is_active_cp, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/is_active_cp (boolean)
    """
    return self.__is_active_cp
      
  def _set_is_active_cp(self, v, load=False):
    """
    Setter method for is_active_cp, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/is_active_cp (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_active_cp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_active_cp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-active-cp", rest_name="is-active-cp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_active_cp must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-active-cp", rest_name="is-active-cp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='boolean', is_config=True)""",
        })

    self.__is_active_cp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_active_cp(self):
    self.__is_active_cp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-active-cp", rest_name="is-active-cp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='boolean', is_config=True)


  def _get_firmware_version_info(self):
    """
    Getter method for firmware_version_info, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info (list)
    """
    return self.__firmware_version_info
      
  def _set_firmware_version_info(self, v, load=False):
    """
    Setter method for firmware_version_info, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_firmware_version_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_firmware_version_info() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,firmware_version_info.firmware_version_info, yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """firmware_version_info must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,firmware_version_info.firmware_version_info, yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='list', is_config=True)""",
        })

    self.__firmware_version_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_firmware_version_info(self):
    self.__firmware_version_info = YANGDynClass(base=YANGListType(False,firmware_version_info.firmware_version_info, yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="firmware-version-info", rest_name="firmware-version-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='list', is_config=True)

  slot_no = __builtin__.property(_get_slot_no, _set_slot_no)
  node_instance_no = __builtin__.property(_get_node_instance_no, _set_node_instance_no)
  node_type = __builtin__.property(_get_node_type, _set_node_type)
  is_active_cp = __builtin__.property(_get_is_active_cp, _set_is_active_cp)
  firmware_version_info = __builtin__.property(_get_firmware_version_info, _set_firmware_version_info)


  _pyangbind_elements = {'slot_no': slot_no, 'node_instance_no': node_instance_no, 'node_type': node_type, 'is_active_cp': is_active_cp, 'firmware_version_info': firmware_version_info, }


