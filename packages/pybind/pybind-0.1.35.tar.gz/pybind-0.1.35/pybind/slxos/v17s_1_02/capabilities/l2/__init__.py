
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class l2(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-system-capabilities - based on the path /capabilities/l2. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__port_profile','__overlap_vlan','__rspan','__mac_move','__consistency_check','__learning_mode','__priority_tag','__internal_nsm','__lif_untagged_vlan_id','__lif_egress','__lif_inner_vlan','__bridgedomain_local_switching','__bridgedomain_transparent','__dot1x',)

  _yang_name = 'l2'
  _rest_name = 'l2'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__lif_egress = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_egress", rest_name="lif_egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__bridgedomain_local_switching = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bridgedomain_local_switching", rest_name="bridgedomain_local_switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__bridgedomain_transparent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bridgedomain_transparent", rest_name="bridgedomain_transparent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__lif_untagged_vlan_id = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_untagged_vlan_id", rest_name="lif_untagged_vlan_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__dot1x = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dot1x", rest_name="dot1x", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__consistency_check = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="consistency_check", rest_name="consistency_check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__mac_move = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac_move", rest_name="mac_move", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__learning_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="learning_mode", rest_name="learning_mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__overlap_vlan = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="overlap_vlan", rest_name="overlap_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__port_profile = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port_profile", rest_name="port_profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__internal_nsm = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="internal_nsm", rest_name="internal_nsm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__priority_tag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="priority_tag", rest_name="priority_tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__lif_inner_vlan = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_inner_vlan", rest_name="lif_inner_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    self.__rspan = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rspan", rest_name="rspan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'capabilities', u'l2']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'capabilities', u'l2']

  def _get_port_profile(self):
    """
    Getter method for port_profile, mapped from YANG variable /capabilities/l2/port_profile (boolean)
    """
    return self.__port_profile
      
  def _set_port_profile(self, v, load=False):
    """
    Setter method for port_profile, mapped from YANG variable /capabilities/l2/port_profile (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_profile() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="port_profile", rest_name="port_profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_profile must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port_profile", rest_name="port_profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__port_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_profile(self):
    self.__port_profile = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port_profile", rest_name="port_profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_overlap_vlan(self):
    """
    Getter method for overlap_vlan, mapped from YANG variable /capabilities/l2/overlap_vlan (boolean)
    """
    return self.__overlap_vlan
      
  def _set_overlap_vlan(self, v, load=False):
    """
    Setter method for overlap_vlan, mapped from YANG variable /capabilities/l2/overlap_vlan (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overlap_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overlap_vlan() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="overlap_vlan", rest_name="overlap_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overlap_vlan must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="overlap_vlan", rest_name="overlap_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__overlap_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overlap_vlan(self):
    self.__overlap_vlan = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="overlap_vlan", rest_name="overlap_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_rspan(self):
    """
    Getter method for rspan, mapped from YANG variable /capabilities/l2/rspan (boolean)
    """
    return self.__rspan
      
  def _set_rspan(self, v, load=False):
    """
    Setter method for rspan, mapped from YANG variable /capabilities/l2/rspan (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rspan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rspan() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rspan", rest_name="rspan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rspan must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rspan", rest_name="rspan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__rspan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rspan(self):
    self.__rspan = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rspan", rest_name="rspan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_mac_move(self):
    """
    Getter method for mac_move, mapped from YANG variable /capabilities/l2/mac_move (boolean)
    """
    return self.__mac_move
      
  def _set_mac_move(self, v, load=False):
    """
    Setter method for mac_move, mapped from YANG variable /capabilities/l2/mac_move (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_move is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_move() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac_move", rest_name="mac_move", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_move must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac_move", rest_name="mac_move", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__mac_move = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_move(self):
    self.__mac_move = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac_move", rest_name="mac_move", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_consistency_check(self):
    """
    Getter method for consistency_check, mapped from YANG variable /capabilities/l2/consistency_check (boolean)
    """
    return self.__consistency_check
      
  def _set_consistency_check(self, v, load=False):
    """
    Setter method for consistency_check, mapped from YANG variable /capabilities/l2/consistency_check (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_consistency_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_consistency_check() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="consistency_check", rest_name="consistency_check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """consistency_check must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="consistency_check", rest_name="consistency_check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__consistency_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_consistency_check(self):
    self.__consistency_check = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="consistency_check", rest_name="consistency_check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_learning_mode(self):
    """
    Getter method for learning_mode, mapped from YANG variable /capabilities/l2/learning_mode (boolean)
    """
    return self.__learning_mode
      
  def _set_learning_mode(self, v, load=False):
    """
    Setter method for learning_mode, mapped from YANG variable /capabilities/l2/learning_mode (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_learning_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_learning_mode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="learning_mode", rest_name="learning_mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """learning_mode must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="learning_mode", rest_name="learning_mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__learning_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_learning_mode(self):
    self.__learning_mode = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="learning_mode", rest_name="learning_mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_priority_tag(self):
    """
    Getter method for priority_tag, mapped from YANG variable /capabilities/l2/priority_tag (boolean)
    """
    return self.__priority_tag
      
  def _set_priority_tag(self, v, load=False):
    """
    Setter method for priority_tag, mapped from YANG variable /capabilities/l2/priority_tag (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority_tag() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="priority_tag", rest_name="priority_tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority_tag must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="priority_tag", rest_name="priority_tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__priority_tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority_tag(self):
    self.__priority_tag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="priority_tag", rest_name="priority_tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_internal_nsm(self):
    """
    Getter method for internal_nsm, mapped from YANG variable /capabilities/l2/internal_nsm (boolean)
    """
    return self.__internal_nsm
      
  def _set_internal_nsm(self, v, load=False):
    """
    Setter method for internal_nsm, mapped from YANG variable /capabilities/l2/internal_nsm (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_internal_nsm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_internal_nsm() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="internal_nsm", rest_name="internal_nsm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """internal_nsm must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="internal_nsm", rest_name="internal_nsm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__internal_nsm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_internal_nsm(self):
    self.__internal_nsm = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="internal_nsm", rest_name="internal_nsm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_lif_untagged_vlan_id(self):
    """
    Getter method for lif_untagged_vlan_id, mapped from YANG variable /capabilities/l2/lif_untagged_vlan_id (boolean)
    """
    return self.__lif_untagged_vlan_id
      
  def _set_lif_untagged_vlan_id(self, v, load=False):
    """
    Setter method for lif_untagged_vlan_id, mapped from YANG variable /capabilities/l2/lif_untagged_vlan_id (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lif_untagged_vlan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lif_untagged_vlan_id() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lif_untagged_vlan_id", rest_name="lif_untagged_vlan_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lif_untagged_vlan_id must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_untagged_vlan_id", rest_name="lif_untagged_vlan_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__lif_untagged_vlan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lif_untagged_vlan_id(self):
    self.__lif_untagged_vlan_id = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_untagged_vlan_id", rest_name="lif_untagged_vlan_id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_lif_egress(self):
    """
    Getter method for lif_egress, mapped from YANG variable /capabilities/l2/lif_egress (boolean)
    """
    return self.__lif_egress
      
  def _set_lif_egress(self, v, load=False):
    """
    Setter method for lif_egress, mapped from YANG variable /capabilities/l2/lif_egress (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lif_egress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lif_egress() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lif_egress", rest_name="lif_egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lif_egress must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_egress", rest_name="lif_egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__lif_egress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lif_egress(self):
    self.__lif_egress = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_egress", rest_name="lif_egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_lif_inner_vlan(self):
    """
    Getter method for lif_inner_vlan, mapped from YANG variable /capabilities/l2/lif_inner_vlan (boolean)
    """
    return self.__lif_inner_vlan
      
  def _set_lif_inner_vlan(self, v, load=False):
    """
    Setter method for lif_inner_vlan, mapped from YANG variable /capabilities/l2/lif_inner_vlan (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lif_inner_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lif_inner_vlan() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lif_inner_vlan", rest_name="lif_inner_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lif_inner_vlan must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_inner_vlan", rest_name="lif_inner_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__lif_inner_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lif_inner_vlan(self):
    self.__lif_inner_vlan = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lif_inner_vlan", rest_name="lif_inner_vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_bridgedomain_local_switching(self):
    """
    Getter method for bridgedomain_local_switching, mapped from YANG variable /capabilities/l2/bridgedomain_local_switching (boolean)
    """
    return self.__bridgedomain_local_switching
      
  def _set_bridgedomain_local_switching(self, v, load=False):
    """
    Setter method for bridgedomain_local_switching, mapped from YANG variable /capabilities/l2/bridgedomain_local_switching (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bridgedomain_local_switching is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bridgedomain_local_switching() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bridgedomain_local_switching", rest_name="bridgedomain_local_switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bridgedomain_local_switching must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bridgedomain_local_switching", rest_name="bridgedomain_local_switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__bridgedomain_local_switching = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bridgedomain_local_switching(self):
    self.__bridgedomain_local_switching = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bridgedomain_local_switching", rest_name="bridgedomain_local_switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_bridgedomain_transparent(self):
    """
    Getter method for bridgedomain_transparent, mapped from YANG variable /capabilities/l2/bridgedomain_transparent (boolean)
    """
    return self.__bridgedomain_transparent
      
  def _set_bridgedomain_transparent(self, v, load=False):
    """
    Setter method for bridgedomain_transparent, mapped from YANG variable /capabilities/l2/bridgedomain_transparent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bridgedomain_transparent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bridgedomain_transparent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bridgedomain_transparent", rest_name="bridgedomain_transparent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bridgedomain_transparent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bridgedomain_transparent", rest_name="bridgedomain_transparent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__bridgedomain_transparent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bridgedomain_transparent(self):
    self.__bridgedomain_transparent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bridgedomain_transparent", rest_name="bridgedomain_transparent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)


  def _get_dot1x(self):
    """
    Getter method for dot1x, mapped from YANG variable /capabilities/l2/dot1x (boolean)
    """
    return self.__dot1x
      
  def _set_dot1x(self, v, load=False):
    """
    Setter method for dot1x, mapped from YANG variable /capabilities/l2/dot1x (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dot1x is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dot1x() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dot1x", rest_name="dot1x", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dot1x must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dot1x", rest_name="dot1x", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)""",
        })

    self.__dot1x = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dot1x(self):
    self.__dot1x = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dot1x", rest_name="dot1x", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-system-capabilities', defining_module='brocade-system-capabilities', yang_type='boolean', is_config=False)

  port_profile = __builtin__.property(_get_port_profile)
  overlap_vlan = __builtin__.property(_get_overlap_vlan)
  rspan = __builtin__.property(_get_rspan)
  mac_move = __builtin__.property(_get_mac_move)
  consistency_check = __builtin__.property(_get_consistency_check)
  learning_mode = __builtin__.property(_get_learning_mode)
  priority_tag = __builtin__.property(_get_priority_tag)
  internal_nsm = __builtin__.property(_get_internal_nsm)
  lif_untagged_vlan_id = __builtin__.property(_get_lif_untagged_vlan_id)
  lif_egress = __builtin__.property(_get_lif_egress)
  lif_inner_vlan = __builtin__.property(_get_lif_inner_vlan)
  bridgedomain_local_switching = __builtin__.property(_get_bridgedomain_local_switching)
  bridgedomain_transparent = __builtin__.property(_get_bridgedomain_transparent)
  dot1x = __builtin__.property(_get_dot1x)


  _pyangbind_elements = {'port_profile': port_profile, 'overlap_vlan': overlap_vlan, 'rspan': rspan, 'mac_move': mac_move, 'consistency_check': consistency_check, 'learning_mode': learning_mode, 'priority_tag': priority_tag, 'internal_nsm': internal_nsm, 'lif_untagged_vlan_id': lif_untagged_vlan_id, 'lif_egress': lif_egress, 'lif_inner_vlan': lif_inner_vlan, 'bridgedomain_local_switching': bridgedomain_local_switching, 'bridgedomain_transparent': bridgedomain_transparent, 'dot1x': dot1x, }


