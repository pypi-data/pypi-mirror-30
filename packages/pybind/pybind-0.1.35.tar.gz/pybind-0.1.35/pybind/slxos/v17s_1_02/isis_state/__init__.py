
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import global_isis_info
import router_isis_config
import host_table
import ipv4_routes
import ipv6_routes
import interface_brief
import interface_detail
import database
class isis_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS Operational Information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__global_isis_info','__router_isis_config','__host_table','__ipv4_routes','__ipv6_routes','__interface_brief','__interface_detail','__database',)

  _yang_name = 'isis-state'
  _rest_name = 'isis-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__database = YANGDynClass(base=YANGListType("level",database.database, yang_name="database", rest_name="database", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}), is_container='list', yang_name="database", rest_name="database", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__host_table = YANGDynClass(base=host_table.host_table, is_container='container', presence=False, yang_name="host-table", rest_name="host-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__ipv6_routes = YANGDynClass(base=ipv6_routes.ipv6_routes, is_container='container', presence=False, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv6-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__ipv4_routes = YANGDynClass(base=ipv4_routes.ipv4_routes, is_container='container', presence=False, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__interface_brief = YANGDynClass(base=interface_brief.interface_brief, is_container='container', presence=False, yang_name="interface-brief", rest_name="interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__interface_detail = YANGDynClass(base=interface_detail.interface_detail, is_container='container', presence=False, yang_name="interface-detail", rest_name="interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__global_isis_info = YANGDynClass(base=global_isis_info.global_isis_info, is_container='container', presence=False, yang_name="global-isis-info", rest_name="global-isis-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    self.__router_isis_config = YANGDynClass(base=router_isis_config.router_isis_config, is_container='container', presence=False, yang_name="router-isis-config", rest_name="router-isis-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-isis-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state']

  def _get_global_isis_info(self):
    """
    Getter method for global_isis_info, mapped from YANG variable /isis_state/global_isis_info (container)

    YANG Description: ISIS Global
    """
    return self.__global_isis_info
      
  def _set_global_isis_info(self, v, load=False):
    """
    Setter method for global_isis_info, mapped from YANG variable /isis_state/global_isis_info (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_global_isis_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_global_isis_info() directly.

    YANG Description: ISIS Global
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=global_isis_info.global_isis_info, is_container='container', presence=False, yang_name="global-isis-info", rest_name="global-isis-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """global_isis_info must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=global_isis_info.global_isis_info, is_container='container', presence=False, yang_name="global-isis-info", rest_name="global-isis-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__global_isis_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_global_isis_info(self):
    self.__global_isis_info = YANGDynClass(base=global_isis_info.global_isis_info, is_container='container', presence=False, yang_name="global-isis-info", rest_name="global-isis-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-global', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_router_isis_config(self):
    """
    Getter method for router_isis_config, mapped from YANG variable /isis_state/router_isis_config (container)

    YANG Description: ISIS Global configuration summary
    """
    return self.__router_isis_config
      
  def _set_router_isis_config(self, v, load=False):
    """
    Setter method for router_isis_config, mapped from YANG variable /isis_state/router_isis_config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_router_isis_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_router_isis_config() directly.

    YANG Description: ISIS Global configuration summary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=router_isis_config.router_isis_config, is_container='container', presence=False, yang_name="router-isis-config", rest_name="router-isis-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-isis-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """router_isis_config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=router_isis_config.router_isis_config, is_container='container', presence=False, yang_name="router-isis-config", rest_name="router-isis-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-isis-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__router_isis_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_router_isis_config(self):
    self.__router_isis_config = YANGDynClass(base=router_isis_config.router_isis_config, is_container='container', presence=False, yang_name="router-isis-config", rest_name="router-isis-config", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-isis-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_host_table(self):
    """
    Getter method for host_table, mapped from YANG variable /isis_state/host_table (container)

    YANG Description: The set of IS-IS Host names and Router ID
    """
    return self.__host_table
      
  def _set_host_table(self, v, load=False):
    """
    Setter method for host_table, mapped from YANG variable /isis_state/host_table (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_table is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_table() directly.

    YANG Description: The set of IS-IS Host names and Router ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=host_table.host_table, is_container='container', presence=False, yang_name="host-table", rest_name="host-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_table must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=host_table.host_table, is_container='container', presence=False, yang_name="host-table", rest_name="host-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__host_table = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_table(self):
    self.__host_table = YANGDynClass(base=host_table.host_table, is_container='container', presence=False, yang_name="host-table", rest_name="host-table", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-router-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_ipv4_routes(self):
    """
    Getter method for ipv4_routes, mapped from YANG variable /isis_state/ipv4_routes (container)

    YANG Description: ISIS IPv4 Route Table
    """
    return self.__ipv4_routes
      
  def _set_ipv4_routes(self, v, load=False):
    """
    Setter method for ipv4_routes, mapped from YANG variable /isis_state/ipv4_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv4_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv4_routes() directly.

    YANG Description: ISIS IPv4 Route Table
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv4_routes.ipv4_routes, is_container='container', presence=False, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv4_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv4_routes.ipv4_routes, is_container='container', presence=False, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__ipv4_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv4_routes(self):
    self.__ipv4_routes = YANGDynClass(base=ipv4_routes.ipv4_routes, is_container='container', presence=False, yang_name="ipv4-routes", rest_name="ipv4-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv4-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_ipv6_routes(self):
    """
    Getter method for ipv6_routes, mapped from YANG variable /isis_state/ipv6_routes (container)

    YANG Description: ISIS IPv6 Route Table
    """
    return self.__ipv6_routes
      
  def _set_ipv6_routes(self, v, load=False):
    """
    Setter method for ipv6_routes, mapped from YANG variable /isis_state/ipv6_routes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6_routes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6_routes() directly.

    YANG Description: ISIS IPv6 Route Table
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv6_routes.ipv6_routes, is_container='container', presence=False, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv6-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6_routes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv6_routes.ipv6_routes, is_container='container', presence=False, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv6-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__ipv6_routes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6_routes(self):
    self.__ipv6_routes = YANGDynClass(base=ipv6_routes.ipv6_routes, is_container='container', presence=False, yang_name="ipv6-routes", rest_name="ipv6-routes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-ipv6-route-table', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_interface_brief(self):
    """
    Getter method for interface_brief, mapped from YANG variable /isis_state/interface_brief (container)

    YANG Description: ISIS interface info brief
    """
    return self.__interface_brief
      
  def _set_interface_brief(self, v, load=False):
    """
    Setter method for interface_brief, mapped from YANG variable /isis_state/interface_brief (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_brief() directly.

    YANG Description: ISIS interface info brief
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_brief.interface_brief, is_container='container', presence=False, yang_name="interface-brief", rest_name="interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_brief must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_brief.interface_brief, is_container='container', presence=False, yang_name="interface-brief", rest_name="interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__interface_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_brief(self):
    self.__interface_brief = YANGDynClass(base=interface_brief.interface_brief, is_container='container', presence=False, yang_name="interface-brief", rest_name="interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_interface_detail(self):
    """
    Getter method for interface_detail, mapped from YANG variable /isis_state/interface_detail (container)

    YANG Description: ISIS Interface info detail
    """
    return self.__interface_detail
      
  def _set_interface_detail(self, v, load=False):
    """
    Setter method for interface_detail, mapped from YANG variable /isis_state/interface_detail (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_detail() directly.

    YANG Description: ISIS Interface info detail
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_detail.interface_detail, is_container='container', presence=False, yang_name="interface-detail", rest_name="interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_detail must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_detail.interface_detail, is_container='container', presence=False, yang_name="interface-detail", rest_name="interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)""",
        })

    self.__interface_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_detail(self):
    self.__interface_detail = YANGDynClass(base=interface_detail.interface_detail, is_container='container', presence=False, yang_name="interface-detail", rest_name="interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-port-isis-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='container', is_config=False)


  def _get_database(self):
    """
    Getter method for database, mapped from YANG variable /isis_state/database (list)

    YANG Description: ISIS LSP database
    """
    return self.__database
      
  def _set_database(self, v, load=False):
    """
    Setter method for database, mapped from YANG variable /isis_state/database (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_database is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_database() directly.

    YANG Description: ISIS LSP database
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("level",database.database, yang_name="database", rest_name="database", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}), is_container='list', yang_name="database", rest_name="database", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """database must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("level",database.database, yang_name="database", rest_name="database", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}), is_container='list', yang_name="database", rest_name="database", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__database = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_database(self):
    self.__database = YANGDynClass(base=YANGListType("level",database.database, yang_name="database", rest_name="database", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='level', extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}), is_container='list', yang_name="database", rest_name="database", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-database', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  global_isis_info = __builtin__.property(_get_global_isis_info)
  router_isis_config = __builtin__.property(_get_router_isis_config)
  host_table = __builtin__.property(_get_host_table)
  ipv4_routes = __builtin__.property(_get_ipv4_routes)
  ipv6_routes = __builtin__.property(_get_ipv6_routes)
  interface_brief = __builtin__.property(_get_interface_brief)
  interface_detail = __builtin__.property(_get_interface_detail)
  database = __builtin__.property(_get_database)


  _pyangbind_elements = {'global_isis_info': global_isis_info, 'router_isis_config': router_isis_config, 'host_table': host_table, 'ipv4_routes': ipv4_routes, 'ipv6_routes': ipv6_routes, 'interface_brief': interface_brief, 'interface_detail': interface_detail, 'database': database, }


