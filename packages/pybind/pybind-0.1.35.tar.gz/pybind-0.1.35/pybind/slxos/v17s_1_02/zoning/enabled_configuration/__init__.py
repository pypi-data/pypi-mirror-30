
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class enabled_configuration(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-zone - based on the path /zoning/enabled-configuration. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cfg_name','__default_zone_access','__cfg_action',)

  _yang_name = 'enabled-configuration'
  _rest_name = 'enabled-configuration'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cfg_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cfg-name", rest_name="cfg-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'<WORD>;;Enabled-CFG-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)
    self.__cfg_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfg-clear': {'value': 3}, u'cfg-save': {'value': 1}, u'cfg-none': {'value': 0}, u'cfg-disable': {'value': 2}, u'cfg-transaction-abort': {'value': 4}},), is_leaf=True, yang_name="cfg-action", rest_name="cfg-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Cfg action', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='cfg-action-type', is_config=True)
    self.__default_zone_access = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'allaccess': {'value': 1}, u'noaccess': {'value': 0}},), is_leaf=True, yang_name="default-zone-access", rest_name="default-zone-access", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Default zone access', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='default-zone-access-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'zoning', u'enabled-configuration']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'zoning', u'enabled-configuration']

  def _get_cfg_name(self):
    """
    Getter method for cfg_name, mapped from YANG variable /zoning/enabled_configuration/cfg_name (string)
    """
    return self.__cfg_name
      
  def _set_cfg_name(self, v, load=False):
    """
    Setter method for cfg_name, mapped from YANG variable /zoning/enabled_configuration/cfg_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfg_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfg_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cfg-name", rest_name="cfg-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'<WORD>;;Enabled-CFG-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfg_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cfg-name", rest_name="cfg-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'<WORD>;;Enabled-CFG-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)""",
        })

    self.__cfg_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfg_name(self):
    self.__cfg_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="cfg-name", rest_name="cfg-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'<WORD>;;Enabled-CFG-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)


  def _get_default_zone_access(self):
    """
    Getter method for default_zone_access, mapped from YANG variable /zoning/enabled_configuration/default_zone_access (default-zone-access-type)
    """
    return self.__default_zone_access
      
  def _set_default_zone_access(self, v, load=False):
    """
    Setter method for default_zone_access, mapped from YANG variable /zoning/enabled_configuration/default_zone_access (default-zone-access-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_zone_access is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_zone_access() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'allaccess': {'value': 1}, u'noaccess': {'value': 0}},), is_leaf=True, yang_name="default-zone-access", rest_name="default-zone-access", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Default zone access', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='default-zone-access-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_zone_access must be of a type compatible with default-zone-access-type""",
          'defined-type': "brocade-zone:default-zone-access-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'allaccess': {'value': 1}, u'noaccess': {'value': 0}},), is_leaf=True, yang_name="default-zone-access", rest_name="default-zone-access", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Default zone access', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='default-zone-access-type', is_config=True)""",
        })

    self.__default_zone_access = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_zone_access(self):
    self.__default_zone_access = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'allaccess': {'value': 1}, u'noaccess': {'value': 0}},), is_leaf=True, yang_name="default-zone-access", rest_name="default-zone-access", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Default zone access', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='default-zone-access-type', is_config=True)


  def _get_cfg_action(self):
    """
    Getter method for cfg_action, mapped from YANG variable /zoning/enabled_configuration/cfg_action (cfg-action-type)
    """
    return self.__cfg_action
      
  def _set_cfg_action(self, v, load=False):
    """
    Setter method for cfg_action, mapped from YANG variable /zoning/enabled_configuration/cfg_action (cfg-action-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfg_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfg_action() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfg-clear': {'value': 3}, u'cfg-save': {'value': 1}, u'cfg-none': {'value': 0}, u'cfg-disable': {'value': 2}, u'cfg-transaction-abort': {'value': 4}},), is_leaf=True, yang_name="cfg-action", rest_name="cfg-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Cfg action', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='cfg-action-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfg_action must be of a type compatible with cfg-action-type""",
          'defined-type': "brocade-zone:cfg-action-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfg-clear': {'value': 3}, u'cfg-save': {'value': 1}, u'cfg-none': {'value': 0}, u'cfg-disable': {'value': 2}, u'cfg-transaction-abort': {'value': 4}},), is_leaf=True, yang_name="cfg-action", rest_name="cfg-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Cfg action', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='cfg-action-type', is_config=True)""",
        })

    self.__cfg_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfg_action(self):
    self.__cfg_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfg-clear': {'value': 3}, u'cfg-save': {'value': 1}, u'cfg-none': {'value': 0}, u'cfg-disable': {'value': 2}, u'cfg-transaction-abort': {'value': 4}},), is_leaf=True, yang_name="cfg-action", rest_name="cfg-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Cfg action', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='cfg-action-type', is_config=True)

  cfg_name = __builtin__.property(_get_cfg_name, _set_cfg_name)
  default_zone_access = __builtin__.property(_get_default_zone_access, _set_default_zone_access)
  cfg_action = __builtin__.property(_get_cfg_action, _set_cfg_action)


  _pyangbind_elements = {'cfg_name': cfg_name, 'default_zone_access': default_zone_access, 'cfg_action': cfg_action, }


