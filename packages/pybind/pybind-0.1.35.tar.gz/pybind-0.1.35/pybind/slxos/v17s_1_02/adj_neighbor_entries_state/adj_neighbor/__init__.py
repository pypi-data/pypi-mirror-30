
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import adj_area
class adj_neighbor(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /adj-neighbor-entries-state/adj-neighbor. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS Adjacency Neighbor Entry
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__adj_state_change_time','__adj_type','__adj_state','__neighbor_id','__circuit_intf_name','__snpa','__adj_holding_time','__adj_priority','__adj_mtprot','__adj_prot','__remaining_time','__adj_3way_state','__host_name','__adj_lan_name','__adj_lan_id','__adj_p2p_circ_id','__adj_num_adds','__adj_use','__ip_circuit_id','__adj_address','__ip6_circuit_id','__adj_ip6_address','__bfd_holdover_interval','__adj_bfd_holdover_time','__bfd_state','__adj_area',)

  _yang_name = 'adj-neighbor'
  _rest_name = 'adj-neighbor'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__adj_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="adj-address", rest_name="adj-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__ip6_circuit_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip6-circuit-id", rest_name="ip6-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__adj_area = YANGDynClass(base=YANGListType("adj_asi_area_name",adj_area.adj_area, yang_name="adj-area", rest_name="adj-area", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='adj-asi-area-name', extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}), is_container='list', yang_name="adj-area", rest_name="adj-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__adj_mtprot = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-mtprot", rest_name="adj-mtprot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)
    self.__adj_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-state", rest_name="adj-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__host_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="host-name", rest_name="host-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__adj_num_adds = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-num-adds", rest_name="adj-num-adds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__adj_3way_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-3way-state-init': {'value': 1}, u'adj-3way-state-invalid': {'value': 4}, u'adj-3way-state-down': {'value': 2}, u'adj-3way-state-accept': {'value': 3}, u'adj-3way-state-up': {'value': 0}},), is_leaf=True, yang_name="adj-3way-state", rest_name="adj-3way-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-dcm-3way-adj-state', is_config=False)
    self.__neighbor_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-id", rest_name="neighbor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__adj_lan_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-lan-name", rest_name="adj-lan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__adj_prot = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-prot", rest_name="adj-prot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)
    self.__adj_ip6_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-ip6-address", rest_name="adj-ip6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__ip_circuit_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip-circuit-id", rest_name="ip-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__remaining_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remaining-time", rest_name="remaining-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__adj_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-priority", rest_name="adj-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__snpa = YANGDynClass(base=unicode, is_leaf=True, yang_name="snpa", rest_name="snpa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__adj_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-adj-ptpt': {'value': 8}, u'is-adj-l1': {'value': 2}, u'is-adj-l2': {'value': 4}, u'is-adj-es': {'value': 1}, u'is-adj-unknown': {'value': 0}, u'is-adj-stct': {'value': 16}},), is_leaf=True, yang_name="adj-type", rest_name="adj-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-type', is_config=False)
    self.__bfd_holdover_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__adj_bfd_holdover_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-bfd-holdover-time", rest_name="adj-bfd-holdover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__adj_p2p_circ_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-p2p-circ-id", rest_name="adj-p2p-circ-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__adj_state_change_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-state-change-time", rest_name="adj-state-change-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__bfd_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__adj_holding_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-holding-time", rest_name="adj-holding-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__circuit_intf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="circuit-intf-name", rest_name="circuit-intf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__adj_lan_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-lan-id", rest_name="adj-lan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    self.__adj_use = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="adj-use", rest_name="adj-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-level', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'adj-neighbor-entries-state', u'adj-neighbor']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'adj-neighbor-entries-state', u'adj-neighbor']

  def _get_adj_state_change_time(self):
    """
    Getter method for adj_state_change_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_state_change_time (uint32)

    YANG Description: Adjacency State Change Time in seconds
    """
    return self.__adj_state_change_time
      
  def _set_adj_state_change_time(self, v, load=False):
    """
    Setter method for adj_state_change_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_state_change_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_state_change_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_state_change_time() directly.

    YANG Description: Adjacency State Change Time in seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-state-change-time", rest_name="adj-state-change-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_state_change_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-state-change-time", rest_name="adj-state-change-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__adj_state_change_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_state_change_time(self):
    self.__adj_state_change_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-state-change-time", rest_name="adj-state-change-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_adj_type(self):
    """
    Getter method for adj_type, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_type (isis-adj-type)

    YANG Description: Type of ISIS Adjacency
    """
    return self.__adj_type
      
  def _set_adj_type(self, v, load=False):
    """
    Setter method for adj_type, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_type (isis-adj-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_type() directly.

    YANG Description: Type of ISIS Adjacency
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-adj-ptpt': {'value': 8}, u'is-adj-l1': {'value': 2}, u'is-adj-l2': {'value': 4}, u'is-adj-es': {'value': 1}, u'is-adj-unknown': {'value': 0}, u'is-adj-stct': {'value': 16}},), is_leaf=True, yang_name="adj-type", rest_name="adj-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_type must be of a type compatible with isis-adj-type""",
          'defined-type': "brocade-isis-operational:isis-adj-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-adj-ptpt': {'value': 8}, u'is-adj-l1': {'value': 2}, u'is-adj-l2': {'value': 4}, u'is-adj-es': {'value': 1}, u'is-adj-unknown': {'value': 0}, u'is-adj-stct': {'value': 16}},), is_leaf=True, yang_name="adj-type", rest_name="adj-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-type', is_config=False)""",
        })

    self.__adj_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_type(self):
    self.__adj_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-adj-ptpt': {'value': 8}, u'is-adj-l1': {'value': 2}, u'is-adj-l2': {'value': 4}, u'is-adj-es': {'value': 1}, u'is-adj-unknown': {'value': 0}, u'is-adj-stct': {'value': 16}},), is_leaf=True, yang_name="adj-type", rest_name="adj-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-type', is_config=False)


  def _get_adj_state(self):
    """
    Getter method for adj_state, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_state (string)

    YANG Description: Adjacency State
    """
    return self.__adj_state
      
  def _set_adj_state(self, v, load=False):
    """
    Setter method for adj_state, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_state() directly.

    YANG Description: Adjacency State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="adj-state", rest_name="adj-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-state", rest_name="adj-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__adj_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_state(self):
    self.__adj_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-state", rest_name="adj-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_neighbor_id(self):
    """
    Getter method for neighbor_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/neighbor_id (string)

    YANG Description: Neighbor ID
    """
    return self.__neighbor_id
      
  def _set_neighbor_id(self, v, load=False):
    """
    Setter method for neighbor_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/neighbor_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_id() directly.

    YANG Description: Neighbor ID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="neighbor-id", rest_name="neighbor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-id", rest_name="neighbor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__neighbor_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_id(self):
    self.__neighbor_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-id", rest_name="neighbor-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_circuit_intf_name(self):
    """
    Getter method for circuit_intf_name, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/circuit_intf_name (string)

    YANG Description: Circut Interface Name
    """
    return self.__circuit_intf_name
      
  def _set_circuit_intf_name(self, v, load=False):
    """
    Setter method for circuit_intf_name, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/circuit_intf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_intf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_intf_name() directly.

    YANG Description: Circut Interface Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="circuit-intf-name", rest_name="circuit-intf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_intf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="circuit-intf-name", rest_name="circuit-intf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__circuit_intf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_intf_name(self):
    self.__circuit_intf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="circuit-intf-name", rest_name="circuit-intf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_snpa(self):
    """
    Getter method for snpa, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/snpa (string)

    YANG Description: Subnetwork Point of Attachment
    """
    return self.__snpa
      
  def _set_snpa(self, v, load=False):
    """
    Setter method for snpa, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/snpa (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snpa is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snpa() directly.

    YANG Description: Subnetwork Point of Attachment
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="snpa", rest_name="snpa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snpa must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="snpa", rest_name="snpa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__snpa = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snpa(self):
    self.__snpa = YANGDynClass(base=unicode, is_leaf=True, yang_name="snpa", rest_name="snpa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_adj_holding_time(self):
    """
    Getter method for adj_holding_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_holding_time (uint8)

    YANG Description: Adjacency Holding Time
    """
    return self.__adj_holding_time
      
  def _set_adj_holding_time(self, v, load=False):
    """
    Setter method for adj_holding_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_holding_time (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_holding_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_holding_time() directly.

    YANG Description: Adjacency Holding Time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-holding-time", rest_name="adj-holding-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_holding_time must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-holding-time", rest_name="adj-holding-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__adj_holding_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_holding_time(self):
    self.__adj_holding_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-holding-time", rest_name="adj-holding-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_adj_priority(self):
    """
    Getter method for adj_priority, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_priority (uint8)

    YANG Description: Adjacency Priority
    """
    return self.__adj_priority
      
  def _set_adj_priority(self, v, load=False):
    """
    Setter method for adj_priority, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_priority() directly.

    YANG Description: Adjacency Priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-priority", rest_name="adj-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-priority", rest_name="adj-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__adj_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_priority(self):
    self.__adj_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-priority", rest_name="adj-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_adj_mtprot(self):
    """
    Getter method for adj_mtprot, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_mtprot (isis-adj-prot-type)

    YANG Description: Adjacency Multi-topology Protocol Type
    """
    return self.__adj_mtprot
      
  def _set_adj_mtprot(self, v, load=False):
    """
    Setter method for adj_mtprot, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_mtprot (isis-adj-prot-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_mtprot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_mtprot() directly.

    YANG Description: Adjacency Multi-topology Protocol Type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-mtprot", rest_name="adj-mtprot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_mtprot must be of a type compatible with isis-adj-prot-type""",
          'defined-type': "brocade-isis-operational:isis-adj-prot-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-mtprot", rest_name="adj-mtprot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)""",
        })

    self.__adj_mtprot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_mtprot(self):
    self.__adj_mtprot = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-mtprot", rest_name="adj-mtprot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)


  def _get_adj_prot(self):
    """
    Getter method for adj_prot, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_prot (isis-adj-prot-type)

    YANG Description: Adjacency Protocol Type
    """
    return self.__adj_prot
      
  def _set_adj_prot(self, v, load=False):
    """
    Setter method for adj_prot, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_prot (isis-adj-prot-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_prot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_prot() directly.

    YANG Description: Adjacency Protocol Type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-prot", rest_name="adj-prot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_prot must be of a type compatible with isis-adj-prot-type""",
          'defined-type': "brocade-isis-operational:isis-adj-prot-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-prot", rest_name="adj-prot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)""",
        })

    self.__adj_prot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_prot(self):
    self.__adj_prot = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-mtprot-unknow': {'value': 0}, u'adj-prot-ip': {'value': 2}, u'adj-prot-ip6': {'value': 8}, u'adj-prot-ipx': {'value': 4}, u'adj-prot-osi': {'value': 1}},), is_leaf=True, yang_name="adj-prot", rest_name="adj-prot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-adj-prot-type', is_config=False)


  def _get_remaining_time(self):
    """
    Getter method for remaining_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/remaining_time (uint32)

    YANG Description: Neighbor Gracefully Restarting Remaining Time in seconds
    """
    return self.__remaining_time
      
  def _set_remaining_time(self, v, load=False):
    """
    Setter method for remaining_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/remaining_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remaining_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remaining_time() directly.

    YANG Description: Neighbor Gracefully Restarting Remaining Time in seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remaining-time", rest_name="remaining-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remaining_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remaining-time", rest_name="remaining-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__remaining_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remaining_time(self):
    self.__remaining_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="remaining-time", rest_name="remaining-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_adj_3way_state(self):
    """
    Getter method for adj_3way_state, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_3way_state (isis-dcm-3way-adj-state)

    YANG Description: Adjacency 3 Way Hand Shaking State
    """
    return self.__adj_3way_state
      
  def _set_adj_3way_state(self, v, load=False):
    """
    Setter method for adj_3way_state, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_3way_state (isis-dcm-3way-adj-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_3way_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_3way_state() directly.

    YANG Description: Adjacency 3 Way Hand Shaking State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-3way-state-init': {'value': 1}, u'adj-3way-state-invalid': {'value': 4}, u'adj-3way-state-down': {'value': 2}, u'adj-3way-state-accept': {'value': 3}, u'adj-3way-state-up': {'value': 0}},), is_leaf=True, yang_name="adj-3way-state", rest_name="adj-3way-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-dcm-3way-adj-state', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_3way_state must be of a type compatible with isis-dcm-3way-adj-state""",
          'defined-type': "brocade-isis-operational:isis-dcm-3way-adj-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-3way-state-init': {'value': 1}, u'adj-3way-state-invalid': {'value': 4}, u'adj-3way-state-down': {'value': 2}, u'adj-3way-state-accept': {'value': 3}, u'adj-3way-state-up': {'value': 0}},), is_leaf=True, yang_name="adj-3way-state", rest_name="adj-3way-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-dcm-3way-adj-state', is_config=False)""",
        })

    self.__adj_3way_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_3way_state(self):
    self.__adj_3way_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'adj-3way-state-init': {'value': 1}, u'adj-3way-state-invalid': {'value': 4}, u'adj-3way-state-down': {'value': 2}, u'adj-3way-state-accept': {'value': 3}, u'adj-3way-state-up': {'value': 0}},), is_leaf=True, yang_name="adj-3way-state", rest_name="adj-3way-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-dcm-3way-adj-state', is_config=False)


  def _get_host_name(self):
    """
    Getter method for host_name, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/host_name (string)

    YANG Description: Host Name
    """
    return self.__host_name
      
  def _set_host_name(self, v, load=False):
    """
    Setter method for host_name, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/host_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_host_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_host_name() directly.

    YANG Description: Host Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="host-name", rest_name="host-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """host_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="host-name", rest_name="host-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__host_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_host_name(self):
    self.__host_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="host-name", rest_name="host-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_adj_lan_name(self):
    """
    Getter method for adj_lan_name, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_lan_name (string)

    YANG Description: Lan Name
    """
    return self.__adj_lan_name
      
  def _set_adj_lan_name(self, v, load=False):
    """
    Setter method for adj_lan_name, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_lan_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_lan_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_lan_name() directly.

    YANG Description: Lan Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="adj-lan-name", rest_name="adj-lan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_lan_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-lan-name", rest_name="adj-lan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__adj_lan_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_lan_name(self):
    self.__adj_lan_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-lan-name", rest_name="adj-lan-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_adj_lan_id(self):
    """
    Getter method for adj_lan_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_lan_id (uint8)

    YANG Description: Adjacency LAN ID
    """
    return self.__adj_lan_id
      
  def _set_adj_lan_id(self, v, load=False):
    """
    Setter method for adj_lan_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_lan_id (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_lan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_lan_id() directly.

    YANG Description: Adjacency LAN ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-lan-id", rest_name="adj-lan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_lan_id must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-lan-id", rest_name="adj-lan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__adj_lan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_lan_id(self):
    self.__adj_lan_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-lan-id", rest_name="adj-lan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_adj_p2p_circ_id(self):
    """
    Getter method for adj_p2p_circ_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_p2p_circ_id (uint32)

    YANG Description: Adjacency Point-to-Point Circuit ID
    """
    return self.__adj_p2p_circ_id
      
  def _set_adj_p2p_circ_id(self, v, load=False):
    """
    Setter method for adj_p2p_circ_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_p2p_circ_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_p2p_circ_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_p2p_circ_id() directly.

    YANG Description: Adjacency Point-to-Point Circuit ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-p2p-circ-id", rest_name="adj-p2p-circ-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_p2p_circ_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-p2p-circ-id", rest_name="adj-p2p-circ-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__adj_p2p_circ_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_p2p_circ_id(self):
    self.__adj_p2p_circ_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="adj-p2p-circ-id", rest_name="adj-p2p-circ-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_adj_num_adds(self):
    """
    Getter method for adj_num_adds, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_num_adds (uint8)

    YANG Description: Number Of NSAPS/Areas Associated To The Adjacency
    """
    return self.__adj_num_adds
      
  def _set_adj_num_adds(self, v, load=False):
    """
    Setter method for adj_num_adds, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_num_adds (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_num_adds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_num_adds() directly.

    YANG Description: Number Of NSAPS/Areas Associated To The Adjacency
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-num-adds", rest_name="adj-num-adds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_num_adds must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-num-adds", rest_name="adj-num-adds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__adj_num_adds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_num_adds(self):
    self.__adj_num_adds = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-num-adds", rest_name="adj-num-adds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_adj_use(self):
    """
    Getter method for adj_use, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_use (isis-spf-level)

    YANG Description: Adjacency Level Usage
    """
    return self.__adj_use
      
  def _set_adj_use(self, v, load=False):
    """
    Setter method for adj_use, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_use (isis-spf-level)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_use is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_use() directly.

    YANG Description: Adjacency Level Usage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="adj-use", rest_name="adj-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-level', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_use must be of a type compatible with isis-spf-level""",
          'defined-type': "brocade-isis-operational:isis-spf-level",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="adj-use", rest_name="adj-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-level', is_config=False)""",
        })

    self.__adj_use = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_use(self):
    self.__adj_use = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="adj-use", rest_name="adj-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-spf-level', is_config=False)


  def _get_ip_circuit_id(self):
    """
    Getter method for ip_circuit_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/ip_circuit_id (uint32)

    YANG Description: ISIS IP Circuit ID
    """
    return self.__ip_circuit_id
      
  def _set_ip_circuit_id(self, v, load=False):
    """
    Setter method for ip_circuit_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/ip_circuit_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_circuit_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_circuit_id() directly.

    YANG Description: ISIS IP Circuit ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip-circuit-id", rest_name="ip-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_circuit_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip-circuit-id", rest_name="ip-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ip_circuit_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_circuit_id(self):
    self.__ip_circuit_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip-circuit-id", rest_name="ip-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_adj_address(self):
    """
    Getter method for adj_address, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_address (inet:ipv4-address)

    YANG Description: IPv4 Circuit Address 
    """
    return self.__adj_address
      
  def _set_adj_address(self, v, load=False):
    """
    Setter method for adj_address, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_address() directly.

    YANG Description: IPv4 Circuit Address 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="adj-address", rest_name="adj-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="adj-address", rest_name="adj-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__adj_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_address(self):
    self.__adj_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="adj-address", rest_name="adj-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_ip6_circuit_id(self):
    """
    Getter method for ip6_circuit_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/ip6_circuit_id (uint32)

    YANG Description: ISIS IPv6 Circuit ID
    """
    return self.__ip6_circuit_id
      
  def _set_ip6_circuit_id(self, v, load=False):
    """
    Setter method for ip6_circuit_id, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/ip6_circuit_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip6_circuit_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip6_circuit_id() directly.

    YANG Description: ISIS IPv6 Circuit ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip6-circuit-id", rest_name="ip6-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip6_circuit_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip6-circuit-id", rest_name="ip6-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ip6_circuit_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip6_circuit_id(self):
    self.__ip6_circuit_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ip6-circuit-id", rest_name="ip6-circuit-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_adj_ip6_address(self):
    """
    Getter method for adj_ip6_address, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_ip6_address (string)

    YANG Description: IPv6 Circuit Address
    """
    return self.__adj_ip6_address
      
  def _set_adj_ip6_address(self, v, load=False):
    """
    Setter method for adj_ip6_address, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_ip6_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_ip6_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_ip6_address() directly.

    YANG Description: IPv6 Circuit Address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="adj-ip6-address", rest_name="adj-ip6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_ip6_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-ip6-address", rest_name="adj-ip6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__adj_ip6_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_ip6_address(self):
    self.__adj_ip6_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="adj-ip6-address", rest_name="adj-ip6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_bfd_holdover_interval(self):
    """
    Getter method for bfd_holdover_interval, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/bfd_holdover_interval (uint8)

    YANG Description: ISIS BFD Holdover Interval
    """
    return self.__bfd_holdover_interval
      
  def _set_bfd_holdover_interval(self, v, load=False):
    """
    Setter method for bfd_holdover_interval, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/bfd_holdover_interval (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_holdover_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_holdover_interval() directly.

    YANG Description: ISIS BFD Holdover Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_holdover_interval must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__bfd_holdover_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_holdover_interval(self):
    self.__bfd_holdover_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="bfd-holdover-interval", rest_name="bfd-holdover-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_adj_bfd_holdover_time(self):
    """
    Getter method for adj_bfd_holdover_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_bfd_holdover_time (uint8)

    YANG Description: ISIS Adjacency BFD holdover timer
    """
    return self.__adj_bfd_holdover_time
      
  def _set_adj_bfd_holdover_time(self, v, load=False):
    """
    Setter method for adj_bfd_holdover_time, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_bfd_holdover_time (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_bfd_holdover_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_bfd_holdover_time() directly.

    YANG Description: ISIS Adjacency BFD holdover timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-bfd-holdover-time", rest_name="adj-bfd-holdover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_bfd_holdover_time must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-bfd-holdover-time", rest_name="adj-bfd-holdover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)""",
        })

    self.__adj_bfd_holdover_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_bfd_holdover_time(self):
    self.__adj_bfd_holdover_time = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="adj-bfd-holdover-time", rest_name="adj-bfd-holdover-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint8', is_config=False)


  def _get_bfd_state(self):
    """
    Getter method for bfd_state, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/bfd_state (string)

    YANG Description: ISIS BFD State
    """
    return self.__bfd_state
      
  def _set_bfd_state(self, v, load=False):
    """
    Setter method for bfd_state, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/bfd_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_state() directly.

    YANG Description: ISIS BFD State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__bfd_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_state(self):
    self.__bfd_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_adj_area(self):
    """
    Getter method for adj_area, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_area (list)

    YANG Description: Area Addresses
    """
    return self.__adj_area
      
  def _set_adj_area(self, v, load=False):
    """
    Setter method for adj_area, mapped from YANG variable /adj_neighbor_entries_state/adj_neighbor/adj_area (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_adj_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_adj_area() directly.

    YANG Description: Area Addresses
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("adj_asi_area_name",adj_area.adj_area, yang_name="adj-area", rest_name="adj-area", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='adj-asi-area-name', extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}), is_container='list', yang_name="adj-area", rest_name="adj-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """adj_area must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("adj_asi_area_name",adj_area.adj_area, yang_name="adj-area", rest_name="adj-area", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='adj-asi-area-name', extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}), is_container='list', yang_name="adj-area", rest_name="adj-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__adj_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_adj_area(self):
    self.__adj_area = YANGDynClass(base=YANGListType("adj_asi_area_name",adj_area.adj_area, yang_name="adj-area", rest_name="adj-area", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='adj-asi-area-name', extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}), is_container='list', yang_name="adj-area", rest_name="adj-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-area-addresses', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  adj_state_change_time = __builtin__.property(_get_adj_state_change_time)
  adj_type = __builtin__.property(_get_adj_type)
  adj_state = __builtin__.property(_get_adj_state)
  neighbor_id = __builtin__.property(_get_neighbor_id)
  circuit_intf_name = __builtin__.property(_get_circuit_intf_name)
  snpa = __builtin__.property(_get_snpa)
  adj_holding_time = __builtin__.property(_get_adj_holding_time)
  adj_priority = __builtin__.property(_get_adj_priority)
  adj_mtprot = __builtin__.property(_get_adj_mtprot)
  adj_prot = __builtin__.property(_get_adj_prot)
  remaining_time = __builtin__.property(_get_remaining_time)
  adj_3way_state = __builtin__.property(_get_adj_3way_state)
  host_name = __builtin__.property(_get_host_name)
  adj_lan_name = __builtin__.property(_get_adj_lan_name)
  adj_lan_id = __builtin__.property(_get_adj_lan_id)
  adj_p2p_circ_id = __builtin__.property(_get_adj_p2p_circ_id)
  adj_num_adds = __builtin__.property(_get_adj_num_adds)
  adj_use = __builtin__.property(_get_adj_use)
  ip_circuit_id = __builtin__.property(_get_ip_circuit_id)
  adj_address = __builtin__.property(_get_adj_address)
  ip6_circuit_id = __builtin__.property(_get_ip6_circuit_id)
  adj_ip6_address = __builtin__.property(_get_adj_ip6_address)
  bfd_holdover_interval = __builtin__.property(_get_bfd_holdover_interval)
  adj_bfd_holdover_time = __builtin__.property(_get_adj_bfd_holdover_time)
  bfd_state = __builtin__.property(_get_bfd_state)
  adj_area = __builtin__.property(_get_adj_area)


  _pyangbind_elements = {'adj_state_change_time': adj_state_change_time, 'adj_type': adj_type, 'adj_state': adj_state, 'neighbor_id': neighbor_id, 'circuit_intf_name': circuit_intf_name, 'snpa': snpa, 'adj_holding_time': adj_holding_time, 'adj_priority': adj_priority, 'adj_mtprot': adj_mtprot, 'adj_prot': adj_prot, 'remaining_time': remaining_time, 'adj_3way_state': adj_3way_state, 'host_name': host_name, 'adj_lan_name': adj_lan_name, 'adj_lan_id': adj_lan_id, 'adj_p2p_circ_id': adj_p2p_circ_id, 'adj_num_adds': adj_num_adds, 'adj_use': adj_use, 'ip_circuit_id': ip_circuit_id, 'adj_address': adj_address, 'ip6_circuit_id': ip6_circuit_id, 'adj_ip6_address': adj_ip6_address, 'bfd_holdover_interval': bfd_holdover_interval, 'adj_bfd_holdover_time': adj_bfd_holdover_time, 'bfd_state': bfd_state, 'adj_area': adj_area, }


