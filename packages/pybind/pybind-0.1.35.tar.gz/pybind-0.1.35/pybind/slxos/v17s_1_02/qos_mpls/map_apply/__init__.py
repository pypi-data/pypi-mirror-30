
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import apply_exp_traffic_class_map_name
import apply_traffic_class_exp_map_name
import apply_dscp_exp_map_name
import apply_exp_dscp_map_name
import apply_inexp_outexp_map_name
class map_apply(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-qos-mpls - based on the path /qos-mpls/map-apply. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__apply_exp_traffic_class_map_name','__apply_traffic_class_exp_map_name','__apply_dscp_exp_map_name','__apply_exp_dscp_map_name','__apply_inexp_outexp_map_name',)

  _yang_name = 'map-apply'
  _rest_name = 'map-apply'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__apply_inexp_outexp_map_name = YANGDynClass(base=apply_inexp_outexp_map_name.apply_inexp_outexp_map_name, is_container='container', presence=False, yang_name="apply-inexp-outexp-map-name", rest_name="inexp-outexp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply inexp outexp map', u'cli-sequence-commands': None, u'alt-name': u'inexp-outexp', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    self.__apply_traffic_class_exp_map_name = YANGDynClass(base=apply_traffic_class_exp_map_name.apply_traffic_class_exp_map_name, is_container='container', presence=False, yang_name="apply-traffic-class-exp-map-name", rest_name="traffic-class-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply traffic class exp map', u'cli-sequence-commands': None, u'alt-name': u'traffic-class-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    self.__apply_exp_dscp_map_name = YANGDynClass(base=apply_exp_dscp_map_name.apply_exp_dscp_map_name, is_container='container', presence=False, yang_name="apply-exp-dscp-map-name", rest_name="exp-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp dscp map', u'cli-sequence-commands': None, u'alt-name': u'exp-dscp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    self.__apply_exp_traffic_class_map_name = YANGDynClass(base=apply_exp_traffic_class_map_name.apply_exp_traffic_class_map_name, is_container='container', presence=False, yang_name="apply-exp-traffic-class-map-name", rest_name="exp-traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp traffic class map', u'cli-sequence-commands': None, u'alt-name': u'exp-traffic-class', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    self.__apply_dscp_exp_map_name = YANGDynClass(base=apply_dscp_exp_map_name.apply_dscp_exp_map_name, is_container='container', presence=False, yang_name="apply-dscp-exp-map-name", rest_name="dscp-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply dscp exp map', u'cli-sequence-commands': None, u'alt-name': u'dscp-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'qos-mpls', u'map-apply']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'qos-mpls', u'map-apply']

  def _get_apply_exp_traffic_class_map_name(self):
    """
    Getter method for apply_exp_traffic_class_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_exp_traffic_class_map_name (container)
    """
    return self.__apply_exp_traffic_class_map_name
      
  def _set_apply_exp_traffic_class_map_name(self, v, load=False):
    """
    Setter method for apply_exp_traffic_class_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_exp_traffic_class_map_name (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_apply_exp_traffic_class_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_apply_exp_traffic_class_map_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=apply_exp_traffic_class_map_name.apply_exp_traffic_class_map_name, is_container='container', presence=False, yang_name="apply-exp-traffic-class-map-name", rest_name="exp-traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp traffic class map', u'cli-sequence-commands': None, u'alt-name': u'exp-traffic-class', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """apply_exp_traffic_class_map_name must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=apply_exp_traffic_class_map_name.apply_exp_traffic_class_map_name, is_container='container', presence=False, yang_name="apply-exp-traffic-class-map-name", rest_name="exp-traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp traffic class map', u'cli-sequence-commands': None, u'alt-name': u'exp-traffic-class', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)""",
        })

    self.__apply_exp_traffic_class_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_apply_exp_traffic_class_map_name(self):
    self.__apply_exp_traffic_class_map_name = YANGDynClass(base=apply_exp_traffic_class_map_name.apply_exp_traffic_class_map_name, is_container='container', presence=False, yang_name="apply-exp-traffic-class-map-name", rest_name="exp-traffic-class", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp traffic class map', u'cli-sequence-commands': None, u'alt-name': u'exp-traffic-class', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)


  def _get_apply_traffic_class_exp_map_name(self):
    """
    Getter method for apply_traffic_class_exp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_traffic_class_exp_map_name (container)
    """
    return self.__apply_traffic_class_exp_map_name
      
  def _set_apply_traffic_class_exp_map_name(self, v, load=False):
    """
    Setter method for apply_traffic_class_exp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_traffic_class_exp_map_name (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_apply_traffic_class_exp_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_apply_traffic_class_exp_map_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=apply_traffic_class_exp_map_name.apply_traffic_class_exp_map_name, is_container='container', presence=False, yang_name="apply-traffic-class-exp-map-name", rest_name="traffic-class-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply traffic class exp map', u'cli-sequence-commands': None, u'alt-name': u'traffic-class-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """apply_traffic_class_exp_map_name must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=apply_traffic_class_exp_map_name.apply_traffic_class_exp_map_name, is_container='container', presence=False, yang_name="apply-traffic-class-exp-map-name", rest_name="traffic-class-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply traffic class exp map', u'cli-sequence-commands': None, u'alt-name': u'traffic-class-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)""",
        })

    self.__apply_traffic_class_exp_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_apply_traffic_class_exp_map_name(self):
    self.__apply_traffic_class_exp_map_name = YANGDynClass(base=apply_traffic_class_exp_map_name.apply_traffic_class_exp_map_name, is_container='container', presence=False, yang_name="apply-traffic-class-exp-map-name", rest_name="traffic-class-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply traffic class exp map', u'cli-sequence-commands': None, u'alt-name': u'traffic-class-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)


  def _get_apply_dscp_exp_map_name(self):
    """
    Getter method for apply_dscp_exp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_dscp_exp_map_name (container)
    """
    return self.__apply_dscp_exp_map_name
      
  def _set_apply_dscp_exp_map_name(self, v, load=False):
    """
    Setter method for apply_dscp_exp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_dscp_exp_map_name (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_apply_dscp_exp_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_apply_dscp_exp_map_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=apply_dscp_exp_map_name.apply_dscp_exp_map_name, is_container='container', presence=False, yang_name="apply-dscp-exp-map-name", rest_name="dscp-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply dscp exp map', u'cli-sequence-commands': None, u'alt-name': u'dscp-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """apply_dscp_exp_map_name must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=apply_dscp_exp_map_name.apply_dscp_exp_map_name, is_container='container', presence=False, yang_name="apply-dscp-exp-map-name", rest_name="dscp-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply dscp exp map', u'cli-sequence-commands': None, u'alt-name': u'dscp-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)""",
        })

    self.__apply_dscp_exp_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_apply_dscp_exp_map_name(self):
    self.__apply_dscp_exp_map_name = YANGDynClass(base=apply_dscp_exp_map_name.apply_dscp_exp_map_name, is_container='container', presence=False, yang_name="apply-dscp-exp-map-name", rest_name="dscp-exp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply dscp exp map', u'cli-sequence-commands': None, u'alt-name': u'dscp-exp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)


  def _get_apply_exp_dscp_map_name(self):
    """
    Getter method for apply_exp_dscp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_exp_dscp_map_name (container)
    """
    return self.__apply_exp_dscp_map_name
      
  def _set_apply_exp_dscp_map_name(self, v, load=False):
    """
    Setter method for apply_exp_dscp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_exp_dscp_map_name (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_apply_exp_dscp_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_apply_exp_dscp_map_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=apply_exp_dscp_map_name.apply_exp_dscp_map_name, is_container='container', presence=False, yang_name="apply-exp-dscp-map-name", rest_name="exp-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp dscp map', u'cli-sequence-commands': None, u'alt-name': u'exp-dscp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """apply_exp_dscp_map_name must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=apply_exp_dscp_map_name.apply_exp_dscp_map_name, is_container='container', presence=False, yang_name="apply-exp-dscp-map-name", rest_name="exp-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp dscp map', u'cli-sequence-commands': None, u'alt-name': u'exp-dscp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)""",
        })

    self.__apply_exp_dscp_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_apply_exp_dscp_map_name(self):
    self.__apply_exp_dscp_map_name = YANGDynClass(base=apply_exp_dscp_map_name.apply_exp_dscp_map_name, is_container='container', presence=False, yang_name="apply-exp-dscp-map-name", rest_name="exp-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply exp dscp map', u'cli-sequence-commands': None, u'alt-name': u'exp-dscp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)


  def _get_apply_inexp_outexp_map_name(self):
    """
    Getter method for apply_inexp_outexp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_inexp_outexp_map_name (container)
    """
    return self.__apply_inexp_outexp_map_name
      
  def _set_apply_inexp_outexp_map_name(self, v, load=False):
    """
    Setter method for apply_inexp_outexp_map_name, mapped from YANG variable /qos_mpls/map_apply/apply_inexp_outexp_map_name (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_apply_inexp_outexp_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_apply_inexp_outexp_map_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=apply_inexp_outexp_map_name.apply_inexp_outexp_map_name, is_container='container', presence=False, yang_name="apply-inexp-outexp-map-name", rest_name="inexp-outexp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply inexp outexp map', u'cli-sequence-commands': None, u'alt-name': u'inexp-outexp', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """apply_inexp_outexp_map_name must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=apply_inexp_outexp_map_name.apply_inexp_outexp_map_name, is_container='container', presence=False, yang_name="apply-inexp-outexp-map-name", rest_name="inexp-outexp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply inexp outexp map', u'cli-sequence-commands': None, u'alt-name': u'inexp-outexp', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)""",
        })

    self.__apply_inexp_outexp_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_apply_inexp_outexp_map_name(self):
    self.__apply_inexp_outexp_map_name = YANGDynClass(base=apply_inexp_outexp_map_name.apply_inexp_outexp_map_name, is_container='container', presence=False, yang_name="apply-inexp-outexp-map-name", rest_name="inexp-outexp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Apply inexp outexp map', u'cli-sequence-commands': None, u'alt-name': u'inexp-outexp', u'hidden': u'full'}}, namespace='urn:brocade.com:mgmt:brocade-apply-qos-mpls', defining_module='brocade-apply-qos-mpls', yang_type='container', is_config=True)

  apply_exp_traffic_class_map_name = __builtin__.property(_get_apply_exp_traffic_class_map_name, _set_apply_exp_traffic_class_map_name)
  apply_traffic_class_exp_map_name = __builtin__.property(_get_apply_traffic_class_exp_map_name, _set_apply_traffic_class_exp_map_name)
  apply_dscp_exp_map_name = __builtin__.property(_get_apply_dscp_exp_map_name, _set_apply_dscp_exp_map_name)
  apply_exp_dscp_map_name = __builtin__.property(_get_apply_exp_dscp_map_name, _set_apply_exp_dscp_map_name)
  apply_inexp_outexp_map_name = __builtin__.property(_get_apply_inexp_outexp_map_name, _set_apply_inexp_outexp_map_name)


  _pyangbind_elements = {'apply_exp_traffic_class_map_name': apply_exp_traffic_class_map_name, 'apply_traffic_class_exp_map_name': apply_traffic_class_exp_map_name, 'apply_dscp_exp_map_name': apply_dscp_exp_map_name, 'apply_exp_dscp_map_name': apply_exp_dscp_map_name, 'apply_inexp_outexp_map_name': apply_inexp_outexp_map_name, }


