
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class mpls_dynamic_bypass_sub_cmds(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /mpls-config/router/mpls/mpls-cmds-holder/dynamic-bypass/mpls-dynamic-bypass-sub-cmds. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__dynamic_bypass_max_bypasses','__dynamic_bypass_max_bypasses_per_mp','__dynamic_bypass_enable_all_interfaces','__dynamic_bypass_reoptimize_timer','__dynamic_bypass_disable',)

  _yang_name = 'mpls-dynamic-bypass-sub-cmds'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__dynamic_bypass_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    self.__dynamic_bypass_max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__dynamic_bypass_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__dynamic_bypass_max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__dynamic_bypass_enable_all_interfaces = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-enable-all-interfaces", rest_name="enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'enable dynamic bypass on all mpls interfaces', u'alt-name': u'enable-all-interfaces', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-config', u'router', u'mpls', u'mpls-cmds-holder', u'dynamic-bypass', u'mpls-dynamic-bypass-sub-cmds']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'mpls', u'dynamic-bypass']

  def _get_dynamic_bypass_max_bypasses(self):
    """
    Getter method for dynamic_bypass_max_bypasses, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_max_bypasses (uint32)
    """
    return self.__dynamic_bypass_max_bypasses
      
  def _set_dynamic_bypass_max_bypasses(self, v, load=False):
    """
    Setter method for dynamic_bypass_max_bypasses, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_max_bypasses (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_bypass_max_bypasses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_bypass_max_bypasses() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_bypass_max_bypasses must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__dynamic_bypass_max_bypasses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_bypass_max_bypasses(self):
    self.__dynamic_bypass_max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_dynamic_bypass_max_bypasses_per_mp(self):
    """
    Getter method for dynamic_bypass_max_bypasses_per_mp, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_max_bypasses_per_mp (uint32)
    """
    return self.__dynamic_bypass_max_bypasses_per_mp
      
  def _set_dynamic_bypass_max_bypasses_per_mp(self, v, load=False):
    """
    Setter method for dynamic_bypass_max_bypasses_per_mp, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_max_bypasses_per_mp (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_bypass_max_bypasses_per_mp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_bypass_max_bypasses_per_mp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_bypass_max_bypasses_per_mp must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__dynamic_bypass_max_bypasses_per_mp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_bypass_max_bypasses_per_mp(self):
    self.__dynamic_bypass_max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_dynamic_bypass_enable_all_interfaces(self):
    """
    Getter method for dynamic_bypass_enable_all_interfaces, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_enable_all_interfaces (empty)
    """
    return self.__dynamic_bypass_enable_all_interfaces
      
  def _set_dynamic_bypass_enable_all_interfaces(self, v, load=False):
    """
    Setter method for dynamic_bypass_enable_all_interfaces, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_enable_all_interfaces (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_bypass_enable_all_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_bypass_enable_all_interfaces() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-enable-all-interfaces", rest_name="enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'enable dynamic bypass on all mpls interfaces', u'alt-name': u'enable-all-interfaces', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_bypass_enable_all_interfaces must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-enable-all-interfaces", rest_name="enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'enable dynamic bypass on all mpls interfaces', u'alt-name': u'enable-all-interfaces', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)""",
        })

    self.__dynamic_bypass_enable_all_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_bypass_enable_all_interfaces(self):
    self.__dynamic_bypass_enable_all_interfaces = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-enable-all-interfaces", rest_name="enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'enable dynamic bypass on all mpls interfaces', u'alt-name': u'enable-all-interfaces', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)


  def _get_dynamic_bypass_reoptimize_timer(self):
    """
    Getter method for dynamic_bypass_reoptimize_timer, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_reoptimize_timer (uint32)
    """
    return self.__dynamic_bypass_reoptimize_timer
      
  def _set_dynamic_bypass_reoptimize_timer(self, v, load=False):
    """
    Setter method for dynamic_bypass_reoptimize_timer, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_reoptimize_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_bypass_reoptimize_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_bypass_reoptimize_timer() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_bypass_reoptimize_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__dynamic_bypass_reoptimize_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_bypass_reoptimize_timer(self):
    self.__dynamic_bypass_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Router level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_dynamic_bypass_disable(self):
    """
    Getter method for dynamic_bypass_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_disable (empty)
    """
    return self.__dynamic_bypass_disable
      
  def _set_dynamic_bypass_disable(self, v, load=False):
    """
    Setter method for dynamic_bypass_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/dynamic_bypass/mpls_dynamic_bypass_sub_cmds/dynamic_bypass_disable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dynamic_bypass_disable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dynamic_bypass_disable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dynamic_bypass_disable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)""",
        })

    self.__dynamic_bypass_disable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dynamic_bypass_disable(self):
    self.__dynamic_bypass_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)

  dynamic_bypass_max_bypasses = __builtin__.property(_get_dynamic_bypass_max_bypasses, _set_dynamic_bypass_max_bypasses)
  dynamic_bypass_max_bypasses_per_mp = __builtin__.property(_get_dynamic_bypass_max_bypasses_per_mp, _set_dynamic_bypass_max_bypasses_per_mp)
  dynamic_bypass_enable_all_interfaces = __builtin__.property(_get_dynamic_bypass_enable_all_interfaces, _set_dynamic_bypass_enable_all_interfaces)
  dynamic_bypass_reoptimize_timer = __builtin__.property(_get_dynamic_bypass_reoptimize_timer, _set_dynamic_bypass_reoptimize_timer)
  dynamic_bypass_disable = __builtin__.property(_get_dynamic_bypass_disable, _set_dynamic_bypass_disable)


  _pyangbind_elements = {'dynamic_bypass_max_bypasses': dynamic_bypass_max_bypasses, 'dynamic_bypass_max_bypasses_per_mp': dynamic_bypass_max_bypasses_per_mp, 'dynamic_bypass_enable_all_interfaces': dynamic_bypass_enable_all_interfaces, 'dynamic_bypass_reoptimize_timer': dynamic_bypass_reoptimize_timer, 'dynamic_bypass_disable': dynamic_bypass_disable, }


