
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface-ext - based on the path /brocade_interface_ext_rpc/get-interface-detail/output/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: A list of interface entries. Each row represents
management information applicable to a particular
interface.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_type','__interface_name','__ifindex','__mtu','__ip_mtu','__if_name','__if_state','__line_protocol_state','__line_protocol_state_info','__line_protocol_exception_info','__hardware_type','__logical_hardware_address','__current_hardware_address','__media_type','__wavelength','__if_description','__actual_line_speed','__configured_line_speed','__line_duplex_state','__flow_control','__queuing_strategy','__port_role','__port_mode','__ifHCInOctets','__ifHCInUcastPkts','__ifHCInMulticastPkts','__ifHCInBroadcastPkts','__ifHCInErrors','__ifHCOutOctets','__ifHCOutUcastPkts','__ifHCOutMulticastPkts','__ifHCOutBroadcastPkts','__ifHCOutErrors',)

  _yang_name = 'interface'
  _rest_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__hardware_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vlan': {'value': 7}, u'loopback': {'value': 3}, u'frame-relay': {'value': 9}, u'unknown': {'value': 1}, u'atm': {'value': 6}, u'hdlc': {'value': 4}, u'tunnel': {'value': 10}, u'ppp': {'value': 5}, u'aggregate': {'value': 8}, u'ethernet': {'value': 2}},), is_leaf=True, yang_name="hardware-type", rest_name="hardware-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__port_role = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'edge': {'value': 2}, u'isl': {'value': 1}},), is_leaf=True, yang_name="port-role", rest_name="port-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__if_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'testing': {'value': 4}, u'up': {'value': 2}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__if_description = YANGDynClass(base=unicode, is_leaf=True, yang_name="if-description", rest_name="if-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__line_protocol_exception_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="line-protocol-exception-info", rest_name="line-protocol-exception-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    self.__wavelength = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wavelength", rest_name="wavelength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint32', is_config=True)
    self.__ip_mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), is_leaf=True, yang_name="ip-mtu", rest_name="ip-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)
    self.__ifHCInOctets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInOctets", rest_name="ifHCInOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__ifHCInBroadcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInBroadcastPkts", rest_name="ifHCInBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__ifHCInMulticastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInMulticastPkts", rest_name="ifHCInMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__logical_hardware_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="logical-hardware-address", rest_name="logical-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)
    self.__current_hardware_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="current-hardware-address", rest_name="current-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)
    self.__line_protocol_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'up': {'value': 2}},), is_leaf=True, yang_name="line-protocol-state", rest_name="line-protocol-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__media_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfp2': {'value': 18}, u'qsfp28': {'value': 17}, u'gbic': {'value': 2}, u'qsfp': {'value': 12}, u'unknown': {'value': 1}, u'sfp': {'value': 4}, u'xff': {'value': 6}, u'qsfpp': {'value': 13}, u'xfp-e': {'value': 7}, u'xfp': {'value': 5}, u'fixed': {'value': 3}, u'cfp': {'value': 14}},), is_leaf=True, yang_name="media-type", rest_name="media-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)
    self.__queuing_strategy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fifo': {'value': 1}},), is_leaf=True, yang_name="queuing-strategy", rest_name="queuing-strategy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__line_protocol_state_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="line-protocol-state-info", rest_name="line-protocol-state-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    self.__ifHCOutMulticastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutMulticastPkts", rest_name="ifHCOutMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__ifHCOutErrors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutErrors", rest_name="ifHCOutErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__actual_line_speed = YANGDynClass(base=unicode, is_leaf=True, yang_name="actual-line-speed", rest_name="actual-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    self.__ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifindex", rest_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint64', is_config=True)
    self.__if_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="if-name", rest_name="if-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    self.__ifHCOutBroadcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutBroadcastPkts", rest_name="ifHCOutBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__ifHCOutOctets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutOctets", rest_name="ifHCOutOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__ifHCInErrors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInErrors", rest_name="ifHCInErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__port_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 0}, u'l2': {'value': 2}, u'l3': {'value': 1}, u'mirror': {'value': 3}},), is_leaf=True, yang_name="port-mode", rest_name="port-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1548), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)
    self.__ifHCInUcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInUcastPkts", rest_name="ifHCInUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__flow_control = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'received': {'value': 0}, u'transmitted': {'value': 1}},), is_leaf=True, yang_name="flow-control", rest_name="flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__line_duplex_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 1}, u'full': {'value': 3}, u'half': {'value': 2}},), is_leaf=True, yang_name="line-duplex-state", rest_name="line-duplex-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__ifHCOutUcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutUcastPkts", rest_name="ifHCOutUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    self.__configured_line_speed = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'8Gbps': {'value': 9}, u'nil': {'value': 1}, u'40Gbps': {'value': 5}, u'1Gbps': {'value': 3}, u'auto': {'value': 2}, u'25Gbps': {'value': 12}, u'10Gbps': {'value': 4}, u'4Gbps': {'value': 8}, u'100Gbps': {'value': 11}, u'100Mbps': {'value': 6}, u'16Gbps': {'value': 10}, u'2Gbps': {'value': 7}},), is_leaf=True, yang_name="configured-line-speed", rest_name="configured-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='line-speed', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_interface_ext_rpc', u'get-interface-detail', u'output', u'interface']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-interface-detail', u'output', u'interface']

  def _get_interface_type(self):
    """
    Getter method for interface_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/interface_type (enumeration)

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    return self.__interface_type
      
  def _set_interface_type(self, v, load=False):
    """
    Setter method for interface_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_type() directly.

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_type(self):
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/interface_name (union)

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
ethernet               slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
loopback               Loopback ID
ve                     VE Interface ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
ethernet               slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
loopback               Loopback ID
ve                     VE Interface ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with union""",
          'defined-type': "brocade-interface-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)


  def _get_ifindex(self):
    """
    Getter method for ifindex, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifindex (uint64)

    YANG Description: A unique value, greater than zero, for each
interface.
    """
    return self.__ifindex
      
  def _set_ifindex(self, v, load=False):
    """
    Setter method for ifindex, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifindex (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifindex is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifindex() directly.

    YANG Description: A unique value, greater than zero, for each
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifindex", rest_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifindex must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifindex", rest_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint64', is_config=True)""",
        })

    self.__ifindex = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifindex(self):
    self.__ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifindex", rest_name="ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint64', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/mtu (interface:mtu-type)

    YANG Description: The size of the largest packet which can be 
sent/received on the interface, specified in 
octets. For interfaces that are used for
transmitting network datagrams, this is the
size of the largest network datagram that can 
be sent on the interface.
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/mtu (interface:mtu-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: The size of the largest packet which can be 
sent/received on the interface, specified in 
octets. For interfaces that are used for
transmitting network datagrams, this is the
size of the largest network datagram that can 
be sent on the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1548), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with interface:mtu-type""",
          'defined-type': "interface:mtu-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1548), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1548), is_leaf=True, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)


  def _get_ip_mtu(self):
    """
    Getter method for ip_mtu, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ip_mtu (interface:mtu-type)

    YANG Description: This specifies the IP MTU value of this 
interface.
    """
    return self.__ip_mtu
      
  def _set_ip_mtu(self, v, load=False):
    """
    Setter method for ip_mtu, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ip_mtu (interface:mtu-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ip_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ip_mtu() directly.

    YANG Description: This specifies the IP MTU value of this 
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), is_leaf=True, yang_name="ip-mtu", rest_name="ip-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ip_mtu must be of a type compatible with interface:mtu-type""",
          'defined-type': "interface:mtu-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), is_leaf=True, yang_name="ip-mtu", rest_name="ip-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)""",
        })

    self.__ip_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ip_mtu(self):
    self.__ip_mtu = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1548..9216']}), is_leaf=True, yang_name="ip-mtu", rest_name="ip-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:mtu-type', is_config=True)


  def _get_if_name(self):
    """
    Getter method for if_name, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/if_name (string)

    YANG Description: This indicates the interface display name as 
in MIB-II's ifTable. However interface-name and
interface-type values of this instance forms 
fully qualified name for this interface.
    """
    return self.__if_name
      
  def _set_if_name(self, v, load=False):
    """
    Setter method for if_name, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/if_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_name() directly.

    YANG Description: This indicates the interface display name as 
in MIB-II's ifTable. However interface-name and
interface-type values of this instance forms 
fully qualified name for this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="if-name", rest_name="if-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="if-name", rest_name="if-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)""",
        })

    self.__if_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_name(self):
    self.__if_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="if-name", rest_name="if-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)


  def _get_if_state(self):
    """
    Getter method for if_state, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/if_state (enumeration)

    YANG Description: This indicates the current operational state
of this interface. The 'testing' state 
indicates that no operational packets can be
passed. If 'shutdown' leaf of corresponding 
interface instance of brocade-interface module
is set, then 'if-state' should be 'down'. 
If 'shutdown' is changed deleted, then 
'if-state' should change to 'up' if the 
interface is ready to transmit and receive 
network traffic; it should remain in the 'down'
state if and only if there is a fault that 
prevents it from going to the 'up' state.
    """
    return self.__if_state
      
  def _set_if_state(self, v, load=False):
    """
    Setter method for if_state, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/if_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_state() directly.

    YANG Description: This indicates the current operational state
of this interface. The 'testing' state 
indicates that no operational packets can be
passed. If 'shutdown' leaf of corresponding 
interface instance of brocade-interface module
is set, then 'if-state' should be 'down'. 
If 'shutdown' is changed deleted, then 
'if-state' should change to 'up' if the 
interface is ready to transmit and receive 
network traffic; it should remain in the 'down'
state if and only if there is a fault that 
prevents it from going to the 'up' state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'testing': {'value': 4}, u'up': {'value': 2}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_state must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'testing': {'value': 4}, u'up': {'value': 2}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__if_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_state(self):
    self.__if_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'testing': {'value': 4}, u'up': {'value': 2}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_line_protocol_state(self):
    """
    Getter method for line_protocol_state, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_protocol_state (enumeration)

    YANG Description: This indicates the 'Line protocol' state of
this interface.
    """
    return self.__line_protocol_state
      
  def _set_line_protocol_state(self, v, load=False):
    """
    Setter method for line_protocol_state, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_protocol_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_line_protocol_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_line_protocol_state() directly.

    YANG Description: This indicates the 'Line protocol' state of
this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'up': {'value': 2}},), is_leaf=True, yang_name="line-protocol-state", rest_name="line-protocol-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """line_protocol_state must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'up': {'value': 2}},), is_leaf=True, yang_name="line-protocol-state", rest_name="line-protocol-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__line_protocol_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_line_protocol_state(self):
    self.__line_protocol_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 3}, u'unknown': {'value': 1}, u'up': {'value': 2}},), is_leaf=True, yang_name="line-protocol-state", rest_name="line-protocol-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_line_protocol_state_info(self):
    """
    Getter method for line_protocol_state_info, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_protocol_state_info (string)

    YANG Description: This indicates the reason for the current line
protocol state of this interface.
    """
    return self.__line_protocol_state_info
      
  def _set_line_protocol_state_info(self, v, load=False):
    """
    Setter method for line_protocol_state_info, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_protocol_state_info (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_line_protocol_state_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_line_protocol_state_info() directly.

    YANG Description: This indicates the reason for the current line
protocol state of this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="line-protocol-state-info", rest_name="line-protocol-state-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """line_protocol_state_info must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="line-protocol-state-info", rest_name="line-protocol-state-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)""",
        })

    self.__line_protocol_state_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_line_protocol_state_info(self):
    self.__line_protocol_state_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="line-protocol-state-info", rest_name="line-protocol-state-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)


  def _get_line_protocol_exception_info(self):
    """
    Getter method for line_protocol_exception_info, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_protocol_exception_info (string)

    YANG Description: This indicates the 'Exception information' of 
line protocol.
    """
    return self.__line_protocol_exception_info
      
  def _set_line_protocol_exception_info(self, v, load=False):
    """
    Setter method for line_protocol_exception_info, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_protocol_exception_info (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_line_protocol_exception_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_line_protocol_exception_info() directly.

    YANG Description: This indicates the 'Exception information' of 
line protocol.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="line-protocol-exception-info", rest_name="line-protocol-exception-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """line_protocol_exception_info must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="line-protocol-exception-info", rest_name="line-protocol-exception-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)""",
        })

    self.__line_protocol_exception_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_line_protocol_exception_info(self):
    self.__line_protocol_exception_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="line-protocol-exception-info", rest_name="line-protocol-exception-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)


  def _get_hardware_type(self):
    """
    Getter method for hardware_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/hardware_type (enumeration)

    YANG Description: This indicates the type of this interface.
    """
    return self.__hardware_type
      
  def _set_hardware_type(self, v, load=False):
    """
    Setter method for hardware_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/hardware_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hardware_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hardware_type() directly.

    YANG Description: This indicates the type of this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vlan': {'value': 7}, u'loopback': {'value': 3}, u'frame-relay': {'value': 9}, u'unknown': {'value': 1}, u'atm': {'value': 6}, u'hdlc': {'value': 4}, u'tunnel': {'value': 10}, u'ppp': {'value': 5}, u'aggregate': {'value': 8}, u'ethernet': {'value': 2}},), is_leaf=True, yang_name="hardware-type", rest_name="hardware-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hardware_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vlan': {'value': 7}, u'loopback': {'value': 3}, u'frame-relay': {'value': 9}, u'unknown': {'value': 1}, u'atm': {'value': 6}, u'hdlc': {'value': 4}, u'tunnel': {'value': 10}, u'ppp': {'value': 5}, u'aggregate': {'value': 8}, u'ethernet': {'value': 2}},), is_leaf=True, yang_name="hardware-type", rest_name="hardware-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__hardware_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hardware_type(self):
    self.__hardware_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vlan': {'value': 7}, u'loopback': {'value': 3}, u'frame-relay': {'value': 9}, u'unknown': {'value': 1}, u'atm': {'value': 6}, u'hdlc': {'value': 4}, u'tunnel': {'value': 10}, u'ppp': {'value': 5}, u'aggregate': {'value': 8}, u'ethernet': {'value': 2}},), is_leaf=True, yang_name="hardware-type", rest_name="hardware-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_logical_hardware_address(self):
    """
    Getter method for logical_hardware_address, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/logical_hardware_address (yang:mac-address)

    YANG Description: This indicates the address of this interface at
its protocol sub-layer.
    """
    return self.__logical_hardware_address
      
  def _set_logical_hardware_address(self, v, load=False):
    """
    Setter method for logical_hardware_address, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/logical_hardware_address (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_logical_hardware_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_logical_hardware_address() directly.

    YANG Description: This indicates the address of this interface at
its protocol sub-layer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="logical-hardware-address", rest_name="logical-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """logical_hardware_address must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="logical-hardware-address", rest_name="logical-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__logical_hardware_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_logical_hardware_address(self):
    self.__logical_hardware_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="logical-hardware-address", rest_name="logical-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)


  def _get_current_hardware_address(self):
    """
    Getter method for current_hardware_address, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/current_hardware_address (yang:mac-address)

    YANG Description: This indicates the address of this interface at
its protocol sub-layer.
    """
    return self.__current_hardware_address
      
  def _set_current_hardware_address(self, v, load=False):
    """
    Setter method for current_hardware_address, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/current_hardware_address (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_current_hardware_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_current_hardware_address() directly.

    YANG Description: This indicates the address of this interface at
its protocol sub-layer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="current-hardware-address", rest_name="current-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """current_hardware_address must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="current-hardware-address", rest_name="current-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__current_hardware_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_current_hardware_address(self):
    self.__current_hardware_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="current-hardware-address", rest_name="current-hardware-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:mac-address', is_config=True)


  def _get_media_type(self):
    """
    Getter method for media_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/media_type (enumeration)

    YANG Description: The specifies the type of the media plugged in
for this interface.
    """
    return self.__media_type
      
  def _set_media_type(self, v, load=False):
    """
    Setter method for media_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/media_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_media_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_media_type() directly.

    YANG Description: The specifies the type of the media plugged in
for this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfp2': {'value': 18}, u'qsfp28': {'value': 17}, u'gbic': {'value': 2}, u'qsfp': {'value': 12}, u'unknown': {'value': 1}, u'sfp': {'value': 4}, u'xff': {'value': 6}, u'qsfpp': {'value': 13}, u'xfp-e': {'value': 7}, u'xfp': {'value': 5}, u'fixed': {'value': 3}, u'cfp': {'value': 14}},), is_leaf=True, yang_name="media-type", rest_name="media-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """media_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfp2': {'value': 18}, u'qsfp28': {'value': 17}, u'gbic': {'value': 2}, u'qsfp': {'value': 12}, u'unknown': {'value': 1}, u'sfp': {'value': 4}, u'xff': {'value': 6}, u'qsfpp': {'value': 13}, u'xfp-e': {'value': 7}, u'xfp': {'value': 5}, u'fixed': {'value': 3}, u'cfp': {'value': 14}},), is_leaf=True, yang_name="media-type", rest_name="media-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__media_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_media_type(self):
    self.__media_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'cfp2': {'value': 18}, u'qsfp28': {'value': 17}, u'gbic': {'value': 2}, u'qsfp': {'value': 12}, u'unknown': {'value': 1}, u'sfp': {'value': 4}, u'xff': {'value': 6}, u'qsfpp': {'value': 13}, u'xfp-e': {'value': 7}, u'xfp': {'value': 5}, u'fixed': {'value': 3}, u'cfp': {'value': 14}},), is_leaf=True, yang_name="media-type", rest_name="media-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_wavelength(self):
    """
    Getter method for wavelength, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/wavelength (uint32)

    YANG Description: Wavelength of pluggable media
    """
    return self.__wavelength
      
  def _set_wavelength(self, v, load=False):
    """
    Setter method for wavelength, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/wavelength (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wavelength is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wavelength() directly.

    YANG Description: Wavelength of pluggable media
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wavelength", rest_name="wavelength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wavelength must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wavelength", rest_name="wavelength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint32', is_config=True)""",
        })

    self.__wavelength = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wavelength(self):
    self.__wavelength = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="wavelength", rest_name="wavelength", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='uint32', is_config=True)


  def _get_if_description(self):
    """
    Getter method for if_description, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/if_description (string)

    YANG Description: This specifies a textual string containing
information about the interface.
    """
    return self.__if_description
      
  def _set_if_description(self, v, load=False):
    """
    Setter method for if_description, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/if_description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_description() directly.

    YANG Description: This specifies a textual string containing
information about the interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="if-description", rest_name="if-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="if-description", rest_name="if-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)""",
        })

    self.__if_description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_description(self):
    self.__if_description = YANGDynClass(base=unicode, is_leaf=True, yang_name="if-description", rest_name="if-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)


  def _get_actual_line_speed(self):
    """
    Getter method for actual_line_speed, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/actual_line_speed (string)

    YANG Description: The actual line speed of this interface.
    """
    return self.__actual_line_speed
      
  def _set_actual_line_speed(self, v, load=False):
    """
    Setter method for actual_line_speed, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/actual_line_speed (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actual_line_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actual_line_speed() directly.

    YANG Description: The actual line speed of this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="actual-line-speed", rest_name="actual-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actual_line_speed must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="actual-line-speed", rest_name="actual-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)""",
        })

    self.__actual_line_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actual_line_speed(self):
    self.__actual_line_speed = YANGDynClass(base=unicode, is_leaf=True, yang_name="actual-line-speed", rest_name="actual-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)


  def _get_configured_line_speed(self):
    """
    Getter method for configured_line_speed, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/configured_line_speed (line-speed)

    YANG Description: The administratively configured line speed of
this interface. This should be same as what is
returned by value of corresponding instance of
'speed' of 'brocade-interface' module.
    """
    return self.__configured_line_speed
      
  def _set_configured_line_speed(self, v, load=False):
    """
    Setter method for configured_line_speed, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/configured_line_speed (line-speed)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configured_line_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configured_line_speed() directly.

    YANG Description: The administratively configured line speed of
this interface. This should be same as what is
returned by value of corresponding instance of
'speed' of 'brocade-interface' module.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'8Gbps': {'value': 9}, u'nil': {'value': 1}, u'40Gbps': {'value': 5}, u'1Gbps': {'value': 3}, u'auto': {'value': 2}, u'25Gbps': {'value': 12}, u'10Gbps': {'value': 4}, u'4Gbps': {'value': 8}, u'100Gbps': {'value': 11}, u'100Mbps': {'value': 6}, u'16Gbps': {'value': 10}, u'2Gbps': {'value': 7}},), is_leaf=True, yang_name="configured-line-speed", rest_name="configured-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='line-speed', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configured_line_speed must be of a type compatible with line-speed""",
          'defined-type': "brocade-interface-ext:line-speed",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'8Gbps': {'value': 9}, u'nil': {'value': 1}, u'40Gbps': {'value': 5}, u'1Gbps': {'value': 3}, u'auto': {'value': 2}, u'25Gbps': {'value': 12}, u'10Gbps': {'value': 4}, u'4Gbps': {'value': 8}, u'100Gbps': {'value': 11}, u'100Mbps': {'value': 6}, u'16Gbps': {'value': 10}, u'2Gbps': {'value': 7}},), is_leaf=True, yang_name="configured-line-speed", rest_name="configured-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='line-speed', is_config=True)""",
        })

    self.__configured_line_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configured_line_speed(self):
    self.__configured_line_speed = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'8Gbps': {'value': 9}, u'nil': {'value': 1}, u'40Gbps': {'value': 5}, u'1Gbps': {'value': 3}, u'auto': {'value': 2}, u'25Gbps': {'value': 12}, u'10Gbps': {'value': 4}, u'4Gbps': {'value': 8}, u'100Gbps': {'value': 11}, u'100Mbps': {'value': 6}, u'16Gbps': {'value': 10}, u'2Gbps': {'value': 7}},), is_leaf=True, yang_name="configured-line-speed", rest_name="configured-line-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='line-speed', is_config=True)


  def _get_line_duplex_state(self):
    """
    Getter method for line_duplex_state, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_duplex_state (enumeration)

    YANG Description: This indicates the 'Line duplex state' of this
interface.
    """
    return self.__line_duplex_state
      
  def _set_line_duplex_state(self, v, load=False):
    """
    Setter method for line_duplex_state, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/line_duplex_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_line_duplex_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_line_duplex_state() directly.

    YANG Description: This indicates the 'Line duplex state' of this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 1}, u'full': {'value': 3}, u'half': {'value': 2}},), is_leaf=True, yang_name="line-duplex-state", rest_name="line-duplex-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """line_duplex_state must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 1}, u'full': {'value': 3}, u'half': {'value': 2}},), is_leaf=True, yang_name="line-duplex-state", rest_name="line-duplex-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__line_duplex_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_line_duplex_state(self):
    self.__line_duplex_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 1}, u'full': {'value': 3}, u'half': {'value': 2}},), is_leaf=True, yang_name="line-duplex-state", rest_name="line-duplex-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_flow_control(self):
    """
    Getter method for flow_control, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/flow_control (enumeration)

    YANG Description: This indicates the 'Flow control' for this
interface.
    """
    return self.__flow_control
      
  def _set_flow_control(self, v, load=False):
    """
    Setter method for flow_control, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/flow_control (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flow_control is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flow_control() directly.

    YANG Description: This indicates the 'Flow control' for this
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'received': {'value': 0}, u'transmitted': {'value': 1}},), is_leaf=True, yang_name="flow-control", rest_name="flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flow_control must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'received': {'value': 0}, u'transmitted': {'value': 1}},), is_leaf=True, yang_name="flow-control", rest_name="flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__flow_control = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flow_control(self):
    self.__flow_control = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'received': {'value': 0}, u'transmitted': {'value': 1}},), is_leaf=True, yang_name="flow-control", rest_name="flow-control", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_queuing_strategy(self):
    """
    Getter method for queuing_strategy, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/queuing_strategy (enumeration)

    YANG Description: This indicates the 'Queuing strategy' for 
this interface.
    """
    return self.__queuing_strategy
      
  def _set_queuing_strategy(self, v, load=False):
    """
    Setter method for queuing_strategy, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/queuing_strategy (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queuing_strategy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queuing_strategy() directly.

    YANG Description: This indicates the 'Queuing strategy' for 
this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fifo': {'value': 1}},), is_leaf=True, yang_name="queuing-strategy", rest_name="queuing-strategy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queuing_strategy must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fifo': {'value': 1}},), is_leaf=True, yang_name="queuing-strategy", rest_name="queuing-strategy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__queuing_strategy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queuing_strategy(self):
    self.__queuing_strategy = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fifo': {'value': 1}},), is_leaf=True, yang_name="queuing-strategy", rest_name="queuing-strategy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_port_role(self):
    """
    Getter method for port_role, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/port_role (enumeration)

    YANG Description: This indicates current that this interface is
playing. This is applicable only for physical
interfaces.
    """
    return self.__port_role
      
  def _set_port_role(self, v, load=False):
    """
    Setter method for port_role, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/port_role (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_role() directly.

    YANG Description: This indicates current that this interface is
playing. This is applicable only for physical
interfaces.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'edge': {'value': 2}, u'isl': {'value': 1}},), is_leaf=True, yang_name="port-role", rest_name="port-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_role must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'edge': {'value': 2}, u'isl': {'value': 1}},), is_leaf=True, yang_name="port-role", rest_name="port-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__port_role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_role(self):
    self.__port_role = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'edge': {'value': 2}, u'isl': {'value': 1}},), is_leaf=True, yang_name="port-role", rest_name="port-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_port_mode(self):
    """
    Getter method for port_mode, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/port_mode (enumeration)

    YANG Description: This indicates operational mode of this 
interface. This is applicable only for physical
interfaces/port channel interfaces.
    """
    return self.__port_mode
      
  def _set_port_mode(self, v, load=False):
    """
    Setter method for port_mode, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/port_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_mode() directly.

    YANG Description: This indicates operational mode of this 
interface. This is applicable only for physical
interfaces/port channel interfaces.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 0}, u'l2': {'value': 2}, u'l3': {'value': 1}, u'mirror': {'value': 3}},), is_leaf=True, yang_name="port-mode", rest_name="port-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_mode must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 0}, u'l2': {'value': 2}, u'l3': {'value': 1}, u'mirror': {'value': 3}},), is_leaf=True, yang_name="port-mode", rest_name="port-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__port_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_mode(self):
    self.__port_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'unknown': {'value': 0}, u'l2': {'value': 2}, u'l3': {'value': 1}, u'mirror': {'value': 3}},), is_leaf=True, yang_name="port-mode", rest_name="port-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_ifHCInOctets(self):
    """
    Getter method for ifHCInOctets, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInOctets (yang:counter64)

    YANG Description: The total number of octets received on the 
interface, including framing characters.
    """
    return self.__ifHCInOctets
      
  def _set_ifHCInOctets(self, v, load=False):
    """
    Setter method for ifHCInOctets, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInOctets (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCInOctets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCInOctets() directly.

    YANG Description: The total number of octets received on the 
interface, including framing characters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInOctets", rest_name="ifHCInOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCInOctets must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInOctets", rest_name="ifHCInOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCInOctets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCInOctets(self):
    self.__ifHCInOctets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInOctets", rest_name="ifHCInOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCInUcastPkts(self):
    """
    Getter method for ifHCInUcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInUcastPkts (yang:counter64)

    YANG Description: The number of packets, delivered by this 
sub-layer to a higher (sub-)layer, which were 
not addressed to a multicast or broadcast 
address at this sub-layer.
    """
    return self.__ifHCInUcastPkts
      
  def _set_ifHCInUcastPkts(self, v, load=False):
    """
    Setter method for ifHCInUcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInUcastPkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCInUcastPkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCInUcastPkts() directly.

    YANG Description: The number of packets, delivered by this 
sub-layer to a higher (sub-)layer, which were 
not addressed to a multicast or broadcast 
address at this sub-layer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInUcastPkts", rest_name="ifHCInUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCInUcastPkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInUcastPkts", rest_name="ifHCInUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCInUcastPkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCInUcastPkts(self):
    self.__ifHCInUcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInUcastPkts", rest_name="ifHCInUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCInMulticastPkts(self):
    """
    Getter method for ifHCInMulticastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInMulticastPkts (yang:counter64)

    YANG Description: The number of packets, delivered by this 
sub-layer to a higher (sub-)layer, which were 
addressed to a multicast address at this 
sub-layer. For a MAC layer protocol, this
includes both Group and Functional addresses.
    """
    return self.__ifHCInMulticastPkts
      
  def _set_ifHCInMulticastPkts(self, v, load=False):
    """
    Setter method for ifHCInMulticastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInMulticastPkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCInMulticastPkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCInMulticastPkts() directly.

    YANG Description: The number of packets, delivered by this 
sub-layer to a higher (sub-)layer, which were 
addressed to a multicast address at this 
sub-layer. For a MAC layer protocol, this
includes both Group and Functional addresses.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInMulticastPkts", rest_name="ifHCInMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCInMulticastPkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInMulticastPkts", rest_name="ifHCInMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCInMulticastPkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCInMulticastPkts(self):
    self.__ifHCInMulticastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInMulticastPkts", rest_name="ifHCInMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCInBroadcastPkts(self):
    """
    Getter method for ifHCInBroadcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInBroadcastPkts (yang:counter64)

    YANG Description: The number of packets, delivered by this 
sub-layer to a higher (sub-)layer, which were 
addressed to a broadcast address at this 
sub-layer.
    """
    return self.__ifHCInBroadcastPkts
      
  def _set_ifHCInBroadcastPkts(self, v, load=False):
    """
    Setter method for ifHCInBroadcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInBroadcastPkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCInBroadcastPkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCInBroadcastPkts() directly.

    YANG Description: The number of packets, delivered by this 
sub-layer to a higher (sub-)layer, which were 
addressed to a broadcast address at this 
sub-layer.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInBroadcastPkts", rest_name="ifHCInBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCInBroadcastPkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInBroadcastPkts", rest_name="ifHCInBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCInBroadcastPkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCInBroadcastPkts(self):
    self.__ifHCInBroadcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInBroadcastPkts", rest_name="ifHCInBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCInErrors(self):
    """
    Getter method for ifHCInErrors, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInErrors (yang:counter64)

    YANG Description: For packet-oriented interfaces, the number of 
inbound packets that contained errors 
preventing them from being deliverable to a 
higher-layer protocol. For character-oriented 
or fixed-length interfaces, the number of 
inbound transmission units that contained 
errors preventing them from being deliverable 
to a higher-layer protocol.
    """
    return self.__ifHCInErrors
      
  def _set_ifHCInErrors(self, v, load=False):
    """
    Setter method for ifHCInErrors, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCInErrors (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCInErrors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCInErrors() directly.

    YANG Description: For packet-oriented interfaces, the number of 
inbound packets that contained errors 
preventing them from being deliverable to a 
higher-layer protocol. For character-oriented 
or fixed-length interfaces, the number of 
inbound transmission units that contained 
errors preventing them from being deliverable 
to a higher-layer protocol.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInErrors", rest_name="ifHCInErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCInErrors must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInErrors", rest_name="ifHCInErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCInErrors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCInErrors(self):
    self.__ifHCInErrors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCInErrors", rest_name="ifHCInErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCOutOctets(self):
    """
    Getter method for ifHCOutOctets, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutOctets (yang:counter64)

    YANG Description: The total number of octets transmitted out of 
the interface, including framing characters.
    """
    return self.__ifHCOutOctets
      
  def _set_ifHCOutOctets(self, v, load=False):
    """
    Setter method for ifHCOutOctets, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutOctets (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCOutOctets is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCOutOctets() directly.

    YANG Description: The total number of octets transmitted out of 
the interface, including framing characters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutOctets", rest_name="ifHCOutOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCOutOctets must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutOctets", rest_name="ifHCOutOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCOutOctets = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCOutOctets(self):
    self.__ifHCOutOctets = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutOctets", rest_name="ifHCOutOctets", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCOutUcastPkts(self):
    """
    Getter method for ifHCOutUcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutUcastPkts (yang:counter64)

    YANG Description: The total number of packets that higher-level 
protocols requested be transmitted, and which 
were not addressed to a multicast or broadcast 
address at this sub-layer, including those 
that were discarded or not sent.
    """
    return self.__ifHCOutUcastPkts
      
  def _set_ifHCOutUcastPkts(self, v, load=False):
    """
    Setter method for ifHCOutUcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutUcastPkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCOutUcastPkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCOutUcastPkts() directly.

    YANG Description: The total number of packets that higher-level 
protocols requested be transmitted, and which 
were not addressed to a multicast or broadcast 
address at this sub-layer, including those 
that were discarded or not sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutUcastPkts", rest_name="ifHCOutUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCOutUcastPkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutUcastPkts", rest_name="ifHCOutUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCOutUcastPkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCOutUcastPkts(self):
    self.__ifHCOutUcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutUcastPkts", rest_name="ifHCOutUcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCOutMulticastPkts(self):
    """
    Getter method for ifHCOutMulticastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutMulticastPkts (yang:counter64)

    YANG Description: The total number of packets that higher-level 
protocols requested be transmitted, and which 
were addressed to a multicast address at this 
sub-layer, including those that were discarded 
or not sent.  For a MAC layer protocol, this
includes both Group and Functional addresses.
    """
    return self.__ifHCOutMulticastPkts
      
  def _set_ifHCOutMulticastPkts(self, v, load=False):
    """
    Setter method for ifHCOutMulticastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutMulticastPkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCOutMulticastPkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCOutMulticastPkts() directly.

    YANG Description: The total number of packets that higher-level 
protocols requested be transmitted, and which 
were addressed to a multicast address at this 
sub-layer, including those that were discarded 
or not sent.  For a MAC layer protocol, this
includes both Group and Functional addresses.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutMulticastPkts", rest_name="ifHCOutMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCOutMulticastPkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutMulticastPkts", rest_name="ifHCOutMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCOutMulticastPkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCOutMulticastPkts(self):
    self.__ifHCOutMulticastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutMulticastPkts", rest_name="ifHCOutMulticastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCOutBroadcastPkts(self):
    """
    Getter method for ifHCOutBroadcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutBroadcastPkts (yang:counter64)

    YANG Description: The total number of packets that higher-level 
protocols requested be transmitted, and which 
were addressed to a broadcast address at this 
sub-layer, including those that were discarded 
or not sent.
    """
    return self.__ifHCOutBroadcastPkts
      
  def _set_ifHCOutBroadcastPkts(self, v, load=False):
    """
    Setter method for ifHCOutBroadcastPkts, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutBroadcastPkts (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCOutBroadcastPkts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCOutBroadcastPkts() directly.

    YANG Description: The total number of packets that higher-level 
protocols requested be transmitted, and which 
were addressed to a broadcast address at this 
sub-layer, including those that were discarded 
or not sent.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutBroadcastPkts", rest_name="ifHCOutBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCOutBroadcastPkts must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutBroadcastPkts", rest_name="ifHCOutBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCOutBroadcastPkts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCOutBroadcastPkts(self):
    self.__ifHCOutBroadcastPkts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutBroadcastPkts", rest_name="ifHCOutBroadcastPkts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)


  def _get_ifHCOutErrors(self):
    """
    Getter method for ifHCOutErrors, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutErrors (yang:counter64)

    YANG Description: For packet-oriented interfaces, the number of 
outbound packets that could not be transmitted 
because of errors. For character-oriented or 
fixed-length interfaces, the number of 
outbound transmission units that could not be 
transmitted because of errors.
    """
    return self.__ifHCOutErrors
      
  def _set_ifHCOutErrors(self, v, load=False):
    """
    Setter method for ifHCOutErrors, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_detail/output/interface/ifHCOutErrors (yang:counter64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ifHCOutErrors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ifHCOutErrors() directly.

    YANG Description: For packet-oriented interfaces, the number of 
outbound packets that could not be transmitted 
because of errors. For character-oriented or 
fixed-length interfaces, the number of 
outbound transmission units that could not be 
transmitted because of errors.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutErrors", rest_name="ifHCOutErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ifHCOutErrors must be of a type compatible with yang:counter64""",
          'defined-type': "yang:counter64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutErrors", rest_name="ifHCOutErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)""",
        })

    self.__ifHCOutErrors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ifHCOutErrors(self):
    self.__ifHCOutErrors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ifHCOutErrors", rest_name="ifHCOutErrors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='yang:counter64', is_config=True)

  interface_type = __builtin__.property(_get_interface_type, _set_interface_type)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  ifindex = __builtin__.property(_get_ifindex, _set_ifindex)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  ip_mtu = __builtin__.property(_get_ip_mtu, _set_ip_mtu)
  if_name = __builtin__.property(_get_if_name, _set_if_name)
  if_state = __builtin__.property(_get_if_state, _set_if_state)
  line_protocol_state = __builtin__.property(_get_line_protocol_state, _set_line_protocol_state)
  line_protocol_state_info = __builtin__.property(_get_line_protocol_state_info, _set_line_protocol_state_info)
  line_protocol_exception_info = __builtin__.property(_get_line_protocol_exception_info, _set_line_protocol_exception_info)
  hardware_type = __builtin__.property(_get_hardware_type, _set_hardware_type)
  logical_hardware_address = __builtin__.property(_get_logical_hardware_address, _set_logical_hardware_address)
  current_hardware_address = __builtin__.property(_get_current_hardware_address, _set_current_hardware_address)
  media_type = __builtin__.property(_get_media_type, _set_media_type)
  wavelength = __builtin__.property(_get_wavelength, _set_wavelength)
  if_description = __builtin__.property(_get_if_description, _set_if_description)
  actual_line_speed = __builtin__.property(_get_actual_line_speed, _set_actual_line_speed)
  configured_line_speed = __builtin__.property(_get_configured_line_speed, _set_configured_line_speed)
  line_duplex_state = __builtin__.property(_get_line_duplex_state, _set_line_duplex_state)
  flow_control = __builtin__.property(_get_flow_control, _set_flow_control)
  queuing_strategy = __builtin__.property(_get_queuing_strategy, _set_queuing_strategy)
  port_role = __builtin__.property(_get_port_role, _set_port_role)
  port_mode = __builtin__.property(_get_port_mode, _set_port_mode)
  ifHCInOctets = __builtin__.property(_get_ifHCInOctets, _set_ifHCInOctets)
  ifHCInUcastPkts = __builtin__.property(_get_ifHCInUcastPkts, _set_ifHCInUcastPkts)
  ifHCInMulticastPkts = __builtin__.property(_get_ifHCInMulticastPkts, _set_ifHCInMulticastPkts)
  ifHCInBroadcastPkts = __builtin__.property(_get_ifHCInBroadcastPkts, _set_ifHCInBroadcastPkts)
  ifHCInErrors = __builtin__.property(_get_ifHCInErrors, _set_ifHCInErrors)
  ifHCOutOctets = __builtin__.property(_get_ifHCOutOctets, _set_ifHCOutOctets)
  ifHCOutUcastPkts = __builtin__.property(_get_ifHCOutUcastPkts, _set_ifHCOutUcastPkts)
  ifHCOutMulticastPkts = __builtin__.property(_get_ifHCOutMulticastPkts, _set_ifHCOutMulticastPkts)
  ifHCOutBroadcastPkts = __builtin__.property(_get_ifHCOutBroadcastPkts, _set_ifHCOutBroadcastPkts)
  ifHCOutErrors = __builtin__.property(_get_ifHCOutErrors, _set_ifHCOutErrors)


  _pyangbind_elements = {'interface_type': interface_type, 'interface_name': interface_name, 'ifindex': ifindex, 'mtu': mtu, 'ip_mtu': ip_mtu, 'if_name': if_name, 'if_state': if_state, 'line_protocol_state': line_protocol_state, 'line_protocol_state_info': line_protocol_state_info, 'line_protocol_exception_info': line_protocol_exception_info, 'hardware_type': hardware_type, 'logical_hardware_address': logical_hardware_address, 'current_hardware_address': current_hardware_address, 'media_type': media_type, 'wavelength': wavelength, 'if_description': if_description, 'actual_line_speed': actual_line_speed, 'configured_line_speed': configured_line_speed, 'line_duplex_state': line_duplex_state, 'flow_control': flow_control, 'queuing_strategy': queuing_strategy, 'port_role': port_role, 'port_mode': port_mode, 'ifHCInOctets': ifHCInOctets, 'ifHCInUcastPkts': ifHCInUcastPkts, 'ifHCInMulticastPkts': ifHCInMulticastPkts, 'ifHCInBroadcastPkts': ifHCInBroadcastPkts, 'ifHCInErrors': ifHCInErrors, 'ifHCOutOctets': ifHCOutOctets, 'ifHCOutUcastPkts': ifHCOutUcastPkts, 'ifHCOutMulticastPkts': ifHCOutMulticastPkts, 'ifHCOutBroadcastPkts': ifHCOutBroadcastPkts, 'ifHCOutErrors': ifHCOutErrors, }


