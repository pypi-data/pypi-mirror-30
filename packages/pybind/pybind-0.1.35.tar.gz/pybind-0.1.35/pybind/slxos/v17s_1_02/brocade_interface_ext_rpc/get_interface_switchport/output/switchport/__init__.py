
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import active_vlans
import inactive_vlans
class switchport(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface-ext - based on the path /brocade_interface_ext_rpc/get-interface-switchport/output/switchport. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This is a list of all the switch-ports in the 
managed device. Each row represents an L2 port 
along with the operational characteristics.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_type','__interface_name','__mode','__ingress_filter_enabled','__acceptable_frame_type','__default_vlan','__active_vlans','__inactive_vlans',)

  _yang_name = 'switchport'
  _rest_name = 'switchport'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__inactive_vlans = YANGDynClass(base=inactive_vlans.inactive_vlans, is_container='container', presence=False, yang_name="inactive-vlans", rest_name="inactive-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)
    self.__active_vlans = YANGDynClass(base=active_vlans.active_vlans, is_container='container', presence=False, yang_name="active-vlans", rest_name="active-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__acceptable_frame_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admit-all': {'value': 1}, u'admit-only-vlan-tagged': {'value': 2}},), is_leaf=True, yang_name="acceptable-frame-type", rest_name="acceptable-frame-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    self.__default_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="default-vlan", rest_name="default-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:vlan-type', is_config=True)
    self.__ingress_filter_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-filter-enabled", rest_name="ingress-filter-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='boolean', is_config=True)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pvlan-promiscuous': {'value': 4}, u'trunk-no-default-native': {'value': 9}, u'pvlan-trunk-promiscuous': {'value': 5}, u'pvlan-trunk-host': {'value': 7}, u'unknown': {'value': 0}, u'pvlan-host': {'value': 6}, u'access': {'value': 1}, u'pvlan-trunk': {'value': 8}, u'trunk': {'value': 2}, u'converged': {'value': 3}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:switchport-mode-type', is_config=True)
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_interface_ext_rpc', u'get-interface-switchport', u'output', u'switchport']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-interface-switchport', u'output', u'switchport']

  def _get_interface_type(self):
    """
    Getter method for interface_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/interface_type (enumeration)

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    return self.__interface_type
      
  def _set_interface_type(self, v, load=False):
    """
    Setter method for interface_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_type() directly.

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_type(self):
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u've': {'value': 8}, u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 11}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/interface_name (union)

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
ethernet               slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
loopback               Loopback ID
ve                     VE Interface ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
ethernet               slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
loopback               Loopback ID
ve                     VE Interface ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with union""",
          'defined-type': "brocade-interface-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..1024']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='union', is_config=True)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/mode (interface:switchport-mode-type)

    YANG Description: This indicates the mode of Layer2 interface.
    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/mode (interface:switchport-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: This indicates the mode of Layer2 interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pvlan-promiscuous': {'value': 4}, u'trunk-no-default-native': {'value': 9}, u'pvlan-trunk-promiscuous': {'value': 5}, u'pvlan-trunk-host': {'value': 7}, u'unknown': {'value': 0}, u'pvlan-host': {'value': 6}, u'access': {'value': 1}, u'pvlan-trunk': {'value': 8}, u'trunk': {'value': 2}, u'converged': {'value': 3}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:switchport-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with interface:switchport-mode-type""",
          'defined-type': "interface:switchport-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pvlan-promiscuous': {'value': 4}, u'trunk-no-default-native': {'value': 9}, u'pvlan-trunk-promiscuous': {'value': 5}, u'pvlan-trunk-host': {'value': 7}, u'unknown': {'value': 0}, u'pvlan-host': {'value': 6}, u'access': {'value': 1}, u'pvlan-trunk': {'value': 8}, u'trunk': {'value': 2}, u'converged': {'value': 3}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:switchport-mode-type', is_config=True)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pvlan-promiscuous': {'value': 4}, u'trunk-no-default-native': {'value': 9}, u'pvlan-trunk-promiscuous': {'value': 5}, u'pvlan-trunk-host': {'value': 7}, u'unknown': {'value': 0}, u'pvlan-host': {'value': 6}, u'access': {'value': 1}, u'pvlan-trunk': {'value': 8}, u'trunk': {'value': 2}, u'converged': {'value': 3}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:switchport-mode-type', is_config=True)


  def _get_ingress_filter_enabled(self):
    """
    Getter method for ingress_filter_enabled, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/ingress_filter_enabled (boolean)

    YANG Description: This indicates if the 'Ingress filtering' is 
enabled for this interface.
                        
The value of 'true' indicates that the port is 
enabled for 'Ingress filtering'. The value of 
'false' indicates that the port is not enabled 
for 'Ingress filtering'.
    """
    return self.__ingress_filter_enabled
      
  def _set_ingress_filter_enabled(self, v, load=False):
    """
    Setter method for ingress_filter_enabled, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/ingress_filter_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_filter_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_filter_enabled() directly.

    YANG Description: This indicates if the 'Ingress filtering' is 
enabled for this interface.
                        
The value of 'true' indicates that the port is 
enabled for 'Ingress filtering'. The value of 
'false' indicates that the port is not enabled 
for 'Ingress filtering'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ingress-filter-enabled", rest_name="ingress-filter-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_filter_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-filter-enabled", rest_name="ingress-filter-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='boolean', is_config=True)""",
        })

    self.__ingress_filter_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_filter_enabled(self):
    self.__ingress_filter_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ingress-filter-enabled", rest_name="ingress-filter-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='boolean', is_config=True)


  def _get_acceptable_frame_type(self):
    """
    Getter method for acceptable_frame_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/acceptable_frame_type (enumeration)

    YANG Description: This specifies the switch-port ingress 
Frame admission policy - whether only tagged 
Frames are allowed or all.
    """
    return self.__acceptable_frame_type
      
  def _set_acceptable_frame_type(self, v, load=False):
    """
    Setter method for acceptable_frame_type, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/acceptable_frame_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_acceptable_frame_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_acceptable_frame_type() directly.

    YANG Description: This specifies the switch-port ingress 
Frame admission policy - whether only tagged 
Frames are allowed or all.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admit-all': {'value': 1}, u'admit-only-vlan-tagged': {'value': 2}},), is_leaf=True, yang_name="acceptable-frame-type", rest_name="acceptable-frame-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """acceptable_frame_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admit-all': {'value': 1}, u'admit-only-vlan-tagged': {'value': 2}},), is_leaf=True, yang_name="acceptable-frame-type", rest_name="acceptable-frame-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__acceptable_frame_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_acceptable_frame_type(self):
    self.__acceptable_frame_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'admit-all': {'value': 1}, u'admit-only-vlan-tagged': {'value': 2}},), is_leaf=True, yang_name="acceptable-frame-type", rest_name="acceptable-frame-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_default_vlan(self):
    """
    Getter method for default_vlan, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/default_vlan (interface:vlan-type)

    YANG Description: This indicates the 'default vlan' identifier 
value for this switch-port. If switch-port mode 
as indicated by the value of the corresponding 
instance of 'mode' is 'trunk', Native vlan is 
returned. If switch-port mode is 'access', 
default vlan is returned.
    """
    return self.__default_vlan
      
  def _set_default_vlan(self, v, load=False):
    """
    Setter method for default_vlan, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/default_vlan (interface:vlan-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_vlan() directly.

    YANG Description: This indicates the 'default vlan' identifier 
value for this switch-port. If switch-port mode 
as indicated by the value of the corresponding 
instance of 'mode' is 'trunk', Native vlan is 
returned. If switch-port mode is 'access', 
default vlan is returned.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="default-vlan", rest_name="default-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:vlan-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_vlan must be of a type compatible with interface:vlan-type""",
          'defined-type': "interface:vlan-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="default-vlan", rest_name="default-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:vlan-type', is_config=True)""",
        })

    self.__default_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_vlan(self):
    self.__default_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="default-vlan", rest_name="default-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='interface:vlan-type', is_config=True)


  def _get_active_vlans(self):
    """
    Getter method for active_vlans, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/active_vlans (container)

    YANG Description: A conceptual group indicating the active vlans
for this switch-port interface.
    """
    return self.__active_vlans
      
  def _set_active_vlans(self, v, load=False):
    """
    Setter method for active_vlans, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/active_vlans (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active_vlans() directly.

    YANG Description: A conceptual group indicating the active vlans
for this switch-port interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=active_vlans.active_vlans, is_container='container', presence=False, yang_name="active-vlans", rest_name="active-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active_vlans must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=active_vlans.active_vlans, is_container='container', presence=False, yang_name="active-vlans", rest_name="active-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)""",
        })

    self.__active_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active_vlans(self):
    self.__active_vlans = YANGDynClass(base=active_vlans.active_vlans, is_container='container', presence=False, yang_name="active-vlans", rest_name="active-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)


  def _get_inactive_vlans(self):
    """
    Getter method for inactive_vlans, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/inactive_vlans (container)

    YANG Description: A conceptual group indicating the in-active 
vlans for this switch-port interface.
    """
    return self.__inactive_vlans
      
  def _set_inactive_vlans(self, v, load=False):
    """
    Setter method for inactive_vlans, mapped from YANG variable /brocade_interface_ext_rpc/get_interface_switchport/output/switchport/inactive_vlans (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inactive_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inactive_vlans() directly.

    YANG Description: A conceptual group indicating the in-active 
vlans for this switch-port interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=inactive_vlans.inactive_vlans, is_container='container', presence=False, yang_name="inactive-vlans", rest_name="inactive-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inactive_vlans must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=inactive_vlans.inactive_vlans, is_container='container', presence=False, yang_name="inactive-vlans", rest_name="inactive-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)""",
        })

    self.__inactive_vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inactive_vlans(self):
    self.__inactive_vlans = YANGDynClass(base=inactive_vlans.inactive_vlans, is_container='container', presence=False, yang_name="inactive-vlans", rest_name="inactive-vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='container', is_config=True)

  interface_type = __builtin__.property(_get_interface_type, _set_interface_type)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  mode = __builtin__.property(_get_mode, _set_mode)
  ingress_filter_enabled = __builtin__.property(_get_ingress_filter_enabled, _set_ingress_filter_enabled)
  acceptable_frame_type = __builtin__.property(_get_acceptable_frame_type, _set_acceptable_frame_type)
  default_vlan = __builtin__.property(_get_default_vlan, _set_default_vlan)
  active_vlans = __builtin__.property(_get_active_vlans, _set_active_vlans)
  inactive_vlans = __builtin__.property(_get_inactive_vlans, _set_inactive_vlans)


  _pyangbind_elements = {'interface_type': interface_type, 'interface_name': interface_name, 'mode': mode, 'ingress_filter_enabled': ingress_filter_enabled, 'acceptable_frame_type': acceptable_frame_type, 'default_vlan': default_vlan, 'active_vlans': active_vlans, 'inactive_vlans': inactive_vlans, }


