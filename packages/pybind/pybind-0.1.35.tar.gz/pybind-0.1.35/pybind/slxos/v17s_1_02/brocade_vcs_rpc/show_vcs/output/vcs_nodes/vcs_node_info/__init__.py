
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import node_public_ip_addresses
import node_public_ipv6_addresses
class vcs_node_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-vcs - based on the path /brocade_vcs_rpc/show-vcs/output/vcs-nodes/vcs-node-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__node_num','__node_serial_num','__node_condition','__node_status','__node_hw_sync_state','__node_vcs_mode','__node_vcs_id','__node_rbridge_id','__node_is_principal','__co_ordinator','__node_switch_mac','__node_switch_wwn','__switch_fcf_mac','__node_internal_ip_address','__node_public_ip_addresses','__node_public_ipv6_addresses','__firmware_version','__node_swbd_number','__node_switchname','__node_switchtype','__node_switch_subtype','__node_switch_description','__manufacturer_name','__node_state','__node_fabric_state',)

  _yang_name = 'vcs-node-info'
  _rest_name = 'vcs-node-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__node_swbd_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="node-swbd-number", rest_name="node-swbd-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='int32', is_config=True)
    self.__node_switch_wwn = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-wwn", rest_name="node-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_hw_sync_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'node-in-sync': {'value': 4}, u'node-uninitialized': {'value': 2}, u'node-unknown': {'value': 1}, u'node-synchronizing': {'value': 3}, u'node-out-of-sync': {'value': 5}},), is_leaf=True, yang_name="node-hw-sync-state", rest_name="node-hw-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-hw-sync-state-type', is_config=True)
    self.__switch_fcf_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="switch-fcf-mac", rest_name="switch-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)
    self.__node_serial_num = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__firmware_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__manufacturer_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="manufacturer-name", rest_name="manufacturer-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_public_ipv6_addresses = YANGDynClass(base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)
    self.__node_switch_subtype = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-switch-subtype", rest_name="node-switch-subtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    self.__node_num = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    self.__node_vcs_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-vcs-mode", rest_name="node-vcs-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_is_principal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)
    self.__node_switch_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)
    self.__node_vcs_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-vcs-id", rest_name="node-vcs-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    self.__node_internal_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='inet:ipv4-address', is_config=True)
    self.__node_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Replacing': {'value': 4}, u'Unknown': {'value': 1}, u'Rejoining': {'value': 6}, u'Awaiting-Rejoin': {'value': 7}, u'Online': {'value': 2}, u'Offline': {'value': 3}, u'Coming-Online': {'value': 5}},), is_leaf=True, yang_name="node-state", rest_name="node-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-state-type', is_config=True)
    self.__node_switch_description = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-description", rest_name="node-switch-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_public_ip_addresses = YANGDynClass(base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)
    self.__node_switchtype = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_rbridge_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-rbridge-id", rest_name="node-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    self.__node_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_fabric_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-fabric-state", rest_name="node-fabric-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__co_ordinator = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="co-ordinator", rest_name="co-ordinator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)
    self.__node_switchname = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchname", rest_name="node-switchname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__node_condition = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_vcs_rpc', u'show-vcs', u'output', u'vcs-nodes', u'vcs-node-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-vcs', u'output', u'vcs-nodes', u'vcs-node-info']

  def _get_node_num(self):
    """
    Getter method for node_num, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_num (uint16)

    YANG Description: Node number
    """
    return self.__node_num
      
  def _set_node_num(self, v, load=False):
    """
    Setter method for node_num, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_num (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_num() directly.

    YANG Description: Node number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_num must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)""",
        })

    self.__node_num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_num(self):
    self.__node_num = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-num", rest_name="node-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)


  def _get_node_serial_num(self):
    """
    Getter method for node_serial_num, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_serial_num (string)

    YANG Description: Serial number
    """
    return self.__node_serial_num
      
  def _set_node_serial_num(self, v, load=False):
    """
    Setter method for node_serial_num, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_serial_num (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_serial_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_serial_num() directly.

    YANG Description: Serial number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_serial_num must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_serial_num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_serial_num(self):
    self.__node_serial_num = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-serial-num", rest_name="node-serial-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_condition(self):
    """
    Getter method for node_condition, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_condition (string)

    YANG Description: Node condition
    """
    return self.__node_condition
      
  def _set_node_condition(self, v, load=False):
    """
    Setter method for node_condition, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_condition (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_condition is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_condition() directly.

    YANG Description: Node condition
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_condition must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_condition = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_condition(self):
    self.__node_condition = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-condition", rest_name="node-condition", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_status(self):
    """
    Getter method for node_status, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_status (string)

    YANG Description: Node status
    """
    return self.__node_status
      
  def _set_node_status(self, v, load=False):
    """
    Setter method for node_status, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_status() directly.

    YANG Description: Node status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_status(self):
    self.__node_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-status", rest_name="node-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_hw_sync_state(self):
    """
    Getter method for node_hw_sync_state, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_hw_sync_state (node-hw-sync-state-type)

    YANG Description: Node hardware synchronization state
    """
    return self.__node_hw_sync_state
      
  def _set_node_hw_sync_state(self, v, load=False):
    """
    Setter method for node_hw_sync_state, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_hw_sync_state (node-hw-sync-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_hw_sync_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_hw_sync_state() directly.

    YANG Description: Node hardware synchronization state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'node-in-sync': {'value': 4}, u'node-uninitialized': {'value': 2}, u'node-unknown': {'value': 1}, u'node-synchronizing': {'value': 3}, u'node-out-of-sync': {'value': 5}},), is_leaf=True, yang_name="node-hw-sync-state", rest_name="node-hw-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-hw-sync-state-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_hw_sync_state must be of a type compatible with node-hw-sync-state-type""",
          'defined-type': "brocade-vcs:node-hw-sync-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'node-in-sync': {'value': 4}, u'node-uninitialized': {'value': 2}, u'node-unknown': {'value': 1}, u'node-synchronizing': {'value': 3}, u'node-out-of-sync': {'value': 5}},), is_leaf=True, yang_name="node-hw-sync-state", rest_name="node-hw-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-hw-sync-state-type', is_config=True)""",
        })

    self.__node_hw_sync_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_hw_sync_state(self):
    self.__node_hw_sync_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'node-in-sync': {'value': 4}, u'node-uninitialized': {'value': 2}, u'node-unknown': {'value': 1}, u'node-synchronizing': {'value': 3}, u'node-out-of-sync': {'value': 5}},), is_leaf=True, yang_name="node-hw-sync-state", rest_name="node-hw-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-hw-sync-state-type', is_config=True)


  def _get_node_vcs_mode(self):
    """
    Getter method for node_vcs_mode, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_vcs_mode (string)

    YANG Description: Node's VCS mode
    """
    return self.__node_vcs_mode
      
  def _set_node_vcs_mode(self, v, load=False):
    """
    Setter method for node_vcs_mode, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_vcs_mode (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_vcs_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_vcs_mode() directly.

    YANG Description: Node's VCS mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-vcs-mode", rest_name="node-vcs-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_vcs_mode must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-vcs-mode", rest_name="node-vcs-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_vcs_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_vcs_mode(self):
    self.__node_vcs_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-vcs-mode", rest_name="node-vcs-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_vcs_id(self):
    """
    Getter method for node_vcs_id, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_vcs_id (uint16)

    YANG Description: Node VCS id
    """
    return self.__node_vcs_id
      
  def _set_node_vcs_id(self, v, load=False):
    """
    Setter method for node_vcs_id, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_vcs_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_vcs_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_vcs_id() directly.

    YANG Description: Node VCS id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-vcs-id", rest_name="node-vcs-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_vcs_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-vcs-id", rest_name="node-vcs-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)""",
        })

    self.__node_vcs_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_vcs_id(self):
    self.__node_vcs_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-vcs-id", rest_name="node-vcs-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)


  def _get_node_rbridge_id(self):
    """
    Getter method for node_rbridge_id, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_rbridge_id (uint16)

    YANG Description: Node rbridge Id
    """
    return self.__node_rbridge_id
      
  def _set_node_rbridge_id(self, v, load=False):
    """
    Setter method for node_rbridge_id, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_rbridge_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_rbridge_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_rbridge_id() directly.

    YANG Description: Node rbridge Id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-rbridge-id", rest_name="node-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_rbridge_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-rbridge-id", rest_name="node-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)""",
        })

    self.__node_rbridge_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_rbridge_id(self):
    self.__node_rbridge_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-rbridge-id", rest_name="node-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)


  def _get_node_is_principal(self):
    """
    Getter method for node_is_principal, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_is_principal (boolean)

    YANG Description: Whether node is management cluster principal.
    """
    return self.__node_is_principal
      
  def _set_node_is_principal(self, v, load=False):
    """
    Setter method for node_is_principal, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_is_principal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_is_principal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_is_principal() directly.

    YANG Description: Whether node is management cluster principal.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_is_principal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)""",
        })

    self.__node_is_principal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_is_principal(self):
    self.__node_is_principal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="node-is-principal", rest_name="node-is-principal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)


  def _get_co_ordinator(self):
    """
    Getter method for co_ordinator, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/co_ordinator (boolean)

    YANG Description: Whether node is management cluster co-ordinator.
    """
    return self.__co_ordinator
      
  def _set_co_ordinator(self, v, load=False):
    """
    Setter method for co_ordinator, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/co_ordinator (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_co_ordinator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_co_ordinator() directly.

    YANG Description: Whether node is management cluster co-ordinator.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="co-ordinator", rest_name="co-ordinator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """co_ordinator must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="co-ordinator", rest_name="co-ordinator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)""",
        })

    self.__co_ordinator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_co_ordinator(self):
    self.__co_ordinator = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="co-ordinator", rest_name="co-ordinator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='boolean', is_config=True)


  def _get_node_switch_mac(self):
    """
    Getter method for node_switch_mac, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_mac (yang:mac-address)

    YANG Description: Node switch mac address
    """
    return self.__node_switch_mac
      
  def _set_node_switch_mac(self, v, load=False):
    """
    Setter method for node_switch_mac, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_mac (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switch_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switch_mac() directly.

    YANG Description: Node switch mac address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switch_mac must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__node_switch_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switch_mac(self):
    self.__node_switch_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="node-switch-mac", rest_name="node-switch-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)


  def _get_node_switch_wwn(self):
    """
    Getter method for node_switch_wwn, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_wwn (string)

    YANG Description: Node switch WWN
    """
    return self.__node_switch_wwn
      
  def _set_node_switch_wwn(self, v, load=False):
    """
    Setter method for node_switch_wwn, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_wwn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switch_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switch_wwn() directly.

    YANG Description: Node switch WWN
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-switch-wwn", rest_name="node-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switch_wwn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-wwn", rest_name="node-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_switch_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switch_wwn(self):
    self.__node_switch_wwn = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-wwn", rest_name="node-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_switch_fcf_mac(self):
    """
    Getter method for switch_fcf_mac, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/switch_fcf_mac (yang:mac-address)

    YANG Description: Node fcf mac address
    """
    return self.__switch_fcf_mac
      
  def _set_switch_fcf_mac(self, v, load=False):
    """
    Setter method for switch_fcf_mac, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/switch_fcf_mac (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_switch_fcf_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_switch_fcf_mac() directly.

    YANG Description: Node fcf mac address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="switch-fcf-mac", rest_name="switch-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """switch_fcf_mac must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="switch-fcf-mac", rest_name="switch-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__switch_fcf_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_switch_fcf_mac(self):
    self.__switch_fcf_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="switch-fcf-mac", rest_name="switch-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='yang:mac-address', is_config=True)


  def _get_node_internal_ip_address(self):
    """
    Getter method for node_internal_ip_address, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_internal_ip_address (inet:ipv4-address)

    YANG Description: Node internal IP address
    """
    return self.__node_internal_ip_address
      
  def _set_node_internal_ip_address(self, v, load=False):
    """
    Setter method for node_internal_ip_address, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_internal_ip_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_internal_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_internal_ip_address() directly.

    YANG Description: Node internal IP address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_internal_ip_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__node_internal_ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_internal_ip_address(self):
    self.__node_internal_ip_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="node-internal-ip-address", rest_name="node-internal-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='inet:ipv4-address', is_config=True)


  def _get_node_public_ip_addresses(self):
    """
    Getter method for node_public_ip_addresses, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_public_ip_addresses (list)
    """
    return self.__node_public_ip_addresses
      
  def _set_node_public_ip_addresses(self, v, load=False):
    """
    Setter method for node_public_ip_addresses, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_public_ip_addresses (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_public_ip_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_public_ip_addresses() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_public_ip_addresses must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)""",
        })

    self.__node_public_ip_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_public_ip_addresses(self):
    self.__node_public_ip_addresses = YANGDynClass(base=YANGListType(False,node_public_ip_addresses.node_public_ip_addresses, yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ip-addresses", rest_name="node-public-ip-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)


  def _get_node_public_ipv6_addresses(self):
    """
    Getter method for node_public_ipv6_addresses, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_public_ipv6_addresses (list)
    """
    return self.__node_public_ipv6_addresses
      
  def _set_node_public_ipv6_addresses(self, v, load=False):
    """
    Setter method for node_public_ipv6_addresses, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_public_ipv6_addresses (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_public_ipv6_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_public_ipv6_addresses() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_public_ipv6_addresses must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)""",
        })

    self.__node_public_ipv6_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_public_ipv6_addresses(self):
    self.__node_public_ipv6_addresses = YANGDynClass(base=YANGListType(False,node_public_ipv6_addresses.node_public_ipv6_addresses, yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="node-public-ipv6-addresses", rest_name="node-public-ipv6-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='list', is_config=True)


  def _get_firmware_version(self):
    """
    Getter method for firmware_version, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/firmware_version (string)

    YANG Description: Node Firmware version
    """
    return self.__firmware_version
      
  def _set_firmware_version(self, v, load=False):
    """
    Setter method for firmware_version, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/firmware_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_firmware_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_firmware_version() directly.

    YANG Description: Node Firmware version
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """firmware_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__firmware_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_firmware_version(self):
    self.__firmware_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="firmware-version", rest_name="firmware-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_swbd_number(self):
    """
    Getter method for node_swbd_number, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_swbd_number (int32)

    YANG Description: Node SWBD number.
    """
    return self.__node_swbd_number
      
  def _set_node_swbd_number(self, v, load=False):
    """
    Setter method for node_swbd_number, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_swbd_number (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_swbd_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_swbd_number() directly.

    YANG Description: Node SWBD number.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="node-swbd-number", rest_name="node-swbd-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_swbd_number must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="node-swbd-number", rest_name="node-swbd-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='int32', is_config=True)""",
        })

    self.__node_swbd_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_swbd_number(self):
    self.__node_swbd_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="node-swbd-number", rest_name="node-swbd-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='int32', is_config=True)


  def _get_node_switchname(self):
    """
    Getter method for node_switchname, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switchname (string)

    YANG Description: Node switchname.
    """
    return self.__node_switchname
      
  def _set_node_switchname(self, v, load=False):
    """
    Setter method for node_switchname, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switchname (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switchname is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switchname() directly.

    YANG Description: Node switchname.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-switchname", rest_name="node-switchname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switchname must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchname", rest_name="node-switchname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_switchname = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switchname(self):
    self.__node_switchname = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchname", rest_name="node-switchname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_switchtype(self):
    """
    Getter method for node_switchtype, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switchtype (string)

    YANG Description: Node switchtype.
    """
    return self.__node_switchtype
      
  def _set_node_switchtype(self, v, load=False):
    """
    Setter method for node_switchtype, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switchtype (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switchtype is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switchtype() directly.

    YANG Description: Node switchtype.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switchtype must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_switchtype = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switchtype(self):
    self.__node_switchtype = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switchtype", rest_name="node-switchtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_switch_subtype(self):
    """
    Getter method for node_switch_subtype, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_subtype (uint16)

    YANG Description: Node switch subtype.
    """
    return self.__node_switch_subtype
      
  def _set_node_switch_subtype(self, v, load=False):
    """
    Setter method for node_switch_subtype, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_subtype (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switch_subtype is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switch_subtype() directly.

    YANG Description: Node switch subtype.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-switch-subtype", rest_name="node-switch-subtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switch_subtype must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-switch-subtype", rest_name="node-switch-subtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)""",
        })

    self.__node_switch_subtype = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switch_subtype(self):
    self.__node_switch_subtype = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="node-switch-subtype", rest_name="node-switch-subtype", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)


  def _get_node_switch_description(self):
    """
    Getter method for node_switch_description, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_description (string)

    YANG Description: Description of the switch.
    """
    return self.__node_switch_description
      
  def _set_node_switch_description(self, v, load=False):
    """
    Setter method for node_switch_description, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_switch_description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_switch_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_switch_description() directly.

    YANG Description: Description of the switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-switch-description", rest_name="node-switch-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_switch_description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-description", rest_name="node-switch-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_switch_description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_switch_description(self):
    self.__node_switch_description = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-switch-description", rest_name="node-switch-description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_manufacturer_name(self):
    """
    Getter method for manufacturer_name, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/manufacturer_name (string)

    YANG Description: Manufacturer name
    """
    return self.__manufacturer_name
      
  def _set_manufacturer_name(self, v, load=False):
    """
    Setter method for manufacturer_name, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/manufacturer_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_manufacturer_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_manufacturer_name() directly.

    YANG Description: Manufacturer name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="manufacturer-name", rest_name="manufacturer-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """manufacturer_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="manufacturer-name", rest_name="manufacturer-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__manufacturer_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_manufacturer_name(self):
    self.__manufacturer_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="manufacturer-name", rest_name="manufacturer-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_node_state(self):
    """
    Getter method for node_state, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_state (node-state-type)

    YANG Description: Node state
    """
    return self.__node_state
      
  def _set_node_state(self, v, load=False):
    """
    Setter method for node_state, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_state (node-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_state() directly.

    YANG Description: Node state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Replacing': {'value': 4}, u'Unknown': {'value': 1}, u'Rejoining': {'value': 6}, u'Awaiting-Rejoin': {'value': 7}, u'Online': {'value': 2}, u'Offline': {'value': 3}, u'Coming-Online': {'value': 5}},), is_leaf=True, yang_name="node-state", rest_name="node-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-state-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_state must be of a type compatible with node-state-type""",
          'defined-type': "brocade-vcs:node-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Replacing': {'value': 4}, u'Unknown': {'value': 1}, u'Rejoining': {'value': 6}, u'Awaiting-Rejoin': {'value': 7}, u'Online': {'value': 2}, u'Offline': {'value': 3}, u'Coming-Online': {'value': 5}},), is_leaf=True, yang_name="node-state", rest_name="node-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-state-type', is_config=True)""",
        })

    self.__node_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_state(self):
    self.__node_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Replacing': {'value': 4}, u'Unknown': {'value': 1}, u'Rejoining': {'value': 6}, u'Awaiting-Rejoin': {'value': 7}, u'Online': {'value': 2}, u'Offline': {'value': 3}, u'Coming-Online': {'value': 5}},), is_leaf=True, yang_name="node-state", rest_name="node-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='node-state-type', is_config=True)


  def _get_node_fabric_state(self):
    """
    Getter method for node_fabric_state, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_fabric_state (string)

    YANG Description: Fabric node state
    """
    return self.__node_fabric_state
      
  def _set_node_fabric_state(self, v, load=False):
    """
    Setter method for node_fabric_state, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes/vcs_node_info/node_fabric_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_node_fabric_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_node_fabric_state() directly.

    YANG Description: Fabric node state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="node-fabric-state", rest_name="node-fabric-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """node_fabric_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="node-fabric-state", rest_name="node-fabric-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__node_fabric_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_node_fabric_state(self):
    self.__node_fabric_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="node-fabric-state", rest_name="node-fabric-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)

  node_num = __builtin__.property(_get_node_num, _set_node_num)
  node_serial_num = __builtin__.property(_get_node_serial_num, _set_node_serial_num)
  node_condition = __builtin__.property(_get_node_condition, _set_node_condition)
  node_status = __builtin__.property(_get_node_status, _set_node_status)
  node_hw_sync_state = __builtin__.property(_get_node_hw_sync_state, _set_node_hw_sync_state)
  node_vcs_mode = __builtin__.property(_get_node_vcs_mode, _set_node_vcs_mode)
  node_vcs_id = __builtin__.property(_get_node_vcs_id, _set_node_vcs_id)
  node_rbridge_id = __builtin__.property(_get_node_rbridge_id, _set_node_rbridge_id)
  node_is_principal = __builtin__.property(_get_node_is_principal, _set_node_is_principal)
  co_ordinator = __builtin__.property(_get_co_ordinator, _set_co_ordinator)
  node_switch_mac = __builtin__.property(_get_node_switch_mac, _set_node_switch_mac)
  node_switch_wwn = __builtin__.property(_get_node_switch_wwn, _set_node_switch_wwn)
  switch_fcf_mac = __builtin__.property(_get_switch_fcf_mac, _set_switch_fcf_mac)
  node_internal_ip_address = __builtin__.property(_get_node_internal_ip_address, _set_node_internal_ip_address)
  node_public_ip_addresses = __builtin__.property(_get_node_public_ip_addresses, _set_node_public_ip_addresses)
  node_public_ipv6_addresses = __builtin__.property(_get_node_public_ipv6_addresses, _set_node_public_ipv6_addresses)
  firmware_version = __builtin__.property(_get_firmware_version, _set_firmware_version)
  node_swbd_number = __builtin__.property(_get_node_swbd_number, _set_node_swbd_number)
  node_switchname = __builtin__.property(_get_node_switchname, _set_node_switchname)
  node_switchtype = __builtin__.property(_get_node_switchtype, _set_node_switchtype)
  node_switch_subtype = __builtin__.property(_get_node_switch_subtype, _set_node_switch_subtype)
  node_switch_description = __builtin__.property(_get_node_switch_description, _set_node_switch_description)
  manufacturer_name = __builtin__.property(_get_manufacturer_name, _set_manufacturer_name)
  node_state = __builtin__.property(_get_node_state, _set_node_state)
  node_fabric_state = __builtin__.property(_get_node_fabric_state, _set_node_fabric_state)


  _pyangbind_elements = {'node_num': node_num, 'node_serial_num': node_serial_num, 'node_condition': node_condition, 'node_status': node_status, 'node_hw_sync_state': node_hw_sync_state, 'node_vcs_mode': node_vcs_mode, 'node_vcs_id': node_vcs_id, 'node_rbridge_id': node_rbridge_id, 'node_is_principal': node_is_principal, 'co_ordinator': co_ordinator, 'node_switch_mac': node_switch_mac, 'node_switch_wwn': node_switch_wwn, 'switch_fcf_mac': switch_fcf_mac, 'node_internal_ip_address': node_internal_ip_address, 'node_public_ip_addresses': node_public_ip_addresses, 'node_public_ipv6_addresses': node_public_ipv6_addresses, 'firmware_version': firmware_version, 'node_swbd_number': node_swbd_number, 'node_switchname': node_switchname, 'node_switchtype': node_switchtype, 'node_switch_subtype': node_switch_subtype, 'node_switch_description': node_switch_description, 'manufacturer_name': manufacturer_name, 'node_state': node_state, 'node_fabric_state': node_fabric_state, }


