
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_mpls_session_brief(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-rsvp-session-detail/output/mpls-rsvp-session-detail/show-mpls-session-brief. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mpls_rsvp_session_total_session_count','__mpls_rsvp_session_ingress_session_count','__mpls_rsvp_session_transit_session_count','__mpls_rsvp_session_egress_session_count','__mpls_rsvp_session_dest_ip_addr','__mpls_rsvp_session_source_ip_addr','__mpls_rsvp_session_type','__mpls_rsvp_session_status','__mpls_rsvp_session_style','__mpls_rsvp_session_in_label','__mpls_rsvp_session_out_label','__mpls_rsvp_session_out_interface','__mpls_rsvp_session_name',)

  _yang_name = 'show-mpls-session-brief'
  _rest_name = 'show-mpls-session-brief'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__mpls_rsvp_session_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-type", rest_name="mpls-rsvp-session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_ingress_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-ingress-session-count", rest_name="mpls-rsvp-session-ingress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_source_ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-source-ip-addr", rest_name="mpls-rsvp-session-source-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__mpls_rsvp_session_in_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-in-label", rest_name="mpls-rsvp-session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_total_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-total-session-count", rest_name="mpls-rsvp-session-total-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-out-label", rest_name="mpls-rsvp-session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-status", rest_name="mpls-rsvp-session-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_out_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-out-interface", rest_name="mpls-rsvp-session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-name", rest_name="mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_dest_ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-dest-ip-addr", rest_name="mpls-rsvp-session-dest-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__mpls_rsvp_session_style = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-style", rest_name="mpls-rsvp-session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_egress_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-egress-session-count", rest_name="mpls-rsvp-session-egress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_transit_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-transit-session-count", rest_name="mpls-rsvp-session-transit-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-rsvp-session-detail', u'output', u'mpls-rsvp-session-detail', u'show-mpls-session-brief']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-rsvp-session-detail', u'output', u'mpls-rsvp-session-detail', u'show-mpls-session-brief']

  def _get_mpls_rsvp_session_total_session_count(self):
    """
    Getter method for mpls_rsvp_session_total_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_total_session_count (uint32)

    YANG Description: Total number of RSVP sessions
    """
    return self.__mpls_rsvp_session_total_session_count
      
  def _set_mpls_rsvp_session_total_session_count(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_total_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_total_session_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_total_session_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_total_session_count() directly.

    YANG Description: Total number of RSVP sessions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-total-session-count", rest_name="mpls-rsvp-session-total-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_total_session_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-total-session-count", rest_name="mpls-rsvp-session-total-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_total_session_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_total_session_count(self):
    self.__mpls_rsvp_session_total_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-total-session-count", rest_name="mpls-rsvp-session-total-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_ingress_session_count(self):
    """
    Getter method for mpls_rsvp_session_ingress_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_ingress_session_count (uint32)

    YANG Description: Number of RSVP ingress sessions
    """
    return self.__mpls_rsvp_session_ingress_session_count
      
  def _set_mpls_rsvp_session_ingress_session_count(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_ingress_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_ingress_session_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_ingress_session_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_ingress_session_count() directly.

    YANG Description: Number of RSVP ingress sessions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-ingress-session-count", rest_name="mpls-rsvp-session-ingress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_ingress_session_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-ingress-session-count", rest_name="mpls-rsvp-session-ingress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_ingress_session_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_ingress_session_count(self):
    self.__mpls_rsvp_session_ingress_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-ingress-session-count", rest_name="mpls-rsvp-session-ingress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_transit_session_count(self):
    """
    Getter method for mpls_rsvp_session_transit_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_transit_session_count (uint32)

    YANG Description: Number of RSVP transit sessions
    """
    return self.__mpls_rsvp_session_transit_session_count
      
  def _set_mpls_rsvp_session_transit_session_count(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_transit_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_transit_session_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_transit_session_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_transit_session_count() directly.

    YANG Description: Number of RSVP transit sessions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-transit-session-count", rest_name="mpls-rsvp-session-transit-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_transit_session_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-transit-session-count", rest_name="mpls-rsvp-session-transit-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_transit_session_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_transit_session_count(self):
    self.__mpls_rsvp_session_transit_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-transit-session-count", rest_name="mpls-rsvp-session-transit-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_egress_session_count(self):
    """
    Getter method for mpls_rsvp_session_egress_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_egress_session_count (uint32)

    YANG Description: Number of RSVP egress sessions
    """
    return self.__mpls_rsvp_session_egress_session_count
      
  def _set_mpls_rsvp_session_egress_session_count(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_egress_session_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_egress_session_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_egress_session_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_egress_session_count() directly.

    YANG Description: Number of RSVP egress sessions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-egress-session-count", rest_name="mpls-rsvp-session-egress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_egress_session_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-egress-session-count", rest_name="mpls-rsvp-session-egress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_egress_session_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_egress_session_count(self):
    self.__mpls_rsvp_session_egress_session_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-egress-session-count", rest_name="mpls-rsvp-session-egress-session-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_dest_ip_addr(self):
    """
    Getter method for mpls_rsvp_session_dest_ip_addr, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_dest_ip_addr (inet:ipv4-address)

    YANG Description: MPLS RSVP session destination IP address
    """
    return self.__mpls_rsvp_session_dest_ip_addr
      
  def _set_mpls_rsvp_session_dest_ip_addr(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_dest_ip_addr, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_dest_ip_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_dest_ip_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_dest_ip_addr() directly.

    YANG Description: MPLS RSVP session destination IP address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-dest-ip-addr", rest_name="mpls-rsvp-session-dest-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_dest_ip_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-dest-ip-addr", rest_name="mpls-rsvp-session-dest-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__mpls_rsvp_session_dest_ip_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_dest_ip_addr(self):
    self.__mpls_rsvp_session_dest_ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-dest-ip-addr", rest_name="mpls-rsvp-session-dest-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_mpls_rsvp_session_source_ip_addr(self):
    """
    Getter method for mpls_rsvp_session_source_ip_addr, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_source_ip_addr (inet:ipv4-address)

    YANG Description: MPLS RSVP session source IP address
    """
    return self.__mpls_rsvp_session_source_ip_addr
      
  def _set_mpls_rsvp_session_source_ip_addr(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_source_ip_addr, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_source_ip_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_source_ip_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_source_ip_addr() directly.

    YANG Description: MPLS RSVP session source IP address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-source-ip-addr", rest_name="mpls-rsvp-session-source-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_source_ip_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-source-ip-addr", rest_name="mpls-rsvp-session-source-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__mpls_rsvp_session_source_ip_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_source_ip_addr(self):
    self.__mpls_rsvp_session_source_ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="mpls-rsvp-session-source-ip-addr", rest_name="mpls-rsvp-session-source-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_mpls_rsvp_session_type(self):
    """
    Getter method for mpls_rsvp_session_type, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_type (string)

    YANG Description: RSVP session type
    """
    return self.__mpls_rsvp_session_type
      
  def _set_mpls_rsvp_session_type(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_type, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_type() directly.

    YANG Description: RSVP session type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-type", rest_name="mpls-rsvp-session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-type", rest_name="mpls-rsvp-session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_type(self):
    self.__mpls_rsvp_session_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-type", rest_name="mpls-rsvp-session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_status(self):
    """
    Getter method for mpls_rsvp_session_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_status (string)

    YANG Description: RSVP session status
    """
    return self.__mpls_rsvp_session_status
      
  def _set_mpls_rsvp_session_status(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_status() directly.

    YANG Description: RSVP session status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-status", rest_name="mpls-rsvp-session-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-status", rest_name="mpls-rsvp-session-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_status(self):
    self.__mpls_rsvp_session_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-status", rest_name="mpls-rsvp-session-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_style(self):
    """
    Getter method for mpls_rsvp_session_style, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_style (string)

    YANG Description: RSVP session style
    """
    return self.__mpls_rsvp_session_style
      
  def _set_mpls_rsvp_session_style(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_style, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_style (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_style is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_style() directly.

    YANG Description: RSVP session style
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-style", rest_name="mpls-rsvp-session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_style must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-style", rest_name="mpls-rsvp-session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_style = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_style(self):
    self.__mpls_rsvp_session_style = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-style", rest_name="mpls-rsvp-session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_in_label(self):
    """
    Getter method for mpls_rsvp_session_in_label, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_in_label (uint32)

    YANG Description: RSVP session in-label
    """
    return self.__mpls_rsvp_session_in_label
      
  def _set_mpls_rsvp_session_in_label(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_in_label, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_in_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_in_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_in_label() directly.

    YANG Description: RSVP session in-label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-in-label", rest_name="mpls-rsvp-session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_in_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-in-label", rest_name="mpls-rsvp-session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_in_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_in_label(self):
    self.__mpls_rsvp_session_in_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-in-label", rest_name="mpls-rsvp-session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_out_label(self):
    """
    Getter method for mpls_rsvp_session_out_label, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_out_label (uint32)

    YANG Description: RSVP session out-label
    """
    return self.__mpls_rsvp_session_out_label
      
  def _set_mpls_rsvp_session_out_label(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_out_label, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_out_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_out_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_out_label() directly.

    YANG Description: RSVP session out-label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-out-label", rest_name="mpls-rsvp-session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_out_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-out-label", rest_name="mpls-rsvp-session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_out_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_out_label(self):
    self.__mpls_rsvp_session_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-out-label", rest_name="mpls-rsvp-session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_out_interface(self):
    """
    Getter method for mpls_rsvp_session_out_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_out_interface (string)

    YANG Description: RSVP session out-interface
    """
    return self.__mpls_rsvp_session_out_interface
      
  def _set_mpls_rsvp_session_out_interface(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_out_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_out_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_out_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_out_interface() directly.

    YANG Description: RSVP session out-interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-out-interface", rest_name="mpls-rsvp-session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_out_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-out-interface", rest_name="mpls-rsvp-session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_out_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_out_interface(self):
    self.__mpls_rsvp_session_out_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-out-interface", rest_name="mpls-rsvp-session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_name(self):
    """
    Getter method for mpls_rsvp_session_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_name (string)

    YANG Description: RSVP session name
    """
    return self.__mpls_rsvp_session_name
      
  def _set_mpls_rsvp_session_name(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail/output/mpls_rsvp_session_detail/show_mpls_session_brief/mpls_rsvp_session_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_name() directly.

    YANG Description: RSVP session name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-name", rest_name="mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-name", rest_name="mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_name(self):
    self.__mpls_rsvp_session_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-name", rest_name="mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

  mpls_rsvp_session_total_session_count = __builtin__.property(_get_mpls_rsvp_session_total_session_count, _set_mpls_rsvp_session_total_session_count)
  mpls_rsvp_session_ingress_session_count = __builtin__.property(_get_mpls_rsvp_session_ingress_session_count, _set_mpls_rsvp_session_ingress_session_count)
  mpls_rsvp_session_transit_session_count = __builtin__.property(_get_mpls_rsvp_session_transit_session_count, _set_mpls_rsvp_session_transit_session_count)
  mpls_rsvp_session_egress_session_count = __builtin__.property(_get_mpls_rsvp_session_egress_session_count, _set_mpls_rsvp_session_egress_session_count)
  mpls_rsvp_session_dest_ip_addr = __builtin__.property(_get_mpls_rsvp_session_dest_ip_addr, _set_mpls_rsvp_session_dest_ip_addr)
  mpls_rsvp_session_source_ip_addr = __builtin__.property(_get_mpls_rsvp_session_source_ip_addr, _set_mpls_rsvp_session_source_ip_addr)
  mpls_rsvp_session_type = __builtin__.property(_get_mpls_rsvp_session_type, _set_mpls_rsvp_session_type)
  mpls_rsvp_session_status = __builtin__.property(_get_mpls_rsvp_session_status, _set_mpls_rsvp_session_status)
  mpls_rsvp_session_style = __builtin__.property(_get_mpls_rsvp_session_style, _set_mpls_rsvp_session_style)
  mpls_rsvp_session_in_label = __builtin__.property(_get_mpls_rsvp_session_in_label, _set_mpls_rsvp_session_in_label)
  mpls_rsvp_session_out_label = __builtin__.property(_get_mpls_rsvp_session_out_label, _set_mpls_rsvp_session_out_label)
  mpls_rsvp_session_out_interface = __builtin__.property(_get_mpls_rsvp_session_out_interface, _set_mpls_rsvp_session_out_interface)
  mpls_rsvp_session_name = __builtin__.property(_get_mpls_rsvp_session_name, _set_mpls_rsvp_session_name)


  _pyangbind_elements = {'mpls_rsvp_session_total_session_count': mpls_rsvp_session_total_session_count, 'mpls_rsvp_session_ingress_session_count': mpls_rsvp_session_ingress_session_count, 'mpls_rsvp_session_transit_session_count': mpls_rsvp_session_transit_session_count, 'mpls_rsvp_session_egress_session_count': mpls_rsvp_session_egress_session_count, 'mpls_rsvp_session_dest_ip_addr': mpls_rsvp_session_dest_ip_addr, 'mpls_rsvp_session_source_ip_addr': mpls_rsvp_session_source_ip_addr, 'mpls_rsvp_session_type': mpls_rsvp_session_type, 'mpls_rsvp_session_status': mpls_rsvp_session_status, 'mpls_rsvp_session_style': mpls_rsvp_session_style, 'mpls_rsvp_session_in_label': mpls_rsvp_session_in_label, 'mpls_rsvp_session_out_label': mpls_rsvp_session_out_label, 'mpls_rsvp_session_out_interface': mpls_rsvp_session_out_interface, 'mpls_rsvp_session_name': mpls_rsvp_session_name, }


