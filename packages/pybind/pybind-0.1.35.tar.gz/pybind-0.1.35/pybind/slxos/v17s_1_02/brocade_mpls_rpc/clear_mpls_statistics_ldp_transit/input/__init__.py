
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/clear-mpls-statistics-ldp-transit/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__clear_statistics_ldp_transit_fec_prefix','__clear_statistics_ldp_transit_fec_prefix_address','__clear_statistics_ldp_transit_fec_prefix_mask',)

  _yang_name = 'input'
  _rest_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__clear_statistics_ldp_transit_fec_prefix_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-mask", rest_name="clear-statistics-ldp-transit-fec-prefix-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-subnet-mask', is_config=True)
    self.__clear_statistics_ldp_transit_fec_prefix_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-address", rest_name="clear-statistics-ldp-transit-fec-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    self.__clear_statistics_ldp_transit_fec_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix", rest_name="clear-statistics-ldp-transit-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'clear-mpls-statistics-ldp-transit', u'input']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'clear-mpls-statistics-ldp-transit', u'input']

  def _get_clear_statistics_ldp_transit_fec_prefix(self):
    """
    Getter method for clear_statistics_ldp_transit_fec_prefix, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit/input/clear_statistics_ldp_transit_fec_prefix (mpls-ipv4-prefix)

    YANG Description: Transit fec prefix
    """
    return self.__clear_statistics_ldp_transit_fec_prefix
      
  def _set_clear_statistics_ldp_transit_fec_prefix(self, v, load=False):
    """
    Setter method for clear_statistics_ldp_transit_fec_prefix, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit/input/clear_statistics_ldp_transit_fec_prefix (mpls-ipv4-prefix)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_statistics_ldp_transit_fec_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_statistics_ldp_transit_fec_prefix() directly.

    YANG Description: Transit fec prefix
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix", rest_name="clear-statistics-ldp-transit-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_statistics_ldp_transit_fec_prefix must be of a type compatible with mpls-ipv4-prefix""",
          'defined-type': "brocade-mpls:mpls-ipv4-prefix",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix", rest_name="clear-statistics-ldp-transit-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)""",
        })

    self.__clear_statistics_ldp_transit_fec_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_statistics_ldp_transit_fec_prefix(self):
    self.__clear_statistics_ldp_transit_fec_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix", rest_name="clear-statistics-ldp-transit-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-prefix', is_config=True)


  def _get_clear_statistics_ldp_transit_fec_prefix_address(self):
    """
    Getter method for clear_statistics_ldp_transit_fec_prefix_address, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit/input/clear_statistics_ldp_transit_fec_prefix_address (mpls-ipv4-address)

    YANG Description: Fec prefix address
    """
    return self.__clear_statistics_ldp_transit_fec_prefix_address
      
  def _set_clear_statistics_ldp_transit_fec_prefix_address(self, v, load=False):
    """
    Setter method for clear_statistics_ldp_transit_fec_prefix_address, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit/input/clear_statistics_ldp_transit_fec_prefix_address (mpls-ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_statistics_ldp_transit_fec_prefix_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_statistics_ldp_transit_fec_prefix_address() directly.

    YANG Description: Fec prefix address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-address", rest_name="clear-statistics-ldp-transit-fec-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_statistics_ldp_transit_fec_prefix_address must be of a type compatible with mpls-ipv4-address""",
          'defined-type': "brocade-mpls:mpls-ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-address", rest_name="clear-statistics-ldp-transit-fec-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)""",
        })

    self.__clear_statistics_ldp_transit_fec_prefix_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_statistics_ldp_transit_fec_prefix_address(self):
    self.__clear_statistics_ldp_transit_fec_prefix_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-address", rest_name="clear-statistics-ldp-transit-fec-prefix-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)


  def _get_clear_statistics_ldp_transit_fec_prefix_mask(self):
    """
    Getter method for clear_statistics_ldp_transit_fec_prefix_mask, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit/input/clear_statistics_ldp_transit_fec_prefix_mask (mpls-ipv4-subnet-mask)

    YANG Description: Fec prefix address mask
    """
    return self.__clear_statistics_ldp_transit_fec_prefix_mask
      
  def _set_clear_statistics_ldp_transit_fec_prefix_mask(self, v, load=False):
    """
    Setter method for clear_statistics_ldp_transit_fec_prefix_mask, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit/input/clear_statistics_ldp_transit_fec_prefix_mask (mpls-ipv4-subnet-mask)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_statistics_ldp_transit_fec_prefix_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_statistics_ldp_transit_fec_prefix_mask() directly.

    YANG Description: Fec prefix address mask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-mask", rest_name="clear-statistics-ldp-transit-fec-prefix-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-subnet-mask', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_statistics_ldp_transit_fec_prefix_mask must be of a type compatible with mpls-ipv4-subnet-mask""",
          'defined-type': "brocade-mpls:mpls-ipv4-subnet-mask",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-mask", rest_name="clear-statistics-ldp-transit-fec-prefix-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-subnet-mask', is_config=True)""",
        })

    self.__clear_statistics_ldp_transit_fec_prefix_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_statistics_ldp_transit_fec_prefix_mask(self):
    self.__clear_statistics_ldp_transit_fec_prefix_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="clear-statistics-ldp-transit-fec-prefix-mask", rest_name="clear-statistics-ldp-transit-fec-prefix-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-subnet-mask', is_config=True)

  clear_statistics_ldp_transit_fec_prefix = __builtin__.property(_get_clear_statistics_ldp_transit_fec_prefix, _set_clear_statistics_ldp_transit_fec_prefix)
  clear_statistics_ldp_transit_fec_prefix_address = __builtin__.property(_get_clear_statistics_ldp_transit_fec_prefix_address, _set_clear_statistics_ldp_transit_fec_prefix_address)
  clear_statistics_ldp_transit_fec_prefix_mask = __builtin__.property(_get_clear_statistics_ldp_transit_fec_prefix_mask, _set_clear_statistics_ldp_transit_fec_prefix_mask)


  _pyangbind_elements = {'clear_statistics_ldp_transit_fec_prefix': clear_statistics_ldp_transit_fec_prefix, 'clear_statistics_ldp_transit_fec_prefix_address': clear_statistics_ldp_transit_fec_prefix_address, 'clear_statistics_ldp_transit_fec_prefix_mask': clear_statistics_ldp_transit_fec_prefix_mask, }


