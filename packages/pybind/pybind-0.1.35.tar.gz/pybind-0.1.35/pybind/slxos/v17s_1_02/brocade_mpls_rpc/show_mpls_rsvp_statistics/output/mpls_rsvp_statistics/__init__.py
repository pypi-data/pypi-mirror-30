
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import g_mpls_prot_statistics_pkt_types
import g_mpls_prot_statistics_errors
import g_mpls_prot_statistics_pkt_processing_errors
class mpls_rsvp_statistics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-rsvp-statistics/output/mpls-rsvp-statistics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__g_mpls_prot_statistics_pkt_types','__g_mpls_prot_statistics_errors','__g_mpls_prot_statistics_pkt_processing_errors',)

  _yang_name = 'mpls-rsvp-statistics'
  _rest_name = 'mpls-rsvp-statistics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__g_mpls_prot_statistics_pkt_processing_errors = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_processing_errors.g_mpls_prot_statistics_pkt_processing_errors, yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__g_mpls_prot_statistics_pkt_types = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__g_mpls_prot_statistics_errors = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-rsvp-statistics', u'output', u'mpls-rsvp-statistics']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-rsvp-statistics', u'output', u'mpls-rsvp-statistics']

  def _get_g_mpls_prot_statistics_pkt_types(self):
    """
    Getter method for g_mpls_prot_statistics_pkt_types, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics/output/mpls_rsvp_statistics/g_mpls_prot_statistics_pkt_types (list)

    YANG Description: Statistics for MPLS PROT packet types
    """
    return self.__g_mpls_prot_statistics_pkt_types
      
  def _set_g_mpls_prot_statistics_pkt_types(self, v, load=False):
    """
    Setter method for g_mpls_prot_statistics_pkt_types, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics/output/mpls_rsvp_statistics/g_mpls_prot_statistics_pkt_types (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_g_mpls_prot_statistics_pkt_types is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_g_mpls_prot_statistics_pkt_types() directly.

    YANG Description: Statistics for MPLS PROT packet types
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """g_mpls_prot_statistics_pkt_types must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__g_mpls_prot_statistics_pkt_types = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_g_mpls_prot_statistics_pkt_types(self):
    self.__g_mpls_prot_statistics_pkt_types = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_g_mpls_prot_statistics_errors(self):
    """
    Getter method for g_mpls_prot_statistics_errors, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics/output/mpls_rsvp_statistics/g_mpls_prot_statistics_errors (list)

    YANG Description: Error statistics for MPLS PROT control packets
    """
    return self.__g_mpls_prot_statistics_errors
      
  def _set_g_mpls_prot_statistics_errors(self, v, load=False):
    """
    Setter method for g_mpls_prot_statistics_errors, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics/output/mpls_rsvp_statistics/g_mpls_prot_statistics_errors (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_g_mpls_prot_statistics_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_g_mpls_prot_statistics_errors() directly.

    YANG Description: Error statistics for MPLS PROT control packets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """g_mpls_prot_statistics_errors must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__g_mpls_prot_statistics_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_g_mpls_prot_statistics_errors(self):
    self.__g_mpls_prot_statistics_errors = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_g_mpls_prot_statistics_pkt_processing_errors(self):
    """
    Getter method for g_mpls_prot_statistics_pkt_processing_errors, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics/output/mpls_rsvp_statistics/g_mpls_prot_statistics_pkt_processing_errors (list)

    YANG Description: Packet processing error statistics for MPLS PROT control packets
    """
    return self.__g_mpls_prot_statistics_pkt_processing_errors
      
  def _set_g_mpls_prot_statistics_pkt_processing_errors(self, v, load=False):
    """
    Setter method for g_mpls_prot_statistics_pkt_processing_errors, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics/output/mpls_rsvp_statistics/g_mpls_prot_statistics_pkt_processing_errors (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_g_mpls_prot_statistics_pkt_processing_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_g_mpls_prot_statistics_pkt_processing_errors() directly.

    YANG Description: Packet processing error statistics for MPLS PROT control packets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,g_mpls_prot_statistics_pkt_processing_errors.g_mpls_prot_statistics_pkt_processing_errors, yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """g_mpls_prot_statistics_pkt_processing_errors must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_processing_errors.g_mpls_prot_statistics_pkt_processing_errors, yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__g_mpls_prot_statistics_pkt_processing_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_g_mpls_prot_statistics_pkt_processing_errors(self):
    self.__g_mpls_prot_statistics_pkt_processing_errors = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_processing_errors.g_mpls_prot_statistics_pkt_processing_errors, yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_processing_errors", rest_name="g_mpls_prot_statistics_pkt_processing_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)

  g_mpls_prot_statistics_pkt_types = __builtin__.property(_get_g_mpls_prot_statistics_pkt_types, _set_g_mpls_prot_statistics_pkt_types)
  g_mpls_prot_statistics_errors = __builtin__.property(_get_g_mpls_prot_statistics_errors, _set_g_mpls_prot_statistics_errors)
  g_mpls_prot_statistics_pkt_processing_errors = __builtin__.property(_get_g_mpls_prot_statistics_pkt_processing_errors, _set_g_mpls_prot_statistics_pkt_processing_errors)


  _pyangbind_elements = {'g_mpls_prot_statistics_pkt_types': g_mpls_prot_statistics_pkt_types, 'g_mpls_prot_statistics_errors': g_mpls_prot_statistics_errors, 'g_mpls_prot_statistics_pkt_processing_errors': g_mpls_prot_statistics_pkt_processing_errors, }


