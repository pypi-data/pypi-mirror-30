
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import lsp_sec_path_config_admin_groups
class sec_path(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-lsp-name-extensive/output/lsp/show-mpls-lsp-extensive-info/show-mpls-lsp-sec-path-info/sec-path. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__lsp_sec_path_path_name','__lsp_sec_path_state','__lsp_sec_path_state_up','__lsp_sec_path_active','__lsp_sec_path_is_current_secondary','__lsp_sec_path_is_selected_secondary','__lsp_sec_path_config_reoptimize_timer_configured','__lsp_sec_path_config_reoptimize_timer','__lsp_sec_path_config_tspec_mtu_configured','__lsp_sec_path_sec_path_config_tspec_mtu','__lsp_sec_path_config_cos_configured','__lsp_sec_path_config_cos','__lsp_sec_path_config_mtu_configured','__lsp_sec_path_config_mtu','__lsp_sec_path_config_tie_breaking_configured','__lsp_sec_path_config_tie_break_random','__lsp_sec_path_config_tie_break_least_fill','__lsp_sec_path_config_tie_break_most_fill','__lsp_sec_path_config_cspf_disabled','__lsp_sec_path_config_hot_standby','__lsp_sec_path_config_pinned','__lsp_sec_path_config_persistent','__lsp_sec_path_config_soft_prempt','__lsp_sec_path_config_priority_configured','__lsp_sec_path_config_setup_prority','__lsp_sec_path_config_holding_prority','__lsp_sec_path_config_hop_limit_configured','__lsp_sec_path_config_hop_limit','__lsp_sec_path_config_traffic_eng_rate_configured','__lsp_sec_path_config_traffic_eng_mean_rate','__lsp_sec_path_config_traffic_eng_max_rate','__lsp_sec_path_config_traffic_eng_max_burst','__lsp_sec_path_config_admin_group_configured','__lsp_sec_path_config_admin_groups',)

  _yang_name = 'sec-path'
  _rest_name = 'sec-path'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__lsp_sec_path_config_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-mtu-configured", rest_name="lsp-sec-path-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hot-standby", rest_name="lsp-sec-path-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_reoptimize_timer_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer-configured", rest_name="lsp-sec-path-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_admin_groups = YANGDynClass(base=lsp_sec_path_config_admin_groups.lsp_sec_path_config_admin_groups, is_container='container', presence=False, yang_name="lsp-sec-path-config-admin-groups", rest_name="lsp-sec-path-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__lsp_sec_path_config_cspf_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cspf-disabled", rest_name="lsp-sec-path-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer", rest_name="lsp-sec-path-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_sec_path_config_soft_prempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-soft-prempt", rest_name="lsp-sec-path-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_tie_break_random = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-random", rest_name="lsp-sec-path-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_traffic_eng_mean_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-mean-rate", rest_name="lsp-sec-path-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_sec_path_is_current_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-current-secondary", rest_name="lsp-sec-path-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_persistent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-persistent", rest_name="lsp-sec-path-config-persistent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-hop-limit", rest_name="lsp-sec-path-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_sec_path_is_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-selected-secondary", rest_name="lsp-sec-path-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_traffic_eng_max_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-rate", rest_name="lsp-sec-path-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_sec_path_config_holding_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-holding-prority", rest_name="lsp-sec-path-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_sec_path_state_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-state-up", rest_name="lsp-sec-path-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_tie_breaking_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-breaking-configured", rest_name="lsp-sec-path-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_sec_path_config_tspec_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-sec-path-config-tspec-mtu", rest_name="lsp-sec-path-sec-path-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_sec_path_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-state", rest_name="lsp-sec-path-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_sec_path_config_setup_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-setup-prority", rest_name="lsp-sec-path-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_sec_path_config_traffic_eng_max_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-burst", rest_name="lsp-sec-path-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_sec_path_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-active", rest_name="lsp-sec-path-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_tie_break_least_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-least-fill", rest_name="lsp-sec-path-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hop-limit-configured", rest_name="lsp-sec-path-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_tspec_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tspec-mtu-configured", rest_name="lsp-sec-path-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_priority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-priority-configured", rest_name="lsp-sec-path-config-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_traffic_eng_rate_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-rate-configured", rest_name="lsp-sec-path-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-admin-group-configured", rest_name="lsp-sec-path-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-mtu", rest_name="lsp-sec-path-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_sec_path_config_pinned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-pinned", rest_name="lsp-sec-path-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_cos_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cos-configured", rest_name="lsp-sec-path-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_tie_break_most_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-most-fill", rest_name="lsp-sec-path-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_sec_path_config_cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-cos", rest_name="lsp-sec-path-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_sec_path_path_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-sec-path-path-name", rest_name="lsp-sec-path-path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-lsp-name-extensive', u'output', u'lsp', u'show-mpls-lsp-extensive-info', u'show-mpls-lsp-sec-path-info', u'sec-path']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-lsp-name-extensive', u'output', u'lsp', u'sec-path']

  def _get_lsp_sec_path_path_name(self):
    """
    Getter method for lsp_sec_path_path_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_path_name (string)

    YANG Description: Secondary path name
    """
    return self.__lsp_sec_path_path_name
      
  def _set_lsp_sec_path_path_name(self, v, load=False):
    """
    Setter method for lsp_sec_path_path_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_path_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_path_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_path_name() directly.

    YANG Description: Secondary path name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lsp-sec-path-path-name", rest_name="lsp-sec-path-path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_path_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-sec-path-path-name", rest_name="lsp-sec-path-path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__lsp_sec_path_path_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_path_name(self):
    self.__lsp_sec_path_path_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-sec-path-path-name", rest_name="lsp-sec-path-path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_lsp_sec_path_state(self):
    """
    Getter method for lsp_sec_path_state, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_state (uint8)

    YANG Description: Secondary path state
    """
    return self.__lsp_sec_path_state
      
  def _set_lsp_sec_path_state(self, v, load=False):
    """
    Setter method for lsp_sec_path_state, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_state (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_state() directly.

    YANG Description: Secondary path state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-state", rest_name="lsp-sec-path-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_state must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-state", rest_name="lsp-sec-path-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_sec_path_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_state(self):
    self.__lsp_sec_path_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-state", rest_name="lsp-sec-path-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_sec_path_state_up(self):
    """
    Getter method for lsp_sec_path_state_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_state_up (boolean)

    YANG Description: Secondary path state
    """
    return self.__lsp_sec_path_state_up
      
  def _set_lsp_sec_path_state_up(self, v, load=False):
    """
    Setter method for lsp_sec_path_state_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_state_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_state_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_state_up() directly.

    YANG Description: Secondary path state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-state-up", rest_name="lsp-sec-path-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_state_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-state-up", rest_name="lsp-sec-path-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_state_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_state_up(self):
    self.__lsp_sec_path_state_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-state-up", rest_name="lsp-sec-path-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_active(self):
    """
    Getter method for lsp_sec_path_active, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_active (boolean)

    YANG Description: Secondary path state atcive
    """
    return self.__lsp_sec_path_active
      
  def _set_lsp_sec_path_active(self, v, load=False):
    """
    Setter method for lsp_sec_path_active, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_active() directly.

    YANG Description: Secondary path state atcive
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-active", rest_name="lsp-sec-path-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-active", rest_name="lsp-sec-path-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_active(self):
    self.__lsp_sec_path_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-active", rest_name="lsp-sec-path-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_is_current_secondary(self):
    """
    Getter method for lsp_sec_path_is_current_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_is_current_secondary (boolean)

    YANG Description: Secondary path current secondary
    """
    return self.__lsp_sec_path_is_current_secondary
      
  def _set_lsp_sec_path_is_current_secondary(self, v, load=False):
    """
    Setter method for lsp_sec_path_is_current_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_is_current_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_is_current_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_is_current_secondary() directly.

    YANG Description: Secondary path current secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-current-secondary", rest_name="lsp-sec-path-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_is_current_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-current-secondary", rest_name="lsp-sec-path-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_is_current_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_is_current_secondary(self):
    self.__lsp_sec_path_is_current_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-current-secondary", rest_name="lsp-sec-path-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_is_selected_secondary(self):
    """
    Getter method for lsp_sec_path_is_selected_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_is_selected_secondary (boolean)

    YANG Description: Secondary path decondary secondary
    """
    return self.__lsp_sec_path_is_selected_secondary
      
  def _set_lsp_sec_path_is_selected_secondary(self, v, load=False):
    """
    Setter method for lsp_sec_path_is_selected_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_is_selected_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_is_selected_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_is_selected_secondary() directly.

    YANG Description: Secondary path decondary secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-selected-secondary", rest_name="lsp-sec-path-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_is_selected_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-selected-secondary", rest_name="lsp-sec-path-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_is_selected_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_is_selected_secondary(self):
    self.__lsp_sec_path_is_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-is-selected-secondary", rest_name="lsp-sec-path-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_reoptimize_timer_configured(self):
    """
    Getter method for lsp_sec_path_config_reoptimize_timer_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_reoptimize_timer_configured (boolean)

    YANG Description: LSP reoptimization timer configured
    """
    return self.__lsp_sec_path_config_reoptimize_timer_configured
      
  def _set_lsp_sec_path_config_reoptimize_timer_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_reoptimize_timer_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_reoptimize_timer_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_reoptimize_timer_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_reoptimize_timer_configured() directly.

    YANG Description: LSP reoptimization timer configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer-configured", rest_name="lsp-sec-path-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_reoptimize_timer_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer-configured", rest_name="lsp-sec-path-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_reoptimize_timer_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_reoptimize_timer_configured(self):
    self.__lsp_sec_path_config_reoptimize_timer_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer-configured", rest_name="lsp-sec-path-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_reoptimize_timer(self):
    """
    Getter method for lsp_sec_path_config_reoptimize_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_reoptimize_timer (uint32)

    YANG Description: LSP reoptimization timer value
    """
    return self.__lsp_sec_path_config_reoptimize_timer
      
  def _set_lsp_sec_path_config_reoptimize_timer(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_reoptimize_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_reoptimize_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_reoptimize_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_reoptimize_timer() directly.

    YANG Description: LSP reoptimization timer value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer", rest_name="lsp-sec-path-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_reoptimize_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer", rest_name="lsp-sec-path-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_sec_path_config_reoptimize_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_reoptimize_timer(self):
    self.__lsp_sec_path_config_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-reoptimize-timer", rest_name="lsp-sec-path-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_sec_path_config_tspec_mtu_configured(self):
    """
    Getter method for lsp_sec_path_config_tspec_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tspec_mtu_configured (boolean)

    YANG Description: LSP traffic spec mtu configured
    """
    return self.__lsp_sec_path_config_tspec_mtu_configured
      
  def _set_lsp_sec_path_config_tspec_mtu_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_tspec_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tspec_mtu_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_tspec_mtu_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_tspec_mtu_configured() directly.

    YANG Description: LSP traffic spec mtu configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tspec-mtu-configured", rest_name="lsp-sec-path-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_tspec_mtu_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tspec-mtu-configured", rest_name="lsp-sec-path-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_tspec_mtu_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_tspec_mtu_configured(self):
    self.__lsp_sec_path_config_tspec_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tspec-mtu-configured", rest_name="lsp-sec-path-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_sec_path_config_tspec_mtu(self):
    """
    Getter method for lsp_sec_path_sec_path_config_tspec_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_sec_path_config_tspec_mtu (uint32)

    YANG Description: LSP traffic spec mtu value
    """
    return self.__lsp_sec_path_sec_path_config_tspec_mtu
      
  def _set_lsp_sec_path_sec_path_config_tspec_mtu(self, v, load=False):
    """
    Setter method for lsp_sec_path_sec_path_config_tspec_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_sec_path_config_tspec_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_sec_path_config_tspec_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_sec_path_config_tspec_mtu() directly.

    YANG Description: LSP traffic spec mtu value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-sec-path-config-tspec-mtu", rest_name="lsp-sec-path-sec-path-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_sec_path_config_tspec_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-sec-path-config-tspec-mtu", rest_name="lsp-sec-path-sec-path-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_sec_path_sec_path_config_tspec_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_sec_path_config_tspec_mtu(self):
    self.__lsp_sec_path_sec_path_config_tspec_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-sec-path-config-tspec-mtu", rest_name="lsp-sec-path-sec-path-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_sec_path_config_cos_configured(self):
    """
    Getter method for lsp_sec_path_config_cos_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_cos_configured (boolean)

    YANG Description: LSP cos value configured
    """
    return self.__lsp_sec_path_config_cos_configured
      
  def _set_lsp_sec_path_config_cos_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_cos_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_cos_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_cos_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_cos_configured() directly.

    YANG Description: LSP cos value configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cos-configured", rest_name="lsp-sec-path-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_cos_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cos-configured", rest_name="lsp-sec-path-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_cos_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_cos_configured(self):
    self.__lsp_sec_path_config_cos_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cos-configured", rest_name="lsp-sec-path-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_cos(self):
    """
    Getter method for lsp_sec_path_config_cos, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_cos (uint8)

    YANG Description: LSP cos value
    """
    return self.__lsp_sec_path_config_cos
      
  def _set_lsp_sec_path_config_cos(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_cos, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_cos (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_cos() directly.

    YANG Description: LSP cos value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-cos", rest_name="lsp-sec-path-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_cos must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-cos", rest_name="lsp-sec-path-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_sec_path_config_cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_cos(self):
    self.__lsp_sec_path_config_cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-cos", rest_name="lsp-sec-path-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_sec_path_config_mtu_configured(self):
    """
    Getter method for lsp_sec_path_config_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_mtu_configured (boolean)

    YANG Description: LSP MTU value configured
    """
    return self.__lsp_sec_path_config_mtu_configured
      
  def _set_lsp_sec_path_config_mtu_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_mtu_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_mtu_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_mtu_configured() directly.

    YANG Description: LSP MTU value configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-mtu-configured", rest_name="lsp-sec-path-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_mtu_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-mtu-configured", rest_name="lsp-sec-path-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_mtu_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_mtu_configured(self):
    self.__lsp_sec_path_config_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-mtu-configured", rest_name="lsp-sec-path-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_mtu(self):
    """
    Getter method for lsp_sec_path_config_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_mtu (uint32)

    YANG Description: LSP MTU value
    """
    return self.__lsp_sec_path_config_mtu
      
  def _set_lsp_sec_path_config_mtu(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_mtu() directly.

    YANG Description: LSP MTU value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-mtu", rest_name="lsp-sec-path-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-mtu", rest_name="lsp-sec-path-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_sec_path_config_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_mtu(self):
    self.__lsp_sec_path_config_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-mtu", rest_name="lsp-sec-path-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_sec_path_config_tie_breaking_configured(self):
    """
    Getter method for lsp_sec_path_config_tie_breaking_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_breaking_configured (boolean)

    YANG Description: LSP CSPF tie-breaking configured
    """
    return self.__lsp_sec_path_config_tie_breaking_configured
      
  def _set_lsp_sec_path_config_tie_breaking_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_tie_breaking_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_breaking_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_tie_breaking_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_tie_breaking_configured() directly.

    YANG Description: LSP CSPF tie-breaking configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-breaking-configured", rest_name="lsp-sec-path-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_tie_breaking_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-breaking-configured", rest_name="lsp-sec-path-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_tie_breaking_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_tie_breaking_configured(self):
    self.__lsp_sec_path_config_tie_breaking_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-breaking-configured", rest_name="lsp-sec-path-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_tie_break_random(self):
    """
    Getter method for lsp_sec_path_config_tie_break_random, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_break_random (boolean)

    YANG Description: LSP cspf tie braking is random
    """
    return self.__lsp_sec_path_config_tie_break_random
      
  def _set_lsp_sec_path_config_tie_break_random(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_tie_break_random, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_break_random (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_tie_break_random is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_tie_break_random() directly.

    YANG Description: LSP cspf tie braking is random
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-random", rest_name="lsp-sec-path-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_tie_break_random must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-random", rest_name="lsp-sec-path-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_tie_break_random = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_tie_break_random(self):
    self.__lsp_sec_path_config_tie_break_random = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-random", rest_name="lsp-sec-path-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_tie_break_least_fill(self):
    """
    Getter method for lsp_sec_path_config_tie_break_least_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_break_least_fill (boolean)

    YANG Description: LSP cspf tie braking is least fill
    """
    return self.__lsp_sec_path_config_tie_break_least_fill
      
  def _set_lsp_sec_path_config_tie_break_least_fill(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_tie_break_least_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_break_least_fill (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_tie_break_least_fill is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_tie_break_least_fill() directly.

    YANG Description: LSP cspf tie braking is least fill
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-least-fill", rest_name="lsp-sec-path-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_tie_break_least_fill must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-least-fill", rest_name="lsp-sec-path-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_tie_break_least_fill = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_tie_break_least_fill(self):
    self.__lsp_sec_path_config_tie_break_least_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-least-fill", rest_name="lsp-sec-path-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_tie_break_most_fill(self):
    """
    Getter method for lsp_sec_path_config_tie_break_most_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_break_most_fill (boolean)

    YANG Description: LSP cspf tie braking is most-fill
    """
    return self.__lsp_sec_path_config_tie_break_most_fill
      
  def _set_lsp_sec_path_config_tie_break_most_fill(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_tie_break_most_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_tie_break_most_fill (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_tie_break_most_fill is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_tie_break_most_fill() directly.

    YANG Description: LSP cspf tie braking is most-fill
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-most-fill", rest_name="lsp-sec-path-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_tie_break_most_fill must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-most-fill", rest_name="lsp-sec-path-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_tie_break_most_fill = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_tie_break_most_fill(self):
    self.__lsp_sec_path_config_tie_break_most_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-tie-break-most-fill", rest_name="lsp-sec-path-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_cspf_disabled(self):
    """
    Getter method for lsp_sec_path_config_cspf_disabled, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_cspf_disabled (boolean)

    YANG Description: LSP cspf disabled
    """
    return self.__lsp_sec_path_config_cspf_disabled
      
  def _set_lsp_sec_path_config_cspf_disabled(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_cspf_disabled, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_cspf_disabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_cspf_disabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_cspf_disabled() directly.

    YANG Description: LSP cspf disabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cspf-disabled", rest_name="lsp-sec-path-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_cspf_disabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cspf-disabled", rest_name="lsp-sec-path-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_cspf_disabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_cspf_disabled(self):
    self.__lsp_sec_path_config_cspf_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-cspf-disabled", rest_name="lsp-sec-path-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_hot_standby(self):
    """
    Getter method for lsp_sec_path_config_hot_standby, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_hot_standby (boolean)

    YANG Description: LSP is hot standby
    """
    return self.__lsp_sec_path_config_hot_standby
      
  def _set_lsp_sec_path_config_hot_standby(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_hot_standby, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_hot_standby (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_hot_standby is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_hot_standby() directly.

    YANG Description: LSP is hot standby
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hot-standby", rest_name="lsp-sec-path-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_hot_standby must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hot-standby", rest_name="lsp-sec-path-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_hot_standby = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_hot_standby(self):
    self.__lsp_sec_path_config_hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hot-standby", rest_name="lsp-sec-path-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_pinned(self):
    """
    Getter method for lsp_sec_path_config_pinned, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_pinned (boolean)

    YANG Description: LSP is pinned
    """
    return self.__lsp_sec_path_config_pinned
      
  def _set_lsp_sec_path_config_pinned(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_pinned, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_pinned (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_pinned is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_pinned() directly.

    YANG Description: LSP is pinned
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-pinned", rest_name="lsp-sec-path-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_pinned must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-pinned", rest_name="lsp-sec-path-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_pinned = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_pinned(self):
    self.__lsp_sec_path_config_pinned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-pinned", rest_name="lsp-sec-path-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_persistent(self):
    """
    Getter method for lsp_sec_path_config_persistent, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_persistent (boolean)

    YANG Description: LSP is persistent
    """
    return self.__lsp_sec_path_config_persistent
      
  def _set_lsp_sec_path_config_persistent(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_persistent, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_persistent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_persistent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_persistent() directly.

    YANG Description: LSP is persistent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-persistent", rest_name="lsp-sec-path-config-persistent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_persistent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-persistent", rest_name="lsp-sec-path-config-persistent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_persistent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_persistent(self):
    self.__lsp_sec_path_config_persistent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-persistent", rest_name="lsp-sec-path-config-persistent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_soft_prempt(self):
    """
    Getter method for lsp_sec_path_config_soft_prempt, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_soft_prempt (boolean)

    YANG Description: LSP soft preemption enabled
    """
    return self.__lsp_sec_path_config_soft_prempt
      
  def _set_lsp_sec_path_config_soft_prempt(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_soft_prempt, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_soft_prempt (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_soft_prempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_soft_prempt() directly.

    YANG Description: LSP soft preemption enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-soft-prempt", rest_name="lsp-sec-path-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_soft_prempt must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-soft-prempt", rest_name="lsp-sec-path-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_soft_prempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_soft_prempt(self):
    self.__lsp_sec_path_config_soft_prempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-soft-prempt", rest_name="lsp-sec-path-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_priority_configured(self):
    """
    Getter method for lsp_sec_path_config_priority_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_priority_configured (boolean)

    YANG Description: LSP priority configured
    """
    return self.__lsp_sec_path_config_priority_configured
      
  def _set_lsp_sec_path_config_priority_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_priority_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_priority_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_priority_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_priority_configured() directly.

    YANG Description: LSP priority configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-priority-configured", rest_name="lsp-sec-path-config-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_priority_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-priority-configured", rest_name="lsp-sec-path-config-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_priority_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_priority_configured(self):
    self.__lsp_sec_path_config_priority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-priority-configured", rest_name="lsp-sec-path-config-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_setup_prority(self):
    """
    Getter method for lsp_sec_path_config_setup_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_setup_prority (uint8)

    YANG Description: LSP setup priority
    """
    return self.__lsp_sec_path_config_setup_prority
      
  def _set_lsp_sec_path_config_setup_prority(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_setup_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_setup_prority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_setup_prority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_setup_prority() directly.

    YANG Description: LSP setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-setup-prority", rest_name="lsp-sec-path-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_setup_prority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-setup-prority", rest_name="lsp-sec-path-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_sec_path_config_setup_prority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_setup_prority(self):
    self.__lsp_sec_path_config_setup_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-setup-prority", rest_name="lsp-sec-path-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_sec_path_config_holding_prority(self):
    """
    Getter method for lsp_sec_path_config_holding_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_holding_prority (uint8)

    YANG Description: LSP holding priority
    """
    return self.__lsp_sec_path_config_holding_prority
      
  def _set_lsp_sec_path_config_holding_prority(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_holding_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_holding_prority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_holding_prority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_holding_prority() directly.

    YANG Description: LSP holding priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-holding-prority", rest_name="lsp-sec-path-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_holding_prority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-holding-prority", rest_name="lsp-sec-path-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_sec_path_config_holding_prority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_holding_prority(self):
    self.__lsp_sec_path_config_holding_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-holding-prority", rest_name="lsp-sec-path-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_sec_path_config_hop_limit_configured(self):
    """
    Getter method for lsp_sec_path_config_hop_limit_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_hop_limit_configured (boolean)

    YANG Description: LSP hop limit is configured
    """
    return self.__lsp_sec_path_config_hop_limit_configured
      
  def _set_lsp_sec_path_config_hop_limit_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_hop_limit_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_hop_limit_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_hop_limit_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_hop_limit_configured() directly.

    YANG Description: LSP hop limit is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hop-limit-configured", rest_name="lsp-sec-path-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_hop_limit_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hop-limit-configured", rest_name="lsp-sec-path-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_hop_limit_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_hop_limit_configured(self):
    self.__lsp_sec_path_config_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-hop-limit-configured", rest_name="lsp-sec-path-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_hop_limit(self):
    """
    Getter method for lsp_sec_path_config_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_hop_limit (uint8)

    YANG Description: LSP hop limit
    """
    return self.__lsp_sec_path_config_hop_limit
      
  def _set_lsp_sec_path_config_hop_limit(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_hop_limit() directly.

    YANG Description: LSP hop limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-hop-limit", rest_name="lsp-sec-path-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-hop-limit", rest_name="lsp-sec-path-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_sec_path_config_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_hop_limit(self):
    self.__lsp_sec_path_config_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-sec-path-config-hop-limit", rest_name="lsp-sec-path-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_sec_path_config_traffic_eng_rate_configured(self):
    """
    Getter method for lsp_sec_path_config_traffic_eng_rate_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_rate_configured (boolean)

    YANG Description: LSP traffic engineering rates configured
    """
    return self.__lsp_sec_path_config_traffic_eng_rate_configured
      
  def _set_lsp_sec_path_config_traffic_eng_rate_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_traffic_eng_rate_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_rate_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_traffic_eng_rate_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_traffic_eng_rate_configured() directly.

    YANG Description: LSP traffic engineering rates configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-rate-configured", rest_name="lsp-sec-path-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_traffic_eng_rate_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-rate-configured", rest_name="lsp-sec-path-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_traffic_eng_rate_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_traffic_eng_rate_configured(self):
    self.__lsp_sec_path_config_traffic_eng_rate_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-rate-configured", rest_name="lsp-sec-path-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_traffic_eng_mean_rate(self):
    """
    Getter method for lsp_sec_path_config_traffic_eng_mean_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_mean_rate (uint32)

    YANG Description: LSP traffic engineering mean rate
    """
    return self.__lsp_sec_path_config_traffic_eng_mean_rate
      
  def _set_lsp_sec_path_config_traffic_eng_mean_rate(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_traffic_eng_mean_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_mean_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_traffic_eng_mean_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_traffic_eng_mean_rate() directly.

    YANG Description: LSP traffic engineering mean rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-mean-rate", rest_name="lsp-sec-path-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_traffic_eng_mean_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-mean-rate", rest_name="lsp-sec-path-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_sec_path_config_traffic_eng_mean_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_traffic_eng_mean_rate(self):
    self.__lsp_sec_path_config_traffic_eng_mean_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-mean-rate", rest_name="lsp-sec-path-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_sec_path_config_traffic_eng_max_rate(self):
    """
    Getter method for lsp_sec_path_config_traffic_eng_max_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_max_rate (uint32)

    YANG Description: LSP traffic engineering max rate
    """
    return self.__lsp_sec_path_config_traffic_eng_max_rate
      
  def _set_lsp_sec_path_config_traffic_eng_max_rate(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_traffic_eng_max_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_max_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_traffic_eng_max_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_traffic_eng_max_rate() directly.

    YANG Description: LSP traffic engineering max rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-rate", rest_name="lsp-sec-path-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_traffic_eng_max_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-rate", rest_name="lsp-sec-path-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_sec_path_config_traffic_eng_max_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_traffic_eng_max_rate(self):
    self.__lsp_sec_path_config_traffic_eng_max_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-rate", rest_name="lsp-sec-path-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_sec_path_config_traffic_eng_max_burst(self):
    """
    Getter method for lsp_sec_path_config_traffic_eng_max_burst, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_max_burst (uint32)

    YANG Description: LSP traffic engineering max-burst
    """
    return self.__lsp_sec_path_config_traffic_eng_max_burst
      
  def _set_lsp_sec_path_config_traffic_eng_max_burst(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_traffic_eng_max_burst, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_traffic_eng_max_burst (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_traffic_eng_max_burst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_traffic_eng_max_burst() directly.

    YANG Description: LSP traffic engineering max-burst
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-burst", rest_name="lsp-sec-path-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_traffic_eng_max_burst must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-burst", rest_name="lsp-sec-path-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_sec_path_config_traffic_eng_max_burst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_traffic_eng_max_burst(self):
    self.__lsp_sec_path_config_traffic_eng_max_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-sec-path-config-traffic-eng-max-burst", rest_name="lsp-sec-path-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_sec_path_config_admin_group_configured(self):
    """
    Getter method for lsp_sec_path_config_admin_group_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_admin_group_configured (boolean)

    YANG Description: LSP secondary path admin group configured
    """
    return self.__lsp_sec_path_config_admin_group_configured
      
  def _set_lsp_sec_path_config_admin_group_configured(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_admin_group_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_admin_group_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_admin_group_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_admin_group_configured() directly.

    YANG Description: LSP secondary path admin group configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-admin-group-configured", rest_name="lsp-sec-path-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_admin_group_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-admin-group-configured", rest_name="lsp-sec-path-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_sec_path_config_admin_group_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_admin_group_configured(self):
    self.__lsp_sec_path_config_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-sec-path-config-admin-group-configured", rest_name="lsp-sec-path-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_sec_path_config_admin_groups(self):
    """
    Getter method for lsp_sec_path_config_admin_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_admin_groups (container)
    """
    return self.__lsp_sec_path_config_admin_groups
      
  def _set_lsp_sec_path_config_admin_groups(self, v, load=False):
    """
    Setter method for lsp_sec_path_config_admin_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_sec_path_info/sec_path/lsp_sec_path_config_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_sec_path_config_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_sec_path_config_admin_groups() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lsp_sec_path_config_admin_groups.lsp_sec_path_config_admin_groups, is_container='container', presence=False, yang_name="lsp-sec-path-config-admin-groups", rest_name="lsp-sec-path-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_sec_path_config_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lsp_sec_path_config_admin_groups.lsp_sec_path_config_admin_groups, is_container='container', presence=False, yang_name="lsp-sec-path-config-admin-groups", rest_name="lsp-sec-path-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__lsp_sec_path_config_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_sec_path_config_admin_groups(self):
    self.__lsp_sec_path_config_admin_groups = YANGDynClass(base=lsp_sec_path_config_admin_groups.lsp_sec_path_config_admin_groups, is_container='container', presence=False, yang_name="lsp-sec-path-config-admin-groups", rest_name="lsp-sec-path-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

  lsp_sec_path_path_name = __builtin__.property(_get_lsp_sec_path_path_name, _set_lsp_sec_path_path_name)
  lsp_sec_path_state = __builtin__.property(_get_lsp_sec_path_state, _set_lsp_sec_path_state)
  lsp_sec_path_state_up = __builtin__.property(_get_lsp_sec_path_state_up, _set_lsp_sec_path_state_up)
  lsp_sec_path_active = __builtin__.property(_get_lsp_sec_path_active, _set_lsp_sec_path_active)
  lsp_sec_path_is_current_secondary = __builtin__.property(_get_lsp_sec_path_is_current_secondary, _set_lsp_sec_path_is_current_secondary)
  lsp_sec_path_is_selected_secondary = __builtin__.property(_get_lsp_sec_path_is_selected_secondary, _set_lsp_sec_path_is_selected_secondary)
  lsp_sec_path_config_reoptimize_timer_configured = __builtin__.property(_get_lsp_sec_path_config_reoptimize_timer_configured, _set_lsp_sec_path_config_reoptimize_timer_configured)
  lsp_sec_path_config_reoptimize_timer = __builtin__.property(_get_lsp_sec_path_config_reoptimize_timer, _set_lsp_sec_path_config_reoptimize_timer)
  lsp_sec_path_config_tspec_mtu_configured = __builtin__.property(_get_lsp_sec_path_config_tspec_mtu_configured, _set_lsp_sec_path_config_tspec_mtu_configured)
  lsp_sec_path_sec_path_config_tspec_mtu = __builtin__.property(_get_lsp_sec_path_sec_path_config_tspec_mtu, _set_lsp_sec_path_sec_path_config_tspec_mtu)
  lsp_sec_path_config_cos_configured = __builtin__.property(_get_lsp_sec_path_config_cos_configured, _set_lsp_sec_path_config_cos_configured)
  lsp_sec_path_config_cos = __builtin__.property(_get_lsp_sec_path_config_cos, _set_lsp_sec_path_config_cos)
  lsp_sec_path_config_mtu_configured = __builtin__.property(_get_lsp_sec_path_config_mtu_configured, _set_lsp_sec_path_config_mtu_configured)
  lsp_sec_path_config_mtu = __builtin__.property(_get_lsp_sec_path_config_mtu, _set_lsp_sec_path_config_mtu)
  lsp_sec_path_config_tie_breaking_configured = __builtin__.property(_get_lsp_sec_path_config_tie_breaking_configured, _set_lsp_sec_path_config_tie_breaking_configured)
  lsp_sec_path_config_tie_break_random = __builtin__.property(_get_lsp_sec_path_config_tie_break_random, _set_lsp_sec_path_config_tie_break_random)
  lsp_sec_path_config_tie_break_least_fill = __builtin__.property(_get_lsp_sec_path_config_tie_break_least_fill, _set_lsp_sec_path_config_tie_break_least_fill)
  lsp_sec_path_config_tie_break_most_fill = __builtin__.property(_get_lsp_sec_path_config_tie_break_most_fill, _set_lsp_sec_path_config_tie_break_most_fill)
  lsp_sec_path_config_cspf_disabled = __builtin__.property(_get_lsp_sec_path_config_cspf_disabled, _set_lsp_sec_path_config_cspf_disabled)
  lsp_sec_path_config_hot_standby = __builtin__.property(_get_lsp_sec_path_config_hot_standby, _set_lsp_sec_path_config_hot_standby)
  lsp_sec_path_config_pinned = __builtin__.property(_get_lsp_sec_path_config_pinned, _set_lsp_sec_path_config_pinned)
  lsp_sec_path_config_persistent = __builtin__.property(_get_lsp_sec_path_config_persistent, _set_lsp_sec_path_config_persistent)
  lsp_sec_path_config_soft_prempt = __builtin__.property(_get_lsp_sec_path_config_soft_prempt, _set_lsp_sec_path_config_soft_prempt)
  lsp_sec_path_config_priority_configured = __builtin__.property(_get_lsp_sec_path_config_priority_configured, _set_lsp_sec_path_config_priority_configured)
  lsp_sec_path_config_setup_prority = __builtin__.property(_get_lsp_sec_path_config_setup_prority, _set_lsp_sec_path_config_setup_prority)
  lsp_sec_path_config_holding_prority = __builtin__.property(_get_lsp_sec_path_config_holding_prority, _set_lsp_sec_path_config_holding_prority)
  lsp_sec_path_config_hop_limit_configured = __builtin__.property(_get_lsp_sec_path_config_hop_limit_configured, _set_lsp_sec_path_config_hop_limit_configured)
  lsp_sec_path_config_hop_limit = __builtin__.property(_get_lsp_sec_path_config_hop_limit, _set_lsp_sec_path_config_hop_limit)
  lsp_sec_path_config_traffic_eng_rate_configured = __builtin__.property(_get_lsp_sec_path_config_traffic_eng_rate_configured, _set_lsp_sec_path_config_traffic_eng_rate_configured)
  lsp_sec_path_config_traffic_eng_mean_rate = __builtin__.property(_get_lsp_sec_path_config_traffic_eng_mean_rate, _set_lsp_sec_path_config_traffic_eng_mean_rate)
  lsp_sec_path_config_traffic_eng_max_rate = __builtin__.property(_get_lsp_sec_path_config_traffic_eng_max_rate, _set_lsp_sec_path_config_traffic_eng_max_rate)
  lsp_sec_path_config_traffic_eng_max_burst = __builtin__.property(_get_lsp_sec_path_config_traffic_eng_max_burst, _set_lsp_sec_path_config_traffic_eng_max_burst)
  lsp_sec_path_config_admin_group_configured = __builtin__.property(_get_lsp_sec_path_config_admin_group_configured, _set_lsp_sec_path_config_admin_group_configured)
  lsp_sec_path_config_admin_groups = __builtin__.property(_get_lsp_sec_path_config_admin_groups, _set_lsp_sec_path_config_admin_groups)


  _pyangbind_elements = {'lsp_sec_path_path_name': lsp_sec_path_path_name, 'lsp_sec_path_state': lsp_sec_path_state, 'lsp_sec_path_state_up': lsp_sec_path_state_up, 'lsp_sec_path_active': lsp_sec_path_active, 'lsp_sec_path_is_current_secondary': lsp_sec_path_is_current_secondary, 'lsp_sec_path_is_selected_secondary': lsp_sec_path_is_selected_secondary, 'lsp_sec_path_config_reoptimize_timer_configured': lsp_sec_path_config_reoptimize_timer_configured, 'lsp_sec_path_config_reoptimize_timer': lsp_sec_path_config_reoptimize_timer, 'lsp_sec_path_config_tspec_mtu_configured': lsp_sec_path_config_tspec_mtu_configured, 'lsp_sec_path_sec_path_config_tspec_mtu': lsp_sec_path_sec_path_config_tspec_mtu, 'lsp_sec_path_config_cos_configured': lsp_sec_path_config_cos_configured, 'lsp_sec_path_config_cos': lsp_sec_path_config_cos, 'lsp_sec_path_config_mtu_configured': lsp_sec_path_config_mtu_configured, 'lsp_sec_path_config_mtu': lsp_sec_path_config_mtu, 'lsp_sec_path_config_tie_breaking_configured': lsp_sec_path_config_tie_breaking_configured, 'lsp_sec_path_config_tie_break_random': lsp_sec_path_config_tie_break_random, 'lsp_sec_path_config_tie_break_least_fill': lsp_sec_path_config_tie_break_least_fill, 'lsp_sec_path_config_tie_break_most_fill': lsp_sec_path_config_tie_break_most_fill, 'lsp_sec_path_config_cspf_disabled': lsp_sec_path_config_cspf_disabled, 'lsp_sec_path_config_hot_standby': lsp_sec_path_config_hot_standby, 'lsp_sec_path_config_pinned': lsp_sec_path_config_pinned, 'lsp_sec_path_config_persistent': lsp_sec_path_config_persistent, 'lsp_sec_path_config_soft_prempt': lsp_sec_path_config_soft_prempt, 'lsp_sec_path_config_priority_configured': lsp_sec_path_config_priority_configured, 'lsp_sec_path_config_setup_prority': lsp_sec_path_config_setup_prority, 'lsp_sec_path_config_holding_prority': lsp_sec_path_config_holding_prority, 'lsp_sec_path_config_hop_limit_configured': lsp_sec_path_config_hop_limit_configured, 'lsp_sec_path_config_hop_limit': lsp_sec_path_config_hop_limit, 'lsp_sec_path_config_traffic_eng_rate_configured': lsp_sec_path_config_traffic_eng_rate_configured, 'lsp_sec_path_config_traffic_eng_mean_rate': lsp_sec_path_config_traffic_eng_mean_rate, 'lsp_sec_path_config_traffic_eng_max_rate': lsp_sec_path_config_traffic_eng_max_rate, 'lsp_sec_path_config_traffic_eng_max_burst': lsp_sec_path_config_traffic_eng_max_burst, 'lsp_sec_path_config_admin_group_configured': lsp_sec_path_config_admin_group_configured, 'lsp_sec_path_config_admin_groups': lsp_sec_path_config_admin_groups, }


