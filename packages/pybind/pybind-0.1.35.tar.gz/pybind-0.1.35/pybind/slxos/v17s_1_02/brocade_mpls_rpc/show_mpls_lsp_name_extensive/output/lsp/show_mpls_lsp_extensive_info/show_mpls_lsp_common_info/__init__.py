
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import lsp_config_frr_admin_groups
import lsp_config_exclude_interfaces
class show_mpls_lsp_common_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-lsp-name-extensive/output/lsp/show-mpls-lsp-extensive-info/show-mpls-lsp-common-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__lsp_config_admin_up','__lsp_config_from_address','__lsp_config_to_address','__lsp_config_type_bypass','__lsp_config_type_dynamic','__lsp_config_adaptive','__lsp_config_ospf_area','__lsp_config_isis_level','__lsp_config_number_of_retries_configured','__lsp_config_number_of_retries','__lsp_config_path_select_mode_configured','__lsp_config_path_select_mode_manual','__lsp_config_path_select_mode_unconditional','__lsp_config_path_select_primary','__lsp_config_path_select_secondary','__lsp_config_shortcut_ospf','__lsp_config_shortcut_area_configured','__lsp_config_shortcut_area','__lsp_config_notify_ospf','__lsp_config_shortcut_isis','__lsp_config_shortcut_isis_level_configured','__lsp_config_isis_shortcut_level','__lsp_config_notify_isis','__lsp_config_metric_configured','__lsp_config_metric','__lsp_config_ospf_ignore_metric','__lsp_config_ospf_relative_metric','__lsp_config_ospf_announce_metric','__lsp_config_ospf_aaf','__lsp_config_isis_ignore_metric','__lsp_config_isis_relative_metric','__lsp_config_isis_announce_configured','__lsp_config_isis_announce_metric','__lsp_config_frr_configured','__lsp_config_frr_one_to_one','__lsp_config_frr_one_to_many','__lsp_config_frr_priority_configured','__lsp_config_frr_setup_priority','__lsp_config_frr_holding_priority','__lsp_config_frr_hop_limit_configured','__lsp_config_frr_hop_limit','__lsp_config_frr_bandwidth_configured','__lsp_config_frr_bandwidth','__lsp_config_frr_admin_group_configured','__lsp_config_frr_admin_groups','__lsp_config_exclude_interface_configured','__lsp_config_exclude_interfaces',)

  _yang_name = 'show-mpls-lsp-common-info'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__lsp_config_shortcut_area_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-area-configured", rest_name="lsp-config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-hop-limit", rest_name="lsp-config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_shortcut_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-shortcut-area", rest_name="lsp-config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__lsp_config_number_of_retries_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-number-of-retries-configured", rest_name="lsp-config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_shortcut_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-ospf", rest_name="lsp-config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_isis_announce_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-announce-metric", rest_name="lsp-config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_frr_one_to_one = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-one", rest_name="lsp-config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_bandwidth_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-bandwidth-configured", rest_name="lsp-config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-metric", rest_name="lsp-config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_isis_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-relative-metric", rest_name="lsp-config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_type_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-type-bypass", rest_name="lsp-config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_admin_groups = YANGDynClass(base=lsp_config_frr_admin_groups.lsp_config_frr_admin_groups, is_container='container', presence=False, yang_name="lsp-config-frr-admin-groups", rest_name="lsp-config-frr-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__lsp_config_ospf_aaf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-aaf", rest_name="lsp-config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_ospf_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-ospf-ignore-metric", rest_name="lsp-config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hop-limit-configured", rest_name="lsp-config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_isis_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-level", rest_name="lsp-config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_to_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-to-address", rest_name="lsp-config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__lsp_config_isis_announce_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-announce-configured", rest_name="lsp-config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_type_dynamic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-type-dynamic", rest_name="lsp-config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_priority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-priority-configured", rest_name="lsp-config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_exclude_interface_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-configured", rest_name="lsp-config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_shortcut_isis_level_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis-level-configured", rest_name="lsp-config-shortcut-isis-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_ospf_announce_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-announce-metric", rest_name="lsp-config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_path_select_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-secondary", rest_name="lsp-config-path-select-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_exclude_interfaces = YANGDynClass(base=YANGListType("interface_name",lsp_config_exclude_interfaces.lsp_config_exclude_interfaces, yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions=None), is_container='list', yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__lsp_config_from_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-from-address", rest_name="lsp-config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__lsp_config_path_select_mode_manual = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-manual", rest_name="lsp-config-path-select-mode-manual", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_notify_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-ospf", rest_name="lsp-config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-number-of-retries", rest_name="lsp-config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_frr_one_to_many = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-many", rest_name="lsp-config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-up", rest_name="lsp-config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-admin-group-configured", rest_name="lsp-config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_notify_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-isis", rest_name="lsp-config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_adaptive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-adaptive", rest_name="lsp-config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_shortcut_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis", rest_name="lsp-config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_ospf_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-relative-metric", rest_name="lsp-config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-frr-bandwidth", rest_name="lsp-config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_path_select_mode_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-configured", rest_name="lsp-config-path-select-mode-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_metric_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-metric-configured", rest_name="lsp-config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_holding_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-holding-priority", rest_name="lsp-config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_isis_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-ignore-metric", rest_name="lsp-config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_path_select_primary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-primary", rest_name="lsp-config-path-select-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_frr_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-setup-priority", rest_name="lsp-config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_frr_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-configured", rest_name="lsp-config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_ospf_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-ospf-area", rest_name="lsp-config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__lsp_config_path_select_mode_unconditional = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-unconditional", rest_name="lsp-config-path-select-mode-unconditional", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_isis_shortcut_level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-isis-shortcut-level", rest_name="lsp-config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-lsp-name-extensive', u'output', u'lsp', u'show-mpls-lsp-extensive-info', u'show-mpls-lsp-common-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-lsp-name-extensive', u'output', u'lsp']

  def _get_lsp_config_admin_up(self):
    """
    Getter method for lsp_config_admin_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_admin_up (boolean)

    YANG Description: Admin status
    """
    return self.__lsp_config_admin_up
      
  def _set_lsp_config_admin_up(self, v, load=False):
    """
    Setter method for lsp_config_admin_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_admin_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_admin_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_admin_up() directly.

    YANG Description: Admin status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-up", rest_name="lsp-config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_admin_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-up", rest_name="lsp-config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_admin_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_admin_up(self):
    self.__lsp_config_admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-up", rest_name="lsp-config-admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_from_address(self):
    """
    Getter method for lsp_config_from_address, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_from_address (inet:ipv4-address)

    YANG Description: LSP from or source address
    """
    return self.__lsp_config_from_address
      
  def _set_lsp_config_from_address(self, v, load=False):
    """
    Setter method for lsp_config_from_address, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_from_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_from_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_from_address() directly.

    YANG Description: LSP from or source address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-from-address", rest_name="lsp-config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_from_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-from-address", rest_name="lsp-config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__lsp_config_from_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_from_address(self):
    self.__lsp_config_from_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-from-address", rest_name="lsp-config-from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_lsp_config_to_address(self):
    """
    Getter method for lsp_config_to_address, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_to_address (inet:ipv4-address)

    YANG Description: LSP destination address
    """
    return self.__lsp_config_to_address
      
  def _set_lsp_config_to_address(self, v, load=False):
    """
    Setter method for lsp_config_to_address, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_to_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_to_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_to_address() directly.

    YANG Description: LSP destination address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-to-address", rest_name="lsp-config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_to_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-to-address", rest_name="lsp-config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__lsp_config_to_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_to_address(self):
    self.__lsp_config_to_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-to-address", rest_name="lsp-config-to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_lsp_config_type_bypass(self):
    """
    Getter method for lsp_config_type_bypass, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_type_bypass (boolean)

    YANG Description: LSP is bypass LSP
    """
    return self.__lsp_config_type_bypass
      
  def _set_lsp_config_type_bypass(self, v, load=False):
    """
    Setter method for lsp_config_type_bypass, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_type_bypass (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_type_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_type_bypass() directly.

    YANG Description: LSP is bypass LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-type-bypass", rest_name="lsp-config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_type_bypass must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-type-bypass", rest_name="lsp-config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_type_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_type_bypass(self):
    self.__lsp_config_type_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-type-bypass", rest_name="lsp-config-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_type_dynamic(self):
    """
    Getter method for lsp_config_type_dynamic, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_type_dynamic (boolean)

    YANG Description: LSP is dynamically created
    """
    return self.__lsp_config_type_dynamic
      
  def _set_lsp_config_type_dynamic(self, v, load=False):
    """
    Setter method for lsp_config_type_dynamic, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_type_dynamic (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_type_dynamic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_type_dynamic() directly.

    YANG Description: LSP is dynamically created
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-type-dynamic", rest_name="lsp-config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_type_dynamic must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-type-dynamic", rest_name="lsp-config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_type_dynamic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_type_dynamic(self):
    self.__lsp_config_type_dynamic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-type-dynamic", rest_name="lsp-config-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_adaptive(self):
    """
    Getter method for lsp_config_adaptive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_adaptive (boolean)

    YANG Description: LSP is adaptive
    """
    return self.__lsp_config_adaptive
      
  def _set_lsp_config_adaptive(self, v, load=False):
    """
    Setter method for lsp_config_adaptive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_adaptive (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_adaptive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_adaptive() directly.

    YANG Description: LSP is adaptive
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-adaptive", rest_name="lsp-config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_adaptive must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-adaptive", rest_name="lsp-config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_adaptive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_adaptive(self):
    self.__lsp_config_adaptive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-adaptive", rest_name="lsp-config-adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_ospf_area(self):
    """
    Getter method for lsp_config_ospf_area, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_area (inet:ipv4-address)

    YANG Description: LSP OSPF area
    """
    return self.__lsp_config_ospf_area
      
  def _set_lsp_config_ospf_area(self, v, load=False):
    """
    Setter method for lsp_config_ospf_area, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_area (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_ospf_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_ospf_area() directly.

    YANG Description: LSP OSPF area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-ospf-area", rest_name="lsp-config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_ospf_area must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-ospf-area", rest_name="lsp-config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__lsp_config_ospf_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_ospf_area(self):
    self.__lsp_config_ospf_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-ospf-area", rest_name="lsp-config-ospf-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_lsp_config_isis_level(self):
    """
    Getter method for lsp_config_isis_level, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_level (uint32)

    YANG Description: LSP ISIS level
    """
    return self.__lsp_config_isis_level
      
  def _set_lsp_config_isis_level(self, v, load=False):
    """
    Setter method for lsp_config_isis_level, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_isis_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_isis_level() directly.

    YANG Description: LSP ISIS level
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-level", rest_name="lsp-config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_isis_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-level", rest_name="lsp-config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_isis_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_isis_level(self):
    self.__lsp_config_isis_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-level", rest_name="lsp-config-isis-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_number_of_retries_configured(self):
    """
    Getter method for lsp_config_number_of_retries_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_number_of_retries_configured (boolean)

    YANG Description: Number of retriies configured in this LSP
    """
    return self.__lsp_config_number_of_retries_configured
      
  def _set_lsp_config_number_of_retries_configured(self, v, load=False):
    """
    Setter method for lsp_config_number_of_retries_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_number_of_retries_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_number_of_retries_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_number_of_retries_configured() directly.

    YANG Description: Number of retriies configured in this LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-number-of-retries-configured", rest_name="lsp-config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_number_of_retries_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-number-of-retries-configured", rest_name="lsp-config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_number_of_retries_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_number_of_retries_configured(self):
    self.__lsp_config_number_of_retries_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-number-of-retries-configured", rest_name="lsp-config-number-of-retries-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_number_of_retries(self):
    """
    Getter method for lsp_config_number_of_retries, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_number_of_retries (uint32)

    YANG Description: Number of retries
    """
    return self.__lsp_config_number_of_retries
      
  def _set_lsp_config_number_of_retries(self, v, load=False):
    """
    Setter method for lsp_config_number_of_retries, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_number_of_retries (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_number_of_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_number_of_retries() directly.

    YANG Description: Number of retries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-number-of-retries", rest_name="lsp-config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_number_of_retries must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-number-of-retries", rest_name="lsp-config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_number_of_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_number_of_retries(self):
    self.__lsp_config_number_of_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-number-of-retries", rest_name="lsp-config-number-of-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_path_select_mode_configured(self):
    """
    Getter method for lsp_config_path_select_mode_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_mode_configured (boolean)

    YANG Description: Path Select mode configured for LSP
    """
    return self.__lsp_config_path_select_mode_configured
      
  def _set_lsp_config_path_select_mode_configured(self, v, load=False):
    """
    Setter method for lsp_config_path_select_mode_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_mode_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path_select_mode_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path_select_mode_configured() directly.

    YANG Description: Path Select mode configured for LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-configured", rest_name="lsp-config-path-select-mode-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path_select_mode_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-configured", rest_name="lsp-config-path-select-mode-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_path_select_mode_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path_select_mode_configured(self):
    self.__lsp_config_path_select_mode_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-configured", rest_name="lsp-config-path-select-mode-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_path_select_mode_manual(self):
    """
    Getter method for lsp_config_path_select_mode_manual, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_mode_manual (boolean)

    YANG Description: Path Select mode is manual
    """
    return self.__lsp_config_path_select_mode_manual
      
  def _set_lsp_config_path_select_mode_manual(self, v, load=False):
    """
    Setter method for lsp_config_path_select_mode_manual, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_mode_manual (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path_select_mode_manual is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path_select_mode_manual() directly.

    YANG Description: Path Select mode is manual
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-manual", rest_name="lsp-config-path-select-mode-manual", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path_select_mode_manual must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-manual", rest_name="lsp-config-path-select-mode-manual", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_path_select_mode_manual = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path_select_mode_manual(self):
    self.__lsp_config_path_select_mode_manual = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-manual", rest_name="lsp-config-path-select-mode-manual", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_path_select_mode_unconditional(self):
    """
    Getter method for lsp_config_path_select_mode_unconditional, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_mode_unconditional (boolean)

    YANG Description: Path Select mode is unconditional
    """
    return self.__lsp_config_path_select_mode_unconditional
      
  def _set_lsp_config_path_select_mode_unconditional(self, v, load=False):
    """
    Setter method for lsp_config_path_select_mode_unconditional, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_mode_unconditional (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path_select_mode_unconditional is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path_select_mode_unconditional() directly.

    YANG Description: Path Select mode is unconditional
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-unconditional", rest_name="lsp-config-path-select-mode-unconditional", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path_select_mode_unconditional must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-unconditional", rest_name="lsp-config-path-select-mode-unconditional", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_path_select_mode_unconditional = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path_select_mode_unconditional(self):
    self.__lsp_config_path_select_mode_unconditional = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-mode-unconditional", rest_name="lsp-config-path-select-mode-unconditional", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_path_select_primary(self):
    """
    Getter method for lsp_config_path_select_primary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_primary (boolean)

    YANG Description: Path select is primary
    """
    return self.__lsp_config_path_select_primary
      
  def _set_lsp_config_path_select_primary(self, v, load=False):
    """
    Setter method for lsp_config_path_select_primary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_primary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path_select_primary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path_select_primary() directly.

    YANG Description: Path select is primary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-primary", rest_name="lsp-config-path-select-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path_select_primary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-primary", rest_name="lsp-config-path-select-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_path_select_primary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path_select_primary(self):
    self.__lsp_config_path_select_primary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-primary", rest_name="lsp-config-path-select-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_path_select_secondary(self):
    """
    Getter method for lsp_config_path_select_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_secondary (boolean)

    YANG Description: Path select is primary
    """
    return self.__lsp_config_path_select_secondary
      
  def _set_lsp_config_path_select_secondary(self, v, load=False):
    """
    Setter method for lsp_config_path_select_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_path_select_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path_select_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path_select_secondary() directly.

    YANG Description: Path select is primary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-secondary", rest_name="lsp-config-path-select-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path_select_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-secondary", rest_name="lsp-config-path-select-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_path_select_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path_select_secondary(self):
    self.__lsp_config_path_select_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-select-secondary", rest_name="lsp-config-path-select-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_shortcut_ospf(self):
    """
    Getter method for lsp_config_shortcut_ospf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_ospf (boolean)

    YANG Description: Shortcut to OSPF enabled
    """
    return self.__lsp_config_shortcut_ospf
      
  def _set_lsp_config_shortcut_ospf(self, v, load=False):
    """
    Setter method for lsp_config_shortcut_ospf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_ospf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_shortcut_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_shortcut_ospf() directly.

    YANG Description: Shortcut to OSPF enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-ospf", rest_name="lsp-config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_shortcut_ospf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-ospf", rest_name="lsp-config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_shortcut_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_shortcut_ospf(self):
    self.__lsp_config_shortcut_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-ospf", rest_name="lsp-config-shortcut-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_shortcut_area_configured(self):
    """
    Getter method for lsp_config_shortcut_area_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_area_configured (boolean)

    YANG Description: Shortcut area to OSPF is configured
    """
    return self.__lsp_config_shortcut_area_configured
      
  def _set_lsp_config_shortcut_area_configured(self, v, load=False):
    """
    Setter method for lsp_config_shortcut_area_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_area_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_shortcut_area_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_shortcut_area_configured() directly.

    YANG Description: Shortcut area to OSPF is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-area-configured", rest_name="lsp-config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_shortcut_area_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-area-configured", rest_name="lsp-config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_shortcut_area_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_shortcut_area_configured(self):
    self.__lsp_config_shortcut_area_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-area-configured", rest_name="lsp-config-shortcut-area-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_shortcut_area(self):
    """
    Getter method for lsp_config_shortcut_area, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_area (inet:ipv4-address)

    YANG Description: Shortcut area to OSPF
    """
    return self.__lsp_config_shortcut_area
      
  def _set_lsp_config_shortcut_area(self, v, load=False):
    """
    Setter method for lsp_config_shortcut_area, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_area (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_shortcut_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_shortcut_area() directly.

    YANG Description: Shortcut area to OSPF
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-shortcut-area", rest_name="lsp-config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_shortcut_area must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-shortcut-area", rest_name="lsp-config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__lsp_config_shortcut_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_shortcut_area(self):
    self.__lsp_config_shortcut_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-config-shortcut-area", rest_name="lsp-config-shortcut-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_lsp_config_notify_ospf(self):
    """
    Getter method for lsp_config_notify_ospf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_notify_ospf (boolean)

    YANG Description: Notify to OSPF
    """
    return self.__lsp_config_notify_ospf
      
  def _set_lsp_config_notify_ospf(self, v, load=False):
    """
    Setter method for lsp_config_notify_ospf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_notify_ospf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_notify_ospf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_notify_ospf() directly.

    YANG Description: Notify to OSPF
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-ospf", rest_name="lsp-config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_notify_ospf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-ospf", rest_name="lsp-config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_notify_ospf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_notify_ospf(self):
    self.__lsp_config_notify_ospf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-ospf", rest_name="lsp-config-notify-ospf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_shortcut_isis(self):
    """
    Getter method for lsp_config_shortcut_isis, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_isis (boolean)

    YANG Description: Shortcut to ISIS enabled
    """
    return self.__lsp_config_shortcut_isis
      
  def _set_lsp_config_shortcut_isis(self, v, load=False):
    """
    Setter method for lsp_config_shortcut_isis, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_isis (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_shortcut_isis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_shortcut_isis() directly.

    YANG Description: Shortcut to ISIS enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis", rest_name="lsp-config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_shortcut_isis must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis", rest_name="lsp-config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_shortcut_isis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_shortcut_isis(self):
    self.__lsp_config_shortcut_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis", rest_name="lsp-config-shortcut-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_shortcut_isis_level_configured(self):
    """
    Getter method for lsp_config_shortcut_isis_level_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_isis_level_configured (boolean)

    YANG Description: Shortcut level of ISIS is configured
    """
    return self.__lsp_config_shortcut_isis_level_configured
      
  def _set_lsp_config_shortcut_isis_level_configured(self, v, load=False):
    """
    Setter method for lsp_config_shortcut_isis_level_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_shortcut_isis_level_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_shortcut_isis_level_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_shortcut_isis_level_configured() directly.

    YANG Description: Shortcut level of ISIS is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis-level-configured", rest_name="lsp-config-shortcut-isis-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_shortcut_isis_level_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis-level-configured", rest_name="lsp-config-shortcut-isis-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_shortcut_isis_level_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_shortcut_isis_level_configured(self):
    self.__lsp_config_shortcut_isis_level_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-shortcut-isis-level-configured", rest_name="lsp-config-shortcut-isis-level-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_isis_shortcut_level(self):
    """
    Getter method for lsp_config_isis_shortcut_level, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_shortcut_level (uint8)

    YANG Description: Shortcut area to OSPF
    """
    return self.__lsp_config_isis_shortcut_level
      
  def _set_lsp_config_isis_shortcut_level(self, v, load=False):
    """
    Setter method for lsp_config_isis_shortcut_level, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_shortcut_level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_isis_shortcut_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_isis_shortcut_level() directly.

    YANG Description: Shortcut area to OSPF
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-isis-shortcut-level", rest_name="lsp-config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_isis_shortcut_level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-isis-shortcut-level", rest_name="lsp-config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_isis_shortcut_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_isis_shortcut_level(self):
    self.__lsp_config_isis_shortcut_level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-isis-shortcut-level", rest_name="lsp-config-isis-shortcut-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_notify_isis(self):
    """
    Getter method for lsp_config_notify_isis, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_notify_isis (boolean)

    YANG Description: Notify or announce to ISIS
    """
    return self.__lsp_config_notify_isis
      
  def _set_lsp_config_notify_isis(self, v, load=False):
    """
    Setter method for lsp_config_notify_isis, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_notify_isis (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_notify_isis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_notify_isis() directly.

    YANG Description: Notify or announce to ISIS
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-isis", rest_name="lsp-config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_notify_isis must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-isis", rest_name="lsp-config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_notify_isis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_notify_isis(self):
    self.__lsp_config_notify_isis = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-notify-isis", rest_name="lsp-config-notify-isis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_metric_configured(self):
    """
    Getter method for lsp_config_metric_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_metric_configured (boolean)

    YANG Description: LSP metric is configured
    """
    return self.__lsp_config_metric_configured
      
  def _set_lsp_config_metric_configured(self, v, load=False):
    """
    Setter method for lsp_config_metric_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_metric_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_metric_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_metric_configured() directly.

    YANG Description: LSP metric is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-metric-configured", rest_name="lsp-config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_metric_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-metric-configured", rest_name="lsp-config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_metric_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_metric_configured(self):
    self.__lsp_config_metric_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-metric-configured", rest_name="lsp-config-metric-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_metric(self):
    """
    Getter method for lsp_config_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_metric (uint32)

    YANG Description: LSP metric
    """
    return self.__lsp_config_metric
      
  def _set_lsp_config_metric(self, v, load=False):
    """
    Setter method for lsp_config_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_metric() directly.

    YANG Description: LSP metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-metric", rest_name="lsp-config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-metric", rest_name="lsp-config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_metric(self):
    self.__lsp_config_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-metric", rest_name="lsp-config-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_ospf_ignore_metric(self):
    """
    Getter method for lsp_config_ospf_ignore_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_ignore_metric (boolean)

    YANG Description: OSPF ignore metric
    """
    return self.__lsp_config_ospf_ignore_metric
      
  def _set_lsp_config_ospf_ignore_metric(self, v, load=False):
    """
    Setter method for lsp_config_ospf_ignore_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_ignore_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_ospf_ignore_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_ospf_ignore_metric() directly.

    YANG Description: OSPF ignore metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-ospf-ignore-metric", rest_name="lsp-config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_ospf_ignore_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-ospf-ignore-metric", rest_name="lsp-config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_ospf_ignore_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_ospf_ignore_metric(self):
    self.__lsp_config_ospf_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-ospf-ignore-metric", rest_name="lsp-config-ospf-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_ospf_relative_metric(self):
    """
    Getter method for lsp_config_ospf_relative_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_relative_metric (uint32)

    YANG Description: OSPF relative metric
    """
    return self.__lsp_config_ospf_relative_metric
      
  def _set_lsp_config_ospf_relative_metric(self, v, load=False):
    """
    Setter method for lsp_config_ospf_relative_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_relative_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_ospf_relative_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_ospf_relative_metric() directly.

    YANG Description: OSPF relative metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-relative-metric", rest_name="lsp-config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_ospf_relative_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-relative-metric", rest_name="lsp-config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_ospf_relative_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_ospf_relative_metric(self):
    self.__lsp_config_ospf_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-relative-metric", rest_name="lsp-config-ospf-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_ospf_announce_metric(self):
    """
    Getter method for lsp_config_ospf_announce_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_announce_metric (uint32)

    YANG Description: OSPF anounce metric
    """
    return self.__lsp_config_ospf_announce_metric
      
  def _set_lsp_config_ospf_announce_metric(self, v, load=False):
    """
    Setter method for lsp_config_ospf_announce_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_announce_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_ospf_announce_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_ospf_announce_metric() directly.

    YANG Description: OSPF anounce metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-announce-metric", rest_name="lsp-config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_ospf_announce_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-announce-metric", rest_name="lsp-config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_ospf_announce_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_ospf_announce_metric(self):
    self.__lsp_config_ospf_announce_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-announce-metric", rest_name="lsp-config-ospf-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_ospf_aaf(self):
    """
    Getter method for lsp_config_ospf_aaf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_aaf (uint32)

    YANG Description: OSPF AAF
    """
    return self.__lsp_config_ospf_aaf
      
  def _set_lsp_config_ospf_aaf(self, v, load=False):
    """
    Setter method for lsp_config_ospf_aaf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_ospf_aaf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_ospf_aaf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_ospf_aaf() directly.

    YANG Description: OSPF AAF
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-aaf", rest_name="lsp-config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_ospf_aaf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-aaf", rest_name="lsp-config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_ospf_aaf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_ospf_aaf(self):
    self.__lsp_config_ospf_aaf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-ospf-aaf", rest_name="lsp-config-ospf-aaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_isis_ignore_metric(self):
    """
    Getter method for lsp_config_isis_ignore_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_ignore_metric (boolean)

    YANG Description: ISIS ignore metric
    """
    return self.__lsp_config_isis_ignore_metric
      
  def _set_lsp_config_isis_ignore_metric(self, v, load=False):
    """
    Setter method for lsp_config_isis_ignore_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_ignore_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_isis_ignore_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_isis_ignore_metric() directly.

    YANG Description: ISIS ignore metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-ignore-metric", rest_name="lsp-config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_isis_ignore_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-ignore-metric", rest_name="lsp-config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_isis_ignore_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_isis_ignore_metric(self):
    self.__lsp_config_isis_ignore_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-ignore-metric", rest_name="lsp-config-isis-ignore-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_isis_relative_metric(self):
    """
    Getter method for lsp_config_isis_relative_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_relative_metric (uint32)

    YANG Description: ISIS relative metric
    """
    return self.__lsp_config_isis_relative_metric
      
  def _set_lsp_config_isis_relative_metric(self, v, load=False):
    """
    Setter method for lsp_config_isis_relative_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_relative_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_isis_relative_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_isis_relative_metric() directly.

    YANG Description: ISIS relative metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-relative-metric", rest_name="lsp-config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_isis_relative_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-relative-metric", rest_name="lsp-config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_isis_relative_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_isis_relative_metric(self):
    self.__lsp_config_isis_relative_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-relative-metric", rest_name="lsp-config-isis-relative-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_isis_announce_configured(self):
    """
    Getter method for lsp_config_isis_announce_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_announce_configured (boolean)

    YANG Description: ISIS anounce metric
    """
    return self.__lsp_config_isis_announce_configured
      
  def _set_lsp_config_isis_announce_configured(self, v, load=False):
    """
    Setter method for lsp_config_isis_announce_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_announce_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_isis_announce_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_isis_announce_configured() directly.

    YANG Description: ISIS anounce metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-announce-configured", rest_name="lsp-config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_isis_announce_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-announce-configured", rest_name="lsp-config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_isis_announce_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_isis_announce_configured(self):
    self.__lsp_config_isis_announce_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-isis-announce-configured", rest_name="lsp-config-isis-announce-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_isis_announce_metric(self):
    """
    Getter method for lsp_config_isis_announce_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_announce_metric (uint32)

    YANG Description: ISIS anounce metric
    """
    return self.__lsp_config_isis_announce_metric
      
  def _set_lsp_config_isis_announce_metric(self, v, load=False):
    """
    Setter method for lsp_config_isis_announce_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_isis_announce_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_isis_announce_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_isis_announce_metric() directly.

    YANG Description: ISIS anounce metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-announce-metric", rest_name="lsp-config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_isis_announce_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-announce-metric", rest_name="lsp-config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_isis_announce_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_isis_announce_metric(self):
    self.__lsp_config_isis_announce_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-isis-announce-metric", rest_name="lsp-config-isis-announce-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_frr_configured(self):
    """
    Getter method for lsp_config_frr_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_configured (boolean)

    YANG Description: LSP is adaptive
    """
    return self.__lsp_config_frr_configured
      
  def _set_lsp_config_frr_configured(self, v, load=False):
    """
    Setter method for lsp_config_frr_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_configured() directly.

    YANG Description: LSP is adaptive
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-configured", rest_name="lsp-config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-configured", rest_name="lsp-config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_configured(self):
    self.__lsp_config_frr_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-configured", rest_name="lsp-config-frr-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_one_to_one(self):
    """
    Getter method for lsp_config_frr_one_to_one, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_one_to_one (boolean)

    YANG Description: LSP one-to-one detour frr
    """
    return self.__lsp_config_frr_one_to_one
      
  def _set_lsp_config_frr_one_to_one(self, v, load=False):
    """
    Setter method for lsp_config_frr_one_to_one, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_one_to_one (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_one_to_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_one_to_one() directly.

    YANG Description: LSP one-to-one detour frr
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-one", rest_name="lsp-config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_one_to_one must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-one", rest_name="lsp-config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_one_to_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_one_to_one(self):
    self.__lsp_config_frr_one_to_one = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-one", rest_name="lsp-config-frr-one-to-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_one_to_many(self):
    """
    Getter method for lsp_config_frr_one_to_many, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_one_to_many (boolean)

    YANG Description: LSP one-to-many backup frr
    """
    return self.__lsp_config_frr_one_to_many
      
  def _set_lsp_config_frr_one_to_many(self, v, load=False):
    """
    Setter method for lsp_config_frr_one_to_many, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_one_to_many (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_one_to_many is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_one_to_many() directly.

    YANG Description: LSP one-to-many backup frr
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-many", rest_name="lsp-config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_one_to_many must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-many", rest_name="lsp-config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_one_to_many = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_one_to_many(self):
    self.__lsp_config_frr_one_to_many = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-one-to-many", rest_name="lsp-config-frr-one-to-many", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_priority_configured(self):
    """
    Getter method for lsp_config_frr_priority_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_priority_configured (boolean)

    YANG Description: LSP FRR priority configured
    """
    return self.__lsp_config_frr_priority_configured
      
  def _set_lsp_config_frr_priority_configured(self, v, load=False):
    """
    Setter method for lsp_config_frr_priority_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_priority_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_priority_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_priority_configured() directly.

    YANG Description: LSP FRR priority configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-priority-configured", rest_name="lsp-config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_priority_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-priority-configured", rest_name="lsp-config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_priority_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_priority_configured(self):
    self.__lsp_config_frr_priority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-priority-configured", rest_name="lsp-config-frr-priority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_setup_priority(self):
    """
    Getter method for lsp_config_frr_setup_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_setup_priority (uint8)

    YANG Description: LSP FRR setup priority
    """
    return self.__lsp_config_frr_setup_priority
      
  def _set_lsp_config_frr_setup_priority(self, v, load=False):
    """
    Setter method for lsp_config_frr_setup_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_setup_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_setup_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_setup_priority() directly.

    YANG Description: LSP FRR setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-setup-priority", rest_name="lsp-config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_setup_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-setup-priority", rest_name="lsp-config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_frr_setup_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_setup_priority(self):
    self.__lsp_config_frr_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-setup-priority", rest_name="lsp-config-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_frr_holding_priority(self):
    """
    Getter method for lsp_config_frr_holding_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_holding_priority (uint8)

    YANG Description: LSP FRR holding priority
    """
    return self.__lsp_config_frr_holding_priority
      
  def _set_lsp_config_frr_holding_priority(self, v, load=False):
    """
    Setter method for lsp_config_frr_holding_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_holding_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_holding_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_holding_priority() directly.

    YANG Description: LSP FRR holding priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-holding-priority", rest_name="lsp-config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_holding_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-holding-priority", rest_name="lsp-config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_frr_holding_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_holding_priority(self):
    self.__lsp_config_frr_holding_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-holding-priority", rest_name="lsp-config-frr-holding-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_frr_hop_limit_configured(self):
    """
    Getter method for lsp_config_frr_hop_limit_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_hop_limit_configured (boolean)

    YANG Description: LSP FRR hoplimit configured
    """
    return self.__lsp_config_frr_hop_limit_configured
      
  def _set_lsp_config_frr_hop_limit_configured(self, v, load=False):
    """
    Setter method for lsp_config_frr_hop_limit_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_hop_limit_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_hop_limit_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_hop_limit_configured() directly.

    YANG Description: LSP FRR hoplimit configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hop-limit-configured", rest_name="lsp-config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_hop_limit_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hop-limit-configured", rest_name="lsp-config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_hop_limit_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_hop_limit_configured(self):
    self.__lsp_config_frr_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hop-limit-configured", rest_name="lsp-config-frr-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_hop_limit(self):
    """
    Getter method for lsp_config_frr_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_hop_limit (uint8)

    YANG Description: LSP FRR hop-limit
    """
    return self.__lsp_config_frr_hop_limit
      
  def _set_lsp_config_frr_hop_limit(self, v, load=False):
    """
    Setter method for lsp_config_frr_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_hop_limit() directly.

    YANG Description: LSP FRR hop-limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-hop-limit", rest_name="lsp-config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-hop-limit", rest_name="lsp-config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_frr_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_hop_limit(self):
    self.__lsp_config_frr_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-frr-hop-limit", rest_name="lsp-config-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_frr_bandwidth_configured(self):
    """
    Getter method for lsp_config_frr_bandwidth_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_bandwidth_configured (boolean)

    YANG Description: LSP FRR bandwidth configured
    """
    return self.__lsp_config_frr_bandwidth_configured
      
  def _set_lsp_config_frr_bandwidth_configured(self, v, load=False):
    """
    Setter method for lsp_config_frr_bandwidth_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_bandwidth_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_bandwidth_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_bandwidth_configured() directly.

    YANG Description: LSP FRR bandwidth configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-bandwidth-configured", rest_name="lsp-config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_bandwidth_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-bandwidth-configured", rest_name="lsp-config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_bandwidth_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_bandwidth_configured(self):
    self.__lsp_config_frr_bandwidth_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-bandwidth-configured", rest_name="lsp-config-frr-bandwidth-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_bandwidth(self):
    """
    Getter method for lsp_config_frr_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_bandwidth (uint32)

    YANG Description: LSP FRR bandwidth
    """
    return self.__lsp_config_frr_bandwidth
      
  def _set_lsp_config_frr_bandwidth(self, v, load=False):
    """
    Setter method for lsp_config_frr_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_bandwidth() directly.

    YANG Description: LSP FRR bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-frr-bandwidth", rest_name="lsp-config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-frr-bandwidth", rest_name="lsp-config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_frr_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_bandwidth(self):
    self.__lsp_config_frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-frr-bandwidth", rest_name="lsp-config-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_frr_admin_group_configured(self):
    """
    Getter method for lsp_config_frr_admin_group_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_admin_group_configured (boolean)

    YANG Description: LSP admin group configured
    """
    return self.__lsp_config_frr_admin_group_configured
      
  def _set_lsp_config_frr_admin_group_configured(self, v, load=False):
    """
    Setter method for lsp_config_frr_admin_group_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_admin_group_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_admin_group_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_admin_group_configured() directly.

    YANG Description: LSP admin group configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-admin-group-configured", rest_name="lsp-config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_admin_group_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-admin-group-configured", rest_name="lsp-config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_admin_group_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_admin_group_configured(self):
    self.__lsp_config_frr_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-admin-group-configured", rest_name="lsp-config-frr-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_admin_groups(self):
    """
    Getter method for lsp_config_frr_admin_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_admin_groups (container)
    """
    return self.__lsp_config_frr_admin_groups
      
  def _set_lsp_config_frr_admin_groups(self, v, load=False):
    """
    Setter method for lsp_config_frr_admin_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_frr_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_admin_groups() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lsp_config_frr_admin_groups.lsp_config_frr_admin_groups, is_container='container', presence=False, yang_name="lsp-config-frr-admin-groups", rest_name="lsp-config-frr-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lsp_config_frr_admin_groups.lsp_config_frr_admin_groups, is_container='container', presence=False, yang_name="lsp-config-frr-admin-groups", rest_name="lsp-config-frr-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__lsp_config_frr_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_admin_groups(self):
    self.__lsp_config_frr_admin_groups = YANGDynClass(base=lsp_config_frr_admin_groups.lsp_config_frr_admin_groups, is_container='container', presence=False, yang_name="lsp-config-frr-admin-groups", rest_name="lsp-config-frr-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_lsp_config_exclude_interface_configured(self):
    """
    Getter method for lsp_config_exclude_interface_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_exclude_interface_configured (boolean)

    YANG Description: LSP exclude-interface configured
    """
    return self.__lsp_config_exclude_interface_configured
      
  def _set_lsp_config_exclude_interface_configured(self, v, load=False):
    """
    Setter method for lsp_config_exclude_interface_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_exclude_interface_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_exclude_interface_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_exclude_interface_configured() directly.

    YANG Description: LSP exclude-interface configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-configured", rest_name="lsp-config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_exclude_interface_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-configured", rest_name="lsp-config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_exclude_interface_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_exclude_interface_configured(self):
    self.__lsp_config_exclude_interface_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-configured", rest_name="lsp-config-exclude-interface-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_exclude_interfaces(self):
    """
    Getter method for lsp_config_exclude_interfaces, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_exclude_interfaces (list)
    """
    return self.__lsp_config_exclude_interfaces
      
  def _set_lsp_config_exclude_interfaces(self, v, load=False):
    """
    Setter method for lsp_config_exclude_interfaces, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive/output/lsp/show_mpls_lsp_extensive_info/show_mpls_lsp_common_info/lsp_config_exclude_interfaces (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_exclude_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_exclude_interfaces() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_name",lsp_config_exclude_interfaces.lsp_config_exclude_interfaces, yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions=None), is_container='list', yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_exclude_interfaces must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_name",lsp_config_exclude_interfaces.lsp_config_exclude_interfaces, yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions=None), is_container='list', yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__lsp_config_exclude_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_exclude_interfaces(self):
    self.__lsp_config_exclude_interfaces = YANGDynClass(base=YANGListType("interface_name",lsp_config_exclude_interfaces.lsp_config_exclude_interfaces, yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-name', extensions=None), is_container='list', yang_name="lsp-config-exclude-interfaces", rest_name="lsp-config-exclude-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)

  lsp_config_admin_up = __builtin__.property(_get_lsp_config_admin_up, _set_lsp_config_admin_up)
  lsp_config_from_address = __builtin__.property(_get_lsp_config_from_address, _set_lsp_config_from_address)
  lsp_config_to_address = __builtin__.property(_get_lsp_config_to_address, _set_lsp_config_to_address)
  lsp_config_type_bypass = __builtin__.property(_get_lsp_config_type_bypass, _set_lsp_config_type_bypass)
  lsp_config_type_dynamic = __builtin__.property(_get_lsp_config_type_dynamic, _set_lsp_config_type_dynamic)
  lsp_config_adaptive = __builtin__.property(_get_lsp_config_adaptive, _set_lsp_config_adaptive)
  lsp_config_ospf_area = __builtin__.property(_get_lsp_config_ospf_area, _set_lsp_config_ospf_area)
  lsp_config_isis_level = __builtin__.property(_get_lsp_config_isis_level, _set_lsp_config_isis_level)
  lsp_config_number_of_retries_configured = __builtin__.property(_get_lsp_config_number_of_retries_configured, _set_lsp_config_number_of_retries_configured)
  lsp_config_number_of_retries = __builtin__.property(_get_lsp_config_number_of_retries, _set_lsp_config_number_of_retries)
  lsp_config_path_select_mode_configured = __builtin__.property(_get_lsp_config_path_select_mode_configured, _set_lsp_config_path_select_mode_configured)
  lsp_config_path_select_mode_manual = __builtin__.property(_get_lsp_config_path_select_mode_manual, _set_lsp_config_path_select_mode_manual)
  lsp_config_path_select_mode_unconditional = __builtin__.property(_get_lsp_config_path_select_mode_unconditional, _set_lsp_config_path_select_mode_unconditional)
  lsp_config_path_select_primary = __builtin__.property(_get_lsp_config_path_select_primary, _set_lsp_config_path_select_primary)
  lsp_config_path_select_secondary = __builtin__.property(_get_lsp_config_path_select_secondary, _set_lsp_config_path_select_secondary)
  lsp_config_shortcut_ospf = __builtin__.property(_get_lsp_config_shortcut_ospf, _set_lsp_config_shortcut_ospf)
  lsp_config_shortcut_area_configured = __builtin__.property(_get_lsp_config_shortcut_area_configured, _set_lsp_config_shortcut_area_configured)
  lsp_config_shortcut_area = __builtin__.property(_get_lsp_config_shortcut_area, _set_lsp_config_shortcut_area)
  lsp_config_notify_ospf = __builtin__.property(_get_lsp_config_notify_ospf, _set_lsp_config_notify_ospf)
  lsp_config_shortcut_isis = __builtin__.property(_get_lsp_config_shortcut_isis, _set_lsp_config_shortcut_isis)
  lsp_config_shortcut_isis_level_configured = __builtin__.property(_get_lsp_config_shortcut_isis_level_configured, _set_lsp_config_shortcut_isis_level_configured)
  lsp_config_isis_shortcut_level = __builtin__.property(_get_lsp_config_isis_shortcut_level, _set_lsp_config_isis_shortcut_level)
  lsp_config_notify_isis = __builtin__.property(_get_lsp_config_notify_isis, _set_lsp_config_notify_isis)
  lsp_config_metric_configured = __builtin__.property(_get_lsp_config_metric_configured, _set_lsp_config_metric_configured)
  lsp_config_metric = __builtin__.property(_get_lsp_config_metric, _set_lsp_config_metric)
  lsp_config_ospf_ignore_metric = __builtin__.property(_get_lsp_config_ospf_ignore_metric, _set_lsp_config_ospf_ignore_metric)
  lsp_config_ospf_relative_metric = __builtin__.property(_get_lsp_config_ospf_relative_metric, _set_lsp_config_ospf_relative_metric)
  lsp_config_ospf_announce_metric = __builtin__.property(_get_lsp_config_ospf_announce_metric, _set_lsp_config_ospf_announce_metric)
  lsp_config_ospf_aaf = __builtin__.property(_get_lsp_config_ospf_aaf, _set_lsp_config_ospf_aaf)
  lsp_config_isis_ignore_metric = __builtin__.property(_get_lsp_config_isis_ignore_metric, _set_lsp_config_isis_ignore_metric)
  lsp_config_isis_relative_metric = __builtin__.property(_get_lsp_config_isis_relative_metric, _set_lsp_config_isis_relative_metric)
  lsp_config_isis_announce_configured = __builtin__.property(_get_lsp_config_isis_announce_configured, _set_lsp_config_isis_announce_configured)
  lsp_config_isis_announce_metric = __builtin__.property(_get_lsp_config_isis_announce_metric, _set_lsp_config_isis_announce_metric)
  lsp_config_frr_configured = __builtin__.property(_get_lsp_config_frr_configured, _set_lsp_config_frr_configured)
  lsp_config_frr_one_to_one = __builtin__.property(_get_lsp_config_frr_one_to_one, _set_lsp_config_frr_one_to_one)
  lsp_config_frr_one_to_many = __builtin__.property(_get_lsp_config_frr_one_to_many, _set_lsp_config_frr_one_to_many)
  lsp_config_frr_priority_configured = __builtin__.property(_get_lsp_config_frr_priority_configured, _set_lsp_config_frr_priority_configured)
  lsp_config_frr_setup_priority = __builtin__.property(_get_lsp_config_frr_setup_priority, _set_lsp_config_frr_setup_priority)
  lsp_config_frr_holding_priority = __builtin__.property(_get_lsp_config_frr_holding_priority, _set_lsp_config_frr_holding_priority)
  lsp_config_frr_hop_limit_configured = __builtin__.property(_get_lsp_config_frr_hop_limit_configured, _set_lsp_config_frr_hop_limit_configured)
  lsp_config_frr_hop_limit = __builtin__.property(_get_lsp_config_frr_hop_limit, _set_lsp_config_frr_hop_limit)
  lsp_config_frr_bandwidth_configured = __builtin__.property(_get_lsp_config_frr_bandwidth_configured, _set_lsp_config_frr_bandwidth_configured)
  lsp_config_frr_bandwidth = __builtin__.property(_get_lsp_config_frr_bandwidth, _set_lsp_config_frr_bandwidth)
  lsp_config_frr_admin_group_configured = __builtin__.property(_get_lsp_config_frr_admin_group_configured, _set_lsp_config_frr_admin_group_configured)
  lsp_config_frr_admin_groups = __builtin__.property(_get_lsp_config_frr_admin_groups, _set_lsp_config_frr_admin_groups)
  lsp_config_exclude_interface_configured = __builtin__.property(_get_lsp_config_exclude_interface_configured, _set_lsp_config_exclude_interface_configured)
  lsp_config_exclude_interfaces = __builtin__.property(_get_lsp_config_exclude_interfaces, _set_lsp_config_exclude_interfaces)


  _pyangbind_elements = {'lsp_config_admin_up': lsp_config_admin_up, 'lsp_config_from_address': lsp_config_from_address, 'lsp_config_to_address': lsp_config_to_address, 'lsp_config_type_bypass': lsp_config_type_bypass, 'lsp_config_type_dynamic': lsp_config_type_dynamic, 'lsp_config_adaptive': lsp_config_adaptive, 'lsp_config_ospf_area': lsp_config_ospf_area, 'lsp_config_isis_level': lsp_config_isis_level, 'lsp_config_number_of_retries_configured': lsp_config_number_of_retries_configured, 'lsp_config_number_of_retries': lsp_config_number_of_retries, 'lsp_config_path_select_mode_configured': lsp_config_path_select_mode_configured, 'lsp_config_path_select_mode_manual': lsp_config_path_select_mode_manual, 'lsp_config_path_select_mode_unconditional': lsp_config_path_select_mode_unconditional, 'lsp_config_path_select_primary': lsp_config_path_select_primary, 'lsp_config_path_select_secondary': lsp_config_path_select_secondary, 'lsp_config_shortcut_ospf': lsp_config_shortcut_ospf, 'lsp_config_shortcut_area_configured': lsp_config_shortcut_area_configured, 'lsp_config_shortcut_area': lsp_config_shortcut_area, 'lsp_config_notify_ospf': lsp_config_notify_ospf, 'lsp_config_shortcut_isis': lsp_config_shortcut_isis, 'lsp_config_shortcut_isis_level_configured': lsp_config_shortcut_isis_level_configured, 'lsp_config_isis_shortcut_level': lsp_config_isis_shortcut_level, 'lsp_config_notify_isis': lsp_config_notify_isis, 'lsp_config_metric_configured': lsp_config_metric_configured, 'lsp_config_metric': lsp_config_metric, 'lsp_config_ospf_ignore_metric': lsp_config_ospf_ignore_metric, 'lsp_config_ospf_relative_metric': lsp_config_ospf_relative_metric, 'lsp_config_ospf_announce_metric': lsp_config_ospf_announce_metric, 'lsp_config_ospf_aaf': lsp_config_ospf_aaf, 'lsp_config_isis_ignore_metric': lsp_config_isis_ignore_metric, 'lsp_config_isis_relative_metric': lsp_config_isis_relative_metric, 'lsp_config_isis_announce_configured': lsp_config_isis_announce_configured, 'lsp_config_isis_announce_metric': lsp_config_isis_announce_metric, 'lsp_config_frr_configured': lsp_config_frr_configured, 'lsp_config_frr_one_to_one': lsp_config_frr_one_to_one, 'lsp_config_frr_one_to_many': lsp_config_frr_one_to_many, 'lsp_config_frr_priority_configured': lsp_config_frr_priority_configured, 'lsp_config_frr_setup_priority': lsp_config_frr_setup_priority, 'lsp_config_frr_holding_priority': lsp_config_frr_holding_priority, 'lsp_config_frr_hop_limit_configured': lsp_config_frr_hop_limit_configured, 'lsp_config_frr_hop_limit': lsp_config_frr_hop_limit, 'lsp_config_frr_bandwidth_configured': lsp_config_frr_bandwidth_configured, 'lsp_config_frr_bandwidth': lsp_config_frr_bandwidth, 'lsp_config_frr_admin_group_configured': lsp_config_frr_admin_group_configured, 'lsp_config_frr_admin_groups': lsp_config_frr_admin_groups, 'lsp_config_exclude_interface_configured': lsp_config_exclude_interface_configured, 'lsp_config_exclude_interfaces': lsp_config_exclude_interfaces, }


