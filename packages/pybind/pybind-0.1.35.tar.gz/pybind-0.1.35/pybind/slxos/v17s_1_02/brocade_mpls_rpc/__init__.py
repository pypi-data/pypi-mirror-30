
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import show_mpls_summary
import show_mpls_te_path
import show_mpls_statistics_ldp_transit
import show_mpls_statistics_ldp_tunnel
import show_mpls_ldp_path
import show_mpls_ldp_path_one
import show_mpls_ldp_targeted_peer_all
import show_mpls_ldp_targeted_peer_one
import show_mpls_ldp_fec
import show_mpls_ldp_fec_summary
import show_mpls_ldp_fec_prefix
import show_mpls_ldp_fec_prefix_prefix
import show_mpls_ldp_fec_prefix_prefix_longer
import show_mpls_ldp_fec_prefix_filtered
import show_mpls_ldp_fec_prefix_prefix_filter
import show_mpls_ldp_fec_vc
import show_mpls_ldp_fec_vc_id
import show_mpls_ldp_peer_br
import show_mpls_ldp_peer_det
import show_mpls_ldp_peer_det_rec
import show_mpls_policy
import show_mpls_interface
import show_mpls_interface_detail
import show_mpls_interface_one_interface
import show_mpls_rsvp
import show_mpls_rsvp_statistics
import show_mpls_ldp_statistics
import show_mpls_rsvp_interface
import show_mpls_rsvp_interface_detail
import show_mpls_rsvp_interface_one_interface
import show_mpls_rsvp_neighbor
import show_mpls_rsvp_neighbor_detail
import show_mpls_rsvp_neighbor_one_neighbor
import show_mpls_rsvp_session
import show_mpls_rsvp_session_wide
import show_mpls_rsvp_session_detail
import show_mpls_rsvp_session_extensive
import show_mpls_rsvp_session_name
import show_mpls_lsp
import show_mpls_lsp_detail
import show_mpls_lsp_extensive
import show_mpls_lsp_debug
import show_mpls_lsp_name_detail
import show_mpls_lsp_name_extensive
import show_mpls_lsp_name_debug
import show_mpls_bypass_lsp
import show_mpls_bypass_lsp_detail
import show_mpls_bypass_bypass_lsp_extensive
import show_mpls_bypass_lsp_debug
import show_mpls_bypass_lsp_name_detail
import show_mpls_bypass_lsp_name_extensive
import show_mpls_bypass_lsp_name_debug
import get_mpls_ldp_neighbor_brief
import get_mpls_ldp_neighbor_detail
import get_mpls_ldp_neighbor_one
import show_mpls_bfd
import show_mpls_ldp
import show_mpls_statistics_oam
import get_mpls_ldp_session_brief
import get_mpls_ldp_session_detail
import get_mpls_ldp_session_one
import get_mpls_autobw_template_brief
import get_mpls_autobw_template_detail
import get_mpls_autobw_template_one
import show_mpls_dynamic_bypass
import show_mpls_dynamic_bypass_interface_brief
import show_mpls_route
import clear_mpls_lsp
import clear_mpls_bypass_lsp
import mpls_reopt_lsp
import clear_mpls_rsvp_statistics
import clear_mpls_rsvp_statistics_neighbor
import clear_mpls_ldp_statistics
import clear_mpls_statistics
import clear_mpls_statistics_ldp_tunnel
import clear_mpls_ldp_neighbor
import clear_mpls_statistics_ldp_transit
import clear_mpls_auto_bandwidth_statistics_lsp
import clear_mpls_auto_bandwidth_sample_history_lsp
import clear_mpls_auto_bandwidth_statistics_all
import clear_mpls_auto_bandwidth_sample_history_all
import mpls_adjust_bandwidth_lsp
import mpls_adjust_bandwidth_lsp_all
import ping_mpls
class brocade_mpls(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This management module is an instrumentation to manage
mpls protocol.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__show_mpls_summary','__show_mpls_te_path','__show_mpls_statistics_ldp_transit','__show_mpls_statistics_ldp_tunnel','__show_mpls_ldp_path','__show_mpls_ldp_path_one','__show_mpls_ldp_targeted_peer_all','__show_mpls_ldp_targeted_peer_one','__show_mpls_ldp_fec','__show_mpls_ldp_fec_summary','__show_mpls_ldp_fec_prefix','__show_mpls_ldp_fec_prefix_prefix','__show_mpls_ldp_fec_prefix_prefix_longer','__show_mpls_ldp_fec_prefix_filtered','__show_mpls_ldp_fec_prefix_prefix_filter','__show_mpls_ldp_fec_vc','__show_mpls_ldp_fec_vc_id','__show_mpls_ldp_peer_br','__show_mpls_ldp_peer_det','__show_mpls_ldp_peer_det_rec','__show_mpls_policy','__show_mpls_interface','__show_mpls_interface_detail','__show_mpls_interface_one_interface','__show_mpls_rsvp','__show_mpls_rsvp_statistics','__show_mpls_ldp_statistics','__show_mpls_rsvp_interface','__show_mpls_rsvp_interface_detail','__show_mpls_rsvp_interface_one_interface','__show_mpls_rsvp_neighbor','__show_mpls_rsvp_neighbor_detail','__show_mpls_rsvp_neighbor_one_neighbor','__show_mpls_rsvp_session','__show_mpls_rsvp_session_wide','__show_mpls_rsvp_session_detail','__show_mpls_rsvp_session_extensive','__show_mpls_rsvp_session_name','__show_mpls_lsp','__show_mpls_lsp_detail','__show_mpls_lsp_extensive','__show_mpls_lsp_debug','__show_mpls_lsp_name_detail','__show_mpls_lsp_name_extensive','__show_mpls_lsp_name_debug','__show_mpls_bypass_lsp','__show_mpls_bypass_lsp_detail','__show_mpls_bypass_bypass_lsp_extensive','__show_mpls_bypass_lsp_debug','__show_mpls_bypass_lsp_name_detail','__show_mpls_bypass_lsp_name_extensive','__show_mpls_bypass_lsp_name_debug','__get_mpls_ldp_neighbor_brief','__get_mpls_ldp_neighbor_detail','__get_mpls_ldp_neighbor_one','__show_mpls_bfd','__show_mpls_ldp','__show_mpls_statistics_oam','__get_mpls_ldp_session_brief','__get_mpls_ldp_session_detail','__get_mpls_ldp_session_one','__get_mpls_autobw_template_brief','__get_mpls_autobw_template_detail','__get_mpls_autobw_template_one','__show_mpls_dynamic_bypass','__show_mpls_dynamic_bypass_interface_brief','__show_mpls_route','__clear_mpls_lsp','__clear_mpls_bypass_lsp','__mpls_reopt_lsp','__clear_mpls_rsvp_statistics','__clear_mpls_rsvp_statistics_neighbor','__clear_mpls_ldp_statistics','__clear_mpls_statistics','__clear_mpls_statistics_ldp_tunnel','__clear_mpls_ldp_neighbor','__clear_mpls_statistics_ldp_transit','__clear_mpls_auto_bandwidth_statistics_lsp','__clear_mpls_auto_bandwidth_sample_history_lsp','__clear_mpls_auto_bandwidth_statistics_all','__clear_mpls_auto_bandwidth_sample_history_all','__mpls_adjust_bandwidth_lsp','__mpls_adjust_bandwidth_lsp_all','__ping_mpls',)

  _yang_name = 'brocade-mpls'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__show_mpls_statistics_oam = YANGDynClass(base=show_mpls_statistics_oam.show_mpls_statistics_oam, is_leaf=True, yang_name="show-mpls-statistics-oam", rest_name="show-mpls-statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsOam'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_route = YANGDynClass(base=show_mpls_route.show_mpls_route, is_leaf=True, yang_name="show-mpls-route", rest_name="show-mpls-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRoute'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_ldp_neighbor = YANGDynClass(base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__mpls_adjust_bandwidth_lsp = YANGDynClass(base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__mpls_reopt_lsp = YANGDynClass(base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsReoptimize'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_peer_det = YANGDynClass(base=show_mpls_ldp_peer_det.show_mpls_ldp_peer_det, is_leaf=True, yang_name="show-mpls-ldp-peer-det", rest_name="show-mpls-ldp-peer-det", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_auto_bandwidth_statistics_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_lsp_name_extensive = YANGDynClass(base=show_mpls_bypass_lsp_name_extensive.show_mpls_bypass_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-extensive", rest_name="show-mpls-bypass-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp_detail = YANGDynClass(base=show_mpls_lsp_detail.show_mpls_lsp_detail, is_leaf=True, yang_name="show-mpls-lsp-detail", rest_name="show-mpls-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_neighbor_one_neighbor = YANGDynClass(base=show_mpls_rsvp_neighbor_one_neighbor.show_mpls_rsvp_neighbor_one_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-one-neighbor", rest_name="show-mpls-rsvp-neighbor-one-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_ldp_session_detail = YANGDynClass(base=get_mpls_ldp_session_detail.get_mpls_ldp_session_detail, is_leaf=True, yang_name="get-mpls-ldp-session-detail", rest_name="get-mpls-ldp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_prefix_prefix_filter = YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix_filter.show_mpls_ldp_fec_prefix_prefix_filter, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-filter", rest_name="show-mpls-ldp-fec-prefix-prefix-filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_auto_bandwidth_sample_history_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistory'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_rsvp_statistics = YANGDynClass(base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_summary = YANGDynClass(base=show_mpls_ldp_fec_summary.show_mpls_ldp_fec_summary, is_leaf=True, yang_name="show-mpls-ldp-fec-summary", rest_name="show-mpls-ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_prefix = YANGDynClass(base=show_mpls_ldp_fec_prefix.show_mpls_ldp_fec_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix", rest_name="show-mpls-ldp-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp_name_debug = YANGDynClass(base=show_mpls_lsp_name_debug.show_mpls_lsp_name_debug, is_leaf=True, yang_name="show-mpls-lsp-name-debug", rest_name="show-mpls-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_vc_id = YANGDynClass(base=show_mpls_ldp_fec_vc_id.show_mpls_ldp_fec_vc_id, is_leaf=True, yang_name="show-mpls-ldp-fec-vc-id", rest_name="show-mpls-ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_lsp_name_detail = YANGDynClass(base=show_mpls_bypass_lsp_name_detail.show_mpls_bypass_lsp_name_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-detail", rest_name="show-mpls-bypass-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_autobw_template_brief = YANGDynClass(base=get_mpls_autobw_template_brief.get_mpls_autobw_template_brief, is_leaf=True, yang_name="get-mpls-autobw-template-brief", rest_name="get-mpls-autobw-template-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_statistics_ldp_tunnel = YANGDynClass(base=show_mpls_statistics_ldp_tunnel.show_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="show-mpls-statistics-ldp-tunnel", rest_name="show-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_ldp_neighbor_one = YANGDynClass(base=get_mpls_ldp_neighbor_one.get_mpls_ldp_neighbor_one, is_leaf=True, yang_name="get-mpls-ldp-neighbor-one", rest_name="get-mpls-ldp-neighbor-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_lsp_name_debug = YANGDynClass(base=show_mpls_bypass_lsp_name_debug.show_mpls_bypass_lsp_name_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-debug", rest_name="show-mpls-bypass-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_lsp = YANGDynClass(base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_ldp_neighbor_brief = YANGDynClass(base=get_mpls_ldp_neighbor_brief.get_mpls_ldp_neighbor_brief, is_leaf=True, yang_name="get-mpls-ldp-neighbor-brief", rest_name="get-mpls-ldp-neighbor-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_ldp_session_one = YANGDynClass(base=get_mpls_ldp_session_one.get_mpls_ldp_session_one, is_leaf=True, yang_name="get-mpls-ldp-session-one", rest_name="get-mpls-ldp-session-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_targeted_peer_one = YANGDynClass(base=show_mpls_ldp_targeted_peer_one.show_mpls_ldp_targeted_peer_one, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-one", rest_name="show-mpls-ldp-targeted-peer-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_bypass_lsp = YANGDynClass(base=clear_mpls_bypass_lsp.clear_mpls_bypass_lsp, is_leaf=True, yang_name="clear-mpls-bypass-lsp", rest_name="clear-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_vc = YANGDynClass(base=show_mpls_ldp_fec_vc.show_mpls_ldp_fec_vc, is_leaf=True, yang_name="show-mpls-ldp-fec-vc", rest_name="show-mpls-ldp-fec-vc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_neighbor = YANGDynClass(base=show_mpls_rsvp_neighbor.show_mpls_rsvp_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor", rest_name="show-mpls-rsvp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_auto_bandwidth_sample_history_all = YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_all.clear_mpls_auto_bandwidth_sample_history_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-all", rest_name="clear-mpls-auto-bandwidth-sample-history-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistoryAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_te_path = YANGDynClass(base=show_mpls_te_path.show_mpls_te_path, is_leaf=True, yang_name="show-mpls-te-path", rest_name="show-mpls-te-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsTePath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bfd = YANGDynClass(base=show_mpls_bfd.show_mpls_bfd, is_leaf=True, yang_name="show-mpls-bfd", rest_name="show-mpls-bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_targeted_peer_all = YANGDynClass(base=show_mpls_ldp_targeted_peer_all.show_mpls_ldp_targeted_peer_all, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-all", rest_name="show-mpls-ldp-targeted-peer-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_lsp = YANGDynClass(base=show_mpls_bypass_lsp.show_mpls_bypass_lsp, is_leaf=True, yang_name="show-mpls-bypass-lsp", rest_name="show-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_session = YANGDynClass(base=show_mpls_rsvp_session.show_mpls_rsvp_session, is_leaf=True, yang_name="show-mpls-rsvp-session", rest_name="show-mpls-rsvp-session", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp_name_extensive = YANGDynClass(base=show_mpls_lsp_name_extensive.show_mpls_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-lsp-name-extensive", rest_name="show-mpls-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_session_name = YANGDynClass(base=show_mpls_rsvp_session_name.show_mpls_rsvp_session_name, is_leaf=True, yang_name="show-mpls-rsvp-session-name", rest_name="show-mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_interface_detail = YANGDynClass(base=show_mpls_rsvp_interface_detail.show_mpls_rsvp_interface_detail, is_leaf=True, yang_name="show-mpls-rsvp-interface-detail", rest_name="show-mpls-rsvp-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_dynamic_bypass = YANGDynClass(base=show_mpls_dynamic_bypass.show_mpls_dynamic_bypass, is_leaf=True, yang_name="show-mpls-dynamic-bypass", rest_name="show-mpls-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_session_detail = YANGDynClass(base=show_mpls_rsvp_session_detail.show_mpls_rsvp_session_detail, is_leaf=True, yang_name="show-mpls-rsvp-session-detail", rest_name="show-mpls-rsvp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__mpls_adjust_bandwidth_lsp_all = YANGDynClass(base=mpls_adjust_bandwidth_lsp_all.mpls_adjust_bandwidth_lsp_all, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp-all", rest_name="mpls-adjust-bandwidth-lsp-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidthAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_bypass_lsp_extensive = YANGDynClass(base=show_mpls_bypass_bypass_lsp_extensive.show_mpls_bypass_bypass_lsp_extensive, is_leaf=True, yang_name="show-mpls-bypass-bypass-lsp-extensive", rest_name="show-mpls-bypass-bypass-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp_debug = YANGDynClass(base=show_mpls_lsp_debug.show_mpls_lsp_debug, is_leaf=True, yang_name="show-mpls-lsp-debug", rest_name="show-mpls-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_statistics = YANGDynClass(base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_peer_br = YANGDynClass(base=show_mpls_ldp_peer_br.show_mpls_ldp_peer_br, is_leaf=True, yang_name="show-mpls-ldp-peer-br", rest_name="show-mpls-ldp-peer-br", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec = YANGDynClass(base=show_mpls_ldp_fec.show_mpls_ldp_fec, is_leaf=True, yang_name="show-mpls-ldp-fec", rest_name="show-mpls-ldp-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_autobw_template_detail = YANGDynClass(base=get_mpls_autobw_template_detail.get_mpls_autobw_template_detail, is_leaf=True, yang_name="get-mpls-autobw-template-detail", rest_name="get-mpls-autobw-template-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_policy = YANGDynClass(base=show_mpls_policy.show_mpls_policy, is_leaf=True, yang_name="show-mpls-policy", rest_name="show-mpls-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_interface_detail = YANGDynClass(base=show_mpls_interface_detail.show_mpls_interface_detail, is_leaf=True, yang_name="show-mpls-interface-detail", rest_name="show-mpls-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_statistics_ldp_tunnel = YANGDynClass(base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_session_extensive = YANGDynClass(base=show_mpls_rsvp_session_extensive.show_mpls_rsvp_session_extensive, is_leaf=True, yang_name="show-mpls-rsvp-session-extensive", rest_name="show-mpls-rsvp-session-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_summary = YANGDynClass(base=show_mpls_summary.show_mpls_summary, is_leaf=True, yang_name="show-mpls-summary", rest_name="show-mpls-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_ldp_neighbor_detail = YANGDynClass(base=get_mpls_ldp_neighbor_detail.get_mpls_ldp_neighbor_detail, is_leaf=True, yang_name="get-mpls-ldp-neighbor-detail", rest_name="get-mpls-ldp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp = YANGDynClass(base=show_mpls_rsvp.show_mpls_rsvp, is_leaf=True, yang_name="show-mpls-rsvp", rest_name="show-mpls-rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp = YANGDynClass(base=show_mpls_lsp.show_mpls_lsp, is_leaf=True, yang_name="show-mpls-lsp", rest_name="show-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_auto_bandwidth_statistics_all = YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_all.clear_mpls_auto_bandwidth_statistics_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-all", rest_name="clear-mpls-auto-bandwidth-statistics-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatisticsAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_statistics_ldp_transit = YANGDynClass(base=show_mpls_statistics_ldp_transit.show_mpls_statistics_ldp_transit, is_leaf=True, yang_name="show-mpls-statistics-ldp-transit", rest_name="show-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_prefix_filtered = YANGDynClass(base=show_mpls_ldp_fec_prefix_filtered.show_mpls_ldp_fec_prefix_filtered, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-filtered", rest_name="show-mpls-ldp-fec-prefix-filtered", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_statistics = YANGDynClass(base=show_mpls_ldp_statistics.show_mpls_ldp_statistics, is_leaf=True, yang_name="show-mpls-ldp-statistics", rest_name="show-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_ldp_session_brief = YANGDynClass(base=get_mpls_ldp_session_brief.get_mpls_ldp_session_brief, is_leaf=True, yang_name="get-mpls-ldp-session-brief", rest_name="get-mpls-ldp-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_statistics = YANGDynClass(base=show_mpls_rsvp_statistics.show_mpls_rsvp_statistics, is_leaf=True, yang_name="show-mpls-rsvp-statistics", rest_name="show-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_dynamic_bypass_interface_brief = YANGDynClass(base=show_mpls_dynamic_bypass_interface_brief.show_mpls_dynamic_bypass_interface_brief, is_leaf=True, yang_name="show-mpls-dynamic-bypass-interface-brief", rest_name="show-mpls-dynamic-bypass-interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_session_wide = YANGDynClass(base=show_mpls_rsvp_session_wide.show_mpls_rsvp_session_wide, is_leaf=True, yang_name="show-mpls-rsvp-session-wide", rest_name="show-mpls-rsvp-session-wide", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_prefix_prefix_longer = YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix_longer.show_mpls_ldp_fec_prefix_prefix_longer, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-longer", rest_name="show-mpls-ldp-fec-prefix-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_interface_one_interface = YANGDynClass(base=show_mpls_rsvp_interface_one_interface.show_mpls_rsvp_interface_one_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface-one-interface", rest_name="show-mpls-rsvp-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_lsp_detail = YANGDynClass(base=show_mpls_bypass_lsp_detail.show_mpls_bypass_lsp_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-detail", rest_name="show-mpls-bypass-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_path = YANGDynClass(base=show_mpls_ldp_path.show_mpls_ldp_path, is_leaf=True, yang_name="show-mpls-ldp-path", rest_name="show-mpls-ldp-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp_extensive = YANGDynClass(base=show_mpls_lsp_extensive.show_mpls_lsp_extensive, is_leaf=True, yang_name="show-mpls-lsp-extensive", rest_name="show-mpls-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_lsp_name_detail = YANGDynClass(base=show_mpls_lsp_name_detail.show_mpls_lsp_name_detail, is_leaf=True, yang_name="show-mpls-lsp-name-detail", rest_name="show-mpls-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp = YANGDynClass(base=show_mpls_ldp.show_mpls_ldp, is_leaf=True, yang_name="show-mpls-ldp", rest_name="show-mpls-ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_fec_prefix_prefix = YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix.show_mpls_ldp_fec_prefix_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix", rest_name="show-mpls-ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_path_one = YANGDynClass(base=show_mpls_ldp_path_one.show_mpls_ldp_path_one, is_leaf=True, yang_name="show-mpls-ldp-path-one", rest_name="show-mpls-ldp-path-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_ldp_peer_det_rec = YANGDynClass(base=show_mpls_ldp_peer_det_rec.show_mpls_ldp_peer_det_rec, is_leaf=True, yang_name="show-mpls-ldp-peer-det-rec", rest_name="show-mpls-ldp-peer-det-rec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__get_mpls_autobw_template_one = YANGDynClass(base=get_mpls_autobw_template_one.get_mpls_autobw_template_one, is_leaf=True, yang_name="get-mpls-autobw-template-one", rest_name="get-mpls-autobw-template-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_neighbor_detail = YANGDynClass(base=show_mpls_rsvp_neighbor_detail.show_mpls_rsvp_neighbor_detail, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-detail", rest_name="show-mpls-rsvp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_rsvp_interface = YANGDynClass(base=show_mpls_rsvp_interface.show_mpls_rsvp_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface", rest_name="show-mpls-rsvp-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__ping_mpls = YANGDynClass(base=ping_mpls.ping_mpls, is_leaf=True, yang_name="ping-mpls", rest_name="ping-mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsPing'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_bypass_lsp_debug = YANGDynClass(base=show_mpls_bypass_lsp_debug.show_mpls_bypass_lsp_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-debug", rest_name="show-mpls-bypass-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_rsvp_statistics_neighbor = YANGDynClass(base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatisticsNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_statistics_ldp_transit = YANGDynClass(base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_interface = YANGDynClass(base=show_mpls_interface.show_mpls_interface, is_leaf=True, yang_name="show-mpls-interface", rest_name="show-mpls-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__show_mpls_interface_one_interface = YANGDynClass(base=show_mpls_interface_one_interface.show_mpls_interface_one_interface, is_leaf=True, yang_name="show-mpls-interface-one-interface", rest_name="show-mpls-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    self.__clear_mpls_ldp_statistics = YANGDynClass(base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return []

  def _get_show_mpls_summary(self):
    """
    Getter method for show_mpls_summary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_summary (rpc)
    """
    return self.__show_mpls_summary
      
  def _set_show_mpls_summary(self, v, load=False):
    """
    Setter method for show_mpls_summary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_summary (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_summary() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_summary.show_mpls_summary, is_leaf=True, yang_name="show-mpls-summary", rest_name="show-mpls-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_summary must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_summary.show_mpls_summary, is_leaf=True, yang_name="show-mpls-summary", rest_name="show-mpls-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_summary(self):
    self.__show_mpls_summary = YANGDynClass(base=show_mpls_summary.show_mpls_summary, is_leaf=True, yang_name="show-mpls-summary", rest_name="show-mpls-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_te_path(self):
    """
    Getter method for show_mpls_te_path, mapped from YANG variable /brocade_mpls_rpc/show_mpls_te_path (rpc)
    """
    return self.__show_mpls_te_path
      
  def _set_show_mpls_te_path(self, v, load=False):
    """
    Setter method for show_mpls_te_path, mapped from YANG variable /brocade_mpls_rpc/show_mpls_te_path (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_te_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_te_path() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_te_path.show_mpls_te_path, is_leaf=True, yang_name="show-mpls-te-path", rest_name="show-mpls-te-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsTePath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_te_path must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_te_path.show_mpls_te_path, is_leaf=True, yang_name="show-mpls-te-path", rest_name="show-mpls-te-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsTePath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_te_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_te_path(self):
    self.__show_mpls_te_path = YANGDynClass(base=show_mpls_te_path.show_mpls_te_path, is_leaf=True, yang_name="show-mpls-te-path", rest_name="show-mpls-te-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsTePath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_statistics_ldp_transit(self):
    """
    Getter method for show_mpls_statistics_ldp_transit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_statistics_ldp_transit (rpc)
    """
    return self.__show_mpls_statistics_ldp_transit
      
  def _set_show_mpls_statistics_ldp_transit(self, v, load=False):
    """
    Setter method for show_mpls_statistics_ldp_transit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_statistics_ldp_transit (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_statistics_ldp_transit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_statistics_ldp_transit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_statistics_ldp_transit.show_mpls_statistics_ldp_transit, is_leaf=True, yang_name="show-mpls-statistics-ldp-transit", rest_name="show-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_statistics_ldp_transit must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_statistics_ldp_transit.show_mpls_statistics_ldp_transit, is_leaf=True, yang_name="show-mpls-statistics-ldp-transit", rest_name="show-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_statistics_ldp_transit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_statistics_ldp_transit(self):
    self.__show_mpls_statistics_ldp_transit = YANGDynClass(base=show_mpls_statistics_ldp_transit.show_mpls_statistics_ldp_transit, is_leaf=True, yang_name="show-mpls-statistics-ldp-transit", rest_name="show-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_statistics_ldp_tunnel(self):
    """
    Getter method for show_mpls_statistics_ldp_tunnel, mapped from YANG variable /brocade_mpls_rpc/show_mpls_statistics_ldp_tunnel (rpc)
    """
    return self.__show_mpls_statistics_ldp_tunnel
      
  def _set_show_mpls_statistics_ldp_tunnel(self, v, load=False):
    """
    Setter method for show_mpls_statistics_ldp_tunnel, mapped from YANG variable /brocade_mpls_rpc/show_mpls_statistics_ldp_tunnel (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_statistics_ldp_tunnel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_statistics_ldp_tunnel() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_statistics_ldp_tunnel.show_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="show-mpls-statistics-ldp-tunnel", rest_name="show-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_statistics_ldp_tunnel must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_statistics_ldp_tunnel.show_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="show-mpls-statistics-ldp-tunnel", rest_name="show-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_statistics_ldp_tunnel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_statistics_ldp_tunnel(self):
    self.__show_mpls_statistics_ldp_tunnel = YANGDynClass(base=show_mpls_statistics_ldp_tunnel.show_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="show-mpls-statistics-ldp-tunnel", rest_name="show-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_path(self):
    """
    Getter method for show_mpls_ldp_path, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_path (rpc)
    """
    return self.__show_mpls_ldp_path
      
  def _set_show_mpls_ldp_path(self, v, load=False):
    """
    Setter method for show_mpls_ldp_path, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_path (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_path() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_path.show_mpls_ldp_path, is_leaf=True, yang_name="show-mpls-ldp-path", rest_name="show-mpls-ldp-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_path must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_path.show_mpls_ldp_path, is_leaf=True, yang_name="show-mpls-ldp-path", rest_name="show-mpls-ldp-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_path(self):
    self.__show_mpls_ldp_path = YANGDynClass(base=show_mpls_ldp_path.show_mpls_ldp_path, is_leaf=True, yang_name="show-mpls-ldp-path", rest_name="show-mpls-ldp-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_path_one(self):
    """
    Getter method for show_mpls_ldp_path_one, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_path_one (rpc)
    """
    return self.__show_mpls_ldp_path_one
      
  def _set_show_mpls_ldp_path_one(self, v, load=False):
    """
    Setter method for show_mpls_ldp_path_one, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_path_one (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_path_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_path_one() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_path_one.show_mpls_ldp_path_one, is_leaf=True, yang_name="show-mpls-ldp-path-one", rest_name="show-mpls-ldp-path-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_path_one must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_path_one.show_mpls_ldp_path_one, is_leaf=True, yang_name="show-mpls-ldp-path-one", rest_name="show-mpls-ldp-path-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_path_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_path_one(self):
    self.__show_mpls_ldp_path_one = YANGDynClass(base=show_mpls_ldp_path_one.show_mpls_ldp_path_one, is_leaf=True, yang_name="show-mpls-ldp-path-one", rest_name="show-mpls-ldp-path-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPath'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_targeted_peer_all(self):
    """
    Getter method for show_mpls_ldp_targeted_peer_all, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_targeted_peer_all (rpc)
    """
    return self.__show_mpls_ldp_targeted_peer_all
      
  def _set_show_mpls_ldp_targeted_peer_all(self, v, load=False):
    """
    Setter method for show_mpls_ldp_targeted_peer_all, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_targeted_peer_all (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_targeted_peer_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_targeted_peer_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_targeted_peer_all.show_mpls_ldp_targeted_peer_all, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-all", rest_name="show-mpls-ldp-targeted-peer-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_targeted_peer_all must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_targeted_peer_all.show_mpls_ldp_targeted_peer_all, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-all", rest_name="show-mpls-ldp-targeted-peer-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_targeted_peer_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_targeted_peer_all(self):
    self.__show_mpls_ldp_targeted_peer_all = YANGDynClass(base=show_mpls_ldp_targeted_peer_all.show_mpls_ldp_targeted_peer_all, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-all", rest_name="show-mpls-ldp-targeted-peer-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_targeted_peer_one(self):
    """
    Getter method for show_mpls_ldp_targeted_peer_one, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_targeted_peer_one (rpc)
    """
    return self.__show_mpls_ldp_targeted_peer_one
      
  def _set_show_mpls_ldp_targeted_peer_one(self, v, load=False):
    """
    Setter method for show_mpls_ldp_targeted_peer_one, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_targeted_peer_one (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_targeted_peer_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_targeted_peer_one() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_targeted_peer_one.show_mpls_ldp_targeted_peer_one, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-one", rest_name="show-mpls-ldp-targeted-peer-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_targeted_peer_one must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_targeted_peer_one.show_mpls_ldp_targeted_peer_one, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-one", rest_name="show-mpls-ldp-targeted-peer-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_targeted_peer_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_targeted_peer_one(self):
    self.__show_mpls_ldp_targeted_peer_one = YANGDynClass(base=show_mpls_ldp_targeted_peer_one.show_mpls_ldp_targeted_peer_one, is_leaf=True, yang_name="show-mpls-ldp-targeted-peer-one", rest_name="show-mpls-ldp-targeted-peer-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpTargetedPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec(self):
    """
    Getter method for show_mpls_ldp_fec, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec (rpc)
    """
    return self.__show_mpls_ldp_fec
      
  def _set_show_mpls_ldp_fec(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec.show_mpls_ldp_fec, is_leaf=True, yang_name="show-mpls-ldp-fec", rest_name="show-mpls-ldp-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec.show_mpls_ldp_fec, is_leaf=True, yang_name="show-mpls-ldp-fec", rest_name="show-mpls-ldp-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec(self):
    self.__show_mpls_ldp_fec = YANGDynClass(base=show_mpls_ldp_fec.show_mpls_ldp_fec, is_leaf=True, yang_name="show-mpls-ldp-fec", rest_name="show-mpls-ldp-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_summary(self):
    """
    Getter method for show_mpls_ldp_fec_summary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_summary (rpc)
    """
    return self.__show_mpls_ldp_fec_summary
      
  def _set_show_mpls_ldp_fec_summary(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_summary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_summary (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_summary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_summary() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_summary.show_mpls_ldp_fec_summary, is_leaf=True, yang_name="show-mpls-ldp-fec-summary", rest_name="show-mpls-ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_summary must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_summary.show_mpls_ldp_fec_summary, is_leaf=True, yang_name="show-mpls-ldp-fec-summary", rest_name="show-mpls-ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_summary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_summary(self):
    self.__show_mpls_ldp_fec_summary = YANGDynClass(base=show_mpls_ldp_fec_summary.show_mpls_ldp_fec_summary, is_leaf=True, yang_name="show-mpls-ldp-fec-summary", rest_name="show-mpls-ldp-fec-summary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_prefix(self):
    """
    Getter method for show_mpls_ldp_fec_prefix, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix (rpc)
    """
    return self.__show_mpls_ldp_fec_prefix
      
  def _set_show_mpls_ldp_fec_prefix(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_prefix, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_prefix() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_prefix.show_mpls_ldp_fec_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix", rest_name="show-mpls-ldp-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_prefix must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_prefix.show_mpls_ldp_fec_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix", rest_name="show-mpls-ldp-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_prefix(self):
    self.__show_mpls_ldp_fec_prefix = YANGDynClass(base=show_mpls_ldp_fec_prefix.show_mpls_ldp_fec_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix", rest_name="show-mpls-ldp-fec-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_prefix_prefix(self):
    """
    Getter method for show_mpls_ldp_fec_prefix_prefix, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_prefix (rpc)
    """
    return self.__show_mpls_ldp_fec_prefix_prefix
      
  def _set_show_mpls_ldp_fec_prefix_prefix(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_prefix_prefix, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_prefix (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_prefix_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_prefix_prefix() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_prefix_prefix.show_mpls_ldp_fec_prefix_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix", rest_name="show-mpls-ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_prefix_prefix must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix.show_mpls_ldp_fec_prefix_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix", rest_name="show-mpls-ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_prefix_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_prefix_prefix(self):
    self.__show_mpls_ldp_fec_prefix_prefix = YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix.show_mpls_ldp_fec_prefix_prefix, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix", rest_name="show-mpls-ldp-fec-prefix-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_prefix_prefix_longer(self):
    """
    Getter method for show_mpls_ldp_fec_prefix_prefix_longer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_prefix_longer (rpc)
    """
    return self.__show_mpls_ldp_fec_prefix_prefix_longer
      
  def _set_show_mpls_ldp_fec_prefix_prefix_longer(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_prefix_prefix_longer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_prefix_longer (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_prefix_prefix_longer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_prefix_prefix_longer() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_prefix_prefix_longer.show_mpls_ldp_fec_prefix_prefix_longer, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-longer", rest_name="show-mpls-ldp-fec-prefix-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_prefix_prefix_longer must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix_longer.show_mpls_ldp_fec_prefix_prefix_longer, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-longer", rest_name="show-mpls-ldp-fec-prefix-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_prefix_prefix_longer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_prefix_prefix_longer(self):
    self.__show_mpls_ldp_fec_prefix_prefix_longer = YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix_longer.show_mpls_ldp_fec_prefix_prefix_longer, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-longer", rest_name="show-mpls-ldp-fec-prefix-prefix-longer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_prefix_filtered(self):
    """
    Getter method for show_mpls_ldp_fec_prefix_filtered, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_filtered (rpc)
    """
    return self.__show_mpls_ldp_fec_prefix_filtered
      
  def _set_show_mpls_ldp_fec_prefix_filtered(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_prefix_filtered, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_filtered (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_prefix_filtered is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_prefix_filtered() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_prefix_filtered.show_mpls_ldp_fec_prefix_filtered, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-filtered", rest_name="show-mpls-ldp-fec-prefix-filtered", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_prefix_filtered must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_prefix_filtered.show_mpls_ldp_fec_prefix_filtered, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-filtered", rest_name="show-mpls-ldp-fec-prefix-filtered", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_prefix_filtered = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_prefix_filtered(self):
    self.__show_mpls_ldp_fec_prefix_filtered = YANGDynClass(base=show_mpls_ldp_fec_prefix_filtered.show_mpls_ldp_fec_prefix_filtered, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-filtered", rest_name="show-mpls-ldp-fec-prefix-filtered", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_prefix_prefix_filter(self):
    """
    Getter method for show_mpls_ldp_fec_prefix_prefix_filter, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_prefix_filter (rpc)
    """
    return self.__show_mpls_ldp_fec_prefix_prefix_filter
      
  def _set_show_mpls_ldp_fec_prefix_prefix_filter(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_prefix_prefix_filter, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_prefix_prefix_filter (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_prefix_prefix_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_prefix_prefix_filter() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_prefix_prefix_filter.show_mpls_ldp_fec_prefix_prefix_filter, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-filter", rest_name="show-mpls-ldp-fec-prefix-prefix-filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_prefix_prefix_filter must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix_filter.show_mpls_ldp_fec_prefix_prefix_filter, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-filter", rest_name="show-mpls-ldp-fec-prefix-prefix-filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_prefix_prefix_filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_prefix_prefix_filter(self):
    self.__show_mpls_ldp_fec_prefix_prefix_filter = YANGDynClass(base=show_mpls_ldp_fec_prefix_prefix_filter.show_mpls_ldp_fec_prefix_prefix_filter, is_leaf=True, yang_name="show-mpls-ldp-fec-prefix-prefix-filter", rest_name="show-mpls-ldp-fec-prefix-prefix-filter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_vc(self):
    """
    Getter method for show_mpls_ldp_fec_vc, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc (rpc)
    """
    return self.__show_mpls_ldp_fec_vc
      
  def _set_show_mpls_ldp_fec_vc(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_vc, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_vc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_vc() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_vc.show_mpls_ldp_fec_vc, is_leaf=True, yang_name="show-mpls-ldp-fec-vc", rest_name="show-mpls-ldp-fec-vc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_vc must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_vc.show_mpls_ldp_fec_vc, is_leaf=True, yang_name="show-mpls-ldp-fec-vc", rest_name="show-mpls-ldp-fec-vc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_vc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_vc(self):
    self.__show_mpls_ldp_fec_vc = YANGDynClass(base=show_mpls_ldp_fec_vc.show_mpls_ldp_fec_vc, is_leaf=True, yang_name="show-mpls-ldp-fec-vc", rest_name="show-mpls-ldp-fec-vc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_fec_vc_id(self):
    """
    Getter method for show_mpls_ldp_fec_vc_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id (rpc)
    """
    return self.__show_mpls_ldp_fec_vc_id
      
  def _set_show_mpls_ldp_fec_vc_id(self, v, load=False):
    """
    Setter method for show_mpls_ldp_fec_vc_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_fec_vc_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_fec_vc_id() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_fec_vc_id.show_mpls_ldp_fec_vc_id, is_leaf=True, yang_name="show-mpls-ldp-fec-vc-id", rest_name="show-mpls-ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_fec_vc_id must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_fec_vc_id.show_mpls_ldp_fec_vc_id, is_leaf=True, yang_name="show-mpls-ldp-fec-vc-id", rest_name="show-mpls-ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_fec_vc_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_fec_vc_id(self):
    self.__show_mpls_ldp_fec_vc_id = YANGDynClass(base=show_mpls_ldp_fec_vc_id.show_mpls_ldp_fec_vc_id, is_leaf=True, yang_name="show-mpls-ldp-fec-vc-id", rest_name="show-mpls-ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpFec'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_peer_br(self):
    """
    Getter method for show_mpls_ldp_peer_br, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_peer_br (rpc)
    """
    return self.__show_mpls_ldp_peer_br
      
  def _set_show_mpls_ldp_peer_br(self, v, load=False):
    """
    Setter method for show_mpls_ldp_peer_br, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_peer_br (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_peer_br is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_peer_br() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_peer_br.show_mpls_ldp_peer_br, is_leaf=True, yang_name="show-mpls-ldp-peer-br", rest_name="show-mpls-ldp-peer-br", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_peer_br must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_peer_br.show_mpls_ldp_peer_br, is_leaf=True, yang_name="show-mpls-ldp-peer-br", rest_name="show-mpls-ldp-peer-br", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_peer_br = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_peer_br(self):
    self.__show_mpls_ldp_peer_br = YANGDynClass(base=show_mpls_ldp_peer_br.show_mpls_ldp_peer_br, is_leaf=True, yang_name="show-mpls-ldp-peer-br", rest_name="show-mpls-ldp-peer-br", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_peer_det(self):
    """
    Getter method for show_mpls_ldp_peer_det, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_peer_det (rpc)
    """
    return self.__show_mpls_ldp_peer_det
      
  def _set_show_mpls_ldp_peer_det(self, v, load=False):
    """
    Setter method for show_mpls_ldp_peer_det, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_peer_det (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_peer_det is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_peer_det() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_peer_det.show_mpls_ldp_peer_det, is_leaf=True, yang_name="show-mpls-ldp-peer-det", rest_name="show-mpls-ldp-peer-det", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_peer_det must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_peer_det.show_mpls_ldp_peer_det, is_leaf=True, yang_name="show-mpls-ldp-peer-det", rest_name="show-mpls-ldp-peer-det", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_peer_det = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_peer_det(self):
    self.__show_mpls_ldp_peer_det = YANGDynClass(base=show_mpls_ldp_peer_det.show_mpls_ldp_peer_det, is_leaf=True, yang_name="show-mpls-ldp-peer-det", rest_name="show-mpls-ldp-peer-det", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_peer_det_rec(self):
    """
    Getter method for show_mpls_ldp_peer_det_rec, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_peer_det_rec (rpc)
    """
    return self.__show_mpls_ldp_peer_det_rec
      
  def _set_show_mpls_ldp_peer_det_rec(self, v, load=False):
    """
    Setter method for show_mpls_ldp_peer_det_rec, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_peer_det_rec (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_peer_det_rec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_peer_det_rec() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_peer_det_rec.show_mpls_ldp_peer_det_rec, is_leaf=True, yang_name="show-mpls-ldp-peer-det-rec", rest_name="show-mpls-ldp-peer-det-rec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_peer_det_rec must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_peer_det_rec.show_mpls_ldp_peer_det_rec, is_leaf=True, yang_name="show-mpls-ldp-peer-det-rec", rest_name="show-mpls-ldp-peer-det-rec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_peer_det_rec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_peer_det_rec(self):
    self.__show_mpls_ldp_peer_det_rec = YANGDynClass(base=show_mpls_ldp_peer_det_rec.show_mpls_ldp_peer_det_rec, is_leaf=True, yang_name="show-mpls-ldp-peer-det-rec", rest_name="show-mpls-ldp-peer-det-rec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpPeer'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_policy(self):
    """
    Getter method for show_mpls_policy, mapped from YANG variable /brocade_mpls_rpc/show_mpls_policy (rpc)
    """
    return self.__show_mpls_policy
      
  def _set_show_mpls_policy(self, v, load=False):
    """
    Setter method for show_mpls_policy, mapped from YANG variable /brocade_mpls_rpc/show_mpls_policy (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_policy is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_policy() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_policy.show_mpls_policy, is_leaf=True, yang_name="show-mpls-policy", rest_name="show-mpls-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_policy must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_policy.show_mpls_policy, is_leaf=True, yang_name="show-mpls-policy", rest_name="show-mpls-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_policy = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_policy(self):
    self.__show_mpls_policy = YANGDynClass(base=show_mpls_policy.show_mpls_policy, is_leaf=True, yang_name="show-mpls-policy", rest_name="show-mpls-policy", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_interface(self):
    """
    Getter method for show_mpls_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_interface (rpc)
    """
    return self.__show_mpls_interface
      
  def _set_show_mpls_interface(self, v, load=False):
    """
    Setter method for show_mpls_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_interface (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_interface() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_interface.show_mpls_interface, is_leaf=True, yang_name="show-mpls-interface", rest_name="show-mpls-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_interface must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_interface.show_mpls_interface, is_leaf=True, yang_name="show-mpls-interface", rest_name="show-mpls-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_interface(self):
    self.__show_mpls_interface = YANGDynClass(base=show_mpls_interface.show_mpls_interface, is_leaf=True, yang_name="show-mpls-interface", rest_name="show-mpls-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_interface_detail(self):
    """
    Getter method for show_mpls_interface_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_interface_detail (rpc)
    """
    return self.__show_mpls_interface_detail
      
  def _set_show_mpls_interface_detail(self, v, load=False):
    """
    Setter method for show_mpls_interface_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_interface_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_interface_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_interface_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_interface_detail.show_mpls_interface_detail, is_leaf=True, yang_name="show-mpls-interface-detail", rest_name="show-mpls-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_interface_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_interface_detail.show_mpls_interface_detail, is_leaf=True, yang_name="show-mpls-interface-detail", rest_name="show-mpls-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_interface_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_interface_detail(self):
    self.__show_mpls_interface_detail = YANGDynClass(base=show_mpls_interface_detail.show_mpls_interface_detail, is_leaf=True, yang_name="show-mpls-interface-detail", rest_name="show-mpls-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_interface_one_interface(self):
    """
    Getter method for show_mpls_interface_one_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_interface_one_interface (rpc)
    """
    return self.__show_mpls_interface_one_interface
      
  def _set_show_mpls_interface_one_interface(self, v, load=False):
    """
    Setter method for show_mpls_interface_one_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_interface_one_interface (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_interface_one_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_interface_one_interface() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_interface_one_interface.show_mpls_interface_one_interface, is_leaf=True, yang_name="show-mpls-interface-one-interface", rest_name="show-mpls-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_interface_one_interface must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_interface_one_interface.show_mpls_interface_one_interface, is_leaf=True, yang_name="show-mpls-interface-one-interface", rest_name="show-mpls-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_interface_one_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_interface_one_interface(self):
    self.__show_mpls_interface_one_interface = YANGDynClass(base=show_mpls_interface_one_interface.show_mpls_interface_one_interface, is_leaf=True, yang_name="show-mpls-interface-one-interface", rest_name="show-mpls-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp(self):
    """
    Getter method for show_mpls_rsvp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp (rpc)
    """
    return self.__show_mpls_rsvp
      
  def _set_show_mpls_rsvp(self, v, load=False):
    """
    Setter method for show_mpls_rsvp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp.show_mpls_rsvp, is_leaf=True, yang_name="show-mpls-rsvp", rest_name="show-mpls-rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp.show_mpls_rsvp, is_leaf=True, yang_name="show-mpls-rsvp", rest_name="show-mpls-rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp(self):
    self.__show_mpls_rsvp = YANGDynClass(base=show_mpls_rsvp.show_mpls_rsvp, is_leaf=True, yang_name="show-mpls-rsvp", rest_name="show-mpls-rsvp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_statistics(self):
    """
    Getter method for show_mpls_rsvp_statistics, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics (rpc)
    """
    return self.__show_mpls_rsvp_statistics
      
  def _set_show_mpls_rsvp_statistics(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_statistics, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_statistics.show_mpls_rsvp_statistics, is_leaf=True, yang_name="show-mpls-rsvp-statistics", rest_name="show-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_statistics.show_mpls_rsvp_statistics, is_leaf=True, yang_name="show-mpls-rsvp-statistics", rest_name="show-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_statistics(self):
    self.__show_mpls_rsvp_statistics = YANGDynClass(base=show_mpls_rsvp_statistics.show_mpls_rsvp_statistics, is_leaf=True, yang_name="show-mpls-rsvp-statistics", rest_name="show-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp_statistics(self):
    """
    Getter method for show_mpls_ldp_statistics, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_statistics (rpc)
    """
    return self.__show_mpls_ldp_statistics
      
  def _set_show_mpls_ldp_statistics(self, v, load=False):
    """
    Setter method for show_mpls_ldp_statistics, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp_statistics.show_mpls_ldp_statistics, is_leaf=True, yang_name="show-mpls-ldp-statistics", rest_name="show-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp_statistics.show_mpls_ldp_statistics, is_leaf=True, yang_name="show-mpls-ldp-statistics", rest_name="show-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp_statistics(self):
    self.__show_mpls_ldp_statistics = YANGDynClass(base=show_mpls_ldp_statistics.show_mpls_ldp_statistics, is_leaf=True, yang_name="show-mpls-ldp-statistics", rest_name="show-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_interface(self):
    """
    Getter method for show_mpls_rsvp_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface (rpc)
    """
    return self.__show_mpls_rsvp_interface
      
  def _set_show_mpls_rsvp_interface(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_interface() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_interface.show_mpls_rsvp_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface", rest_name="show-mpls-rsvp-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_interface must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_interface.show_mpls_rsvp_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface", rest_name="show-mpls-rsvp-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_interface(self):
    self.__show_mpls_rsvp_interface = YANGDynClass(base=show_mpls_rsvp_interface.show_mpls_rsvp_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface", rest_name="show-mpls-rsvp-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_interface_detail(self):
    """
    Getter method for show_mpls_rsvp_interface_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_detail (rpc)
    """
    return self.__show_mpls_rsvp_interface_detail
      
  def _set_show_mpls_rsvp_interface_detail(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_interface_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_interface_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_interface_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_interface_detail.show_mpls_rsvp_interface_detail, is_leaf=True, yang_name="show-mpls-rsvp-interface-detail", rest_name="show-mpls-rsvp-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_interface_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_interface_detail.show_mpls_rsvp_interface_detail, is_leaf=True, yang_name="show-mpls-rsvp-interface-detail", rest_name="show-mpls-rsvp-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_interface_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_interface_detail(self):
    self.__show_mpls_rsvp_interface_detail = YANGDynClass(base=show_mpls_rsvp_interface_detail.show_mpls_rsvp_interface_detail, is_leaf=True, yang_name="show-mpls-rsvp-interface-detail", rest_name="show-mpls-rsvp-interface-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_interface_one_interface(self):
    """
    Getter method for show_mpls_rsvp_interface_one_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface (rpc)
    """
    return self.__show_mpls_rsvp_interface_one_interface
      
  def _set_show_mpls_rsvp_interface_one_interface(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_interface_one_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_interface_one_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_interface_one_interface() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_interface_one_interface.show_mpls_rsvp_interface_one_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface-one-interface", rest_name="show-mpls-rsvp-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_interface_one_interface must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_interface_one_interface.show_mpls_rsvp_interface_one_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface-one-interface", rest_name="show-mpls-rsvp-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_interface_one_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_interface_one_interface(self):
    self.__show_mpls_rsvp_interface_one_interface = YANGDynClass(base=show_mpls_rsvp_interface_one_interface.show_mpls_rsvp_interface_one_interface, is_leaf=True, yang_name="show-mpls-rsvp-interface-one-interface", rest_name="show-mpls-rsvp-interface-one-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpInterface'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_neighbor(self):
    """
    Getter method for show_mpls_rsvp_neighbor, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_neighbor (rpc)
    """
    return self.__show_mpls_rsvp_neighbor
      
  def _set_show_mpls_rsvp_neighbor(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_neighbor, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_neighbor (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_neighbor() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_neighbor.show_mpls_rsvp_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor", rest_name="show-mpls-rsvp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_neighbor must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_neighbor.show_mpls_rsvp_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor", rest_name="show-mpls-rsvp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_neighbor(self):
    self.__show_mpls_rsvp_neighbor = YANGDynClass(base=show_mpls_rsvp_neighbor.show_mpls_rsvp_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor", rest_name="show-mpls-rsvp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_neighbor_detail(self):
    """
    Getter method for show_mpls_rsvp_neighbor_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_neighbor_detail (rpc)
    """
    return self.__show_mpls_rsvp_neighbor_detail
      
  def _set_show_mpls_rsvp_neighbor_detail(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_neighbor_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_neighbor_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_neighbor_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_neighbor_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_neighbor_detail.show_mpls_rsvp_neighbor_detail, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-detail", rest_name="show-mpls-rsvp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_neighbor_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_neighbor_detail.show_mpls_rsvp_neighbor_detail, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-detail", rest_name="show-mpls-rsvp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_neighbor_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_neighbor_detail(self):
    self.__show_mpls_rsvp_neighbor_detail = YANGDynClass(base=show_mpls_rsvp_neighbor_detail.show_mpls_rsvp_neighbor_detail, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-detail", rest_name="show-mpls-rsvp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_neighbor_one_neighbor(self):
    """
    Getter method for show_mpls_rsvp_neighbor_one_neighbor, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_neighbor_one_neighbor (rpc)
    """
    return self.__show_mpls_rsvp_neighbor_one_neighbor
      
  def _set_show_mpls_rsvp_neighbor_one_neighbor(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_neighbor_one_neighbor, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_neighbor_one_neighbor (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_neighbor_one_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_neighbor_one_neighbor() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_neighbor_one_neighbor.show_mpls_rsvp_neighbor_one_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-one-neighbor", rest_name="show-mpls-rsvp-neighbor-one-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_neighbor_one_neighbor must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_neighbor_one_neighbor.show_mpls_rsvp_neighbor_one_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-one-neighbor", rest_name="show-mpls-rsvp-neighbor-one-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_neighbor_one_neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_neighbor_one_neighbor(self):
    self.__show_mpls_rsvp_neighbor_one_neighbor = YANGDynClass(base=show_mpls_rsvp_neighbor_one_neighbor.show_mpls_rsvp_neighbor_one_neighbor, is_leaf=True, yang_name="show-mpls-rsvp-neighbor-one-neighbor", rest_name="show-mpls-rsvp-neighbor-one-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_session(self):
    """
    Getter method for show_mpls_rsvp_session, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session (rpc)
    """
    return self.__show_mpls_rsvp_session
      
  def _set_show_mpls_rsvp_session(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_session, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_session is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_session() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_session.show_mpls_rsvp_session, is_leaf=True, yang_name="show-mpls-rsvp-session", rest_name="show-mpls-rsvp-session", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_session must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_session.show_mpls_rsvp_session, is_leaf=True, yang_name="show-mpls-rsvp-session", rest_name="show-mpls-rsvp-session", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_session = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_session(self):
    self.__show_mpls_rsvp_session = YANGDynClass(base=show_mpls_rsvp_session.show_mpls_rsvp_session, is_leaf=True, yang_name="show-mpls-rsvp-session", rest_name="show-mpls-rsvp-session", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_session_wide(self):
    """
    Getter method for show_mpls_rsvp_session_wide, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_wide (rpc)
    """
    return self.__show_mpls_rsvp_session_wide
      
  def _set_show_mpls_rsvp_session_wide(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_session_wide, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_wide (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_session_wide is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_session_wide() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_session_wide.show_mpls_rsvp_session_wide, is_leaf=True, yang_name="show-mpls-rsvp-session-wide", rest_name="show-mpls-rsvp-session-wide", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_session_wide must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_session_wide.show_mpls_rsvp_session_wide, is_leaf=True, yang_name="show-mpls-rsvp-session-wide", rest_name="show-mpls-rsvp-session-wide", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_session_wide = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_session_wide(self):
    self.__show_mpls_rsvp_session_wide = YANGDynClass(base=show_mpls_rsvp_session_wide.show_mpls_rsvp_session_wide, is_leaf=True, yang_name="show-mpls-rsvp-session-wide", rest_name="show-mpls-rsvp-session-wide", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_session_detail(self):
    """
    Getter method for show_mpls_rsvp_session_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail (rpc)
    """
    return self.__show_mpls_rsvp_session_detail
      
  def _set_show_mpls_rsvp_session_detail(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_session_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_session_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_session_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_session_detail.show_mpls_rsvp_session_detail, is_leaf=True, yang_name="show-mpls-rsvp-session-detail", rest_name="show-mpls-rsvp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_session_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_session_detail.show_mpls_rsvp_session_detail, is_leaf=True, yang_name="show-mpls-rsvp-session-detail", rest_name="show-mpls-rsvp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_session_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_session_detail(self):
    self.__show_mpls_rsvp_session_detail = YANGDynClass(base=show_mpls_rsvp_session_detail.show_mpls_rsvp_session_detail, is_leaf=True, yang_name="show-mpls-rsvp-session-detail", rest_name="show-mpls-rsvp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_session_extensive(self):
    """
    Getter method for show_mpls_rsvp_session_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive (rpc)
    """
    return self.__show_mpls_rsvp_session_extensive
      
  def _set_show_mpls_rsvp_session_extensive(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_session_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_session_extensive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_session_extensive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_session_extensive.show_mpls_rsvp_session_extensive, is_leaf=True, yang_name="show-mpls-rsvp-session-extensive", rest_name="show-mpls-rsvp-session-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_session_extensive must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_session_extensive.show_mpls_rsvp_session_extensive, is_leaf=True, yang_name="show-mpls-rsvp-session-extensive", rest_name="show-mpls-rsvp-session-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_session_extensive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_session_extensive(self):
    self.__show_mpls_rsvp_session_extensive = YANGDynClass(base=show_mpls_rsvp_session_extensive.show_mpls_rsvp_session_extensive, is_leaf=True, yang_name="show-mpls-rsvp-session-extensive", rest_name="show-mpls-rsvp-session-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_rsvp_session_name(self):
    """
    Getter method for show_mpls_rsvp_session_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_name (rpc)
    """
    return self.__show_mpls_rsvp_session_name
      
  def _set_show_mpls_rsvp_session_name(self, v, load=False):
    """
    Setter method for show_mpls_rsvp_session_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_name (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_rsvp_session_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_rsvp_session_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_rsvp_session_name.show_mpls_rsvp_session_name, is_leaf=True, yang_name="show-mpls-rsvp-session-name", rest_name="show-mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_rsvp_session_name must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_rsvp_session_name.show_mpls_rsvp_session_name, is_leaf=True, yang_name="show-mpls-rsvp-session-name", rest_name="show-mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_rsvp_session_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_rsvp_session_name(self):
    self.__show_mpls_rsvp_session_name = YANGDynClass(base=show_mpls_rsvp_session_name.show_mpls_rsvp_session_name, is_leaf=True, yang_name="show-mpls-rsvp-session-name", rest_name="show-mpls-rsvp-session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRsvpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp(self):
    """
    Getter method for show_mpls_lsp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp (rpc)
    """
    return self.__show_mpls_lsp
      
  def _set_show_mpls_lsp(self, v, load=False):
    """
    Setter method for show_mpls_lsp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp.show_mpls_lsp, is_leaf=True, yang_name="show-mpls-lsp", rest_name="show-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp.show_mpls_lsp, is_leaf=True, yang_name="show-mpls-lsp", rest_name="show-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp(self):
    self.__show_mpls_lsp = YANGDynClass(base=show_mpls_lsp.show_mpls_lsp, is_leaf=True, yang_name="show-mpls-lsp", rest_name="show-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp_detail(self):
    """
    Getter method for show_mpls_lsp_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_detail (rpc)
    """
    return self.__show_mpls_lsp_detail
      
  def _set_show_mpls_lsp_detail(self, v, load=False):
    """
    Setter method for show_mpls_lsp_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp_detail.show_mpls_lsp_detail, is_leaf=True, yang_name="show-mpls-lsp-detail", rest_name="show-mpls-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp_detail.show_mpls_lsp_detail, is_leaf=True, yang_name="show-mpls-lsp-detail", rest_name="show-mpls-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp_detail(self):
    self.__show_mpls_lsp_detail = YANGDynClass(base=show_mpls_lsp_detail.show_mpls_lsp_detail, is_leaf=True, yang_name="show-mpls-lsp-detail", rest_name="show-mpls-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp_extensive(self):
    """
    Getter method for show_mpls_lsp_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_extensive (rpc)
    """
    return self.__show_mpls_lsp_extensive
      
  def _set_show_mpls_lsp_extensive(self, v, load=False):
    """
    Setter method for show_mpls_lsp_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_extensive (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp_extensive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp_extensive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp_extensive.show_mpls_lsp_extensive, is_leaf=True, yang_name="show-mpls-lsp-extensive", rest_name="show-mpls-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp_extensive must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp_extensive.show_mpls_lsp_extensive, is_leaf=True, yang_name="show-mpls-lsp-extensive", rest_name="show-mpls-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp_extensive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp_extensive(self):
    self.__show_mpls_lsp_extensive = YANGDynClass(base=show_mpls_lsp_extensive.show_mpls_lsp_extensive, is_leaf=True, yang_name="show-mpls-lsp-extensive", rest_name="show-mpls-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp_debug(self):
    """
    Getter method for show_mpls_lsp_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_debug (rpc)
    """
    return self.__show_mpls_lsp_debug
      
  def _set_show_mpls_lsp_debug(self, v, load=False):
    """
    Setter method for show_mpls_lsp_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_debug (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp_debug() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp_debug.show_mpls_lsp_debug, is_leaf=True, yang_name="show-mpls-lsp-debug", rest_name="show-mpls-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp_debug must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp_debug.show_mpls_lsp_debug, is_leaf=True, yang_name="show-mpls-lsp-debug", rest_name="show-mpls-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp_debug(self):
    self.__show_mpls_lsp_debug = YANGDynClass(base=show_mpls_lsp_debug.show_mpls_lsp_debug, is_leaf=True, yang_name="show-mpls-lsp-debug", rest_name="show-mpls-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp_name_detail(self):
    """
    Getter method for show_mpls_lsp_name_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_detail (rpc)
    """
    return self.__show_mpls_lsp_name_detail
      
  def _set_show_mpls_lsp_name_detail(self, v, load=False):
    """
    Setter method for show_mpls_lsp_name_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp_name_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp_name_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp_name_detail.show_mpls_lsp_name_detail, is_leaf=True, yang_name="show-mpls-lsp-name-detail", rest_name="show-mpls-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp_name_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp_name_detail.show_mpls_lsp_name_detail, is_leaf=True, yang_name="show-mpls-lsp-name-detail", rest_name="show-mpls-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp_name_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp_name_detail(self):
    self.__show_mpls_lsp_name_detail = YANGDynClass(base=show_mpls_lsp_name_detail.show_mpls_lsp_name_detail, is_leaf=True, yang_name="show-mpls-lsp-name-detail", rest_name="show-mpls-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp_name_extensive(self):
    """
    Getter method for show_mpls_lsp_name_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive (rpc)
    """
    return self.__show_mpls_lsp_name_extensive
      
  def _set_show_mpls_lsp_name_extensive(self, v, load=False):
    """
    Setter method for show_mpls_lsp_name_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_extensive (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp_name_extensive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp_name_extensive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp_name_extensive.show_mpls_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-lsp-name-extensive", rest_name="show-mpls-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp_name_extensive must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp_name_extensive.show_mpls_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-lsp-name-extensive", rest_name="show-mpls-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp_name_extensive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp_name_extensive(self):
    self.__show_mpls_lsp_name_extensive = YANGDynClass(base=show_mpls_lsp_name_extensive.show_mpls_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-lsp-name-extensive", rest_name="show-mpls-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_lsp_name_debug(self):
    """
    Getter method for show_mpls_lsp_name_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_debug (rpc)
    """
    return self.__show_mpls_lsp_name_debug
      
  def _set_show_mpls_lsp_name_debug(self, v, load=False):
    """
    Setter method for show_mpls_lsp_name_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_lsp_name_debug (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_lsp_name_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_lsp_name_debug() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_lsp_name_debug.show_mpls_lsp_name_debug, is_leaf=True, yang_name="show-mpls-lsp-name-debug", rest_name="show-mpls-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_lsp_name_debug must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_lsp_name_debug.show_mpls_lsp_name_debug, is_leaf=True, yang_name="show-mpls-lsp-name-debug", rest_name="show-mpls-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_lsp_name_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_lsp_name_debug(self):
    self.__show_mpls_lsp_name_debug = YANGDynClass(base=show_mpls_lsp_name_debug.show_mpls_lsp_name_debug, is_leaf=True, yang_name="show-mpls-lsp-name-debug", rest_name="show-mpls-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_lsp(self):
    """
    Getter method for show_mpls_bypass_lsp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp (rpc)
    """
    return self.__show_mpls_bypass_lsp
      
  def _set_show_mpls_bypass_lsp(self, v, load=False):
    """
    Setter method for show_mpls_bypass_lsp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_lsp.show_mpls_bypass_lsp, is_leaf=True, yang_name="show-mpls-bypass-lsp", rest_name="show-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_lsp.show_mpls_bypass_lsp, is_leaf=True, yang_name="show-mpls-bypass-lsp", rest_name="show-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_lsp(self):
    self.__show_mpls_bypass_lsp = YANGDynClass(base=show_mpls_bypass_lsp.show_mpls_bypass_lsp, is_leaf=True, yang_name="show-mpls-bypass-lsp", rest_name="show-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_lsp_detail(self):
    """
    Getter method for show_mpls_bypass_lsp_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_detail (rpc)
    """
    return self.__show_mpls_bypass_lsp_detail
      
  def _set_show_mpls_bypass_lsp_detail(self, v, load=False):
    """
    Setter method for show_mpls_bypass_lsp_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_lsp_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_lsp_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_lsp_detail.show_mpls_bypass_lsp_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-detail", rest_name="show-mpls-bypass-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_lsp_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_lsp_detail.show_mpls_bypass_lsp_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-detail", rest_name="show-mpls-bypass-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_lsp_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_lsp_detail(self):
    self.__show_mpls_bypass_lsp_detail = YANGDynClass(base=show_mpls_bypass_lsp_detail.show_mpls_bypass_lsp_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-detail", rest_name="show-mpls-bypass-lsp-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_bypass_lsp_extensive(self):
    """
    Getter method for show_mpls_bypass_bypass_lsp_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_bypass_lsp_extensive (rpc)
    """
    return self.__show_mpls_bypass_bypass_lsp_extensive
      
  def _set_show_mpls_bypass_bypass_lsp_extensive(self, v, load=False):
    """
    Setter method for show_mpls_bypass_bypass_lsp_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_bypass_lsp_extensive (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_bypass_lsp_extensive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_bypass_lsp_extensive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_bypass_lsp_extensive.show_mpls_bypass_bypass_lsp_extensive, is_leaf=True, yang_name="show-mpls-bypass-bypass-lsp-extensive", rest_name="show-mpls-bypass-bypass-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_bypass_lsp_extensive must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_bypass_lsp_extensive.show_mpls_bypass_bypass_lsp_extensive, is_leaf=True, yang_name="show-mpls-bypass-bypass-lsp-extensive", rest_name="show-mpls-bypass-bypass-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_bypass_lsp_extensive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_bypass_lsp_extensive(self):
    self.__show_mpls_bypass_bypass_lsp_extensive = YANGDynClass(base=show_mpls_bypass_bypass_lsp_extensive.show_mpls_bypass_bypass_lsp_extensive, is_leaf=True, yang_name="show-mpls-bypass-bypass-lsp-extensive", rest_name="show-mpls-bypass-bypass-lsp-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_lsp_debug(self):
    """
    Getter method for show_mpls_bypass_lsp_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug (rpc)
    """
    return self.__show_mpls_bypass_lsp_debug
      
  def _set_show_mpls_bypass_lsp_debug(self, v, load=False):
    """
    Setter method for show_mpls_bypass_lsp_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_debug (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_lsp_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_lsp_debug() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_lsp_debug.show_mpls_bypass_lsp_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-debug", rest_name="show-mpls-bypass-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_lsp_debug must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_lsp_debug.show_mpls_bypass_lsp_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-debug", rest_name="show-mpls-bypass-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_lsp_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_lsp_debug(self):
    self.__show_mpls_bypass_lsp_debug = YANGDynClass(base=show_mpls_bypass_lsp_debug.show_mpls_bypass_lsp_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-debug", rest_name="show-mpls-bypass-lsp-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_lsp_name_detail(self):
    """
    Getter method for show_mpls_bypass_lsp_name_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail (rpc)
    """
    return self.__show_mpls_bypass_lsp_name_detail
      
  def _set_show_mpls_bypass_lsp_name_detail(self, v, load=False):
    """
    Setter method for show_mpls_bypass_lsp_name_detail, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_lsp_name_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_lsp_name_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_lsp_name_detail.show_mpls_bypass_lsp_name_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-detail", rest_name="show-mpls-bypass-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_lsp_name_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_lsp_name_detail.show_mpls_bypass_lsp_name_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-detail", rest_name="show-mpls-bypass-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_lsp_name_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_lsp_name_detail(self):
    self.__show_mpls_bypass_lsp_name_detail = YANGDynClass(base=show_mpls_bypass_lsp_name_detail.show_mpls_bypass_lsp_name_detail, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-detail", rest_name="show-mpls-bypass-lsp-name-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_lsp_name_extensive(self):
    """
    Getter method for show_mpls_bypass_lsp_name_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_extensive (rpc)
    """
    return self.__show_mpls_bypass_lsp_name_extensive
      
  def _set_show_mpls_bypass_lsp_name_extensive(self, v, load=False):
    """
    Setter method for show_mpls_bypass_lsp_name_extensive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_extensive (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_lsp_name_extensive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_lsp_name_extensive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_lsp_name_extensive.show_mpls_bypass_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-extensive", rest_name="show-mpls-bypass-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_lsp_name_extensive must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_lsp_name_extensive.show_mpls_bypass_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-extensive", rest_name="show-mpls-bypass-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_lsp_name_extensive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_lsp_name_extensive(self):
    self.__show_mpls_bypass_lsp_name_extensive = YANGDynClass(base=show_mpls_bypass_lsp_name_extensive.show_mpls_bypass_lsp_name_extensive, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-extensive", rest_name="show-mpls-bypass-lsp-name-extensive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bypass_lsp_name_debug(self):
    """
    Getter method for show_mpls_bypass_lsp_name_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_debug (rpc)
    """
    return self.__show_mpls_bypass_lsp_name_debug
      
  def _set_show_mpls_bypass_lsp_name_debug(self, v, load=False):
    """
    Setter method for show_mpls_bypass_lsp_name_debug, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_debug (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bypass_lsp_name_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bypass_lsp_name_debug() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bypass_lsp_name_debug.show_mpls_bypass_lsp_name_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-debug", rest_name="show-mpls-bypass-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bypass_lsp_name_debug must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bypass_lsp_name_debug.show_mpls_bypass_lsp_name_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-debug", rest_name="show-mpls-bypass-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bypass_lsp_name_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bypass_lsp_name_debug(self):
    self.__show_mpls_bypass_lsp_name_debug = YANGDynClass(base=show_mpls_bypass_lsp_name_debug.show_mpls_bypass_lsp_name_debug, is_leaf=True, yang_name="show-mpls-bypass-lsp-name-debug", rest_name="show-mpls-bypass-lsp-name-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLspCmdPoint'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_ldp_neighbor_brief(self):
    """
    Getter method for get_mpls_ldp_neighbor_brief, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_neighbor_brief (rpc)
    """
    return self.__get_mpls_ldp_neighbor_brief
      
  def _set_get_mpls_ldp_neighbor_brief(self, v, load=False):
    """
    Setter method for get_mpls_ldp_neighbor_brief, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_neighbor_brief (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_ldp_neighbor_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_ldp_neighbor_brief() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_ldp_neighbor_brief.get_mpls_ldp_neighbor_brief, is_leaf=True, yang_name="get-mpls-ldp-neighbor-brief", rest_name="get-mpls-ldp-neighbor-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_ldp_neighbor_brief must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_ldp_neighbor_brief.get_mpls_ldp_neighbor_brief, is_leaf=True, yang_name="get-mpls-ldp-neighbor-brief", rest_name="get-mpls-ldp-neighbor-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_ldp_neighbor_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_ldp_neighbor_brief(self):
    self.__get_mpls_ldp_neighbor_brief = YANGDynClass(base=get_mpls_ldp_neighbor_brief.get_mpls_ldp_neighbor_brief, is_leaf=True, yang_name="get-mpls-ldp-neighbor-brief", rest_name="get-mpls-ldp-neighbor-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_ldp_neighbor_detail(self):
    """
    Getter method for get_mpls_ldp_neighbor_detail, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_neighbor_detail (rpc)
    """
    return self.__get_mpls_ldp_neighbor_detail
      
  def _set_get_mpls_ldp_neighbor_detail(self, v, load=False):
    """
    Setter method for get_mpls_ldp_neighbor_detail, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_neighbor_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_ldp_neighbor_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_ldp_neighbor_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_ldp_neighbor_detail.get_mpls_ldp_neighbor_detail, is_leaf=True, yang_name="get-mpls-ldp-neighbor-detail", rest_name="get-mpls-ldp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_ldp_neighbor_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_ldp_neighbor_detail.get_mpls_ldp_neighbor_detail, is_leaf=True, yang_name="get-mpls-ldp-neighbor-detail", rest_name="get-mpls-ldp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_ldp_neighbor_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_ldp_neighbor_detail(self):
    self.__get_mpls_ldp_neighbor_detail = YANGDynClass(base=get_mpls_ldp_neighbor_detail.get_mpls_ldp_neighbor_detail, is_leaf=True, yang_name="get-mpls-ldp-neighbor-detail", rest_name="get-mpls-ldp-neighbor-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_ldp_neighbor_one(self):
    """
    Getter method for get_mpls_ldp_neighbor_one, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_neighbor_one (rpc)
    """
    return self.__get_mpls_ldp_neighbor_one
      
  def _set_get_mpls_ldp_neighbor_one(self, v, load=False):
    """
    Setter method for get_mpls_ldp_neighbor_one, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_neighbor_one (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_ldp_neighbor_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_ldp_neighbor_one() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_ldp_neighbor_one.get_mpls_ldp_neighbor_one, is_leaf=True, yang_name="get-mpls-ldp-neighbor-one", rest_name="get-mpls-ldp-neighbor-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_ldp_neighbor_one must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_ldp_neighbor_one.get_mpls_ldp_neighbor_one, is_leaf=True, yang_name="get-mpls-ldp-neighbor-one", rest_name="get-mpls-ldp-neighbor-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_ldp_neighbor_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_ldp_neighbor_one(self):
    self.__get_mpls_ldp_neighbor_one = YANGDynClass(base=get_mpls_ldp_neighbor_one.get_mpls_ldp_neighbor_one, is_leaf=True, yang_name="get-mpls-ldp-neighbor-one", rest_name="get-mpls-ldp-neighbor-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_bfd(self):
    """
    Getter method for show_mpls_bfd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bfd (rpc)
    """
    return self.__show_mpls_bfd
      
  def _set_show_mpls_bfd(self, v, load=False):
    """
    Setter method for show_mpls_bfd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bfd (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_bfd() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_bfd.show_mpls_bfd, is_leaf=True, yang_name="show-mpls-bfd", rest_name="show-mpls-bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_bfd must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_bfd.show_mpls_bfd, is_leaf=True, yang_name="show-mpls-bfd", rest_name="show-mpls-bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_bfd(self):
    self.__show_mpls_bfd = YANGDynClass(base=show_mpls_bfd.show_mpls_bfd, is_leaf=True, yang_name="show-mpls-bfd", rest_name="show-mpls-bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_ldp(self):
    """
    Getter method for show_mpls_ldp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp (rpc)
    """
    return self.__show_mpls_ldp
      
  def _set_show_mpls_ldp(self, v, load=False):
    """
    Setter method for show_mpls_ldp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_ldp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_ldp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_ldp.show_mpls_ldp, is_leaf=True, yang_name="show-mpls-ldp", rest_name="show-mpls-ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_ldp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_ldp.show_mpls_ldp, is_leaf=True, yang_name="show-mpls-ldp", rest_name="show-mpls-ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_ldp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_ldp(self):
    self.__show_mpls_ldp = YANGDynClass(base=show_mpls_ldp.show_mpls_ldp, is_leaf=True, yang_name="show-mpls-ldp", rest_name="show-mpls-ldp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsSummary'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_statistics_oam(self):
    """
    Getter method for show_mpls_statistics_oam, mapped from YANG variable /brocade_mpls_rpc/show_mpls_statistics_oam (rpc)
    """
    return self.__show_mpls_statistics_oam
      
  def _set_show_mpls_statistics_oam(self, v, load=False):
    """
    Setter method for show_mpls_statistics_oam, mapped from YANG variable /brocade_mpls_rpc/show_mpls_statistics_oam (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_statistics_oam is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_statistics_oam() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_statistics_oam.show_mpls_statistics_oam, is_leaf=True, yang_name="show-mpls-statistics-oam", rest_name="show-mpls-statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsOam'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_statistics_oam must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_statistics_oam.show_mpls_statistics_oam, is_leaf=True, yang_name="show-mpls-statistics-oam", rest_name="show-mpls-statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsOam'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_statistics_oam = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_statistics_oam(self):
    self.__show_mpls_statistics_oam = YANGDynClass(base=show_mpls_statistics_oam.show_mpls_statistics_oam, is_leaf=True, yang_name="show-mpls-statistics-oam", rest_name="show-mpls-statistics-oam", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsStatisticsOam'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_ldp_session_brief(self):
    """
    Getter method for get_mpls_ldp_session_brief, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_session_brief (rpc)
    """
    return self.__get_mpls_ldp_session_brief
      
  def _set_get_mpls_ldp_session_brief(self, v, load=False):
    """
    Setter method for get_mpls_ldp_session_brief, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_session_brief (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_ldp_session_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_ldp_session_brief() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_ldp_session_brief.get_mpls_ldp_session_brief, is_leaf=True, yang_name="get-mpls-ldp-session-brief", rest_name="get-mpls-ldp-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_ldp_session_brief must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_ldp_session_brief.get_mpls_ldp_session_brief, is_leaf=True, yang_name="get-mpls-ldp-session-brief", rest_name="get-mpls-ldp-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_ldp_session_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_ldp_session_brief(self):
    self.__get_mpls_ldp_session_brief = YANGDynClass(base=get_mpls_ldp_session_brief.get_mpls_ldp_session_brief, is_leaf=True, yang_name="get-mpls-ldp-session-brief", rest_name="get-mpls-ldp-session-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_ldp_session_detail(self):
    """
    Getter method for get_mpls_ldp_session_detail, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_session_detail (rpc)
    """
    return self.__get_mpls_ldp_session_detail
      
  def _set_get_mpls_ldp_session_detail(self, v, load=False):
    """
    Setter method for get_mpls_ldp_session_detail, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_session_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_ldp_session_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_ldp_session_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_ldp_session_detail.get_mpls_ldp_session_detail, is_leaf=True, yang_name="get-mpls-ldp-session-detail", rest_name="get-mpls-ldp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_ldp_session_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_ldp_session_detail.get_mpls_ldp_session_detail, is_leaf=True, yang_name="get-mpls-ldp-session-detail", rest_name="get-mpls-ldp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_ldp_session_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_ldp_session_detail(self):
    self.__get_mpls_ldp_session_detail = YANGDynClass(base=get_mpls_ldp_session_detail.get_mpls_ldp_session_detail, is_leaf=True, yang_name="get-mpls-ldp-session-detail", rest_name="get-mpls-ldp-session-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_ldp_session_one(self):
    """
    Getter method for get_mpls_ldp_session_one, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_session_one (rpc)
    """
    return self.__get_mpls_ldp_session_one
      
  def _set_get_mpls_ldp_session_one(self, v, load=False):
    """
    Setter method for get_mpls_ldp_session_one, mapped from YANG variable /brocade_mpls_rpc/get_mpls_ldp_session_one (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_ldp_session_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_ldp_session_one() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_ldp_session_one.get_mpls_ldp_session_one, is_leaf=True, yang_name="get-mpls-ldp-session-one", rest_name="get-mpls-ldp-session-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_ldp_session_one must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_ldp_session_one.get_mpls_ldp_session_one, is_leaf=True, yang_name="get-mpls-ldp-session-one", rest_name="get-mpls-ldp-session-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_ldp_session_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_ldp_session_one(self):
    self.__get_mpls_ldp_session_one = YANGDynClass(base=get_mpls_ldp_session_one.get_mpls_ldp_session_one, is_leaf=True, yang_name="get-mpls-ldp-session-one", rest_name="get-mpls-ldp-session-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsLdpSession'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_autobw_template_brief(self):
    """
    Getter method for get_mpls_autobw_template_brief, mapped from YANG variable /brocade_mpls_rpc/get_mpls_autobw_template_brief (rpc)
    """
    return self.__get_mpls_autobw_template_brief
      
  def _set_get_mpls_autobw_template_brief(self, v, load=False):
    """
    Setter method for get_mpls_autobw_template_brief, mapped from YANG variable /brocade_mpls_rpc/get_mpls_autobw_template_brief (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_autobw_template_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_autobw_template_brief() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_autobw_template_brief.get_mpls_autobw_template_brief, is_leaf=True, yang_name="get-mpls-autobw-template-brief", rest_name="get-mpls-autobw-template-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_autobw_template_brief must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_autobw_template_brief.get_mpls_autobw_template_brief, is_leaf=True, yang_name="get-mpls-autobw-template-brief", rest_name="get-mpls-autobw-template-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_autobw_template_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_autobw_template_brief(self):
    self.__get_mpls_autobw_template_brief = YANGDynClass(base=get_mpls_autobw_template_brief.get_mpls_autobw_template_brief, is_leaf=True, yang_name="get-mpls-autobw-template-brief", rest_name="get-mpls-autobw-template-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_autobw_template_detail(self):
    """
    Getter method for get_mpls_autobw_template_detail, mapped from YANG variable /brocade_mpls_rpc/get_mpls_autobw_template_detail (rpc)
    """
    return self.__get_mpls_autobw_template_detail
      
  def _set_get_mpls_autobw_template_detail(self, v, load=False):
    """
    Setter method for get_mpls_autobw_template_detail, mapped from YANG variable /brocade_mpls_rpc/get_mpls_autobw_template_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_autobw_template_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_autobw_template_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_autobw_template_detail.get_mpls_autobw_template_detail, is_leaf=True, yang_name="get-mpls-autobw-template-detail", rest_name="get-mpls-autobw-template-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_autobw_template_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_autobw_template_detail.get_mpls_autobw_template_detail, is_leaf=True, yang_name="get-mpls-autobw-template-detail", rest_name="get-mpls-autobw-template-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_autobw_template_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_autobw_template_detail(self):
    self.__get_mpls_autobw_template_detail = YANGDynClass(base=get_mpls_autobw_template_detail.get_mpls_autobw_template_detail, is_leaf=True, yang_name="get-mpls-autobw-template-detail", rest_name="get-mpls-autobw-template-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_get_mpls_autobw_template_one(self):
    """
    Getter method for get_mpls_autobw_template_one, mapped from YANG variable /brocade_mpls_rpc/get_mpls_autobw_template_one (rpc)
    """
    return self.__get_mpls_autobw_template_one
      
  def _set_get_mpls_autobw_template_one(self, v, load=False):
    """
    Setter method for get_mpls_autobw_template_one, mapped from YANG variable /brocade_mpls_rpc/get_mpls_autobw_template_one (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_mpls_autobw_template_one is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_mpls_autobw_template_one() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_mpls_autobw_template_one.get_mpls_autobw_template_one, is_leaf=True, yang_name="get-mpls-autobw-template-one", rest_name="get-mpls-autobw-template-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_mpls_autobw_template_one must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_mpls_autobw_template_one.get_mpls_autobw_template_one, is_leaf=True, yang_name="get-mpls-autobw-template-one", rest_name="get-mpls-autobw-template-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__get_mpls_autobw_template_one = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_mpls_autobw_template_one(self):
    self.__get_mpls_autobw_template_one = YANGDynClass(base=get_mpls_autobw_template_one.get_mpls_autobw_template_one, is_leaf=True, yang_name="get-mpls-autobw-template-one", rest_name="get-mpls-autobw-template-one", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsAutobwTemplate'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_dynamic_bypass(self):
    """
    Getter method for show_mpls_dynamic_bypass, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass (rpc)
    """
    return self.__show_mpls_dynamic_bypass
      
  def _set_show_mpls_dynamic_bypass(self, v, load=False):
    """
    Setter method for show_mpls_dynamic_bypass, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_dynamic_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_dynamic_bypass() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_dynamic_bypass.show_mpls_dynamic_bypass, is_leaf=True, yang_name="show-mpls-dynamic-bypass", rest_name="show-mpls-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_dynamic_bypass must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_dynamic_bypass.show_mpls_dynamic_bypass, is_leaf=True, yang_name="show-mpls-dynamic-bypass", rest_name="show-mpls-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_dynamic_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_dynamic_bypass(self):
    self.__show_mpls_dynamic_bypass = YANGDynClass(base=show_mpls_dynamic_bypass.show_mpls_dynamic_bypass, is_leaf=True, yang_name="show-mpls-dynamic-bypass", rest_name="show-mpls-dynamic-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_dynamic_bypass_interface_brief(self):
    """
    Getter method for show_mpls_dynamic_bypass_interface_brief, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass_interface_brief (rpc)
    """
    return self.__show_mpls_dynamic_bypass_interface_brief
      
  def _set_show_mpls_dynamic_bypass_interface_brief(self, v, load=False):
    """
    Setter method for show_mpls_dynamic_bypass_interface_brief, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass_interface_brief (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_dynamic_bypass_interface_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_dynamic_bypass_interface_brief() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_dynamic_bypass_interface_brief.show_mpls_dynamic_bypass_interface_brief, is_leaf=True, yang_name="show-mpls-dynamic-bypass-interface-brief", rest_name="show-mpls-dynamic-bypass-interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_dynamic_bypass_interface_brief must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_dynamic_bypass_interface_brief.show_mpls_dynamic_bypass_interface_brief, is_leaf=True, yang_name="show-mpls-dynamic-bypass-interface-brief", rest_name="show-mpls-dynamic-bypass-interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_dynamic_bypass_interface_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_dynamic_bypass_interface_brief(self):
    self.__show_mpls_dynamic_bypass_interface_brief = YANGDynClass(base=show_mpls_dynamic_bypass_interface_brief.show_mpls_dynamic_bypass_interface_brief, is_leaf=True, yang_name="show-mpls-dynamic-bypass-interface-brief", rest_name="show-mpls-dynamic-bypass-interface-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsDynamicBypass'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_show_mpls_route(self):
    """
    Getter method for show_mpls_route, mapped from YANG variable /brocade_mpls_rpc/show_mpls_route (rpc)
    """
    return self.__show_mpls_route
      
  def _set_show_mpls_route(self, v, load=False):
    """
    Setter method for show_mpls_route, mapped from YANG variable /brocade_mpls_rpc/show_mpls_route (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_mpls_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_mpls_route() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=show_mpls_route.show_mpls_route, is_leaf=True, yang_name="show-mpls-route", rest_name="show-mpls-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRoute'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_mpls_route must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=show_mpls_route.show_mpls_route, is_leaf=True, yang_name="show-mpls-route", rest_name="show-mpls-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRoute'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__show_mpls_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_mpls_route(self):
    self.__show_mpls_route = YANGDynClass(base=show_mpls_route.show_mpls_route, is_leaf=True, yang_name="show-mpls-route", rest_name="show-mpls-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'showMplsRoute'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_lsp(self):
    """
    Getter method for clear_mpls_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_lsp (rpc)
    """
    return self.__clear_mpls_lsp
      
  def _set_clear_mpls_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_lsp(self):
    self.__clear_mpls_lsp = YANGDynClass(base=clear_mpls_lsp.clear_mpls_lsp, is_leaf=True, yang_name="clear-mpls-lsp", rest_name="clear-mpls-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_bypass_lsp(self):
    """
    Getter method for clear_mpls_bypass_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_bypass_lsp (rpc)
    """
    return self.__clear_mpls_bypass_lsp
      
  def _set_clear_mpls_bypass_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_bypass_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_bypass_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_bypass_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_bypass_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_bypass_lsp.clear_mpls_bypass_lsp, is_leaf=True, yang_name="clear-mpls-bypass-lsp", rest_name="clear-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_bypass_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_bypass_lsp.clear_mpls_bypass_lsp, is_leaf=True, yang_name="clear-mpls-bypass-lsp", rest_name="clear-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_bypass_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_bypass_lsp(self):
    self.__clear_mpls_bypass_lsp = YANGDynClass(base=clear_mpls_bypass_lsp.clear_mpls_bypass_lsp, is_leaf=True, yang_name="clear-mpls-bypass-lsp", rest_name="clear-mpls-bypass-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMpls'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_mpls_reopt_lsp(self):
    """
    Getter method for mpls_reopt_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_reopt_lsp (rpc)
    """
    return self.__mpls_reopt_lsp
      
  def _set_mpls_reopt_lsp(self, v, load=False):
    """
    Setter method for mpls_reopt_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_reopt_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_reopt_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_reopt_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsReoptimize'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_reopt_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsReoptimize'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__mpls_reopt_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_reopt_lsp(self):
    self.__mpls_reopt_lsp = YANGDynClass(base=mpls_reopt_lsp.mpls_reopt_lsp, is_leaf=True, yang_name="mpls-reopt-lsp", rest_name="mpls-reopt-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsReoptimize'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_rsvp_statistics(self):
    """
    Getter method for clear_mpls_rsvp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics (rpc)
    """
    return self.__clear_mpls_rsvp_statistics
      
  def _set_clear_mpls_rsvp_statistics(self, v, load=False):
    """
    Setter method for clear_mpls_rsvp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_rsvp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_rsvp_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_rsvp_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_rsvp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_rsvp_statistics(self):
    self.__clear_mpls_rsvp_statistics = YANGDynClass(base=clear_mpls_rsvp_statistics.clear_mpls_rsvp_statistics, is_leaf=True, yang_name="clear-mpls-rsvp-statistics", rest_name="clear-mpls-rsvp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_rsvp_statistics_neighbor(self):
    """
    Getter method for clear_mpls_rsvp_statistics_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics_neighbor (rpc)
    """
    return self.__clear_mpls_rsvp_statistics_neighbor
      
  def _set_clear_mpls_rsvp_statistics_neighbor(self, v, load=False):
    """
    Setter method for clear_mpls_rsvp_statistics_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_rsvp_statistics_neighbor (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_rsvp_statistics_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_rsvp_statistics_neighbor() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatisticsNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_rsvp_statistics_neighbor must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatisticsNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_rsvp_statistics_neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_rsvp_statistics_neighbor(self):
    self.__clear_mpls_rsvp_statistics_neighbor = YANGDynClass(base=clear_mpls_rsvp_statistics_neighbor.clear_mpls_rsvp_statistics_neighbor, is_leaf=True, yang_name="clear-mpls-rsvp-statistics-neighbor", rest_name="clear-mpls-rsvp-statistics-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsRsvpStatisticsNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_ldp_statistics(self):
    """
    Getter method for clear_mpls_ldp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_statistics (rpc)
    """
    return self.__clear_mpls_ldp_statistics
      
  def _set_clear_mpls_ldp_statistics(self, v, load=False):
    """
    Setter method for clear_mpls_ldp_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_ldp_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_ldp_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_ldp_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_ldp_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_ldp_statistics(self):
    self.__clear_mpls_ldp_statistics = YANGDynClass(base=clear_mpls_ldp_statistics.clear_mpls_ldp_statistics, is_leaf=True, yang_name="clear-mpls-ldp-statistics", rest_name="clear-mpls-ldp-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_statistics(self):
    """
    Getter method for clear_mpls_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics (rpc)
    """
    return self.__clear_mpls_statistics
      
  def _set_clear_mpls_statistics(self, v, load=False):
    """
    Setter method for clear_mpls_statistics, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_statistics() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_statistics must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_statistics(self):
    self.__clear_mpls_statistics = YANGDynClass(base=clear_mpls_statistics.clear_mpls_statistics, is_leaf=True, yang_name="clear-mpls-statistics", rest_name="clear-mpls-statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_statistics_ldp_tunnel(self):
    """
    Getter method for clear_mpls_statistics_ldp_tunnel, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_tunnel (rpc)
    """
    return self.__clear_mpls_statistics_ldp_tunnel
      
  def _set_clear_mpls_statistics_ldp_tunnel(self, v, load=False):
    """
    Setter method for clear_mpls_statistics_ldp_tunnel, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_tunnel (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_statistics_ldp_tunnel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_statistics_ldp_tunnel() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_statistics_ldp_tunnel must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_statistics_ldp_tunnel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_statistics_ldp_tunnel(self):
    self.__clear_mpls_statistics_ldp_tunnel = YANGDynClass(base=clear_mpls_statistics_ldp_tunnel.clear_mpls_statistics_ldp_tunnel, is_leaf=True, yang_name="clear-mpls-statistics-ldp-tunnel", rest_name="clear-mpls-statistics-ldp-tunnel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_ldp_neighbor(self):
    """
    Getter method for clear_mpls_ldp_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_neighbor (rpc)
    """
    return self.__clear_mpls_ldp_neighbor
      
  def _set_clear_mpls_ldp_neighbor(self, v, load=False):
    """
    Setter method for clear_mpls_ldp_neighbor, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_ldp_neighbor (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_ldp_neighbor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_ldp_neighbor() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_ldp_neighbor must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_ldp_neighbor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_ldp_neighbor(self):
    self.__clear_mpls_ldp_neighbor = YANGDynClass(base=clear_mpls_ldp_neighbor.clear_mpls_ldp_neighbor, is_leaf=True, yang_name="clear-mpls-ldp-neighbor", rest_name="clear-mpls-ldp-neighbor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsLdpNeighbor'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_statistics_ldp_transit(self):
    """
    Getter method for clear_mpls_statistics_ldp_transit, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit (rpc)
    """
    return self.__clear_mpls_statistics_ldp_transit
      
  def _set_clear_mpls_statistics_ldp_transit(self, v, load=False):
    """
    Setter method for clear_mpls_statistics_ldp_transit, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_statistics_ldp_transit (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_statistics_ldp_transit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_statistics_ldp_transit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_statistics_ldp_transit must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_statistics_ldp_transit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_statistics_ldp_transit(self):
    self.__clear_mpls_statistics_ldp_transit = YANGDynClass(base=clear_mpls_statistics_ldp_transit.clear_mpls_statistics_ldp_transit, is_leaf=True, yang_name="clear-mpls-statistics-ldp-transit", rest_name="clear-mpls-statistics-ldp-transit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsStatisticsLdp'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_auto_bandwidth_statistics_lsp(self):
    """
    Getter method for clear_mpls_auto_bandwidth_statistics_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_statistics_lsp (rpc)
    """
    return self.__clear_mpls_auto_bandwidth_statistics_lsp
      
  def _set_clear_mpls_auto_bandwidth_statistics_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_auto_bandwidth_statistics_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_statistics_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_auto_bandwidth_statistics_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_auto_bandwidth_statistics_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_auto_bandwidth_statistics_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_auto_bandwidth_statistics_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_auto_bandwidth_statistics_lsp(self):
    self.__clear_mpls_auto_bandwidth_statistics_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_lsp.clear_mpls_auto_bandwidth_statistics_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-lsp", rest_name="clear-mpls-auto-bandwidth-statistics-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatistics'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_auto_bandwidth_sample_history_lsp(self):
    """
    Getter method for clear_mpls_auto_bandwidth_sample_history_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_sample_history_lsp (rpc)
    """
    return self.__clear_mpls_auto_bandwidth_sample_history_lsp
      
  def _set_clear_mpls_auto_bandwidth_sample_history_lsp(self, v, load=False):
    """
    Setter method for clear_mpls_auto_bandwidth_sample_history_lsp, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_sample_history_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_auto_bandwidth_sample_history_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_auto_bandwidth_sample_history_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistory'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_auto_bandwidth_sample_history_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistory'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_auto_bandwidth_sample_history_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_auto_bandwidth_sample_history_lsp(self):
    self.__clear_mpls_auto_bandwidth_sample_history_lsp = YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_lsp.clear_mpls_auto_bandwidth_sample_history_lsp, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-lsp", rest_name="clear-mpls-auto-bandwidth-sample-history-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistory'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_auto_bandwidth_statistics_all(self):
    """
    Getter method for clear_mpls_auto_bandwidth_statistics_all, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_statistics_all (rpc)
    """
    return self.__clear_mpls_auto_bandwidth_statistics_all
      
  def _set_clear_mpls_auto_bandwidth_statistics_all(self, v, load=False):
    """
    Setter method for clear_mpls_auto_bandwidth_statistics_all, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_statistics_all (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_auto_bandwidth_statistics_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_auto_bandwidth_statistics_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_auto_bandwidth_statistics_all.clear_mpls_auto_bandwidth_statistics_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-all", rest_name="clear-mpls-auto-bandwidth-statistics-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatisticsAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_auto_bandwidth_statistics_all must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_all.clear_mpls_auto_bandwidth_statistics_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-all", rest_name="clear-mpls-auto-bandwidth-statistics-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatisticsAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_auto_bandwidth_statistics_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_auto_bandwidth_statistics_all(self):
    self.__clear_mpls_auto_bandwidth_statistics_all = YANGDynClass(base=clear_mpls_auto_bandwidth_statistics_all.clear_mpls_auto_bandwidth_statistics_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-statistics-all", rest_name="clear-mpls-auto-bandwidth-statistics-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthStatisticsAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_clear_mpls_auto_bandwidth_sample_history_all(self):
    """
    Getter method for clear_mpls_auto_bandwidth_sample_history_all, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_sample_history_all (rpc)
    """
    return self.__clear_mpls_auto_bandwidth_sample_history_all
      
  def _set_clear_mpls_auto_bandwidth_sample_history_all(self, v, load=False):
    """
    Setter method for clear_mpls_auto_bandwidth_sample_history_all, mapped from YANG variable /brocade_mpls_rpc/clear_mpls_auto_bandwidth_sample_history_all (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clear_mpls_auto_bandwidth_sample_history_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clear_mpls_auto_bandwidth_sample_history_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clear_mpls_auto_bandwidth_sample_history_all.clear_mpls_auto_bandwidth_sample_history_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-all", rest_name="clear-mpls-auto-bandwidth-sample-history-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistoryAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clear_mpls_auto_bandwidth_sample_history_all must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_all.clear_mpls_auto_bandwidth_sample_history_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-all", rest_name="clear-mpls-auto-bandwidth-sample-history-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistoryAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__clear_mpls_auto_bandwidth_sample_history_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clear_mpls_auto_bandwidth_sample_history_all(self):
    self.__clear_mpls_auto_bandwidth_sample_history_all = YANGDynClass(base=clear_mpls_auto_bandwidth_sample_history_all.clear_mpls_auto_bandwidth_sample_history_all, is_leaf=True, yang_name="clear-mpls-auto-bandwidth-sample-history-all", rest_name="clear-mpls-auto-bandwidth-sample-history-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'clearMplsAutoBandwidthSampleHistoryAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_mpls_adjust_bandwidth_lsp(self):
    """
    Getter method for mpls_adjust_bandwidth_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp (rpc)
    """
    return self.__mpls_adjust_bandwidth_lsp
      
  def _set_mpls_adjust_bandwidth_lsp(self, v, load=False):
    """
    Setter method for mpls_adjust_bandwidth_lsp, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_adjust_bandwidth_lsp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_adjust_bandwidth_lsp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_adjust_bandwidth_lsp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__mpls_adjust_bandwidth_lsp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_adjust_bandwidth_lsp(self):
    self.__mpls_adjust_bandwidth_lsp = YANGDynClass(base=mpls_adjust_bandwidth_lsp.mpls_adjust_bandwidth_lsp, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp", rest_name="mpls-adjust-bandwidth-lsp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_mpls_adjust_bandwidth_lsp_all(self):
    """
    Getter method for mpls_adjust_bandwidth_lsp_all, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp_all (rpc)
    """
    return self.__mpls_adjust_bandwidth_lsp_all
      
  def _set_mpls_adjust_bandwidth_lsp_all(self, v, load=False):
    """
    Setter method for mpls_adjust_bandwidth_lsp_all, mapped from YANG variable /brocade_mpls_rpc/mpls_adjust_bandwidth_lsp_all (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_adjust_bandwidth_lsp_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_adjust_bandwidth_lsp_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mpls_adjust_bandwidth_lsp_all.mpls_adjust_bandwidth_lsp_all, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp-all", rest_name="mpls-adjust-bandwidth-lsp-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidthAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_adjust_bandwidth_lsp_all must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=mpls_adjust_bandwidth_lsp_all.mpls_adjust_bandwidth_lsp_all, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp-all", rest_name="mpls-adjust-bandwidth-lsp-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidthAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__mpls_adjust_bandwidth_lsp_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_adjust_bandwidth_lsp_all(self):
    self.__mpls_adjust_bandwidth_lsp_all = YANGDynClass(base=mpls_adjust_bandwidth_lsp_all.mpls_adjust_bandwidth_lsp_all, is_leaf=True, yang_name="mpls-adjust-bandwidth-lsp-all", rest_name="mpls-adjust-bandwidth-lsp-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsAdjustBandwidthAll'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)


  def _get_ping_mpls(self):
    """
    Getter method for ping_mpls, mapped from YANG variable /brocade_mpls_rpc/ping_mpls (rpc)
    """
    return self.__ping_mpls
      
  def _set_ping_mpls(self, v, load=False):
    """
    Setter method for ping_mpls, mapped from YANG variable /brocade_mpls_rpc/ping_mpls (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ping_mpls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ping_mpls() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ping_mpls.ping_mpls, is_leaf=True, yang_name="ping-mpls", rest_name="ping-mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsPing'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ping_mpls must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=ping_mpls.ping_mpls, is_leaf=True, yang_name="ping-mpls", rest_name="ping-mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsPing'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)""",
        })

    self.__ping_mpls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ping_mpls(self):
    self.__ping_mpls = YANGDynClass(base=ping_mpls.ping_mpls, is_leaf=True, yang_name="ping-mpls", rest_name="ping-mpls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'mplsPing'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='rpc', is_config=True)

  show_mpls_summary = __builtin__.property(_get_show_mpls_summary, _set_show_mpls_summary)
  show_mpls_te_path = __builtin__.property(_get_show_mpls_te_path, _set_show_mpls_te_path)
  show_mpls_statistics_ldp_transit = __builtin__.property(_get_show_mpls_statistics_ldp_transit, _set_show_mpls_statistics_ldp_transit)
  show_mpls_statistics_ldp_tunnel = __builtin__.property(_get_show_mpls_statistics_ldp_tunnel, _set_show_mpls_statistics_ldp_tunnel)
  show_mpls_ldp_path = __builtin__.property(_get_show_mpls_ldp_path, _set_show_mpls_ldp_path)
  show_mpls_ldp_path_one = __builtin__.property(_get_show_mpls_ldp_path_one, _set_show_mpls_ldp_path_one)
  show_mpls_ldp_targeted_peer_all = __builtin__.property(_get_show_mpls_ldp_targeted_peer_all, _set_show_mpls_ldp_targeted_peer_all)
  show_mpls_ldp_targeted_peer_one = __builtin__.property(_get_show_mpls_ldp_targeted_peer_one, _set_show_mpls_ldp_targeted_peer_one)
  show_mpls_ldp_fec = __builtin__.property(_get_show_mpls_ldp_fec, _set_show_mpls_ldp_fec)
  show_mpls_ldp_fec_summary = __builtin__.property(_get_show_mpls_ldp_fec_summary, _set_show_mpls_ldp_fec_summary)
  show_mpls_ldp_fec_prefix = __builtin__.property(_get_show_mpls_ldp_fec_prefix, _set_show_mpls_ldp_fec_prefix)
  show_mpls_ldp_fec_prefix_prefix = __builtin__.property(_get_show_mpls_ldp_fec_prefix_prefix, _set_show_mpls_ldp_fec_prefix_prefix)
  show_mpls_ldp_fec_prefix_prefix_longer = __builtin__.property(_get_show_mpls_ldp_fec_prefix_prefix_longer, _set_show_mpls_ldp_fec_prefix_prefix_longer)
  show_mpls_ldp_fec_prefix_filtered = __builtin__.property(_get_show_mpls_ldp_fec_prefix_filtered, _set_show_mpls_ldp_fec_prefix_filtered)
  show_mpls_ldp_fec_prefix_prefix_filter = __builtin__.property(_get_show_mpls_ldp_fec_prefix_prefix_filter, _set_show_mpls_ldp_fec_prefix_prefix_filter)
  show_mpls_ldp_fec_vc = __builtin__.property(_get_show_mpls_ldp_fec_vc, _set_show_mpls_ldp_fec_vc)
  show_mpls_ldp_fec_vc_id = __builtin__.property(_get_show_mpls_ldp_fec_vc_id, _set_show_mpls_ldp_fec_vc_id)
  show_mpls_ldp_peer_br = __builtin__.property(_get_show_mpls_ldp_peer_br, _set_show_mpls_ldp_peer_br)
  show_mpls_ldp_peer_det = __builtin__.property(_get_show_mpls_ldp_peer_det, _set_show_mpls_ldp_peer_det)
  show_mpls_ldp_peer_det_rec = __builtin__.property(_get_show_mpls_ldp_peer_det_rec, _set_show_mpls_ldp_peer_det_rec)
  show_mpls_policy = __builtin__.property(_get_show_mpls_policy, _set_show_mpls_policy)
  show_mpls_interface = __builtin__.property(_get_show_mpls_interface, _set_show_mpls_interface)
  show_mpls_interface_detail = __builtin__.property(_get_show_mpls_interface_detail, _set_show_mpls_interface_detail)
  show_mpls_interface_one_interface = __builtin__.property(_get_show_mpls_interface_one_interface, _set_show_mpls_interface_one_interface)
  show_mpls_rsvp = __builtin__.property(_get_show_mpls_rsvp, _set_show_mpls_rsvp)
  show_mpls_rsvp_statistics = __builtin__.property(_get_show_mpls_rsvp_statistics, _set_show_mpls_rsvp_statistics)
  show_mpls_ldp_statistics = __builtin__.property(_get_show_mpls_ldp_statistics, _set_show_mpls_ldp_statistics)
  show_mpls_rsvp_interface = __builtin__.property(_get_show_mpls_rsvp_interface, _set_show_mpls_rsvp_interface)
  show_mpls_rsvp_interface_detail = __builtin__.property(_get_show_mpls_rsvp_interface_detail, _set_show_mpls_rsvp_interface_detail)
  show_mpls_rsvp_interface_one_interface = __builtin__.property(_get_show_mpls_rsvp_interface_one_interface, _set_show_mpls_rsvp_interface_one_interface)
  show_mpls_rsvp_neighbor = __builtin__.property(_get_show_mpls_rsvp_neighbor, _set_show_mpls_rsvp_neighbor)
  show_mpls_rsvp_neighbor_detail = __builtin__.property(_get_show_mpls_rsvp_neighbor_detail, _set_show_mpls_rsvp_neighbor_detail)
  show_mpls_rsvp_neighbor_one_neighbor = __builtin__.property(_get_show_mpls_rsvp_neighbor_one_neighbor, _set_show_mpls_rsvp_neighbor_one_neighbor)
  show_mpls_rsvp_session = __builtin__.property(_get_show_mpls_rsvp_session, _set_show_mpls_rsvp_session)
  show_mpls_rsvp_session_wide = __builtin__.property(_get_show_mpls_rsvp_session_wide, _set_show_mpls_rsvp_session_wide)
  show_mpls_rsvp_session_detail = __builtin__.property(_get_show_mpls_rsvp_session_detail, _set_show_mpls_rsvp_session_detail)
  show_mpls_rsvp_session_extensive = __builtin__.property(_get_show_mpls_rsvp_session_extensive, _set_show_mpls_rsvp_session_extensive)
  show_mpls_rsvp_session_name = __builtin__.property(_get_show_mpls_rsvp_session_name, _set_show_mpls_rsvp_session_name)
  show_mpls_lsp = __builtin__.property(_get_show_mpls_lsp, _set_show_mpls_lsp)
  show_mpls_lsp_detail = __builtin__.property(_get_show_mpls_lsp_detail, _set_show_mpls_lsp_detail)
  show_mpls_lsp_extensive = __builtin__.property(_get_show_mpls_lsp_extensive, _set_show_mpls_lsp_extensive)
  show_mpls_lsp_debug = __builtin__.property(_get_show_mpls_lsp_debug, _set_show_mpls_lsp_debug)
  show_mpls_lsp_name_detail = __builtin__.property(_get_show_mpls_lsp_name_detail, _set_show_mpls_lsp_name_detail)
  show_mpls_lsp_name_extensive = __builtin__.property(_get_show_mpls_lsp_name_extensive, _set_show_mpls_lsp_name_extensive)
  show_mpls_lsp_name_debug = __builtin__.property(_get_show_mpls_lsp_name_debug, _set_show_mpls_lsp_name_debug)
  show_mpls_bypass_lsp = __builtin__.property(_get_show_mpls_bypass_lsp, _set_show_mpls_bypass_lsp)
  show_mpls_bypass_lsp_detail = __builtin__.property(_get_show_mpls_bypass_lsp_detail, _set_show_mpls_bypass_lsp_detail)
  show_mpls_bypass_bypass_lsp_extensive = __builtin__.property(_get_show_mpls_bypass_bypass_lsp_extensive, _set_show_mpls_bypass_bypass_lsp_extensive)
  show_mpls_bypass_lsp_debug = __builtin__.property(_get_show_mpls_bypass_lsp_debug, _set_show_mpls_bypass_lsp_debug)
  show_mpls_bypass_lsp_name_detail = __builtin__.property(_get_show_mpls_bypass_lsp_name_detail, _set_show_mpls_bypass_lsp_name_detail)
  show_mpls_bypass_lsp_name_extensive = __builtin__.property(_get_show_mpls_bypass_lsp_name_extensive, _set_show_mpls_bypass_lsp_name_extensive)
  show_mpls_bypass_lsp_name_debug = __builtin__.property(_get_show_mpls_bypass_lsp_name_debug, _set_show_mpls_bypass_lsp_name_debug)
  get_mpls_ldp_neighbor_brief = __builtin__.property(_get_get_mpls_ldp_neighbor_brief, _set_get_mpls_ldp_neighbor_brief)
  get_mpls_ldp_neighbor_detail = __builtin__.property(_get_get_mpls_ldp_neighbor_detail, _set_get_mpls_ldp_neighbor_detail)
  get_mpls_ldp_neighbor_one = __builtin__.property(_get_get_mpls_ldp_neighbor_one, _set_get_mpls_ldp_neighbor_one)
  show_mpls_bfd = __builtin__.property(_get_show_mpls_bfd, _set_show_mpls_bfd)
  show_mpls_ldp = __builtin__.property(_get_show_mpls_ldp, _set_show_mpls_ldp)
  show_mpls_statistics_oam = __builtin__.property(_get_show_mpls_statistics_oam, _set_show_mpls_statistics_oam)
  get_mpls_ldp_session_brief = __builtin__.property(_get_get_mpls_ldp_session_brief, _set_get_mpls_ldp_session_brief)
  get_mpls_ldp_session_detail = __builtin__.property(_get_get_mpls_ldp_session_detail, _set_get_mpls_ldp_session_detail)
  get_mpls_ldp_session_one = __builtin__.property(_get_get_mpls_ldp_session_one, _set_get_mpls_ldp_session_one)
  get_mpls_autobw_template_brief = __builtin__.property(_get_get_mpls_autobw_template_brief, _set_get_mpls_autobw_template_brief)
  get_mpls_autobw_template_detail = __builtin__.property(_get_get_mpls_autobw_template_detail, _set_get_mpls_autobw_template_detail)
  get_mpls_autobw_template_one = __builtin__.property(_get_get_mpls_autobw_template_one, _set_get_mpls_autobw_template_one)
  show_mpls_dynamic_bypass = __builtin__.property(_get_show_mpls_dynamic_bypass, _set_show_mpls_dynamic_bypass)
  show_mpls_dynamic_bypass_interface_brief = __builtin__.property(_get_show_mpls_dynamic_bypass_interface_brief, _set_show_mpls_dynamic_bypass_interface_brief)
  show_mpls_route = __builtin__.property(_get_show_mpls_route, _set_show_mpls_route)
  clear_mpls_lsp = __builtin__.property(_get_clear_mpls_lsp, _set_clear_mpls_lsp)
  clear_mpls_bypass_lsp = __builtin__.property(_get_clear_mpls_bypass_lsp, _set_clear_mpls_bypass_lsp)
  mpls_reopt_lsp = __builtin__.property(_get_mpls_reopt_lsp, _set_mpls_reopt_lsp)
  clear_mpls_rsvp_statistics = __builtin__.property(_get_clear_mpls_rsvp_statistics, _set_clear_mpls_rsvp_statistics)
  clear_mpls_rsvp_statistics_neighbor = __builtin__.property(_get_clear_mpls_rsvp_statistics_neighbor, _set_clear_mpls_rsvp_statistics_neighbor)
  clear_mpls_ldp_statistics = __builtin__.property(_get_clear_mpls_ldp_statistics, _set_clear_mpls_ldp_statistics)
  clear_mpls_statistics = __builtin__.property(_get_clear_mpls_statistics, _set_clear_mpls_statistics)
  clear_mpls_statistics_ldp_tunnel = __builtin__.property(_get_clear_mpls_statistics_ldp_tunnel, _set_clear_mpls_statistics_ldp_tunnel)
  clear_mpls_ldp_neighbor = __builtin__.property(_get_clear_mpls_ldp_neighbor, _set_clear_mpls_ldp_neighbor)
  clear_mpls_statistics_ldp_transit = __builtin__.property(_get_clear_mpls_statistics_ldp_transit, _set_clear_mpls_statistics_ldp_transit)
  clear_mpls_auto_bandwidth_statistics_lsp = __builtin__.property(_get_clear_mpls_auto_bandwidth_statistics_lsp, _set_clear_mpls_auto_bandwidth_statistics_lsp)
  clear_mpls_auto_bandwidth_sample_history_lsp = __builtin__.property(_get_clear_mpls_auto_bandwidth_sample_history_lsp, _set_clear_mpls_auto_bandwidth_sample_history_lsp)
  clear_mpls_auto_bandwidth_statistics_all = __builtin__.property(_get_clear_mpls_auto_bandwidth_statistics_all, _set_clear_mpls_auto_bandwidth_statistics_all)
  clear_mpls_auto_bandwidth_sample_history_all = __builtin__.property(_get_clear_mpls_auto_bandwidth_sample_history_all, _set_clear_mpls_auto_bandwidth_sample_history_all)
  mpls_adjust_bandwidth_lsp = __builtin__.property(_get_mpls_adjust_bandwidth_lsp, _set_mpls_adjust_bandwidth_lsp)
  mpls_adjust_bandwidth_lsp_all = __builtin__.property(_get_mpls_adjust_bandwidth_lsp_all, _set_mpls_adjust_bandwidth_lsp_all)
  ping_mpls = __builtin__.property(_get_ping_mpls, _set_ping_mpls)


  _pyangbind_elements = {'show_mpls_summary': show_mpls_summary, 'show_mpls_te_path': show_mpls_te_path, 'show_mpls_statistics_ldp_transit': show_mpls_statistics_ldp_transit, 'show_mpls_statistics_ldp_tunnel': show_mpls_statistics_ldp_tunnel, 'show_mpls_ldp_path': show_mpls_ldp_path, 'show_mpls_ldp_path_one': show_mpls_ldp_path_one, 'show_mpls_ldp_targeted_peer_all': show_mpls_ldp_targeted_peer_all, 'show_mpls_ldp_targeted_peer_one': show_mpls_ldp_targeted_peer_one, 'show_mpls_ldp_fec': show_mpls_ldp_fec, 'show_mpls_ldp_fec_summary': show_mpls_ldp_fec_summary, 'show_mpls_ldp_fec_prefix': show_mpls_ldp_fec_prefix, 'show_mpls_ldp_fec_prefix_prefix': show_mpls_ldp_fec_prefix_prefix, 'show_mpls_ldp_fec_prefix_prefix_longer': show_mpls_ldp_fec_prefix_prefix_longer, 'show_mpls_ldp_fec_prefix_filtered': show_mpls_ldp_fec_prefix_filtered, 'show_mpls_ldp_fec_prefix_prefix_filter': show_mpls_ldp_fec_prefix_prefix_filter, 'show_mpls_ldp_fec_vc': show_mpls_ldp_fec_vc, 'show_mpls_ldp_fec_vc_id': show_mpls_ldp_fec_vc_id, 'show_mpls_ldp_peer_br': show_mpls_ldp_peer_br, 'show_mpls_ldp_peer_det': show_mpls_ldp_peer_det, 'show_mpls_ldp_peer_det_rec': show_mpls_ldp_peer_det_rec, 'show_mpls_policy': show_mpls_policy, 'show_mpls_interface': show_mpls_interface, 'show_mpls_interface_detail': show_mpls_interface_detail, 'show_mpls_interface_one_interface': show_mpls_interface_one_interface, 'show_mpls_rsvp': show_mpls_rsvp, 'show_mpls_rsvp_statistics': show_mpls_rsvp_statistics, 'show_mpls_ldp_statistics': show_mpls_ldp_statistics, 'show_mpls_rsvp_interface': show_mpls_rsvp_interface, 'show_mpls_rsvp_interface_detail': show_mpls_rsvp_interface_detail, 'show_mpls_rsvp_interface_one_interface': show_mpls_rsvp_interface_one_interface, 'show_mpls_rsvp_neighbor': show_mpls_rsvp_neighbor, 'show_mpls_rsvp_neighbor_detail': show_mpls_rsvp_neighbor_detail, 'show_mpls_rsvp_neighbor_one_neighbor': show_mpls_rsvp_neighbor_one_neighbor, 'show_mpls_rsvp_session': show_mpls_rsvp_session, 'show_mpls_rsvp_session_wide': show_mpls_rsvp_session_wide, 'show_mpls_rsvp_session_detail': show_mpls_rsvp_session_detail, 'show_mpls_rsvp_session_extensive': show_mpls_rsvp_session_extensive, 'show_mpls_rsvp_session_name': show_mpls_rsvp_session_name, 'show_mpls_lsp': show_mpls_lsp, 'show_mpls_lsp_detail': show_mpls_lsp_detail, 'show_mpls_lsp_extensive': show_mpls_lsp_extensive, 'show_mpls_lsp_debug': show_mpls_lsp_debug, 'show_mpls_lsp_name_detail': show_mpls_lsp_name_detail, 'show_mpls_lsp_name_extensive': show_mpls_lsp_name_extensive, 'show_mpls_lsp_name_debug': show_mpls_lsp_name_debug, 'show_mpls_bypass_lsp': show_mpls_bypass_lsp, 'show_mpls_bypass_lsp_detail': show_mpls_bypass_lsp_detail, 'show_mpls_bypass_bypass_lsp_extensive': show_mpls_bypass_bypass_lsp_extensive, 'show_mpls_bypass_lsp_debug': show_mpls_bypass_lsp_debug, 'show_mpls_bypass_lsp_name_detail': show_mpls_bypass_lsp_name_detail, 'show_mpls_bypass_lsp_name_extensive': show_mpls_bypass_lsp_name_extensive, 'show_mpls_bypass_lsp_name_debug': show_mpls_bypass_lsp_name_debug, 'get_mpls_ldp_neighbor_brief': get_mpls_ldp_neighbor_brief, 'get_mpls_ldp_neighbor_detail': get_mpls_ldp_neighbor_detail, 'get_mpls_ldp_neighbor_one': get_mpls_ldp_neighbor_one, 'show_mpls_bfd': show_mpls_bfd, 'show_mpls_ldp': show_mpls_ldp, 'show_mpls_statistics_oam': show_mpls_statistics_oam, 'get_mpls_ldp_session_brief': get_mpls_ldp_session_brief, 'get_mpls_ldp_session_detail': get_mpls_ldp_session_detail, 'get_mpls_ldp_session_one': get_mpls_ldp_session_one, 'get_mpls_autobw_template_brief': get_mpls_autobw_template_brief, 'get_mpls_autobw_template_detail': get_mpls_autobw_template_detail, 'get_mpls_autobw_template_one': get_mpls_autobw_template_one, 'show_mpls_dynamic_bypass': show_mpls_dynamic_bypass, 'show_mpls_dynamic_bypass_interface_brief': show_mpls_dynamic_bypass_interface_brief, 'show_mpls_route': show_mpls_route, 'clear_mpls_lsp': clear_mpls_lsp, 'clear_mpls_bypass_lsp': clear_mpls_bypass_lsp, 'mpls_reopt_lsp': mpls_reopt_lsp, 'clear_mpls_rsvp_statistics': clear_mpls_rsvp_statistics, 'clear_mpls_rsvp_statistics_neighbor': clear_mpls_rsvp_statistics_neighbor, 'clear_mpls_ldp_statistics': clear_mpls_ldp_statistics, 'clear_mpls_statistics': clear_mpls_statistics, 'clear_mpls_statistics_ldp_tunnel': clear_mpls_statistics_ldp_tunnel, 'clear_mpls_ldp_neighbor': clear_mpls_ldp_neighbor, 'clear_mpls_statistics_ldp_transit': clear_mpls_statistics_ldp_transit, 'clear_mpls_auto_bandwidth_statistics_lsp': clear_mpls_auto_bandwidth_statistics_lsp, 'clear_mpls_auto_bandwidth_sample_history_lsp': clear_mpls_auto_bandwidth_sample_history_lsp, 'clear_mpls_auto_bandwidth_statistics_all': clear_mpls_auto_bandwidth_statistics_all, 'clear_mpls_auto_bandwidth_sample_history_all': clear_mpls_auto_bandwidth_sample_history_all, 'mpls_adjust_bandwidth_lsp': mpls_adjust_bandwidth_lsp, 'mpls_adjust_bandwidth_lsp_all': mpls_adjust_bandwidth_lsp_all, 'ping_mpls': ping_mpls, }


