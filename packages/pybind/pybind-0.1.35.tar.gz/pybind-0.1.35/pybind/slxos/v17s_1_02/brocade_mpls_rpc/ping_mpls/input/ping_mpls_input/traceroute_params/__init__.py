
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class traceroute_params(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/ping-mpls/input/ping-mpls-input/traceroute-params. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__dsmap','__min_ttl','__max_ttl','__nexthop',)

  _yang_name = 'traceroute-params'
  _rest_name = 'traceroute-params'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__max_ttl = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="max-ttl", rest_name="max-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__min_ttl = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="min-ttl", rest_name="min-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__nexthop = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="nexthop", rest_name="nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    self.__dsmap = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dsmap", rest_name="dsmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'ping-mpls', u'input', u'ping-mpls-input', u'traceroute-params']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ping-mpls', u'input', u'ping-mpls-input', u'traceroute-params']

  def _get_dsmap(self):
    """
    Getter method for dsmap, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/dsmap (empty)

    YANG Description: detail
    """
    return self.__dsmap
      
  def _set_dsmap(self, v, load=False):
    """
    Setter method for dsmap, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/dsmap (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dsmap is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dsmap() directly.

    YANG Description: detail
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dsmap", rest_name="dsmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dsmap must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dsmap", rest_name="dsmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)""",
        })

    self.__dsmap = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dsmap(self):
    self.__dsmap = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dsmap", rest_name="dsmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)


  def _get_min_ttl(self):
    """
    Getter method for min_ttl, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/min_ttl (uint8)

    YANG Description: min-ttl
    """
    return self.__min_ttl
      
  def _set_min_ttl(self, v, load=False):
    """
    Setter method for min_ttl, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/min_ttl (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_ttl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_ttl() directly.

    YANG Description: min-ttl
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="min-ttl", rest_name="min-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_ttl must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="min-ttl", rest_name="min-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__min_ttl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_ttl(self):
    self.__min_ttl = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="min-ttl", rest_name="min-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_max_ttl(self):
    """
    Getter method for max_ttl, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/max_ttl (uint8)

    YANG Description: max-ttl
    """
    return self.__max_ttl
      
  def _set_max_ttl(self, v, load=False):
    """
    Setter method for max_ttl, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/max_ttl (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_ttl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_ttl() directly.

    YANG Description: max-ttl
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="max-ttl", rest_name="max-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_ttl must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="max-ttl", rest_name="max-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__max_ttl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_ttl(self):
    self.__max_ttl = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="max-ttl", rest_name="max-ttl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_nexthop(self):
    """
    Getter method for nexthop, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/nexthop (mpls-ipv4-address)

    YANG Description: nexthop
    """
    return self.__nexthop
      
  def _set_nexthop(self, v, load=False):
    """
    Setter method for nexthop, mapped from YANG variable /brocade_mpls_rpc/ping_mpls/input/ping_mpls_input/traceroute_params/nexthop (mpls-ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nexthop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nexthop() directly.

    YANG Description: nexthop
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="nexthop", rest_name="nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nexthop must be of a type compatible with mpls-ipv4-address""",
          'defined-type': "brocade-mpls:mpls-ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="nexthop", rest_name="nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)""",
        })

    self.__nexthop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nexthop(self):
    self.__nexthop = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="nexthop", rest_name="nexthop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='mpls-ipv4-address', is_config=True)

  dsmap = __builtin__.property(_get_dsmap, _set_dsmap)
  min_ttl = __builtin__.property(_get_min_ttl, _set_min_ttl)
  max_ttl = __builtin__.property(_get_max_ttl, _set_max_ttl)
  nexthop = __builtin__.property(_get_nexthop, _set_nexthop)


  _pyangbind_elements = {'dsmap': dsmap, 'min_ttl': min_ttl, 'max_ttl': max_ttl, 'nexthop': nexthop, }


