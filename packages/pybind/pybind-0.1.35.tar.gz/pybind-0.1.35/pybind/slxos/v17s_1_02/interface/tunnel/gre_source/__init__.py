
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class gre_source(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface/tunnel/gre-source. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__source_address','__interface_loopback','__interface_ethernet','__interface_ve',)

  _yang_name = 'gre-source'
  _rest_name = 'source'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__interface_loopback = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="interface-loopback", rest_name="loopback", parent=self, choice=(u'source-cmd', u'ca-interface-loopback'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Loopback port', u'cli-full-command': None, u'alt-name': u'loopback'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='lo:intf-loopback-port-type', is_config=True)
    self.__interface_ve = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 4095']}), is_leaf=True, yang_name="interface-ve", rest_name="ve", parent=self, choice=(u'source-cmd', u'ca-interface-ve'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u've num range 1 to 4095', u'cli-full-command': None, u'alt-name': u've'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='uint32', is_config=True)
    self.__source_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="source-address", rest_name="source-address", parent=self, choice=(u'source-cmd', u'ca-source-address'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='inet:ipv4-address', is_config=True)
    self.__interface_ethernet = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="interface-ethernet", rest_name="ethernet", parent=self, choice=(u'source-cmd', u'ca-interface-ethernet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet port', u'cli-full-command': None, u'alt-name': u'ethernet'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='interface:interface-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface', u'tunnel', u'gre-source']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'tunnel', u'source']

  def _get_source_address(self):
    """
    Getter method for source_address, mapped from YANG variable /interface/tunnel/gre_source/source_address (inet:ipv4-address)
    """
    return self.__source_address
      
  def _set_source_address(self, v, load=False):
    """
    Setter method for source_address, mapped from YANG variable /interface/tunnel/gre_source/source_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_source_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_source_address() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="source-address", rest_name="source-address", parent=self, choice=(u'source-cmd', u'ca-source-address'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """source_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="source-address", rest_name="source-address", parent=self, choice=(u'source-cmd', u'ca-source-address'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__source_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_source_address(self):
    self.__source_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="source-address", rest_name="source-address", parent=self, choice=(u'source-cmd', u'ca-source-address'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='inet:ipv4-address', is_config=True)


  def _get_interface_loopback(self):
    """
    Getter method for interface_loopback, mapped from YANG variable /interface/tunnel/gre_source/interface_loopback (lo:intf-loopback-port-type)
    """
    return self.__interface_loopback
      
  def _set_interface_loopback(self, v, load=False):
    """
    Setter method for interface_loopback, mapped from YANG variable /interface/tunnel/gre_source/interface_loopback (lo:intf-loopback-port-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_loopback is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_loopback() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="interface-loopback", rest_name="loopback", parent=self, choice=(u'source-cmd', u'ca-interface-loopback'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Loopback port', u'cli-full-command': None, u'alt-name': u'loopback'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='lo:intf-loopback-port-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_loopback must be of a type compatible with lo:intf-loopback-port-type""",
          'defined-type': "lo:intf-loopback-port-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="interface-loopback", rest_name="loopback", parent=self, choice=(u'source-cmd', u'ca-interface-loopback'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Loopback port', u'cli-full-command': None, u'alt-name': u'loopback'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='lo:intf-loopback-port-type', is_config=True)""",
        })

    self.__interface_loopback = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_loopback(self):
    self.__interface_loopback = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..255']}), is_leaf=True, yang_name="interface-loopback", rest_name="loopback", parent=self, choice=(u'source-cmd', u'ca-interface-loopback'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Loopback port', u'cli-full-command': None, u'alt-name': u'loopback'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='lo:intf-loopback-port-type', is_config=True)


  def _get_interface_ethernet(self):
    """
    Getter method for interface_ethernet, mapped from YANG variable /interface/tunnel/gre_source/interface_ethernet (interface:interface-type)
    """
    return self.__interface_ethernet
      
  def _set_interface_ethernet(self, v, load=False):
    """
    Setter method for interface_ethernet, mapped from YANG variable /interface/tunnel/gre_source/interface_ethernet (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ethernet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ethernet() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="interface-ethernet", rest_name="ethernet", parent=self, choice=(u'source-cmd', u'ca-interface-ethernet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet port', u'cli-full-command': None, u'alt-name': u'ethernet'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ethernet must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="interface-ethernet", rest_name="ethernet", parent=self, choice=(u'source-cmd', u'ca-interface-ethernet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet port', u'cli-full-command': None, u'alt-name': u'ethernet'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__interface_ethernet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ethernet(self):
    self.__interface_ethernet = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="interface-ethernet", rest_name="ethernet", parent=self, choice=(u'source-cmd', u'ca-interface-ethernet'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet port', u'cli-full-command': None, u'alt-name': u'ethernet'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='interface:interface-type', is_config=True)


  def _get_interface_ve(self):
    """
    Getter method for interface_ve, mapped from YANG variable /interface/tunnel/gre_source/interface_ve (uint32)
    """
    return self.__interface_ve
      
  def _set_interface_ve(self, v, load=False):
    """
    Setter method for interface_ve, mapped from YANG variable /interface/tunnel/gre_source/interface_ve (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ve is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ve() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 4095']}), is_leaf=True, yang_name="interface-ve", rest_name="ve", parent=self, choice=(u'source-cmd', u'ca-interface-ve'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u've num range 1 to 4095', u'cli-full-command': None, u'alt-name': u've'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ve must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 4095']}), is_leaf=True, yang_name="interface-ve", rest_name="ve", parent=self, choice=(u'source-cmd', u'ca-interface-ve'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u've num range 1 to 4095', u'cli-full-command': None, u'alt-name': u've'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='uint32', is_config=True)""",
        })

    self.__interface_ve = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ve(self):
    self.__interface_ve = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 4095']}), is_leaf=True, yang_name="interface-ve", rest_name="ve", parent=self, choice=(u'source-cmd', u'ca-interface-ve'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u've num range 1 to 4095', u'cli-full-command': None, u'alt-name': u've'}}, namespace='urn:brocade.com:mgmt:brocade-gre-vxlan', defining_module='brocade-gre-vxlan', yang_type='uint32', is_config=True)

  source_address = __builtin__.property(_get_source_address, _set_source_address)
  interface_loopback = __builtin__.property(_get_interface_loopback, _set_interface_loopback)
  interface_ethernet = __builtin__.property(_get_interface_ethernet, _set_interface_ethernet)
  interface_ve = __builtin__.property(_get_interface_ve, _set_interface_ve)

  __choices__ = {u'source-cmd': {u'ca-source-address': [u'source_address'], u'ca-interface-ethernet': [u'interface_ethernet'], u'ca-interface-loopback': [u'interface_loopback'], u'ca-interface-ve': [u'interface_ve']}}
  _pyangbind_elements = {'source_address': source_address, 'interface_loopback': interface_loopback, 'interface_ethernet': interface_ethernet, 'interface_ve': interface_ve, }


