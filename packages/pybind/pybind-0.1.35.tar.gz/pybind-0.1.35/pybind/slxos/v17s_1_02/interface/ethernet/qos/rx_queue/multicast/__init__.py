
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import queue_size
class multicast(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface/ethernet/qos/rx-queue/multicast. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__guarantee_rate','__best_effort_rate','__queue_size',)

  _yang_name = 'multicast'
  _rest_name = 'multicast'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__guarantee_rate = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="guarantee-rate", rest_name="guarantee-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data guarantee rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='guarantee-rate-type', is_config=True)
    self.__best_effort_rate = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="best-effort-rate", rest_name="best-effort-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data best effort rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='best-effort-rate-type', is_config=True)
    self.__queue_size = YANGDynClass(base=YANGListType("traffic_class",queue_size.queue_size, yang_name="queue-size", rest_name="queue-size", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class', extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}), is_container='list', yang_name="queue-size", rest_name="queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface', u'ethernet', u'qos', u'rx-queue', u'multicast']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Ethernet', u'qos', u'rx-queue', u'multicast']

  def _get_guarantee_rate(self):
    """
    Getter method for guarantee_rate, mapped from YANG variable /interface/ethernet/qos/rx_queue/multicast/guarantee_rate (guarantee-rate-type)
    """
    return self.__guarantee_rate
      
  def _set_guarantee_rate(self, v, load=False):
    """
    Setter method for guarantee_rate, mapped from YANG variable /interface/ethernet/qos/rx_queue/multicast/guarantee_rate (guarantee-rate-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_guarantee_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_guarantee_rate() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="guarantee-rate", rest_name="guarantee-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data guarantee rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='guarantee-rate-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """guarantee_rate must be of a type compatible with guarantee-rate-type""",
          'defined-type': "brocade-qos-mls:guarantee-rate-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="guarantee-rate", rest_name="guarantee-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data guarantee rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='guarantee-rate-type', is_config=True)""",
        })

    self.__guarantee_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_guarantee_rate(self):
    self.__guarantee_rate = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="guarantee-rate", rest_name="guarantee-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data guarantee rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='guarantee-rate-type', is_config=True)


  def _get_best_effort_rate(self):
    """
    Getter method for best_effort_rate, mapped from YANG variable /interface/ethernet/qos/rx_queue/multicast/best_effort_rate (best-effort-rate-type)
    """
    return self.__best_effort_rate
      
  def _set_best_effort_rate(self, v, load=False):
    """
    Setter method for best_effort_rate, mapped from YANG variable /interface/ethernet/qos/rx_queue/multicast/best_effort_rate (best-effort-rate-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_best_effort_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_best_effort_rate() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="best-effort-rate", rest_name="best-effort-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data best effort rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='best-effort-rate-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """best_effort_rate must be of a type compatible with best-effort-rate-type""",
          'defined-type': "brocade-qos-mls:best-effort-rate-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="best-effort-rate", rest_name="best-effort-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data best effort rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='best-effort-rate-type', is_config=True)""",
        })

    self.__best_effort_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_best_effort_rate(self):
    self.__best_effort_rate = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 600000000']}), is_leaf=True, yang_name="best-effort-rate", rest_name="best-effort-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast data best effort rate', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='best-effort-rate-type', is_config=True)


  def _get_queue_size(self):
    """
    Getter method for queue_size, mapped from YANG variable /interface/ethernet/qos/rx_queue/multicast/queue_size (list)
    """
    return self.__queue_size
      
  def _set_queue_size(self, v, load=False):
    """
    Setter method for queue_size, mapped from YANG variable /interface/ethernet/qos/rx_queue/multicast/queue_size (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_queue_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_queue_size() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("traffic_class",queue_size.queue_size, yang_name="queue-size", rest_name="queue-size", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class', extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}), is_container='list', yang_name="queue-size", rest_name="queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """queue_size must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("traffic_class",queue_size.queue_size, yang_name="queue-size", rest_name="queue-size", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class', extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}), is_container='list', yang_name="queue-size", rest_name="queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='list', is_config=True)""",
        })

    self.__queue_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_queue_size(self):
    self.__queue_size = YANGDynClass(base=YANGListType("traffic_class",queue_size.queue_size, yang_name="queue-size", rest_name="queue-size", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='traffic-class', extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}), is_container='list', yang_name="queue-size", rest_name="queue-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure multicast queue size', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'cli-compact-syntax': None, u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'callpoint': u'intrfc_rx_queue_multicast_qsize'}}, namespace='urn:brocade.com:mgmt:brocade-qos-mls', defining_module='brocade-qos-mls', yang_type='list', is_config=True)

  guarantee_rate = __builtin__.property(_get_guarantee_rate, _set_guarantee_rate)
  best_effort_rate = __builtin__.property(_get_best_effort_rate, _set_best_effort_rate)
  queue_size = __builtin__.property(_get_queue_size, _set_queue_size)


  _pyangbind_elements = {'guarantee_rate': guarantee_rate, 'best_effort_rate': best_effort_rate, 'queue_size': queue_size, }


