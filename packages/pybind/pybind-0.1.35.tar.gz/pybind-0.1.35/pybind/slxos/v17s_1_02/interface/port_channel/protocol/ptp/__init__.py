
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class ptp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface/port-channel/protocol/ptp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: PTP configuration. PTP protocol is enabled when
'protocol/ptp/enable' is set.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__enable','__announce_interval','__announce_timeout','__sync_interval','__delay_request_min_interval','__ptp_vlan',)

  _yang_name = 'ptp'
  _rest_name = 'ptp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__sync_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP synchronization messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable PTP protocol'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='empty', is_config=True)
    self.__delay_request_min_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="delay-request-min-interval", rest_name="delay-request-min-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Minimal interval allowed between PTP Delay-Request messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)
    self.__announce_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'3..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="announce-timeout", rest_name="announce-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Timeout between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)
    self.__ptp_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ptp-vlan", rest_name="ptp-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NUMBER:1-8191;;Vlan number.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='intf:vlan-type', is_config=True)
    self.__announce_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="announce-interval", rest_name="announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface', u'port-channel', u'protocol', u'ptp']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Port-channel', u'protocol', u'ptp']

  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /interface/port_channel/protocol/ptp/enable (empty)

    YANG Description: When present indicates PTP protocol is enabled.
Disabling PTP protocol will not clear other related 
configurations.
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /interface/port_channel/protocol/ptp/enable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.

    YANG Description: When present indicates PTP protocol is enabled.
Disabling PTP protocol will not clear other related 
configurations.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable PTP protocol'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable PTP protocol'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='empty', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable PTP protocol'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='empty', is_config=True)


  def _get_announce_interval(self):
    """
    Getter method for announce_interval, mapped from YANG variable /interface/port_channel/protocol/ptp/announce_interval (uint32)

    YANG Description: Interval between PTP announce messages.
    """
    return self.__announce_interval
      
  def _set_announce_interval(self, v, load=False):
    """
    Setter method for announce_interval, mapped from YANG variable /interface/port_channel/protocol/ptp/announce_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_announce_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_announce_interval() directly.

    YANG Description: Interval between PTP announce messages.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="announce-interval", rest_name="announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """announce_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="announce-interval", rest_name="announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)""",
        })

    self.__announce_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_announce_interval(self):
    self.__announce_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..4']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="announce-interval", rest_name="announce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)


  def _get_announce_timeout(self):
    """
    Getter method for announce_timeout, mapped from YANG variable /interface/port_channel/protocol/ptp/announce_timeout (uint32)

    YANG Description: Timeout between PTP announce messages.
    """
    return self.__announce_timeout
      
  def _set_announce_timeout(self, v, load=False):
    """
    Setter method for announce_timeout, mapped from YANG variable /interface/port_channel/protocol/ptp/announce_timeout (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_announce_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_announce_timeout() directly.

    YANG Description: Timeout between PTP announce messages.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'3..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="announce-timeout", rest_name="announce-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Timeout between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """announce_timeout must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'3..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="announce-timeout", rest_name="announce-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Timeout between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)""",
        })

    self.__announce_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_announce_timeout(self):
    self.__announce_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'3..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(3), is_leaf=True, yang_name="announce-timeout", rest_name="announce-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Timeout between PTP announce messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='uint32', is_config=True)


  def _get_sync_interval(self):
    """
    Getter method for sync_interval, mapped from YANG variable /interface/port_channel/protocol/ptp/sync_interval (int32)

    YANG Description: Interval between PTP synchronization messages.
    """
    return self.__sync_interval
      
  def _set_sync_interval(self, v, load=False):
    """
    Setter method for sync_interval, mapped from YANG variable /interface/port_channel/protocol/ptp/sync_interval (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sync_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sync_interval() directly.

    YANG Description: Interval between PTP synchronization messages.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP synchronization messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sync_interval must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP synchronization messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)""",
        })

    self.__sync_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sync_interval(self):
    self.__sync_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interval between PTP synchronization messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)


  def _get_delay_request_min_interval(self):
    """
    Getter method for delay_request_min_interval, mapped from YANG variable /interface/port_channel/protocol/ptp/delay_request_min_interval (int32)

    YANG Description: Minimal interval allowed between PTP Delay-Request messages.
    """
    return self.__delay_request_min_interval
      
  def _set_delay_request_min_interval(self, v, load=False):
    """
    Setter method for delay_request_min_interval, mapped from YANG variable /interface/port_channel/protocol/ptp/delay_request_min_interval (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_request_min_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_request_min_interval() directly.

    YANG Description: Minimal interval allowed between PTP Delay-Request messages.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="delay-request-min-interval", rest_name="delay-request-min-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Minimal interval allowed between PTP Delay-Request messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_request_min_interval must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="delay-request-min-interval", rest_name="delay-request-min-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Minimal interval allowed between PTP Delay-Request messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)""",
        })

    self.__delay_request_min_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_request_min_interval(self):
    self.__delay_request_min_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'-4..2']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32)(-1), is_leaf=True, yang_name="delay-request-min-interval", rest_name="delay-request-min-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Minimal interval allowed between PTP Delay-Request messages.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='int32', is_config=True)


  def _get_ptp_vlan(self):
    """
    Getter method for ptp_vlan, mapped from YANG variable /interface/port_channel/protocol/ptp/ptp_vlan (intf:vlan-type)

    YANG Description: Vlan interface number.
    """
    return self.__ptp_vlan
      
  def _set_ptp_vlan(self, v, load=False):
    """
    Setter method for ptp_vlan, mapped from YANG variable /interface/port_channel/protocol/ptp/ptp_vlan (intf:vlan-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ptp_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ptp_vlan() directly.

    YANG Description: Vlan interface number.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ptp-vlan", rest_name="ptp-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NUMBER:1-8191;;Vlan number.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='intf:vlan-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ptp_vlan must be of a type compatible with intf:vlan-type""",
          'defined-type': "intf:vlan-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ptp-vlan", rest_name="ptp-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NUMBER:1-8191;;Vlan number.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='intf:vlan-type', is_config=True)""",
        })

    self.__ptp_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ptp_vlan(self):
    self.__ptp_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ptp-vlan", rest_name="ptp-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NUMBER:1-8191;;Vlan number.'}}, namespace='urn:brocade.com:mgmt:brocade-ptp', defining_module='brocade-ptp', yang_type='intf:vlan-type', is_config=True)

  enable = __builtin__.property(_get_enable, _set_enable)
  announce_interval = __builtin__.property(_get_announce_interval, _set_announce_interval)
  announce_timeout = __builtin__.property(_get_announce_timeout, _set_announce_timeout)
  sync_interval = __builtin__.property(_get_sync_interval, _set_sync_interval)
  delay_request_min_interval = __builtin__.property(_get_delay_request_min_interval, _set_delay_request_min_interval)
  ptp_vlan = __builtin__.property(_get_ptp_vlan, _set_ptp_vlan)


  _pyangbind_elements = {'enable': enable, 'announce_interval': announce_interval, 'announce_timeout': announce_timeout, 'sync_interval': sync_interval, 'delay_request_min_interval': delay_request_min_interval, 'ptp_vlan': ptp_vlan, }


