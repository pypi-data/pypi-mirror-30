
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import packet_timestamp
class system(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface/ethernet/system. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: System settings
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__packet_timestamp',)

  _yang_name = 'system'
  _rest_name = 'system'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__packet_timestamp = YANGDynClass(base=packet_timestamp.packet_timestamp, is_container='container', presence=False, yang_name="packet-timestamp", rest_name="packet-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet timestamp setting', u'callpoint': u'PacketTimestampPhyIntf'}}, namespace='urn:brocade.com:mgmt:brocade-packet-timestamp', defining_module='brocade-packet-timestamp', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface', u'ethernet', u'system']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Ethernet', u'system']

  def _get_packet_timestamp(self):
    """
    Getter method for packet_timestamp, mapped from YANG variable /interface/ethernet/system/packet_timestamp (container)

    YANG Description: Packet timestamp setting
    """
    return self.__packet_timestamp
      
  def _set_packet_timestamp(self, v, load=False):
    """
    Setter method for packet_timestamp, mapped from YANG variable /interface/ethernet/system/packet_timestamp (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_packet_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_packet_timestamp() directly.

    YANG Description: Packet timestamp setting
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=packet_timestamp.packet_timestamp, is_container='container', presence=False, yang_name="packet-timestamp", rest_name="packet-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet timestamp setting', u'callpoint': u'PacketTimestampPhyIntf'}}, namespace='urn:brocade.com:mgmt:brocade-packet-timestamp', defining_module='brocade-packet-timestamp', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """packet_timestamp must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=packet_timestamp.packet_timestamp, is_container='container', presence=False, yang_name="packet-timestamp", rest_name="packet-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet timestamp setting', u'callpoint': u'PacketTimestampPhyIntf'}}, namespace='urn:brocade.com:mgmt:brocade-packet-timestamp', defining_module='brocade-packet-timestamp', yang_type='container', is_config=True)""",
        })

    self.__packet_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_packet_timestamp(self):
    self.__packet_timestamp = YANGDynClass(base=packet_timestamp.packet_timestamp, is_container='container', presence=False, yang_name="packet-timestamp", rest_name="packet-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet timestamp setting', u'callpoint': u'PacketTimestampPhyIntf'}}, namespace='urn:brocade.com:mgmt:brocade-packet-timestamp', defining_module='brocade-packet-timestamp', yang_type='container', is_config=True)

  packet_timestamp = __builtin__.property(_get_packet_timestamp, _set_packet_timestamp)


  _pyangbind_elements = {'packet_timestamp': packet_timestamp, }


