
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import mtu
import vc_mode
class pw_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-pw-profile - based on the path /pw-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__pw_profile_name','__mtu','__mtu_enforce','__vc_mode',)

  _yang_name = 'pw-profile'
  _rest_name = 'pw-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__pw_profile_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pw-profile name (Max Size - 64)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)
    self.__mtu_enforce = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)
    self.__vc_mode = YANGDynClass(base=vc_mode.vc_mode, is_container='container', presence=False, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)
    self.__mtu = YANGDynClass(base=mtu.mtu, is_container='container', presence=False, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire MTU'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'pw-profile']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'pw-profile']

  def _get_pw_profile_name(self):
    """
    Getter method for pw_profile_name, mapped from YANG variable /pw_profile/pw_profile_name (common-def:name-string64)
    """
    return self.__pw_profile_name
      
  def _set_pw_profile_name(self, v, load=False):
    """
    Setter method for pw_profile_name, mapped from YANG variable /pw_profile/pw_profile_name (common-def:name-string64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_profile_name() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pw-profile name (Max Size - 64)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_profile_name must be of a type compatible with common-def:name-string64""",
          'defined-type': "common-def:name-string64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pw-profile name (Max Size - 64)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)""",
        })

    self.__pw_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_profile_name(self):
    self.__pw_profile_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z]{1}([-a-zA-Z0-9\\.\\\\\\\\@#\\+\\*\\(\\)=\\{~\\}%<>=$_\\[\\]\\|]{0,63})'}), is_leaf=True, yang_name="pw-profile-name", rest_name="pw-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pw-profile name (Max Size - 64)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='common-def:name-string64', is_config=True)


  def _get_mtu(self):
    """
    Getter method for mtu, mapped from YANG variable /pw_profile/mtu (container)

    YANG Description: MTU for a Psuedo Wire
    """
    return self.__mtu
      
  def _set_mtu(self, v, load=False):
    """
    Setter method for mtu, mapped from YANG variable /pw_profile/mtu (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu() directly.

    YANG Description: MTU for a Psuedo Wire
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mtu.mtu, is_container='container', presence=False, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire MTU'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mtu.mtu, is_container='container', presence=False, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire MTU'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)""",
        })

    self.__mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu(self):
    self.__mtu = YANGDynClass(base=mtu.mtu, is_container='container', presence=False, yang_name="mtu", rest_name="mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire MTU'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)


  def _get_mtu_enforce(self):
    """
    Getter method for mtu_enforce, mapped from YANG variable /pw_profile/mtu_enforce (boolean)

    YANG Description: Whether to enforce mtu check during PW signalling
    """
    return self.__mtu_enforce
      
  def _set_mtu_enforce(self, v, load=False):
    """
    Setter method for mtu_enforce, mapped from YANG variable /pw_profile/mtu_enforce (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mtu_enforce is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mtu_enforce() directly.

    YANG Description: Whether to enforce mtu check during PW signalling
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mtu_enforce must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)""",
        })

    self.__mtu_enforce = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mtu_enforce(self):
    self.__mtu_enforce = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mtu-enforce", rest_name="mtu-enforce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Whether to enforce mtu check during PW signalling'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='boolean', is_config=True)


  def _get_vc_mode(self):
    """
    Getter method for vc_mode, mapped from YANG variable /pw_profile/vc_mode (container)

    YANG Description: Psuedo Wire type
    """
    return self.__vc_mode
      
  def _set_vc_mode(self, v, load=False):
    """
    Setter method for vc_mode, mapped from YANG variable /pw_profile/vc_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_mode() directly.

    YANG Description: Psuedo Wire type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vc_mode.vc_mode, is_container='container', presence=False, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vc_mode.vc_mode, is_container='container', presence=False, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)""",
        })

    self.__vc_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_mode(self):
    self.__vc_mode = YANGDynClass(base=vc_mode.vc_mode, is_container='container', presence=False, yang_name="vc-mode", rest_name="vc-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Psuedo Wire type'}}, namespace='urn:brocade.com:mgmt:brocade-pw-profile', defining_module='brocade-pw-profile', yang_type='container', is_config=True)

  pw_profile_name = __builtin__.property(_get_pw_profile_name, _set_pw_profile_name)
  mtu = __builtin__.property(_get_mtu, _set_mtu)
  mtu_enforce = __builtin__.property(_get_mtu_enforce, _set_mtu_enforce)
  vc_mode = __builtin__.property(_get_vc_mode, _set_vc_mode)


  _pyangbind_elements = {'pw_profile_name': pw_profile_name, 'mtu': mtu, 'mtu_enforce': mtu_enforce, 'vc_mode': vc_mode, }


