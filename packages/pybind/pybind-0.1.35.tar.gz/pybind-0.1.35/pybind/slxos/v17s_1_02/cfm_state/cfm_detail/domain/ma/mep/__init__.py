
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import rmep
class mep(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag-operational - based on the path /cfm-state/cfm-detail/domain/ma/mep. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MEP Details
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mep_id','__mep_direction','__mep_mac','__mep_port','__port_state','__rmep_fail','__rmep_ok','__rmep',)

  _yang_name = 'mep'
  _rest_name = 'mep'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__mep_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="mep-port", rest_name="mep-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__mep_mac = YANGDynClass(base=unicode, is_leaf=True, yang_name="mep-mac", rest_name="mep-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__rmep_fail = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-fail", rest_name="rmep-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__rmep = YANGDynClass(base=YANGListType("rmep_id",rmep.rmep, yang_name="rmep", rest_name="rmep", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-id', extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}), is_container='list', yang_name="rmep", rest_name="rmep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    self.__port_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)
    self.__rmep_ok = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-ok", rest_name="rmep-ok", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__mep_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mep-id", rest_name="mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__mep_direction = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mep-status-up': {'value': 2}, u'mep-status-down': {'value': 1}},), is_leaf=True, yang_name="mep-direction", rest_name="mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='mep-status', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cfm-state', u'cfm-detail', u'domain', u'ma', u'mep']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cfm-state', u'cfm-detail', u'domain', u'ma', u'mep']

  def _get_mep_id(self):
    """
    Getter method for mep_id, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_id (uint16)

    YANG Description: mep id
    """
    return self.__mep_id
      
  def _set_mep_id(self, v, load=False):
    """
    Setter method for mep_id, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_id() directly.

    YANG Description: mep id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mep-id", rest_name="mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mep-id", rest_name="mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__mep_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_id(self):
    self.__mep_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mep-id", rest_name="mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_mep_direction(self):
    """
    Getter method for mep_direction, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_direction (mep-status)

    YANG Description: MEP Direction
    """
    return self.__mep_direction
      
  def _set_mep_direction(self, v, load=False):
    """
    Setter method for mep_direction, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_direction (mep-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_direction is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_direction() directly.

    YANG Description: MEP Direction
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mep-status-up': {'value': 2}, u'mep-status-down': {'value': 1}},), is_leaf=True, yang_name="mep-direction", rest_name="mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='mep-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_direction must be of a type compatible with mep-status""",
          'defined-type': "brocade-dot1ag-operational:mep-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mep-status-up': {'value': 2}, u'mep-status-down': {'value': 1}},), is_leaf=True, yang_name="mep-direction", rest_name="mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='mep-status', is_config=False)""",
        })

    self.__mep_direction = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_direction(self):
    self.__mep_direction = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mep-status-up': {'value': 2}, u'mep-status-down': {'value': 1}},), is_leaf=True, yang_name="mep-direction", rest_name="mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='mep-status', is_config=False)


  def _get_mep_mac(self):
    """
    Getter method for mep_mac, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_mac (string)

    YANG Description: MEP MAC
    """
    return self.__mep_mac
      
  def _set_mep_mac(self, v, load=False):
    """
    Setter method for mep_mac, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_mac (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_mac() directly.

    YANG Description: MEP MAC
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mep-mac", rest_name="mep-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_mac must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mep-mac", rest_name="mep-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__mep_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_mac(self):
    self.__mep_mac = YANGDynClass(base=unicode, is_leaf=True, yang_name="mep-mac", rest_name="mep-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_mep_port(self):
    """
    Getter method for mep_port, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_port (string)

    YANG Description: MEP Port
    """
    return self.__mep_port
      
  def _set_mep_port(self, v, load=False):
    """
    Setter method for mep_port, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/mep_port (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mep_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mep_port() directly.

    YANG Description: MEP Port
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mep-port", rest_name="mep-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mep_port must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mep-port", rest_name="mep-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__mep_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mep_port(self):
    self.__mep_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="mep-port", rest_name="mep-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_port_state(self):
    """
    Getter method for port_state, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/port_state (uint8)

    YANG Description: Port State TLV
    """
    return self.__port_state
      
  def _set_port_state(self, v, load=False):
    """
    Setter method for port_state, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/port_state (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_state() directly.

    YANG Description: Port State TLV
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_state must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)""",
        })

    self.__port_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_state(self):
    self.__port_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)


  def _get_rmep_fail(self):
    """
    Getter method for rmep_fail, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/rmep_fail (uint16)

    YANG Description: rmep_fail
    """
    return self.__rmep_fail
      
  def _set_rmep_fail(self, v, load=False):
    """
    Setter method for rmep_fail, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/rmep_fail (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rmep_fail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rmep_fail() directly.

    YANG Description: rmep_fail
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-fail", rest_name="rmep-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rmep_fail must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-fail", rest_name="rmep-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__rmep_fail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rmep_fail(self):
    self.__rmep_fail = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-fail", rest_name="rmep-fail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_rmep_ok(self):
    """
    Getter method for rmep_ok, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/rmep_ok (uint16)

    YANG Description: rmep_ok
    """
    return self.__rmep_ok
      
  def _set_rmep_ok(self, v, load=False):
    """
    Setter method for rmep_ok, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/rmep_ok (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rmep_ok is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rmep_ok() directly.

    YANG Description: rmep_ok
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-ok", rest_name="rmep-ok", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rmep_ok must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-ok", rest_name="rmep-ok", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__rmep_ok = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rmep_ok(self):
    self.__rmep_ok = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="rmep-ok", rest_name="rmep-ok", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_rmep(self):
    """
    Getter method for rmep, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/rmep (list)

    YANG Description: RMEP Details
    """
    return self.__rmep
      
  def _set_rmep(self, v, load=False):
    """
    Setter method for rmep, mapped from YANG variable /cfm_state/cfm_detail/domain/ma/mep/rmep (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rmep is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rmep() directly.

    YANG Description: RMEP Details
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("rmep_id",rmep.rmep, yang_name="rmep", rest_name="rmep", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-id', extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}), is_container='list', yang_name="rmep", rest_name="rmep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rmep must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("rmep_id",rmep.rmep, yang_name="rmep", rest_name="rmep", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-id', extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}), is_container='list', yang_name="rmep", rest_name="rmep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)""",
        })

    self.__rmep = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rmep(self):
    self.__rmep = YANGDynClass(base=YANGListType("rmep_id",rmep.rmep, yang_name="rmep", rest_name="rmep", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-id', extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}), is_container='list', yang_name="rmep", rest_name="rmep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-rmep', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)

  mep_id = __builtin__.property(_get_mep_id)
  mep_direction = __builtin__.property(_get_mep_direction)
  mep_mac = __builtin__.property(_get_mep_mac)
  mep_port = __builtin__.property(_get_mep_port)
  port_state = __builtin__.property(_get_port_state)
  rmep_fail = __builtin__.property(_get_rmep_fail)
  rmep_ok = __builtin__.property(_get_rmep_ok)
  rmep = __builtin__.property(_get_rmep)


  _pyangbind_elements = {'mep_id': mep_id, 'mep_direction': mep_direction, 'mep_mac': mep_mac, 'mep_port': mep_port, 'port_state': port_state, 'rmep_fail': rmep_fail, 'rmep_ok': rmep_ok, 'rmep': rmep, }


