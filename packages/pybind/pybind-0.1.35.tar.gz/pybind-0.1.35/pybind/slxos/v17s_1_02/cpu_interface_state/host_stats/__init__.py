
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class host_stats(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysdiag-operational - based on the path /cpu-interface-state/host-stats. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__link_status','__tx_pkts_cnt','__tx_bytes_cnt','__tx_errors_cnt','__tx_drop_cnt','__tx_overrun_error_cnt','__tx_carrier_error_cnt','__rx_pkts_cnt','__rx_bytes_cnt','__rx_errors_cnt','__rx_drop_cnt','__rx_overrun_error_cnt','__rx_frame_error_cnt','__tx_aborted_error_cnt','__tx_fifo_error_cnt','__tx_timeout_cnt','__tx_flow_control_xon_cnt','__tx_flow_control_xoff_cnt','__tx_pkts_64bytes_cnt','__tx_pkts_64_127bytes_cnt','__tx_pkts_128_255bytes_cnt','__tx_pkts_256_511bytes_cnt','__tx_pkts_512_1023bytes_cnt','__tx_pkts_1024bytes_max_cnt','__tx_bcast_pkts_cnt','__tx_mcast_pkts_cnt','__rx_crc_error_cnt','__rx_fifo_error_cnt','__rx_missed_errors_cnt','__rx_no_dma_resource_cnt','__rx_flow_control_xon_cnt','__rx_flow_control_xoff_cnt','__rx_pkts_64bytes_cnt','__rx_pkts_64_127bytes_cnt','__rx_pkts_128_255bytes_cnt','__rx_pkts_256_511bytes_cnt','__rx_pkts_512_1023bytes_cnt','__rx_pkts_1024bytes_max_cnt','__rx_good_pkts_cnt','__rx_bcast_pkts_cnt','__rx_mcast_pkts_cnt',)

  _yang_name = 'host-stats'
  _rest_name = 'host-stats'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__tx_fifo_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-fifo-error-cnt", rest_name="tx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_128_255bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-128-255bytes-cnt", rest_name="tx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_64_127bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64-127bytes-cnt", rest_name="rx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_no_dma_resource_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-no-dma-resource-cnt", rest_name="rx-no-dma-resource-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_1024bytes_max_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-1024bytes-max-cnt", rest_name="tx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_drop_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-drop-cnt", rest_name="tx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_1024bytes_max_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-1024bytes-max-cnt", rest_name="rx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_missed_errors_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-missed-errors-cnt", rest_name="rx-missed-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-cnt", rest_name="tx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_drop_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-drop-cnt", rest_name="rx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-cnt", rest_name="rx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_128_255bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-128-255bytes-cnt", rest_name="rx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_flow_control_xoff_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xoff-cnt", rest_name="rx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_timeout_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-timeout-cnt", rest_name="tx-timeout-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_overrun_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-overrun-error-cnt", rest_name="tx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_64bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64bytes-cnt", rest_name="rx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_overrun_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-overrun-error-cnt", rest_name="rx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_flow_control_xoff_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xoff-cnt", rest_name="tx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_frame_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-frame-error-cnt", rest_name="rx-frame-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_aborted_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-aborted-error-cnt", rest_name="tx-aborted-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_flow_control_xon_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xon-cnt", rest_name="rx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_512_1023bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-512-1023bytes-cnt", rest_name="tx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_mcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mcast-pkts-cnt", rest_name="tx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_carrier_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-carrier-error-cnt", rest_name="tx-carrier-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_256_511bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-256-511bytes-cnt", rest_name="tx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_64bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64bytes-cnt", rest_name="tx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-cnt", rest_name="tx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-cnt", rest_name="rx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_errors_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-errors-cnt", rest_name="tx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_mcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mcast-pkts-cnt", rest_name="rx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_bcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bcast-pkts-cnt", rest_name="tx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_errors_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-errors-cnt", rest_name="rx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__link_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="link-status", rest_name="link-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='string', is_config=False)
    self.__rx_fifo_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-fifo-error-cnt", rest_name="rx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_256_511bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-256-511bytes-cnt", rest_name="rx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_pkts_512_1023bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-512-1023bytes-cnt", rest_name="rx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_crc_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-crc-error-cnt", rest_name="rx-crc-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_good_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-good-pkts-cnt", rest_name="rx-good-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_flow_control_xon_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xon-cnt", rest_name="tx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tx_pkts_64_127bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64-127bytes-cnt", rest_name="tx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__rx_bcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bcast-pkts-cnt", rest_name="rx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cpu-interface-state', u'host-stats']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cpu-interface-state', u'host-stats']

  def _get_link_status(self):
    """
    Getter method for link_status, mapped from YANG variable /cpu_interface_state/host_stats/link_status (string)

    YANG Description: Link status
    """
    return self.__link_status
      
  def _set_link_status(self, v, load=False):
    """
    Setter method for link_status, mapped from YANG variable /cpu_interface_state/host_stats/link_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_status() directly.

    YANG Description: Link status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="link-status", rest_name="link-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="link-status", rest_name="link-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='string', is_config=False)""",
        })

    self.__link_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_status(self):
    self.__link_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="link-status", rest_name="link-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='string', is_config=False)


  def _get_tx_pkts_cnt(self):
    """
    Getter method for tx_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_cnt (uint64)

    YANG Description: Tx packets counter
    """
    return self.__tx_pkts_cnt
      
  def _set_tx_pkts_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_cnt() directly.

    YANG Description: Tx packets counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-cnt", rest_name="tx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-cnt", rest_name="tx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_cnt(self):
    self.__tx_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-cnt", rest_name="tx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_bytes_cnt(self):
    """
    Getter method for tx_bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_bytes_cnt (uint64)

    YANG Description: Tx bytes counter
    """
    return self.__tx_bytes_cnt
      
  def _set_tx_bytes_cnt(self, v, load=False):
    """
    Setter method for tx_bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_bytes_cnt() directly.

    YANG Description: Tx bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-cnt", rest_name="tx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-cnt", rest_name="tx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_bytes_cnt(self):
    self.__tx_bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bytes-cnt", rest_name="tx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_errors_cnt(self):
    """
    Getter method for tx_errors_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_errors_cnt (uint64)

    YANG Description: Tx error counter
    """
    return self.__tx_errors_cnt
      
  def _set_tx_errors_cnt(self, v, load=False):
    """
    Setter method for tx_errors_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_errors_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_errors_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_errors_cnt() directly.

    YANG Description: Tx error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-errors-cnt", rest_name="tx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_errors_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-errors-cnt", rest_name="tx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_errors_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_errors_cnt(self):
    self.__tx_errors_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-errors-cnt", rest_name="tx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_drop_cnt(self):
    """
    Getter method for tx_drop_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_drop_cnt (uint64)

    YANG Description: Tx drop counter
    """
    return self.__tx_drop_cnt
      
  def _set_tx_drop_cnt(self, v, load=False):
    """
    Setter method for tx_drop_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_drop_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_drop_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_drop_cnt() directly.

    YANG Description: Tx drop counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-drop-cnt", rest_name="tx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_drop_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-drop-cnt", rest_name="tx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_drop_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_drop_cnt(self):
    self.__tx_drop_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-drop-cnt", rest_name="tx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_overrun_error_cnt(self):
    """
    Getter method for tx_overrun_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_overrun_error_cnt (uint64)

    YANG Description: Tx overrun error counter
    """
    return self.__tx_overrun_error_cnt
      
  def _set_tx_overrun_error_cnt(self, v, load=False):
    """
    Setter method for tx_overrun_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_overrun_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_overrun_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_overrun_error_cnt() directly.

    YANG Description: Tx overrun error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-overrun-error-cnt", rest_name="tx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_overrun_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-overrun-error-cnt", rest_name="tx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_overrun_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_overrun_error_cnt(self):
    self.__tx_overrun_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-overrun-error-cnt", rest_name="tx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_carrier_error_cnt(self):
    """
    Getter method for tx_carrier_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_carrier_error_cnt (uint64)

    YANG Description: Tx carrier error counter
    """
    return self.__tx_carrier_error_cnt
      
  def _set_tx_carrier_error_cnt(self, v, load=False):
    """
    Setter method for tx_carrier_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_carrier_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_carrier_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_carrier_error_cnt() directly.

    YANG Description: Tx carrier error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-carrier-error-cnt", rest_name="tx-carrier-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_carrier_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-carrier-error-cnt", rest_name="tx-carrier-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_carrier_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_carrier_error_cnt(self):
    self.__tx_carrier_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-carrier-error-cnt", rest_name="tx-carrier-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_cnt(self):
    """
    Getter method for rx_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_cnt (uint64)

    YANG Description: Rx packets counter
    """
    return self.__rx_pkts_cnt
      
  def _set_rx_pkts_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_cnt() directly.

    YANG Description: Rx packets counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-cnt", rest_name="rx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-cnt", rest_name="rx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_cnt(self):
    self.__rx_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-cnt", rest_name="rx-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_bytes_cnt(self):
    """
    Getter method for rx_bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_bytes_cnt (uint64)

    YANG Description: Rx bytes counter
    """
    return self.__rx_bytes_cnt
      
  def _set_rx_bytes_cnt(self, v, load=False):
    """
    Setter method for rx_bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_bytes_cnt() directly.

    YANG Description: Rx bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-cnt", rest_name="rx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-cnt", rest_name="rx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_bytes_cnt(self):
    self.__rx_bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bytes-cnt", rest_name="rx-bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_errors_cnt(self):
    """
    Getter method for rx_errors_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_errors_cnt (uint64)

    YANG Description: Rx errors counter
    """
    return self.__rx_errors_cnt
      
  def _set_rx_errors_cnt(self, v, load=False):
    """
    Setter method for rx_errors_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_errors_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_errors_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_errors_cnt() directly.

    YANG Description: Rx errors counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-errors-cnt", rest_name="rx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_errors_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-errors-cnt", rest_name="rx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_errors_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_errors_cnt(self):
    self.__rx_errors_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-errors-cnt", rest_name="rx-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_drop_cnt(self):
    """
    Getter method for rx_drop_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_drop_cnt (uint64)

    YANG Description: Rx drop counter
    """
    return self.__rx_drop_cnt
      
  def _set_rx_drop_cnt(self, v, load=False):
    """
    Setter method for rx_drop_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_drop_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_drop_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_drop_cnt() directly.

    YANG Description: Rx drop counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-drop-cnt", rest_name="rx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_drop_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-drop-cnt", rest_name="rx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_drop_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_drop_cnt(self):
    self.__rx_drop_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-drop-cnt", rest_name="rx-drop-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_overrun_error_cnt(self):
    """
    Getter method for rx_overrun_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_overrun_error_cnt (uint64)

    YANG Description: Rx overrun error counter
    """
    return self.__rx_overrun_error_cnt
      
  def _set_rx_overrun_error_cnt(self, v, load=False):
    """
    Setter method for rx_overrun_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_overrun_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_overrun_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_overrun_error_cnt() directly.

    YANG Description: Rx overrun error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-overrun-error-cnt", rest_name="rx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_overrun_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-overrun-error-cnt", rest_name="rx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_overrun_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_overrun_error_cnt(self):
    self.__rx_overrun_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-overrun-error-cnt", rest_name="rx-overrun-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_frame_error_cnt(self):
    """
    Getter method for rx_frame_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_frame_error_cnt (uint64)

    YANG Description: Rx frame error counter
    """
    return self.__rx_frame_error_cnt
      
  def _set_rx_frame_error_cnt(self, v, load=False):
    """
    Setter method for rx_frame_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_frame_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_frame_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_frame_error_cnt() directly.

    YANG Description: Rx frame error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-frame-error-cnt", rest_name="rx-frame-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_frame_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-frame-error-cnt", rest_name="rx-frame-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_frame_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_frame_error_cnt(self):
    self.__rx_frame_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-frame-error-cnt", rest_name="rx-frame-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_aborted_error_cnt(self):
    """
    Getter method for tx_aborted_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_aborted_error_cnt (uint64)

    YANG Description: Tx aborted error counter
    """
    return self.__tx_aborted_error_cnt
      
  def _set_tx_aborted_error_cnt(self, v, load=False):
    """
    Setter method for tx_aborted_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_aborted_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_aborted_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_aborted_error_cnt() directly.

    YANG Description: Tx aborted error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-aborted-error-cnt", rest_name="tx-aborted-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_aborted_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-aborted-error-cnt", rest_name="tx-aborted-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_aborted_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_aborted_error_cnt(self):
    self.__tx_aborted_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-aborted-error-cnt", rest_name="tx-aborted-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_fifo_error_cnt(self):
    """
    Getter method for tx_fifo_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_fifo_error_cnt (uint64)

    YANG Description: Tx fifo error counter
    """
    return self.__tx_fifo_error_cnt
      
  def _set_tx_fifo_error_cnt(self, v, load=False):
    """
    Setter method for tx_fifo_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_fifo_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_fifo_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_fifo_error_cnt() directly.

    YANG Description: Tx fifo error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-fifo-error-cnt", rest_name="tx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_fifo_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-fifo-error-cnt", rest_name="tx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_fifo_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_fifo_error_cnt(self):
    self.__tx_fifo_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-fifo-error-cnt", rest_name="tx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_timeout_cnt(self):
    """
    Getter method for tx_timeout_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_timeout_cnt (uint64)

    YANG Description: Tx timeout counter
    """
    return self.__tx_timeout_cnt
      
  def _set_tx_timeout_cnt(self, v, load=False):
    """
    Setter method for tx_timeout_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_timeout_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_timeout_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_timeout_cnt() directly.

    YANG Description: Tx timeout counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-timeout-cnt", rest_name="tx-timeout-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_timeout_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-timeout-cnt", rest_name="tx-timeout-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_timeout_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_timeout_cnt(self):
    self.__tx_timeout_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-timeout-cnt", rest_name="tx-timeout-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_flow_control_xon_cnt(self):
    """
    Getter method for tx_flow_control_xon_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_flow_control_xon_cnt (uint64)

    YANG Description: Tx flow control xon counter
    """
    return self.__tx_flow_control_xon_cnt
      
  def _set_tx_flow_control_xon_cnt(self, v, load=False):
    """
    Setter method for tx_flow_control_xon_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_flow_control_xon_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_flow_control_xon_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_flow_control_xon_cnt() directly.

    YANG Description: Tx flow control xon counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xon-cnt", rest_name="tx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_flow_control_xon_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xon-cnt", rest_name="tx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_flow_control_xon_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_flow_control_xon_cnt(self):
    self.__tx_flow_control_xon_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xon-cnt", rest_name="tx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_flow_control_xoff_cnt(self):
    """
    Getter method for tx_flow_control_xoff_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_flow_control_xoff_cnt (uint64)

    YANG Description: Tx flow control xoff counter
    """
    return self.__tx_flow_control_xoff_cnt
      
  def _set_tx_flow_control_xoff_cnt(self, v, load=False):
    """
    Setter method for tx_flow_control_xoff_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_flow_control_xoff_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_flow_control_xoff_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_flow_control_xoff_cnt() directly.

    YANG Description: Tx flow control xoff counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xoff-cnt", rest_name="tx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_flow_control_xoff_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xoff-cnt", rest_name="tx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_flow_control_xoff_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_flow_control_xoff_cnt(self):
    self.__tx_flow_control_xoff_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-flow-control-xoff-cnt", rest_name="tx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_pkts_64bytes_cnt(self):
    """
    Getter method for tx_pkts_64bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_64bytes_cnt (uint64)

    YANG Description: Tx packets 64 bytes counter
    """
    return self.__tx_pkts_64bytes_cnt
      
  def _set_tx_pkts_64bytes_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_64bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_64bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_64bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_64bytes_cnt() directly.

    YANG Description: Tx packets 64 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64bytes-cnt", rest_name="tx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_64bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64bytes-cnt", rest_name="tx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_64bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_64bytes_cnt(self):
    self.__tx_pkts_64bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64bytes-cnt", rest_name="tx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_pkts_64_127bytes_cnt(self):
    """
    Getter method for tx_pkts_64_127bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_64_127bytes_cnt (uint64)

    YANG Description: Tx packets 64 to 127 bytes counter
    """
    return self.__tx_pkts_64_127bytes_cnt
      
  def _set_tx_pkts_64_127bytes_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_64_127bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_64_127bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_64_127bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_64_127bytes_cnt() directly.

    YANG Description: Tx packets 64 to 127 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64-127bytes-cnt", rest_name="tx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_64_127bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64-127bytes-cnt", rest_name="tx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_64_127bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_64_127bytes_cnt(self):
    self.__tx_pkts_64_127bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-64-127bytes-cnt", rest_name="tx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_pkts_128_255bytes_cnt(self):
    """
    Getter method for tx_pkts_128_255bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_128_255bytes_cnt (uint64)

    YANG Description: Tx packets 128 to 255 bytes counter
    """
    return self.__tx_pkts_128_255bytes_cnt
      
  def _set_tx_pkts_128_255bytes_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_128_255bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_128_255bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_128_255bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_128_255bytes_cnt() directly.

    YANG Description: Tx packets 128 to 255 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-128-255bytes-cnt", rest_name="tx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_128_255bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-128-255bytes-cnt", rest_name="tx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_128_255bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_128_255bytes_cnt(self):
    self.__tx_pkts_128_255bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-128-255bytes-cnt", rest_name="tx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_pkts_256_511bytes_cnt(self):
    """
    Getter method for tx_pkts_256_511bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_256_511bytes_cnt (uint64)

    YANG Description: Tx packets 256 to 511 bytes counter
    """
    return self.__tx_pkts_256_511bytes_cnt
      
  def _set_tx_pkts_256_511bytes_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_256_511bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_256_511bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_256_511bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_256_511bytes_cnt() directly.

    YANG Description: Tx packets 256 to 511 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-256-511bytes-cnt", rest_name="tx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_256_511bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-256-511bytes-cnt", rest_name="tx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_256_511bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_256_511bytes_cnt(self):
    self.__tx_pkts_256_511bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-256-511bytes-cnt", rest_name="tx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_pkts_512_1023bytes_cnt(self):
    """
    Getter method for tx_pkts_512_1023bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_512_1023bytes_cnt (uint64)

    YANG Description: Tx packets 512 to 1023 bytes counter
    """
    return self.__tx_pkts_512_1023bytes_cnt
      
  def _set_tx_pkts_512_1023bytes_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_512_1023bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_512_1023bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_512_1023bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_512_1023bytes_cnt() directly.

    YANG Description: Tx packets 512 to 1023 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-512-1023bytes-cnt", rest_name="tx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_512_1023bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-512-1023bytes-cnt", rest_name="tx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_512_1023bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_512_1023bytes_cnt(self):
    self.__tx_pkts_512_1023bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-512-1023bytes-cnt", rest_name="tx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_pkts_1024bytes_max_cnt(self):
    """
    Getter method for tx_pkts_1024bytes_max_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_1024bytes_max_cnt (uint64)

    YANG Description: Tx packets 1024 to Max bytes counter
    """
    return self.__tx_pkts_1024bytes_max_cnt
      
  def _set_tx_pkts_1024bytes_max_cnt(self, v, load=False):
    """
    Setter method for tx_pkts_1024bytes_max_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_pkts_1024bytes_max_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_pkts_1024bytes_max_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_pkts_1024bytes_max_cnt() directly.

    YANG Description: Tx packets 1024 to Max bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-1024bytes-max-cnt", rest_name="tx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_pkts_1024bytes_max_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-1024bytes-max-cnt", rest_name="tx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_pkts_1024bytes_max_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_pkts_1024bytes_max_cnt(self):
    self.__tx_pkts_1024bytes_max_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-pkts-1024bytes-max-cnt", rest_name="tx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_bcast_pkts_cnt(self):
    """
    Getter method for tx_bcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_bcast_pkts_cnt (uint64)

    YANG Description: Tx drop counter
    """
    return self.__tx_bcast_pkts_cnt
      
  def _set_tx_bcast_pkts_cnt(self, v, load=False):
    """
    Setter method for tx_bcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_bcast_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_bcast_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_bcast_pkts_cnt() directly.

    YANG Description: Tx drop counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bcast-pkts-cnt", rest_name="tx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_bcast_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bcast-pkts-cnt", rest_name="tx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_bcast_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_bcast_pkts_cnt(self):
    self.__tx_bcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bcast-pkts-cnt", rest_name="tx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_tx_mcast_pkts_cnt(self):
    """
    Getter method for tx_mcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_mcast_pkts_cnt (uint64)

    YANG Description: Tx drop counter
    """
    return self.__tx_mcast_pkts_cnt
      
  def _set_tx_mcast_pkts_cnt(self, v, load=False):
    """
    Setter method for tx_mcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/tx_mcast_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_mcast_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_mcast_pkts_cnt() directly.

    YANG Description: Tx drop counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mcast-pkts-cnt", rest_name="tx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_mcast_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mcast-pkts-cnt", rest_name="tx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__tx_mcast_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_mcast_pkts_cnt(self):
    self.__tx_mcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-mcast-pkts-cnt", rest_name="tx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_crc_error_cnt(self):
    """
    Getter method for rx_crc_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_crc_error_cnt (uint64)

    YANG Description: Rx crc error counter
    """
    return self.__rx_crc_error_cnt
      
  def _set_rx_crc_error_cnt(self, v, load=False):
    """
    Setter method for rx_crc_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_crc_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_crc_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_crc_error_cnt() directly.

    YANG Description: Rx crc error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-crc-error-cnt", rest_name="rx-crc-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_crc_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-crc-error-cnt", rest_name="rx-crc-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_crc_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_crc_error_cnt(self):
    self.__rx_crc_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-crc-error-cnt", rest_name="rx-crc-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_fifo_error_cnt(self):
    """
    Getter method for rx_fifo_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_fifo_error_cnt (uint64)

    YANG Description: Rx fifo error counter
    """
    return self.__rx_fifo_error_cnt
      
  def _set_rx_fifo_error_cnt(self, v, load=False):
    """
    Setter method for rx_fifo_error_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_fifo_error_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_fifo_error_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_fifo_error_cnt() directly.

    YANG Description: Rx fifo error counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-fifo-error-cnt", rest_name="rx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_fifo_error_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-fifo-error-cnt", rest_name="rx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_fifo_error_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_fifo_error_cnt(self):
    self.__rx_fifo_error_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-fifo-error-cnt", rest_name="rx-fifo-error-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_missed_errors_cnt(self):
    """
    Getter method for rx_missed_errors_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_missed_errors_cnt (uint64)

    YANG Description: Rx missed errors counter
    """
    return self.__rx_missed_errors_cnt
      
  def _set_rx_missed_errors_cnt(self, v, load=False):
    """
    Setter method for rx_missed_errors_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_missed_errors_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_missed_errors_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_missed_errors_cnt() directly.

    YANG Description: Rx missed errors counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-missed-errors-cnt", rest_name="rx-missed-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_missed_errors_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-missed-errors-cnt", rest_name="rx-missed-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_missed_errors_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_missed_errors_cnt(self):
    self.__rx_missed_errors_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-missed-errors-cnt", rest_name="rx-missed-errors-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_no_dma_resource_cnt(self):
    """
    Getter method for rx_no_dma_resource_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_no_dma_resource_cnt (uint64)

    YANG Description: Rx no dma resource
    """
    return self.__rx_no_dma_resource_cnt
      
  def _set_rx_no_dma_resource_cnt(self, v, load=False):
    """
    Setter method for rx_no_dma_resource_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_no_dma_resource_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_no_dma_resource_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_no_dma_resource_cnt() directly.

    YANG Description: Rx no dma resource
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-no-dma-resource-cnt", rest_name="rx-no-dma-resource-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_no_dma_resource_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-no-dma-resource-cnt", rest_name="rx-no-dma-resource-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_no_dma_resource_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_no_dma_resource_cnt(self):
    self.__rx_no_dma_resource_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-no-dma-resource-cnt", rest_name="rx-no-dma-resource-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_flow_control_xon_cnt(self):
    """
    Getter method for rx_flow_control_xon_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_flow_control_xon_cnt (uint64)

    YANG Description: Rx flow control xon counter
    """
    return self.__rx_flow_control_xon_cnt
      
  def _set_rx_flow_control_xon_cnt(self, v, load=False):
    """
    Setter method for rx_flow_control_xon_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_flow_control_xon_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_flow_control_xon_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_flow_control_xon_cnt() directly.

    YANG Description: Rx flow control xon counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xon-cnt", rest_name="rx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_flow_control_xon_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xon-cnt", rest_name="rx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_flow_control_xon_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_flow_control_xon_cnt(self):
    self.__rx_flow_control_xon_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xon-cnt", rest_name="rx-flow-control-xon-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_flow_control_xoff_cnt(self):
    """
    Getter method for rx_flow_control_xoff_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_flow_control_xoff_cnt (uint64)

    YANG Description: Rx flow control xoff counter
    """
    return self.__rx_flow_control_xoff_cnt
      
  def _set_rx_flow_control_xoff_cnt(self, v, load=False):
    """
    Setter method for rx_flow_control_xoff_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_flow_control_xoff_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_flow_control_xoff_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_flow_control_xoff_cnt() directly.

    YANG Description: Rx flow control xoff counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xoff-cnt", rest_name="rx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_flow_control_xoff_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xoff-cnt", rest_name="rx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_flow_control_xoff_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_flow_control_xoff_cnt(self):
    self.__rx_flow_control_xoff_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-flow-control-xoff-cnt", rest_name="rx-flow-control-xoff-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_64bytes_cnt(self):
    """
    Getter method for rx_pkts_64bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_64bytes_cnt (uint64)

    YANG Description: Rx packets 64 bytes counter
    """
    return self.__rx_pkts_64bytes_cnt
      
  def _set_rx_pkts_64bytes_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_64bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_64bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_64bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_64bytes_cnt() directly.

    YANG Description: Rx packets 64 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64bytes-cnt", rest_name="rx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_64bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64bytes-cnt", rest_name="rx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_64bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_64bytes_cnt(self):
    self.__rx_pkts_64bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64bytes-cnt", rest_name="rx-pkts-64bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_64_127bytes_cnt(self):
    """
    Getter method for rx_pkts_64_127bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_64_127bytes_cnt (uint64)

    YANG Description: Rx packets 64 to 127 bytes counter
    """
    return self.__rx_pkts_64_127bytes_cnt
      
  def _set_rx_pkts_64_127bytes_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_64_127bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_64_127bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_64_127bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_64_127bytes_cnt() directly.

    YANG Description: Rx packets 64 to 127 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64-127bytes-cnt", rest_name="rx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_64_127bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64-127bytes-cnt", rest_name="rx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_64_127bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_64_127bytes_cnt(self):
    self.__rx_pkts_64_127bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-64-127bytes-cnt", rest_name="rx-pkts-64-127bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_128_255bytes_cnt(self):
    """
    Getter method for rx_pkts_128_255bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_128_255bytes_cnt (uint64)

    YANG Description: Rx packets 128 to 255 bytes counter
    """
    return self.__rx_pkts_128_255bytes_cnt
      
  def _set_rx_pkts_128_255bytes_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_128_255bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_128_255bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_128_255bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_128_255bytes_cnt() directly.

    YANG Description: Rx packets 128 to 255 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-128-255bytes-cnt", rest_name="rx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_128_255bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-128-255bytes-cnt", rest_name="rx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_128_255bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_128_255bytes_cnt(self):
    self.__rx_pkts_128_255bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-128-255bytes-cnt", rest_name="rx-pkts-128-255bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_256_511bytes_cnt(self):
    """
    Getter method for rx_pkts_256_511bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_256_511bytes_cnt (uint64)

    YANG Description: Rx packets 256 to 511 bytes counter
    """
    return self.__rx_pkts_256_511bytes_cnt
      
  def _set_rx_pkts_256_511bytes_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_256_511bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_256_511bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_256_511bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_256_511bytes_cnt() directly.

    YANG Description: Rx packets 256 to 511 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-256-511bytes-cnt", rest_name="rx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_256_511bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-256-511bytes-cnt", rest_name="rx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_256_511bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_256_511bytes_cnt(self):
    self.__rx_pkts_256_511bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-256-511bytes-cnt", rest_name="rx-pkts-256-511bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_512_1023bytes_cnt(self):
    """
    Getter method for rx_pkts_512_1023bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_512_1023bytes_cnt (uint64)

    YANG Description: Rx packets 512 to 1023 bytes counter
    """
    return self.__rx_pkts_512_1023bytes_cnt
      
  def _set_rx_pkts_512_1023bytes_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_512_1023bytes_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_512_1023bytes_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_512_1023bytes_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_512_1023bytes_cnt() directly.

    YANG Description: Rx packets 512 to 1023 bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-512-1023bytes-cnt", rest_name="rx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_512_1023bytes_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-512-1023bytes-cnt", rest_name="rx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_512_1023bytes_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_512_1023bytes_cnt(self):
    self.__rx_pkts_512_1023bytes_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-512-1023bytes-cnt", rest_name="rx-pkts-512-1023bytes-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_pkts_1024bytes_max_cnt(self):
    """
    Getter method for rx_pkts_1024bytes_max_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_1024bytes_max_cnt (uint64)

    YANG Description: Rx packets 1024 to Max bytes counter
    """
    return self.__rx_pkts_1024bytes_max_cnt
      
  def _set_rx_pkts_1024bytes_max_cnt(self, v, load=False):
    """
    Setter method for rx_pkts_1024bytes_max_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_pkts_1024bytes_max_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_pkts_1024bytes_max_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_pkts_1024bytes_max_cnt() directly.

    YANG Description: Rx packets 1024 to Max bytes counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-1024bytes-max-cnt", rest_name="rx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_pkts_1024bytes_max_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-1024bytes-max-cnt", rest_name="rx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_pkts_1024bytes_max_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_pkts_1024bytes_max_cnt(self):
    self.__rx_pkts_1024bytes_max_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-pkts-1024bytes-max-cnt", rest_name="rx-pkts-1024bytes-max-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_good_pkts_cnt(self):
    """
    Getter method for rx_good_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_good_pkts_cnt (uint64)

    YANG Description: Rx good pkts counter
    """
    return self.__rx_good_pkts_cnt
      
  def _set_rx_good_pkts_cnt(self, v, load=False):
    """
    Setter method for rx_good_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_good_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_good_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_good_pkts_cnt() directly.

    YANG Description: Rx good pkts counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-good-pkts-cnt", rest_name="rx-good-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_good_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-good-pkts-cnt", rest_name="rx-good-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_good_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_good_pkts_cnt(self):
    self.__rx_good_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-good-pkts-cnt", rest_name="rx-good-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_bcast_pkts_cnt(self):
    """
    Getter method for rx_bcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_bcast_pkts_cnt (uint64)

    YANG Description: Rx broadcast pkts counter
    """
    return self.__rx_bcast_pkts_cnt
      
  def _set_rx_bcast_pkts_cnt(self, v, load=False):
    """
    Setter method for rx_bcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_bcast_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_bcast_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_bcast_pkts_cnt() directly.

    YANG Description: Rx broadcast pkts counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bcast-pkts-cnt", rest_name="rx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_bcast_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bcast-pkts-cnt", rest_name="rx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_bcast_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_bcast_pkts_cnt(self):
    self.__rx_bcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bcast-pkts-cnt", rest_name="rx-bcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_rx_mcast_pkts_cnt(self):
    """
    Getter method for rx_mcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_mcast_pkts_cnt (uint64)

    YANG Description: Rx multicast counter
    """
    return self.__rx_mcast_pkts_cnt
      
  def _set_rx_mcast_pkts_cnt(self, v, load=False):
    """
    Setter method for rx_mcast_pkts_cnt, mapped from YANG variable /cpu_interface_state/host_stats/rx_mcast_pkts_cnt (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_mcast_pkts_cnt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_mcast_pkts_cnt() directly.

    YANG Description: Rx multicast counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mcast-pkts-cnt", rest_name="rx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_mcast_pkts_cnt must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mcast-pkts-cnt", rest_name="rx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__rx_mcast_pkts_cnt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_mcast_pkts_cnt(self):
    self.__rx_mcast_pkts_cnt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-mcast-pkts-cnt", rest_name="rx-mcast-pkts-cnt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)

  link_status = __builtin__.property(_get_link_status)
  tx_pkts_cnt = __builtin__.property(_get_tx_pkts_cnt)
  tx_bytes_cnt = __builtin__.property(_get_tx_bytes_cnt)
  tx_errors_cnt = __builtin__.property(_get_tx_errors_cnt)
  tx_drop_cnt = __builtin__.property(_get_tx_drop_cnt)
  tx_overrun_error_cnt = __builtin__.property(_get_tx_overrun_error_cnt)
  tx_carrier_error_cnt = __builtin__.property(_get_tx_carrier_error_cnt)
  rx_pkts_cnt = __builtin__.property(_get_rx_pkts_cnt)
  rx_bytes_cnt = __builtin__.property(_get_rx_bytes_cnt)
  rx_errors_cnt = __builtin__.property(_get_rx_errors_cnt)
  rx_drop_cnt = __builtin__.property(_get_rx_drop_cnt)
  rx_overrun_error_cnt = __builtin__.property(_get_rx_overrun_error_cnt)
  rx_frame_error_cnt = __builtin__.property(_get_rx_frame_error_cnt)
  tx_aborted_error_cnt = __builtin__.property(_get_tx_aborted_error_cnt)
  tx_fifo_error_cnt = __builtin__.property(_get_tx_fifo_error_cnt)
  tx_timeout_cnt = __builtin__.property(_get_tx_timeout_cnt)
  tx_flow_control_xon_cnt = __builtin__.property(_get_tx_flow_control_xon_cnt)
  tx_flow_control_xoff_cnt = __builtin__.property(_get_tx_flow_control_xoff_cnt)
  tx_pkts_64bytes_cnt = __builtin__.property(_get_tx_pkts_64bytes_cnt)
  tx_pkts_64_127bytes_cnt = __builtin__.property(_get_tx_pkts_64_127bytes_cnt)
  tx_pkts_128_255bytes_cnt = __builtin__.property(_get_tx_pkts_128_255bytes_cnt)
  tx_pkts_256_511bytes_cnt = __builtin__.property(_get_tx_pkts_256_511bytes_cnt)
  tx_pkts_512_1023bytes_cnt = __builtin__.property(_get_tx_pkts_512_1023bytes_cnt)
  tx_pkts_1024bytes_max_cnt = __builtin__.property(_get_tx_pkts_1024bytes_max_cnt)
  tx_bcast_pkts_cnt = __builtin__.property(_get_tx_bcast_pkts_cnt)
  tx_mcast_pkts_cnt = __builtin__.property(_get_tx_mcast_pkts_cnt)
  rx_crc_error_cnt = __builtin__.property(_get_rx_crc_error_cnt)
  rx_fifo_error_cnt = __builtin__.property(_get_rx_fifo_error_cnt)
  rx_missed_errors_cnt = __builtin__.property(_get_rx_missed_errors_cnt)
  rx_no_dma_resource_cnt = __builtin__.property(_get_rx_no_dma_resource_cnt)
  rx_flow_control_xon_cnt = __builtin__.property(_get_rx_flow_control_xon_cnt)
  rx_flow_control_xoff_cnt = __builtin__.property(_get_rx_flow_control_xoff_cnt)
  rx_pkts_64bytes_cnt = __builtin__.property(_get_rx_pkts_64bytes_cnt)
  rx_pkts_64_127bytes_cnt = __builtin__.property(_get_rx_pkts_64_127bytes_cnt)
  rx_pkts_128_255bytes_cnt = __builtin__.property(_get_rx_pkts_128_255bytes_cnt)
  rx_pkts_256_511bytes_cnt = __builtin__.property(_get_rx_pkts_256_511bytes_cnt)
  rx_pkts_512_1023bytes_cnt = __builtin__.property(_get_rx_pkts_512_1023bytes_cnt)
  rx_pkts_1024bytes_max_cnt = __builtin__.property(_get_rx_pkts_1024bytes_max_cnt)
  rx_good_pkts_cnt = __builtin__.property(_get_rx_good_pkts_cnt)
  rx_bcast_pkts_cnt = __builtin__.property(_get_rx_bcast_pkts_cnt)
  rx_mcast_pkts_cnt = __builtin__.property(_get_rx_mcast_pkts_cnt)


  _pyangbind_elements = {'link_status': link_status, 'tx_pkts_cnt': tx_pkts_cnt, 'tx_bytes_cnt': tx_bytes_cnt, 'tx_errors_cnt': tx_errors_cnt, 'tx_drop_cnt': tx_drop_cnt, 'tx_overrun_error_cnt': tx_overrun_error_cnt, 'tx_carrier_error_cnt': tx_carrier_error_cnt, 'rx_pkts_cnt': rx_pkts_cnt, 'rx_bytes_cnt': rx_bytes_cnt, 'rx_errors_cnt': rx_errors_cnt, 'rx_drop_cnt': rx_drop_cnt, 'rx_overrun_error_cnt': rx_overrun_error_cnt, 'rx_frame_error_cnt': rx_frame_error_cnt, 'tx_aborted_error_cnt': tx_aborted_error_cnt, 'tx_fifo_error_cnt': tx_fifo_error_cnt, 'tx_timeout_cnt': tx_timeout_cnt, 'tx_flow_control_xon_cnt': tx_flow_control_xon_cnt, 'tx_flow_control_xoff_cnt': tx_flow_control_xoff_cnt, 'tx_pkts_64bytes_cnt': tx_pkts_64bytes_cnt, 'tx_pkts_64_127bytes_cnt': tx_pkts_64_127bytes_cnt, 'tx_pkts_128_255bytes_cnt': tx_pkts_128_255bytes_cnt, 'tx_pkts_256_511bytes_cnt': tx_pkts_256_511bytes_cnt, 'tx_pkts_512_1023bytes_cnt': tx_pkts_512_1023bytes_cnt, 'tx_pkts_1024bytes_max_cnt': tx_pkts_1024bytes_max_cnt, 'tx_bcast_pkts_cnt': tx_bcast_pkts_cnt, 'tx_mcast_pkts_cnt': tx_mcast_pkts_cnt, 'rx_crc_error_cnt': rx_crc_error_cnt, 'rx_fifo_error_cnt': rx_fifo_error_cnt, 'rx_missed_errors_cnt': rx_missed_errors_cnt, 'rx_no_dma_resource_cnt': rx_no_dma_resource_cnt, 'rx_flow_control_xon_cnt': rx_flow_control_xon_cnt, 'rx_flow_control_xoff_cnt': rx_flow_control_xoff_cnt, 'rx_pkts_64bytes_cnt': rx_pkts_64bytes_cnt, 'rx_pkts_64_127bytes_cnt': rx_pkts_64_127bytes_cnt, 'rx_pkts_128_255bytes_cnt': rx_pkts_128_255bytes_cnt, 'rx_pkts_256_511bytes_cnt': rx_pkts_256_511bytes_cnt, 'rx_pkts_512_1023bytes_cnt': rx_pkts_512_1023bytes_cnt, 'rx_pkts_1024bytes_max_cnt': rx_pkts_1024bytes_max_cnt, 'rx_good_pkts_cnt': rx_good_pkts_cnt, 'rx_bcast_pkts_cnt': rx_bcast_pkts_cnt, 'rx_mcast_pkts_cnt': rx_mcast_pkts_cnt, }


