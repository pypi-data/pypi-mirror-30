
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import brief
import clock
import clock_foreign_masters
import corrections
import parent_port_detail
import time_property
import interfaces_detail
class ptp_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-ptp-operational - based on the path /ptp-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: PTP Operational Information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__brief','__clock','__clock_foreign_masters','__corrections','__parent_port_detail','__time_property','__interfaces_detail',)

  _yang_name = 'ptp-state'
  _rest_name = 'ptp-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__clock = YANGDynClass(base=clock.clock, is_container='container', presence=False, yang_name="clock", rest_name="clock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    self.__brief = YANGDynClass(base=brief.brief, is_container='container', presence=False, yang_name="brief", rest_name="brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    self.__time_property = YANGDynClass(base=time_property.time_property, is_container='container', presence=False, yang_name="time-property", rest_name="time-property", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-time-property', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    self.__parent_port_detail = YANGDynClass(base=parent_port_detail.parent_port_detail, is_container='container', presence=False, yang_name="parent-port-detail", rest_name="parent-port-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-parent-port-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    self.__interfaces_detail = YANGDynClass(base=YANGListType("interface_key",interfaces_detail.interfaces_detail, yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-key', extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='list', is_config=False)
    self.__clock_foreign_masters = YANGDynClass(base=clock_foreign_masters.clock_foreign_masters, is_container='container', presence=False, yang_name="clock-foreign-masters", rest_name="clock-foreign-masters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock-foreign-masters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    self.__corrections = YANGDynClass(base=corrections.corrections, is_container='container', presence=False, yang_name="corrections", rest_name="corrections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-corrections', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'ptp-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ptp-state']

  def _get_brief(self):
    """
    Getter method for brief, mapped from YANG variable /ptp_state/brief (container)
    """
    return self.__brief
      
  def _set_brief(self, v, load=False):
    """
    Setter method for brief, mapped from YANG variable /ptp_state/brief (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_brief() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=brief.brief, is_container='container', presence=False, yang_name="brief", rest_name="brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """brief must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=brief.brief, is_container='container', presence=False, yang_name="brief", rest_name="brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)""",
        })

    self.__brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_brief(self):
    self.__brief = YANGDynClass(base=brief.brief, is_container='container', presence=False, yang_name="brief", rest_name="brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-brief', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)


  def _get_clock(self):
    """
    Getter method for clock, mapped from YANG variable /ptp_state/clock (container)
    """
    return self.__clock
      
  def _set_clock(self, v, load=False):
    """
    Setter method for clock, mapped from YANG variable /ptp_state/clock (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clock.clock, is_container='container', presence=False, yang_name="clock", rest_name="clock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=clock.clock, is_container='container', presence=False, yang_name="clock", rest_name="clock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)""",
        })

    self.__clock = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock(self):
    self.__clock = YANGDynClass(base=clock.clock, is_container='container', presence=False, yang_name="clock", rest_name="clock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)


  def _get_clock_foreign_masters(self):
    """
    Getter method for clock_foreign_masters, mapped from YANG variable /ptp_state/clock_foreign_masters (container)
    """
    return self.__clock_foreign_masters
      
  def _set_clock_foreign_masters(self, v, load=False):
    """
    Setter method for clock_foreign_masters, mapped from YANG variable /ptp_state/clock_foreign_masters (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_foreign_masters is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_foreign_masters() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=clock_foreign_masters.clock_foreign_masters, is_container='container', presence=False, yang_name="clock-foreign-masters", rest_name="clock-foreign-masters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock-foreign-masters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_foreign_masters must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=clock_foreign_masters.clock_foreign_masters, is_container='container', presence=False, yang_name="clock-foreign-masters", rest_name="clock-foreign-masters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock-foreign-masters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)""",
        })

    self.__clock_foreign_masters = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_foreign_masters(self):
    self.__clock_foreign_masters = YANGDynClass(base=clock_foreign_masters.clock_foreign_masters, is_container='container', presence=False, yang_name="clock-foreign-masters", rest_name="clock-foreign-masters", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-clock-foreign-masters', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)


  def _get_corrections(self):
    """
    Getter method for corrections, mapped from YANG variable /ptp_state/corrections (container)
    """
    return self.__corrections
      
  def _set_corrections(self, v, load=False):
    """
    Setter method for corrections, mapped from YANG variable /ptp_state/corrections (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_corrections is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_corrections() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=corrections.corrections, is_container='container', presence=False, yang_name="corrections", rest_name="corrections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-corrections', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """corrections must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=corrections.corrections, is_container='container', presence=False, yang_name="corrections", rest_name="corrections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-corrections', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)""",
        })

    self.__corrections = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_corrections(self):
    self.__corrections = YANGDynClass(base=corrections.corrections, is_container='container', presence=False, yang_name="corrections", rest_name="corrections", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-corrections', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)


  def _get_parent_port_detail(self):
    """
    Getter method for parent_port_detail, mapped from YANG variable /ptp_state/parent_port_detail (container)
    """
    return self.__parent_port_detail
      
  def _set_parent_port_detail(self, v, load=False):
    """
    Setter method for parent_port_detail, mapped from YANG variable /ptp_state/parent_port_detail (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parent_port_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parent_port_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=parent_port_detail.parent_port_detail, is_container='container', presence=False, yang_name="parent-port-detail", rest_name="parent-port-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-parent-port-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parent_port_detail must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=parent_port_detail.parent_port_detail, is_container='container', presence=False, yang_name="parent-port-detail", rest_name="parent-port-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-parent-port-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)""",
        })

    self.__parent_port_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parent_port_detail(self):
    self.__parent_port_detail = YANGDynClass(base=parent_port_detail.parent_port_detail, is_container='container', presence=False, yang_name="parent-port-detail", rest_name="parent-port-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-parent-port-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)


  def _get_time_property(self):
    """
    Getter method for time_property, mapped from YANG variable /ptp_state/time_property (container)
    """
    return self.__time_property
      
  def _set_time_property(self, v, load=False):
    """
    Setter method for time_property, mapped from YANG variable /ptp_state/time_property (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time_property is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time_property() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=time_property.time_property, is_container='container', presence=False, yang_name="time-property", rest_name="time-property", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-time-property', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time_property must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=time_property.time_property, is_container='container', presence=False, yang_name="time-property", rest_name="time-property", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-time-property', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)""",
        })

    self.__time_property = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time_property(self):
    self.__time_property = YANGDynClass(base=time_property.time_property, is_container='container', presence=False, yang_name="time-property", rest_name="time-property", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-time-property', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='container', is_config=False)


  def _get_interfaces_detail(self):
    """
    Getter method for interfaces_detail, mapped from YANG variable /ptp_state/interfaces_detail (list)
    """
    return self.__interfaces_detail
      
  def _set_interfaces_detail(self, v, load=False):
    """
    Setter method for interfaces_detail, mapped from YANG variable /ptp_state/interfaces_detail (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interfaces_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interfaces_detail() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_key",interfaces_detail.interfaces_detail, yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-key', extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interfaces_detail must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_key",interfaces_detail.interfaces_detail, yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-key', extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='list', is_config=False)""",
        })

    self.__interfaces_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interfaces_detail(self):
    self.__interfaces_detail = YANGDynClass(base=YANGListType("interface_key",interfaces_detail.interfaces_detail, yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-key', extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}), is_container='list', yang_name="interfaces-detail", rest_name="interfaces-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ptp-interfaces-detail', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='list', is_config=False)

  brief = __builtin__.property(_get_brief)
  clock = __builtin__.property(_get_clock)
  clock_foreign_masters = __builtin__.property(_get_clock_foreign_masters)
  corrections = __builtin__.property(_get_corrections)
  parent_port_detail = __builtin__.property(_get_parent_port_detail)
  time_property = __builtin__.property(_get_time_property)
  interfaces_detail = __builtin__.property(_get_interfaces_detail)


  _pyangbind_elements = {'brief': brief, 'clock': clock, 'clock_foreign_masters': clock_foreign_masters, 'corrections': corrections, 'parent_port_detail': parent_port_detail, 'time_property': time_property, 'interfaces_detail': interfaces_detail, }


