
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class interface_detail_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-ptp-operational - based on the path /ptp-state/interfaces-detail/interface-detail-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: 
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__id','__port_dataset','__clock_identity','__port_number','__ptp_version','__port_state','__port_type','__vlan_info','__dri','__arto','__pmpd','__annouce_interval','__sync_interval','__delay_mechanism','__transport_mode','__announce_msg_sent','__announce_msg_received','__sync_msg_sent','__sync_msg_received','__followup_msg_sent','__followup_msg_received','__delay_req_msg_sent','__delay_req_msg_received','__delay_res_msg_sent','__delay_res_msg_received','__peer_delay_req_msg_sent','__peer_delay_req_msg_received','__peer_delay_res_msg_sent','__peer_delay_res_msg_received','__peer_delay_res_fm_sent','__peer_delay_res_fm_received',)

  _yang_name = 'interface-detail-list'
  _rest_name = 'interface-detail-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__peer_delay_req_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-received", rest_name="peer-delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__peer_delay_res_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-sent", rest_name="peer-delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__transport_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-mode", rest_name="transport-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__delay_res_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-sent", rest_name="delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-number", rest_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__port_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__delay_req_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-received", rest_name="delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__peer_delay_req_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-sent", rest_name="peer-delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__sync_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)
    self.__delay_res_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-received", rest_name="delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__delay_mechanism = YANGDynClass(base=unicode, is_leaf=True, yang_name="delay-mechanism", rest_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__port_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__pmpd = YANGDynClass(base=unicode, is_leaf=True, yang_name="pmpd", rest_name="pmpd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__delay_req_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-sent", rest_name="delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__annouce_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="annouce-interval", rest_name="annouce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)
    self.__followup_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-received", rest_name="followup-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__arto = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="arto", rest_name="arto", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)
    self.__announce_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-received", rest_name="announce-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__port_dataset = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-dataset", rest_name="port-dataset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__followup_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-sent", rest_name="followup-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__peer_delay_res_fm_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-sent", rest_name="peer-delay-res-fm-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__sync_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-received", rest_name="sync-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__peer_delay_res_fm_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-received", rest_name="peer-delay-res-fm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__announce_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-sent", rest_name="announce-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__clock_identity = YANGDynClass(base=unicode, is_leaf=True, yang_name="clock-identity", rest_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    self.__peer_delay_res_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-received", rest_name="peer-delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__dri = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="dri", rest_name="dri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)
    self.__sync_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-sent", rest_name="sync-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    self.__ptp_version = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ptp-version", rest_name="ptp-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)
    self.__vlan_info = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vlan-info", rest_name="vlan-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'ptp-state', u'interfaces-detail', u'interface-detail-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ptp-state', u'interfaces-detail', u'interface-detail-list']

  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/id (string)
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=unicode, is_leaf=True, yang_name="id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_port_dataset(self):
    """
    Getter method for port_dataset, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_dataset (string)
    """
    return self.__port_dataset
      
  def _set_port_dataset(self, v, load=False):
    """
    Setter method for port_dataset, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_dataset (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_dataset is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_dataset() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-dataset", rest_name="port-dataset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_dataset must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-dataset", rest_name="port-dataset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__port_dataset = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_dataset(self):
    self.__port_dataset = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-dataset", rest_name="port-dataset", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_clock_identity(self):
    """
    Getter method for clock_identity, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/clock_identity (string)
    """
    return self.__clock_identity
      
  def _set_clock_identity(self, v, load=False):
    """
    Setter method for clock_identity, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/clock_identity (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_clock_identity is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_clock_identity() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="clock-identity", rest_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """clock_identity must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="clock-identity", rest_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__clock_identity = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_clock_identity(self):
    self.__clock_identity = YANGDynClass(base=unicode, is_leaf=True, yang_name="clock-identity", rest_name="clock-identity", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_port_number(self):
    """
    Getter method for port_number, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_number (uint32)
    """
    return self.__port_number
      
  def _set_port_number(self, v, load=False):
    """
    Setter method for port_number, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_number() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-number", rest_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-number", rest_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__port_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_number(self):
    self.__port_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-number", rest_name="port-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_ptp_version(self):
    """
    Getter method for ptp_version, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/ptp_version (uint16)
    """
    return self.__ptp_version
      
  def _set_ptp_version(self, v, load=False):
    """
    Setter method for ptp_version, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/ptp_version (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ptp_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ptp_version() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ptp-version", rest_name="ptp-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ptp_version must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ptp-version", rest_name="ptp-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)""",
        })

    self.__ptp_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ptp_version(self):
    self.__ptp_version = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="ptp-version", rest_name="ptp-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)


  def _get_port_state(self):
    """
    Getter method for port_state, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_state (string)
    """
    return self.__port_state
      
  def _set_port_state(self, v, load=False):
    """
    Setter method for port_state, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_state() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__port_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_state(self):
    self.__port_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-state", rest_name="port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_port_type(self):
    """
    Getter method for port_type, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_type (string)
    """
    return self.__port_type
      
  def _set_port_type(self, v, load=False):
    """
    Setter method for port_type, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/port_type (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_type must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__port_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_type(self):
    self.__port_type = YANGDynClass(base=unicode, is_leaf=True, yang_name="port-type", rest_name="port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_vlan_info(self):
    """
    Getter method for vlan_info, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/vlan_info (uint16)
    """
    return self.__vlan_info
      
  def _set_vlan_info(self, v, load=False):
    """
    Setter method for vlan_info, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/vlan_info (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan_info() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vlan-info", rest_name="vlan-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan_info must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vlan-info", rest_name="vlan-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)""",
        })

    self.__vlan_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan_info(self):
    self.__vlan_info = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="vlan-info", rest_name="vlan-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)


  def _get_dri(self):
    """
    Getter method for dri, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/dri (int32)
    """
    return self.__dri
      
  def _set_dri(self, v, load=False):
    """
    Setter method for dri, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/dri (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dri is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dri() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="dri", rest_name="dri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dri must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="dri", rest_name="dri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)""",
        })

    self.__dri = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dri(self):
    self.__dri = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="dri", rest_name="dri", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)


  def _get_arto(self):
    """
    Getter method for arto, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/arto (uint16)
    """
    return self.__arto
      
  def _set_arto(self, v, load=False):
    """
    Setter method for arto, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/arto (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_arto is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_arto() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="arto", rest_name="arto", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """arto must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="arto", rest_name="arto", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)""",
        })

    self.__arto = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_arto(self):
    self.__arto = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="arto", rest_name="arto", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint16', is_config=False)


  def _get_pmpd(self):
    """
    Getter method for pmpd, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/pmpd (string)
    """
    return self.__pmpd
      
  def _set_pmpd(self, v, load=False):
    """
    Setter method for pmpd, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/pmpd (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pmpd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pmpd() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pmpd", rest_name="pmpd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pmpd must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pmpd", rest_name="pmpd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__pmpd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pmpd(self):
    self.__pmpd = YANGDynClass(base=unicode, is_leaf=True, yang_name="pmpd", rest_name="pmpd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_annouce_interval(self):
    """
    Getter method for annouce_interval, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/annouce_interval (int32)
    """
    return self.__annouce_interval
      
  def _set_annouce_interval(self, v, load=False):
    """
    Setter method for annouce_interval, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/annouce_interval (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_annouce_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_annouce_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="annouce-interval", rest_name="annouce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """annouce_interval must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="annouce-interval", rest_name="annouce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)""",
        })

    self.__annouce_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_annouce_interval(self):
    self.__annouce_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="annouce-interval", rest_name="annouce-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)


  def _get_sync_interval(self):
    """
    Getter method for sync_interval, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/sync_interval (int32)
    """
    return self.__sync_interval
      
  def _set_sync_interval(self, v, load=False):
    """
    Setter method for sync_interval, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/sync_interval (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sync_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sync_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sync_interval must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)""",
        })

    self.__sync_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sync_interval(self):
    self.__sync_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), is_leaf=True, yang_name="sync-interval", rest_name="sync-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='int32', is_config=False)


  def _get_delay_mechanism(self):
    """
    Getter method for delay_mechanism, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_mechanism (string)
    """
    return self.__delay_mechanism
      
  def _set_delay_mechanism(self, v, load=False):
    """
    Setter method for delay_mechanism, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_mechanism (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_mechanism is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_mechanism() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="delay-mechanism", rest_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_mechanism must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="delay-mechanism", rest_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__delay_mechanism = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_mechanism(self):
    self.__delay_mechanism = YANGDynClass(base=unicode, is_leaf=True, yang_name="delay-mechanism", rest_name="delay-mechanism", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_transport_mode(self):
    """
    Getter method for transport_mode, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/transport_mode (string)
    """
    return self.__transport_mode
      
  def _set_transport_mode(self, v, load=False):
    """
    Setter method for transport_mode, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/transport_mode (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transport_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transport_mode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="transport-mode", rest_name="transport-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transport_mode must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-mode", rest_name="transport-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)""",
        })

    self.__transport_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transport_mode(self):
    self.__transport_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="transport-mode", rest_name="transport-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='string', is_config=False)


  def _get_announce_msg_sent(self):
    """
    Getter method for announce_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/announce_msg_sent (uint32)
    """
    return self.__announce_msg_sent
      
  def _set_announce_msg_sent(self, v, load=False):
    """
    Setter method for announce_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/announce_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_announce_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_announce_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-sent", rest_name="announce-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """announce_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-sent", rest_name="announce-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__announce_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_announce_msg_sent(self):
    self.__announce_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-sent", rest_name="announce-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_announce_msg_received(self):
    """
    Getter method for announce_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/announce_msg_received (uint32)
    """
    return self.__announce_msg_received
      
  def _set_announce_msg_received(self, v, load=False):
    """
    Setter method for announce_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/announce_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_announce_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_announce_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-received", rest_name="announce-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """announce_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-received", rest_name="announce-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__announce_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_announce_msg_received(self):
    self.__announce_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="announce-msg-received", rest_name="announce-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_sync_msg_sent(self):
    """
    Getter method for sync_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/sync_msg_sent (uint32)
    """
    return self.__sync_msg_sent
      
  def _set_sync_msg_sent(self, v, load=False):
    """
    Setter method for sync_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/sync_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sync_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sync_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-sent", rest_name="sync-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sync_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-sent", rest_name="sync-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__sync_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sync_msg_sent(self):
    self.__sync_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-sent", rest_name="sync-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_sync_msg_received(self):
    """
    Getter method for sync_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/sync_msg_received (uint32)
    """
    return self.__sync_msg_received
      
  def _set_sync_msg_received(self, v, load=False):
    """
    Setter method for sync_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/sync_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sync_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sync_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-received", rest_name="sync-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sync_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-received", rest_name="sync-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__sync_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sync_msg_received(self):
    self.__sync_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="sync-msg-received", rest_name="sync-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_followup_msg_sent(self):
    """
    Getter method for followup_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/followup_msg_sent (uint32)
    """
    return self.__followup_msg_sent
      
  def _set_followup_msg_sent(self, v, load=False):
    """
    Setter method for followup_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/followup_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_followup_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_followup_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-sent", rest_name="followup-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """followup_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-sent", rest_name="followup-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__followup_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_followup_msg_sent(self):
    self.__followup_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-sent", rest_name="followup-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_followup_msg_received(self):
    """
    Getter method for followup_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/followup_msg_received (uint32)
    """
    return self.__followup_msg_received
      
  def _set_followup_msg_received(self, v, load=False):
    """
    Setter method for followup_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/followup_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_followup_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_followup_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-received", rest_name="followup-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """followup_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-received", rest_name="followup-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__followup_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_followup_msg_received(self):
    self.__followup_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="followup-msg-received", rest_name="followup-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_delay_req_msg_sent(self):
    """
    Getter method for delay_req_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_req_msg_sent (uint32)
    """
    return self.__delay_req_msg_sent
      
  def _set_delay_req_msg_sent(self, v, load=False):
    """
    Setter method for delay_req_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_req_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_req_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_req_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-sent", rest_name="delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_req_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-sent", rest_name="delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__delay_req_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_req_msg_sent(self):
    self.__delay_req_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-sent", rest_name="delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_delay_req_msg_received(self):
    """
    Getter method for delay_req_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_req_msg_received (uint32)
    """
    return self.__delay_req_msg_received
      
  def _set_delay_req_msg_received(self, v, load=False):
    """
    Setter method for delay_req_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_req_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_req_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_req_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-received", rest_name="delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_req_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-received", rest_name="delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__delay_req_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_req_msg_received(self):
    self.__delay_req_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-req-msg-received", rest_name="delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_delay_res_msg_sent(self):
    """
    Getter method for delay_res_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_res_msg_sent (uint32)
    """
    return self.__delay_res_msg_sent
      
  def _set_delay_res_msg_sent(self, v, load=False):
    """
    Setter method for delay_res_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_res_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_res_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_res_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-sent", rest_name="delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_res_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-sent", rest_name="delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__delay_res_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_res_msg_sent(self):
    self.__delay_res_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-sent", rest_name="delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_delay_res_msg_received(self):
    """
    Getter method for delay_res_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_res_msg_received (uint32)
    """
    return self.__delay_res_msg_received
      
  def _set_delay_res_msg_received(self, v, load=False):
    """
    Setter method for delay_res_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/delay_res_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_delay_res_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_delay_res_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-received", rest_name="delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """delay_res_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-received", rest_name="delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__delay_res_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_delay_res_msg_received(self):
    self.__delay_res_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="delay-res-msg-received", rest_name="delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_peer_delay_req_msg_sent(self):
    """
    Getter method for peer_delay_req_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_req_msg_sent (uint32)
    """
    return self.__peer_delay_req_msg_sent
      
  def _set_peer_delay_req_msg_sent(self, v, load=False):
    """
    Setter method for peer_delay_req_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_req_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_delay_req_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_delay_req_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-sent", rest_name="peer-delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_delay_req_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-sent", rest_name="peer-delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_delay_req_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_delay_req_msg_sent(self):
    self.__peer_delay_req_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-sent", rest_name="peer-delay-req-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_peer_delay_req_msg_received(self):
    """
    Getter method for peer_delay_req_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_req_msg_received (uint32)
    """
    return self.__peer_delay_req_msg_received
      
  def _set_peer_delay_req_msg_received(self, v, load=False):
    """
    Setter method for peer_delay_req_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_req_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_delay_req_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_delay_req_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-received", rest_name="peer-delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_delay_req_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-received", rest_name="peer-delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_delay_req_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_delay_req_msg_received(self):
    self.__peer_delay_req_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-req-msg-received", rest_name="peer-delay-req-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_peer_delay_res_msg_sent(self):
    """
    Getter method for peer_delay_res_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_msg_sent (uint32)
    """
    return self.__peer_delay_res_msg_sent
      
  def _set_peer_delay_res_msg_sent(self, v, load=False):
    """
    Setter method for peer_delay_res_msg_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_msg_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_delay_res_msg_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_delay_res_msg_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-sent", rest_name="peer-delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_delay_res_msg_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-sent", rest_name="peer-delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_delay_res_msg_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_delay_res_msg_sent(self):
    self.__peer_delay_res_msg_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-sent", rest_name="peer-delay-res-msg-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_peer_delay_res_msg_received(self):
    """
    Getter method for peer_delay_res_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_msg_received (uint32)
    """
    return self.__peer_delay_res_msg_received
      
  def _set_peer_delay_res_msg_received(self, v, load=False):
    """
    Setter method for peer_delay_res_msg_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_msg_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_delay_res_msg_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_delay_res_msg_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-received", rest_name="peer-delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_delay_res_msg_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-received", rest_name="peer-delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_delay_res_msg_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_delay_res_msg_received(self):
    self.__peer_delay_res_msg_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-msg-received", rest_name="peer-delay-res-msg-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_peer_delay_res_fm_sent(self):
    """
    Getter method for peer_delay_res_fm_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_fm_sent (uint32)
    """
    return self.__peer_delay_res_fm_sent
      
  def _set_peer_delay_res_fm_sent(self, v, load=False):
    """
    Setter method for peer_delay_res_fm_sent, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_fm_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_delay_res_fm_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_delay_res_fm_sent() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-sent", rest_name="peer-delay-res-fm-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_delay_res_fm_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-sent", rest_name="peer-delay-res-fm-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_delay_res_fm_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_delay_res_fm_sent(self):
    self.__peer_delay_res_fm_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-sent", rest_name="peer-delay-res-fm-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)


  def _get_peer_delay_res_fm_received(self):
    """
    Getter method for peer_delay_res_fm_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_fm_received (uint32)
    """
    return self.__peer_delay_res_fm_received
      
  def _set_peer_delay_res_fm_received(self, v, load=False):
    """
    Setter method for peer_delay_res_fm_received, mapped from YANG variable /ptp_state/interfaces_detail/interface_detail_list/peer_delay_res_fm_received (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_peer_delay_res_fm_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_peer_delay_res_fm_received() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-received", rest_name="peer-delay-res-fm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """peer_delay_res_fm_received must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-received", rest_name="peer-delay-res-fm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)""",
        })

    self.__peer_delay_res_fm_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_peer_delay_res_fm_received(self):
    self.__peer_delay_res_fm_received = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="peer-delay-res-fm-received", rest_name="peer-delay-res-fm-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ptp-operational', defining_module='brocade-ptp-operational', yang_type='uint32', is_config=False)

  id = __builtin__.property(_get_id)
  port_dataset = __builtin__.property(_get_port_dataset)
  clock_identity = __builtin__.property(_get_clock_identity)
  port_number = __builtin__.property(_get_port_number)
  ptp_version = __builtin__.property(_get_ptp_version)
  port_state = __builtin__.property(_get_port_state)
  port_type = __builtin__.property(_get_port_type)
  vlan_info = __builtin__.property(_get_vlan_info)
  dri = __builtin__.property(_get_dri)
  arto = __builtin__.property(_get_arto)
  pmpd = __builtin__.property(_get_pmpd)
  annouce_interval = __builtin__.property(_get_annouce_interval)
  sync_interval = __builtin__.property(_get_sync_interval)
  delay_mechanism = __builtin__.property(_get_delay_mechanism)
  transport_mode = __builtin__.property(_get_transport_mode)
  announce_msg_sent = __builtin__.property(_get_announce_msg_sent)
  announce_msg_received = __builtin__.property(_get_announce_msg_received)
  sync_msg_sent = __builtin__.property(_get_sync_msg_sent)
  sync_msg_received = __builtin__.property(_get_sync_msg_received)
  followup_msg_sent = __builtin__.property(_get_followup_msg_sent)
  followup_msg_received = __builtin__.property(_get_followup_msg_received)
  delay_req_msg_sent = __builtin__.property(_get_delay_req_msg_sent)
  delay_req_msg_received = __builtin__.property(_get_delay_req_msg_received)
  delay_res_msg_sent = __builtin__.property(_get_delay_res_msg_sent)
  delay_res_msg_received = __builtin__.property(_get_delay_res_msg_received)
  peer_delay_req_msg_sent = __builtin__.property(_get_peer_delay_req_msg_sent)
  peer_delay_req_msg_received = __builtin__.property(_get_peer_delay_req_msg_received)
  peer_delay_res_msg_sent = __builtin__.property(_get_peer_delay_res_msg_sent)
  peer_delay_res_msg_received = __builtin__.property(_get_peer_delay_res_msg_received)
  peer_delay_res_fm_sent = __builtin__.property(_get_peer_delay_res_fm_sent)
  peer_delay_res_fm_received = __builtin__.property(_get_peer_delay_res_fm_received)


  _pyangbind_elements = {'id': id, 'port_dataset': port_dataset, 'clock_identity': clock_identity, 'port_number': port_number, 'ptp_version': ptp_version, 'port_state': port_state, 'port_type': port_type, 'vlan_info': vlan_info, 'dri': dri, 'arto': arto, 'pmpd': pmpd, 'annouce_interval': annouce_interval, 'sync_interval': sync_interval, 'delay_mechanism': delay_mechanism, 'transport_mode': transport_mode, 'announce_msg_sent': announce_msg_sent, 'announce_msg_received': announce_msg_received, 'sync_msg_sent': sync_msg_sent, 'sync_msg_received': sync_msg_received, 'followup_msg_sent': followup_msg_sent, 'followup_msg_received': followup_msg_received, 'delay_req_msg_sent': delay_req_msg_sent, 'delay_req_msg_received': delay_req_msg_received, 'delay_res_msg_sent': delay_res_msg_sent, 'delay_res_msg_received': delay_res_msg_received, 'peer_delay_req_msg_sent': peer_delay_req_msg_sent, 'peer_delay_req_msg_received': peer_delay_req_msg_received, 'peer_delay_res_msg_sent': peer_delay_res_msg_sent, 'peer_delay_res_msg_received': peer_delay_res_msg_received, 'peer_delay_res_fm_sent': peer_delay_res_fm_sent, 'peer_delay_res_fm_received': peer_delay_res_fm_received, }


