
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class seq(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-ipv6-access-list - based on the path /ipv6-acl/ipv6/access-list/extended/seq. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__seq_id','__action','__protocol_type','__src_host_any_sip','__src_host_ip','__src_mask','__sport','__sport_number_eq_neq_tcp','__sport_number_lt_tcp','__sport_number_gt_tcp','__sport_number_eq_neq_udp','__sport_number_lt_udp','__sport_number_gt_udp','__sport_number_range_lower_tcp','__sport_number_range_lower_udp','__sport_number_range_higher_tcp','__sport_number_range_higher_udp','__dst_host_any_dip','__dst_host_ip','__dst_mask','__dport','__dport_number_eq_neq_tcp','__dport_number_lt_tcp','__dport_number_gt_tcp','__dport_number_eq_neq_udp','__dport_number_lt_udp','__dport_number_gt_udp','__dport_number_range_lower_tcp','__dport_number_range_lower_udp','__dport_number_range_higher_tcp','__dport_number_range_higher_udp','__dscp','__dscp_force','__drop_precedence_force','__urg','__ack','__push','__fin','__rst','__sync','__vlan','__count','__log','__mirror','__copy_sflow',)

  _yang_name = 'seq'
  _rest_name = 'seq'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__dport_number_range_higher_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-udp", rest_name="dport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_range_lower_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-tcp", rest_name="sport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__push = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="push", rest_name="push", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Push', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__sport_number_eq_neq_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-udp", rest_name="sport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_range_higher_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-tcp", rest_name="sport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sync = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sync", rest_name="sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Synchronize', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__copy_sflow = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="copy-sflow", rest_name="copy-sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Copy to Sflow Collector', u'cli-optional-in-sequence': None, u'cli-suppress-no': None, u'cli-full-command': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"'}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__mirror = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__sport = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="sport", rest_name="sport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)
    self.__src_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-mask", rest_name="src-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip-mask', is_config=True)
    self.__dport_number_lt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-udp", rest_name="dport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_range_lower_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-udp", rest_name="sport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__drop_precedence_force = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..2']}), is_leaf=True, yang_name="drop-precedence-force", rest_name="drop-precedence-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force drop precedence', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:drop-prec-uint', is_config=True)
    self.__log = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__seq_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0 .. 4294967290']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:seq-id-std-ext', is_config=True)
    self.__dport_number_range_lower_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-tcp", rest_name="dport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__dport_number_eq_neq_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-udp", rest_name="dport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__src_host_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-host-ip", rest_name="src-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip', is_config=True)
    self.__sport_number_lt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-tcp", rest_name="sport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_gt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-tcp", rest_name="sport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__dport_number_gt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-udp", rest_name="dport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__fin = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fin", rest_name="fin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'No more data', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__dport_number_gt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-tcp", rest_name="dport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='interface:vlan-type', is_config=True)
    self.__dport_number_range_higher_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-tcp", rest_name="dport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_eq_neq_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-tcp", rest_name="sport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__dscp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'af23': {'value': 22}, u'af22': {'value': 20}, u'af21': {'value': 18}, u'af33': {'value': 30}, u'af41': {'value': 34}, u'af43': {'value': 38}, u'af31': {'value': 26}, u'af32': {'value': 28}, u'af42': {'value': 36}, u'af12': {'value': 12}, u'af13': {'value': 14}, u'af11': {'value': 10}, u'default': {'value': 0}, u'ef': {'value': 46}, u'cs5': {'value': 40}, u'cs4': {'value': 32}, u'cs7': {'value': 56}, u'cs6': {'value': 48}, u'cs1': {'value': 8}, u'cs3': {'value': 24}, u'cs2': {'value': 16}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}),], is_leaf=True, yang_name="dscp", rest_name="dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Differentiated Service Code Point', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_range_higher_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-udp", rest_name="sport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'hard-drop': {'value': 3}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)
    self.__dst_host_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-host-ip", rest_name="dst-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip', is_config=True)
    self.__rst = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rst", rest_name="rst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Reset connection', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__dst_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-mask", rest_name="dst-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip-mask', is_config=True)
    self.__protocol_type = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {'value': 17}, u'ipv6-icmp': {'value': 58}, u'tcp': {'value': 6}, u'ipv6': {'value': 41}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..255']}),], is_leaf=True, yang_name="protocol-type", rest_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__count = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet Count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__urg = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="urg", rest_name="urg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Urgent', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__dport_number_lt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-tcp", rest_name="dport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__ack = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ack", rest_name="ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Acknowledgement', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    self.__dport_number_eq_neq_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-tcp", rest_name="dport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__dscp_force = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}), is_leaf=True, yang_name="dscp-force", rest_name="dscp-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force outgoing packet dscp', u'cli-optional-in-sequence': None, u'hidden': u'full', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:dscprmrk-uint', is_config=True)
    self.__dport_number_range_lower_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-udp", rest_name="dport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__dport = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="dport", rest_name="dport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)
    self.__src_host_any_sip = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="src-host-any-sip", rest_name="src-host-any-sip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__dst_host_any_dip = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="dst-host-any-dip", rest_name="dst-host-any-dip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_lt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-udp", rest_name="sport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    self.__sport_number_gt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-udp", rest_name="sport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'ipv6-acl', u'ipv6', u'access-list', u'extended', u'seq']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ipv6', u'access-list', u'extended', u'seq']

  def _get_seq_id(self):
    """
    Getter method for seq_id, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/seq_id (ip-access-list:seq-id-std-ext)
    """
    return self.__seq_id
      
  def _set_seq_id(self, v, load=False):
    """
    Setter method for seq_id, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/seq_id (ip-access-list:seq-id-std-ext)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seq_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seq_id() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0 .. 4294967290']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:seq-id-std-ext', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seq_id must be of a type compatible with ip-access-list:seq-id-std-ext""",
          'defined-type': "ip-access-list:seq-id-std-ext",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0 .. 4294967290']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:seq-id-std-ext', is_config=True)""",
        })

    self.__seq_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seq_id(self):
    self.__seq_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0 .. 4294967290']}), is_leaf=True, yang_name="seq-id", rest_name="seq-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:seq-id-std-ext', is_config=True)


  def _get_action(self):
    """
    Getter method for action, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/action (enumeration)
    """
    return self.__action
      
  def _set_action(self, v, load=False):
    """
    Setter method for action, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'hard-drop': {'value': 3}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action must be of a type compatible with enumeration""",
          'defined-type': "brocade-ipv6-access-list:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'hard-drop': {'value': 3}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)""",
        })

    self.__action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action(self):
    self.__action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'hard-drop': {'value': 3}, u'permit': {'value': 1}},), is_leaf=True, yang_name="action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-command': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)


  def _get_protocol_type(self):
    """
    Getter method for protocol_type, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/protocol_type (union)
    """
    return self.__protocol_type
      
  def _set_protocol_type(self, v, load=False):
    """
    Setter method for protocol_type, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/protocol_type (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {'value': 17}, u'ipv6-icmp': {'value': 58}, u'tcp': {'value': 6}, u'ipv6': {'value': 41}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..255']}),], is_leaf=True, yang_name="protocol-type", rest_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_type must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {'value': 17}, u'ipv6-icmp': {'value': 58}, u'tcp': {'value': 6}, u'ipv6': {'value': 41}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..255']}),], is_leaf=True, yang_name="protocol-type", rest_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__protocol_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_type(self):
    self.__protocol_type = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'udp': {'value': 17}, u'ipv6-icmp': {'value': 58}, u'tcp': {'value': 6}, u'ipv6': {'value': 41}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..255']}),], is_leaf=True, yang_name="protocol-type", rest_name="protocol-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_src_host_any_sip(self):
    """
    Getter method for src_host_any_sip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/src_host_any_sip (union)
    """
    return self.__src_host_any_sip
      
  def _set_src_host_any_sip(self, v, load=False):
    """
    Setter method for src_host_any_sip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/src_host_any_sip (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_host_any_sip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_host_any_sip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="src-host-any-sip", rest_name="src-host-any-sip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_host_any_sip must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="src-host-any-sip", rest_name="src-host-any-sip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__src_host_any_sip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_host_any_sip(self):
    self.__src_host_any_sip = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="src-host-any-sip", rest_name="src-host-any-sip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_src_host_ip(self):
    """
    Getter method for src_host_ip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/src_host_ip (sip)
    """
    return self.__src_host_ip
      
  def _set_src_host_ip(self, v, load=False):
    """
    Setter method for src_host_ip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/src_host_ip (sip)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_host_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_host_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-host-ip", rest_name="src-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_host_ip must be of a type compatible with sip""",
          'defined-type': "brocade-ipv6-access-list:sip",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-host-ip", rest_name="src-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip', is_config=True)""",
        })

    self.__src_host_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_host_ip(self):
    self.__src_host_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-host-ip", rest_name="src-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip', is_config=True)


  def _get_src_mask(self):
    """
    Getter method for src_mask, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/src_mask (sip-mask)
    """
    return self.__src_mask
      
  def _set_src_mask(self, v, load=False):
    """
    Setter method for src_mask, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/src_mask (sip-mask)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_mask() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-mask", rest_name="src-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip-mask', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_mask must be of a type compatible with sip-mask""",
          'defined-type': "brocade-ipv6-access-list:sip-mask",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-mask", rest_name="src-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip-mask', is_config=True)""",
        })

    self.__src_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_mask(self):
    self.__src_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-mask", rest_name="src-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='sip-mask', is_config=True)


  def _get_sport(self):
    """
    Getter method for sport, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport (enumeration)
    """
    return self.__sport
      
  def _set_sport(self, v, load=False):
    """
    Setter method for sport, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="sport", rest_name="sport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport must be of a type compatible with enumeration""",
          'defined-type': "brocade-ipv6-access-list:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="sport", rest_name="sport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)""",
        })

    self.__sport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport(self):
    self.__sport = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="sport", rest_name="sport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)


  def _get_sport_number_eq_neq_tcp(self):
    """
    Getter method for sport_number_eq_neq_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_eq_neq_tcp (union)
    """
    return self.__sport_number_eq_neq_tcp
      
  def _set_sport_number_eq_neq_tcp(self, v, load=False):
    """
    Setter method for sport_number_eq_neq_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_eq_neq_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_eq_neq_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_eq_neq_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-tcp", rest_name="sport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_eq_neq_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-tcp", rest_name="sport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_eq_neq_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_eq_neq_tcp(self):
    self.__sport_number_eq_neq_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-tcp", rest_name="sport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_lt_tcp(self):
    """
    Getter method for sport_number_lt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_lt_tcp (union)
    """
    return self.__sport_number_lt_tcp
      
  def _set_sport_number_lt_tcp(self, v, load=False):
    """
    Setter method for sport_number_lt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_lt_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_lt_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_lt_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-tcp", rest_name="sport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_lt_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-tcp", rest_name="sport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_lt_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_lt_tcp(self):
    self.__sport_number_lt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-tcp", rest_name="sport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_gt_tcp(self):
    """
    Getter method for sport_number_gt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_gt_tcp (union)
    """
    return self.__sport_number_gt_tcp
      
  def _set_sport_number_gt_tcp(self, v, load=False):
    """
    Setter method for sport_number_gt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_gt_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_gt_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_gt_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-tcp", rest_name="sport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_gt_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-tcp", rest_name="sport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_gt_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_gt_tcp(self):
    self.__sport_number_gt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-tcp", rest_name="sport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_eq_neq_udp(self):
    """
    Getter method for sport_number_eq_neq_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_eq_neq_udp (union)
    """
    return self.__sport_number_eq_neq_udp
      
  def _set_sport_number_eq_neq_udp(self, v, load=False):
    """
    Setter method for sport_number_eq_neq_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_eq_neq_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_eq_neq_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_eq_neq_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-udp", rest_name="sport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_eq_neq_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-udp", rest_name="sport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_eq_neq_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_eq_neq_udp(self):
    self.__sport_number_eq_neq_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="sport-number-eq-neq-udp", rest_name="sport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_lt_udp(self):
    """
    Getter method for sport_number_lt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_lt_udp (union)
    """
    return self.__sport_number_lt_udp
      
  def _set_sport_number_lt_udp(self, v, load=False):
    """
    Setter method for sport_number_lt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_lt_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_lt_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_lt_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-udp", rest_name="sport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_lt_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-udp", rest_name="sport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_lt_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_lt_udp(self):
    self.__sport_number_lt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-lt-udp", rest_name="sport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_gt_udp(self):
    """
    Getter method for sport_number_gt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_gt_udp (union)
    """
    return self.__sport_number_gt_udp
      
  def _set_sport_number_gt_udp(self, v, load=False):
    """
    Setter method for sport_number_gt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_gt_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_gt_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_gt_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-udp", rest_name="sport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_gt_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-udp", rest_name="sport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_gt_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_gt_udp(self):
    self.__sport_number_gt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-gt-udp", rest_name="sport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_range_lower_tcp(self):
    """
    Getter method for sport_number_range_lower_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_lower_tcp (union)
    """
    return self.__sport_number_range_lower_tcp
      
  def _set_sport_number_range_lower_tcp(self, v, load=False):
    """
    Setter method for sport_number_range_lower_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_lower_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_range_lower_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_range_lower_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-tcp", rest_name="sport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_range_lower_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-tcp", rest_name="sport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_range_lower_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_range_lower_tcp(self):
    self.__sport_number_range_lower_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-tcp", rest_name="sport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_range_lower_udp(self):
    """
    Getter method for sport_number_range_lower_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_lower_udp (union)
    """
    return self.__sport_number_range_lower_udp
      
  def _set_sport_number_range_lower_udp(self, v, load=False):
    """
    Setter method for sport_number_range_lower_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_lower_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_range_lower_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_range_lower_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-udp", rest_name="sport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_range_lower_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-udp", rest_name="sport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_range_lower_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_range_lower_udp(self):
    self.__sport_number_range_lower_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="sport-number-range-lower-udp", rest_name="sport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_range_higher_tcp(self):
    """
    Getter method for sport_number_range_higher_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_higher_tcp (union)
    """
    return self.__sport_number_range_higher_tcp
      
  def _set_sport_number_range_higher_tcp(self, v, load=False):
    """
    Setter method for sport_number_range_higher_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_higher_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_range_higher_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_range_higher_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-tcp", rest_name="sport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_range_higher_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-tcp", rest_name="sport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_range_higher_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_range_higher_tcp(self):
    self.__sport_number_range_higher_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-tcp", rest_name="sport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_sport_number_range_higher_udp(self):
    """
    Getter method for sport_number_range_higher_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_higher_udp (union)
    """
    return self.__sport_number_range_higher_udp
      
  def _set_sport_number_range_higher_udp(self, v, load=False):
    """
    Setter method for sport_number_range_higher_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sport_number_range_higher_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sport_number_range_higher_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sport_number_range_higher_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-udp", rest_name="sport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sport_number_range_higher_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-udp", rest_name="sport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__sport_number_range_higher_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sport_number_range_higher_udp(self):
    self.__sport_number_range_higher_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="sport-number-range-higher-udp", rest_name="sport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dst_host_any_dip(self):
    """
    Getter method for dst_host_any_dip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dst_host_any_dip (union)
    """
    return self.__dst_host_any_dip
      
  def _set_dst_host_any_dip(self, v, load=False):
    """
    Setter method for dst_host_any_dip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dst_host_any_dip (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_host_any_dip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_host_any_dip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="dst-host-any-dip", rest_name="dst-host-any-dip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_host_any_dip must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="dst-host-any-dip", rest_name="dst-host-any-dip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dst_host_any_dip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_host_any_dip(self):
    self.__dst_host_any_dip = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'host': {'value': 2}, u'any': {'value': 1}},),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))'}),], is_leaf=True, yang_name="dst-host-any-dip", rest_name="dst-host-any-dip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dst_host_ip(self):
    """
    Getter method for dst_host_ip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dst_host_ip (dip)
    """
    return self.__dst_host_ip
      
  def _set_dst_host_ip(self, v, load=False):
    """
    Setter method for dst_host_ip, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dst_host_ip (dip)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_host_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_host_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-host-ip", rest_name="dst-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_host_ip must be of a type compatible with dip""",
          'defined-type': "brocade-ipv6-access-list:dip",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-host-ip", rest_name="dst-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip', is_config=True)""",
        })

    self.__dst_host_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_host_ip(self):
    self.__dst_host_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-host-ip", rest_name="dst-host-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip', is_config=True)


  def _get_dst_mask(self):
    """
    Getter method for dst_mask, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dst_mask (dip-mask)
    """
    return self.__dst_mask
      
  def _set_dst_mask(self, v, load=False):
    """
    Setter method for dst_mask, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dst_mask (dip-mask)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_mask() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-mask", rest_name="dst-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip-mask', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_mask must be of a type compatible with dip-mask""",
          'defined-type': "brocade-ipv6-access-list:dip-mask",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-mask", rest_name="dst-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip-mask', is_config=True)""",
        })

    self.__dst_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_mask(self):
    self.__dst_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-mask", rest_name="dst-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='dip-mask', is_config=True)


  def _get_dport(self):
    """
    Getter method for dport, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport (enumeration)
    """
    return self.__dport
      
  def _set_dport(self, v, load=False):
    """
    Setter method for dport, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="dport", rest_name="dport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport must be of a type compatible with enumeration""",
          'defined-type': "brocade-ipv6-access-list:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="dport", rest_name="dport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)""",
        })

    self.__dport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport(self):
    self.__dport = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'lt': {'value': 3}, u'gt': {'value': 2}, u'eq': {'value': 1}, u'range': {'value': 5}, u'neq': {'value': 4}},), is_leaf=True, yang_name="dport", rest_name="dport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-incomplete-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='enumeration', is_config=True)


  def _get_dport_number_eq_neq_tcp(self):
    """
    Getter method for dport_number_eq_neq_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_eq_neq_tcp (union)
    """
    return self.__dport_number_eq_neq_tcp
      
  def _set_dport_number_eq_neq_tcp(self, v, load=False):
    """
    Setter method for dport_number_eq_neq_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_eq_neq_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_eq_neq_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_eq_neq_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-tcp", rest_name="dport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_eq_neq_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-tcp", rest_name="dport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_eq_neq_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_eq_neq_tcp(self):
    self.__dport_number_eq_neq_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-tcp", rest_name="dport-number-eq-neq-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_lt_tcp(self):
    """
    Getter method for dport_number_lt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_lt_tcp (union)
    """
    return self.__dport_number_lt_tcp
      
  def _set_dport_number_lt_tcp(self, v, load=False):
    """
    Setter method for dport_number_lt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_lt_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_lt_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_lt_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-tcp", rest_name="dport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_lt_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-tcp", rest_name="dport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_lt_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_lt_tcp(self):
    self.__dport_number_lt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-tcp", rest_name="dport-number-lt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_gt_tcp(self):
    """
    Getter method for dport_number_gt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_gt_tcp (union)
    """
    return self.__dport_number_gt_tcp
      
  def _set_dport_number_gt_tcp(self, v, load=False):
    """
    Setter method for dport_number_gt_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_gt_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_gt_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_gt_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-tcp", rest_name="dport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_gt_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-tcp", rest_name="dport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_gt_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_gt_tcp(self):
    self.__dport_number_gt_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-tcp", rest_name="dport-number-gt-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_eq_neq_udp(self):
    """
    Getter method for dport_number_eq_neq_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_eq_neq_udp (union)
    """
    return self.__dport_number_eq_neq_udp
      
  def _set_dport_number_eq_neq_udp(self, v, load=False):
    """
    Setter method for dport_number_eq_neq_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_eq_neq_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_eq_neq_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_eq_neq_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-udp", rest_name="dport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_eq_neq_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-udp", rest_name="dport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_eq_neq_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_eq_neq_udp(self):
    self.__dport_number_eq_neq_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65535']}),], is_leaf=True, yang_name="dport-number-eq-neq-udp", rest_name="dport-number-eq-neq-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_lt_udp(self):
    """
    Getter method for dport_number_lt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_lt_udp (union)
    """
    return self.__dport_number_lt_udp
      
  def _set_dport_number_lt_udp(self, v, load=False):
    """
    Setter method for dport_number_lt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_lt_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_lt_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_lt_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-udp", rest_name="dport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_lt_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-udp", rest_name="dport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_lt_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_lt_udp(self):
    self.__dport_number_lt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-lt-udp", rest_name="dport-number-lt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_gt_udp(self):
    """
    Getter method for dport_number_gt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_gt_udp (union)
    """
    return self.__dport_number_gt_udp
      
  def _set_dport_number_gt_udp(self, v, load=False):
    """
    Setter method for dport_number_gt_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_gt_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_gt_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_gt_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-udp", rest_name="dport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_gt_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-udp", rest_name="dport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_gt_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_gt_udp(self):
    self.__dport_number_gt_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-gt-udp", rest_name="dport-number-gt-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_range_lower_tcp(self):
    """
    Getter method for dport_number_range_lower_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_lower_tcp (union)
    """
    return self.__dport_number_range_lower_tcp
      
  def _set_dport_number_range_lower_tcp(self, v, load=False):
    """
    Setter method for dport_number_range_lower_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_lower_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_range_lower_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_range_lower_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-tcp", rest_name="dport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_range_lower_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-tcp", rest_name="dport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_range_lower_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_range_lower_tcp(self):
    self.__dport_number_range_lower_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-tcp", rest_name="dport-number-range-lower-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_range_lower_udp(self):
    """
    Getter method for dport_number_range_lower_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_lower_udp (union)
    """
    return self.__dport_number_range_lower_udp
      
  def _set_dport_number_range_lower_udp(self, v, load=False):
    """
    Setter method for dport_number_range_lower_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_lower_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_range_lower_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_range_lower_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-udp", rest_name="dport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_range_lower_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-udp", rest_name="dport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_range_lower_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_range_lower_udp(self):
    self.__dport_number_range_lower_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 65534']}),], is_leaf=True, yang_name="dport-number-range-lower-udp", rest_name="dport-number-range-lower-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_range_higher_tcp(self):
    """
    Getter method for dport_number_range_higher_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_higher_tcp (union)
    """
    return self.__dport_number_range_higher_tcp
      
  def _set_dport_number_range_higher_tcp(self, v, load=False):
    """
    Setter method for dport_number_range_higher_tcp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_higher_tcp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_range_higher_tcp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_range_higher_tcp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-tcp", rest_name="dport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_range_higher_tcp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-tcp", rest_name="dport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_range_higher_tcp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_range_higher_tcp(self):
    self.__dport_number_range_higher_tcp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'ftp': {'value': 21}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'hostname': {'value': 101}, u'smtp': {'value': 25}, u'www': {'value': 80}, u'telnet': {'value': 23}, u'echo': {'value': 7}, u'bgp': {'value': 179}, u'syslog': {'value': 514}, u'ftp-data': {'value': 20}, u'daytime': {'value': 13}, u'time': {'value': 37}, u'pim-auto-rp': {'value': 496}, u'login': {'value': 513}, u'talk': {'value': 517}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-tcp", rest_name="dport-number-range-higher-tcp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dport_number_range_higher_udp(self):
    """
    Getter method for dport_number_range_higher_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_higher_udp (union)
    """
    return self.__dport_number_range_higher_udp
      
  def _set_dport_number_range_higher_udp(self, v, load=False):
    """
    Setter method for dport_number_range_higher_udp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dport_number_range_higher_udp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dport_number_range_higher_udp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dport_number_range_higher_udp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-udp", rest_name="dport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dport_number_range_higher_udp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-udp", rest_name="dport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dport_number_range_higher_udp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dport_number_range_higher_udp(self):
    self.__dport_number_range_higher_udp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'pim-auto-rp': {'value': 496}, u'domain': {'value': 53}, u'tacacs': {'value': 49}, u'snmp': {'value': 161}, u'bootps': {'value': 67}, u'rip': {'value': 520}, u'echo': {'value': 7}, u'syslog': {'value': 514}, u'ntp': {'value': 123}, u'tftp': {'value': 69}, u'bootpc': {'value': 68}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}),], is_leaf=True, yang_name="dport-number-range-higher-udp", rest_name="dport-number-range-higher-udp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dscp(self):
    """
    Getter method for dscp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dscp (union)
    """
    return self.__dscp
      
  def _set_dscp(self, v, load=False):
    """
    Setter method for dscp, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dscp (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dscp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'af23': {'value': 22}, u'af22': {'value': 20}, u'af21': {'value': 18}, u'af33': {'value': 30}, u'af41': {'value': 34}, u'af43': {'value': 38}, u'af31': {'value': 26}, u'af32': {'value': 28}, u'af42': {'value': 36}, u'af12': {'value': 12}, u'af13': {'value': 14}, u'af11': {'value': 10}, u'default': {'value': 0}, u'ef': {'value': 46}, u'cs5': {'value': 40}, u'cs4': {'value': 32}, u'cs7': {'value': 56}, u'cs6': {'value': 48}, u'cs1': {'value': 8}, u'cs3': {'value': 24}, u'cs2': {'value': 16}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}),], is_leaf=True, yang_name="dscp", rest_name="dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Differentiated Service Code Point', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dscp must be of a type compatible with union""",
          'defined-type': "brocade-ipv6-access-list:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'af23': {'value': 22}, u'af22': {'value': 20}, u'af21': {'value': 18}, u'af33': {'value': 30}, u'af41': {'value': 34}, u'af43': {'value': 38}, u'af31': {'value': 26}, u'af32': {'value': 28}, u'af42': {'value': 36}, u'af12': {'value': 12}, u'af13': {'value': 14}, u'af11': {'value': 10}, u'default': {'value': 0}, u'ef': {'value': 46}, u'cs5': {'value': 40}, u'cs4': {'value': 32}, u'cs7': {'value': 56}, u'cs6': {'value': 48}, u'cs1': {'value': 8}, u'cs3': {'value': 24}, u'cs2': {'value': 16}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}),], is_leaf=True, yang_name="dscp", rest_name="dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Differentiated Service Code Point', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)""",
        })

    self.__dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dscp(self):
    self.__dscp = YANGDynClass(base=[RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'af23': {'value': 22}, u'af22': {'value': 20}, u'af21': {'value': 18}, u'af33': {'value': 30}, u'af41': {'value': 34}, u'af43': {'value': 38}, u'af31': {'value': 26}, u'af32': {'value': 28}, u'af42': {'value': 36}, u'af12': {'value': 12}, u'af13': {'value': 14}, u'af11': {'value': 10}, u'default': {'value': 0}, u'ef': {'value': 46}, u'cs5': {'value': 40}, u'cs4': {'value': 32}, u'cs7': {'value': 56}, u'cs6': {'value': 48}, u'cs1': {'value': 8}, u'cs3': {'value': 24}, u'cs2': {'value': 16}},),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}),], is_leaf=True, yang_name="dscp", rest_name="dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Differentiated Service Code Point', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='union', is_config=True)


  def _get_dscp_force(self):
    """
    Getter method for dscp_force, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dscp_force (ip-access-list:dscprmrk-uint)
    """
    return self.__dscp_force
      
  def _set_dscp_force(self, v, load=False):
    """
    Setter method for dscp_force, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/dscp_force (ip-access-list:dscprmrk-uint)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dscp_force is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dscp_force() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}), is_leaf=True, yang_name="dscp-force", rest_name="dscp-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force outgoing packet dscp', u'cli-optional-in-sequence': None, u'hidden': u'full', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:dscprmrk-uint', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dscp_force must be of a type compatible with ip-access-list:dscprmrk-uint""",
          'defined-type': "ip-access-list:dscprmrk-uint",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}), is_leaf=True, yang_name="dscp-force", rest_name="dscp-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force outgoing packet dscp', u'cli-optional-in-sequence': None, u'hidden': u'full', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:dscprmrk-uint', is_config=True)""",
        })

    self.__dscp_force = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dscp_force(self):
    self.__dscp_force = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..63']}), is_leaf=True, yang_name="dscp-force", rest_name="dscp-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force outgoing packet dscp', u'cli-optional-in-sequence': None, u'hidden': u'full', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:dscprmrk-uint', is_config=True)


  def _get_drop_precedence_force(self):
    """
    Getter method for drop_precedence_force, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/drop_precedence_force (ip-access-list:drop-prec-uint)
    """
    return self.__drop_precedence_force
      
  def _set_drop_precedence_force(self, v, load=False):
    """
    Setter method for drop_precedence_force, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/drop_precedence_force (ip-access-list:drop-prec-uint)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_drop_precedence_force is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_drop_precedence_force() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..2']}), is_leaf=True, yang_name="drop-precedence-force", rest_name="drop-precedence-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force drop precedence', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:drop-prec-uint', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """drop_precedence_force must be of a type compatible with ip-access-list:drop-prec-uint""",
          'defined-type': "ip-access-list:drop-prec-uint",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..2']}), is_leaf=True, yang_name="drop-precedence-force", rest_name="drop-precedence-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force drop precedence', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:drop-prec-uint', is_config=True)""",
        })

    self.__drop_precedence_force = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_drop_precedence_force(self):
    self.__drop_precedence_force = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..2']}), is_leaf=True, yang_name="drop-precedence-force", rest_name="drop-precedence-force", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Force drop precedence', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='ip-access-list:drop-prec-uint', is_config=True)


  def _get_urg(self):
    """
    Getter method for urg, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/urg (empty)
    """
    return self.__urg
      
  def _set_urg(self, v, load=False):
    """
    Setter method for urg, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/urg (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_urg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_urg() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="urg", rest_name="urg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Urgent', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """urg must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="urg", rest_name="urg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Urgent', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__urg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_urg(self):
    self.__urg = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="urg", rest_name="urg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Urgent', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_ack(self):
    """
    Getter method for ack, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/ack (empty)
    """
    return self.__ack
      
  def _set_ack(self, v, load=False):
    """
    Setter method for ack, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/ack (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ack", rest_name="ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Acknowledgement', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ack", rest_name="ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Acknowledgement', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__ack = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack(self):
    self.__ack = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ack", rest_name="ack", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Acknowledgement', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_push(self):
    """
    Getter method for push, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/push (empty)
    """
    return self.__push
      
  def _set_push(self, v, load=False):
    """
    Setter method for push, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/push (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_push is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_push() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="push", rest_name="push", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Push', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """push must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="push", rest_name="push", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Push', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__push = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_push(self):
    self.__push = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="push", rest_name="push", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Push', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_fin(self):
    """
    Getter method for fin, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/fin (empty)
    """
    return self.__fin
      
  def _set_fin(self, v, load=False):
    """
    Setter method for fin, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/fin (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fin is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fin() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="fin", rest_name="fin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'No more data', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fin must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fin", rest_name="fin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'No more data', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__fin = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fin(self):
    self.__fin = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fin", rest_name="fin", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'No more data', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_rst(self):
    """
    Getter method for rst, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/rst (empty)
    """
    return self.__rst
      
  def _set_rst(self, v, load=False):
    """
    Setter method for rst, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/rst (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rst() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rst", rest_name="rst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Reset connection', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rst must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rst", rest_name="rst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Reset connection', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__rst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rst(self):
    self.__rst = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rst", rest_name="rst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Reset connection', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_sync(self):
    """
    Getter method for sync, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sync (empty)
    """
    return self.__sync
      
  def _set_sync(self, v, load=False):
    """
    Setter method for sync, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/sync (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sync() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sync", rest_name="sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Synchronize', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sync must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sync", rest_name="sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Synchronize', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sync(self):
    self.__sync = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sync", rest_name="sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Synchronize', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_vlan(self):
    """
    Getter method for vlan, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/vlan (interface:vlan-type)

    YANG Description: Vlan
    """
    return self.__vlan
      
  def _set_vlan(self, v, load=False):
    """
    Setter method for vlan, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/vlan (interface:vlan-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlan() directly.

    YANG Description: Vlan
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='interface:vlan-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlan must be of a type compatible with interface:vlan-type""",
          'defined-type': "interface:vlan-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='interface:vlan-type', is_config=True)""",
        })

    self.__vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlan(self):
    self.__vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='interface:vlan-type', is_config=True)


  def _get_count(self):
    """
    Getter method for count, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/count (empty)
    """
    return self.__count
      
  def _set_count(self, v, load=False):
    """
    Setter method for count, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/count (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet Count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """count must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet Count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_count(self):
    self.__count = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Packet Count', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_log(self):
    """
    Getter method for log, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/log (empty)
    """
    return self.__log
      
  def _set_log(self, v, load=False):
    """
    Setter method for log, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/log (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log(self):
    self.__log = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Log Packet', u'cli-optional-in-sequence': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_mirror(self):
    """
    Getter method for mirror, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/mirror (empty)
    """
    return self.__mirror
      
  def _set_mirror(self, v, load=False):
    """
    Setter method for mirror, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/mirror (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mirror is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mirror() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mirror must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__mirror = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mirror(self):
    self.__mirror = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mirror packet', u'cli-optional-in-sequence': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)


  def _get_copy_sflow(self):
    """
    Getter method for copy_sflow, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/copy_sflow (empty)
    """
    return self.__copy_sflow
      
  def _set_copy_sflow(self, v, load=False):
    """
    Setter method for copy_sflow, mapped from YANG variable /ipv6_acl/ipv6/access_list/extended/seq/copy_sflow (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_copy_sflow is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_copy_sflow() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="copy-sflow", rest_name="copy-sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Copy to Sflow Collector', u'cli-optional-in-sequence': None, u'cli-suppress-no': None, u'cli-full-command': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"'}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """copy_sflow must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="copy-sflow", rest_name="copy-sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Copy to Sflow Collector', u'cli-optional-in-sequence': None, u'cli-suppress-no': None, u'cli-full-command': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"'}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)""",
        })

    self.__copy_sflow = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_copy_sflow(self):
    self.__copy_sflow = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="copy-sflow", rest_name="copy-sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Copy to Sflow Collector', u'cli-optional-in-sequence': None, u'cli-suppress-no': None, u'cli-full-command': None, u'hidden': u'full', u'display-when': u'/vcsmode/vcs-mode = "true"'}}, namespace='urn:brocade.com:mgmt:brocade-ipv6-access-list', defining_module='brocade-ipv6-access-list', yang_type='empty', is_config=True)

  seq_id = __builtin__.property(_get_seq_id, _set_seq_id)
  action = __builtin__.property(_get_action, _set_action)
  protocol_type = __builtin__.property(_get_protocol_type, _set_protocol_type)
  src_host_any_sip = __builtin__.property(_get_src_host_any_sip, _set_src_host_any_sip)
  src_host_ip = __builtin__.property(_get_src_host_ip, _set_src_host_ip)
  src_mask = __builtin__.property(_get_src_mask, _set_src_mask)
  sport = __builtin__.property(_get_sport, _set_sport)
  sport_number_eq_neq_tcp = __builtin__.property(_get_sport_number_eq_neq_tcp, _set_sport_number_eq_neq_tcp)
  sport_number_lt_tcp = __builtin__.property(_get_sport_number_lt_tcp, _set_sport_number_lt_tcp)
  sport_number_gt_tcp = __builtin__.property(_get_sport_number_gt_tcp, _set_sport_number_gt_tcp)
  sport_number_eq_neq_udp = __builtin__.property(_get_sport_number_eq_neq_udp, _set_sport_number_eq_neq_udp)
  sport_number_lt_udp = __builtin__.property(_get_sport_number_lt_udp, _set_sport_number_lt_udp)
  sport_number_gt_udp = __builtin__.property(_get_sport_number_gt_udp, _set_sport_number_gt_udp)
  sport_number_range_lower_tcp = __builtin__.property(_get_sport_number_range_lower_tcp, _set_sport_number_range_lower_tcp)
  sport_number_range_lower_udp = __builtin__.property(_get_sport_number_range_lower_udp, _set_sport_number_range_lower_udp)
  sport_number_range_higher_tcp = __builtin__.property(_get_sport_number_range_higher_tcp, _set_sport_number_range_higher_tcp)
  sport_number_range_higher_udp = __builtin__.property(_get_sport_number_range_higher_udp, _set_sport_number_range_higher_udp)
  dst_host_any_dip = __builtin__.property(_get_dst_host_any_dip, _set_dst_host_any_dip)
  dst_host_ip = __builtin__.property(_get_dst_host_ip, _set_dst_host_ip)
  dst_mask = __builtin__.property(_get_dst_mask, _set_dst_mask)
  dport = __builtin__.property(_get_dport, _set_dport)
  dport_number_eq_neq_tcp = __builtin__.property(_get_dport_number_eq_neq_tcp, _set_dport_number_eq_neq_tcp)
  dport_number_lt_tcp = __builtin__.property(_get_dport_number_lt_tcp, _set_dport_number_lt_tcp)
  dport_number_gt_tcp = __builtin__.property(_get_dport_number_gt_tcp, _set_dport_number_gt_tcp)
  dport_number_eq_neq_udp = __builtin__.property(_get_dport_number_eq_neq_udp, _set_dport_number_eq_neq_udp)
  dport_number_lt_udp = __builtin__.property(_get_dport_number_lt_udp, _set_dport_number_lt_udp)
  dport_number_gt_udp = __builtin__.property(_get_dport_number_gt_udp, _set_dport_number_gt_udp)
  dport_number_range_lower_tcp = __builtin__.property(_get_dport_number_range_lower_tcp, _set_dport_number_range_lower_tcp)
  dport_number_range_lower_udp = __builtin__.property(_get_dport_number_range_lower_udp, _set_dport_number_range_lower_udp)
  dport_number_range_higher_tcp = __builtin__.property(_get_dport_number_range_higher_tcp, _set_dport_number_range_higher_tcp)
  dport_number_range_higher_udp = __builtin__.property(_get_dport_number_range_higher_udp, _set_dport_number_range_higher_udp)
  dscp = __builtin__.property(_get_dscp, _set_dscp)
  dscp_force = __builtin__.property(_get_dscp_force, _set_dscp_force)
  drop_precedence_force = __builtin__.property(_get_drop_precedence_force, _set_drop_precedence_force)
  urg = __builtin__.property(_get_urg, _set_urg)
  ack = __builtin__.property(_get_ack, _set_ack)
  push = __builtin__.property(_get_push, _set_push)
  fin = __builtin__.property(_get_fin, _set_fin)
  rst = __builtin__.property(_get_rst, _set_rst)
  sync = __builtin__.property(_get_sync, _set_sync)
  vlan = __builtin__.property(_get_vlan, _set_vlan)
  count = __builtin__.property(_get_count, _set_count)
  log = __builtin__.property(_get_log, _set_log)
  mirror = __builtin__.property(_get_mirror, _set_mirror)
  copy_sflow = __builtin__.property(_get_copy_sflow, _set_copy_sflow)


  _pyangbind_elements = {'seq_id': seq_id, 'action': action, 'protocol_type': protocol_type, 'src_host_any_sip': src_host_any_sip, 'src_host_ip': src_host_ip, 'src_mask': src_mask, 'sport': sport, 'sport_number_eq_neq_tcp': sport_number_eq_neq_tcp, 'sport_number_lt_tcp': sport_number_lt_tcp, 'sport_number_gt_tcp': sport_number_gt_tcp, 'sport_number_eq_neq_udp': sport_number_eq_neq_udp, 'sport_number_lt_udp': sport_number_lt_udp, 'sport_number_gt_udp': sport_number_gt_udp, 'sport_number_range_lower_tcp': sport_number_range_lower_tcp, 'sport_number_range_lower_udp': sport_number_range_lower_udp, 'sport_number_range_higher_tcp': sport_number_range_higher_tcp, 'sport_number_range_higher_udp': sport_number_range_higher_udp, 'dst_host_any_dip': dst_host_any_dip, 'dst_host_ip': dst_host_ip, 'dst_mask': dst_mask, 'dport': dport, 'dport_number_eq_neq_tcp': dport_number_eq_neq_tcp, 'dport_number_lt_tcp': dport_number_lt_tcp, 'dport_number_gt_tcp': dport_number_gt_tcp, 'dport_number_eq_neq_udp': dport_number_eq_neq_udp, 'dport_number_lt_udp': dport_number_lt_udp, 'dport_number_gt_udp': dport_number_gt_udp, 'dport_number_range_lower_tcp': dport_number_range_lower_tcp, 'dport_number_range_lower_udp': dport_number_range_lower_udp, 'dport_number_range_higher_tcp': dport_number_range_higher_tcp, 'dport_number_range_higher_udp': dport_number_range_higher_udp, 'dscp': dscp, 'dscp_force': dscp_force, 'drop_precedence_force': drop_precedence_force, 'urg': urg, 'ack': ack, 'push': push, 'fin': fin, 'rst': rst, 'sync': sync, 'vlan': vlan, 'count': count, 'log': log, 'mirror': mirror, 'copy_sflow': copy_sflow, }


