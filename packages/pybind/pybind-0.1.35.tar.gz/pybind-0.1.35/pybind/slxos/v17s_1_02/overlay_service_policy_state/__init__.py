
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import bind_interfaces
class overlay_service_policy_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-ssm-operational - based on the path /overlay-service-policy-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Overlay Service Policy
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__policy_name','__details','__bind_interfaces',)

  _yang_name = 'overlay-service-policy-state'
  _rest_name = 'overlay-service-policy-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__bind_interfaces = YANGDynClass(base=bind_interfaces.bind_interfaces, is_container='container', presence=False, yang_name="bind-interfaces", rest_name="bind-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ssm-overlay-service-policy-bind-intf', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='container', is_config=False)
    self.__details = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="details", rest_name="details", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='boolean', is_config=False)
    self.__policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", rest_name="policy-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'overlay-service-policy-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'overlay-service-policy-state']

  def _get_policy_name(self):
    """
    Getter method for policy_name, mapped from YANG variable /overlay_service_policy_state/policy_name (string)

    YANG Description: Overlay Policy Map name
    """
    return self.__policy_name
      
  def _set_policy_name(self, v, load=False):
    """
    Setter method for policy_name, mapped from YANG variable /overlay_service_policy_state/policy_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_policy_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_policy_name() directly.

    YANG Description: Overlay Policy Map name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="policy-name", rest_name="policy-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """policy_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", rest_name="policy-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)""",
        })

    self.__policy_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_policy_name(self):
    self.__policy_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="policy-name", rest_name="policy-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)


  def _get_details(self):
    """
    Getter method for details, mapped from YANG variable /overlay_service_policy_state/details (boolean)

    YANG Description: Get Overlay class map details
    """
    return self.__details
      
  def _set_details(self, v, load=False):
    """
    Setter method for details, mapped from YANG variable /overlay_service_policy_state/details (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_details is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_details() directly.

    YANG Description: Get Overlay class map details
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="details", rest_name="details", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """details must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="details", rest_name="details", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__details = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_details(self):
    self.__details = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="details", rest_name="details", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='boolean', is_config=False)


  def _get_bind_interfaces(self):
    """
    Getter method for bind_interfaces, mapped from YANG variable /overlay_service_policy_state/bind_interfaces (container)

    YANG Description: Overlay Service Policy Binding Interfaces
    """
    return self.__bind_interfaces
      
  def _set_bind_interfaces(self, v, load=False):
    """
    Setter method for bind_interfaces, mapped from YANG variable /overlay_service_policy_state/bind_interfaces (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bind_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bind_interfaces() directly.

    YANG Description: Overlay Service Policy Binding Interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=bind_interfaces.bind_interfaces, is_container='container', presence=False, yang_name="bind-interfaces", rest_name="bind-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ssm-overlay-service-policy-bind-intf', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bind_interfaces must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bind_interfaces.bind_interfaces, is_container='container', presence=False, yang_name="bind-interfaces", rest_name="bind-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ssm-overlay-service-policy-bind-intf', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='container', is_config=False)""",
        })

    self.__bind_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bind_interfaces(self):
    self.__bind_interfaces = YANGDynClass(base=bind_interfaces.bind_interfaces, is_container='container', presence=False, yang_name="bind-interfaces", rest_name="bind-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'ssm-overlay-service-policy-bind-intf', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='container', is_config=False)

  policy_name = __builtin__.property(_get_policy_name)
  details = __builtin__.property(_get_details)
  bind_interfaces = __builtin__.property(_get_bind_interfaces)


  _pyangbind_elements = {'policy_name': policy_name, 'details': details, 'bind_interfaces': bind_interfaces, }


