
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class tmdevicestataggr(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysdiag-operational - based on the path /tm-state/tmdevicestataggr. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Get TM device stats from all towers and all slots
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__slot','__tower','__ingress_total_pkt_cnt_aggr','__enque_pkt_cnt_aggr','__deque_pkt_cnt_aggr','__total_discard_pkt_cnt_aggr','__deleted_pkt_cnt_aggr','__invalid_queue_pkt_aggr','__cpu_pkt_cnt_aggr','__uni_pkt_cnt_aggr','__mcast_pkt_cnt_aggr','__uni_discard_pkt_cnt_aggr','__mcast_discard_pkt_cnt_aggr','__fqp_pkt_cnt_aggr','__ehp_discard_cnt_aggr',)

  _yang_name = 'tmdevicestataggr'
  _rest_name = 'tmdevicestataggr'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__slot = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    self.__cpu_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cpu-pkt-cnt-aggr", rest_name="cpu-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__uni_discard_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-discard-pkt-cnt-aggr", rest_name="uni-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__uni_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-pkt-cnt-aggr", rest_name="uni-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__mcast_discard_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-discard-pkt-cnt-aggr", rest_name="mcast-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__deleted_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deleted-pkt-cnt-aggr", rest_name="deleted-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__deque_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deque-pkt-cnt-aggr", rest_name="deque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__ehp_discard_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ehp-discard-cnt-aggr", rest_name="ehp-discard-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__enque_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="enque-pkt-cnt-aggr", rest_name="enque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__invalid_queue_pkt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-queue-pkt-aggr", rest_name="invalid-queue-pkt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__total_discard_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-discard-pkt-cnt-aggr", rest_name="total-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__tower = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    self.__fqp_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fqp-pkt-cnt-aggr", rest_name="fqp-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__ingress_total_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ingress-total-pkt-cnt-aggr", rest_name="ingress-total-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    self.__mcast_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-pkt-cnt-aggr", rest_name="mcast-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tm-state', u'tmdevicestataggr']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'tm-state', u'tmdevicestataggr']

  def _get_slot(self):
    """
    Getter method for slot, mapped from YANG variable /tm_state/tmdevicestataggr/slot (uint16)

    YANG Description: slot id to get tm devices stats
    """
    return self.__slot
      
  def _set_slot(self, v, load=False):
    """
    Setter method for slot, mapped from YANG variable /tm_state/tmdevicestataggr/slot (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slot() directly.

    YANG Description: slot id to get tm devices stats
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slot must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__slot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slot(self):
    self.__slot = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="slot", rest_name="slot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)


  def _get_tower(self):
    """
    Getter method for tower, mapped from YANG variable /tm_state/tmdevicestataggr/tower (uint16)

    YANG Description: tower id to get tm device stats
    """
    return self.__tower
      
  def _set_tower(self, v, load=False):
    """
    Setter method for tower, mapped from YANG variable /tm_state/tmdevicestataggr/tower (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tower is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tower() directly.

    YANG Description: tower id to get tm device stats
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tower must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__tower = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tower(self):
    self.__tower = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tower", rest_name="tower", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint16', is_config=False)


  def _get_ingress_total_pkt_cnt_aggr(self):
    """
    Getter method for ingress_total_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/ingress_total_pkt_cnt_aggr (uint64)

    YANG Description: ingress_total_pkt_cnt
    """
    return self.__ingress_total_pkt_cnt_aggr
      
  def _set_ingress_total_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for ingress_total_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/ingress_total_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ingress_total_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ingress_total_pkt_cnt_aggr() directly.

    YANG Description: ingress_total_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ingress-total-pkt-cnt-aggr", rest_name="ingress-total-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ingress_total_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ingress-total-pkt-cnt-aggr", rest_name="ingress-total-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ingress_total_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ingress_total_pkt_cnt_aggr(self):
    self.__ingress_total_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ingress-total-pkt-cnt-aggr", rest_name="ingress-total-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_enque_pkt_cnt_aggr(self):
    """
    Getter method for enque_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/enque_pkt_cnt_aggr (uint64)

    YANG Description: enque_pkt_cnt
    """
    return self.__enque_pkt_cnt_aggr
      
  def _set_enque_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for enque_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/enque_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enque_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enque_pkt_cnt_aggr() directly.

    YANG Description: enque_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="enque-pkt-cnt-aggr", rest_name="enque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enque_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="enque-pkt-cnt-aggr", rest_name="enque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__enque_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enque_pkt_cnt_aggr(self):
    self.__enque_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="enque-pkt-cnt-aggr", rest_name="enque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_deque_pkt_cnt_aggr(self):
    """
    Getter method for deque_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/deque_pkt_cnt_aggr (uint64)

    YANG Description: deque_pkt_cnt
    """
    return self.__deque_pkt_cnt_aggr
      
  def _set_deque_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for deque_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/deque_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deque_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deque_pkt_cnt_aggr() directly.

    YANG Description: deque_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deque-pkt-cnt-aggr", rest_name="deque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deque_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deque-pkt-cnt-aggr", rest_name="deque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__deque_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deque_pkt_cnt_aggr(self):
    self.__deque_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deque-pkt-cnt-aggr", rest_name="deque-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_total_discard_pkt_cnt_aggr(self):
    """
    Getter method for total_discard_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/total_discard_pkt_cnt_aggr (uint64)

    YANG Description: total_discard_pkt_cnt
    """
    return self.__total_discard_pkt_cnt_aggr
      
  def _set_total_discard_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for total_discard_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/total_discard_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_discard_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_discard_pkt_cnt_aggr() directly.

    YANG Description: total_discard_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-discard-pkt-cnt-aggr", rest_name="total-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_discard_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-discard-pkt-cnt-aggr", rest_name="total-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__total_discard_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_discard_pkt_cnt_aggr(self):
    self.__total_discard_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="total-discard-pkt-cnt-aggr", rest_name="total-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_deleted_pkt_cnt_aggr(self):
    """
    Getter method for deleted_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/deleted_pkt_cnt_aggr (uint64)

    YANG Description: deleted_pkt_cnt
    """
    return self.__deleted_pkt_cnt_aggr
      
  def _set_deleted_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for deleted_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/deleted_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_deleted_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_deleted_pkt_cnt_aggr() directly.

    YANG Description: deleted_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deleted-pkt-cnt-aggr", rest_name="deleted-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """deleted_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deleted-pkt-cnt-aggr", rest_name="deleted-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__deleted_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_deleted_pkt_cnt_aggr(self):
    self.__deleted_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="deleted-pkt-cnt-aggr", rest_name="deleted-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_invalid_queue_pkt_aggr(self):
    """
    Getter method for invalid_queue_pkt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/invalid_queue_pkt_aggr (uint64)

    YANG Description: invalid_queue_pkt
    """
    return self.__invalid_queue_pkt_aggr
      
  def _set_invalid_queue_pkt_aggr(self, v, load=False):
    """
    Setter method for invalid_queue_pkt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/invalid_queue_pkt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_invalid_queue_pkt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_invalid_queue_pkt_aggr() directly.

    YANG Description: invalid_queue_pkt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-queue-pkt-aggr", rest_name="invalid-queue-pkt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """invalid_queue_pkt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-queue-pkt-aggr", rest_name="invalid-queue-pkt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__invalid_queue_pkt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_invalid_queue_pkt_aggr(self):
    self.__invalid_queue_pkt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="invalid-queue-pkt-aggr", rest_name="invalid-queue-pkt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_cpu_pkt_cnt_aggr(self):
    """
    Getter method for cpu_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/cpu_pkt_cnt_aggr (uint64)

    YANG Description: cpu_pkt_cnt
    """
    return self.__cpu_pkt_cnt_aggr
      
  def _set_cpu_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for cpu_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/cpu_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_pkt_cnt_aggr() directly.

    YANG Description: cpu_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cpu-pkt-cnt-aggr", rest_name="cpu-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cpu-pkt-cnt-aggr", rest_name="cpu-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__cpu_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_pkt_cnt_aggr(self):
    self.__cpu_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="cpu-pkt-cnt-aggr", rest_name="cpu-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_uni_pkt_cnt_aggr(self):
    """
    Getter method for uni_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/uni_pkt_cnt_aggr (uint64)

    YANG Description: uni_pkt_cnt
    """
    return self.__uni_pkt_cnt_aggr
      
  def _set_uni_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for uni_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/uni_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uni_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uni_pkt_cnt_aggr() directly.

    YANG Description: uni_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-pkt-cnt-aggr", rest_name="uni-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uni_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-pkt-cnt-aggr", rest_name="uni-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__uni_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uni_pkt_cnt_aggr(self):
    self.__uni_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-pkt-cnt-aggr", rest_name="uni-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_mcast_pkt_cnt_aggr(self):
    """
    Getter method for mcast_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/mcast_pkt_cnt_aggr (uint64)

    YANG Description: mcast_pkt_cnt
    """
    return self.__mcast_pkt_cnt_aggr
      
  def _set_mcast_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for mcast_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/mcast_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mcast_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mcast_pkt_cnt_aggr() directly.

    YANG Description: mcast_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-pkt-cnt-aggr", rest_name="mcast-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mcast_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-pkt-cnt-aggr", rest_name="mcast-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__mcast_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mcast_pkt_cnt_aggr(self):
    self.__mcast_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-pkt-cnt-aggr", rest_name="mcast-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_uni_discard_pkt_cnt_aggr(self):
    """
    Getter method for uni_discard_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/uni_discard_pkt_cnt_aggr (uint64)

    YANG Description: uni_discard_pkt_cnt
    """
    return self.__uni_discard_pkt_cnt_aggr
      
  def _set_uni_discard_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for uni_discard_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/uni_discard_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uni_discard_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uni_discard_pkt_cnt_aggr() directly.

    YANG Description: uni_discard_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-discard-pkt-cnt-aggr", rest_name="uni-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uni_discard_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-discard-pkt-cnt-aggr", rest_name="uni-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__uni_discard_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uni_discard_pkt_cnt_aggr(self):
    self.__uni_discard_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="uni-discard-pkt-cnt-aggr", rest_name="uni-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_mcast_discard_pkt_cnt_aggr(self):
    """
    Getter method for mcast_discard_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/mcast_discard_pkt_cnt_aggr (uint64)

    YANG Description: mcast_discard_pkt_cnt
    """
    return self.__mcast_discard_pkt_cnt_aggr
      
  def _set_mcast_discard_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for mcast_discard_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/mcast_discard_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mcast_discard_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mcast_discard_pkt_cnt_aggr() directly.

    YANG Description: mcast_discard_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-discard-pkt-cnt-aggr", rest_name="mcast-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mcast_discard_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-discard-pkt-cnt-aggr", rest_name="mcast-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__mcast_discard_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mcast_discard_pkt_cnt_aggr(self):
    self.__mcast_discard_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="mcast-discard-pkt-cnt-aggr", rest_name="mcast-discard-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_fqp_pkt_cnt_aggr(self):
    """
    Getter method for fqp_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/fqp_pkt_cnt_aggr (uint64)

    YANG Description: fqp_pkt_cnt
    """
    return self.__fqp_pkt_cnt_aggr
      
  def _set_fqp_pkt_cnt_aggr(self, v, load=False):
    """
    Setter method for fqp_pkt_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/fqp_pkt_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fqp_pkt_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fqp_pkt_cnt_aggr() directly.

    YANG Description: fqp_pkt_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fqp-pkt-cnt-aggr", rest_name="fqp-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fqp_pkt_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fqp-pkt-cnt-aggr", rest_name="fqp-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__fqp_pkt_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fqp_pkt_cnt_aggr(self):
    self.__fqp_pkt_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="fqp-pkt-cnt-aggr", rest_name="fqp-pkt-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)


  def _get_ehp_discard_cnt_aggr(self):
    """
    Getter method for ehp_discard_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/ehp_discard_cnt_aggr (uint64)

    YANG Description: ehp_discard_cnt
    """
    return self.__ehp_discard_cnt_aggr
      
  def _set_ehp_discard_cnt_aggr(self, v, load=False):
    """
    Setter method for ehp_discard_cnt_aggr, mapped from YANG variable /tm_state/tmdevicestataggr/ehp_discard_cnt_aggr (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ehp_discard_cnt_aggr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ehp_discard_cnt_aggr() directly.

    YANG Description: ehp_discard_cnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ehp-discard-cnt-aggr", rest_name="ehp-discard-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ehp_discard_cnt_aggr must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ehp-discard-cnt-aggr", rest_name="ehp-discard-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ehp_discard_cnt_aggr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ehp_discard_cnt_aggr(self):
    self.__ehp_discard_cnt_aggr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ehp-discard-cnt-aggr", rest_name="ehp-discard-cnt-aggr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysdiag-operational', defining_module='brocade-sysdiag-operational', yang_type='uint64', is_config=False)

  slot = __builtin__.property(_get_slot)
  tower = __builtin__.property(_get_tower)
  ingress_total_pkt_cnt_aggr = __builtin__.property(_get_ingress_total_pkt_cnt_aggr)
  enque_pkt_cnt_aggr = __builtin__.property(_get_enque_pkt_cnt_aggr)
  deque_pkt_cnt_aggr = __builtin__.property(_get_deque_pkt_cnt_aggr)
  total_discard_pkt_cnt_aggr = __builtin__.property(_get_total_discard_pkt_cnt_aggr)
  deleted_pkt_cnt_aggr = __builtin__.property(_get_deleted_pkt_cnt_aggr)
  invalid_queue_pkt_aggr = __builtin__.property(_get_invalid_queue_pkt_aggr)
  cpu_pkt_cnt_aggr = __builtin__.property(_get_cpu_pkt_cnt_aggr)
  uni_pkt_cnt_aggr = __builtin__.property(_get_uni_pkt_cnt_aggr)
  mcast_pkt_cnt_aggr = __builtin__.property(_get_mcast_pkt_cnt_aggr)
  uni_discard_pkt_cnt_aggr = __builtin__.property(_get_uni_discard_pkt_cnt_aggr)
  mcast_discard_pkt_cnt_aggr = __builtin__.property(_get_mcast_discard_pkt_cnt_aggr)
  fqp_pkt_cnt_aggr = __builtin__.property(_get_fqp_pkt_cnt_aggr)
  ehp_discard_cnt_aggr = __builtin__.property(_get_ehp_discard_cnt_aggr)


  _pyangbind_elements = {'slot': slot, 'tower': tower, 'ingress_total_pkt_cnt_aggr': ingress_total_pkt_cnt_aggr, 'enque_pkt_cnt_aggr': enque_pkt_cnt_aggr, 'deque_pkt_cnt_aggr': deque_pkt_cnt_aggr, 'total_discard_pkt_cnt_aggr': total_discard_pkt_cnt_aggr, 'deleted_pkt_cnt_aggr': deleted_pkt_cnt_aggr, 'invalid_queue_pkt_aggr': invalid_queue_pkt_aggr, 'cpu_pkt_cnt_aggr': cpu_pkt_cnt_aggr, 'uni_pkt_cnt_aggr': uni_pkt_cnt_aggr, 'mcast_pkt_cnt_aggr': mcast_pkt_cnt_aggr, 'uni_discard_pkt_cnt_aggr': uni_discard_pkt_cnt_aggr, 'mcast_discard_pkt_cnt_aggr': mcast_discard_pkt_cnt_aggr, 'fqp_pkt_cnt_aggr': fqp_pkt_cnt_aggr, 'ehp_discard_cnt_aggr': ehp_discard_cnt_aggr, }


