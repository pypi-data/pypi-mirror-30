
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import ethernet_container
import port_channel_container
class interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/route-map/content/precedence/set/interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Interface
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ethernet_container','__port_channel_container',)

  _yang_name = 'interface'
  _rest_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ethernet_container = YANGDynClass(base=ethernet_container.ethernet_container, is_container='container', presence=False, yang_name="ethernet-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    self.__port_channel_container = YANGDynClass(base=port_channel_container.port_channel_container, is_container='container', presence=False, yang_name="port-channel-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port Channel Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'route-map', u'content', u'precedence', u'set', u'interface']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'route-map', u'precedence', u'set', u'interface']

  def _get_ethernet_container(self):
    """
    Getter method for ethernet_container, mapped from YANG variable /routing_system/route_map/content/precedence/set/interface/ethernet_container (container)
    """
    return self.__ethernet_container
      
  def _set_ethernet_container(self, v, load=False):
    """
    Setter method for ethernet_container, mapped from YANG variable /routing_system/route_map/content/precedence/set/interface/ethernet_container (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ethernet_container is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ethernet_container() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ethernet_container.ethernet_container, is_container='container', presence=False, yang_name="ethernet-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ethernet_container must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ethernet_container.ethernet_container, is_container='container', presence=False, yang_name="ethernet-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)""",
        })

    self.__ethernet_container = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ethernet_container(self):
    self.__ethernet_container = YANGDynClass(base=ethernet_container.ethernet_container, is_container='container', presence=False, yang_name="ethernet-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Ethernet Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)


  def _get_port_channel_container(self):
    """
    Getter method for port_channel_container, mapped from YANG variable /routing_system/route_map/content/precedence/set/interface/port_channel_container (container)
    """
    return self.__port_channel_container
      
  def _set_port_channel_container(self, v, load=False):
    """
    Setter method for port_channel_container, mapped from YANG variable /routing_system/route_map/content/precedence/set/interface/port_channel_container (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_channel_container is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_channel_container() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=port_channel_container.port_channel_container, is_container='container', presence=False, yang_name="port-channel-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port Channel Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_channel_container must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=port_channel_container.port_channel_container, is_container='container', presence=False, yang_name="port-channel-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port Channel Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)""",
        })

    self.__port_channel_container = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_channel_container(self):
    self.__port_channel_container = YANGDynClass(base=port_channel_container.port_channel_container, is_container='container', presence=False, yang_name="port-channel-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Port Channel Interface', u'cli-drop-node-name': None, u'cli-sequence-commands': None, u'cli-compact-syntax': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)

  ethernet_container = __builtin__.property(_get_ethernet_container, _set_ethernet_container)
  port_channel_container = __builtin__.property(_get_port_channel_container, _set_port_channel_container)


  _pyangbind_elements = {'ethernet_container': ethernet_container, 'port_channel_container': port_channel_container, }


