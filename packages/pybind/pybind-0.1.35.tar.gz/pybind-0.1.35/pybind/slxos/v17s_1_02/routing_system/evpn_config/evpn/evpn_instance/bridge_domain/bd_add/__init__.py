
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class bd_add(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/evpn-config/evpn/evpn-instance/bridge-domain/bd-add. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__bd_range_add','__bd_range_remove',)

  _yang_name = 'bd-add'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__bd_range_add = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Add bridge domains to the EVPN Instance.', u'alt-name': u'add', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)
    self.__bd_range_remove = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Remove bridge domains to the EVPN Instance.', u'alt-name': u'remove', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'evpn-config', u'evpn', u'evpn-instance', u'bridge-domain', u'bd-add']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'evpn', u'evpn-instance', u'bridge-domain']

  def _get_bd_range_add(self):
    """
    Getter method for bd_range_add, mapped from YANG variable /routing_system/evpn_config/evpn/evpn_instance/bridge_domain/bd_add/bd_range_add (tunnels:bridge-domain-id-range-type)

    YANG Description: Add bridge domains to the EVPN Instance.
    """
    return self.__bd_range_add
      
  def _set_bd_range_add(self, v, load=False):
    """
    Setter method for bd_range_add, mapped from YANG variable /routing_system/evpn_config/evpn/evpn_instance/bridge_domain/bd_add/bd_range_add (tunnels:bridge-domain-id-range-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bd_range_add is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bd_range_add() directly.

    YANG Description: Add bridge domains to the EVPN Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Add bridge domains to the EVPN Instance.', u'alt-name': u'add', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bd_range_add must be of a type compatible with tunnels:bridge-domain-id-range-type""",
          'defined-type': "tunnels:bridge-domain-id-range-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Add bridge domains to the EVPN Instance.', u'alt-name': u'add', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)""",
        })

    self.__bd_range_add = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bd_range_add(self):
    self.__bd_range_add = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Add bridge domains to the EVPN Instance.', u'alt-name': u'add', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)


  def _get_bd_range_remove(self):
    """
    Getter method for bd_range_remove, mapped from YANG variable /routing_system/evpn_config/evpn/evpn_instance/bridge_domain/bd_add/bd_range_remove (tunnels:bridge-domain-id-range-type)

    YANG Description: Remove bridge domains to the EVPN Instance.
    """
    return self.__bd_range_remove
      
  def _set_bd_range_remove(self, v, load=False):
    """
    Setter method for bd_range_remove, mapped from YANG variable /routing_system/evpn_config/evpn/evpn_instance/bridge_domain/bd_add/bd_range_remove (tunnels:bridge-domain-id-range-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bd_range_remove is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bd_range_remove() directly.

    YANG Description: Remove bridge domains to the EVPN Instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Remove bridge domains to the EVPN Instance.', u'alt-name': u'remove', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bd_range_remove must be of a type compatible with tunnels:bridge-domain-id-range-type""",
          'defined-type': "tunnels:bridge-domain-id-range-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Remove bridge domains to the EVPN Instance.', u'alt-name': u'remove', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)""",
        })

    self.__bd_range_remove = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bd_range_remove(self):
    self.__bd_range_remove = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9]+(-[0-9]+)?(,[0-9]+(-[0-9]+)?)*'}), is_leaf=True, yang_name="bd-range-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Remove bridge domains to the EVPN Instance.', u'alt-name': u'remove', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='tunnels:bridge-domain-id-range-type', is_config=True)

  bd_range_add = __builtin__.property(_get_bd_range_add, _set_bd_range_add)
  bd_range_remove = __builtin__.property(_get_bd_range_remove, _set_bd_range_remove)


  _pyangbind_elements = {'bd_range_add': bd_range_add, 'bd_range_remove': bd_range_remove, }


