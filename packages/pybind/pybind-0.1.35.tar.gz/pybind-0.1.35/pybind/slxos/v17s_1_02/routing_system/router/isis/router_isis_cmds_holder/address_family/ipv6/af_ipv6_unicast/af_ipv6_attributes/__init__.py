
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import summary_prefix
import ipv6_default_link_metric
import multi_topology
import spf6_interval
import partial6_spf_interval
import af_common_attributes
class af_ipv6_attributes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/router/isis/router-isis-cmds-holder/address-family/ipv6/af-ipv6-unicast/af-ipv6-attributes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__disable_adjacency_check','__summary_prefix','__ipv6_default_link_metric','__multi_topology','__spf6_interval','__partial6_spf_interval','__af_common_attributes',)

  _yang_name = 'af-ipv6-attributes'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__partial6_spf_interval = YANGDynClass(base=partial6_spf_interval.partial6_spf_interval, is_container='container', presence=False, yang_name="partial6-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None, u'alt-name': u'partial-spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__disable_adjacency_check = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-adjacency-check", rest_name="disable-adjacency-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable IPv6 Support consistency check', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__ipv6_default_link_metric = YANGDynClass(base=ipv6_default_link_metric.ipv6_default_link_metric, is_container='container', presence=False, yang_name="ipv6-default-link-metric", rest_name="default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Default Link Metric', u'alt-name': u'default-link-metric', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__af_common_attributes = YANGDynClass(base=af_common_attributes.af_common_attributes, is_container='container', presence=False, yang_name="af-common-attributes", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__spf6_interval = YANGDynClass(base=YANGListType("spf6_interval_level",spf6_interval.spf6_interval, yang_name="spf6-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf6-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}), is_container='list', yang_name="spf6-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__summary_prefix = YANGDynClass(base=YANGListType("summary_prefix_ipv6",summary_prefix.summary_prefix, yang_name="summary-prefix", rest_name="summary-prefix", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary-prefix-ipv6', extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="summary-prefix", rest_name="summary-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__multi_topology = YANGDynClass(base=multi_topology.multi_topology, is_container='container', presence=True, yang_name="multi-topology", rest_name="multi-topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable ISIS multi-topology extension for this address family'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'router', u'isis', u'router-isis-cmds-holder', u'address-family', u'ipv6', u'af-ipv6-unicast', u'af-ipv6-attributes']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'isis', u'address-family', u'ipv6', u'unicast']

  def _get_disable_adjacency_check(self):
    """
    Getter method for disable_adjacency_check, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/disable_adjacency_check (empty)
    """
    return self.__disable_adjacency_check
      
  def _set_disable_adjacency_check(self, v, load=False):
    """
    Setter method for disable_adjacency_check, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/disable_adjacency_check (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disable_adjacency_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disable_adjacency_check() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="disable-adjacency-check", rest_name="disable-adjacency-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable IPv6 Support consistency check', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disable_adjacency_check must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-adjacency-check", rest_name="disable-adjacency-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable IPv6 Support consistency check', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__disable_adjacency_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disable_adjacency_check(self):
    self.__disable_adjacency_check = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-adjacency-check", rest_name="disable-adjacency-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable IPv6 Support consistency check', u'cli-full-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_summary_prefix(self):
    """
    Getter method for summary_prefix, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/summary_prefix (list)
    """
    return self.__summary_prefix
      
  def _set_summary_prefix(self, v, load=False):
    """
    Setter method for summary_prefix, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/summary_prefix (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_prefix() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("summary_prefix_ipv6",summary_prefix.summary_prefix, yang_name="summary-prefix", rest_name="summary-prefix", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary-prefix-ipv6', extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="summary-prefix", rest_name="summary-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_prefix must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("summary_prefix_ipv6",summary_prefix.summary_prefix, yang_name="summary-prefix", rest_name="summary-prefix", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary-prefix-ipv6', extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="summary-prefix", rest_name="summary-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__summary_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_prefix(self):
    self.__summary_prefix = YANGDynClass(base=YANGListType("summary_prefix_ipv6",summary_prefix.summary_prefix, yang_name="summary-prefix", rest_name="summary-prefix", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='summary-prefix-ipv6', extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="summary-prefix", rest_name="summary-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Integrated IS-IS address summaries', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'callpoint': u'IsisAfIpv6UcastSummaryAddress', u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_ipv6_default_link_metric(self):
    """
    Getter method for ipv6_default_link_metric, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/ipv6_default_link_metric (container)
    """
    return self.__ipv6_default_link_metric
      
  def _set_ipv6_default_link_metric(self, v, load=False):
    """
    Setter method for ipv6_default_link_metric, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/ipv6_default_link_metric (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ipv6_default_link_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ipv6_default_link_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=ipv6_default_link_metric.ipv6_default_link_metric, is_container='container', presence=False, yang_name="ipv6-default-link-metric", rest_name="default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Default Link Metric', u'alt-name': u'default-link-metric', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ipv6_default_link_metric must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=ipv6_default_link_metric.ipv6_default_link_metric, is_container='container', presence=False, yang_name="ipv6-default-link-metric", rest_name="default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Default Link Metric', u'alt-name': u'default-link-metric', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__ipv6_default_link_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ipv6_default_link_metric(self):
    self.__ipv6_default_link_metric = YANGDynClass(base=ipv6_default_link_metric.ipv6_default_link_metric, is_container='container', presence=False, yang_name="ipv6-default-link-metric", rest_name="default-link-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Default Link Metric', u'alt-name': u'default-link-metric', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_multi_topology(self):
    """
    Getter method for multi_topology, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/multi_topology (container)
    """
    return self.__multi_topology
      
  def _set_multi_topology(self, v, load=False):
    """
    Setter method for multi_topology, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/multi_topology (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_multi_topology is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_multi_topology() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=multi_topology.multi_topology, is_container='container', presence=True, yang_name="multi-topology", rest_name="multi-topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable ISIS multi-topology extension for this address family'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """multi_topology must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=multi_topology.multi_topology, is_container='container', presence=True, yang_name="multi-topology", rest_name="multi-topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable ISIS multi-topology extension for this address family'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__multi_topology = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_multi_topology(self):
    self.__multi_topology = YANGDynClass(base=multi_topology.multi_topology, is_container='container', presence=True, yang_name="multi-topology", rest_name="multi-topology", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/disable ISIS multi-topology extension for this address family'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_spf6_interval(self):
    """
    Getter method for spf6_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/spf6_interval (list)
    """
    return self.__spf6_interval
      
  def _set_spf6_interval(self, v, load=False):
    """
    Setter method for spf6_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/spf6_interval (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("spf6_interval_level",spf6_interval.spf6_interval, yang_name="spf6-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf6-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}), is_container='list', yang_name="spf6-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_interval must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("spf6_interval_level",spf6_interval.spf6_interval, yang_name="spf6-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf6-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}), is_container='list', yang_name="spf6-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__spf6_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_interval(self):
    self.__spf6_interval = YANGDynClass(base=YANGListType("spf6_interval_level",spf6_interval.spf6_interval, yang_name="spf6-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf6-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}), is_container='list', yang_name="spf6-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-full-no': None, u'callpoint': u'IsisSpf6Interval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-mode': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_partial6_spf_interval(self):
    """
    Getter method for partial6_spf_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/partial6_spf_interval (container)
    """
    return self.__partial6_spf_interval
      
  def _set_partial6_spf_interval(self, v, load=False):
    """
    Setter method for partial6_spf_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/partial6_spf_interval (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partial6_spf_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partial6_spf_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=partial6_spf_interval.partial6_spf_interval, is_container='container', presence=False, yang_name="partial6-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None, u'alt-name': u'partial-spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partial6_spf_interval must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=partial6_spf_interval.partial6_spf_interval, is_container='container', presence=False, yang_name="partial6-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None, u'alt-name': u'partial-spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__partial6_spf_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partial6_spf_interval(self):
    self.__partial6_spf_interval = YANGDynClass(base=partial6_spf_interval.partial6_spf_interval, is_container='container', presence=False, yang_name="partial6-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None, u'alt-name': u'partial-spf-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_af_common_attributes(self):
    """
    Getter method for af_common_attributes, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/af_common_attributes (container)
    """
    return self.__af_common_attributes
      
  def _set_af_common_attributes(self, v, load=False):
    """
    Setter method for af_common_attributes, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/address_family/ipv6/af_ipv6_unicast/af_ipv6_attributes/af_common_attributes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_af_common_attributes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_af_common_attributes() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=af_common_attributes.af_common_attributes, is_container='container', presence=False, yang_name="af-common-attributes", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """af_common_attributes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=af_common_attributes.af_common_attributes, is_container='container', presence=False, yang_name="af-common-attributes", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__af_common_attributes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_af_common_attributes(self):
    self.__af_common_attributes = YANGDynClass(base=af_common_attributes.af_common_attributes, is_container='container', presence=False, yang_name="af-common-attributes", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)

  disable_adjacency_check = __builtin__.property(_get_disable_adjacency_check, _set_disable_adjacency_check)
  summary_prefix = __builtin__.property(_get_summary_prefix, _set_summary_prefix)
  ipv6_default_link_metric = __builtin__.property(_get_ipv6_default_link_metric, _set_ipv6_default_link_metric)
  multi_topology = __builtin__.property(_get_multi_topology, _set_multi_topology)
  spf6_interval = __builtin__.property(_get_spf6_interval, _set_spf6_interval)
  partial6_spf_interval = __builtin__.property(_get_partial6_spf_interval, _set_partial6_spf_interval)
  af_common_attributes = __builtin__.property(_get_af_common_attributes, _set_af_common_attributes)


  _pyangbind_elements = {'disable_adjacency_check': disable_adjacency_check, 'summary_prefix': summary_prefix, 'ipv6_default_link_metric': ipv6_default_link_metric, 'multi_topology': multi_topology, 'spf6_interval': spf6_interval, 'partial6_spf_interval': partial6_spf_interval, 'af_common_attributes': af_common_attributes, }


