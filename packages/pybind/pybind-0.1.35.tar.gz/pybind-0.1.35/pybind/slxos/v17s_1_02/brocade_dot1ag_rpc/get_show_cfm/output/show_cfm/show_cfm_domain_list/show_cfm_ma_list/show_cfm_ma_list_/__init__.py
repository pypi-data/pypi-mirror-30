
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_cfm_ma_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag - based on the path /brocade_dot1ag_rpc/get-show-cfm/output/show-cfm/show-cfm-domain-list/show-cfm-ma-list/show-cfm-ma-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__show_cfm_mep_id','__show_cfm_vlan_id','__show_cfm_mep_direction','__show_cfm_mac','__show_cfm_port','__show_cfm_statusTlv',)

  _yang_name = 'show-cfm-ma-list'
  _rest_name = 'show-cfm-ma-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__show_cfm_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-port", rest_name="show-cfm-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    self.__show_cfm_vlan_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-vlan-id", rest_name="show-cfm-vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)
    self.__show_cfm_mep_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-id", rest_name="show-cfm-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)
    self.__show_cfm_statusTlv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="show-cfm-statusTlv", rest_name="show-cfm-statusTlv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    self.__show_cfm_mac = YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-mac", rest_name="show-cfm-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    self.__show_cfm_mep_direction = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-direction", rest_name="show-cfm-mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_dot1ag_rpc', u'get-show-cfm', u'output', u'show-cfm', u'show-cfm-domain-list', u'show-cfm-ma-list', u'show-cfm-ma-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-show-cfm', u'output', u'show-cfm', u'show-cfm-domain-list', u'show-cfm-ma-list', u'show-cfm-ma-list']

  def _get_show_cfm_mep_id(self):
    """
    Getter method for show_cfm_mep_id, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_mep_id (uint16)
    """
    return self.__show_cfm_mep_id
      
  def _set_show_cfm_mep_id(self, v, load=False):
    """
    Setter method for show_cfm_mep_id, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_mep_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_mep_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_mep_id() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-id", rest_name="show-cfm-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_mep_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-id", rest_name="show-cfm-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)""",
        })

    self.__show_cfm_mep_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_mep_id(self):
    self.__show_cfm_mep_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-id", rest_name="show-cfm-mep-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)


  def _get_show_cfm_vlan_id(self):
    """
    Getter method for show_cfm_vlan_id, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_vlan_id (uint16)
    """
    return self.__show_cfm_vlan_id
      
  def _set_show_cfm_vlan_id(self, v, load=False):
    """
    Setter method for show_cfm_vlan_id, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_vlan_id (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_vlan_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_vlan_id() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-vlan-id", rest_name="show-cfm-vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_vlan_id must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-vlan-id", rest_name="show-cfm-vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)""",
        })

    self.__show_cfm_vlan_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_vlan_id(self):
    self.__show_cfm_vlan_id = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-vlan-id", rest_name="show-cfm-vlan-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)


  def _get_show_cfm_mep_direction(self):
    """
    Getter method for show_cfm_mep_direction, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_mep_direction (uint16)
    """
    return self.__show_cfm_mep_direction
      
  def _set_show_cfm_mep_direction(self, v, load=False):
    """
    Setter method for show_cfm_mep_direction, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_mep_direction (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_mep_direction is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_mep_direction() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-direction", rest_name="show-cfm-mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_mep_direction must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-direction", rest_name="show-cfm-mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)""",
        })

    self.__show_cfm_mep_direction = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_mep_direction(self):
    self.__show_cfm_mep_direction = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="show-cfm-mep-direction", rest_name="show-cfm-mep-direction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint16', is_config=True)


  def _get_show_cfm_mac(self):
    """
    Getter method for show_cfm_mac, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_mac (string)
    """
    return self.__show_cfm_mac
      
  def _set_show_cfm_mac(self, v, load=False):
    """
    Setter method for show_cfm_mac, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_mac (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_mac() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="show-cfm-mac", rest_name="show-cfm-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_mac must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-mac", rest_name="show-cfm-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)""",
        })

    self.__show_cfm_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_mac(self):
    self.__show_cfm_mac = YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-mac", rest_name="show-cfm-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)


  def _get_show_cfm_port(self):
    """
    Getter method for show_cfm_port, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_port (string)
    """
    return self.__show_cfm_port
      
  def _set_show_cfm_port(self, v, load=False):
    """
    Setter method for show_cfm_port, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_port (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_port() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="show-cfm-port", rest_name="show-cfm-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_port must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-port", rest_name="show-cfm-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)""",
        })

    self.__show_cfm_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_port(self):
    self.__show_cfm_port = YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-port", rest_name="show-cfm-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)


  def _get_show_cfm_statusTlv(self):
    """
    Getter method for show_cfm_statusTlv, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_statusTlv (uint32)
    """
    return self.__show_cfm_statusTlv
      
  def _set_show_cfm_statusTlv(self, v, load=False):
    """
    Setter method for show_cfm_statusTlv, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list/show_cfm_ma_list/show_cfm_statusTlv (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_statusTlv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_statusTlv() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="show-cfm-statusTlv", rest_name="show-cfm-statusTlv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_statusTlv must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="show-cfm-statusTlv", rest_name="show-cfm-statusTlv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__show_cfm_statusTlv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_statusTlv(self):
    self.__show_cfm_statusTlv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="show-cfm-statusTlv", rest_name="show-cfm-statusTlv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)

  show_cfm_mep_id = __builtin__.property(_get_show_cfm_mep_id, _set_show_cfm_mep_id)
  show_cfm_vlan_id = __builtin__.property(_get_show_cfm_vlan_id, _set_show_cfm_vlan_id)
  show_cfm_mep_direction = __builtin__.property(_get_show_cfm_mep_direction, _set_show_cfm_mep_direction)
  show_cfm_mac = __builtin__.property(_get_show_cfm_mac, _set_show_cfm_mac)
  show_cfm_port = __builtin__.property(_get_show_cfm_port, _set_show_cfm_port)
  show_cfm_statusTlv = __builtin__.property(_get_show_cfm_statusTlv, _set_show_cfm_statusTlv)


  _pyangbind_elements = {'show_cfm_mep_id': show_cfm_mep_id, 'show_cfm_vlan_id': show_cfm_vlan_id, 'show_cfm_mep_direction': show_cfm_mep_direction, 'show_cfm_mac': show_cfm_mac, 'show_cfm_port': show_cfm_port, 'show_cfm_statusTlv': show_cfm_statusTlv, }


