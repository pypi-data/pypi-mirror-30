
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import show_cfm_ma_list
class show_cfm_domain_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag - based on the path /brocade_dot1ag_rpc/get-show-cfm/output/show-cfm/show-cfm-domain-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__show_cfm_md_name','__show_cfm_md_idx','__show_cfm_md_level','__show_cfm_ma_list',)

  _yang_name = 'show-cfm-domain-list'
  _rest_name = 'show-cfm-domain-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__show_cfm_md_level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-level", rest_name="show-cfm-md-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)
    self.__show_cfm_ma_list = YANGDynClass(base=YANGListType(False,show_cfm_ma_list.show_cfm_ma_list, yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)
    self.__show_cfm_md_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-md-name", rest_name="show-cfm-md-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    self.__show_cfm_md_idx = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-idx", rest_name="show-cfm-md-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_dot1ag_rpc', u'get-show-cfm', u'output', u'show-cfm', u'show-cfm-domain-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-show-cfm', u'output', u'show-cfm', u'show-cfm-domain-list']

  def _get_show_cfm_md_name(self):
    """
    Getter method for show_cfm_md_name, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_md_name (string)
    """
    return self.__show_cfm_md_name
      
  def _set_show_cfm_md_name(self, v, load=False):
    """
    Setter method for show_cfm_md_name, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_md_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_md_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_md_name() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="show-cfm-md-name", rest_name="show-cfm-md-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_md_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-md-name", rest_name="show-cfm-md-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)""",
        })

    self.__show_cfm_md_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_md_name(self):
    self.__show_cfm_md_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="show-cfm-md-name", rest_name="show-cfm-md-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)


  def _get_show_cfm_md_idx(self):
    """
    Getter method for show_cfm_md_idx, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_md_idx (uint8)
    """
    return self.__show_cfm_md_idx
      
  def _set_show_cfm_md_idx(self, v, load=False):
    """
    Setter method for show_cfm_md_idx, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_md_idx (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_md_idx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_md_idx() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-idx", rest_name="show-cfm-md-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_md_idx must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-idx", rest_name="show-cfm-md-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)""",
        })

    self.__show_cfm_md_idx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_md_idx(self):
    self.__show_cfm_md_idx = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-idx", rest_name="show-cfm-md-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)


  def _get_show_cfm_md_level(self):
    """
    Getter method for show_cfm_md_level, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_md_level (uint8)
    """
    return self.__show_cfm_md_level
      
  def _set_show_cfm_md_level(self, v, load=False):
    """
    Setter method for show_cfm_md_level, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_md_level (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_md_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_md_level() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-level", rest_name="show-cfm-md-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_md_level must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-level", rest_name="show-cfm-md-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)""",
        })

    self.__show_cfm_md_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_md_level(self):
    self.__show_cfm_md_level = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="show-cfm-md-level", rest_name="show-cfm-md-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint8', is_config=True)


  def _get_show_cfm_ma_list(self):
    """
    Getter method for show_cfm_ma_list, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list (list)
    """
    return self.__show_cfm_ma_list
      
  def _set_show_cfm_ma_list(self, v, load=False):
    """
    Setter method for show_cfm_ma_list, mapped from YANG variable /brocade_dot1ag_rpc/get_show_cfm/output/show_cfm/show_cfm_domain_list/show_cfm_ma_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_show_cfm_ma_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_show_cfm_ma_list() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,show_cfm_ma_list.show_cfm_ma_list, yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """show_cfm_ma_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,show_cfm_ma_list.show_cfm_ma_list, yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)""",
        })

    self.__show_cfm_ma_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_show_cfm_ma_list(self):
    self.__show_cfm_ma_list = YANGDynClass(base=YANGListType(False,show_cfm_ma_list.show_cfm_ma_list, yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="show-cfm-ma-list", rest_name="show-cfm-ma-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)

  show_cfm_md_name = __builtin__.property(_get_show_cfm_md_name, _set_show_cfm_md_name)
  show_cfm_md_idx = __builtin__.property(_get_show_cfm_md_idx, _set_show_cfm_md_idx)
  show_cfm_md_level = __builtin__.property(_get_show_cfm_md_level, _set_show_cfm_md_level)
  show_cfm_ma_list = __builtin__.property(_get_show_cfm_ma_list, _set_show_cfm_ma_list)


  _pyangbind_elements = {'show_cfm_md_name': show_cfm_md_name, 'show_cfm_md_idx': show_cfm_md_idx, 'show_cfm_md_level': show_cfm_md_level, 'show_cfm_ma_list': show_cfm_ma_list, }


