
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import pim_oif
class pim_mcache_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-pim-operational - based on the path /pim-mcache-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: mcache table
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__vrf_name','__tot_entry_count','__src_addr','__grp_addr','__incoming_if','__rp_addr','__uptime','__flag_bmp','__is_w_g','__spt','__rpt','__reg','__regsupp','__regprobe','__lsrc','__lrcv','__sp_mode','__ssm_mode','__need_rte','__rpf_info','__age_mask','__kat','__join_desired','__pim_oif',)

  _yang_name = 'pim-mcache-state'
  _rest_name = 'pim-mcache-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__regprobe = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regprobe", rest_name="regprobe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__incoming_if = YANGDynClass(base=unicode, is_leaf=True, yang_name="incoming-if", rest_name="incoming-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    self.__rp_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-addr", rest_name="rp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__need_rte = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="need-rte", rest_name="need-rte", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__spt = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="spt", rest_name="spt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__age_mask = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="age-mask", rest_name="age-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    self.__rpt = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rpt", rest_name="rpt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__uptime = YANGDynClass(base=unicode, is_leaf=True, yang_name="uptime", rest_name="uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    self.__src_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__pim_oif = YANGDynClass(base=YANGListType("oif_name",pim_oif.pim_oif, yang_name="pim-oif", rest_name="pim-oif", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='oif-name', extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-oif", rest_name="pim-oif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='list', is_config=False)
    self.__grp_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="grp-addr", rest_name="grp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__ssm_mode = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ssm-mode", rest_name="ssm-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__reg = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="reg", rest_name="reg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__sp_mode = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="sp-mode", rest_name="sp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__join_desired = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="join-desired", rest_name="join-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='boolean', is_config=False)
    self.__is_w_g = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="is-w-g", rest_name="is-w-g", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__kat = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="kat", rest_name="kat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    self.__regsupp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regsupp", rest_name="regsupp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__tot_entry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tot-entry-count", rest_name="tot-entry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    self.__lsrc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsrc", rest_name="lsrc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__rpf_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="rpf-info", rest_name="rpf-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    self.__flag_bmp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flag-bmp", rest_name="flag-bmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    self.__lrcv = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lrcv", rest_name="lrcv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    self.__vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", rest_name="vrf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'pim-mcache-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'pim-mcache-state']

  def _get_vrf_name(self):
    """
    Getter method for vrf_name, mapped from YANG variable /pim_mcache_state/vrf_name (string)

    YANG Description: vrf name
    """
    return self.__vrf_name
      
  def _set_vrf_name(self, v, load=False):
    """
    Setter method for vrf_name, mapped from YANG variable /pim_mcache_state/vrf_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vrf_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vrf_name() directly.

    YANG Description: vrf name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vrf-name", rest_name="vrf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vrf_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", rest_name="vrf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)""",
        })

    self.__vrf_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vrf_name(self):
    self.__vrf_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="vrf-name", rest_name="vrf-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)


  def _get_tot_entry_count(self):
    """
    Getter method for tot_entry_count, mapped from YANG variable /pim_mcache_state/tot_entry_count (uint32)

    YANG Description: Total mcache entry count
    """
    return self.__tot_entry_count
      
  def _set_tot_entry_count(self, v, load=False):
    """
    Setter method for tot_entry_count, mapped from YANG variable /pim_mcache_state/tot_entry_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tot_entry_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tot_entry_count() directly.

    YANG Description: Total mcache entry count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tot-entry-count", rest_name="tot-entry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tot_entry_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tot-entry-count", rest_name="tot-entry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tot_entry_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tot_entry_count(self):
    self.__tot_entry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tot-entry-count", rest_name="tot-entry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)


  def _get_src_addr(self):
    """
    Getter method for src_addr, mapped from YANG variable /pim_mcache_state/src_addr (inet:ipv4-address)

    YANG Description: Source address
    """
    return self.__src_addr
      
  def _set_src_addr(self, v, load=False):
    """
    Setter method for src_addr, mapped from YANG variable /pim_mcache_state/src_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_addr() directly.

    YANG Description: Source address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__src_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_addr(self):
    self.__src_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-addr", rest_name="src-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_grp_addr(self):
    """
    Getter method for grp_addr, mapped from YANG variable /pim_mcache_state/grp_addr (inet:ipv4-address)

    YANG Description: Group Address
    """
    return self.__grp_addr
      
  def _set_grp_addr(self, v, load=False):
    """
    Setter method for grp_addr, mapped from YANG variable /pim_mcache_state/grp_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_grp_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_grp_addr() directly.

    YANG Description: Group Address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="grp-addr", rest_name="grp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """grp_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="grp-addr", rest_name="grp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__grp_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_grp_addr(self):
    self.__grp_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="grp-addr", rest_name="grp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_incoming_if(self):
    """
    Getter method for incoming_if, mapped from YANG variable /pim_mcache_state/incoming_if (string)

    YANG Description: ingress interface for S,G
    """
    return self.__incoming_if
      
  def _set_incoming_if(self, v, load=False):
    """
    Setter method for incoming_if, mapped from YANG variable /pim_mcache_state/incoming_if (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_incoming_if is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_incoming_if() directly.

    YANG Description: ingress interface for S,G
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="incoming-if", rest_name="incoming-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """incoming_if must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="incoming-if", rest_name="incoming-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)""",
        })

    self.__incoming_if = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_incoming_if(self):
    self.__incoming_if = YANGDynClass(base=unicode, is_leaf=True, yang_name="incoming-if", rest_name="incoming-if", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)


  def _get_rp_addr(self):
    """
    Getter method for rp_addr, mapped from YANG variable /pim_mcache_state/rp_addr (inet:ipv4-address)

    YANG Description: RP Address
    """
    return self.__rp_addr
      
  def _set_rp_addr(self, v, load=False):
    """
    Setter method for rp_addr, mapped from YANG variable /pim_mcache_state/rp_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rp_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rp_addr() directly.

    YANG Description: RP Address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-addr", rest_name="rp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rp_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-addr", rest_name="rp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__rp_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rp_addr(self):
    self.__rp_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-addr", rest_name="rp-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_uptime(self):
    """
    Getter method for uptime, mapped from YANG variable /pim_mcache_state/uptime (string)

    YANG Description: Entry up time
    """
    return self.__uptime
      
  def _set_uptime(self, v, load=False):
    """
    Setter method for uptime, mapped from YANG variable /pim_mcache_state/uptime (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_uptime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_uptime() directly.

    YANG Description: Entry up time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="uptime", rest_name="uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """uptime must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="uptime", rest_name="uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)""",
        })

    self.__uptime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_uptime(self):
    self.__uptime = YANGDynClass(base=unicode, is_leaf=True, yang_name="uptime", rest_name="uptime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)


  def _get_flag_bmp(self):
    """
    Getter method for flag_bmp, mapped from YANG variable /pim_mcache_state/flag_bmp (uint32)

    YANG Description: flag bmp
    """
    return self.__flag_bmp
      
  def _set_flag_bmp(self, v, load=False):
    """
    Setter method for flag_bmp, mapped from YANG variable /pim_mcache_state/flag_bmp (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flag_bmp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flag_bmp() directly.

    YANG Description: flag bmp
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flag-bmp", rest_name="flag-bmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flag_bmp must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flag-bmp", rest_name="flag-bmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)""",
        })

    self.__flag_bmp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flag_bmp(self):
    self.__flag_bmp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flag-bmp", rest_name="flag-bmp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)


  def _get_is_w_g(self):
    """
    Getter method for is_w_g, mapped from YANG variable /pim_mcache_state/is_w_g (uint8)

    YANG Description: Is the entry *,G type
    """
    return self.__is_w_g
      
  def _set_is_w_g(self, v, load=False):
    """
    Setter method for is_w_g, mapped from YANG variable /pim_mcache_state/is_w_g (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_w_g is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_w_g() directly.

    YANG Description: Is the entry *,G type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="is-w-g", rest_name="is-w-g", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_w_g must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="is-w-g", rest_name="is-w-g", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__is_w_g = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_w_g(self):
    self.__is_w_g = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="is-w-g", rest_name="is-w-g", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_spt(self):
    """
    Getter method for spt, mapped from YANG variable /pim_mcache_state/spt (uint8)

    YANG Description: RPT bit status
    """
    return self.__spt
      
  def _set_spt(self, v, load=False):
    """
    Setter method for spt, mapped from YANG variable /pim_mcache_state/spt (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spt() directly.

    YANG Description: RPT bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="spt", rest_name="spt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spt must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="spt", rest_name="spt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__spt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spt(self):
    self.__spt = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="spt", rest_name="spt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_rpt(self):
    """
    Getter method for rpt, mapped from YANG variable /pim_mcache_state/rpt (uint8)

    YANG Description: SPT bit status
    """
    return self.__rpt
      
  def _set_rpt(self, v, load=False):
    """
    Setter method for rpt, mapped from YANG variable /pim_mcache_state/rpt (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rpt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rpt() directly.

    YANG Description: SPT bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rpt", rest_name="rpt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rpt must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rpt", rest_name="rpt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__rpt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rpt(self):
    self.__rpt = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="rpt", rest_name="rpt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_reg(self):
    """
    Getter method for reg, mapped from YANG variable /pim_mcache_state/reg (uint8)

    YANG Description: Reg bit status
    """
    return self.__reg
      
  def _set_reg(self, v, load=False):
    """
    Setter method for reg, mapped from YANG variable /pim_mcache_state/reg (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reg() directly.

    YANG Description: Reg bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="reg", rest_name="reg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reg must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="reg", rest_name="reg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__reg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reg(self):
    self.__reg = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="reg", rest_name="reg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_regsupp(self):
    """
    Getter method for regsupp, mapped from YANG variable /pim_mcache_state/regsupp (uint8)

    YANG Description: RegSupp bit status
    """
    return self.__regsupp
      
  def _set_regsupp(self, v, load=False):
    """
    Setter method for regsupp, mapped from YANG variable /pim_mcache_state/regsupp (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_regsupp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_regsupp() directly.

    YANG Description: RegSupp bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regsupp", rest_name="regsupp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """regsupp must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regsupp", rest_name="regsupp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__regsupp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_regsupp(self):
    self.__regsupp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regsupp", rest_name="regsupp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_regprobe(self):
    """
    Getter method for regprobe, mapped from YANG variable /pim_mcache_state/regprobe (uint8)

    YANG Description: RegProbe bit status
    """
    return self.__regprobe
      
  def _set_regprobe(self, v, load=False):
    """
    Setter method for regprobe, mapped from YANG variable /pim_mcache_state/regprobe (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_regprobe is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_regprobe() directly.

    YANG Description: RegProbe bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regprobe", rest_name="regprobe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """regprobe must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regprobe", rest_name="regprobe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__regprobe = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_regprobe(self):
    self.__regprobe = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="regprobe", rest_name="regprobe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_lsrc(self):
    """
    Getter method for lsrc, mapped from YANG variable /pim_mcache_state/lsrc (uint8)

    YANG Description: Is Source Local bit status
    """
    return self.__lsrc
      
  def _set_lsrc(self, v, load=False):
    """
    Setter method for lsrc, mapped from YANG variable /pim_mcache_state/lsrc (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsrc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsrc() directly.

    YANG Description: Is Source Local bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsrc", rest_name="lsrc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsrc must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsrc", rest_name="lsrc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__lsrc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsrc(self):
    self.__lsrc = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsrc", rest_name="lsrc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_lrcv(self):
    """
    Getter method for lrcv, mapped from YANG variable /pim_mcache_state/lrcv (uint8)

    YANG Description: Is Reciver Local bit status
    """
    return self.__lrcv
      
  def _set_lrcv(self, v, load=False):
    """
    Setter method for lrcv, mapped from YANG variable /pim_mcache_state/lrcv (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lrcv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lrcv() directly.

    YANG Description: Is Reciver Local bit status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lrcv", rest_name="lrcv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lrcv must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lrcv", rest_name="lrcv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__lrcv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lrcv(self):
    self.__lrcv = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lrcv", rest_name="lrcv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_sp_mode(self):
    """
    Getter method for sp_mode, mapped from YANG variable /pim_mcache_state/sp_mode (uint8)

    YANG Description: sparse mode flag
    """
    return self.__sp_mode
      
  def _set_sp_mode(self, v, load=False):
    """
    Setter method for sp_mode, mapped from YANG variable /pim_mcache_state/sp_mode (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sp_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sp_mode() directly.

    YANG Description: sparse mode flag
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="sp-mode", rest_name="sp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sp_mode must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="sp-mode", rest_name="sp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__sp_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sp_mode(self):
    self.__sp_mode = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="sp-mode", rest_name="sp-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_ssm_mode(self):
    """
    Getter method for ssm_mode, mapped from YANG variable /pim_mcache_state/ssm_mode (uint8)

    YANG Description: ssm mode flag
    """
    return self.__ssm_mode
      
  def _set_ssm_mode(self, v, load=False):
    """
    Setter method for ssm_mode, mapped from YANG variable /pim_mcache_state/ssm_mode (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ssm_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ssm_mode() directly.

    YANG Description: ssm mode flag
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ssm-mode", rest_name="ssm-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ssm_mode must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ssm-mode", rest_name="ssm-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__ssm_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ssm_mode(self):
    self.__ssm_mode = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="ssm-mode", rest_name="ssm-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_need_rte(self):
    """
    Getter method for need_rte, mapped from YANG variable /pim_mcache_state/need_rte (uint8)

    YANG Description: need_rte flag
    """
    return self.__need_rte
      
  def _set_need_rte(self, v, load=False):
    """
    Setter method for need_rte, mapped from YANG variable /pim_mcache_state/need_rte (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_need_rte is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_need_rte() directly.

    YANG Description: need_rte flag
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="need-rte", rest_name="need-rte", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """need_rte must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="need-rte", rest_name="need-rte", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)""",
        })

    self.__need_rte = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_need_rte(self):
    self.__need_rte = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="need-rte", rest_name="need-rte", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint8', is_config=False)


  def _get_rpf_info(self):
    """
    Getter method for rpf_info, mapped from YANG variable /pim_mcache_state/rpf_info (string)

    YANG Description: rpf info
    """
    return self.__rpf_info
      
  def _set_rpf_info(self, v, load=False):
    """
    Setter method for rpf_info, mapped from YANG variable /pim_mcache_state/rpf_info (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rpf_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rpf_info() directly.

    YANG Description: rpf info
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="rpf-info", rest_name="rpf-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rpf_info must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="rpf-info", rest_name="rpf-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)""",
        })

    self.__rpf_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rpf_info(self):
    self.__rpf_info = YANGDynClass(base=unicode, is_leaf=True, yang_name="rpf-info", rest_name="rpf-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='string', is_config=False)


  def _get_age_mask(self):
    """
    Getter method for age_mask, mapped from YANG variable /pim_mcache_state/age_mask (uint32)

    YANG Description: Age Mask
    """
    return self.__age_mask
      
  def _set_age_mask(self, v, load=False):
    """
    Setter method for age_mask, mapped from YANG variable /pim_mcache_state/age_mask (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_age_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_age_mask() directly.

    YANG Description: Age Mask
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="age-mask", rest_name="age-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """age_mask must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="age-mask", rest_name="age-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)""",
        })

    self.__age_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_age_mask(self):
    self.__age_mask = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="age-mask", rest_name="age-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)


  def _get_kat(self):
    """
    Getter method for kat, mapped from YANG variable /pim_mcache_state/kat (uint32)

    YANG Description: Keep Alive Timer
    """
    return self.__kat
      
  def _set_kat(self, v, load=False):
    """
    Setter method for kat, mapped from YANG variable /pim_mcache_state/kat (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_kat is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_kat() directly.

    YANG Description: Keep Alive Timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="kat", rest_name="kat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """kat must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="kat", rest_name="kat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)""",
        })

    self.__kat = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_kat(self):
    self.__kat = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="kat", rest_name="kat", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='uint32', is_config=False)


  def _get_join_desired(self):
    """
    Getter method for join_desired, mapped from YANG variable /pim_mcache_state/join_desired (boolean)

    YANG Description: Upstream Join desired state
    """
    return self.__join_desired
      
  def _set_join_desired(self, v, load=False):
    """
    Setter method for join_desired, mapped from YANG variable /pim_mcache_state/join_desired (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_join_desired is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_join_desired() directly.

    YANG Description: Upstream Join desired state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="join-desired", rest_name="join-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """join_desired must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="join-desired", rest_name="join-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='boolean', is_config=False)""",
        })

    self.__join_desired = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_join_desired(self):
    self.__join_desired = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="join-desired", rest_name="join-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='boolean', is_config=False)


  def _get_pim_oif(self):
    """
    Getter method for pim_oif, mapped from YANG variable /pim_mcache_state/pim_oif (list)

    YANG Description: OIF information
    """
    return self.__pim_oif
      
  def _set_pim_oif(self, v, load=False):
    """
    Setter method for pim_oif, mapped from YANG variable /pim_mcache_state/pim_oif (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pim_oif is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pim_oif() directly.

    YANG Description: OIF information
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("oif_name",pim_oif.pim_oif, yang_name="pim-oif", rest_name="pim-oif", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='oif-name', extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-oif", rest_name="pim-oif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pim_oif must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("oif_name",pim_oif.pim_oif, yang_name="pim-oif", rest_name="pim-oif", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='oif-name', extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-oif", rest_name="pim-oif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='list', is_config=False)""",
        })

    self.__pim_oif = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pim_oif(self):
    self.__pim_oif = YANGDynClass(base=YANGListType("oif_name",pim_oif.pim_oif, yang_name="pim-oif", rest_name="pim-oif", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='oif-name', extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pim-oif", rest_name="pim-oif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pim-oif', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pim-operational', defining_module='brocade-pim-operational', yang_type='list', is_config=False)

  vrf_name = __builtin__.property(_get_vrf_name)
  tot_entry_count = __builtin__.property(_get_tot_entry_count)
  src_addr = __builtin__.property(_get_src_addr)
  grp_addr = __builtin__.property(_get_grp_addr)
  incoming_if = __builtin__.property(_get_incoming_if)
  rp_addr = __builtin__.property(_get_rp_addr)
  uptime = __builtin__.property(_get_uptime)
  flag_bmp = __builtin__.property(_get_flag_bmp)
  is_w_g = __builtin__.property(_get_is_w_g)
  spt = __builtin__.property(_get_spt)
  rpt = __builtin__.property(_get_rpt)
  reg = __builtin__.property(_get_reg)
  regsupp = __builtin__.property(_get_regsupp)
  regprobe = __builtin__.property(_get_regprobe)
  lsrc = __builtin__.property(_get_lsrc)
  lrcv = __builtin__.property(_get_lrcv)
  sp_mode = __builtin__.property(_get_sp_mode)
  ssm_mode = __builtin__.property(_get_ssm_mode)
  need_rte = __builtin__.property(_get_need_rte)
  rpf_info = __builtin__.property(_get_rpf_info)
  age_mask = __builtin__.property(_get_age_mask)
  kat = __builtin__.property(_get_kat)
  join_desired = __builtin__.property(_get_join_desired)
  pim_oif = __builtin__.property(_get_pim_oif)


  _pyangbind_elements = {'vrf_name': vrf_name, 'tot_entry_count': tot_entry_count, 'src_addr': src_addr, 'grp_addr': grp_addr, 'incoming_if': incoming_if, 'rp_addr': rp_addr, 'uptime': uptime, 'flag_bmp': flag_bmp, 'is_w_g': is_w_g, 'spt': spt, 'rpt': rpt, 'reg': reg, 'regsupp': regsupp, 'regprobe': regprobe, 'lsrc': lsrc, 'lrcv': lrcv, 'sp_mode': sp_mode, 'ssm_mode': ssm_mode, 'need_rte': need_rte, 'rpf_info': rpf_info, 'age_mask': age_mask, 'kat': kat, 'join_desired': join_desired, 'pim_oif': pim_oif, }


