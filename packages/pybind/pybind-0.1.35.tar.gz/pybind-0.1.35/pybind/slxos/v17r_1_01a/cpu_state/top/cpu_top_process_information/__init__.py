
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class cpu_top_process_information(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-RAS-operational - based on the path /cpu-state/top/cpu-top-process-information. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  Process information list from the top 
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cpu_process_id','__cpu_process_user','__cpu_process_priority','__cpu_process_ni','__cpu_process_virtual_mem','__cpu_process_resident_mem','__cpu_process_shared_mem','__cpu_process_state','__cpu_process_cpuutil','__cpu_process_memutil','__cpu_process_running_time','__cpu_process_cmd',)

  _yang_name = 'cpu-top-process-information'
  _rest_name = 'cpu-top-process-information'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cpu_process_running_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-running-time", rest_name="cpu-process-running-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)
    self.__cpu_process_priority = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-priority", rest_name="cpu-process-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_user = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-user", rest_name="cpu-process-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_memutil = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-memutil", rest_name="cpu-process-memutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_process_ni = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-ni", rest_name="cpu-process-ni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_cmd = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-cmd", rest_name="cpu-process-cmd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_cpuutil = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-cpuutil", rest_name="cpu-process-cpuutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_process_resident_mem = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-resident-mem", rest_name="cpu-process-resident-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_shared_mem = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-shared-mem", rest_name="cpu-process-shared-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_virtual_mem = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-virtual-mem", rest_name="cpu-process-virtual-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    self.__cpu_process_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-state", rest_name="cpu-process-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cpu-state', u'top', u'cpu-top-process-information']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cpu-state', u'top', u'cpu-top-process-information']

  def _get_cpu_process_id(self):
    """
    Getter method for cpu_process_id, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_id (uint32)

    YANG Description: Process ID
    """
    return self.__cpu_process_id
      
  def _set_cpu_process_id(self, v, load=False):
    """
    Setter method for cpu_process_id, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_id() directly.

    YANG Description: Process ID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)""",
        })

    self.__cpu_process_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_id(self):
    self.__cpu_process_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="cpu-process-id", rest_name="cpu-process-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='uint32', is_config=False)


  def _get_cpu_process_user(self):
    """
    Getter method for cpu_process_user, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_user (string)

    YANG Description: User who runs this process
    """
    return self.__cpu_process_user
      
  def _set_cpu_process_user(self, v, load=False):
    """
    Setter method for cpu_process_user, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_user (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_user() directly.

    YANG Description: User who runs this process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-user", rest_name="cpu-process-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_user must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-user", rest_name="cpu-process-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_user(self):
    self.__cpu_process_user = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-user", rest_name="cpu-process-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_priority(self):
    """
    Getter method for cpu_process_priority, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_priority (string)

    YANG Description: Priority of the process
    """
    return self.__cpu_process_priority
      
  def _set_cpu_process_priority(self, v, load=False):
    """
    Setter method for cpu_process_priority, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_priority (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_priority() directly.

    YANG Description: Priority of the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-priority", rest_name="cpu-process-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_priority must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-priority", rest_name="cpu-process-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_priority(self):
    self.__cpu_process_priority = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-priority", rest_name="cpu-process-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_ni(self):
    """
    Getter method for cpu_process_ni, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_ni (string)

    YANG Description: Nice value of the process
    """
    return self.__cpu_process_ni
      
  def _set_cpu_process_ni(self, v, load=False):
    """
    Setter method for cpu_process_ni, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_ni (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_ni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_ni() directly.

    YANG Description: Nice value of the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-ni", rest_name="cpu-process-ni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_ni must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-ni", rest_name="cpu-process-ni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_ni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_ni(self):
    self.__cpu_process_ni = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-ni", rest_name="cpu-process-ni", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_virtual_mem(self):
    """
    Getter method for cpu_process_virtual_mem, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_virtual_mem (string)

    YANG Description: Virtual memory used by the process
    """
    return self.__cpu_process_virtual_mem
      
  def _set_cpu_process_virtual_mem(self, v, load=False):
    """
    Setter method for cpu_process_virtual_mem, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_virtual_mem (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_virtual_mem is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_virtual_mem() directly.

    YANG Description: Virtual memory used by the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-virtual-mem", rest_name="cpu-process-virtual-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_virtual_mem must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-virtual-mem", rest_name="cpu-process-virtual-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_virtual_mem = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_virtual_mem(self):
    self.__cpu_process_virtual_mem = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-virtual-mem", rest_name="cpu-process-virtual-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_resident_mem(self):
    """
    Getter method for cpu_process_resident_mem, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_resident_mem (string)

    YANG Description: Resident memory used by the process
    """
    return self.__cpu_process_resident_mem
      
  def _set_cpu_process_resident_mem(self, v, load=False):
    """
    Setter method for cpu_process_resident_mem, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_resident_mem (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_resident_mem is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_resident_mem() directly.

    YANG Description: Resident memory used by the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-resident-mem", rest_name="cpu-process-resident-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_resident_mem must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-resident-mem", rest_name="cpu-process-resident-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_resident_mem = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_resident_mem(self):
    self.__cpu_process_resident_mem = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-resident-mem", rest_name="cpu-process-resident-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_shared_mem(self):
    """
    Getter method for cpu_process_shared_mem, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_shared_mem (string)

    YANG Description: Shared memory used by the process
    """
    return self.__cpu_process_shared_mem
      
  def _set_cpu_process_shared_mem(self, v, load=False):
    """
    Setter method for cpu_process_shared_mem, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_shared_mem (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_shared_mem is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_shared_mem() directly.

    YANG Description: Shared memory used by the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-shared-mem", rest_name="cpu-process-shared-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_shared_mem must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-shared-mem", rest_name="cpu-process-shared-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_shared_mem = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_shared_mem(self):
    self.__cpu_process_shared_mem = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-shared-mem", rest_name="cpu-process-shared-mem", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_state(self):
    """
    Getter method for cpu_process_state, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_state (string)

    YANG Description: Process state
    """
    return self.__cpu_process_state
      
  def _set_cpu_process_state(self, v, load=False):
    """
    Setter method for cpu_process_state, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_state() directly.

    YANG Description: Process state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-state", rest_name="cpu-process-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-state", rest_name="cpu-process-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_state(self):
    self.__cpu_process_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-state", rest_name="cpu-process-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_cpuutil(self):
    """
    Getter method for cpu_process_cpuutil, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_cpuutil (decimal64)

    YANG Description: CPU utilization % of the process
    """
    return self.__cpu_process_cpuutil
      
  def _set_cpu_process_cpuutil(self, v, load=False):
    """
    Setter method for cpu_process_cpuutil, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_cpuutil (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_cpuutil is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_cpuutil() directly.

    YANG Description: CPU utilization % of the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-cpuutil", rest_name="cpu-process-cpuutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_cpuutil must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-cpuutil", rest_name="cpu-process-cpuutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_process_cpuutil = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_cpuutil(self):
    self.__cpu_process_cpuutil = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-cpuutil", rest_name="cpu-process-cpuutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_process_memutil(self):
    """
    Getter method for cpu_process_memutil, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_memutil (decimal64)

    YANG Description: Memory utilization % of the process
    """
    return self.__cpu_process_memutil
      
  def _set_cpu_process_memutil(self, v, load=False):
    """
    Setter method for cpu_process_memutil, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_memutil (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_memutil is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_memutil() directly.

    YANG Description: Memory utilization % of the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-memutil", rest_name="cpu-process-memutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_memutil must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-memutil", rest_name="cpu-process-memutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_process_memutil = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_memutil(self):
    self.__cpu_process_memutil = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-process-memutil", rest_name="cpu-process-memutil", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_process_running_time(self):
    """
    Getter method for cpu_process_running_time, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_running_time (string)

    YANG Description: Total time since the process is running
    """
    return self.__cpu_process_running_time
      
  def _set_cpu_process_running_time(self, v, load=False):
    """
    Setter method for cpu_process_running_time, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_running_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_running_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_running_time() directly.

    YANG Description: Total time since the process is running
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-running-time", rest_name="cpu-process-running-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_running_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-running-time", rest_name="cpu-process-running-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_running_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_running_time(self):
    self.__cpu_process_running_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-running-time", rest_name="cpu-process-running-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)


  def _get_cpu_process_cmd(self):
    """
    Getter method for cpu_process_cmd, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_cmd (string)

    YANG Description: Command name of the process
    """
    return self.__cpu_process_cmd
      
  def _set_cpu_process_cmd(self, v, load=False):
    """
    Setter method for cpu_process_cmd, mapped from YANG variable /cpu_state/top/cpu_top_process_information/cpu_process_cmd (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_process_cmd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_process_cmd() directly.

    YANG Description: Command name of the process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cpu-process-cmd", rest_name="cpu-process-cmd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_process_cmd must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-cmd", rest_name="cpu-process-cmd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)""",
        })

    self.__cpu_process_cmd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_process_cmd(self):
    self.__cpu_process_cmd = YANGDynClass(base=unicode, is_leaf=True, yang_name="cpu-process-cmd", rest_name="cpu-process-cmd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='string', is_config=False)

  cpu_process_id = __builtin__.property(_get_cpu_process_id)
  cpu_process_user = __builtin__.property(_get_cpu_process_user)
  cpu_process_priority = __builtin__.property(_get_cpu_process_priority)
  cpu_process_ni = __builtin__.property(_get_cpu_process_ni)
  cpu_process_virtual_mem = __builtin__.property(_get_cpu_process_virtual_mem)
  cpu_process_resident_mem = __builtin__.property(_get_cpu_process_resident_mem)
  cpu_process_shared_mem = __builtin__.property(_get_cpu_process_shared_mem)
  cpu_process_state = __builtin__.property(_get_cpu_process_state)
  cpu_process_cpuutil = __builtin__.property(_get_cpu_process_cpuutil)
  cpu_process_memutil = __builtin__.property(_get_cpu_process_memutil)
  cpu_process_running_time = __builtin__.property(_get_cpu_process_running_time)
  cpu_process_cmd = __builtin__.property(_get_cpu_process_cmd)


  _pyangbind_elements = {'cpu_process_id': cpu_process_id, 'cpu_process_user': cpu_process_user, 'cpu_process_priority': cpu_process_priority, 'cpu_process_ni': cpu_process_ni, 'cpu_process_virtual_mem': cpu_process_virtual_mem, 'cpu_process_resident_mem': cpu_process_resident_mem, 'cpu_process_shared_mem': cpu_process_shared_mem, 'cpu_process_state': cpu_process_state, 'cpu_process_cpuutil': cpu_process_cpuutil, 'cpu_process_memutil': cpu_process_memutil, 'cpu_process_running_time': cpu_process_running_time, 'cpu_process_cmd': cpu_process_cmd, }


