
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import cpu_util_process_history
class history(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-RAS-operational - based on the path /cpu-state/history. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  CPU utilization histogram 
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cpu_load_average_one_min','__cpu_load_average_five_min','__cpu_load_average_fifteen_min','__cpu_util_current','__cpu_util_current_user','__cpu_util_current_kernel','__cpu_util_current_iowait','__cpu_util_1min','__cpu_util_1min_user','__cpu_util_1min_kernel','__cpu_util_1min_iowait','__cpu_util_5min','__cpu_util_5min_user','__cpu_util_5min_kernel','__cpu_util_5min_iowait','__cpu_util_15min','__cpu_util_15min_user','__cpu_util_15min_kernel','__cpu_util_15min_iowait','__cpu_util_1hour','__cpu_util_1hour_user','__cpu_util_1hour_kernel','__cpu_util_1hour_iowait','__cpu_util_5hour','__cpu_util_5hour_user','__cpu_util_5hour_kernel','__cpu_util_5hour_iowait','__cpu_util_24hour','__cpu_util_24hour_user','__cpu_util_24hour_kernel','__cpu_util_24hour_iowait','__cpu_util_72hour','__cpu_util_72hour_user','__cpu_util_72hour_kernel','__cpu_util_72hour_iowait','__cpu_util_process_history',)

  _yang_name = 'history'
  _rest_name = 'history'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cpu_util_current_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-user", rest_name="cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-iowait", rest_name="cpu-util-5hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour", rest_name="cpu-util-1hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_24hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour", rest_name="cpu-util-24hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-user", rest_name="cpu-util-5hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5min_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-kernel", rest_name="cpu-util-5min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_24hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-iowait", rest_name="cpu-util-24hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_24hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-user", rest_name="cpu-util-24hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_15min_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-iowait", rest_name="cpu-util-15min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-iowait", rest_name="cpu-util-1hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_72hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-kernel", rest_name="cpu-util-72hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-kernel", rest_name="cpu-util-1hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_process_history = YANGDynClass(base=YANGListType("cpu_process_id",cpu_util_process_history.cpu_util_process_history, yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cpu-process-id', extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}), is_container='list', yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='list', is_config=False)
    self.__cpu_util_15min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min", rest_name="cpu-util-15min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5min_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-iowait", rest_name="cpu-util-5min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_15min_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-kernel", rest_name="cpu-util-15min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_load_average_fifteen_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-fifteen-min", rest_name="cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1min_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-iowait", rest_name="cpu-util-1min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_load_average_five_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-five-min", rest_name="cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_current_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-kernel", rest_name="cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5min_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-user", rest_name="cpu-util-5min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1min_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-kernel", rest_name="cpu-util-1min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_72hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-user", rest_name="cpu-util-72hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_load_average_one_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-one-min", rest_name="cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour", rest_name="cpu-util-5hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-user", rest_name="cpu-util-1hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_24hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-kernel", rest_name="cpu-util-24hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min", rest_name="cpu-util-5min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_72hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-iowait", rest_name="cpu-util-72hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min", rest_name="cpu-util-1min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_5hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-kernel", rest_name="cpu-util-5hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_current_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-iowait", rest_name="cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_72hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour", rest_name="cpu-util-72hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_1min_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-user", rest_name="cpu-util-1min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__cpu_util_15min_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-user", rest_name="cpu-util-15min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cpu-state', u'history']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cpu-state', u'history']

  def _get_cpu_load_average_one_min(self):
    """
    Getter method for cpu_load_average_one_min, mapped from YANG variable /cpu_state/history/cpu_load_average_one_min (decimal64)

    YANG Description: CPU load average in the last one minute
    """
    return self.__cpu_load_average_one_min
      
  def _set_cpu_load_average_one_min(self, v, load=False):
    """
    Setter method for cpu_load_average_one_min, mapped from YANG variable /cpu_state/history/cpu_load_average_one_min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_load_average_one_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_load_average_one_min() directly.

    YANG Description: CPU load average in the last one minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-one-min", rest_name="cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_load_average_one_min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-one-min", rest_name="cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_load_average_one_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_load_average_one_min(self):
    self.__cpu_load_average_one_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-one-min", rest_name="cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_load_average_five_min(self):
    """
    Getter method for cpu_load_average_five_min, mapped from YANG variable /cpu_state/history/cpu_load_average_five_min (decimal64)

    YANG Description: CPU load average in the last five minute
    """
    return self.__cpu_load_average_five_min
      
  def _set_cpu_load_average_five_min(self, v, load=False):
    """
    Setter method for cpu_load_average_five_min, mapped from YANG variable /cpu_state/history/cpu_load_average_five_min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_load_average_five_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_load_average_five_min() directly.

    YANG Description: CPU load average in the last five minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-five-min", rest_name="cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_load_average_five_min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-five-min", rest_name="cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_load_average_five_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_load_average_five_min(self):
    self.__cpu_load_average_five_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-five-min", rest_name="cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_load_average_fifteen_min(self):
    """
    Getter method for cpu_load_average_fifteen_min, mapped from YANG variable /cpu_state/history/cpu_load_average_fifteen_min (decimal64)

    YANG Description: CPU load average in the last fifteen minute
    """
    return self.__cpu_load_average_fifteen_min
      
  def _set_cpu_load_average_fifteen_min(self, v, load=False):
    """
    Setter method for cpu_load_average_fifteen_min, mapped from YANG variable /cpu_state/history/cpu_load_average_fifteen_min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_load_average_fifteen_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_load_average_fifteen_min() directly.

    YANG Description: CPU load average in the last fifteen minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-fifteen-min", rest_name="cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_load_average_fifteen_min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-fifteen-min", rest_name="cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_load_average_fifteen_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_load_average_fifteen_min(self):
    self.__cpu_load_average_fifteen_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-load-average-fifteen-min", rest_name="cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_current(self):
    """
    Getter method for cpu_util_current, mapped from YANG variable /cpu_state/history/cpu_util_current (decimal64)

    YANG Description: Current total CPU utilization percentage
    """
    return self.__cpu_util_current
      
  def _set_cpu_util_current(self, v, load=False):
    """
    Setter method for cpu_util_current, mapped from YANG variable /cpu_state/history/cpu_util_current (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_current is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_current() directly.

    YANG Description: Current total CPU utilization percentage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_current must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_current = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_current(self):
    self.__cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current", rest_name="cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_current_user(self):
    """
    Getter method for cpu_util_current_user, mapped from YANG variable /cpu_state/history/cpu_util_current_user (decimal64)

    YANG Description: Current CPU utilization percentage of user processes
    """
    return self.__cpu_util_current_user
      
  def _set_cpu_util_current_user(self, v, load=False):
    """
    Setter method for cpu_util_current_user, mapped from YANG variable /cpu_state/history/cpu_util_current_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_current_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_current_user() directly.

    YANG Description: Current CPU utilization percentage of user processes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-user", rest_name="cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_current_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-user", rest_name="cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_current_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_current_user(self):
    self.__cpu_util_current_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-user", rest_name="cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_current_kernel(self):
    """
    Getter method for cpu_util_current_kernel, mapped from YANG variable /cpu_state/history/cpu_util_current_kernel (decimal64)

    YANG Description: Current CPU utilization percentage of kernel processes
    """
    return self.__cpu_util_current_kernel
      
  def _set_cpu_util_current_kernel(self, v, load=False):
    """
    Setter method for cpu_util_current_kernel, mapped from YANG variable /cpu_state/history/cpu_util_current_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_current_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_current_kernel() directly.

    YANG Description: Current CPU utilization percentage of kernel processes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-kernel", rest_name="cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_current_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-kernel", rest_name="cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_current_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_current_kernel(self):
    self.__cpu_util_current_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-kernel", rest_name="cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_current_iowait(self):
    """
    Getter method for cpu_util_current_iowait, mapped from YANG variable /cpu_state/history/cpu_util_current_iowait (decimal64)

    YANG Description: Current CPU utilization percentage of iowait
    """
    return self.__cpu_util_current_iowait
      
  def _set_cpu_util_current_iowait(self, v, load=False):
    """
    Setter method for cpu_util_current_iowait, mapped from YANG variable /cpu_state/history/cpu_util_current_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_current_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_current_iowait() directly.

    YANG Description: Current CPU utilization percentage of iowait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-iowait", rest_name="cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_current_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-iowait", rest_name="cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_current_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_current_iowait(self):
    self.__cpu_util_current_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-current-iowait", rest_name="cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1min(self):
    """
    Getter method for cpu_util_1min, mapped from YANG variable /cpu_state/history/cpu_util_1min (decimal64)

    YANG Description: Total CPU utilization percentage in the last 1 min
    """
    return self.__cpu_util_1min
      
  def _set_cpu_util_1min(self, v, load=False):
    """
    Setter method for cpu_util_1min, mapped from YANG variable /cpu_state/history/cpu_util_1min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1min() directly.

    YANG Description: Total CPU utilization percentage in the last 1 min
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min", rest_name="cpu-util-1min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min", rest_name="cpu-util-1min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1min(self):
    self.__cpu_util_1min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min", rest_name="cpu-util-1min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1min_user(self):
    """
    Getter method for cpu_util_1min_user, mapped from YANG variable /cpu_state/history/cpu_util_1min_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 1 min 
    """
    return self.__cpu_util_1min_user
      
  def _set_cpu_util_1min_user(self, v, load=False):
    """
    Setter method for cpu_util_1min_user, mapped from YANG variable /cpu_state/history/cpu_util_1min_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1min_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1min_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 1 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-user", rest_name="cpu-util-1min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1min_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-user", rest_name="cpu-util-1min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1min_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1min_user(self):
    self.__cpu_util_1min_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-user", rest_name="cpu-util-1min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1min_kernel(self):
    """
    Getter method for cpu_util_1min_kernel, mapped from YANG variable /cpu_state/history/cpu_util_1min_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 1 min 
    """
    return self.__cpu_util_1min_kernel
      
  def _set_cpu_util_1min_kernel(self, v, load=False):
    """
    Setter method for cpu_util_1min_kernel, mapped from YANG variable /cpu_state/history/cpu_util_1min_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1min_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1min_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 1 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-kernel", rest_name="cpu-util-1min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1min_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-kernel", rest_name="cpu-util-1min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1min_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1min_kernel(self):
    self.__cpu_util_1min_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-kernel", rest_name="cpu-util-1min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1min_iowait(self):
    """
    Getter method for cpu_util_1min_iowait, mapped from YANG variable /cpu_state/history/cpu_util_1min_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 1 min 
    """
    return self.__cpu_util_1min_iowait
      
  def _set_cpu_util_1min_iowait(self, v, load=False):
    """
    Setter method for cpu_util_1min_iowait, mapped from YANG variable /cpu_state/history/cpu_util_1min_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1min_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1min_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 1 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-iowait", rest_name="cpu-util-1min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1min_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-iowait", rest_name="cpu-util-1min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1min_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1min_iowait(self):
    self.__cpu_util_1min_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1min-iowait", rest_name="cpu-util-1min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5min(self):
    """
    Getter method for cpu_util_5min, mapped from YANG variable /cpu_state/history/cpu_util_5min (decimal64)

    YANG Description: Total CPU utilization percentage in the last 5 min
    """
    return self.__cpu_util_5min
      
  def _set_cpu_util_5min(self, v, load=False):
    """
    Setter method for cpu_util_5min, mapped from YANG variable /cpu_state/history/cpu_util_5min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5min() directly.

    YANG Description: Total CPU utilization percentage in the last 5 min
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min", rest_name="cpu-util-5min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min", rest_name="cpu-util-5min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5min(self):
    self.__cpu_util_5min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min", rest_name="cpu-util-5min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5min_user(self):
    """
    Getter method for cpu_util_5min_user, mapped from YANG variable /cpu_state/history/cpu_util_5min_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 5 min 
    """
    return self.__cpu_util_5min_user
      
  def _set_cpu_util_5min_user(self, v, load=False):
    """
    Setter method for cpu_util_5min_user, mapped from YANG variable /cpu_state/history/cpu_util_5min_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5min_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5min_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 5 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-user", rest_name="cpu-util-5min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5min_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-user", rest_name="cpu-util-5min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5min_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5min_user(self):
    self.__cpu_util_5min_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-user", rest_name="cpu-util-5min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5min_kernel(self):
    """
    Getter method for cpu_util_5min_kernel, mapped from YANG variable /cpu_state/history/cpu_util_5min_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 5 min 
    """
    return self.__cpu_util_5min_kernel
      
  def _set_cpu_util_5min_kernel(self, v, load=False):
    """
    Setter method for cpu_util_5min_kernel, mapped from YANG variable /cpu_state/history/cpu_util_5min_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5min_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5min_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 5 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-kernel", rest_name="cpu-util-5min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5min_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-kernel", rest_name="cpu-util-5min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5min_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5min_kernel(self):
    self.__cpu_util_5min_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-kernel", rest_name="cpu-util-5min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5min_iowait(self):
    """
    Getter method for cpu_util_5min_iowait, mapped from YANG variable /cpu_state/history/cpu_util_5min_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 5 min 
    """
    return self.__cpu_util_5min_iowait
      
  def _set_cpu_util_5min_iowait(self, v, load=False):
    """
    Setter method for cpu_util_5min_iowait, mapped from YANG variable /cpu_state/history/cpu_util_5min_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5min_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5min_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 5 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-iowait", rest_name="cpu-util-5min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5min_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-iowait", rest_name="cpu-util-5min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5min_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5min_iowait(self):
    self.__cpu_util_5min_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5min-iowait", rest_name="cpu-util-5min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_15min(self):
    """
    Getter method for cpu_util_15min, mapped from YANG variable /cpu_state/history/cpu_util_15min (decimal64)

    YANG Description: Total CPU utilization percentage in the last 15 min
    """
    return self.__cpu_util_15min
      
  def _set_cpu_util_15min(self, v, load=False):
    """
    Setter method for cpu_util_15min, mapped from YANG variable /cpu_state/history/cpu_util_15min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_15min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_15min() directly.

    YANG Description: Total CPU utilization percentage in the last 15 min
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min", rest_name="cpu-util-15min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_15min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min", rest_name="cpu-util-15min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_15min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_15min(self):
    self.__cpu_util_15min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min", rest_name="cpu-util-15min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_15min_user(self):
    """
    Getter method for cpu_util_15min_user, mapped from YANG variable /cpu_state/history/cpu_util_15min_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 15 min 
    """
    return self.__cpu_util_15min_user
      
  def _set_cpu_util_15min_user(self, v, load=False):
    """
    Setter method for cpu_util_15min_user, mapped from YANG variable /cpu_state/history/cpu_util_15min_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_15min_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_15min_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 15 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-user", rest_name="cpu-util-15min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_15min_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-user", rest_name="cpu-util-15min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_15min_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_15min_user(self):
    self.__cpu_util_15min_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-user", rest_name="cpu-util-15min-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_15min_kernel(self):
    """
    Getter method for cpu_util_15min_kernel, mapped from YANG variable /cpu_state/history/cpu_util_15min_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 15 min 
    """
    return self.__cpu_util_15min_kernel
      
  def _set_cpu_util_15min_kernel(self, v, load=False):
    """
    Setter method for cpu_util_15min_kernel, mapped from YANG variable /cpu_state/history/cpu_util_15min_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_15min_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_15min_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 15 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-kernel", rest_name="cpu-util-15min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_15min_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-kernel", rest_name="cpu-util-15min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_15min_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_15min_kernel(self):
    self.__cpu_util_15min_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-kernel", rest_name="cpu-util-15min-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_15min_iowait(self):
    """
    Getter method for cpu_util_15min_iowait, mapped from YANG variable /cpu_state/history/cpu_util_15min_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 15 min 
    """
    return self.__cpu_util_15min_iowait
      
  def _set_cpu_util_15min_iowait(self, v, load=False):
    """
    Setter method for cpu_util_15min_iowait, mapped from YANG variable /cpu_state/history/cpu_util_15min_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_15min_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_15min_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 15 min 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-iowait", rest_name="cpu-util-15min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_15min_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-iowait", rest_name="cpu-util-15min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_15min_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_15min_iowait(self):
    self.__cpu_util_15min_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-15min-iowait", rest_name="cpu-util-15min-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1hour(self):
    """
    Getter method for cpu_util_1hour, mapped from YANG variable /cpu_state/history/cpu_util_1hour (decimal64)

    YANG Description: Total CPU utilization percentage in the last 1 hour
    """
    return self.__cpu_util_1hour
      
  def _set_cpu_util_1hour(self, v, load=False):
    """
    Setter method for cpu_util_1hour, mapped from YANG variable /cpu_state/history/cpu_util_1hour (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1hour is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1hour() directly.

    YANG Description: Total CPU utilization percentage in the last 1 hour
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour", rest_name="cpu-util-1hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1hour must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour", rest_name="cpu-util-1hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1hour = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1hour(self):
    self.__cpu_util_1hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour", rest_name="cpu-util-1hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1hour_user(self):
    """
    Getter method for cpu_util_1hour_user, mapped from YANG variable /cpu_state/history/cpu_util_1hour_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 1 hour 
    """
    return self.__cpu_util_1hour_user
      
  def _set_cpu_util_1hour_user(self, v, load=False):
    """
    Setter method for cpu_util_1hour_user, mapped from YANG variable /cpu_state/history/cpu_util_1hour_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1hour_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1hour_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 1 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-user", rest_name="cpu-util-1hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1hour_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-user", rest_name="cpu-util-1hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1hour_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1hour_user(self):
    self.__cpu_util_1hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-user", rest_name="cpu-util-1hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1hour_kernel(self):
    """
    Getter method for cpu_util_1hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_1hour_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 1 hour 
    """
    return self.__cpu_util_1hour_kernel
      
  def _set_cpu_util_1hour_kernel(self, v, load=False):
    """
    Setter method for cpu_util_1hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_1hour_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1hour_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1hour_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 1 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-kernel", rest_name="cpu-util-1hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1hour_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-kernel", rest_name="cpu-util-1hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1hour_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1hour_kernel(self):
    self.__cpu_util_1hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-kernel", rest_name="cpu-util-1hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_1hour_iowait(self):
    """
    Getter method for cpu_util_1hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_1hour_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 1 hour 
    """
    return self.__cpu_util_1hour_iowait
      
  def _set_cpu_util_1hour_iowait(self, v, load=False):
    """
    Setter method for cpu_util_1hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_1hour_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_1hour_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_1hour_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 1 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-iowait", rest_name="cpu-util-1hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_1hour_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-iowait", rest_name="cpu-util-1hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_1hour_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_1hour_iowait(self):
    self.__cpu_util_1hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-1hour-iowait", rest_name="cpu-util-1hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5hour(self):
    """
    Getter method for cpu_util_5hour, mapped from YANG variable /cpu_state/history/cpu_util_5hour (decimal64)

    YANG Description: Total CPU utilization percentage in the last 5 hour 
    """
    return self.__cpu_util_5hour
      
  def _set_cpu_util_5hour(self, v, load=False):
    """
    Setter method for cpu_util_5hour, mapped from YANG variable /cpu_state/history/cpu_util_5hour (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5hour is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5hour() directly.

    YANG Description: Total CPU utilization percentage in the last 5 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour", rest_name="cpu-util-5hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5hour must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour", rest_name="cpu-util-5hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5hour = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5hour(self):
    self.__cpu_util_5hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour", rest_name="cpu-util-5hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5hour_user(self):
    """
    Getter method for cpu_util_5hour_user, mapped from YANG variable /cpu_state/history/cpu_util_5hour_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 5 hour 
    """
    return self.__cpu_util_5hour_user
      
  def _set_cpu_util_5hour_user(self, v, load=False):
    """
    Setter method for cpu_util_5hour_user, mapped from YANG variable /cpu_state/history/cpu_util_5hour_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5hour_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5hour_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 5 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-user", rest_name="cpu-util-5hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5hour_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-user", rest_name="cpu-util-5hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5hour_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5hour_user(self):
    self.__cpu_util_5hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-user", rest_name="cpu-util-5hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5hour_kernel(self):
    """
    Getter method for cpu_util_5hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_5hour_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 5 hour 
    """
    return self.__cpu_util_5hour_kernel
      
  def _set_cpu_util_5hour_kernel(self, v, load=False):
    """
    Setter method for cpu_util_5hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_5hour_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5hour_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5hour_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 5 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-kernel", rest_name="cpu-util-5hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5hour_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-kernel", rest_name="cpu-util-5hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5hour_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5hour_kernel(self):
    self.__cpu_util_5hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-kernel", rest_name="cpu-util-5hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_5hour_iowait(self):
    """
    Getter method for cpu_util_5hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_5hour_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 5 hour 
    """
    return self.__cpu_util_5hour_iowait
      
  def _set_cpu_util_5hour_iowait(self, v, load=False):
    """
    Setter method for cpu_util_5hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_5hour_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_5hour_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_5hour_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 5 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-iowait", rest_name="cpu-util-5hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_5hour_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-iowait", rest_name="cpu-util-5hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_5hour_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_5hour_iowait(self):
    self.__cpu_util_5hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-5hour-iowait", rest_name="cpu-util-5hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_24hour(self):
    """
    Getter method for cpu_util_24hour, mapped from YANG variable /cpu_state/history/cpu_util_24hour (decimal64)

    YANG Description: Total CPU utilization percentage in the last 24 hour 
    """
    return self.__cpu_util_24hour
      
  def _set_cpu_util_24hour(self, v, load=False):
    """
    Setter method for cpu_util_24hour, mapped from YANG variable /cpu_state/history/cpu_util_24hour (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_24hour is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_24hour() directly.

    YANG Description: Total CPU utilization percentage in the last 24 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour", rest_name="cpu-util-24hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_24hour must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour", rest_name="cpu-util-24hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_24hour = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_24hour(self):
    self.__cpu_util_24hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour", rest_name="cpu-util-24hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_24hour_user(self):
    """
    Getter method for cpu_util_24hour_user, mapped from YANG variable /cpu_state/history/cpu_util_24hour_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 24 hour 
    """
    return self.__cpu_util_24hour_user
      
  def _set_cpu_util_24hour_user(self, v, load=False):
    """
    Setter method for cpu_util_24hour_user, mapped from YANG variable /cpu_state/history/cpu_util_24hour_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_24hour_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_24hour_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 24 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-user", rest_name="cpu-util-24hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_24hour_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-user", rest_name="cpu-util-24hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_24hour_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_24hour_user(self):
    self.__cpu_util_24hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-user", rest_name="cpu-util-24hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_24hour_kernel(self):
    """
    Getter method for cpu_util_24hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_24hour_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 24 hour 
    """
    return self.__cpu_util_24hour_kernel
      
  def _set_cpu_util_24hour_kernel(self, v, load=False):
    """
    Setter method for cpu_util_24hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_24hour_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_24hour_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_24hour_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 24 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-kernel", rest_name="cpu-util-24hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_24hour_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-kernel", rest_name="cpu-util-24hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_24hour_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_24hour_kernel(self):
    self.__cpu_util_24hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-kernel", rest_name="cpu-util-24hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_24hour_iowait(self):
    """
    Getter method for cpu_util_24hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_24hour_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 24 hour 
    """
    return self.__cpu_util_24hour_iowait
      
  def _set_cpu_util_24hour_iowait(self, v, load=False):
    """
    Setter method for cpu_util_24hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_24hour_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_24hour_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_24hour_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 24 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-iowait", rest_name="cpu-util-24hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_24hour_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-iowait", rest_name="cpu-util-24hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_24hour_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_24hour_iowait(self):
    self.__cpu_util_24hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-24hour-iowait", rest_name="cpu-util-24hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_72hour(self):
    """
    Getter method for cpu_util_72hour, mapped from YANG variable /cpu_state/history/cpu_util_72hour (decimal64)

    YANG Description: Total CPU utilization percentage in the last 72 hour 
    """
    return self.__cpu_util_72hour
      
  def _set_cpu_util_72hour(self, v, load=False):
    """
    Setter method for cpu_util_72hour, mapped from YANG variable /cpu_state/history/cpu_util_72hour (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_72hour is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_72hour() directly.

    YANG Description: Total CPU utilization percentage in the last 72 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour", rest_name="cpu-util-72hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_72hour must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour", rest_name="cpu-util-72hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_72hour = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_72hour(self):
    self.__cpu_util_72hour = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour", rest_name="cpu-util-72hour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_72hour_user(self):
    """
    Getter method for cpu_util_72hour_user, mapped from YANG variable /cpu_state/history/cpu_util_72hour_user (decimal64)

    YANG Description: CPU utilization percentage of user processes in the last 72 hour 
    """
    return self.__cpu_util_72hour_user
      
  def _set_cpu_util_72hour_user(self, v, load=False):
    """
    Setter method for cpu_util_72hour_user, mapped from YANG variable /cpu_state/history/cpu_util_72hour_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_72hour_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_72hour_user() directly.

    YANG Description: CPU utilization percentage of user processes in the last 72 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-user", rest_name="cpu-util-72hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_72hour_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-user", rest_name="cpu-util-72hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_72hour_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_72hour_user(self):
    self.__cpu_util_72hour_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-user", rest_name="cpu-util-72hour-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_72hour_kernel(self):
    """
    Getter method for cpu_util_72hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_72hour_kernel (decimal64)

    YANG Description: CPU utilization percentage of kernel processes in the last 72 hour 
    """
    return self.__cpu_util_72hour_kernel
      
  def _set_cpu_util_72hour_kernel(self, v, load=False):
    """
    Setter method for cpu_util_72hour_kernel, mapped from YANG variable /cpu_state/history/cpu_util_72hour_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_72hour_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_72hour_kernel() directly.

    YANG Description: CPU utilization percentage of kernel processes in the last 72 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-kernel", rest_name="cpu-util-72hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_72hour_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-kernel", rest_name="cpu-util-72hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_72hour_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_72hour_kernel(self):
    self.__cpu_util_72hour_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-kernel", rest_name="cpu-util-72hour-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_72hour_iowait(self):
    """
    Getter method for cpu_util_72hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_72hour_iowait (decimal64)

    YANG Description: CPU utilization percentage of iowait in the last 72 hour 
    """
    return self.__cpu_util_72hour_iowait
      
  def _set_cpu_util_72hour_iowait(self, v, load=False):
    """
    Setter method for cpu_util_72hour_iowait, mapped from YANG variable /cpu_state/history/cpu_util_72hour_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_72hour_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_72hour_iowait() directly.

    YANG Description: CPU utilization percentage of iowait in the last 72 hour 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-iowait", rest_name="cpu-util-72hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_72hour_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-iowait", rest_name="cpu-util-72hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__cpu_util_72hour_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_72hour_iowait(self):
    self.__cpu_util_72hour_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="cpu-util-72hour-iowait", rest_name="cpu-util-72hour-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_cpu_util_process_history(self):
    """
    Getter method for cpu_util_process_history, mapped from YANG variable /cpu_state/history/cpu_util_process_history (list)

    YANG Description:  CPU utilization histogram per process
    """
    return self.__cpu_util_process_history
      
  def _set_cpu_util_process_history(self, v, load=False):
    """
    Setter method for cpu_util_process_history, mapped from YANG variable /cpu_state/history/cpu_util_process_history (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cpu_util_process_history is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cpu_util_process_history() directly.

    YANG Description:  CPU utilization histogram per process
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("cpu_process_id",cpu_util_process_history.cpu_util_process_history, yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cpu-process-id', extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}), is_container='list', yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cpu_util_process_history must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("cpu_process_id",cpu_util_process_history.cpu_util_process_history, yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cpu-process-id', extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}), is_container='list', yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='list', is_config=False)""",
        })

    self.__cpu_util_process_history = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cpu_util_process_history(self):
    self.__cpu_util_process_history = YANGDynClass(base=YANGListType("cpu_process_id",cpu_util_process_history.cpu_util_process_history, yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cpu-process-id', extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}), is_container='list', yang_name="cpu-util-process-history", rest_name="cpu-util-process-history", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'RAS-cpu-util-process-history', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='list', is_config=False)

  cpu_load_average_one_min = __builtin__.property(_get_cpu_load_average_one_min)
  cpu_load_average_five_min = __builtin__.property(_get_cpu_load_average_five_min)
  cpu_load_average_fifteen_min = __builtin__.property(_get_cpu_load_average_fifteen_min)
  cpu_util_current = __builtin__.property(_get_cpu_util_current)
  cpu_util_current_user = __builtin__.property(_get_cpu_util_current_user)
  cpu_util_current_kernel = __builtin__.property(_get_cpu_util_current_kernel)
  cpu_util_current_iowait = __builtin__.property(_get_cpu_util_current_iowait)
  cpu_util_1min = __builtin__.property(_get_cpu_util_1min)
  cpu_util_1min_user = __builtin__.property(_get_cpu_util_1min_user)
  cpu_util_1min_kernel = __builtin__.property(_get_cpu_util_1min_kernel)
  cpu_util_1min_iowait = __builtin__.property(_get_cpu_util_1min_iowait)
  cpu_util_5min = __builtin__.property(_get_cpu_util_5min)
  cpu_util_5min_user = __builtin__.property(_get_cpu_util_5min_user)
  cpu_util_5min_kernel = __builtin__.property(_get_cpu_util_5min_kernel)
  cpu_util_5min_iowait = __builtin__.property(_get_cpu_util_5min_iowait)
  cpu_util_15min = __builtin__.property(_get_cpu_util_15min)
  cpu_util_15min_user = __builtin__.property(_get_cpu_util_15min_user)
  cpu_util_15min_kernel = __builtin__.property(_get_cpu_util_15min_kernel)
  cpu_util_15min_iowait = __builtin__.property(_get_cpu_util_15min_iowait)
  cpu_util_1hour = __builtin__.property(_get_cpu_util_1hour)
  cpu_util_1hour_user = __builtin__.property(_get_cpu_util_1hour_user)
  cpu_util_1hour_kernel = __builtin__.property(_get_cpu_util_1hour_kernel)
  cpu_util_1hour_iowait = __builtin__.property(_get_cpu_util_1hour_iowait)
  cpu_util_5hour = __builtin__.property(_get_cpu_util_5hour)
  cpu_util_5hour_user = __builtin__.property(_get_cpu_util_5hour_user)
  cpu_util_5hour_kernel = __builtin__.property(_get_cpu_util_5hour_kernel)
  cpu_util_5hour_iowait = __builtin__.property(_get_cpu_util_5hour_iowait)
  cpu_util_24hour = __builtin__.property(_get_cpu_util_24hour)
  cpu_util_24hour_user = __builtin__.property(_get_cpu_util_24hour_user)
  cpu_util_24hour_kernel = __builtin__.property(_get_cpu_util_24hour_kernel)
  cpu_util_24hour_iowait = __builtin__.property(_get_cpu_util_24hour_iowait)
  cpu_util_72hour = __builtin__.property(_get_cpu_util_72hour)
  cpu_util_72hour_user = __builtin__.property(_get_cpu_util_72hour_user)
  cpu_util_72hour_kernel = __builtin__.property(_get_cpu_util_72hour_kernel)
  cpu_util_72hour_iowait = __builtin__.property(_get_cpu_util_72hour_iowait)
  cpu_util_process_history = __builtin__.property(_get_cpu_util_process_history)


  _pyangbind_elements = {'cpu_load_average_one_min': cpu_load_average_one_min, 'cpu_load_average_five_min': cpu_load_average_five_min, 'cpu_load_average_fifteen_min': cpu_load_average_fifteen_min, 'cpu_util_current': cpu_util_current, 'cpu_util_current_user': cpu_util_current_user, 'cpu_util_current_kernel': cpu_util_current_kernel, 'cpu_util_current_iowait': cpu_util_current_iowait, 'cpu_util_1min': cpu_util_1min, 'cpu_util_1min_user': cpu_util_1min_user, 'cpu_util_1min_kernel': cpu_util_1min_kernel, 'cpu_util_1min_iowait': cpu_util_1min_iowait, 'cpu_util_5min': cpu_util_5min, 'cpu_util_5min_user': cpu_util_5min_user, 'cpu_util_5min_kernel': cpu_util_5min_kernel, 'cpu_util_5min_iowait': cpu_util_5min_iowait, 'cpu_util_15min': cpu_util_15min, 'cpu_util_15min_user': cpu_util_15min_user, 'cpu_util_15min_kernel': cpu_util_15min_kernel, 'cpu_util_15min_iowait': cpu_util_15min_iowait, 'cpu_util_1hour': cpu_util_1hour, 'cpu_util_1hour_user': cpu_util_1hour_user, 'cpu_util_1hour_kernel': cpu_util_1hour_kernel, 'cpu_util_1hour_iowait': cpu_util_1hour_iowait, 'cpu_util_5hour': cpu_util_5hour, 'cpu_util_5hour_user': cpu_util_5hour_user, 'cpu_util_5hour_kernel': cpu_util_5hour_kernel, 'cpu_util_5hour_iowait': cpu_util_5hour_iowait, 'cpu_util_24hour': cpu_util_24hour, 'cpu_util_24hour_user': cpu_util_24hour_user, 'cpu_util_24hour_kernel': cpu_util_24hour_kernel, 'cpu_util_24hour_iowait': cpu_util_24hour_iowait, 'cpu_util_72hour': cpu_util_72hour, 'cpu_util_72hour_user': cpu_util_72hour_user, 'cpu_util_72hour_kernel': cpu_util_72hour_kernel, 'cpu_util_72hour_iowait': cpu_util_72hour_iowait, 'cpu_util_process_history': cpu_util_process_history, }


