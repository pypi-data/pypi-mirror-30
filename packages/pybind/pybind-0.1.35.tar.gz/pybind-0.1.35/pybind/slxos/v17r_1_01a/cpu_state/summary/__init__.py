
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class summary(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-RAS-operational - based on the path /cpu-state/summary. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Overall CPU utilization summary
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__summary_cpu_load_average_one_min','__summary_cpu_load_average_five_min','__summary_cpu_load_average_fifteen_min','__summary_cpu_util_current','__summary_cpu_util_current_user','__summary_cpu_util_current_kernel','__summary_cpu_util_current_iowait',)

  _yang_name = 'summary'
  _rest_name = 'summary'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__summary_cpu_util_current_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-user", rest_name="summary-cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__summary_cpu_load_average_fifteen_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-fifteen-min", rest_name="summary-cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__summary_cpu_load_average_one_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-one-min", rest_name="summary-cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__summary_cpu_util_current_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-kernel", rest_name="summary-cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__summary_cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current", rest_name="summary-cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__summary_cpu_load_average_five_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-five-min", rest_name="summary-cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    self.__summary_cpu_util_current_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-iowait", rest_name="summary-cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cpu-state', u'summary']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cpu-state', u'summary']

  def _get_summary_cpu_load_average_one_min(self):
    """
    Getter method for summary_cpu_load_average_one_min, mapped from YANG variable /cpu_state/summary/summary_cpu_load_average_one_min (decimal64)

    YANG Description: CPU load average in the last one minute
    """
    return self.__summary_cpu_load_average_one_min
      
  def _set_summary_cpu_load_average_one_min(self, v, load=False):
    """
    Setter method for summary_cpu_load_average_one_min, mapped from YANG variable /cpu_state/summary/summary_cpu_load_average_one_min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_load_average_one_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_load_average_one_min() directly.

    YANG Description: CPU load average in the last one minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-one-min", rest_name="summary-cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_load_average_one_min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-one-min", rest_name="summary-cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_load_average_one_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_load_average_one_min(self):
    self.__summary_cpu_load_average_one_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-one-min", rest_name="summary-cpu-load-average-one-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_summary_cpu_load_average_five_min(self):
    """
    Getter method for summary_cpu_load_average_five_min, mapped from YANG variable /cpu_state/summary/summary_cpu_load_average_five_min (decimal64)

    YANG Description: CPU load average in the last five minute
    """
    return self.__summary_cpu_load_average_five_min
      
  def _set_summary_cpu_load_average_five_min(self, v, load=False):
    """
    Setter method for summary_cpu_load_average_five_min, mapped from YANG variable /cpu_state/summary/summary_cpu_load_average_five_min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_load_average_five_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_load_average_five_min() directly.

    YANG Description: CPU load average in the last five minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-five-min", rest_name="summary-cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_load_average_five_min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-five-min", rest_name="summary-cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_load_average_five_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_load_average_five_min(self):
    self.__summary_cpu_load_average_five_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-five-min", rest_name="summary-cpu-load-average-five-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_summary_cpu_load_average_fifteen_min(self):
    """
    Getter method for summary_cpu_load_average_fifteen_min, mapped from YANG variable /cpu_state/summary/summary_cpu_load_average_fifteen_min (decimal64)

    YANG Description: CPU load average in the last fifteen minute
    """
    return self.__summary_cpu_load_average_fifteen_min
      
  def _set_summary_cpu_load_average_fifteen_min(self, v, load=False):
    """
    Setter method for summary_cpu_load_average_fifteen_min, mapped from YANG variable /cpu_state/summary/summary_cpu_load_average_fifteen_min (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_load_average_fifteen_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_load_average_fifteen_min() directly.

    YANG Description: CPU load average in the last fifteen minute
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-fifteen-min", rest_name="summary-cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_load_average_fifteen_min must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-fifteen-min", rest_name="summary-cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_load_average_fifteen_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_load_average_fifteen_min(self):
    self.__summary_cpu_load_average_fifteen_min = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-load-average-fifteen-min", rest_name="summary-cpu-load-average-fifteen-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_summary_cpu_util_current(self):
    """
    Getter method for summary_cpu_util_current, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current (decimal64)

    YANG Description: Current total CPU utilization percentage
    """
    return self.__summary_cpu_util_current
      
  def _set_summary_cpu_util_current(self, v, load=False):
    """
    Setter method for summary_cpu_util_current, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_util_current is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_util_current() directly.

    YANG Description: Current total CPU utilization percentage
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current", rest_name="summary-cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_util_current must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current", rest_name="summary-cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_util_current = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_util_current(self):
    self.__summary_cpu_util_current = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current", rest_name="summary-cpu-util-current", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_summary_cpu_util_current_user(self):
    """
    Getter method for summary_cpu_util_current_user, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current_user (decimal64)

    YANG Description: Current CPU utilization percentage of user processes
    """
    return self.__summary_cpu_util_current_user
      
  def _set_summary_cpu_util_current_user(self, v, load=False):
    """
    Setter method for summary_cpu_util_current_user, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current_user (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_util_current_user is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_util_current_user() directly.

    YANG Description: Current CPU utilization percentage of user processes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-user", rest_name="summary-cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_util_current_user must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-user", rest_name="summary-cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_util_current_user = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_util_current_user(self):
    self.__summary_cpu_util_current_user = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-user", rest_name="summary-cpu-util-current-user", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_summary_cpu_util_current_kernel(self):
    """
    Getter method for summary_cpu_util_current_kernel, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current_kernel (decimal64)

    YANG Description: Current CPU utilization percentage of kernel processes
    """
    return self.__summary_cpu_util_current_kernel
      
  def _set_summary_cpu_util_current_kernel(self, v, load=False):
    """
    Setter method for summary_cpu_util_current_kernel, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current_kernel (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_util_current_kernel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_util_current_kernel() directly.

    YANG Description: Current CPU utilization percentage of kernel processes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-kernel", rest_name="summary-cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_util_current_kernel must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-kernel", rest_name="summary-cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_util_current_kernel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_util_current_kernel(self):
    self.__summary_cpu_util_current_kernel = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-kernel", rest_name="summary-cpu-util-current-kernel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)


  def _get_summary_cpu_util_current_iowait(self):
    """
    Getter method for summary_cpu_util_current_iowait, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current_iowait (decimal64)

    YANG Description: Current CPU utilization percentage of iowait
    """
    return self.__summary_cpu_util_current_iowait
      
  def _set_summary_cpu_util_current_iowait(self, v, load=False):
    """
    Setter method for summary_cpu_util_current_iowait, mapped from YANG variable /cpu_state/summary/summary_cpu_util_current_iowait (decimal64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_cpu_util_current_iowait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_cpu_util_current_iowait() directly.

    YANG Description: Current CPU utilization percentage of iowait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-iowait", rest_name="summary-cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_cpu_util_current_iowait must be of a type compatible with decimal64""",
          'defined-type': "decimal64",
          'generated-type': """YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-iowait", rest_name="summary-cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)""",
        })

    self.__summary_cpu_util_current_iowait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_cpu_util_current_iowait(self):
    self.__summary_cpu_util_current_iowait = YANGDynClass(base=RestrictedPrecisionDecimalType(precision=2), is_leaf=True, yang_name="summary-cpu-util-current-iowait", rest_name="summary-cpu-util-current-iowait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-RAS-operational', defining_module='brocade-RAS-operational', yang_type='decimal64', is_config=False)

  summary_cpu_load_average_one_min = __builtin__.property(_get_summary_cpu_load_average_one_min)
  summary_cpu_load_average_five_min = __builtin__.property(_get_summary_cpu_load_average_five_min)
  summary_cpu_load_average_fifteen_min = __builtin__.property(_get_summary_cpu_load_average_fifteen_min)
  summary_cpu_util_current = __builtin__.property(_get_summary_cpu_util_current)
  summary_cpu_util_current_user = __builtin__.property(_get_summary_cpu_util_current_user)
  summary_cpu_util_current_kernel = __builtin__.property(_get_summary_cpu_util_current_kernel)
  summary_cpu_util_current_iowait = __builtin__.property(_get_summary_cpu_util_current_iowait)


  _pyangbind_elements = {'summary_cpu_load_average_one_min': summary_cpu_load_average_one_min, 'summary_cpu_load_average_five_min': summary_cpu_load_average_five_min, 'summary_cpu_load_average_fifteen_min': summary_cpu_load_average_fifteen_min, 'summary_cpu_util_current': summary_cpu_util_current, 'summary_cpu_util_current_user': summary_cpu_util_current_user, 'summary_cpu_util_current_kernel': summary_cpu_util_current_kernel, 'summary_cpu_util_current_iowait': summary_cpu_util_current_iowait, }


