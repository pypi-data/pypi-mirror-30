
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_mpls_rsvp_interface_brief(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-rsvp-interface/output/mpls-rsvp-interface/show-mpls-rsvp-interface-brief. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mpls_rsvp_interface_name','__mpls_rsvp_interface_oper_status','__mpls_rsvp_interface_auth','__mpls_rsvp_interface_reliable_msg','__mpls_rsvp_interface_bundle_msg','__mpls_rsvp_interface_s_refresh','__mpls_rsvp_interface_active_outsegs','__mpls_rsvp_interface_inactive_outsegs','__mpls_rsvp_interface_bw_resv_outsegs','__mpls_rsvp_interface_is_tunnel_interface','__mpls_rsvp_interface_preempts','__mpls_rsvp_interface_soft_preempts','__mpls_rsvp_interface_if_index',)

  _yang_name = 'show-mpls-rsvp-interface-brief'
  _rest_name = 'show-mpls-rsvp-interface-brief'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__mpls_rsvp_interface_bw_resv_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bw-resv-outsegs", rest_name="mpls-rsvp-interface-bw-resv-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_reliable_msg = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-reliable-msg", rest_name="mpls-rsvp-interface-reliable-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_if_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-if-index", rest_name="mpls-rsvp-interface-if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_bundle_msg = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bundle-msg", rest_name="mpls-rsvp-interface-bundle-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_soft_preempts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-soft-preempts", rest_name="mpls-rsvp-interface-soft-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_preempts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-preempts", rest_name="mpls-rsvp-interface-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_oper_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-oper-status", rest_name="mpls-rsvp-interface-oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_interface_is_tunnel_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-is-tunnel-interface", rest_name="mpls-rsvp-interface-is-tunnel-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_interface_active_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-outsegs", rest_name="mpls-rsvp-interface-active-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_auth = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-auth", rest_name="mpls-rsvp-interface-auth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_interface_inactive_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-outsegs", rest_name="mpls-rsvp-interface-inactive-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls_rsvp_interface_name", rest_name="mpls_rsvp_interface_name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_s_refresh = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-s-refresh", rest_name="mpls-rsvp-interface-s-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-rsvp-interface', u'output', u'mpls-rsvp-interface', u'show-mpls-rsvp-interface-brief']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-rsvp-interface', u'output', u'mpls-rsvp-interface', u'show-mpls-rsvp-interface-brief']

  def _get_mpls_rsvp_interface_name(self):
    """
    Getter method for mpls_rsvp_interface_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_name (string)

    YANG Description: MPLS RSVP Interface name
    """
    return self.__mpls_rsvp_interface_name
      
  def _set_mpls_rsvp_interface_name(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_name() directly.

    YANG Description: MPLS RSVP Interface name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls_rsvp_interface_name", rest_name="mpls_rsvp_interface_name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls_rsvp_interface_name", rest_name="mpls_rsvp_interface_name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_name(self):
    self.__mpls_rsvp_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls_rsvp_interface_name", rest_name="mpls_rsvp_interface_name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_oper_status(self):
    """
    Getter method for mpls_rsvp_interface_oper_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_oper_status (boolean)

    YANG Description: Operational status of the RSVP interface
    """
    return self.__mpls_rsvp_interface_oper_status
      
  def _set_mpls_rsvp_interface_oper_status(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_oper_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_oper_status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_oper_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_oper_status() directly.

    YANG Description: Operational status of the RSVP interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-oper-status", rest_name="mpls-rsvp-interface-oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_oper_status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-oper-status", rest_name="mpls-rsvp-interface-oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_interface_oper_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_oper_status(self):
    self.__mpls_rsvp_interface_oper_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-oper-status", rest_name="mpls-rsvp-interface-oper-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_interface_auth(self):
    """
    Getter method for mpls_rsvp_interface_auth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_auth (boolean)

    YANG Description: Status of MPLS RSVP Interface Authentication
    """
    return self.__mpls_rsvp_interface_auth
      
  def _set_mpls_rsvp_interface_auth(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_auth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_auth (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_auth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_auth() directly.

    YANG Description: Status of MPLS RSVP Interface Authentication
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-auth", rest_name="mpls-rsvp-interface-auth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_auth must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-auth", rest_name="mpls-rsvp-interface-auth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_interface_auth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_auth(self):
    self.__mpls_rsvp_interface_auth = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-auth", rest_name="mpls-rsvp-interface-auth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_interface_reliable_msg(self):
    """
    Getter method for mpls_rsvp_interface_reliable_msg, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_reliable_msg (string)

    YANG Description: Status of MPLS RSVP interface Reliable Messaging
    """
    return self.__mpls_rsvp_interface_reliable_msg
      
  def _set_mpls_rsvp_interface_reliable_msg(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_reliable_msg, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_reliable_msg (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_reliable_msg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_reliable_msg() directly.

    YANG Description: Status of MPLS RSVP interface Reliable Messaging
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-reliable-msg", rest_name="mpls-rsvp-interface-reliable-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_reliable_msg must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-reliable-msg", rest_name="mpls-rsvp-interface-reliable-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_reliable_msg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_reliable_msg(self):
    self.__mpls_rsvp_interface_reliable_msg = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-reliable-msg", rest_name="mpls-rsvp-interface-reliable-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_bundle_msg(self):
    """
    Getter method for mpls_rsvp_interface_bundle_msg, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_bundle_msg (string)

    YANG Description: Status of MPLS RSVP interface Bundle Messaging
    """
    return self.__mpls_rsvp_interface_bundle_msg
      
  def _set_mpls_rsvp_interface_bundle_msg(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_bundle_msg, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_bundle_msg (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_bundle_msg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_bundle_msg() directly.

    YANG Description: Status of MPLS RSVP interface Bundle Messaging
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bundle-msg", rest_name="mpls-rsvp-interface-bundle-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_bundle_msg must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bundle-msg", rest_name="mpls-rsvp-interface-bundle-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_bundle_msg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_bundle_msg(self):
    self.__mpls_rsvp_interface_bundle_msg = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bundle-msg", rest_name="mpls-rsvp-interface-bundle-msg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_s_refresh(self):
    """
    Getter method for mpls_rsvp_interface_s_refresh, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_s_refresh (string)

    YANG Description: Status of MPLS RSVP interface Summary Refresh
    """
    return self.__mpls_rsvp_interface_s_refresh
      
  def _set_mpls_rsvp_interface_s_refresh(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_s_refresh, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_s_refresh (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_s_refresh is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_s_refresh() directly.

    YANG Description: Status of MPLS RSVP interface Summary Refresh
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-s-refresh", rest_name="mpls-rsvp-interface-s-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_s_refresh must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-s-refresh", rest_name="mpls-rsvp-interface-s-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_s_refresh = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_s_refresh(self):
    self.__mpls_rsvp_interface_s_refresh = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-s-refresh", rest_name="mpls-rsvp-interface-s-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_active_outsegs(self):
    """
    Getter method for mpls_rsvp_interface_active_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_active_outsegs (uint32)

    YANG Description: Number of Active Out Segments on the interface
    """
    return self.__mpls_rsvp_interface_active_outsegs
      
  def _set_mpls_rsvp_interface_active_outsegs(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_active_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_active_outsegs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_active_outsegs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_active_outsegs() directly.

    YANG Description: Number of Active Out Segments on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-outsegs", rest_name="mpls-rsvp-interface-active-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_active_outsegs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-outsegs", rest_name="mpls-rsvp-interface-active-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_active_outsegs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_active_outsegs(self):
    self.__mpls_rsvp_interface_active_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-outsegs", rest_name="mpls-rsvp-interface-active-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_inactive_outsegs(self):
    """
    Getter method for mpls_rsvp_interface_inactive_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_inactive_outsegs (uint32)

    YANG Description: Number of Inactive Out Segments on the interface
    """
    return self.__mpls_rsvp_interface_inactive_outsegs
      
  def _set_mpls_rsvp_interface_inactive_outsegs(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_inactive_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_inactive_outsegs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_inactive_outsegs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_inactive_outsegs() directly.

    YANG Description: Number of Inactive Out Segments on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-outsegs", rest_name="mpls-rsvp-interface-inactive-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_inactive_outsegs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-outsegs", rest_name="mpls-rsvp-interface-inactive-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_inactive_outsegs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_inactive_outsegs(self):
    self.__mpls_rsvp_interface_inactive_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-outsegs", rest_name="mpls-rsvp-interface-inactive-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_bw_resv_outsegs(self):
    """
    Getter method for mpls_rsvp_interface_bw_resv_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_bw_resv_outsegs (uint32)

    YANG Description: Number of Out Segments reserving bandwidth on the interface
    """
    return self.__mpls_rsvp_interface_bw_resv_outsegs
      
  def _set_mpls_rsvp_interface_bw_resv_outsegs(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_bw_resv_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_bw_resv_outsegs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_bw_resv_outsegs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_bw_resv_outsegs() directly.

    YANG Description: Number of Out Segments reserving bandwidth on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bw-resv-outsegs", rest_name="mpls-rsvp-interface-bw-resv-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_bw_resv_outsegs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bw-resv-outsegs", rest_name="mpls-rsvp-interface-bw-resv-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_bw_resv_outsegs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_bw_resv_outsegs(self):
    self.__mpls_rsvp_interface_bw_resv_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bw-resv-outsegs", rest_name="mpls-rsvp-interface-bw-resv-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_is_tunnel_interface(self):
    """
    Getter method for mpls_rsvp_interface_is_tunnel_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_is_tunnel_interface (boolean)

    YANG Description: Is the RSVP interface an MPLS tunnel interface
    """
    return self.__mpls_rsvp_interface_is_tunnel_interface
      
  def _set_mpls_rsvp_interface_is_tunnel_interface(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_is_tunnel_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_is_tunnel_interface (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_is_tunnel_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_is_tunnel_interface() directly.

    YANG Description: Is the RSVP interface an MPLS tunnel interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-is-tunnel-interface", rest_name="mpls-rsvp-interface-is-tunnel-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_is_tunnel_interface must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-is-tunnel-interface", rest_name="mpls-rsvp-interface-is-tunnel-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_interface_is_tunnel_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_is_tunnel_interface(self):
    self.__mpls_rsvp_interface_is_tunnel_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-is-tunnel-interface", rest_name="mpls-rsvp-interface-is-tunnel-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_interface_preempts(self):
    """
    Getter method for mpls_rsvp_interface_preempts, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_preempts (uint32)

    YANG Description: Number of Preemptions on the interface
    """
    return self.__mpls_rsvp_interface_preempts
      
  def _set_mpls_rsvp_interface_preempts(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_preempts, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_preempts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_preempts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_preempts() directly.

    YANG Description: Number of Preemptions on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-preempts", rest_name="mpls-rsvp-interface-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_preempts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-preempts", rest_name="mpls-rsvp-interface-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_preempts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_preempts(self):
    self.__mpls_rsvp_interface_preempts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-preempts", rest_name="mpls-rsvp-interface-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_soft_preempts(self):
    """
    Getter method for mpls_rsvp_interface_soft_preempts, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_soft_preempts (uint32)

    YANG Description: Number of Soft Preemptions on the interface
    """
    return self.__mpls_rsvp_interface_soft_preempts
      
  def _set_mpls_rsvp_interface_soft_preempts(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_soft_preempts, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_soft_preempts (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_soft_preempts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_soft_preempts() directly.

    YANG Description: Number of Soft Preemptions on the interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-soft-preempts", rest_name="mpls-rsvp-interface-soft-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_soft_preempts must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-soft-preempts", rest_name="mpls-rsvp-interface-soft-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_soft_preempts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_soft_preempts(self):
    self.__mpls_rsvp_interface_soft_preempts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-soft-preempts", rest_name="mpls-rsvp-interface-soft-preempts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_if_index(self):
    """
    Getter method for mpls_rsvp_interface_if_index, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_if_index (uint32)

    YANG Description: Interface index for the RSVP interface
    """
    return self.__mpls_rsvp_interface_if_index
      
  def _set_mpls_rsvp_interface_if_index(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_if_index, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface/output/mpls_rsvp_interface/show_mpls_rsvp_interface_brief/mpls_rsvp_interface_if_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_if_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_if_index() directly.

    YANG Description: Interface index for the RSVP interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-if-index", rest_name="mpls-rsvp-interface-if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_if_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-if-index", rest_name="mpls-rsvp-interface-if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_if_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_if_index(self):
    self.__mpls_rsvp_interface_if_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-if-index", rest_name="mpls-rsvp-interface-if-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)

  mpls_rsvp_interface_name = __builtin__.property(_get_mpls_rsvp_interface_name, _set_mpls_rsvp_interface_name)
  mpls_rsvp_interface_oper_status = __builtin__.property(_get_mpls_rsvp_interface_oper_status, _set_mpls_rsvp_interface_oper_status)
  mpls_rsvp_interface_auth = __builtin__.property(_get_mpls_rsvp_interface_auth, _set_mpls_rsvp_interface_auth)
  mpls_rsvp_interface_reliable_msg = __builtin__.property(_get_mpls_rsvp_interface_reliable_msg, _set_mpls_rsvp_interface_reliable_msg)
  mpls_rsvp_interface_bundle_msg = __builtin__.property(_get_mpls_rsvp_interface_bundle_msg, _set_mpls_rsvp_interface_bundle_msg)
  mpls_rsvp_interface_s_refresh = __builtin__.property(_get_mpls_rsvp_interface_s_refresh, _set_mpls_rsvp_interface_s_refresh)
  mpls_rsvp_interface_active_outsegs = __builtin__.property(_get_mpls_rsvp_interface_active_outsegs, _set_mpls_rsvp_interface_active_outsegs)
  mpls_rsvp_interface_inactive_outsegs = __builtin__.property(_get_mpls_rsvp_interface_inactive_outsegs, _set_mpls_rsvp_interface_inactive_outsegs)
  mpls_rsvp_interface_bw_resv_outsegs = __builtin__.property(_get_mpls_rsvp_interface_bw_resv_outsegs, _set_mpls_rsvp_interface_bw_resv_outsegs)
  mpls_rsvp_interface_is_tunnel_interface = __builtin__.property(_get_mpls_rsvp_interface_is_tunnel_interface, _set_mpls_rsvp_interface_is_tunnel_interface)
  mpls_rsvp_interface_preempts = __builtin__.property(_get_mpls_rsvp_interface_preempts, _set_mpls_rsvp_interface_preempts)
  mpls_rsvp_interface_soft_preempts = __builtin__.property(_get_mpls_rsvp_interface_soft_preempts, _set_mpls_rsvp_interface_soft_preempts)
  mpls_rsvp_interface_if_index = __builtin__.property(_get_mpls_rsvp_interface_if_index, _set_mpls_rsvp_interface_if_index)


  _pyangbind_elements = {'mpls_rsvp_interface_name': mpls_rsvp_interface_name, 'mpls_rsvp_interface_oper_status': mpls_rsvp_interface_oper_status, 'mpls_rsvp_interface_auth': mpls_rsvp_interface_auth, 'mpls_rsvp_interface_reliable_msg': mpls_rsvp_interface_reliable_msg, 'mpls_rsvp_interface_bundle_msg': mpls_rsvp_interface_bundle_msg, 'mpls_rsvp_interface_s_refresh': mpls_rsvp_interface_s_refresh, 'mpls_rsvp_interface_active_outsegs': mpls_rsvp_interface_active_outsegs, 'mpls_rsvp_interface_inactive_outsegs': mpls_rsvp_interface_inactive_outsegs, 'mpls_rsvp_interface_bw_resv_outsegs': mpls_rsvp_interface_bw_resv_outsegs, 'mpls_rsvp_interface_is_tunnel_interface': mpls_rsvp_interface_is_tunnel_interface, 'mpls_rsvp_interface_preempts': mpls_rsvp_interface_preempts, 'mpls_rsvp_interface_soft_preempts': mpls_rsvp_interface_soft_preempts, 'mpls_rsvp_interface_if_index': mpls_rsvp_interface_if_index, }


