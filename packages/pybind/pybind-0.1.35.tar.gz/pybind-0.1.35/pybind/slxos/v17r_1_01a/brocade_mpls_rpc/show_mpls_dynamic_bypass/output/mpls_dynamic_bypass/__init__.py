
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class mpls_dynamic_bypass(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-dynamic-bypass/output/mpls-dynamic-bypass. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__dbyp_config_enable','__dbyp_config_enable_all_interfaces','__dbyp_reoptimization_timer','__dbyp_max_bypasses_per_mp','__dbyp_max_bypasses','__dbyp_bypass_count',)

  _yang_name = 'mpls-dynamic-bypass'
  _rest_name = 'mpls-dynamic-bypass'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__dbyp_bypass_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-bypass-count", rest_name="dbyp-bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)
    self.__dbyp_max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses", rest_name="dbyp-max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)
    self.__dbyp_config_enable = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable", rest_name="dbyp-config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__dbyp_reoptimization_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dbyp-reoptimization-timer", rest_name="dbyp-reoptimization-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__dbyp_config_enable_all_interfaces = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable-all-interfaces", rest_name="dbyp-config-enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__dbyp_max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses-per-mp", rest_name="dbyp-max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-dynamic-bypass', u'output', u'mpls-dynamic-bypass']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-dynamic-bypass', u'output', u'mpls-dynamic-bypass']

  def _get_dbyp_config_enable(self):
    """
    Getter method for dbyp_config_enable, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_config_enable (uint8)

    YANG Description: Status of dynamic bypass
    """
    return self.__dbyp_config_enable
      
  def _set_dbyp_config_enable(self, v, load=False):
    """
    Setter method for dbyp_config_enable, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_config_enable (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dbyp_config_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dbyp_config_enable() directly.

    YANG Description: Status of dynamic bypass
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable", rest_name="dbyp-config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dbyp_config_enable must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable", rest_name="dbyp-config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__dbyp_config_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dbyp_config_enable(self):
    self.__dbyp_config_enable = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable", rest_name="dbyp-config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_dbyp_config_enable_all_interfaces(self):
    """
    Getter method for dbyp_config_enable_all_interfaces, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_config_enable_all_interfaces (uint8)

    YANG Description: dynamic bypass enable on all interfaces
    """
    return self.__dbyp_config_enable_all_interfaces
      
  def _set_dbyp_config_enable_all_interfaces(self, v, load=False):
    """
    Setter method for dbyp_config_enable_all_interfaces, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_config_enable_all_interfaces (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dbyp_config_enable_all_interfaces is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dbyp_config_enable_all_interfaces() directly.

    YANG Description: dynamic bypass enable on all interfaces
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable-all-interfaces", rest_name="dbyp-config-enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dbyp_config_enable_all_interfaces must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable-all-interfaces", rest_name="dbyp-config-enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__dbyp_config_enable_all_interfaces = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dbyp_config_enable_all_interfaces(self):
    self.__dbyp_config_enable_all_interfaces = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="dbyp-config-enable-all-interfaces", rest_name="dbyp-config-enable-all-interfaces", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_dbyp_reoptimization_timer(self):
    """
    Getter method for dbyp_reoptimization_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_reoptimization_timer (uint32)

    YANG Description: dynamic bypass reoptimization time
    """
    return self.__dbyp_reoptimization_timer
      
  def _set_dbyp_reoptimization_timer(self, v, load=False):
    """
    Setter method for dbyp_reoptimization_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_reoptimization_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dbyp_reoptimization_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dbyp_reoptimization_timer() directly.

    YANG Description: dynamic bypass reoptimization time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dbyp-reoptimization-timer", rest_name="dbyp-reoptimization-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dbyp_reoptimization_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dbyp-reoptimization-timer", rest_name="dbyp-reoptimization-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__dbyp_reoptimization_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dbyp_reoptimization_timer(self):
    self.__dbyp_reoptimization_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dbyp-reoptimization-timer", rest_name="dbyp-reoptimization-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_dbyp_max_bypasses_per_mp(self):
    """
    Getter method for dbyp_max_bypasses_per_mp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_max_bypasses_per_mp (uint16)

    YANG Description: dynamic bypass max bypasses per merge point
    """
    return self.__dbyp_max_bypasses_per_mp
      
  def _set_dbyp_max_bypasses_per_mp(self, v, load=False):
    """
    Setter method for dbyp_max_bypasses_per_mp, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_max_bypasses_per_mp (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dbyp_max_bypasses_per_mp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dbyp_max_bypasses_per_mp() directly.

    YANG Description: dynamic bypass max bypasses per merge point
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses-per-mp", rest_name="dbyp-max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dbyp_max_bypasses_per_mp must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses-per-mp", rest_name="dbyp-max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)""",
        })

    self.__dbyp_max_bypasses_per_mp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dbyp_max_bypasses_per_mp(self):
    self.__dbyp_max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses-per-mp", rest_name="dbyp-max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)


  def _get_dbyp_max_bypasses(self):
    """
    Getter method for dbyp_max_bypasses, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_max_bypasses (uint16)

    YANG Description: Dynamic bypass max allowed
    """
    return self.__dbyp_max_bypasses
      
  def _set_dbyp_max_bypasses(self, v, load=False):
    """
    Setter method for dbyp_max_bypasses, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_max_bypasses (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dbyp_max_bypasses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dbyp_max_bypasses() directly.

    YANG Description: Dynamic bypass max allowed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses", rest_name="dbyp-max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dbyp_max_bypasses must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses", rest_name="dbyp-max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)""",
        })

    self.__dbyp_max_bypasses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dbyp_max_bypasses(self):
    self.__dbyp_max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-max-bypasses", rest_name="dbyp-max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)


  def _get_dbyp_bypass_count(self):
    """
    Getter method for dbyp_bypass_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_bypass_count (uint16)

    YANG Description: Current number of dynamic bypasses
    """
    return self.__dbyp_bypass_count
      
  def _set_dbyp_bypass_count(self, v, load=False):
    """
    Setter method for dbyp_bypass_count, mapped from YANG variable /brocade_mpls_rpc/show_mpls_dynamic_bypass/output/mpls_dynamic_bypass/dbyp_bypass_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dbyp_bypass_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dbyp_bypass_count() directly.

    YANG Description: Current number of dynamic bypasses
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-bypass-count", rest_name="dbyp-bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dbyp_bypass_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-bypass-count", rest_name="dbyp-bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)""",
        })

    self.__dbyp_bypass_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dbyp_bypass_count(self):
    self.__dbyp_bypass_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="dbyp-bypass-count", rest_name="dbyp-bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint16', is_config=True)

  dbyp_config_enable = __builtin__.property(_get_dbyp_config_enable, _set_dbyp_config_enable)
  dbyp_config_enable_all_interfaces = __builtin__.property(_get_dbyp_config_enable_all_interfaces, _set_dbyp_config_enable_all_interfaces)
  dbyp_reoptimization_timer = __builtin__.property(_get_dbyp_reoptimization_timer, _set_dbyp_reoptimization_timer)
  dbyp_max_bypasses_per_mp = __builtin__.property(_get_dbyp_max_bypasses_per_mp, _set_dbyp_max_bypasses_per_mp)
  dbyp_max_bypasses = __builtin__.property(_get_dbyp_max_bypasses, _set_dbyp_max_bypasses)
  dbyp_bypass_count = __builtin__.property(_get_dbyp_bypass_count, _set_dbyp_bypass_count)


  _pyangbind_elements = {'dbyp_config_enable': dbyp_config_enable, 'dbyp_config_enable_all_interfaces': dbyp_config_enable_all_interfaces, 'dbyp_reoptimization_timer': dbyp_reoptimization_timer, 'dbyp_max_bypasses_per_mp': dbyp_max_bypasses_per_mp, 'dbyp_max_bypasses': dbyp_max_bypasses, 'dbyp_bypass_count': dbyp_bypass_count, }


