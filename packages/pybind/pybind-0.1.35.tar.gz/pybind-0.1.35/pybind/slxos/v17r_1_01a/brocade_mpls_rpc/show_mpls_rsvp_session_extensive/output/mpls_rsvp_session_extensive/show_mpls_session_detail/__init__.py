
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_mpls_session_detail(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-rsvp-session-extensive/output/mpls-rsvp-session-extensive/show-mpls-session-detail. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mpls_rsvp_session_tunnel_id','__mpls_rsvp_session_lsp_id','__mpls_rsvp_session_is_flap_lock','__mpls_rsvp_session_flap_lock','__mpls_rsvp_session_path_refresh','__mpls_rsvp_session_path_refresh_ttd','__mpls_rsvp_session_resv_refresh','__mpls_rsvp_session_resv_refresh_ttd','__mpls_rsvp_session_tspec_peak','__mpls_rsvp_session_tspec_rate','__mpls_rsvp_session_tspec_size','__mpls_rsvp_session_tspec_minimum','__mpls_rsvp_session_tspec_m','__mpls_rsvp_session_setup_priority','__mpls_rsvp_session_hold_priority','__mpls_rsvp_session_attr_flag','__mpls_rsvp_session_attr','__mpls_rsvp_session_soft_preemption_wait_timer','__mpls_rsvp_session_preemption_wait_timer','__mpls_rsvp_session_frr_detour','__mpls_rsvp_session_frr_facility','__mpls_rsvp_session_unknown_frr_flags','__mpls_rsvp_session_frr_setup_priority','__mpls_rsvp_session_frr_hold_priority','__mpls_rsvp_session_frr_fast_reroute_object','__mpls_rsvp_session_frr_bandwidth','__mpls_rsvp_session_frr_hop_limit','__mpls_rsvp_session_frr_protection_flags','__mpls_rsvp_session_frr_updown_transitions','__mpls_rsvp_session_frr_retries','__mpls_rsvp_session_protection_available','__mpls_rsvp_session_next_retry','__mpls_rsvp_session_frr_cost','__mpls_rsvp_session_frr_computation_mode','__mpls_rsvp_session_ero','__mpls_rsvp_session_rro','__mpls_rsvp_session_num_avoid_nodes_detour_sent','__mpls_rsvp_session_detour_sent_plr_ip','__mpls_rsvp_session_detour_sent_avoid_node_ip','__mpls_rsvp_session_num_avoid_nodes_detour_rcvd','__mpls_rsvp_session_detour_rcvd_plr_ip','__mpls_rsvp_session_detour_rcvd_avoid_node_ip','__mpls_rsvp_session_control_msgs','__mpls_rsvp_session_riding_bypass_present','__mpls_rsvp_session_riding_bypass_name',)

  _yang_name = 'show-mpls-session-detail'
  _rest_name = 'show-mpls-session-detail'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__mpls_rsvp_session_num_avoid_nodes_detour_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_lsp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-lsp-id", rest_name="mpls-rsvp-session-lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_detour = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-detour", rest_name="mpls-rsvp-session-frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_session_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-protection-available", rest_name="mpls-rsvp-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_session_soft_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-soft-preemption-wait-timer", rest_name="mpls-rsvp-session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_tspec_minimum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-minimum", rest_name="mpls-rsvp-session-tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-cost", rest_name="mpls-rsvp-session-frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_protection_flags = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-protection-flags", rest_name="mpls-rsvp-session-frr-protection-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_attr = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-attr", rest_name="mpls-rsvp-session-attr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_path_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh-ttd", rest_name="mpls-rsvp-session-path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hop-limit", rest_name="mpls-rsvp-session-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_resv_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh-ttd", rest_name="mpls-rsvp-session-resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_tspec_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-rate", rest_name="mpls-rsvp-session-tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_tunnel_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tunnel-id", rest_name="mpls-rsvp-session-tunnel-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_next_retry = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-next-retry", rest_name="mpls-rsvp-session-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_unknown_frr_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-unknown-frr-flags", rest_name="mpls-rsvp-session-unknown-frr-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_riding_bypass_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-name", rest_name="mpls-rsvp-session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_is_flap_lock = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-is-flap-lock", rest_name="mpls-rsvp-session-is-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_session_tspec_peak = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-peak", rest_name="mpls-rsvp-session-tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_num_avoid_nodes_detour_rcvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_detour_sent_avoid_node_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-avoid-node-ip", rest_name="mpls-rsvp-session-detour-sent-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__mpls_rsvp_session_ero = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-ero", rest_name="mpls-rsvp-session-ero", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-setup-priority", rest_name="mpls-rsvp-session-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-bandwidth", rest_name="mpls-rsvp-session-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_flap_lock = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-flap-lock", rest_name="mpls-rsvp-session-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_riding_bypass_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-present", rest_name="mpls-rsvp-session-riding-bypass-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_session_detour_rcvd_avoid_node_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", rest_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__mpls_rsvp_session_frr_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hold-priority", rest_name="mpls-rsvp-session-frr-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_path_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh", rest_name="mpls-rsvp-session-path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_detour_sent_plr_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-plr-ip", rest_name="mpls-rsvp-session-detour-sent-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__mpls_rsvp_session_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-hold-priority", rest_name="mpls-rsvp-session-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_frr_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-setup-priority", rest_name="mpls-rsvp-session-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_frr_updown_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-updown-transitions", rest_name="mpls-rsvp-session-frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_fast_reroute_object = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-fast-reroute-object", rest_name="mpls-rsvp-session-frr-fast-reroute-object", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_session_rro = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-rro", rest_name="mpls-rsvp-session-rro", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_detour_rcvd_plr_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-plr-ip", rest_name="mpls-rsvp-session-detour-rcvd-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__mpls_rsvp_session_frr_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-retries", rest_name="mpls-rsvp-session-frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_attr_flag = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-attr-flag", rest_name="mpls-rsvp-session-attr-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__mpls_rsvp_session_tspec_m = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-m", rest_name="mpls-rsvp-session-tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-preemption-wait-timer", rest_name="mpls-rsvp-session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_facility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-facility", rest_name="mpls-rsvp-session-frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_session_resv_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh", rest_name="mpls-rsvp-session-resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_frr_computation_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-computation-mode", rest_name="mpls-rsvp-session-frr-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_session_tspec_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-size", rest_name="mpls-rsvp-session-tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_session_control_msgs = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-control-msgs", rest_name="mpls-rsvp-session-control-msgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-rsvp-session-extensive', u'output', u'mpls-rsvp-session-extensive', u'show-mpls-session-detail']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-rsvp-session-extensive', u'output', u'mpls-rsvp-session-extensive', u'show-mpls-session-detail']

  def _get_mpls_rsvp_session_tunnel_id(self):
    """
    Getter method for mpls_rsvp_session_tunnel_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tunnel_id (uint32)

    YANG Description: Tunnel ID for RSVP session
    """
    return self.__mpls_rsvp_session_tunnel_id
      
  def _set_mpls_rsvp_session_tunnel_id(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_tunnel_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tunnel_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_tunnel_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_tunnel_id() directly.

    YANG Description: Tunnel ID for RSVP session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tunnel-id", rest_name="mpls-rsvp-session-tunnel-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_tunnel_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tunnel-id", rest_name="mpls-rsvp-session-tunnel-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_tunnel_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_tunnel_id(self):
    self.__mpls_rsvp_session_tunnel_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tunnel-id", rest_name="mpls-rsvp-session-tunnel-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_lsp_id(self):
    """
    Getter method for mpls_rsvp_session_lsp_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_lsp_id (uint32)

    YANG Description: LSP ID for RSVP session
    """
    return self.__mpls_rsvp_session_lsp_id
      
  def _set_mpls_rsvp_session_lsp_id(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_lsp_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_lsp_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_lsp_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_lsp_id() directly.

    YANG Description: LSP ID for RSVP session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-lsp-id", rest_name="mpls-rsvp-session-lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_lsp_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-lsp-id", rest_name="mpls-rsvp-session-lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_lsp_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_lsp_id(self):
    self.__mpls_rsvp_session_lsp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-lsp-id", rest_name="mpls-rsvp-session-lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_is_flap_lock(self):
    """
    Getter method for mpls_rsvp_session_is_flap_lock, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_is_flap_lock (boolean)

    YANG Description: Indicates if this session may be replaced by one arriving by an alternate route
    """
    return self.__mpls_rsvp_session_is_flap_lock
      
  def _set_mpls_rsvp_session_is_flap_lock(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_is_flap_lock, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_is_flap_lock (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_is_flap_lock is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_is_flap_lock() directly.

    YANG Description: Indicates if this session may be replaced by one arriving by an alternate route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-is-flap-lock", rest_name="mpls-rsvp-session-is-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_is_flap_lock must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-is-flap-lock", rest_name="mpls-rsvp-session-is-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_session_is_flap_lock = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_is_flap_lock(self):
    self.__mpls_rsvp_session_is_flap_lock = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-is-flap-lock", rest_name="mpls-rsvp-session-is-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_session_flap_lock(self):
    """
    Getter method for mpls_rsvp_session_flap_lock, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_flap_lock (uint32)

    YANG Description: Time left until this session may be replaced by one arriving by an alternate route
    """
    return self.__mpls_rsvp_session_flap_lock
      
  def _set_mpls_rsvp_session_flap_lock(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_flap_lock, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_flap_lock (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_flap_lock is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_flap_lock() directly.

    YANG Description: Time left until this session may be replaced by one arriving by an alternate route
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-flap-lock", rest_name="mpls-rsvp-session-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_flap_lock must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-flap-lock", rest_name="mpls-rsvp-session-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_flap_lock = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_flap_lock(self):
    self.__mpls_rsvp_session_flap_lock = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-flap-lock", rest_name="mpls-rsvp-session-flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_path_refresh(self):
    """
    Getter method for mpls_rsvp_session_path_refresh, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_path_refresh (uint32)

    YANG Description: Time left for PATH state refresh
    """
    return self.__mpls_rsvp_session_path_refresh
      
  def _set_mpls_rsvp_session_path_refresh(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_path_refresh, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_path_refresh (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_path_refresh is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_path_refresh() directly.

    YANG Description: Time left for PATH state refresh
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh", rest_name="mpls-rsvp-session-path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_path_refresh must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh", rest_name="mpls-rsvp-session-path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_path_refresh = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_path_refresh(self):
    self.__mpls_rsvp_session_path_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh", rest_name="mpls-rsvp-session-path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_path_refresh_ttd(self):
    """
    Getter method for mpls_rsvp_session_path_refresh_ttd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_path_refresh_ttd (uint32)

    YANG Description: Time left for PATH state's TTD
    """
    return self.__mpls_rsvp_session_path_refresh_ttd
      
  def _set_mpls_rsvp_session_path_refresh_ttd(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_path_refresh_ttd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_path_refresh_ttd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_path_refresh_ttd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_path_refresh_ttd() directly.

    YANG Description: Time left for PATH state's TTD
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh-ttd", rest_name="mpls-rsvp-session-path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_path_refresh_ttd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh-ttd", rest_name="mpls-rsvp-session-path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_path_refresh_ttd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_path_refresh_ttd(self):
    self.__mpls_rsvp_session_path_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-path-refresh-ttd", rest_name="mpls-rsvp-session-path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_resv_refresh(self):
    """
    Getter method for mpls_rsvp_session_resv_refresh, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_resv_refresh (uint32)

    YANG Description: Time left for RESV state refresh
    """
    return self.__mpls_rsvp_session_resv_refresh
      
  def _set_mpls_rsvp_session_resv_refresh(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_resv_refresh, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_resv_refresh (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_resv_refresh is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_resv_refresh() directly.

    YANG Description: Time left for RESV state refresh
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh", rest_name="mpls-rsvp-session-resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_resv_refresh must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh", rest_name="mpls-rsvp-session-resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_resv_refresh = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_resv_refresh(self):
    self.__mpls_rsvp_session_resv_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh", rest_name="mpls-rsvp-session-resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_resv_refresh_ttd(self):
    """
    Getter method for mpls_rsvp_session_resv_refresh_ttd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_resv_refresh_ttd (uint32)

    YANG Description: Time left for RESV state's TTD
    """
    return self.__mpls_rsvp_session_resv_refresh_ttd
      
  def _set_mpls_rsvp_session_resv_refresh_ttd(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_resv_refresh_ttd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_resv_refresh_ttd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_resv_refresh_ttd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_resv_refresh_ttd() directly.

    YANG Description: Time left for RESV state's TTD
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh-ttd", rest_name="mpls-rsvp-session-resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_resv_refresh_ttd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh-ttd", rest_name="mpls-rsvp-session-resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_resv_refresh_ttd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_resv_refresh_ttd(self):
    self.__mpls_rsvp_session_resv_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-resv-refresh-ttd", rest_name="mpls-rsvp-session-resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_tspec_peak(self):
    """
    Getter method for mpls_rsvp_session_tspec_peak, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_peak (uint32)

    YANG Description: RSVP session peak data rate in Kbps
    """
    return self.__mpls_rsvp_session_tspec_peak
      
  def _set_mpls_rsvp_session_tspec_peak(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_tspec_peak, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_peak (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_tspec_peak is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_tspec_peak() directly.

    YANG Description: RSVP session peak data rate in Kbps
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-peak", rest_name="mpls-rsvp-session-tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_tspec_peak must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-peak", rest_name="mpls-rsvp-session-tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_tspec_peak = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_tspec_peak(self):
    self.__mpls_rsvp_session_tspec_peak = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-peak", rest_name="mpls-rsvp-session-tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_tspec_rate(self):
    """
    Getter method for mpls_rsvp_session_tspec_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_rate (uint32)

    YANG Description: RSVP session Token bucket rate in Kbps
    """
    return self.__mpls_rsvp_session_tspec_rate
      
  def _set_mpls_rsvp_session_tspec_rate(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_tspec_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_tspec_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_tspec_rate() directly.

    YANG Description: RSVP session Token bucket rate in Kbps
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-rate", rest_name="mpls-rsvp-session-tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_tspec_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-rate", rest_name="mpls-rsvp-session-tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_tspec_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_tspec_rate(self):
    self.__mpls_rsvp_session_tspec_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-rate", rest_name="mpls-rsvp-session-tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_tspec_size(self):
    """
    Getter method for mpls_rsvp_session_tspec_size, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_size (uint32)

    YANG Description: RSVP session Token bucket size in Kb
    """
    return self.__mpls_rsvp_session_tspec_size
      
  def _set_mpls_rsvp_session_tspec_size(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_tspec_size, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_tspec_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_tspec_size() directly.

    YANG Description: RSVP session Token bucket size in Kb
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-size", rest_name="mpls-rsvp-session-tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_tspec_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-size", rest_name="mpls-rsvp-session-tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_tspec_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_tspec_size(self):
    self.__mpls_rsvp_session_tspec_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-size", rest_name="mpls-rsvp-session-tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_tspec_minimum(self):
    """
    Getter method for mpls_rsvp_session_tspec_minimum, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_minimum (uint32)

    YANG Description: RSVP session Minimum policied unit
    """
    return self.__mpls_rsvp_session_tspec_minimum
      
  def _set_mpls_rsvp_session_tspec_minimum(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_tspec_minimum, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_minimum (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_tspec_minimum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_tspec_minimum() directly.

    YANG Description: RSVP session Minimum policied unit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-minimum", rest_name="mpls-rsvp-session-tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_tspec_minimum must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-minimum", rest_name="mpls-rsvp-session-tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_tspec_minimum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_tspec_minimum(self):
    self.__mpls_rsvp_session_tspec_minimum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-minimum", rest_name="mpls-rsvp-session-tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_tspec_m(self):
    """
    Getter method for mpls_rsvp_session_tspec_m, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_m (uint32)

    YANG Description: RSVP session Maximum packet size
    """
    return self.__mpls_rsvp_session_tspec_m
      
  def _set_mpls_rsvp_session_tspec_m(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_tspec_m, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_tspec_m (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_tspec_m is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_tspec_m() directly.

    YANG Description: RSVP session Maximum packet size
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-m", rest_name="mpls-rsvp-session-tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_tspec_m must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-m", rest_name="mpls-rsvp-session-tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_tspec_m = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_tspec_m(self):
    self.__mpls_rsvp_session_tspec_m = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-tspec-m", rest_name="mpls-rsvp-session-tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_setup_priority(self):
    """
    Getter method for mpls_rsvp_session_setup_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_setup_priority (uint8)

    YANG Description: RSVP session setup priority
    """
    return self.__mpls_rsvp_session_setup_priority
      
  def _set_mpls_rsvp_session_setup_priority(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_setup_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_setup_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_setup_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_setup_priority() directly.

    YANG Description: RSVP session setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-setup-priority", rest_name="mpls-rsvp-session-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_setup_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-setup-priority", rest_name="mpls-rsvp-session-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_setup_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_setup_priority(self):
    self.__mpls_rsvp_session_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-setup-priority", rest_name="mpls-rsvp-session-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_hold_priority(self):
    """
    Getter method for mpls_rsvp_session_hold_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_hold_priority (uint8)

    YANG Description: RSVP session holding priority
    """
    return self.__mpls_rsvp_session_hold_priority
      
  def _set_mpls_rsvp_session_hold_priority(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_hold_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_hold_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_hold_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_hold_priority() directly.

    YANG Description: RSVP session holding priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-hold-priority", rest_name="mpls-rsvp-session-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_hold_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-hold-priority", rest_name="mpls-rsvp-session-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_hold_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_hold_priority(self):
    self.__mpls_rsvp_session_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-hold-priority", rest_name="mpls-rsvp-session-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_attr_flag(self):
    """
    Getter method for mpls_rsvp_session_attr_flag, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_attr_flag (uint8)

    YANG Description: RSVP session attributes flag
    """
    return self.__mpls_rsvp_session_attr_flag
      
  def _set_mpls_rsvp_session_attr_flag(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_attr_flag, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_attr_flag (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_attr_flag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_attr_flag() directly.

    YANG Description: RSVP session attributes flag
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-attr-flag", rest_name="mpls-rsvp-session-attr-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_attr_flag must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-attr-flag", rest_name="mpls-rsvp-session-attr-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_attr_flag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_attr_flag(self):
    self.__mpls_rsvp_session_attr_flag = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-attr-flag", rest_name="mpls-rsvp-session-attr-flag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_attr(self):
    """
    Getter method for mpls_rsvp_session_attr, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_attr (string)

    YANG Description: RSVP session attributes
    """
    return self.__mpls_rsvp_session_attr
      
  def _set_mpls_rsvp_session_attr(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_attr, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_attr (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_attr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_attr() directly.

    YANG Description: RSVP session attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-attr", rest_name="mpls-rsvp-session-attr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_attr must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-attr", rest_name="mpls-rsvp-session-attr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_attr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_attr(self):
    self.__mpls_rsvp_session_attr = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-attr", rest_name="mpls-rsvp-session-attr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_soft_preemption_wait_timer(self):
    """
    Getter method for mpls_rsvp_session_soft_preemption_wait_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_soft_preemption_wait_timer (uint32)

    YANG Description: Soft preemption wait timer expiry in seconds
    """
    return self.__mpls_rsvp_session_soft_preemption_wait_timer
      
  def _set_mpls_rsvp_session_soft_preemption_wait_timer(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_soft_preemption_wait_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_soft_preemption_wait_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_soft_preemption_wait_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_soft_preemption_wait_timer() directly.

    YANG Description: Soft preemption wait timer expiry in seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-soft-preemption-wait-timer", rest_name="mpls-rsvp-session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_soft_preemption_wait_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-soft-preemption-wait-timer", rest_name="mpls-rsvp-session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_soft_preemption_wait_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_soft_preemption_wait_timer(self):
    self.__mpls_rsvp_session_soft_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-soft-preemption-wait-timer", rest_name="mpls-rsvp-session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_preemption_wait_timer(self):
    """
    Getter method for mpls_rsvp_session_preemption_wait_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_preemption_wait_timer (uint32)

    YANG Description: Preemption wait timer expiry in seconds
    """
    return self.__mpls_rsvp_session_preemption_wait_timer
      
  def _set_mpls_rsvp_session_preemption_wait_timer(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_preemption_wait_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_preemption_wait_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_preemption_wait_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_preemption_wait_timer() directly.

    YANG Description: Preemption wait timer expiry in seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-preemption-wait-timer", rest_name="mpls-rsvp-session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_preemption_wait_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-preemption-wait-timer", rest_name="mpls-rsvp-session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_preemption_wait_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_preemption_wait_timer(self):
    self.__mpls_rsvp_session_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-preemption-wait-timer", rest_name="mpls-rsvp-session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_frr_detour(self):
    """
    Getter method for mpls_rsvp_session_frr_detour, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_detour (boolean)

    YANG Description: Indicates if the RSVP session is requesting FRR one-to-one detour protection
    """
    return self.__mpls_rsvp_session_frr_detour
      
  def _set_mpls_rsvp_session_frr_detour(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_detour, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_detour (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_detour is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_detour() directly.

    YANG Description: Indicates if the RSVP session is requesting FRR one-to-one detour protection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-detour", rest_name="mpls-rsvp-session-frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_detour must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-detour", rest_name="mpls-rsvp-session-frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_detour = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_detour(self):
    self.__mpls_rsvp_session_frr_detour = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-detour", rest_name="mpls-rsvp-session-frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_session_frr_facility(self):
    """
    Getter method for mpls_rsvp_session_frr_facility, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_facility (boolean)

    YANG Description: Indicates if the RSVP session is requesting FRR facility backup protection
    """
    return self.__mpls_rsvp_session_frr_facility
      
  def _set_mpls_rsvp_session_frr_facility(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_facility, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_facility (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_facility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_facility() directly.

    YANG Description: Indicates if the RSVP session is requesting FRR facility backup protection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-facility", rest_name="mpls-rsvp-session-frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_facility must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-facility", rest_name="mpls-rsvp-session-frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_facility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_facility(self):
    self.__mpls_rsvp_session_frr_facility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-facility", rest_name="mpls-rsvp-session-frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_session_unknown_frr_flags(self):
    """
    Getter method for mpls_rsvp_session_unknown_frr_flags, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_unknown_frr_flags (uint8)

    YANG Description: Indicates if the RSVP session is requesting and unknown backup mode protection
    """
    return self.__mpls_rsvp_session_unknown_frr_flags
      
  def _set_mpls_rsvp_session_unknown_frr_flags(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_unknown_frr_flags, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_unknown_frr_flags (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_unknown_frr_flags is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_unknown_frr_flags() directly.

    YANG Description: Indicates if the RSVP session is requesting and unknown backup mode protection
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-unknown-frr-flags", rest_name="mpls-rsvp-session-unknown-frr-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_unknown_frr_flags must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-unknown-frr-flags", rest_name="mpls-rsvp-session-unknown-frr-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_unknown_frr_flags = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_unknown_frr_flags(self):
    self.__mpls_rsvp_session_unknown_frr_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-unknown-frr-flags", rest_name="mpls-rsvp-session-unknown-frr-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_frr_setup_priority(self):
    """
    Getter method for mpls_rsvp_session_frr_setup_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_setup_priority (uint8)

    YANG Description: RSVP FRR session setup priority
    """
    return self.__mpls_rsvp_session_frr_setup_priority
      
  def _set_mpls_rsvp_session_frr_setup_priority(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_setup_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_setup_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_setup_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_setup_priority() directly.

    YANG Description: RSVP FRR session setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-setup-priority", rest_name="mpls-rsvp-session-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_setup_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-setup-priority", rest_name="mpls-rsvp-session-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_setup_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_setup_priority(self):
    self.__mpls_rsvp_session_frr_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-setup-priority", rest_name="mpls-rsvp-session-frr-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_frr_hold_priority(self):
    """
    Getter method for mpls_rsvp_session_frr_hold_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_hold_priority (uint8)

    YANG Description: RSVP FRR session holding priority
    """
    return self.__mpls_rsvp_session_frr_hold_priority
      
  def _set_mpls_rsvp_session_frr_hold_priority(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_hold_priority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_hold_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_hold_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_hold_priority() directly.

    YANG Description: RSVP FRR session holding priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hold-priority", rest_name="mpls-rsvp-session-frr-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_hold_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hold-priority", rest_name="mpls-rsvp-session-frr-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_hold_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_hold_priority(self):
    self.__mpls_rsvp_session_frr_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hold-priority", rest_name="mpls-rsvp-session-frr-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_frr_fast_reroute_object(self):
    """
    Getter method for mpls_rsvp_session_frr_fast_reroute_object, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_fast_reroute_object (boolean)

    YANG Description: Indiacates if a Fast Reroute object was received on the most recent PATH message
    """
    return self.__mpls_rsvp_session_frr_fast_reroute_object
      
  def _set_mpls_rsvp_session_frr_fast_reroute_object(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_fast_reroute_object, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_fast_reroute_object (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_fast_reroute_object is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_fast_reroute_object() directly.

    YANG Description: Indiacates if a Fast Reroute object was received on the most recent PATH message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-fast-reroute-object", rest_name="mpls-rsvp-session-frr-fast-reroute-object", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_fast_reroute_object must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-fast-reroute-object", rest_name="mpls-rsvp-session-frr-fast-reroute-object", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_fast_reroute_object = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_fast_reroute_object(self):
    self.__mpls_rsvp_session_frr_fast_reroute_object = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-frr-fast-reroute-object", rest_name="mpls-rsvp-session-frr-fast-reroute-object", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_session_frr_bandwidth(self):
    """
    Getter method for mpls_rsvp_session_frr_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_bandwidth (uint32)

    YANG Description: RSVP FRR session bandwidth in Kbps
    """
    return self.__mpls_rsvp_session_frr_bandwidth
      
  def _set_mpls_rsvp_session_frr_bandwidth(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_bandwidth() directly.

    YANG Description: RSVP FRR session bandwidth in Kbps
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-bandwidth", rest_name="mpls-rsvp-session-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-bandwidth", rest_name="mpls-rsvp-session-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_bandwidth(self):
    self.__mpls_rsvp_session_frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-bandwidth", rest_name="mpls-rsvp-session-frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_frr_hop_limit(self):
    """
    Getter method for mpls_rsvp_session_frr_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_hop_limit (uint8)

    YANG Description: RSVP FRR session hop limit
    """
    return self.__mpls_rsvp_session_frr_hop_limit
      
  def _set_mpls_rsvp_session_frr_hop_limit(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_hop_limit() directly.

    YANG Description: RSVP FRR session hop limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hop-limit", rest_name="mpls-rsvp-session-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hop-limit", rest_name="mpls-rsvp-session-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_hop_limit(self):
    self.__mpls_rsvp_session_frr_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="mpls-rsvp-session-frr-hop-limit", rest_name="mpls-rsvp-session-frr-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_mpls_rsvp_session_frr_protection_flags(self):
    """
    Getter method for mpls_rsvp_session_frr_protection_flags, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_protection_flags (string)

    YANG Description: RSVP session's FRR protection attributes
    """
    return self.__mpls_rsvp_session_frr_protection_flags
      
  def _set_mpls_rsvp_session_frr_protection_flags(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_protection_flags, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_protection_flags (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_protection_flags is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_protection_flags() directly.

    YANG Description: RSVP session's FRR protection attributes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-protection-flags", rest_name="mpls-rsvp-session-frr-protection-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_protection_flags must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-protection-flags", rest_name="mpls-rsvp-session-frr-protection-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_protection_flags = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_protection_flags(self):
    self.__mpls_rsvp_session_frr_protection_flags = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-protection-flags", rest_name="mpls-rsvp-session-frr-protection-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_frr_updown_transitions(self):
    """
    Getter method for mpls_rsvp_session_frr_updown_transitions, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_updown_transitions (uint32)

    YANG Description: Number of up/down transitions for the backup LSP
    """
    return self.__mpls_rsvp_session_frr_updown_transitions
      
  def _set_mpls_rsvp_session_frr_updown_transitions(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_updown_transitions, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_updown_transitions (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_updown_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_updown_transitions() directly.

    YANG Description: Number of up/down transitions for the backup LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-updown-transitions", rest_name="mpls-rsvp-session-frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_updown_transitions must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-updown-transitions", rest_name="mpls-rsvp-session-frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_updown_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_updown_transitions(self):
    self.__mpls_rsvp_session_frr_updown_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-updown-transitions", rest_name="mpls-rsvp-session-frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_frr_retries(self):
    """
    Getter method for mpls_rsvp_session_frr_retries, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_retries (uint32)

    YANG Description: Number of retries for the backup LSP
    """
    return self.__mpls_rsvp_session_frr_retries
      
  def _set_mpls_rsvp_session_frr_retries(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_retries, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_retries (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_retries() directly.

    YANG Description: Number of retries for the backup LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-retries", rest_name="mpls-rsvp-session-frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_retries must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-retries", rest_name="mpls-rsvp-session-frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_retries(self):
    self.__mpls_rsvp_session_frr_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-retries", rest_name="mpls-rsvp-session-frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_protection_available(self):
    """
    Getter method for mpls_rsvp_session_protection_available, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_protection_available (boolean)

    YANG Description: Indicates if local protection is available
    """
    return self.__mpls_rsvp_session_protection_available
      
  def _set_mpls_rsvp_session_protection_available(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_protection_available, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_protection_available (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_protection_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_protection_available() directly.

    YANG Description: Indicates if local protection is available
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-protection-available", rest_name="mpls-rsvp-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_protection_available must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-protection-available", rest_name="mpls-rsvp-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_session_protection_available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_protection_available(self):
    self.__mpls_rsvp_session_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-protection-available", rest_name="mpls-rsvp-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_session_next_retry(self):
    """
    Getter method for mpls_rsvp_session_next_retry, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_next_retry (uint32)

    YANG Description: Time until next retry in seconds
    """
    return self.__mpls_rsvp_session_next_retry
      
  def _set_mpls_rsvp_session_next_retry(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_next_retry, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_next_retry (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_next_retry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_next_retry() directly.

    YANG Description: Time until next retry in seconds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-next-retry", rest_name="mpls-rsvp-session-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_next_retry must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-next-retry", rest_name="mpls-rsvp-session-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_next_retry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_next_retry(self):
    self.__mpls_rsvp_session_next_retry = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-next-retry", rest_name="mpls-rsvp-session-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_frr_cost(self):
    """
    Getter method for mpls_rsvp_session_frr_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_cost (uint32)

    YANG Description: Path cost for backup LSP
    """
    return self.__mpls_rsvp_session_frr_cost
      
  def _set_mpls_rsvp_session_frr_cost(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_cost() directly.

    YANG Description: Path cost for backup LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-cost", rest_name="mpls-rsvp-session-frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-cost", rest_name="mpls-rsvp-session-frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_cost(self):
    self.__mpls_rsvp_session_frr_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-frr-cost", rest_name="mpls-rsvp-session-frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_frr_computation_mode(self):
    """
    Getter method for mpls_rsvp_session_frr_computation_mode, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_computation_mode (string)

    YANG Description: Path cspf-group computation-mode for backup
    """
    return self.__mpls_rsvp_session_frr_computation_mode
      
  def _set_mpls_rsvp_session_frr_computation_mode(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_frr_computation_mode, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_frr_computation_mode (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_frr_computation_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_frr_computation_mode() directly.

    YANG Description: Path cspf-group computation-mode for backup
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-computation-mode", rest_name="mpls-rsvp-session-frr-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_frr_computation_mode must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-computation-mode", rest_name="mpls-rsvp-session-frr-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_frr_computation_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_frr_computation_mode(self):
    self.__mpls_rsvp_session_frr_computation_mode = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-frr-computation-mode", rest_name="mpls-rsvp-session-frr-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_ero(self):
    """
    Getter method for mpls_rsvp_session_ero, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_ero (string)

    YANG Description: Explicit path hop
    """
    return self.__mpls_rsvp_session_ero
      
  def _set_mpls_rsvp_session_ero(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_ero, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_ero (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_ero is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_ero() directly.

    YANG Description: Explicit path hop
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-ero", rest_name="mpls-rsvp-session-ero", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_ero must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-ero", rest_name="mpls-rsvp-session-ero", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_ero = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_ero(self):
    self.__mpls_rsvp_session_ero = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-ero", rest_name="mpls-rsvp-session-ero", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_rro(self):
    """
    Getter method for mpls_rsvp_session_rro, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_rro (string)

    YANG Description: Received RRO
    """
    return self.__mpls_rsvp_session_rro
      
  def _set_mpls_rsvp_session_rro(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_rro, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_rro (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_rro is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_rro() directly.

    YANG Description: Received RRO
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-rro", rest_name="mpls-rsvp-session-rro", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_rro must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-rro", rest_name="mpls-rsvp-session-rro", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_rro = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_rro(self):
    self.__mpls_rsvp_session_rro = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-rro", rest_name="mpls-rsvp-session-rro", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_num_avoid_nodes_detour_sent(self):
    """
    Getter method for mpls_rsvp_session_num_avoid_nodes_detour_sent, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_num_avoid_nodes_detour_sent (uint32)

    YANG Description: Detour Sent: Number of PLR and Avoid Node ID pair(s)
    """
    return self.__mpls_rsvp_session_num_avoid_nodes_detour_sent
      
  def _set_mpls_rsvp_session_num_avoid_nodes_detour_sent(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_num_avoid_nodes_detour_sent, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_num_avoid_nodes_detour_sent (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_num_avoid_nodes_detour_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_num_avoid_nodes_detour_sent() directly.

    YANG Description: Detour Sent: Number of PLR and Avoid Node ID pair(s)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_num_avoid_nodes_detour_sent must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_num_avoid_nodes_detour_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_num_avoid_nodes_detour_sent(self):
    self.__mpls_rsvp_session_num_avoid_nodes_detour_sent = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_detour_sent_plr_ip(self):
    """
    Getter method for mpls_rsvp_session_detour_sent_plr_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_sent_plr_ip (inet:ipv4-address)

    YANG Description: Detour Sent (Avoid Node): PLR IP
    """
    return self.__mpls_rsvp_session_detour_sent_plr_ip
      
  def _set_mpls_rsvp_session_detour_sent_plr_ip(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_detour_sent_plr_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_sent_plr_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_detour_sent_plr_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_detour_sent_plr_ip() directly.

    YANG Description: Detour Sent (Avoid Node): PLR IP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-plr-ip", rest_name="mpls-rsvp-session-detour-sent-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_detour_sent_plr_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-plr-ip", rest_name="mpls-rsvp-session-detour-sent-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__mpls_rsvp_session_detour_sent_plr_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_detour_sent_plr_ip(self):
    self.__mpls_rsvp_session_detour_sent_plr_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-plr-ip", rest_name="mpls-rsvp-session-detour-sent-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_mpls_rsvp_session_detour_sent_avoid_node_ip(self):
    """
    Getter method for mpls_rsvp_session_detour_sent_avoid_node_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_sent_avoid_node_ip (inet:ipv4-address)

    YANG Description: Detour Sent (Avoid Node): Avoid Node ID
    """
    return self.__mpls_rsvp_session_detour_sent_avoid_node_ip
      
  def _set_mpls_rsvp_session_detour_sent_avoid_node_ip(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_detour_sent_avoid_node_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_sent_avoid_node_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_detour_sent_avoid_node_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_detour_sent_avoid_node_ip() directly.

    YANG Description: Detour Sent (Avoid Node): Avoid Node ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-avoid-node-ip", rest_name="mpls-rsvp-session-detour-sent-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_detour_sent_avoid_node_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-avoid-node-ip", rest_name="mpls-rsvp-session-detour-sent-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__mpls_rsvp_session_detour_sent_avoid_node_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_detour_sent_avoid_node_ip(self):
    self.__mpls_rsvp_session_detour_sent_avoid_node_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-sent-avoid-node-ip", rest_name="mpls-rsvp-session-detour-sent-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_mpls_rsvp_session_num_avoid_nodes_detour_rcvd(self):
    """
    Getter method for mpls_rsvp_session_num_avoid_nodes_detour_rcvd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_num_avoid_nodes_detour_rcvd (uint32)

    YANG Description: Detour Rcvd: Number of PLR and Avoid Node ID pair(s)
    """
    return self.__mpls_rsvp_session_num_avoid_nodes_detour_rcvd
      
  def _set_mpls_rsvp_session_num_avoid_nodes_detour_rcvd(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_num_avoid_nodes_detour_rcvd, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_num_avoid_nodes_detour_rcvd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_num_avoid_nodes_detour_rcvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_num_avoid_nodes_detour_rcvd() directly.

    YANG Description: Detour Rcvd: Number of PLR and Avoid Node ID pair(s)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_num_avoid_nodes_detour_rcvd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_session_num_avoid_nodes_detour_rcvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_num_avoid_nodes_detour_rcvd(self):
    self.__mpls_rsvp_session_num_avoid_nodes_detour_rcvd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", rest_name="mpls-rsvp-session-num-avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_session_detour_rcvd_plr_ip(self):
    """
    Getter method for mpls_rsvp_session_detour_rcvd_plr_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_rcvd_plr_ip (inet:ipv4-address)

    YANG Description: Detour Rcvd (Avoid Node): PLR IP
    """
    return self.__mpls_rsvp_session_detour_rcvd_plr_ip
      
  def _set_mpls_rsvp_session_detour_rcvd_plr_ip(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_detour_rcvd_plr_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_rcvd_plr_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_detour_rcvd_plr_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_detour_rcvd_plr_ip() directly.

    YANG Description: Detour Rcvd (Avoid Node): PLR IP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-plr-ip", rest_name="mpls-rsvp-session-detour-rcvd-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_detour_rcvd_plr_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-plr-ip", rest_name="mpls-rsvp-session-detour-rcvd-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__mpls_rsvp_session_detour_rcvd_plr_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_detour_rcvd_plr_ip(self):
    self.__mpls_rsvp_session_detour_rcvd_plr_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-plr-ip", rest_name="mpls-rsvp-session-detour-rcvd-plr-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_mpls_rsvp_session_detour_rcvd_avoid_node_ip(self):
    """
    Getter method for mpls_rsvp_session_detour_rcvd_avoid_node_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_rcvd_avoid_node_ip (inet:ipv4-address)

    YANG Description: Detour Rcvd (Avoid Node): Avoid Node ID
    """
    return self.__mpls_rsvp_session_detour_rcvd_avoid_node_ip
      
  def _set_mpls_rsvp_session_detour_rcvd_avoid_node_ip(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_detour_rcvd_avoid_node_ip, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_detour_rcvd_avoid_node_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_detour_rcvd_avoid_node_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_detour_rcvd_avoid_node_ip() directly.

    YANG Description: Detour Rcvd (Avoid Node): Avoid Node ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", rest_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_detour_rcvd_avoid_node_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", rest_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__mpls_rsvp_session_detour_rcvd_avoid_node_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_detour_rcvd_avoid_node_ip(self):
    self.__mpls_rsvp_session_detour_rcvd_avoid_node_ip = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", rest_name="mpls-rsvp-session-detour-rcvd-avoid-node-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_mpls_rsvp_session_control_msgs(self):
    """
    Getter method for mpls_rsvp_session_control_msgs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_control_msgs (string)

    YANG Description: Details of RSVP session control messages
    """
    return self.__mpls_rsvp_session_control_msgs
      
  def _set_mpls_rsvp_session_control_msgs(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_control_msgs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_control_msgs (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_control_msgs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_control_msgs() directly.

    YANG Description: Details of RSVP session control messages
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-control-msgs", rest_name="mpls-rsvp-session-control-msgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_control_msgs must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-control-msgs", rest_name="mpls-rsvp-session-control-msgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_control_msgs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_control_msgs(self):
    self.__mpls_rsvp_session_control_msgs = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-control-msgs", rest_name="mpls-rsvp-session-control-msgs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_session_riding_bypass_present(self):
    """
    Getter method for mpls_rsvp_session_riding_bypass_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_riding_bypass_present (boolean)

    YANG Description: Indicates if the backup path is riding over a bypass LSP
    """
    return self.__mpls_rsvp_session_riding_bypass_present
      
  def _set_mpls_rsvp_session_riding_bypass_present(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_riding_bypass_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_riding_bypass_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_riding_bypass_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_riding_bypass_present() directly.

    YANG Description: Indicates if the backup path is riding over a bypass LSP
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-present", rest_name="mpls-rsvp-session-riding-bypass-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_riding_bypass_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-present", rest_name="mpls-rsvp-session-riding-bypass-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_session_riding_bypass_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_riding_bypass_present(self):
    self.__mpls_rsvp_session_riding_bypass_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-present", rest_name="mpls-rsvp-session-riding-bypass-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_session_riding_bypass_name(self):
    """
    Getter method for mpls_rsvp_session_riding_bypass_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_riding_bypass_name (string)

    YANG Description: Name of the bypass LSP on which the backup path is riding
    """
    return self.__mpls_rsvp_session_riding_bypass_name
      
  def _set_mpls_rsvp_session_riding_bypass_name(self, v, load=False):
    """
    Setter method for mpls_rsvp_session_riding_bypass_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_session_extensive/output/mpls_rsvp_session_extensive/show_mpls_session_detail/mpls_rsvp_session_riding_bypass_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_session_riding_bypass_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_session_riding_bypass_name() directly.

    YANG Description: Name of the bypass LSP on which the backup path is riding
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-name", rest_name="mpls-rsvp-session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_session_riding_bypass_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-name", rest_name="mpls-rsvp-session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_session_riding_bypass_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_session_riding_bypass_name(self):
    self.__mpls_rsvp_session_riding_bypass_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-session-riding-bypass-name", rest_name="mpls-rsvp-session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

  mpls_rsvp_session_tunnel_id = __builtin__.property(_get_mpls_rsvp_session_tunnel_id, _set_mpls_rsvp_session_tunnel_id)
  mpls_rsvp_session_lsp_id = __builtin__.property(_get_mpls_rsvp_session_lsp_id, _set_mpls_rsvp_session_lsp_id)
  mpls_rsvp_session_is_flap_lock = __builtin__.property(_get_mpls_rsvp_session_is_flap_lock, _set_mpls_rsvp_session_is_flap_lock)
  mpls_rsvp_session_flap_lock = __builtin__.property(_get_mpls_rsvp_session_flap_lock, _set_mpls_rsvp_session_flap_lock)
  mpls_rsvp_session_path_refresh = __builtin__.property(_get_mpls_rsvp_session_path_refresh, _set_mpls_rsvp_session_path_refresh)
  mpls_rsvp_session_path_refresh_ttd = __builtin__.property(_get_mpls_rsvp_session_path_refresh_ttd, _set_mpls_rsvp_session_path_refresh_ttd)
  mpls_rsvp_session_resv_refresh = __builtin__.property(_get_mpls_rsvp_session_resv_refresh, _set_mpls_rsvp_session_resv_refresh)
  mpls_rsvp_session_resv_refresh_ttd = __builtin__.property(_get_mpls_rsvp_session_resv_refresh_ttd, _set_mpls_rsvp_session_resv_refresh_ttd)
  mpls_rsvp_session_tspec_peak = __builtin__.property(_get_mpls_rsvp_session_tspec_peak, _set_mpls_rsvp_session_tspec_peak)
  mpls_rsvp_session_tspec_rate = __builtin__.property(_get_mpls_rsvp_session_tspec_rate, _set_mpls_rsvp_session_tspec_rate)
  mpls_rsvp_session_tspec_size = __builtin__.property(_get_mpls_rsvp_session_tspec_size, _set_mpls_rsvp_session_tspec_size)
  mpls_rsvp_session_tspec_minimum = __builtin__.property(_get_mpls_rsvp_session_tspec_minimum, _set_mpls_rsvp_session_tspec_minimum)
  mpls_rsvp_session_tspec_m = __builtin__.property(_get_mpls_rsvp_session_tspec_m, _set_mpls_rsvp_session_tspec_m)
  mpls_rsvp_session_setup_priority = __builtin__.property(_get_mpls_rsvp_session_setup_priority, _set_mpls_rsvp_session_setup_priority)
  mpls_rsvp_session_hold_priority = __builtin__.property(_get_mpls_rsvp_session_hold_priority, _set_mpls_rsvp_session_hold_priority)
  mpls_rsvp_session_attr_flag = __builtin__.property(_get_mpls_rsvp_session_attr_flag, _set_mpls_rsvp_session_attr_flag)
  mpls_rsvp_session_attr = __builtin__.property(_get_mpls_rsvp_session_attr, _set_mpls_rsvp_session_attr)
  mpls_rsvp_session_soft_preemption_wait_timer = __builtin__.property(_get_mpls_rsvp_session_soft_preemption_wait_timer, _set_mpls_rsvp_session_soft_preemption_wait_timer)
  mpls_rsvp_session_preemption_wait_timer = __builtin__.property(_get_mpls_rsvp_session_preemption_wait_timer, _set_mpls_rsvp_session_preemption_wait_timer)
  mpls_rsvp_session_frr_detour = __builtin__.property(_get_mpls_rsvp_session_frr_detour, _set_mpls_rsvp_session_frr_detour)
  mpls_rsvp_session_frr_facility = __builtin__.property(_get_mpls_rsvp_session_frr_facility, _set_mpls_rsvp_session_frr_facility)
  mpls_rsvp_session_unknown_frr_flags = __builtin__.property(_get_mpls_rsvp_session_unknown_frr_flags, _set_mpls_rsvp_session_unknown_frr_flags)
  mpls_rsvp_session_frr_setup_priority = __builtin__.property(_get_mpls_rsvp_session_frr_setup_priority, _set_mpls_rsvp_session_frr_setup_priority)
  mpls_rsvp_session_frr_hold_priority = __builtin__.property(_get_mpls_rsvp_session_frr_hold_priority, _set_mpls_rsvp_session_frr_hold_priority)
  mpls_rsvp_session_frr_fast_reroute_object = __builtin__.property(_get_mpls_rsvp_session_frr_fast_reroute_object, _set_mpls_rsvp_session_frr_fast_reroute_object)
  mpls_rsvp_session_frr_bandwidth = __builtin__.property(_get_mpls_rsvp_session_frr_bandwidth, _set_mpls_rsvp_session_frr_bandwidth)
  mpls_rsvp_session_frr_hop_limit = __builtin__.property(_get_mpls_rsvp_session_frr_hop_limit, _set_mpls_rsvp_session_frr_hop_limit)
  mpls_rsvp_session_frr_protection_flags = __builtin__.property(_get_mpls_rsvp_session_frr_protection_flags, _set_mpls_rsvp_session_frr_protection_flags)
  mpls_rsvp_session_frr_updown_transitions = __builtin__.property(_get_mpls_rsvp_session_frr_updown_transitions, _set_mpls_rsvp_session_frr_updown_transitions)
  mpls_rsvp_session_frr_retries = __builtin__.property(_get_mpls_rsvp_session_frr_retries, _set_mpls_rsvp_session_frr_retries)
  mpls_rsvp_session_protection_available = __builtin__.property(_get_mpls_rsvp_session_protection_available, _set_mpls_rsvp_session_protection_available)
  mpls_rsvp_session_next_retry = __builtin__.property(_get_mpls_rsvp_session_next_retry, _set_mpls_rsvp_session_next_retry)
  mpls_rsvp_session_frr_cost = __builtin__.property(_get_mpls_rsvp_session_frr_cost, _set_mpls_rsvp_session_frr_cost)
  mpls_rsvp_session_frr_computation_mode = __builtin__.property(_get_mpls_rsvp_session_frr_computation_mode, _set_mpls_rsvp_session_frr_computation_mode)
  mpls_rsvp_session_ero = __builtin__.property(_get_mpls_rsvp_session_ero, _set_mpls_rsvp_session_ero)
  mpls_rsvp_session_rro = __builtin__.property(_get_mpls_rsvp_session_rro, _set_mpls_rsvp_session_rro)
  mpls_rsvp_session_num_avoid_nodes_detour_sent = __builtin__.property(_get_mpls_rsvp_session_num_avoid_nodes_detour_sent, _set_mpls_rsvp_session_num_avoid_nodes_detour_sent)
  mpls_rsvp_session_detour_sent_plr_ip = __builtin__.property(_get_mpls_rsvp_session_detour_sent_plr_ip, _set_mpls_rsvp_session_detour_sent_plr_ip)
  mpls_rsvp_session_detour_sent_avoid_node_ip = __builtin__.property(_get_mpls_rsvp_session_detour_sent_avoid_node_ip, _set_mpls_rsvp_session_detour_sent_avoid_node_ip)
  mpls_rsvp_session_num_avoid_nodes_detour_rcvd = __builtin__.property(_get_mpls_rsvp_session_num_avoid_nodes_detour_rcvd, _set_mpls_rsvp_session_num_avoid_nodes_detour_rcvd)
  mpls_rsvp_session_detour_rcvd_plr_ip = __builtin__.property(_get_mpls_rsvp_session_detour_rcvd_plr_ip, _set_mpls_rsvp_session_detour_rcvd_plr_ip)
  mpls_rsvp_session_detour_rcvd_avoid_node_ip = __builtin__.property(_get_mpls_rsvp_session_detour_rcvd_avoid_node_ip, _set_mpls_rsvp_session_detour_rcvd_avoid_node_ip)
  mpls_rsvp_session_control_msgs = __builtin__.property(_get_mpls_rsvp_session_control_msgs, _set_mpls_rsvp_session_control_msgs)
  mpls_rsvp_session_riding_bypass_present = __builtin__.property(_get_mpls_rsvp_session_riding_bypass_present, _set_mpls_rsvp_session_riding_bypass_present)
  mpls_rsvp_session_riding_bypass_name = __builtin__.property(_get_mpls_rsvp_session_riding_bypass_name, _set_mpls_rsvp_session_riding_bypass_name)


  _pyangbind_elements = {'mpls_rsvp_session_tunnel_id': mpls_rsvp_session_tunnel_id, 'mpls_rsvp_session_lsp_id': mpls_rsvp_session_lsp_id, 'mpls_rsvp_session_is_flap_lock': mpls_rsvp_session_is_flap_lock, 'mpls_rsvp_session_flap_lock': mpls_rsvp_session_flap_lock, 'mpls_rsvp_session_path_refresh': mpls_rsvp_session_path_refresh, 'mpls_rsvp_session_path_refresh_ttd': mpls_rsvp_session_path_refresh_ttd, 'mpls_rsvp_session_resv_refresh': mpls_rsvp_session_resv_refresh, 'mpls_rsvp_session_resv_refresh_ttd': mpls_rsvp_session_resv_refresh_ttd, 'mpls_rsvp_session_tspec_peak': mpls_rsvp_session_tspec_peak, 'mpls_rsvp_session_tspec_rate': mpls_rsvp_session_tspec_rate, 'mpls_rsvp_session_tspec_size': mpls_rsvp_session_tspec_size, 'mpls_rsvp_session_tspec_minimum': mpls_rsvp_session_tspec_minimum, 'mpls_rsvp_session_tspec_m': mpls_rsvp_session_tspec_m, 'mpls_rsvp_session_setup_priority': mpls_rsvp_session_setup_priority, 'mpls_rsvp_session_hold_priority': mpls_rsvp_session_hold_priority, 'mpls_rsvp_session_attr_flag': mpls_rsvp_session_attr_flag, 'mpls_rsvp_session_attr': mpls_rsvp_session_attr, 'mpls_rsvp_session_soft_preemption_wait_timer': mpls_rsvp_session_soft_preemption_wait_timer, 'mpls_rsvp_session_preemption_wait_timer': mpls_rsvp_session_preemption_wait_timer, 'mpls_rsvp_session_frr_detour': mpls_rsvp_session_frr_detour, 'mpls_rsvp_session_frr_facility': mpls_rsvp_session_frr_facility, 'mpls_rsvp_session_unknown_frr_flags': mpls_rsvp_session_unknown_frr_flags, 'mpls_rsvp_session_frr_setup_priority': mpls_rsvp_session_frr_setup_priority, 'mpls_rsvp_session_frr_hold_priority': mpls_rsvp_session_frr_hold_priority, 'mpls_rsvp_session_frr_fast_reroute_object': mpls_rsvp_session_frr_fast_reroute_object, 'mpls_rsvp_session_frr_bandwidth': mpls_rsvp_session_frr_bandwidth, 'mpls_rsvp_session_frr_hop_limit': mpls_rsvp_session_frr_hop_limit, 'mpls_rsvp_session_frr_protection_flags': mpls_rsvp_session_frr_protection_flags, 'mpls_rsvp_session_frr_updown_transitions': mpls_rsvp_session_frr_updown_transitions, 'mpls_rsvp_session_frr_retries': mpls_rsvp_session_frr_retries, 'mpls_rsvp_session_protection_available': mpls_rsvp_session_protection_available, 'mpls_rsvp_session_next_retry': mpls_rsvp_session_next_retry, 'mpls_rsvp_session_frr_cost': mpls_rsvp_session_frr_cost, 'mpls_rsvp_session_frr_computation_mode': mpls_rsvp_session_frr_computation_mode, 'mpls_rsvp_session_ero': mpls_rsvp_session_ero, 'mpls_rsvp_session_rro': mpls_rsvp_session_rro, 'mpls_rsvp_session_num_avoid_nodes_detour_sent': mpls_rsvp_session_num_avoid_nodes_detour_sent, 'mpls_rsvp_session_detour_sent_plr_ip': mpls_rsvp_session_detour_sent_plr_ip, 'mpls_rsvp_session_detour_sent_avoid_node_ip': mpls_rsvp_session_detour_sent_avoid_node_ip, 'mpls_rsvp_session_num_avoid_nodes_detour_rcvd': mpls_rsvp_session_num_avoid_nodes_detour_rcvd, 'mpls_rsvp_session_detour_rcvd_plr_ip': mpls_rsvp_session_detour_rcvd_plr_ip, 'mpls_rsvp_session_detour_rcvd_avoid_node_ip': mpls_rsvp_session_detour_rcvd_avoid_node_ip, 'mpls_rsvp_session_control_msgs': mpls_rsvp_session_control_msgs, 'mpls_rsvp_session_riding_bypass_present': mpls_rsvp_session_riding_bypass_present, 'mpls_rsvp_session_riding_bypass_name': mpls_rsvp_session_riding_bypass_name, }


