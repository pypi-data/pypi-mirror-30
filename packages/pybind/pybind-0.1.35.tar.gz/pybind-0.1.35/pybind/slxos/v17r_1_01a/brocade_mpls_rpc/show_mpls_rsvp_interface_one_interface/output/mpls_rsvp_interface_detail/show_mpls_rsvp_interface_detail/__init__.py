
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import g_mpls_prot_statistics_pkt_types
import g_mpls_prot_statistics_errors
class show_mpls_rsvp_interface_detail(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-rsvp-interface-one-interface/output/mpls-rsvp-interface-detail/show-mpls-rsvp-interface-detail. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__mpls_rsvp_interface_hello_interval','__mpls_rsvp_interface_hello_tolerance','__mpls_rsvp_interface_hello_status','__mpls_rsvp_interface_te_up_thresholds','__mpls_rsvp_interface_te_down_thresholds','__g_mpls_prot_statistics_pkt_types','__g_mpls_prot_statistics_errors','__mpls_rsvp_interface_active_backup_outsegs','__mpls_rsvp_interface_inactive_backup_outsegs','__mpls_rsvp_interface_duplicate_preempts_dropped','__mpls_rsvp_interface_p2mp_capability','__mpls_rsvp_interface_bypass_interface','__mpls_rsvp_interface_tunnel_name','__mpls_rsvp_interface_bypass_tunnel_interface_name','__mpls_rsvp_interface_bypass_creation_time','__mpls_rsvp_interface_bypass_creation_location','__mpls_rsvp_interface_assoc_bypass_LSPs',)

  _yang_name = 'show-mpls-rsvp-interface-detail'
  _rest_name = 'show-mpls-rsvp-interface-detail'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__mpls_rsvp_interface_inactive_backup_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-backup-outsegs", rest_name="mpls-rsvp-interface-inactive-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_p2mp_capability = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-p2mp-capability", rest_name="mpls-rsvp-interface-p2mp-capability", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__mpls_rsvp_interface_active_backup_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-backup-outsegs", rest_name="mpls-rsvp-interface-active-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_te_up_thresholds = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-up-thresholds", rest_name="mpls-rsvp-interface-te-up-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_te_down_thresholds = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-down-thresholds", rest_name="mpls-rsvp-interface-te-down-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__g_mpls_prot_statistics_errors = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__mpls_rsvp_interface_duplicate_preempts_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-duplicate-preempts-dropped", rest_name="mpls-rsvp-interface-duplicate-preempts-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_hello_tolerance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-tolerance", rest_name="mpls-rsvp-interface-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_tunnel_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-tunnel-name", rest_name="mpls-rsvp-interface-tunnel-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_assoc_bypass_LSPs = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-assoc-bypass-LSPs", rest_name="mpls-rsvp-interface-assoc-bypass-LSPs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_hello_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-hello-status", rest_name="mpls-rsvp-interface-hello-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_bypass_tunnel_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-tunnel-interface-name", rest_name="mpls-rsvp-interface-bypass-tunnel-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_bypass_creation_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-time", rest_name="mpls-rsvp-interface-bypass-creation-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__mpls_rsvp_interface_hello_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-interval", rest_name="mpls-rsvp-interface-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__mpls_rsvp_interface_bypass_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-interface", rest_name="mpls-rsvp-interface-bypass-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__g_mpls_prot_statistics_pkt_types = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__mpls_rsvp_interface_bypass_creation_location = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-location", rest_name="mpls-rsvp-interface-bypass-creation-location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-rsvp-interface-one-interface', u'output', u'mpls-rsvp-interface-detail', u'show-mpls-rsvp-interface-detail']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-rsvp-interface-one-interface', u'output', u'mpls-rsvp-interface-detail', u'show-mpls-rsvp-interface-detail']

  def _get_mpls_rsvp_interface_hello_interval(self):
    """
    Getter method for mpls_rsvp_interface_hello_interval, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_hello_interval (uint32)

    YANG Description: RSVP Hello interval for the RSVP Interface
    """
    return self.__mpls_rsvp_interface_hello_interval
      
  def _set_mpls_rsvp_interface_hello_interval(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_hello_interval, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_hello_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_hello_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_hello_interval() directly.

    YANG Description: RSVP Hello interval for the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-interval", rest_name="mpls-rsvp-interface-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_hello_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-interval", rest_name="mpls-rsvp-interface-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_hello_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_hello_interval(self):
    self.__mpls_rsvp_interface_hello_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-interval", rest_name="mpls-rsvp-interface-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_hello_tolerance(self):
    """
    Getter method for mpls_rsvp_interface_hello_tolerance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_hello_tolerance (uint32)

    YANG Description: RSVP Hello tolerance for the RSVP Interface
    """
    return self.__mpls_rsvp_interface_hello_tolerance
      
  def _set_mpls_rsvp_interface_hello_tolerance(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_hello_tolerance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_hello_tolerance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_hello_tolerance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_hello_tolerance() directly.

    YANG Description: RSVP Hello tolerance for the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-tolerance", rest_name="mpls-rsvp-interface-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_hello_tolerance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-tolerance", rest_name="mpls-rsvp-interface-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_hello_tolerance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_hello_tolerance(self):
    self.__mpls_rsvp_interface_hello_tolerance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-hello-tolerance", rest_name="mpls-rsvp-interface-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_hello_status(self):
    """
    Getter method for mpls_rsvp_interface_hello_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_hello_status (string)

    YANG Description: RSVP Hello status for the RSVP Interface
    """
    return self.__mpls_rsvp_interface_hello_status
      
  def _set_mpls_rsvp_interface_hello_status(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_hello_status, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_hello_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_hello_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_hello_status() directly.

    YANG Description: RSVP Hello status for the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-hello-status", rest_name="mpls-rsvp-interface-hello-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_hello_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-hello-status", rest_name="mpls-rsvp-interface-hello-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_hello_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_hello_status(self):
    self.__mpls_rsvp_interface_hello_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-hello-status", rest_name="mpls-rsvp-interface-hello-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_te_up_thresholds(self):
    """
    Getter method for mpls_rsvp_interface_te_up_thresholds, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_te_up_thresholds (uint32)

    YANG Description: MPLS TE flooding UP thresholds in use for the RSVP Interface
    """
    return self.__mpls_rsvp_interface_te_up_thresholds
      
  def _set_mpls_rsvp_interface_te_up_thresholds(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_te_up_thresholds, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_te_up_thresholds (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_te_up_thresholds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_te_up_thresholds() directly.

    YANG Description: MPLS TE flooding UP thresholds in use for the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-up-thresholds", rest_name="mpls-rsvp-interface-te-up-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_te_up_thresholds must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-up-thresholds", rest_name="mpls-rsvp-interface-te-up-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_te_up_thresholds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_te_up_thresholds(self):
    self.__mpls_rsvp_interface_te_up_thresholds = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-up-thresholds", rest_name="mpls-rsvp-interface-te-up-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_te_down_thresholds(self):
    """
    Getter method for mpls_rsvp_interface_te_down_thresholds, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_te_down_thresholds (uint32)

    YANG Description: MPLS TE flooding DOWN thresholds in use for the RSVP Interface
    """
    return self.__mpls_rsvp_interface_te_down_thresholds
      
  def _set_mpls_rsvp_interface_te_down_thresholds(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_te_down_thresholds, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_te_down_thresholds (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_te_down_thresholds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_te_down_thresholds() directly.

    YANG Description: MPLS TE flooding DOWN thresholds in use for the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-down-thresholds", rest_name="mpls-rsvp-interface-te-down-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_te_down_thresholds must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-down-thresholds", rest_name="mpls-rsvp-interface-te-down-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_te_down_thresholds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_te_down_thresholds(self):
    self.__mpls_rsvp_interface_te_down_thresholds = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="mpls-rsvp-interface-te-down-thresholds", rest_name="mpls-rsvp-interface-te-down-thresholds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_g_mpls_prot_statistics_pkt_types(self):
    """
    Getter method for g_mpls_prot_statistics_pkt_types, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/g_mpls_prot_statistics_pkt_types (list)

    YANG Description: Statistics for MPLS PROT packet types
    """
    return self.__g_mpls_prot_statistics_pkt_types
      
  def _set_g_mpls_prot_statistics_pkt_types(self, v, load=False):
    """
    Setter method for g_mpls_prot_statistics_pkt_types, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/g_mpls_prot_statistics_pkt_types (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_g_mpls_prot_statistics_pkt_types is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_g_mpls_prot_statistics_pkt_types() directly.

    YANG Description: Statistics for MPLS PROT packet types
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """g_mpls_prot_statistics_pkt_types must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__g_mpls_prot_statistics_pkt_types = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_g_mpls_prot_statistics_pkt_types(self):
    self.__g_mpls_prot_statistics_pkt_types = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_pkt_types.g_mpls_prot_statistics_pkt_types, yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_pkt_types", rest_name="g_mpls_prot_statistics_pkt_types", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_g_mpls_prot_statistics_errors(self):
    """
    Getter method for g_mpls_prot_statistics_errors, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/g_mpls_prot_statistics_errors (list)

    YANG Description: Error statistics for MPLS PROT control packets
    """
    return self.__g_mpls_prot_statistics_errors
      
  def _set_g_mpls_prot_statistics_errors(self, v, load=False):
    """
    Setter method for g_mpls_prot_statistics_errors, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/g_mpls_prot_statistics_errors (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_g_mpls_prot_statistics_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_g_mpls_prot_statistics_errors() directly.

    YANG Description: Error statistics for MPLS PROT control packets
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """g_mpls_prot_statistics_errors must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__g_mpls_prot_statistics_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_g_mpls_prot_statistics_errors(self):
    self.__g_mpls_prot_statistics_errors = YANGDynClass(base=YANGListType(False,g_mpls_prot_statistics_errors.g_mpls_prot_statistics_errors, yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="g_mpls_prot_statistics_errors", rest_name="g_mpls_prot_statistics_errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_mpls_rsvp_interface_active_backup_outsegs(self):
    """
    Getter method for mpls_rsvp_interface_active_backup_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_active_backup_outsegs (uint32)

    YANG Description: Number of Active backup Out Segments on the RSVP Interface
    """
    return self.__mpls_rsvp_interface_active_backup_outsegs
      
  def _set_mpls_rsvp_interface_active_backup_outsegs(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_active_backup_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_active_backup_outsegs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_active_backup_outsegs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_active_backup_outsegs() directly.

    YANG Description: Number of Active backup Out Segments on the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-backup-outsegs", rest_name="mpls-rsvp-interface-active-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_active_backup_outsegs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-backup-outsegs", rest_name="mpls-rsvp-interface-active-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_active_backup_outsegs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_active_backup_outsegs(self):
    self.__mpls_rsvp_interface_active_backup_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-active-backup-outsegs", rest_name="mpls-rsvp-interface-active-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_inactive_backup_outsegs(self):
    """
    Getter method for mpls_rsvp_interface_inactive_backup_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_inactive_backup_outsegs (uint32)

    YANG Description: Number of Inactive backup Out Segments on the RSVP Interface
    """
    return self.__mpls_rsvp_interface_inactive_backup_outsegs
      
  def _set_mpls_rsvp_interface_inactive_backup_outsegs(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_inactive_backup_outsegs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_inactive_backup_outsegs (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_inactive_backup_outsegs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_inactive_backup_outsegs() directly.

    YANG Description: Number of Inactive backup Out Segments on the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-backup-outsegs", rest_name="mpls-rsvp-interface-inactive-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_inactive_backup_outsegs must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-backup-outsegs", rest_name="mpls-rsvp-interface-inactive-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_inactive_backup_outsegs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_inactive_backup_outsegs(self):
    self.__mpls_rsvp_interface_inactive_backup_outsegs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-inactive-backup-outsegs", rest_name="mpls-rsvp-interface-inactive-backup-outsegs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_duplicate_preempts_dropped(self):
    """
    Getter method for mpls_rsvp_interface_duplicate_preempts_dropped, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_duplicate_preempts_dropped (uint32)

    YANG Description: Number of Duplicate preempts dropped on the RSVP Interface
    """
    return self.__mpls_rsvp_interface_duplicate_preempts_dropped
      
  def _set_mpls_rsvp_interface_duplicate_preempts_dropped(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_duplicate_preempts_dropped, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_duplicate_preempts_dropped (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_duplicate_preempts_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_duplicate_preempts_dropped() directly.

    YANG Description: Number of Duplicate preempts dropped on the RSVP Interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-duplicate-preempts-dropped", rest_name="mpls-rsvp-interface-duplicate-preempts-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_duplicate_preempts_dropped must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-duplicate-preempts-dropped", rest_name="mpls-rsvp-interface-duplicate-preempts-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_duplicate_preempts_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_duplicate_preempts_dropped(self):
    self.__mpls_rsvp_interface_duplicate_preempts_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-duplicate-preempts-dropped", rest_name="mpls-rsvp-interface-duplicate-preempts-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_p2mp_capability(self):
    """
    Getter method for mpls_rsvp_interface_p2mp_capability, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_p2mp_capability (boolean)

    YANG Description: P2MP capability of RSVP interface
    """
    return self.__mpls_rsvp_interface_p2mp_capability
      
  def _set_mpls_rsvp_interface_p2mp_capability(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_p2mp_capability, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_p2mp_capability (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_p2mp_capability is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_p2mp_capability() directly.

    YANG Description: P2MP capability of RSVP interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-p2mp-capability", rest_name="mpls-rsvp-interface-p2mp-capability", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_p2mp_capability must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-p2mp-capability", rest_name="mpls-rsvp-interface-p2mp-capability", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_interface_p2mp_capability = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_p2mp_capability(self):
    self.__mpls_rsvp_interface_p2mp_capability = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-p2mp-capability", rest_name="mpls-rsvp-interface-p2mp-capability", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_interface_bypass_interface(self):
    """
    Getter method for mpls_rsvp_interface_bypass_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_interface (boolean)

    YANG Description: Is RSVP interface a bypass interface
    """
    return self.__mpls_rsvp_interface_bypass_interface
      
  def _set_mpls_rsvp_interface_bypass_interface(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_bypass_interface, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_interface (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_bypass_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_bypass_interface() directly.

    YANG Description: Is RSVP interface a bypass interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-interface", rest_name="mpls-rsvp-interface-bypass-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_bypass_interface must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-interface", rest_name="mpls-rsvp-interface-bypass-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__mpls_rsvp_interface_bypass_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_bypass_interface(self):
    self.__mpls_rsvp_interface_bypass_interface = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-interface", rest_name="mpls-rsvp-interface-bypass-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_mpls_rsvp_interface_tunnel_name(self):
    """
    Getter method for mpls_rsvp_interface_tunnel_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_tunnel_name (string)

    YANG Description: Bypass LSP name
    """
    return self.__mpls_rsvp_interface_tunnel_name
      
  def _set_mpls_rsvp_interface_tunnel_name(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_tunnel_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_tunnel_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_tunnel_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_tunnel_name() directly.

    YANG Description: Bypass LSP name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-tunnel-name", rest_name="mpls-rsvp-interface-tunnel-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_tunnel_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-tunnel-name", rest_name="mpls-rsvp-interface-tunnel-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_tunnel_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_tunnel_name(self):
    self.__mpls_rsvp_interface_tunnel_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-tunnel-name", rest_name="mpls-rsvp-interface-tunnel-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_bypass_tunnel_interface_name(self):
    """
    Getter method for mpls_rsvp_interface_bypass_tunnel_interface_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_tunnel_interface_name (string)

    YANG Description: Bypass LSP interface name
    """
    return self.__mpls_rsvp_interface_bypass_tunnel_interface_name
      
  def _set_mpls_rsvp_interface_bypass_tunnel_interface_name(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_bypass_tunnel_interface_name, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_tunnel_interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_bypass_tunnel_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_bypass_tunnel_interface_name() directly.

    YANG Description: Bypass LSP interface name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-tunnel-interface-name", rest_name="mpls-rsvp-interface-bypass-tunnel-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_bypass_tunnel_interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-tunnel-interface-name", rest_name="mpls-rsvp-interface-bypass-tunnel-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_bypass_tunnel_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_bypass_tunnel_interface_name(self):
    self.__mpls_rsvp_interface_bypass_tunnel_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-tunnel-interface-name", rest_name="mpls-rsvp-interface-bypass-tunnel-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_bypass_creation_time(self):
    """
    Getter method for mpls_rsvp_interface_bypass_creation_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_creation_time (string)

    YANG Description: Bypass LSP creation time
    """
    return self.__mpls_rsvp_interface_bypass_creation_time
      
  def _set_mpls_rsvp_interface_bypass_creation_time(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_bypass_creation_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_creation_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_bypass_creation_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_bypass_creation_time() directly.

    YANG Description: Bypass LSP creation time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-time", rest_name="mpls-rsvp-interface-bypass-creation-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_bypass_creation_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-time", rest_name="mpls-rsvp-interface-bypass-creation-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_bypass_creation_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_bypass_creation_time(self):
    self.__mpls_rsvp_interface_bypass_creation_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-time", rest_name="mpls-rsvp-interface-bypass-creation-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_mpls_rsvp_interface_bypass_creation_location(self):
    """
    Getter method for mpls_rsvp_interface_bypass_creation_location, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_creation_location (uint32)

    YANG Description: Bypass LSP creation location
    """
    return self.__mpls_rsvp_interface_bypass_creation_location
      
  def _set_mpls_rsvp_interface_bypass_creation_location(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_bypass_creation_location, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_bypass_creation_location (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_bypass_creation_location is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_bypass_creation_location() directly.

    YANG Description: Bypass LSP creation location
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-location", rest_name="mpls-rsvp-interface-bypass-creation-location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_bypass_creation_location must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-location", rest_name="mpls-rsvp-interface-bypass-creation-location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__mpls_rsvp_interface_bypass_creation_location = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_bypass_creation_location(self):
    self.__mpls_rsvp_interface_bypass_creation_location = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="mpls-rsvp-interface-bypass-creation-location", rest_name="mpls-rsvp-interface-bypass-creation-location", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_mpls_rsvp_interface_assoc_bypass_LSPs(self):
    """
    Getter method for mpls_rsvp_interface_assoc_bypass_LSPs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_assoc_bypass_LSPs (string)

    YANG Description: Few associated bypass LSP names
    """
    return self.__mpls_rsvp_interface_assoc_bypass_LSPs
      
  def _set_mpls_rsvp_interface_assoc_bypass_LSPs(self, v, load=False):
    """
    Setter method for mpls_rsvp_interface_assoc_bypass_LSPs, mapped from YANG variable /brocade_mpls_rpc/show_mpls_rsvp_interface_one_interface/output/mpls_rsvp_interface_detail/show_mpls_rsvp_interface_detail/mpls_rsvp_interface_assoc_bypass_LSPs (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mpls_rsvp_interface_assoc_bypass_LSPs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mpls_rsvp_interface_assoc_bypass_LSPs() directly.

    YANG Description: Few associated bypass LSP names
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-assoc-bypass-LSPs", rest_name="mpls-rsvp-interface-assoc-bypass-LSPs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mpls_rsvp_interface_assoc_bypass_LSPs must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-assoc-bypass-LSPs", rest_name="mpls-rsvp-interface-assoc-bypass-LSPs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__mpls_rsvp_interface_assoc_bypass_LSPs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mpls_rsvp_interface_assoc_bypass_LSPs(self):
    self.__mpls_rsvp_interface_assoc_bypass_LSPs = YANGDynClass(base=unicode, is_leaf=True, yang_name="mpls-rsvp-interface-assoc-bypass-LSPs", rest_name="mpls-rsvp-interface-assoc-bypass-LSPs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

  mpls_rsvp_interface_hello_interval = __builtin__.property(_get_mpls_rsvp_interface_hello_interval, _set_mpls_rsvp_interface_hello_interval)
  mpls_rsvp_interface_hello_tolerance = __builtin__.property(_get_mpls_rsvp_interface_hello_tolerance, _set_mpls_rsvp_interface_hello_tolerance)
  mpls_rsvp_interface_hello_status = __builtin__.property(_get_mpls_rsvp_interface_hello_status, _set_mpls_rsvp_interface_hello_status)
  mpls_rsvp_interface_te_up_thresholds = __builtin__.property(_get_mpls_rsvp_interface_te_up_thresholds, _set_mpls_rsvp_interface_te_up_thresholds)
  mpls_rsvp_interface_te_down_thresholds = __builtin__.property(_get_mpls_rsvp_interface_te_down_thresholds, _set_mpls_rsvp_interface_te_down_thresholds)
  g_mpls_prot_statistics_pkt_types = __builtin__.property(_get_g_mpls_prot_statistics_pkt_types, _set_g_mpls_prot_statistics_pkt_types)
  g_mpls_prot_statistics_errors = __builtin__.property(_get_g_mpls_prot_statistics_errors, _set_g_mpls_prot_statistics_errors)
  mpls_rsvp_interface_active_backup_outsegs = __builtin__.property(_get_mpls_rsvp_interface_active_backup_outsegs, _set_mpls_rsvp_interface_active_backup_outsegs)
  mpls_rsvp_interface_inactive_backup_outsegs = __builtin__.property(_get_mpls_rsvp_interface_inactive_backup_outsegs, _set_mpls_rsvp_interface_inactive_backup_outsegs)
  mpls_rsvp_interface_duplicate_preempts_dropped = __builtin__.property(_get_mpls_rsvp_interface_duplicate_preempts_dropped, _set_mpls_rsvp_interface_duplicate_preempts_dropped)
  mpls_rsvp_interface_p2mp_capability = __builtin__.property(_get_mpls_rsvp_interface_p2mp_capability, _set_mpls_rsvp_interface_p2mp_capability)
  mpls_rsvp_interface_bypass_interface = __builtin__.property(_get_mpls_rsvp_interface_bypass_interface, _set_mpls_rsvp_interface_bypass_interface)
  mpls_rsvp_interface_tunnel_name = __builtin__.property(_get_mpls_rsvp_interface_tunnel_name, _set_mpls_rsvp_interface_tunnel_name)
  mpls_rsvp_interface_bypass_tunnel_interface_name = __builtin__.property(_get_mpls_rsvp_interface_bypass_tunnel_interface_name, _set_mpls_rsvp_interface_bypass_tunnel_interface_name)
  mpls_rsvp_interface_bypass_creation_time = __builtin__.property(_get_mpls_rsvp_interface_bypass_creation_time, _set_mpls_rsvp_interface_bypass_creation_time)
  mpls_rsvp_interface_bypass_creation_location = __builtin__.property(_get_mpls_rsvp_interface_bypass_creation_location, _set_mpls_rsvp_interface_bypass_creation_location)
  mpls_rsvp_interface_assoc_bypass_LSPs = __builtin__.property(_get_mpls_rsvp_interface_assoc_bypass_LSPs, _set_mpls_rsvp_interface_assoc_bypass_LSPs)


  _pyangbind_elements = {'mpls_rsvp_interface_hello_interval': mpls_rsvp_interface_hello_interval, 'mpls_rsvp_interface_hello_tolerance': mpls_rsvp_interface_hello_tolerance, 'mpls_rsvp_interface_hello_status': mpls_rsvp_interface_hello_status, 'mpls_rsvp_interface_te_up_thresholds': mpls_rsvp_interface_te_up_thresholds, 'mpls_rsvp_interface_te_down_thresholds': mpls_rsvp_interface_te_down_thresholds, 'g_mpls_prot_statistics_pkt_types': g_mpls_prot_statistics_pkt_types, 'g_mpls_prot_statistics_errors': g_mpls_prot_statistics_errors, 'mpls_rsvp_interface_active_backup_outsegs': mpls_rsvp_interface_active_backup_outsegs, 'mpls_rsvp_interface_inactive_backup_outsegs': mpls_rsvp_interface_inactive_backup_outsegs, 'mpls_rsvp_interface_duplicate_preempts_dropped': mpls_rsvp_interface_duplicate_preempts_dropped, 'mpls_rsvp_interface_p2mp_capability': mpls_rsvp_interface_p2mp_capability, 'mpls_rsvp_interface_bypass_interface': mpls_rsvp_interface_bypass_interface, 'mpls_rsvp_interface_tunnel_name': mpls_rsvp_interface_tunnel_name, 'mpls_rsvp_interface_bypass_tunnel_interface_name': mpls_rsvp_interface_bypass_tunnel_interface_name, 'mpls_rsvp_interface_bypass_creation_time': mpls_rsvp_interface_bypass_creation_time, 'mpls_rsvp_interface_bypass_creation_location': mpls_rsvp_interface_bypass_creation_location, 'mpls_rsvp_interface_assoc_bypass_LSPs': mpls_rsvp_interface_assoc_bypass_LSPs, }


