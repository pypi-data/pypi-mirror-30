
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import lsp_config_admin_groups
import lsp_cspf_path_hops
import lsp_cspf_exclude_hops
import lsp_rsvp_session_rro_hops
class lsp_instances(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-bypass-lsp-name-detail/output/bypass-lsp/show-mpls-lsp-detail-info/show-mpls-lsp-instances-info/lsp-instances. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__lsp_instance_number','__lsp_current_instance','__lsp_new_instance','__lsp_old_instance','__lsp_is_primary','__lsp_is_current_secondary','__lsp_is_selected_secondary','__lsp_config_path_configured','__lsp_config_path','__lsp_config_reoptimize_timer_configured','__lsp_config_reoptimize_timer','__lsp_config_tspec_mtu_configured','__lsp_config_tspec_mtu','__lsp_config_cos_configured','__lsp_config_cos','__lsp_config_mtu_configured','__lsp_config_mtu','__lsp_config_tie_breaking_configured','__lsp_config_tie_break_random','__lsp_config_tie_break_least_fill','__lsp_config_tie_break_most_fill','__lsp_config_cspf_disabled','__lsp_config_hot_standby','__lsp_config_pinned','__lsp_config_persistenct','__lsp_config_frr_global_revertive','__lsp_config_frr_hold_time','__lsp_config_soft_prempt','__lsp_config_exclude_interface_change','__lsp_config_prority_configured','__lsp_config_setup_prority','__lsp_config_holding_prority','__lsp_config_hop_limit_configured','__lsp_config_hop_limit','__lsp_config_traffic_eng_rate_configured','__lsp_config_traffic_eng_mean_rate','__lsp_config_traffic_eng_max_rate','__lsp_config_traffic_eng_max_burst','__lsp_config_admin_group_configured','__lsp_config_admin_groups','__lsp_path_computed_by_cspf','__lsp_path_computed_by_interface_constraint','__lsp_cspf_computation_mode_default','__lsp_cspf_computation_mode_use_bypass_metric','__lsp_cspf_computation_mode_use_bypass_liberal','__lsp_cspf_group_computation_mode_default','__lsp_cspf_group_computation_mode_add_penalty','__lsp_cspf_group_computation_mode_exclude_groups','__lsp_cspf_group_computation_mode_high_cost','__lsp_cspf_path_cost','__lsp_cspf_path_area','__lsp_cspf_computation_error','__lsp_cspf_path_hops','__lsp_cspf_exclude_hops_present','__lsp_cspf_exclude_hops','__lsp_rsvp_session_present','__lsp_rsvp_session_state_up','__lsp_rsvp_session_state','__lsp_rsvp_session_path_error_code','__lsp_rsvp_session_path_error_value','__lsp_rsvp_session_path_error_node_address','__lsp_rsvp_session_rro_hops_present','__lsp_rsvp_session_rro_hops','__lsp_maximum_bandwidth','__lsp_unreserved_priority_0_bandwidth','__lsp_unreserved_priority_1_bandwidth','__lsp_unreserved_priority_2_bandwidth','__lsp_unreserved_priority_3_bandwidth','__lsp_unreserved_priority_4_bandwidth','__lsp_unreserved_priority_5_bandwidth','__lsp_unreserved_priority_6_bandwidth','__lsp_unreserved_priority_7_bandwidth',)

  _yang_name = 'lsp-instances'
  _rest_name = 'lsp-instances'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__lsp_cspf_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-path-cost", rest_name="lsp-cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_old_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-old-instance", rest_name="lsp-old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_path_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-cspf-path-area", rest_name="lsp-cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__lsp_config_tie_breaking_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-breaking-configured", rest_name="lsp-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_tie_break_most_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-most-fill", rest_name="lsp-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_traffic_eng_max_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-burst", rest_name="lsp-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_pinned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-pinned", rest_name="lsp-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_is_current_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-current-secondary", rest_name="lsp-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-config-path", rest_name="lsp-config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__lsp_rsvp_session_state_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-state-up", rest_name="lsp-rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-group-configured", rest_name="lsp-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_current_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-current-instance", rest_name="lsp-current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_admin_groups = YANGDynClass(base=lsp_config_admin_groups.lsp_config_admin_groups, is_container='container', presence=False, yang_name="lsp-config-admin-groups", rest_name="lsp-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__lsp_config_tspec_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-tspec-mtu", rest_name="lsp-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_rsvp_session_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-present", rest_name="lsp-rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_setup_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-setup-prority", rest_name="lsp-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_cspf_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-default", rest_name="lsp-cspf-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_group_computation_mode_add_penalty = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-add-penalty", rest_name="lsp-cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_computation_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-computation-error", rest_name="lsp-cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_path_computed_by_interface_constraint = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-interface-constraint", rest_name="lsp-path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_rsvp_session_path_error_code = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-code", rest_name="lsp-rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_traffic_eng_rate_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-traffic-eng-rate-configured", rest_name="lsp-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_traffic_eng_max_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-rate", rest_name="lsp-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_is_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-selected-secondary", rest_name="lsp-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_new_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-new-instance", rest_name="lsp-new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-mtu", rest_name="lsp-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_rsvp_session_rro_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-rro-hops-present", rest_name="lsp-rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_path_computed_by_cspf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-cspf", rest_name="lsp-path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_rsvp_session_rro_hops = YANGDynClass(base=lsp_rsvp_session_rro_hops.lsp_rsvp_session_rro_hops, is_container='container', presence=False, yang_name="lsp-rsvp-session-rro-hops", rest_name="lsp-rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__lsp_config_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-hop-limit", rest_name="lsp-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_soft_prempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-soft-prempt", rest_name="lsp-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_unreserved_priority_2_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-2-bandwidth", rest_name="lsp-unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_cos_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-cos-configured", rest_name="lsp-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_maximum_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-maximum-bandwidth", rest_name="lsp-maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_unreserved_priority_4_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-4-bandwidth", rest_name="lsp-unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_cspf_exclude_hops = YANGDynClass(base=lsp_cspf_exclude_hops.lsp_cspf_exclude_hops, is_container='container', presence=False, yang_name="lsp-cspf-exclude-hops", rest_name="lsp-cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__lsp_config_holding_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-holding-prority", rest_name="lsp-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_cspf_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-cspf-disabled", rest_name="lsp-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_rsvp_session_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-rsvp-session-state", rest_name="lsp-rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_frr_global_revertive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-global-revertive", rest_name="lsp-config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_instance_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-instance-number", rest_name="lsp-instance-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_is_primary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-primary", rest_name="lsp-is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_tspec_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tspec-mtu-configured", rest_name="lsp-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_path_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-configured", rest_name="lsp-config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_tie_break_random = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-random", rest_name="lsp-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_rsvp_session_path_error_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-value", rest_name="lsp-rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-hop-limit-configured", rest_name="lsp-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_unreserved_priority_3_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-3-bandwidth", rest_name="lsp-unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-mtu-configured", rest_name="lsp-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_path_hops = YANGDynClass(base=lsp_cspf_path_hops.lsp_cspf_path_hops, is_container='container', presence=False, yang_name="lsp-cspf-path-hops", rest_name="lsp-cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__lsp_unreserved_priority_1_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-1-bandwidth", rest_name="lsp-unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-cos", rest_name="lsp-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__lsp_config_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-reoptimize-timer", rest_name="lsp-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_cspf_exclude_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-exclude-hops-present", rest_name="lsp-cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_rsvp_session_path_error_node_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-rsvp-session-path-error-node-address", rest_name="lsp-rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    self.__lsp_unreserved_priority_5_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-5-bandwidth", rest_name="lsp-unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_cspf_group_computation_mode_exclude_groups = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-exclude-groups", rest_name="lsp-cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_unreserved_priority_7_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-7-bandwidth", rest_name="lsp-unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_unreserved_priority_0_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-0-bandwidth", rest_name="lsp-unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_frr_hold_time = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hold-time", rest_name="lsp-config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_tie_break_least_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-least-fill", rest_name="lsp-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_group_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-default", rest_name="lsp-cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_computation_mode_use_bypass_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-metric", rest_name="lsp-cspf-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_persistenct = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-persistenct", rest_name="lsp-config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_prority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-prority-configured", rest_name="lsp-config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_exclude_interface_change = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-change", rest_name="lsp-config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_traffic_eng_mean_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-mean-rate", rest_name="lsp-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_unreserved_priority_6_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-6-bandwidth", rest_name="lsp-unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__lsp_config_reoptimize_timer_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-reoptimize-timer-configured", rest_name="lsp-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_computation_mode_use_bypass_liberal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-liberal", rest_name="lsp-cspf-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_cspf_group_computation_mode_high_cost = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-high-cost", rest_name="lsp-cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    self.__lsp_config_hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-hot-standby", rest_name="lsp-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-bypass-lsp-name-detail', u'output', u'bypass-lsp', u'show-mpls-lsp-detail-info', u'show-mpls-lsp-instances-info', u'lsp-instances']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-bypass-lsp-name-detail', u'output', u'bypass-lsp', u'lsp-instances']

  def _get_lsp_instance_number(self):
    """
    Getter method for lsp_instance_number, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_instance_number (uint32)

    YANG Description: LSP instance number
    """
    return self.__lsp_instance_number
      
  def _set_lsp_instance_number(self, v, load=False):
    """
    Setter method for lsp_instance_number, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_instance_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_instance_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_instance_number() directly.

    YANG Description: LSP instance number
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-instance-number", rest_name="lsp-instance-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_instance_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-instance-number", rest_name="lsp-instance-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_instance_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_instance_number(self):
    self.__lsp_instance_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-instance-number", rest_name="lsp-instance-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_current_instance(self):
    """
    Getter method for lsp_current_instance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_current_instance (boolean)

    YANG Description: LSP instance type
    """
    return self.__lsp_current_instance
      
  def _set_lsp_current_instance(self, v, load=False):
    """
    Setter method for lsp_current_instance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_current_instance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_current_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_current_instance() directly.

    YANG Description: LSP instance type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-current-instance", rest_name="lsp-current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_current_instance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-current-instance", rest_name="lsp-current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_current_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_current_instance(self):
    self.__lsp_current_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-current-instance", rest_name="lsp-current-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_new_instance(self):
    """
    Getter method for lsp_new_instance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_new_instance (boolean)

    YANG Description: LSP instance type
    """
    return self.__lsp_new_instance
      
  def _set_lsp_new_instance(self, v, load=False):
    """
    Setter method for lsp_new_instance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_new_instance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_new_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_new_instance() directly.

    YANG Description: LSP instance type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-new-instance", rest_name="lsp-new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_new_instance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-new-instance", rest_name="lsp-new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_new_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_new_instance(self):
    self.__lsp_new_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-new-instance", rest_name="lsp-new-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_old_instance(self):
    """
    Getter method for lsp_old_instance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_old_instance (boolean)

    YANG Description: LSP instance type
    """
    return self.__lsp_old_instance
      
  def _set_lsp_old_instance(self, v, load=False):
    """
    Setter method for lsp_old_instance, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_old_instance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_old_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_old_instance() directly.

    YANG Description: LSP instance type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-old-instance", rest_name="lsp-old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_old_instance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-old-instance", rest_name="lsp-old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_old_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_old_instance(self):
    self.__lsp_old_instance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-old-instance", rest_name="lsp-old-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_is_primary(self):
    """
    Getter method for lsp_is_primary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_is_primary (boolean)

    YANG Description: LSP instance is primary
    """
    return self.__lsp_is_primary
      
  def _set_lsp_is_primary(self, v, load=False):
    """
    Setter method for lsp_is_primary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_is_primary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_is_primary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_is_primary() directly.

    YANG Description: LSP instance is primary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-is-primary", rest_name="lsp-is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_is_primary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-primary", rest_name="lsp-is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_is_primary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_is_primary(self):
    self.__lsp_is_primary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-primary", rest_name="lsp-is-primary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_is_current_secondary(self):
    """
    Getter method for lsp_is_current_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_is_current_secondary (boolean)

    YANG Description: LSP instance is primary
    """
    return self.__lsp_is_current_secondary
      
  def _set_lsp_is_current_secondary(self, v, load=False):
    """
    Setter method for lsp_is_current_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_is_current_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_is_current_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_is_current_secondary() directly.

    YANG Description: LSP instance is primary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-is-current-secondary", rest_name="lsp-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_is_current_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-current-secondary", rest_name="lsp-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_is_current_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_is_current_secondary(self):
    self.__lsp_is_current_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-current-secondary", rest_name="lsp-is-current-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_is_selected_secondary(self):
    """
    Getter method for lsp_is_selected_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_is_selected_secondary (boolean)

    YANG Description: LSP instance is selected-secondary
    """
    return self.__lsp_is_selected_secondary
      
  def _set_lsp_is_selected_secondary(self, v, load=False):
    """
    Setter method for lsp_is_selected_secondary, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_is_selected_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_is_selected_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_is_selected_secondary() directly.

    YANG Description: LSP instance is selected-secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-is-selected-secondary", rest_name="lsp-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_is_selected_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-selected-secondary", rest_name="lsp-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_is_selected_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_is_selected_secondary(self):
    self.__lsp_is_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-selected-secondary", rest_name="lsp-is-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_path_configured(self):
    """
    Getter method for lsp_config_path_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_path_configured (boolean)

    YANG Description: LSP path is configured
    """
    return self.__lsp_config_path_configured
      
  def _set_lsp_config_path_configured(self, v, load=False):
    """
    Setter method for lsp_config_path_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_path_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path_configured() directly.

    YANG Description: LSP path is configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-path-configured", rest_name="lsp-config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-configured", rest_name="lsp-config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_path_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path_configured(self):
    self.__lsp_config_path_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-path-configured", rest_name="lsp-config-path-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_path(self):
    """
    Getter method for lsp_config_path, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_path (string)

    YANG Description: LSP path name
    """
    return self.__lsp_config_path
      
  def _set_lsp_config_path(self, v, load=False):
    """
    Setter method for lsp_config_path, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_path() directly.

    YANG Description: LSP path name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lsp-config-path", rest_name="lsp-config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-config-path", rest_name="lsp-config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__lsp_config_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_path(self):
    self.__lsp_config_path = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-config-path", rest_name="lsp-config-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_lsp_config_reoptimize_timer_configured(self):
    """
    Getter method for lsp_config_reoptimize_timer_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_reoptimize_timer_configured (boolean)

    YANG Description: LSP reoptimization timer configured
    """
    return self.__lsp_config_reoptimize_timer_configured
      
  def _set_lsp_config_reoptimize_timer_configured(self, v, load=False):
    """
    Setter method for lsp_config_reoptimize_timer_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_reoptimize_timer_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_reoptimize_timer_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_reoptimize_timer_configured() directly.

    YANG Description: LSP reoptimization timer configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-reoptimize-timer-configured", rest_name="lsp-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_reoptimize_timer_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-reoptimize-timer-configured", rest_name="lsp-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_reoptimize_timer_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_reoptimize_timer_configured(self):
    self.__lsp_config_reoptimize_timer_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-reoptimize-timer-configured", rest_name="lsp-config-reoptimize-timer-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_reoptimize_timer(self):
    """
    Getter method for lsp_config_reoptimize_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_reoptimize_timer (uint32)

    YANG Description: LSP reoptimization timer value
    """
    return self.__lsp_config_reoptimize_timer
      
  def _set_lsp_config_reoptimize_timer(self, v, load=False):
    """
    Setter method for lsp_config_reoptimize_timer, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_reoptimize_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_reoptimize_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_reoptimize_timer() directly.

    YANG Description: LSP reoptimization timer value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-reoptimize-timer", rest_name="lsp-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_reoptimize_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-reoptimize-timer", rest_name="lsp-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_reoptimize_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_reoptimize_timer(self):
    self.__lsp_config_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-reoptimize-timer", rest_name="lsp-config-reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_tspec_mtu_configured(self):
    """
    Getter method for lsp_config_tspec_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tspec_mtu_configured (boolean)

    YANG Description: LSP traffic spec mtu configured
    """
    return self.__lsp_config_tspec_mtu_configured
      
  def _set_lsp_config_tspec_mtu_configured(self, v, load=False):
    """
    Setter method for lsp_config_tspec_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tspec_mtu_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_tspec_mtu_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_tspec_mtu_configured() directly.

    YANG Description: LSP traffic spec mtu configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-tspec-mtu-configured", rest_name="lsp-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_tspec_mtu_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tspec-mtu-configured", rest_name="lsp-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_tspec_mtu_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_tspec_mtu_configured(self):
    self.__lsp_config_tspec_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tspec-mtu-configured", rest_name="lsp-config-tspec-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_tspec_mtu(self):
    """
    Getter method for lsp_config_tspec_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tspec_mtu (uint32)

    YANG Description: LSP traffic spec mtu value
    """
    return self.__lsp_config_tspec_mtu
      
  def _set_lsp_config_tspec_mtu(self, v, load=False):
    """
    Setter method for lsp_config_tspec_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tspec_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_tspec_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_tspec_mtu() directly.

    YANG Description: LSP traffic spec mtu value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-tspec-mtu", rest_name="lsp-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_tspec_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-tspec-mtu", rest_name="lsp-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_tspec_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_tspec_mtu(self):
    self.__lsp_config_tspec_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-tspec-mtu", rest_name="lsp-config-tspec-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_cos_configured(self):
    """
    Getter method for lsp_config_cos_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_cos_configured (boolean)

    YANG Description: LSP cos value configured
    """
    return self.__lsp_config_cos_configured
      
  def _set_lsp_config_cos_configured(self, v, load=False):
    """
    Setter method for lsp_config_cos_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_cos_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_cos_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_cos_configured() directly.

    YANG Description: LSP cos value configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-cos-configured", rest_name="lsp-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_cos_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-cos-configured", rest_name="lsp-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_cos_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_cos_configured(self):
    self.__lsp_config_cos_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-cos-configured", rest_name="lsp-config-cos-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_cos(self):
    """
    Getter method for lsp_config_cos, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_cos (uint8)

    YANG Description: LSP cos value
    """
    return self.__lsp_config_cos
      
  def _set_lsp_config_cos(self, v, load=False):
    """
    Setter method for lsp_config_cos, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_cos (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_cos() directly.

    YANG Description: LSP cos value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-cos", rest_name="lsp-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_cos must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-cos", rest_name="lsp-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_cos(self):
    self.__lsp_config_cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-cos", rest_name="lsp-config-cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_mtu_configured(self):
    """
    Getter method for lsp_config_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_mtu_configured (boolean)

    YANG Description: LSP MTU value configured
    """
    return self.__lsp_config_mtu_configured
      
  def _set_lsp_config_mtu_configured(self, v, load=False):
    """
    Setter method for lsp_config_mtu_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_mtu_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_mtu_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_mtu_configured() directly.

    YANG Description: LSP MTU value configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-mtu-configured", rest_name="lsp-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_mtu_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-mtu-configured", rest_name="lsp-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_mtu_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_mtu_configured(self):
    self.__lsp_config_mtu_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-mtu-configured", rest_name="lsp-config-mtu-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_mtu(self):
    """
    Getter method for lsp_config_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_mtu (uint32)

    YANG Description: LSP MTU value
    """
    return self.__lsp_config_mtu
      
  def _set_lsp_config_mtu(self, v, load=False):
    """
    Setter method for lsp_config_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_mtu() directly.

    YANG Description: LSP MTU value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-mtu", rest_name="lsp-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-mtu", rest_name="lsp-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_mtu(self):
    self.__lsp_config_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-mtu", rest_name="lsp-config-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_tie_breaking_configured(self):
    """
    Getter method for lsp_config_tie_breaking_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_breaking_configured (boolean)

    YANG Description: LSP CSPF tie-breaking configured
    """
    return self.__lsp_config_tie_breaking_configured
      
  def _set_lsp_config_tie_breaking_configured(self, v, load=False):
    """
    Setter method for lsp_config_tie_breaking_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_breaking_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_tie_breaking_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_tie_breaking_configured() directly.

    YANG Description: LSP CSPF tie-breaking configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-breaking-configured", rest_name="lsp-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_tie_breaking_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-breaking-configured", rest_name="lsp-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_tie_breaking_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_tie_breaking_configured(self):
    self.__lsp_config_tie_breaking_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-breaking-configured", rest_name="lsp-config-tie-breaking-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_tie_break_random(self):
    """
    Getter method for lsp_config_tie_break_random, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_break_random (boolean)

    YANG Description: LSP cspf tie braking is random
    """
    return self.__lsp_config_tie_break_random
      
  def _set_lsp_config_tie_break_random(self, v, load=False):
    """
    Setter method for lsp_config_tie_break_random, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_break_random (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_tie_break_random is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_tie_break_random() directly.

    YANG Description: LSP cspf tie braking is random
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-random", rest_name="lsp-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_tie_break_random must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-random", rest_name="lsp-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_tie_break_random = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_tie_break_random(self):
    self.__lsp_config_tie_break_random = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-random", rest_name="lsp-config-tie-break-random", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_tie_break_least_fill(self):
    """
    Getter method for lsp_config_tie_break_least_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_break_least_fill (boolean)

    YANG Description: LSP cspf tie braking is least fill
    """
    return self.__lsp_config_tie_break_least_fill
      
  def _set_lsp_config_tie_break_least_fill(self, v, load=False):
    """
    Setter method for lsp_config_tie_break_least_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_break_least_fill (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_tie_break_least_fill is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_tie_break_least_fill() directly.

    YANG Description: LSP cspf tie braking is least fill
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-least-fill", rest_name="lsp-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_tie_break_least_fill must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-least-fill", rest_name="lsp-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_tie_break_least_fill = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_tie_break_least_fill(self):
    self.__lsp_config_tie_break_least_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-least-fill", rest_name="lsp-config-tie-break-least-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_tie_break_most_fill(self):
    """
    Getter method for lsp_config_tie_break_most_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_break_most_fill (boolean)

    YANG Description: LSP cspf tie braking is most-fill
    """
    return self.__lsp_config_tie_break_most_fill
      
  def _set_lsp_config_tie_break_most_fill(self, v, load=False):
    """
    Setter method for lsp_config_tie_break_most_fill, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_tie_break_most_fill (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_tie_break_most_fill is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_tie_break_most_fill() directly.

    YANG Description: LSP cspf tie braking is most-fill
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-most-fill", rest_name="lsp-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_tie_break_most_fill must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-most-fill", rest_name="lsp-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_tie_break_most_fill = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_tie_break_most_fill(self):
    self.__lsp_config_tie_break_most_fill = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-tie-break-most-fill", rest_name="lsp-config-tie-break-most-fill", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_cspf_disabled(self):
    """
    Getter method for lsp_config_cspf_disabled, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_cspf_disabled (boolean)

    YANG Description: LSP cspf disabled
    """
    return self.__lsp_config_cspf_disabled
      
  def _set_lsp_config_cspf_disabled(self, v, load=False):
    """
    Setter method for lsp_config_cspf_disabled, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_cspf_disabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_cspf_disabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_cspf_disabled() directly.

    YANG Description: LSP cspf disabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-cspf-disabled", rest_name="lsp-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_cspf_disabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-cspf-disabled", rest_name="lsp-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_cspf_disabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_cspf_disabled(self):
    self.__lsp_config_cspf_disabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-cspf-disabled", rest_name="lsp-config-cspf-disabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_hot_standby(self):
    """
    Getter method for lsp_config_hot_standby, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_hot_standby (boolean)

    YANG Description: LSP is hot standby
    """
    return self.__lsp_config_hot_standby
      
  def _set_lsp_config_hot_standby(self, v, load=False):
    """
    Setter method for lsp_config_hot_standby, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_hot_standby (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_hot_standby is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_hot_standby() directly.

    YANG Description: LSP is hot standby
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-hot-standby", rest_name="lsp-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_hot_standby must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-hot-standby", rest_name="lsp-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_hot_standby = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_hot_standby(self):
    self.__lsp_config_hot_standby = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-hot-standby", rest_name="lsp-config-hot-standby", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_pinned(self):
    """
    Getter method for lsp_config_pinned, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_pinned (boolean)

    YANG Description: LSP is pinned
    """
    return self.__lsp_config_pinned
      
  def _set_lsp_config_pinned(self, v, load=False):
    """
    Setter method for lsp_config_pinned, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_pinned (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_pinned is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_pinned() directly.

    YANG Description: LSP is pinned
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-pinned", rest_name="lsp-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_pinned must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-pinned", rest_name="lsp-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_pinned = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_pinned(self):
    self.__lsp_config_pinned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-pinned", rest_name="lsp-config-pinned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_persistenct(self):
    """
    Getter method for lsp_config_persistenct, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_persistenct (boolean)

    YANG Description: LSP is persistent
    """
    return self.__lsp_config_persistenct
      
  def _set_lsp_config_persistenct(self, v, load=False):
    """
    Setter method for lsp_config_persistenct, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_persistenct (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_persistenct is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_persistenct() directly.

    YANG Description: LSP is persistent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-persistenct", rest_name="lsp-config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_persistenct must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-persistenct", rest_name="lsp-config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_persistenct = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_persistenct(self):
    self.__lsp_config_persistenct = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-persistenct", rest_name="lsp-config-persistenct", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_global_revertive(self):
    """
    Getter method for lsp_config_frr_global_revertive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_frr_global_revertive (boolean)

    YANG Description: LSP global revertiveness enabled
    """
    return self.__lsp_config_frr_global_revertive
      
  def _set_lsp_config_frr_global_revertive(self, v, load=False):
    """
    Setter method for lsp_config_frr_global_revertive, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_frr_global_revertive (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_global_revertive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_global_revertive() directly.

    YANG Description: LSP global revertiveness enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-global-revertive", rest_name="lsp-config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_global_revertive must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-global-revertive", rest_name="lsp-config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_global_revertive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_global_revertive(self):
    self.__lsp_config_frr_global_revertive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-global-revertive", rest_name="lsp-config-frr-global-revertive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_frr_hold_time(self):
    """
    Getter method for lsp_config_frr_hold_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_frr_hold_time (boolean)

    YANG Description: LSP FRR hold time
    """
    return self.__lsp_config_frr_hold_time
      
  def _set_lsp_config_frr_hold_time(self, v, load=False):
    """
    Setter method for lsp_config_frr_hold_time, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_frr_hold_time (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_frr_hold_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_frr_hold_time() directly.

    YANG Description: LSP FRR hold time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hold-time", rest_name="lsp-config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_frr_hold_time must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hold-time", rest_name="lsp-config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_frr_hold_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_frr_hold_time(self):
    self.__lsp_config_frr_hold_time = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-frr-hold-time", rest_name="lsp-config-frr-hold-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_soft_prempt(self):
    """
    Getter method for lsp_config_soft_prempt, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_soft_prempt (boolean)

    YANG Description: LSP soft preemption enabled
    """
    return self.__lsp_config_soft_prempt
      
  def _set_lsp_config_soft_prempt(self, v, load=False):
    """
    Setter method for lsp_config_soft_prempt, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_soft_prempt (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_soft_prempt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_soft_prempt() directly.

    YANG Description: LSP soft preemption enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-soft-prempt", rest_name="lsp-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_soft_prempt must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-soft-prempt", rest_name="lsp-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_soft_prempt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_soft_prempt(self):
    self.__lsp_config_soft_prempt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-soft-prempt", rest_name="lsp-config-soft-prempt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_exclude_interface_change(self):
    """
    Getter method for lsp_config_exclude_interface_change, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_exclude_interface_change (boolean)

    YANG Description: LSP exclude interface changed
    """
    return self.__lsp_config_exclude_interface_change
      
  def _set_lsp_config_exclude_interface_change(self, v, load=False):
    """
    Setter method for lsp_config_exclude_interface_change, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_exclude_interface_change (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_exclude_interface_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_exclude_interface_change() directly.

    YANG Description: LSP exclude interface changed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-change", rest_name="lsp-config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_exclude_interface_change must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-change", rest_name="lsp-config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_exclude_interface_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_exclude_interface_change(self):
    self.__lsp_config_exclude_interface_change = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-exclude-interface-change", rest_name="lsp-config-exclude-interface-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_prority_configured(self):
    """
    Getter method for lsp_config_prority_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_prority_configured (boolean)

    YANG Description: LSP priority configured
    """
    return self.__lsp_config_prority_configured
      
  def _set_lsp_config_prority_configured(self, v, load=False):
    """
    Setter method for lsp_config_prority_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_prority_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_prority_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_prority_configured() directly.

    YANG Description: LSP priority configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-prority-configured", rest_name="lsp-config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_prority_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-prority-configured", rest_name="lsp-config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_prority_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_prority_configured(self):
    self.__lsp_config_prority_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-prority-configured", rest_name="lsp-config-prority-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_setup_prority(self):
    """
    Getter method for lsp_config_setup_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_setup_prority (uint8)

    YANG Description: LSP setup priority
    """
    return self.__lsp_config_setup_prority
      
  def _set_lsp_config_setup_prority(self, v, load=False):
    """
    Setter method for lsp_config_setup_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_setup_prority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_setup_prority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_setup_prority() directly.

    YANG Description: LSP setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-setup-prority", rest_name="lsp-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_setup_prority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-setup-prority", rest_name="lsp-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_setup_prority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_setup_prority(self):
    self.__lsp_config_setup_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-setup-prority", rest_name="lsp-config-setup-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_holding_prority(self):
    """
    Getter method for lsp_config_holding_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_holding_prority (uint8)

    YANG Description: LSP holding priority
    """
    return self.__lsp_config_holding_prority
      
  def _set_lsp_config_holding_prority(self, v, load=False):
    """
    Setter method for lsp_config_holding_prority, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_holding_prority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_holding_prority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_holding_prority() directly.

    YANG Description: LSP holding priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-holding-prority", rest_name="lsp-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_holding_prority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-holding-prority", rest_name="lsp-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_holding_prority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_holding_prority(self):
    self.__lsp_config_holding_prority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-holding-prority", rest_name="lsp-config-holding-prority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_hop_limit_configured(self):
    """
    Getter method for lsp_config_hop_limit_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_hop_limit_configured (boolean)

    YANG Description: LSP hop limit configured
    """
    return self.__lsp_config_hop_limit_configured
      
  def _set_lsp_config_hop_limit_configured(self, v, load=False):
    """
    Setter method for lsp_config_hop_limit_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_hop_limit_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_hop_limit_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_hop_limit_configured() directly.

    YANG Description: LSP hop limit configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-hop-limit-configured", rest_name="lsp-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_hop_limit_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-hop-limit-configured", rest_name="lsp-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_hop_limit_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_hop_limit_configured(self):
    self.__lsp_config_hop_limit_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-hop-limit-configured", rest_name="lsp-config-hop-limit-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_hop_limit(self):
    """
    Getter method for lsp_config_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_hop_limit (uint8)

    YANG Description: LSP hop limit
    """
    return self.__lsp_config_hop_limit
      
  def _set_lsp_config_hop_limit(self, v, load=False):
    """
    Setter method for lsp_config_hop_limit, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_hop_limit() directly.

    YANG Description: LSP hop limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-hop-limit", rest_name="lsp-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-hop-limit", rest_name="lsp-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_config_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_hop_limit(self):
    self.__lsp_config_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-config-hop-limit", rest_name="lsp-config-hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_config_traffic_eng_rate_configured(self):
    """
    Getter method for lsp_config_traffic_eng_rate_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_rate_configured (boolean)

    YANG Description: LSP traffic engineering rates configured
    """
    return self.__lsp_config_traffic_eng_rate_configured
      
  def _set_lsp_config_traffic_eng_rate_configured(self, v, load=False):
    """
    Setter method for lsp_config_traffic_eng_rate_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_rate_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_traffic_eng_rate_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_traffic_eng_rate_configured() directly.

    YANG Description: LSP traffic engineering rates configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-traffic-eng-rate-configured", rest_name="lsp-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_traffic_eng_rate_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-traffic-eng-rate-configured", rest_name="lsp-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_traffic_eng_rate_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_traffic_eng_rate_configured(self):
    self.__lsp_config_traffic_eng_rate_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-traffic-eng-rate-configured", rest_name="lsp-config-traffic-eng-rate-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_traffic_eng_mean_rate(self):
    """
    Getter method for lsp_config_traffic_eng_mean_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_mean_rate (uint32)

    YANG Description: LSP traffic engineering mean rate
    """
    return self.__lsp_config_traffic_eng_mean_rate
      
  def _set_lsp_config_traffic_eng_mean_rate(self, v, load=False):
    """
    Setter method for lsp_config_traffic_eng_mean_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_mean_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_traffic_eng_mean_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_traffic_eng_mean_rate() directly.

    YANG Description: LSP traffic engineering mean rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-mean-rate", rest_name="lsp-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_traffic_eng_mean_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-mean-rate", rest_name="lsp-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_traffic_eng_mean_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_traffic_eng_mean_rate(self):
    self.__lsp_config_traffic_eng_mean_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-mean-rate", rest_name="lsp-config-traffic-eng-mean-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_traffic_eng_max_rate(self):
    """
    Getter method for lsp_config_traffic_eng_max_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_max_rate (uint32)

    YANG Description: LSP traffic engineering max rate
    """
    return self.__lsp_config_traffic_eng_max_rate
      
  def _set_lsp_config_traffic_eng_max_rate(self, v, load=False):
    """
    Setter method for lsp_config_traffic_eng_max_rate, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_max_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_traffic_eng_max_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_traffic_eng_max_rate() directly.

    YANG Description: LSP traffic engineering max rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-rate", rest_name="lsp-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_traffic_eng_max_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-rate", rest_name="lsp-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_traffic_eng_max_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_traffic_eng_max_rate(self):
    self.__lsp_config_traffic_eng_max_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-rate", rest_name="lsp-config-traffic-eng-max-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_traffic_eng_max_burst(self):
    """
    Getter method for lsp_config_traffic_eng_max_burst, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_max_burst (uint32)

    YANG Description: LSP traffic engineering max-burst
    """
    return self.__lsp_config_traffic_eng_max_burst
      
  def _set_lsp_config_traffic_eng_max_burst(self, v, load=False):
    """
    Setter method for lsp_config_traffic_eng_max_burst, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_traffic_eng_max_burst (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_traffic_eng_max_burst is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_traffic_eng_max_burst() directly.

    YANG Description: LSP traffic engineering max-burst
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-burst", rest_name="lsp-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_traffic_eng_max_burst must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-burst", rest_name="lsp-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_config_traffic_eng_max_burst = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_traffic_eng_max_burst(self):
    self.__lsp_config_traffic_eng_max_burst = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-config-traffic-eng-max-burst", rest_name="lsp-config-traffic-eng-max-burst", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_config_admin_group_configured(self):
    """
    Getter method for lsp_config_admin_group_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_admin_group_configured (boolean)

    YANG Description: LSP admin group configured
    """
    return self.__lsp_config_admin_group_configured
      
  def _set_lsp_config_admin_group_configured(self, v, load=False):
    """
    Setter method for lsp_config_admin_group_configured, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_admin_group_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_admin_group_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_admin_group_configured() directly.

    YANG Description: LSP admin group configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-group-configured", rest_name="lsp-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_admin_group_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-group-configured", rest_name="lsp-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_config_admin_group_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_admin_group_configured(self):
    self.__lsp_config_admin_group_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-config-admin-group-configured", rest_name="lsp-config-admin-group-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_config_admin_groups(self):
    """
    Getter method for lsp_config_admin_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_admin_groups (container)
    """
    return self.__lsp_config_admin_groups
      
  def _set_lsp_config_admin_groups(self, v, load=False):
    """
    Setter method for lsp_config_admin_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_config_admin_groups (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_config_admin_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_config_admin_groups() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lsp_config_admin_groups.lsp_config_admin_groups, is_container='container', presence=False, yang_name="lsp-config-admin-groups", rest_name="lsp-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_config_admin_groups must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lsp_config_admin_groups.lsp_config_admin_groups, is_container='container', presence=False, yang_name="lsp-config-admin-groups", rest_name="lsp-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__lsp_config_admin_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_config_admin_groups(self):
    self.__lsp_config_admin_groups = YANGDynClass(base=lsp_config_admin_groups.lsp_config_admin_groups, is_container='container', presence=False, yang_name="lsp-config-admin-groups", rest_name="lsp-config-admin-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_lsp_path_computed_by_cspf(self):
    """
    Getter method for lsp_path_computed_by_cspf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_path_computed_by_cspf (boolean)

    YANG Description: LSP path computaion by CSPF
    """
    return self.__lsp_path_computed_by_cspf
      
  def _set_lsp_path_computed_by_cspf(self, v, load=False):
    """
    Setter method for lsp_path_computed_by_cspf, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_path_computed_by_cspf (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_path_computed_by_cspf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_path_computed_by_cspf() directly.

    YANG Description: LSP path computaion by CSPF
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-cspf", rest_name="lsp-path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_path_computed_by_cspf must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-cspf", rest_name="lsp-path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_path_computed_by_cspf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_path_computed_by_cspf(self):
    self.__lsp_path_computed_by_cspf = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-cspf", rest_name="lsp-path-computed-by-cspf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_path_computed_by_interface_constraint(self):
    """
    Getter method for lsp_path_computed_by_interface_constraint, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_path_computed_by_interface_constraint (boolean)

    YANG Description: LSP path computaion by CSPF interface constarint
    """
    return self.__lsp_path_computed_by_interface_constraint
      
  def _set_lsp_path_computed_by_interface_constraint(self, v, load=False):
    """
    Setter method for lsp_path_computed_by_interface_constraint, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_path_computed_by_interface_constraint (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_path_computed_by_interface_constraint is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_path_computed_by_interface_constraint() directly.

    YANG Description: LSP path computaion by CSPF interface constarint
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-interface-constraint", rest_name="lsp-path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_path_computed_by_interface_constraint must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-interface-constraint", rest_name="lsp-path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_path_computed_by_interface_constraint = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_path_computed_by_interface_constraint(self):
    self.__lsp_path_computed_by_interface_constraint = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-path-computed-by-interface-constraint", rest_name="lsp-path-computed-by-interface-constraint", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_computation_mode_default(self):
    """
    Getter method for lsp_cspf_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_mode_default (boolean)

    YANG Description: LSP path computaion mode default
    """
    return self.__lsp_cspf_computation_mode_default
      
  def _set_lsp_cspf_computation_mode_default(self, v, load=False):
    """
    Setter method for lsp_cspf_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_mode_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_computation_mode_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_computation_mode_default() directly.

    YANG Description: LSP path computaion mode default
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-default", rest_name="lsp-cspf-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_computation_mode_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-default", rest_name="lsp-cspf-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_computation_mode_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_computation_mode_default(self):
    self.__lsp_cspf_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-default", rest_name="lsp-cspf-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_computation_mode_use_bypass_metric(self):
    """
    Getter method for lsp_cspf_computation_mode_use_bypass_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_mode_use_bypass_metric (boolean)

    YANG Description: LSP path computaion mode is use bupass metric
    """
    return self.__lsp_cspf_computation_mode_use_bypass_metric
      
  def _set_lsp_cspf_computation_mode_use_bypass_metric(self, v, load=False):
    """
    Setter method for lsp_cspf_computation_mode_use_bypass_metric, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_mode_use_bypass_metric (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_computation_mode_use_bypass_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_computation_mode_use_bypass_metric() directly.

    YANG Description: LSP path computaion mode is use bupass metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-metric", rest_name="lsp-cspf-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_computation_mode_use_bypass_metric must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-metric", rest_name="lsp-cspf-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_computation_mode_use_bypass_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_computation_mode_use_bypass_metric(self):
    self.__lsp_cspf_computation_mode_use_bypass_metric = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-metric", rest_name="lsp-cspf-computation-mode-use-bypass-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_computation_mode_use_bypass_liberal(self):
    """
    Getter method for lsp_cspf_computation_mode_use_bypass_liberal, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_mode_use_bypass_liberal (boolean)

    YANG Description: LSP path computaion mode is use bypass liberal
    """
    return self.__lsp_cspf_computation_mode_use_bypass_liberal
      
  def _set_lsp_cspf_computation_mode_use_bypass_liberal(self, v, load=False):
    """
    Setter method for lsp_cspf_computation_mode_use_bypass_liberal, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_mode_use_bypass_liberal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_computation_mode_use_bypass_liberal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_computation_mode_use_bypass_liberal() directly.

    YANG Description: LSP path computaion mode is use bypass liberal
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-liberal", rest_name="lsp-cspf-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_computation_mode_use_bypass_liberal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-liberal", rest_name="lsp-cspf-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_computation_mode_use_bypass_liberal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_computation_mode_use_bypass_liberal(self):
    self.__lsp_cspf_computation_mode_use_bypass_liberal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-computation-mode-use-bypass-liberal", rest_name="lsp-cspf-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_group_computation_mode_default(self):
    """
    Getter method for lsp_cspf_group_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_default (boolean)

    YANG Description: LSP path computaion group mode default
    """
    return self.__lsp_cspf_group_computation_mode_default
      
  def _set_lsp_cspf_group_computation_mode_default(self, v, load=False):
    """
    Setter method for lsp_cspf_group_computation_mode_default, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_default (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_group_computation_mode_default is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_group_computation_mode_default() directly.

    YANG Description: LSP path computaion group mode default
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-default", rest_name="lsp-cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_group_computation_mode_default must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-default", rest_name="lsp-cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_group_computation_mode_default = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_group_computation_mode_default(self):
    self.__lsp_cspf_group_computation_mode_default = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-default", rest_name="lsp-cspf-group-computation-mode-default", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_group_computation_mode_add_penalty(self):
    """
    Getter method for lsp_cspf_group_computation_mode_add_penalty, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_add_penalty (boolean)

    YANG Description: LSP path computaion group mode is add penalty
    """
    return self.__lsp_cspf_group_computation_mode_add_penalty
      
  def _set_lsp_cspf_group_computation_mode_add_penalty(self, v, load=False):
    """
    Setter method for lsp_cspf_group_computation_mode_add_penalty, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_add_penalty (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_group_computation_mode_add_penalty is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_group_computation_mode_add_penalty() directly.

    YANG Description: LSP path computaion group mode is add penalty
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-add-penalty", rest_name="lsp-cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_group_computation_mode_add_penalty must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-add-penalty", rest_name="lsp-cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_group_computation_mode_add_penalty = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_group_computation_mode_add_penalty(self):
    self.__lsp_cspf_group_computation_mode_add_penalty = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-add-penalty", rest_name="lsp-cspf-group-computation-mode-add-penalty", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_group_computation_mode_exclude_groups(self):
    """
    Getter method for lsp_cspf_group_computation_mode_exclude_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_exclude_groups (boolean)

    YANG Description: LSP path computaion group mode is exclude groups
    """
    return self.__lsp_cspf_group_computation_mode_exclude_groups
      
  def _set_lsp_cspf_group_computation_mode_exclude_groups(self, v, load=False):
    """
    Setter method for lsp_cspf_group_computation_mode_exclude_groups, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_exclude_groups (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_group_computation_mode_exclude_groups is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_group_computation_mode_exclude_groups() directly.

    YANG Description: LSP path computaion group mode is exclude groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-exclude-groups", rest_name="lsp-cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_group_computation_mode_exclude_groups must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-exclude-groups", rest_name="lsp-cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_group_computation_mode_exclude_groups = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_group_computation_mode_exclude_groups(self):
    self.__lsp_cspf_group_computation_mode_exclude_groups = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-exclude-groups", rest_name="lsp-cspf-group-computation-mode-exclude-groups", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_group_computation_mode_high_cost(self):
    """
    Getter method for lsp_cspf_group_computation_mode_high_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_high_cost (boolean)

    YANG Description: LSP path computaion group mode is exclude groups
    """
    return self.__lsp_cspf_group_computation_mode_high_cost
      
  def _set_lsp_cspf_group_computation_mode_high_cost(self, v, load=False):
    """
    Setter method for lsp_cspf_group_computation_mode_high_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_group_computation_mode_high_cost (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_group_computation_mode_high_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_group_computation_mode_high_cost() directly.

    YANG Description: LSP path computaion group mode is exclude groups
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-high-cost", rest_name="lsp-cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_group_computation_mode_high_cost must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-high-cost", rest_name="lsp-cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_group_computation_mode_high_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_group_computation_mode_high_cost(self):
    self.__lsp_cspf_group_computation_mode_high_cost = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-group-computation-mode-high-cost", rest_name="lsp-cspf-group-computation-mode-high-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_path_cost(self):
    """
    Getter method for lsp_cspf_path_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_path_cost (uint32)

    YANG Description: LSP CSPF computed path cost
    """
    return self.__lsp_cspf_path_cost
      
  def _set_lsp_cspf_path_cost(self, v, load=False):
    """
    Setter method for lsp_cspf_path_cost, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_path_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_path_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_path_cost() directly.

    YANG Description: LSP CSPF computed path cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-path-cost", rest_name="lsp-cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_path_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-path-cost", rest_name="lsp-cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_cspf_path_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_path_cost(self):
    self.__lsp_cspf_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-path-cost", rest_name="lsp-cspf-path-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_cspf_path_area(self):
    """
    Getter method for lsp_cspf_path_area, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_path_area (inet:ipv4-address)

    YANG Description: LSP CSPF paths area
    """
    return self.__lsp_cspf_path_area
      
  def _set_lsp_cspf_path_area(self, v, load=False):
    """
    Setter method for lsp_cspf_path_area, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_path_area (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_path_area is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_path_area() directly.

    YANG Description: LSP CSPF paths area
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-cspf-path-area", rest_name="lsp-cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_path_area must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-cspf-path-area", rest_name="lsp-cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__lsp_cspf_path_area = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_path_area(self):
    self.__lsp_cspf_path_area = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-cspf-path-area", rest_name="lsp-cspf-path-area", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_lsp_cspf_computation_error(self):
    """
    Getter method for lsp_cspf_computation_error, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_error (uint32)

    YANG Description: LSP CSPF computaion error code
    """
    return self.__lsp_cspf_computation_error
      
  def _set_lsp_cspf_computation_error(self, v, load=False):
    """
    Setter method for lsp_cspf_computation_error, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_computation_error (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_computation_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_computation_error() directly.

    YANG Description: LSP CSPF computaion error code
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-computation-error", rest_name="lsp-cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_computation_error must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-computation-error", rest_name="lsp-cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_cspf_computation_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_computation_error(self):
    self.__lsp_cspf_computation_error = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-cspf-computation-error", rest_name="lsp-cspf-computation-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_cspf_path_hops(self):
    """
    Getter method for lsp_cspf_path_hops, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_path_hops (container)
    """
    return self.__lsp_cspf_path_hops
      
  def _set_lsp_cspf_path_hops(self, v, load=False):
    """
    Setter method for lsp_cspf_path_hops, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_path_hops (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_path_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_path_hops() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lsp_cspf_path_hops.lsp_cspf_path_hops, is_container='container', presence=False, yang_name="lsp-cspf-path-hops", rest_name="lsp-cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_path_hops must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lsp_cspf_path_hops.lsp_cspf_path_hops, is_container='container', presence=False, yang_name="lsp-cspf-path-hops", rest_name="lsp-cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__lsp_cspf_path_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_path_hops(self):
    self.__lsp_cspf_path_hops = YANGDynClass(base=lsp_cspf_path_hops.lsp_cspf_path_hops, is_container='container', presence=False, yang_name="lsp-cspf-path-hops", rest_name="lsp-cspf-path-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_lsp_cspf_exclude_hops_present(self):
    """
    Getter method for lsp_cspf_exclude_hops_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_exclude_hops_present (boolean)

    YANG Description: LSP cspf exclude hops present
    """
    return self.__lsp_cspf_exclude_hops_present
      
  def _set_lsp_cspf_exclude_hops_present(self, v, load=False):
    """
    Setter method for lsp_cspf_exclude_hops_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_exclude_hops_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_exclude_hops_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_exclude_hops_present() directly.

    YANG Description: LSP cspf exclude hops present
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-cspf-exclude-hops-present", rest_name="lsp-cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_exclude_hops_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-exclude-hops-present", rest_name="lsp-cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_cspf_exclude_hops_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_exclude_hops_present(self):
    self.__lsp_cspf_exclude_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-cspf-exclude-hops-present", rest_name="lsp-cspf-exclude-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_cspf_exclude_hops(self):
    """
    Getter method for lsp_cspf_exclude_hops, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_exclude_hops (container)
    """
    return self.__lsp_cspf_exclude_hops
      
  def _set_lsp_cspf_exclude_hops(self, v, load=False):
    """
    Setter method for lsp_cspf_exclude_hops, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_cspf_exclude_hops (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_cspf_exclude_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_cspf_exclude_hops() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lsp_cspf_exclude_hops.lsp_cspf_exclude_hops, is_container='container', presence=False, yang_name="lsp-cspf-exclude-hops", rest_name="lsp-cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_cspf_exclude_hops must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lsp_cspf_exclude_hops.lsp_cspf_exclude_hops, is_container='container', presence=False, yang_name="lsp-cspf-exclude-hops", rest_name="lsp-cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__lsp_cspf_exclude_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_cspf_exclude_hops(self):
    self.__lsp_cspf_exclude_hops = YANGDynClass(base=lsp_cspf_exclude_hops.lsp_cspf_exclude_hops, is_container='container', presence=False, yang_name="lsp-cspf-exclude-hops", rest_name="lsp-cspf-exclude-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_lsp_rsvp_session_present(self):
    """
    Getter method for lsp_rsvp_session_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_present (boolean)

    YANG Description: LSP RSVP session exists
    """
    return self.__lsp_rsvp_session_present
      
  def _set_lsp_rsvp_session_present(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_present() directly.

    YANG Description: LSP RSVP session exists
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-present", rest_name="lsp-rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-present", rest_name="lsp-rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_rsvp_session_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_present(self):
    self.__lsp_rsvp_session_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-present", rest_name="lsp-rsvp-session-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_rsvp_session_state_up(self):
    """
    Getter method for lsp_rsvp_session_state_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_state_up (boolean)

    YANG Description: LSP RSVP session state
    """
    return self.__lsp_rsvp_session_state_up
      
  def _set_lsp_rsvp_session_state_up(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_state_up, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_state_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_state_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_state_up() directly.

    YANG Description: LSP RSVP session state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-state-up", rest_name="lsp-rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_state_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-state-up", rest_name="lsp-rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_rsvp_session_state_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_state_up(self):
    self.__lsp_rsvp_session_state_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-state-up", rest_name="lsp-rsvp-session-state-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_rsvp_session_state(self):
    """
    Getter method for lsp_rsvp_session_state, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_state (uint8)

    YANG Description: LSP RSVP session state
    """
    return self.__lsp_rsvp_session_state
      
  def _set_lsp_rsvp_session_state(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_state, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_state (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_state() directly.

    YANG Description: LSP RSVP session state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-rsvp-session-state", rest_name="lsp-rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_state must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-rsvp-session-state", rest_name="lsp-rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__lsp_rsvp_session_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_state(self):
    self.__lsp_rsvp_session_state = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="lsp-rsvp-session-state", rest_name="lsp-rsvp-session-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_lsp_rsvp_session_path_error_code(self):
    """
    Getter method for lsp_rsvp_session_path_error_code, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_path_error_code (uint32)

    YANG Description: LSP RSVP session path error code
    """
    return self.__lsp_rsvp_session_path_error_code
      
  def _set_lsp_rsvp_session_path_error_code(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_path_error_code, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_path_error_code (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_path_error_code is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_path_error_code() directly.

    YANG Description: LSP RSVP session path error code
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-code", rest_name="lsp-rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_path_error_code must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-code", rest_name="lsp-rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_rsvp_session_path_error_code = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_path_error_code(self):
    self.__lsp_rsvp_session_path_error_code = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-code", rest_name="lsp-rsvp-session-path-error-code", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_rsvp_session_path_error_value(self):
    """
    Getter method for lsp_rsvp_session_path_error_value, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_path_error_value (uint32)

    YANG Description: LSP RSVP session path error value
    """
    return self.__lsp_rsvp_session_path_error_value
      
  def _set_lsp_rsvp_session_path_error_value(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_path_error_value, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_path_error_value (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_path_error_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_path_error_value() directly.

    YANG Description: LSP RSVP session path error value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-value", rest_name="lsp-rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_path_error_value must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-value", rest_name="lsp-rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_rsvp_session_path_error_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_path_error_value(self):
    self.__lsp_rsvp_session_path_error_value = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-rsvp-session-path-error-value", rest_name="lsp-rsvp-session-path-error-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_rsvp_session_path_error_node_address(self):
    """
    Getter method for lsp_rsvp_session_path_error_node_address, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_path_error_node_address (inet:ipv4-address)

    YANG Description: LSP RSVP session path error node address
    """
    return self.__lsp_rsvp_session_path_error_node_address
      
  def _set_lsp_rsvp_session_path_error_node_address(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_path_error_node_address, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_path_error_node_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_path_error_node_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_path_error_node_address() directly.

    YANG Description: LSP RSVP session path error node address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-rsvp-session-path-error-node-address", rest_name="lsp-rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_path_error_node_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-rsvp-session-path-error-node-address", rest_name="lsp-rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__lsp_rsvp_session_path_error_node_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_path_error_node_address(self):
    self.__lsp_rsvp_session_path_error_node_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="lsp-rsvp-session-path-error-node-address", rest_name="lsp-rsvp-session-path-error-node-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ipv4-address', is_config=True)


  def _get_lsp_rsvp_session_rro_hops_present(self):
    """
    Getter method for lsp_rsvp_session_rro_hops_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_rro_hops_present (boolean)

    YANG Description: LSP RSVP session RRO present
    """
    return self.__lsp_rsvp_session_rro_hops_present
      
  def _set_lsp_rsvp_session_rro_hops_present(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_rro_hops_present, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_rro_hops_present (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_rro_hops_present is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_rro_hops_present() directly.

    YANG Description: LSP RSVP session RRO present
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-rro-hops-present", rest_name="lsp-rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_rro_hops_present must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-rro-hops-present", rest_name="lsp-rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)""",
        })

    self.__lsp_rsvp_session_rro_hops_present = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_rro_hops_present(self):
    self.__lsp_rsvp_session_rro_hops_present = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-rsvp-session-rro-hops-present", rest_name="lsp-rsvp-session-rro-hops-present", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='boolean', is_config=True)


  def _get_lsp_rsvp_session_rro_hops(self):
    """
    Getter method for lsp_rsvp_session_rro_hops, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_rro_hops (container)
    """
    return self.__lsp_rsvp_session_rro_hops
      
  def _set_lsp_rsvp_session_rro_hops(self, v, load=False):
    """
    Setter method for lsp_rsvp_session_rro_hops, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_rsvp_session_rro_hops (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_rsvp_session_rro_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_rsvp_session_rro_hops() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=lsp_rsvp_session_rro_hops.lsp_rsvp_session_rro_hops, is_container='container', presence=False, yang_name="lsp-rsvp-session-rro-hops", rest_name="lsp-rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_rsvp_session_rro_hops must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=lsp_rsvp_session_rro_hops.lsp_rsvp_session_rro_hops, is_container='container', presence=False, yang_name="lsp-rsvp-session-rro-hops", rest_name="lsp-rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__lsp_rsvp_session_rro_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_rsvp_session_rro_hops(self):
    self.__lsp_rsvp_session_rro_hops = YANGDynClass(base=lsp_rsvp_session_rro_hops.lsp_rsvp_session_rro_hops, is_container='container', presence=False, yang_name="lsp-rsvp-session-rro-hops", rest_name="lsp-rsvp-session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_lsp_maximum_bandwidth(self):
    """
    Getter method for lsp_maximum_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_maximum_bandwidth (uint32)

    YANG Description: LSP maximum bandwidth
    """
    return self.__lsp_maximum_bandwidth
      
  def _set_lsp_maximum_bandwidth(self, v, load=False):
    """
    Setter method for lsp_maximum_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_maximum_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_maximum_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_maximum_bandwidth() directly.

    YANG Description: LSP maximum bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-maximum-bandwidth", rest_name="lsp-maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_maximum_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-maximum-bandwidth", rest_name="lsp-maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_maximum_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_maximum_bandwidth(self):
    self.__lsp_maximum_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-maximum-bandwidth", rest_name="lsp-maximum-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_0_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_0_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_0_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 0
    """
    return self.__lsp_unreserved_priority_0_bandwidth
      
  def _set_lsp_unreserved_priority_0_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_0_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_0_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_0_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_0_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 0
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-0-bandwidth", rest_name="lsp-unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_0_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-0-bandwidth", rest_name="lsp-unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_0_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_0_bandwidth(self):
    self.__lsp_unreserved_priority_0_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-0-bandwidth", rest_name="lsp-unreserved-priority-0-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_1_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_1_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_1_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 1
    """
    return self.__lsp_unreserved_priority_1_bandwidth
      
  def _set_lsp_unreserved_priority_1_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_1_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_1_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_1_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_1_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-1-bandwidth", rest_name="lsp-unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_1_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-1-bandwidth", rest_name="lsp-unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_1_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_1_bandwidth(self):
    self.__lsp_unreserved_priority_1_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-1-bandwidth", rest_name="lsp-unreserved-priority-1-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_2_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_2_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_2_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 2
    """
    return self.__lsp_unreserved_priority_2_bandwidth
      
  def _set_lsp_unreserved_priority_2_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_2_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_2_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_2_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_2_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-2-bandwidth", rest_name="lsp-unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_2_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-2-bandwidth", rest_name="lsp-unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_2_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_2_bandwidth(self):
    self.__lsp_unreserved_priority_2_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-2-bandwidth", rest_name="lsp-unreserved-priority-2-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_3_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_3_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_3_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 3
    """
    return self.__lsp_unreserved_priority_3_bandwidth
      
  def _set_lsp_unreserved_priority_3_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_3_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_3_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_3_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_3_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 3
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-3-bandwidth", rest_name="lsp-unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_3_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-3-bandwidth", rest_name="lsp-unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_3_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_3_bandwidth(self):
    self.__lsp_unreserved_priority_3_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-3-bandwidth", rest_name="lsp-unreserved-priority-3-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_4_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_4_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_4_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 4
    """
    return self.__lsp_unreserved_priority_4_bandwidth
      
  def _set_lsp_unreserved_priority_4_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_4_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_4_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_4_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_4_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 4
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-4-bandwidth", rest_name="lsp-unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_4_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-4-bandwidth", rest_name="lsp-unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_4_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_4_bandwidth(self):
    self.__lsp_unreserved_priority_4_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-4-bandwidth", rest_name="lsp-unreserved-priority-4-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_5_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_5_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_5_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 5
    """
    return self.__lsp_unreserved_priority_5_bandwidth
      
  def _set_lsp_unreserved_priority_5_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_5_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_5_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_5_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_5_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 5
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-5-bandwidth", rest_name="lsp-unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_5_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-5-bandwidth", rest_name="lsp-unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_5_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_5_bandwidth(self):
    self.__lsp_unreserved_priority_5_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-5-bandwidth", rest_name="lsp-unreserved-priority-5-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_6_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_6_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_6_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 6
    """
    return self.__lsp_unreserved_priority_6_bandwidth
      
  def _set_lsp_unreserved_priority_6_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_6_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_6_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_6_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_6_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 6
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-6-bandwidth", rest_name="lsp-unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_6_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-6-bandwidth", rest_name="lsp-unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_6_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_6_bandwidth(self):
    self.__lsp_unreserved_priority_6_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-6-bandwidth", rest_name="lsp-unreserved-priority-6-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_lsp_unreserved_priority_7_bandwidth(self):
    """
    Getter method for lsp_unreserved_priority_7_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_7_bandwidth (uint32)

    YANG Description: Unreserved bandwidth at priority 7
    """
    return self.__lsp_unreserved_priority_7_bandwidth
      
  def _set_lsp_unreserved_priority_7_bandwidth(self, v, load=False):
    """
    Setter method for lsp_unreserved_priority_7_bandwidth, mapped from YANG variable /brocade_mpls_rpc/show_mpls_bypass_lsp_name_detail/output/bypass_lsp/show_mpls_lsp_detail_info/show_mpls_lsp_instances_info/lsp_instances/lsp_unreserved_priority_7_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_unreserved_priority_7_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_unreserved_priority_7_bandwidth() directly.

    YANG Description: Unreserved bandwidth at priority 7
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-7-bandwidth", rest_name="lsp-unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_unreserved_priority_7_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-7-bandwidth", rest_name="lsp-unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_unreserved_priority_7_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_unreserved_priority_7_bandwidth(self):
    self.__lsp_unreserved_priority_7_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-unreserved-priority-7-bandwidth", rest_name="lsp-unreserved-priority-7-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)

  lsp_instance_number = __builtin__.property(_get_lsp_instance_number, _set_lsp_instance_number)
  lsp_current_instance = __builtin__.property(_get_lsp_current_instance, _set_lsp_current_instance)
  lsp_new_instance = __builtin__.property(_get_lsp_new_instance, _set_lsp_new_instance)
  lsp_old_instance = __builtin__.property(_get_lsp_old_instance, _set_lsp_old_instance)
  lsp_is_primary = __builtin__.property(_get_lsp_is_primary, _set_lsp_is_primary)
  lsp_is_current_secondary = __builtin__.property(_get_lsp_is_current_secondary, _set_lsp_is_current_secondary)
  lsp_is_selected_secondary = __builtin__.property(_get_lsp_is_selected_secondary, _set_lsp_is_selected_secondary)
  lsp_config_path_configured = __builtin__.property(_get_lsp_config_path_configured, _set_lsp_config_path_configured)
  lsp_config_path = __builtin__.property(_get_lsp_config_path, _set_lsp_config_path)
  lsp_config_reoptimize_timer_configured = __builtin__.property(_get_lsp_config_reoptimize_timer_configured, _set_lsp_config_reoptimize_timer_configured)
  lsp_config_reoptimize_timer = __builtin__.property(_get_lsp_config_reoptimize_timer, _set_lsp_config_reoptimize_timer)
  lsp_config_tspec_mtu_configured = __builtin__.property(_get_lsp_config_tspec_mtu_configured, _set_lsp_config_tspec_mtu_configured)
  lsp_config_tspec_mtu = __builtin__.property(_get_lsp_config_tspec_mtu, _set_lsp_config_tspec_mtu)
  lsp_config_cos_configured = __builtin__.property(_get_lsp_config_cos_configured, _set_lsp_config_cos_configured)
  lsp_config_cos = __builtin__.property(_get_lsp_config_cos, _set_lsp_config_cos)
  lsp_config_mtu_configured = __builtin__.property(_get_lsp_config_mtu_configured, _set_lsp_config_mtu_configured)
  lsp_config_mtu = __builtin__.property(_get_lsp_config_mtu, _set_lsp_config_mtu)
  lsp_config_tie_breaking_configured = __builtin__.property(_get_lsp_config_tie_breaking_configured, _set_lsp_config_tie_breaking_configured)
  lsp_config_tie_break_random = __builtin__.property(_get_lsp_config_tie_break_random, _set_lsp_config_tie_break_random)
  lsp_config_tie_break_least_fill = __builtin__.property(_get_lsp_config_tie_break_least_fill, _set_lsp_config_tie_break_least_fill)
  lsp_config_tie_break_most_fill = __builtin__.property(_get_lsp_config_tie_break_most_fill, _set_lsp_config_tie_break_most_fill)
  lsp_config_cspf_disabled = __builtin__.property(_get_lsp_config_cspf_disabled, _set_lsp_config_cspf_disabled)
  lsp_config_hot_standby = __builtin__.property(_get_lsp_config_hot_standby, _set_lsp_config_hot_standby)
  lsp_config_pinned = __builtin__.property(_get_lsp_config_pinned, _set_lsp_config_pinned)
  lsp_config_persistenct = __builtin__.property(_get_lsp_config_persistenct, _set_lsp_config_persistenct)
  lsp_config_frr_global_revertive = __builtin__.property(_get_lsp_config_frr_global_revertive, _set_lsp_config_frr_global_revertive)
  lsp_config_frr_hold_time = __builtin__.property(_get_lsp_config_frr_hold_time, _set_lsp_config_frr_hold_time)
  lsp_config_soft_prempt = __builtin__.property(_get_lsp_config_soft_prempt, _set_lsp_config_soft_prempt)
  lsp_config_exclude_interface_change = __builtin__.property(_get_lsp_config_exclude_interface_change, _set_lsp_config_exclude_interface_change)
  lsp_config_prority_configured = __builtin__.property(_get_lsp_config_prority_configured, _set_lsp_config_prority_configured)
  lsp_config_setup_prority = __builtin__.property(_get_lsp_config_setup_prority, _set_lsp_config_setup_prority)
  lsp_config_holding_prority = __builtin__.property(_get_lsp_config_holding_prority, _set_lsp_config_holding_prority)
  lsp_config_hop_limit_configured = __builtin__.property(_get_lsp_config_hop_limit_configured, _set_lsp_config_hop_limit_configured)
  lsp_config_hop_limit = __builtin__.property(_get_lsp_config_hop_limit, _set_lsp_config_hop_limit)
  lsp_config_traffic_eng_rate_configured = __builtin__.property(_get_lsp_config_traffic_eng_rate_configured, _set_lsp_config_traffic_eng_rate_configured)
  lsp_config_traffic_eng_mean_rate = __builtin__.property(_get_lsp_config_traffic_eng_mean_rate, _set_lsp_config_traffic_eng_mean_rate)
  lsp_config_traffic_eng_max_rate = __builtin__.property(_get_lsp_config_traffic_eng_max_rate, _set_lsp_config_traffic_eng_max_rate)
  lsp_config_traffic_eng_max_burst = __builtin__.property(_get_lsp_config_traffic_eng_max_burst, _set_lsp_config_traffic_eng_max_burst)
  lsp_config_admin_group_configured = __builtin__.property(_get_lsp_config_admin_group_configured, _set_lsp_config_admin_group_configured)
  lsp_config_admin_groups = __builtin__.property(_get_lsp_config_admin_groups, _set_lsp_config_admin_groups)
  lsp_path_computed_by_cspf = __builtin__.property(_get_lsp_path_computed_by_cspf, _set_lsp_path_computed_by_cspf)
  lsp_path_computed_by_interface_constraint = __builtin__.property(_get_lsp_path_computed_by_interface_constraint, _set_lsp_path_computed_by_interface_constraint)
  lsp_cspf_computation_mode_default = __builtin__.property(_get_lsp_cspf_computation_mode_default, _set_lsp_cspf_computation_mode_default)
  lsp_cspf_computation_mode_use_bypass_metric = __builtin__.property(_get_lsp_cspf_computation_mode_use_bypass_metric, _set_lsp_cspf_computation_mode_use_bypass_metric)
  lsp_cspf_computation_mode_use_bypass_liberal = __builtin__.property(_get_lsp_cspf_computation_mode_use_bypass_liberal, _set_lsp_cspf_computation_mode_use_bypass_liberal)
  lsp_cspf_group_computation_mode_default = __builtin__.property(_get_lsp_cspf_group_computation_mode_default, _set_lsp_cspf_group_computation_mode_default)
  lsp_cspf_group_computation_mode_add_penalty = __builtin__.property(_get_lsp_cspf_group_computation_mode_add_penalty, _set_lsp_cspf_group_computation_mode_add_penalty)
  lsp_cspf_group_computation_mode_exclude_groups = __builtin__.property(_get_lsp_cspf_group_computation_mode_exclude_groups, _set_lsp_cspf_group_computation_mode_exclude_groups)
  lsp_cspf_group_computation_mode_high_cost = __builtin__.property(_get_lsp_cspf_group_computation_mode_high_cost, _set_lsp_cspf_group_computation_mode_high_cost)
  lsp_cspf_path_cost = __builtin__.property(_get_lsp_cspf_path_cost, _set_lsp_cspf_path_cost)
  lsp_cspf_path_area = __builtin__.property(_get_lsp_cspf_path_area, _set_lsp_cspf_path_area)
  lsp_cspf_computation_error = __builtin__.property(_get_lsp_cspf_computation_error, _set_lsp_cspf_computation_error)
  lsp_cspf_path_hops = __builtin__.property(_get_lsp_cspf_path_hops, _set_lsp_cspf_path_hops)
  lsp_cspf_exclude_hops_present = __builtin__.property(_get_lsp_cspf_exclude_hops_present, _set_lsp_cspf_exclude_hops_present)
  lsp_cspf_exclude_hops = __builtin__.property(_get_lsp_cspf_exclude_hops, _set_lsp_cspf_exclude_hops)
  lsp_rsvp_session_present = __builtin__.property(_get_lsp_rsvp_session_present, _set_lsp_rsvp_session_present)
  lsp_rsvp_session_state_up = __builtin__.property(_get_lsp_rsvp_session_state_up, _set_lsp_rsvp_session_state_up)
  lsp_rsvp_session_state = __builtin__.property(_get_lsp_rsvp_session_state, _set_lsp_rsvp_session_state)
  lsp_rsvp_session_path_error_code = __builtin__.property(_get_lsp_rsvp_session_path_error_code, _set_lsp_rsvp_session_path_error_code)
  lsp_rsvp_session_path_error_value = __builtin__.property(_get_lsp_rsvp_session_path_error_value, _set_lsp_rsvp_session_path_error_value)
  lsp_rsvp_session_path_error_node_address = __builtin__.property(_get_lsp_rsvp_session_path_error_node_address, _set_lsp_rsvp_session_path_error_node_address)
  lsp_rsvp_session_rro_hops_present = __builtin__.property(_get_lsp_rsvp_session_rro_hops_present, _set_lsp_rsvp_session_rro_hops_present)
  lsp_rsvp_session_rro_hops = __builtin__.property(_get_lsp_rsvp_session_rro_hops, _set_lsp_rsvp_session_rro_hops)
  lsp_maximum_bandwidth = __builtin__.property(_get_lsp_maximum_bandwidth, _set_lsp_maximum_bandwidth)
  lsp_unreserved_priority_0_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_0_bandwidth, _set_lsp_unreserved_priority_0_bandwidth)
  lsp_unreserved_priority_1_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_1_bandwidth, _set_lsp_unreserved_priority_1_bandwidth)
  lsp_unreserved_priority_2_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_2_bandwidth, _set_lsp_unreserved_priority_2_bandwidth)
  lsp_unreserved_priority_3_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_3_bandwidth, _set_lsp_unreserved_priority_3_bandwidth)
  lsp_unreserved_priority_4_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_4_bandwidth, _set_lsp_unreserved_priority_4_bandwidth)
  lsp_unreserved_priority_5_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_5_bandwidth, _set_lsp_unreserved_priority_5_bandwidth)
  lsp_unreserved_priority_6_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_6_bandwidth, _set_lsp_unreserved_priority_6_bandwidth)
  lsp_unreserved_priority_7_bandwidth = __builtin__.property(_get_lsp_unreserved_priority_7_bandwidth, _set_lsp_unreserved_priority_7_bandwidth)


  _pyangbind_elements = {'lsp_instance_number': lsp_instance_number, 'lsp_current_instance': lsp_current_instance, 'lsp_new_instance': lsp_new_instance, 'lsp_old_instance': lsp_old_instance, 'lsp_is_primary': lsp_is_primary, 'lsp_is_current_secondary': lsp_is_current_secondary, 'lsp_is_selected_secondary': lsp_is_selected_secondary, 'lsp_config_path_configured': lsp_config_path_configured, 'lsp_config_path': lsp_config_path, 'lsp_config_reoptimize_timer_configured': lsp_config_reoptimize_timer_configured, 'lsp_config_reoptimize_timer': lsp_config_reoptimize_timer, 'lsp_config_tspec_mtu_configured': lsp_config_tspec_mtu_configured, 'lsp_config_tspec_mtu': lsp_config_tspec_mtu, 'lsp_config_cos_configured': lsp_config_cos_configured, 'lsp_config_cos': lsp_config_cos, 'lsp_config_mtu_configured': lsp_config_mtu_configured, 'lsp_config_mtu': lsp_config_mtu, 'lsp_config_tie_breaking_configured': lsp_config_tie_breaking_configured, 'lsp_config_tie_break_random': lsp_config_tie_break_random, 'lsp_config_tie_break_least_fill': lsp_config_tie_break_least_fill, 'lsp_config_tie_break_most_fill': lsp_config_tie_break_most_fill, 'lsp_config_cspf_disabled': lsp_config_cspf_disabled, 'lsp_config_hot_standby': lsp_config_hot_standby, 'lsp_config_pinned': lsp_config_pinned, 'lsp_config_persistenct': lsp_config_persistenct, 'lsp_config_frr_global_revertive': lsp_config_frr_global_revertive, 'lsp_config_frr_hold_time': lsp_config_frr_hold_time, 'lsp_config_soft_prempt': lsp_config_soft_prempt, 'lsp_config_exclude_interface_change': lsp_config_exclude_interface_change, 'lsp_config_prority_configured': lsp_config_prority_configured, 'lsp_config_setup_prority': lsp_config_setup_prority, 'lsp_config_holding_prority': lsp_config_holding_prority, 'lsp_config_hop_limit_configured': lsp_config_hop_limit_configured, 'lsp_config_hop_limit': lsp_config_hop_limit, 'lsp_config_traffic_eng_rate_configured': lsp_config_traffic_eng_rate_configured, 'lsp_config_traffic_eng_mean_rate': lsp_config_traffic_eng_mean_rate, 'lsp_config_traffic_eng_max_rate': lsp_config_traffic_eng_max_rate, 'lsp_config_traffic_eng_max_burst': lsp_config_traffic_eng_max_burst, 'lsp_config_admin_group_configured': lsp_config_admin_group_configured, 'lsp_config_admin_groups': lsp_config_admin_groups, 'lsp_path_computed_by_cspf': lsp_path_computed_by_cspf, 'lsp_path_computed_by_interface_constraint': lsp_path_computed_by_interface_constraint, 'lsp_cspf_computation_mode_default': lsp_cspf_computation_mode_default, 'lsp_cspf_computation_mode_use_bypass_metric': lsp_cspf_computation_mode_use_bypass_metric, 'lsp_cspf_computation_mode_use_bypass_liberal': lsp_cspf_computation_mode_use_bypass_liberal, 'lsp_cspf_group_computation_mode_default': lsp_cspf_group_computation_mode_default, 'lsp_cspf_group_computation_mode_add_penalty': lsp_cspf_group_computation_mode_add_penalty, 'lsp_cspf_group_computation_mode_exclude_groups': lsp_cspf_group_computation_mode_exclude_groups, 'lsp_cspf_group_computation_mode_high_cost': lsp_cspf_group_computation_mode_high_cost, 'lsp_cspf_path_cost': lsp_cspf_path_cost, 'lsp_cspf_path_area': lsp_cspf_path_area, 'lsp_cspf_computation_error': lsp_cspf_computation_error, 'lsp_cspf_path_hops': lsp_cspf_path_hops, 'lsp_cspf_exclude_hops_present': lsp_cspf_exclude_hops_present, 'lsp_cspf_exclude_hops': lsp_cspf_exclude_hops, 'lsp_rsvp_session_present': lsp_rsvp_session_present, 'lsp_rsvp_session_state_up': lsp_rsvp_session_state_up, 'lsp_rsvp_session_state': lsp_rsvp_session_state, 'lsp_rsvp_session_path_error_code': lsp_rsvp_session_path_error_code, 'lsp_rsvp_session_path_error_value': lsp_rsvp_session_path_error_value, 'lsp_rsvp_session_path_error_node_address': lsp_rsvp_session_path_error_node_address, 'lsp_rsvp_session_rro_hops_present': lsp_rsvp_session_rro_hops_present, 'lsp_rsvp_session_rro_hops': lsp_rsvp_session_rro_hops, 'lsp_maximum_bandwidth': lsp_maximum_bandwidth, 'lsp_unreserved_priority_0_bandwidth': lsp_unreserved_priority_0_bandwidth, 'lsp_unreserved_priority_1_bandwidth': lsp_unreserved_priority_1_bandwidth, 'lsp_unreserved_priority_2_bandwidth': lsp_unreserved_priority_2_bandwidth, 'lsp_unreserved_priority_3_bandwidth': lsp_unreserved_priority_3_bandwidth, 'lsp_unreserved_priority_4_bandwidth': lsp_unreserved_priority_4_bandwidth, 'lsp_unreserved_priority_5_bandwidth': lsp_unreserved_priority_5_bandwidth, 'lsp_unreserved_priority_6_bandwidth': lsp_unreserved_priority_6_bandwidth, 'lsp_unreserved_priority_7_bandwidth': lsp_unreserved_priority_7_bandwidth, }


