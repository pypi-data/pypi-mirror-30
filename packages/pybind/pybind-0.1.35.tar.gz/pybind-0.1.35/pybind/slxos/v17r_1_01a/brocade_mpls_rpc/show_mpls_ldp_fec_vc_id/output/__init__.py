
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import ldp_fec_vc_downstream_rec_list
import ldp_fec_vc_upstream_rec_list
class output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /brocade_mpls_rpc/show-mpls-ldp-fec-vc-id/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ldp_fec_vc_feccb','__ldp_fec_vc_idx','__ldp_fec_vc_fec_type','__ldp_fec_prefix_pend_notif','__ldp_fec_prefix_state','__ldp_fec_prefix_Ingress','__ldp_fec_prefix_Egress','__ldp_fec_prefix_um_dist_done','__ldp_fec_vc_id','__ldp_fec_vc_type','__ldp_fec_vc_grp_id','__ldp_fec_vc_local_mtu','__ldp_fec_vc_remote_mtu','__ldp_fec_vc_mtu_enforcement','__ldp_fec_vc_agi','__ldp_fec_vc_downstream_rec_list','__ldp_fec_vc_upstream_rec_list',)

  _yang_name = 'output'
  _rest_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ldp_fec_prefix_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'current': {'value': 16384}, u'unknown': {'value': 0}, u'retained': {'value': 49152}, u'down': {'value': 32768}},), is_leaf=True, yang_name="ldp-fec-prefix-state", rest_name="ldp-fec-prefix-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-state', is_config=True)
    self.__ldp_fec_vc_upstream_rec_list = YANGDynClass(base=YANGListType("ldp_fec_vc_peer_ldp_id_up",ldp_fec_vc_upstream_rec_list.ldp_fec_vc_upstream_rec_list, yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-up', extensions=None), is_container='list', yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__ldp_fec_prefix_um_dist_done = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-um-dist-done", rest_name="ldp-fec-prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)
    self.__ldp_fec_prefix_Ingress = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Ingress", rest_name="ldp-fec-prefix-Ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)
    self.__ldp_fec_vc_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-type", rest_name="ldp-fec-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_local_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-local-mtu", rest_name="ldp-fec-vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_mtu_enforcement = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {'value': 0}, u'enabled': {'value': 1}},), is_leaf=True, yang_name="ldp-fec-vc-mtu-enforcement", rest_name="ldp-fec-vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enabled-disabled', is_config=True)
    self.__ldp_fec_prefix_pend_notif = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 0}, u'Up_Change': {'value': 4}, u'Up': {'value': 1}, u'Change': {'value': 2}, u'Dow': {'value': 3}},), is_leaf=True, yang_name="ldp-fec-prefix-pend-notif", rest_name="ldp-fec-prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-pend-notify', is_config=True)
    self.__ldp_fec_vc_agi = YANGDynClass(base=unicode, is_leaf=True, yang_name="ldp-fec-vc-agi", rest_name="ldp-fec-vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__ldp_fec_vc_grp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-grp-id", rest_name="ldp-fec-vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-id", rest_name="ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_feccb = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-feccb", rest_name="ldp-fec-vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_remote_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-remote-mtu", rest_name="ldp-fec-vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_idx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-idx", rest_name="ldp-fec-vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_vc_fec_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-fec-type", rest_name="ldp-fec-vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__ldp_fec_prefix_Egress = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Egress", rest_name="ldp-fec-prefix-Egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)
    self.__ldp_fec_vc_downstream_rec_list = YANGDynClass(base=YANGListType("ldp_fec_vc_peer_ldp_id_dw",ldp_fec_vc_downstream_rec_list.ldp_fec_vc_downstream_rec_list, yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-dw', extensions=None), is_container='list', yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_mpls_rpc', u'show-mpls-ldp-fec-vc-id', u'output']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-mpls-ldp-fec-vc-id', u'output']

  def _get_ldp_fec_vc_feccb(self):
    """
    Getter method for ldp_fec_vc_feccb, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_feccb (uint32)

    YANG Description: FEC_CB
    """
    return self.__ldp_fec_vc_feccb
      
  def _set_ldp_fec_vc_feccb(self, v, load=False):
    """
    Setter method for ldp_fec_vc_feccb, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_feccb (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_feccb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_feccb() directly.

    YANG Description: FEC_CB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-feccb", rest_name="ldp-fec-vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_feccb must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-feccb", rest_name="ldp-fec-vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_feccb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_feccb(self):
    self.__ldp_fec_vc_feccb = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-feccb", rest_name="ldp-fec-vc-feccb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_idx(self):
    """
    Getter method for ldp_fec_vc_idx, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_idx (uint32)

    YANG Description: idx
    """
    return self.__ldp_fec_vc_idx
      
  def _set_ldp_fec_vc_idx(self, v, load=False):
    """
    Setter method for ldp_fec_vc_idx, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_idx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_idx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_idx() directly.

    YANG Description: idx
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-idx", rest_name="ldp-fec-vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_idx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-idx", rest_name="ldp-fec-vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_idx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_idx(self):
    self.__ldp_fec_vc_idx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-idx", rest_name="ldp-fec-vc-idx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_fec_type(self):
    """
    Getter method for ldp_fec_vc_fec_type, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_fec_type (uint32)

    YANG Description: type
    """
    return self.__ldp_fec_vc_fec_type
      
  def _set_ldp_fec_vc_fec_type(self, v, load=False):
    """
    Setter method for ldp_fec_vc_fec_type, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_fec_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_fec_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_fec_type() directly.

    YANG Description: type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-fec-type", rest_name="ldp-fec-vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_fec_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-fec-type", rest_name="ldp-fec-vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_fec_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_fec_type(self):
    self.__ldp_fec_vc_fec_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-fec-type", rest_name="ldp-fec-vc-fec-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_prefix_pend_notif(self):
    """
    Getter method for ldp_fec_prefix_pend_notif, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_pend_notif (ldp-fec-pend-notify)

    YANG Description: pend_notif
    """
    return self.__ldp_fec_prefix_pend_notif
      
  def _set_ldp_fec_prefix_pend_notif(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_pend_notif, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_pend_notif (ldp-fec-pend-notify)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_pend_notif is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_pend_notif() directly.

    YANG Description: pend_notif
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 0}, u'Up_Change': {'value': 4}, u'Up': {'value': 1}, u'Change': {'value': 2}, u'Dow': {'value': 3}},), is_leaf=True, yang_name="ldp-fec-prefix-pend-notif", rest_name="ldp-fec-prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-pend-notify', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_pend_notif must be of a type compatible with ldp-fec-pend-notify""",
          'defined-type': "brocade-mpls:ldp-fec-pend-notify",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 0}, u'Up_Change': {'value': 4}, u'Up': {'value': 1}, u'Change': {'value': 2}, u'Dow': {'value': 3}},), is_leaf=True, yang_name="ldp-fec-prefix-pend-notif", rest_name="ldp-fec-prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-pend-notify', is_config=True)""",
        })

    self.__ldp_fec_prefix_pend_notif = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_pend_notif(self):
    self.__ldp_fec_prefix_pend_notif = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 0}, u'Up_Change': {'value': 4}, u'Up': {'value': 1}, u'Change': {'value': 2}, u'Dow': {'value': 3}},), is_leaf=True, yang_name="ldp-fec-prefix-pend-notif", rest_name="ldp-fec-prefix-pend-notif", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-pend-notify', is_config=True)


  def _get_ldp_fec_prefix_state(self):
    """
    Getter method for ldp_fec_prefix_state, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_state (ldp-fec-state)

    YANG Description: State
    """
    return self.__ldp_fec_prefix_state
      
  def _set_ldp_fec_prefix_state(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_state, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_state (ldp-fec-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_state() directly.

    YANG Description: State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'current': {'value': 16384}, u'unknown': {'value': 0}, u'retained': {'value': 49152}, u'down': {'value': 32768}},), is_leaf=True, yang_name="ldp-fec-prefix-state", rest_name="ldp-fec-prefix-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_state must be of a type compatible with ldp-fec-state""",
          'defined-type': "brocade-mpls:ldp-fec-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'current': {'value': 16384}, u'unknown': {'value': 0}, u'retained': {'value': 49152}, u'down': {'value': 32768}},), is_leaf=True, yang_name="ldp-fec-prefix-state", rest_name="ldp-fec-prefix-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-state', is_config=True)""",
        })

    self.__ldp_fec_prefix_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_state(self):
    self.__ldp_fec_prefix_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'current': {'value': 16384}, u'unknown': {'value': 0}, u'retained': {'value': 49152}, u'down': {'value': 32768}},), is_leaf=True, yang_name="ldp-fec-prefix-state", rest_name="ldp-fec-prefix-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='ldp-fec-state', is_config=True)


  def _get_ldp_fec_prefix_Ingress(self):
    """
    Getter method for ldp_fec_prefix_Ingress, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_Ingress (yes-no)

    YANG Description: Ingr
    """
    return self.__ldp_fec_prefix_Ingress
      
  def _set_ldp_fec_prefix_Ingress(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_Ingress, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_Ingress (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_Ingress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_Ingress() directly.

    YANG Description: Ingr
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Ingress", rest_name="ldp-fec-prefix-Ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_Ingress must be of a type compatible with yes-no""",
          'defined-type': "brocade-mpls:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Ingress", rest_name="ldp-fec-prefix-Ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)""",
        })

    self.__ldp_fec_prefix_Ingress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_Ingress(self):
    self.__ldp_fec_prefix_Ingress = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Ingress", rest_name="ldp-fec-prefix-Ingress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)


  def _get_ldp_fec_prefix_Egress(self):
    """
    Getter method for ldp_fec_prefix_Egress, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_Egress (yes-no)

    YANG Description: Egr
    """
    return self.__ldp_fec_prefix_Egress
      
  def _set_ldp_fec_prefix_Egress(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_Egress, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_Egress (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_Egress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_Egress() directly.

    YANG Description: Egr
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Egress", rest_name="ldp-fec-prefix-Egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_Egress must be of a type compatible with yes-no""",
          'defined-type': "brocade-mpls:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Egress", rest_name="ldp-fec-prefix-Egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)""",
        })

    self.__ldp_fec_prefix_Egress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_Egress(self):
    self.__ldp_fec_prefix_Egress = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-Egress", rest_name="ldp-fec-prefix-Egress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)


  def _get_ldp_fec_prefix_um_dist_done(self):
    """
    Getter method for ldp_fec_prefix_um_dist_done, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_um_dist_done (yes-no)

    YANG Description: UM Dist. done
    """
    return self.__ldp_fec_prefix_um_dist_done
      
  def _set_ldp_fec_prefix_um_dist_done(self, v, load=False):
    """
    Setter method for ldp_fec_prefix_um_dist_done, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_prefix_um_dist_done (yes-no)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_prefix_um_dist_done is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_prefix_um_dist_done() directly.

    YANG Description: UM Dist. done
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-um-dist-done", rest_name="ldp-fec-prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_prefix_um_dist_done must be of a type compatible with yes-no""",
          'defined-type': "brocade-mpls:yes-no",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-um-dist-done", rest_name="ldp-fec-prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)""",
        })

    self.__ldp_fec_prefix_um_dist_done = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_prefix_um_dist_done(self):
    self.__ldp_fec_prefix_um_dist_done = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 1}, u'no': {'value': 0}},), is_leaf=True, yang_name="ldp-fec-prefix-um-dist-done", rest_name="ldp-fec-prefix-um-dist-done", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='yes-no', is_config=True)


  def _get_ldp_fec_vc_id(self):
    """
    Getter method for ldp_fec_vc_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_id (uint32)

    YANG Description: VC-ID
    """
    return self.__ldp_fec_vc_id
      
  def _set_ldp_fec_vc_id(self, v, load=False):
    """
    Setter method for ldp_fec_vc_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_id() directly.

    YANG Description: VC-ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-id", rest_name="ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-id", rest_name="ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_id(self):
    self.__ldp_fec_vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-id", rest_name="ldp-fec-vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_type(self):
    """
    Getter method for ldp_fec_vc_type, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_type (uint32)

    YANG Description: vc-Type
    """
    return self.__ldp_fec_vc_type
      
  def _set_ldp_fec_vc_type(self, v, load=False):
    """
    Setter method for ldp_fec_vc_type, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_type() directly.

    YANG Description: vc-Type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-type", rest_name="ldp-fec-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-type", rest_name="ldp-fec-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_type(self):
    self.__ldp_fec_vc_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-type", rest_name="ldp-fec-vc-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_grp_id(self):
    """
    Getter method for ldp_fec_vc_grp_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_grp_id (uint32)

    YANG Description: grp-id
    """
    return self.__ldp_fec_vc_grp_id
      
  def _set_ldp_fec_vc_grp_id(self, v, load=False):
    """
    Setter method for ldp_fec_vc_grp_id, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_grp_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_grp_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_grp_id() directly.

    YANG Description: grp-id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-grp-id", rest_name="ldp-fec-vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_grp_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-grp-id", rest_name="ldp-fec-vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_grp_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_grp_id(self):
    self.__ldp_fec_vc_grp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-grp-id", rest_name="ldp-fec-vc-grp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_local_mtu(self):
    """
    Getter method for ldp_fec_vc_local_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_local_mtu (uint32)

    YANG Description: Local-mtu
    """
    return self.__ldp_fec_vc_local_mtu
      
  def _set_ldp_fec_vc_local_mtu(self, v, load=False):
    """
    Setter method for ldp_fec_vc_local_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_local_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_local_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_local_mtu() directly.

    YANG Description: Local-mtu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-local-mtu", rest_name="ldp-fec-vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_local_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-local-mtu", rest_name="ldp-fec-vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_local_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_local_mtu(self):
    self.__ldp_fec_vc_local_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-local-mtu", rest_name="ldp-fec-vc-local-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_remote_mtu(self):
    """
    Getter method for ldp_fec_vc_remote_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_remote_mtu (uint32)

    YANG Description: remote-mtu
    """
    return self.__ldp_fec_vc_remote_mtu
      
  def _set_ldp_fec_vc_remote_mtu(self, v, load=False):
    """
    Setter method for ldp_fec_vc_remote_mtu, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_remote_mtu (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_remote_mtu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_remote_mtu() directly.

    YANG Description: remote-mtu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-remote-mtu", rest_name="ldp-fec-vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_remote_mtu must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-remote-mtu", rest_name="ldp-fec-vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__ldp_fec_vc_remote_mtu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_remote_mtu(self):
    self.__ldp_fec_vc_remote_mtu = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-fec-vc-remote-mtu", rest_name="ldp-fec-vc-remote-mtu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_ldp_fec_vc_mtu_enforcement(self):
    """
    Getter method for ldp_fec_vc_mtu_enforcement, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_mtu_enforcement (enabled-disabled)

    YANG Description: MTU enforcement
    """
    return self.__ldp_fec_vc_mtu_enforcement
      
  def _set_ldp_fec_vc_mtu_enforcement(self, v, load=False):
    """
    Setter method for ldp_fec_vc_mtu_enforcement, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_mtu_enforcement (enabled-disabled)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_mtu_enforcement is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_mtu_enforcement() directly.

    YANG Description: MTU enforcement
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {'value': 0}, u'enabled': {'value': 1}},), is_leaf=True, yang_name="ldp-fec-vc-mtu-enforcement", rest_name="ldp-fec-vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enabled-disabled', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_mtu_enforcement must be of a type compatible with enabled-disabled""",
          'defined-type': "brocade-mpls:enabled-disabled",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {'value': 0}, u'enabled': {'value': 1}},), is_leaf=True, yang_name="ldp-fec-vc-mtu-enforcement", rest_name="ldp-fec-vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enabled-disabled', is_config=True)""",
        })

    self.__ldp_fec_vc_mtu_enforcement = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_mtu_enforcement(self):
    self.__ldp_fec_vc_mtu_enforcement = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'disabled': {'value': 0}, u'enabled': {'value': 1}},), is_leaf=True, yang_name="ldp-fec-vc-mtu-enforcement", rest_name="ldp-fec-vc-mtu-enforcement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enabled-disabled', is_config=True)


  def _get_ldp_fec_vc_agi(self):
    """
    Getter method for ldp_fec_vc_agi, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_agi (string)

    YANG Description: AGI Value
    """
    return self.__ldp_fec_vc_agi
      
  def _set_ldp_fec_vc_agi(self, v, load=False):
    """
    Setter method for ldp_fec_vc_agi, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_agi (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_agi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_agi() directly.

    YANG Description: AGI Value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ldp-fec-vc-agi", rest_name="ldp-fec-vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_agi must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ldp-fec-vc-agi", rest_name="ldp-fec-vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__ldp_fec_vc_agi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_agi(self):
    self.__ldp_fec_vc_agi = YANGDynClass(base=unicode, is_leaf=True, yang_name="ldp-fec-vc-agi", rest_name="ldp-fec-vc-agi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_ldp_fec_vc_downstream_rec_list(self):
    """
    Getter method for ldp_fec_vc_downstream_rec_list, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_downstream_rec_list (list)
    """
    return self.__ldp_fec_vc_downstream_rec_list
      
  def _set_ldp_fec_vc_downstream_rec_list(self, v, load=False):
    """
    Setter method for ldp_fec_vc_downstream_rec_list, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_downstream_rec_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_downstream_rec_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_downstream_rec_list() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ldp_fec_vc_peer_ldp_id_dw",ldp_fec_vc_downstream_rec_list.ldp_fec_vc_downstream_rec_list, yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-dw', extensions=None), is_container='list', yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_downstream_rec_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ldp_fec_vc_peer_ldp_id_dw",ldp_fec_vc_downstream_rec_list.ldp_fec_vc_downstream_rec_list, yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-dw', extensions=None), is_container='list', yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__ldp_fec_vc_downstream_rec_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_downstream_rec_list(self):
    self.__ldp_fec_vc_downstream_rec_list = YANGDynClass(base=YANGListType("ldp_fec_vc_peer_ldp_id_dw",ldp_fec_vc_downstream_rec_list.ldp_fec_vc_downstream_rec_list, yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-dw', extensions=None), is_container='list', yang_name="ldp-fec-vc-downstream-rec-list", rest_name="ldp-fec-vc-downstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_ldp_fec_vc_upstream_rec_list(self):
    """
    Getter method for ldp_fec_vc_upstream_rec_list, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_upstream_rec_list (list)
    """
    return self.__ldp_fec_vc_upstream_rec_list
      
  def _set_ldp_fec_vc_upstream_rec_list(self, v, load=False):
    """
    Setter method for ldp_fec_vc_upstream_rec_list, mapped from YANG variable /brocade_mpls_rpc/show_mpls_ldp_fec_vc_id/output/ldp_fec_vc_upstream_rec_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_fec_vc_upstream_rec_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_fec_vc_upstream_rec_list() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ldp_fec_vc_peer_ldp_id_up",ldp_fec_vc_upstream_rec_list.ldp_fec_vc_upstream_rec_list, yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-up', extensions=None), is_container='list', yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_fec_vc_upstream_rec_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ldp_fec_vc_peer_ldp_id_up",ldp_fec_vc_upstream_rec_list.ldp_fec_vc_upstream_rec_list, yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-up', extensions=None), is_container='list', yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__ldp_fec_vc_upstream_rec_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_fec_vc_upstream_rec_list(self):
    self.__ldp_fec_vc_upstream_rec_list = YANGDynClass(base=YANGListType("ldp_fec_vc_peer_ldp_id_up",ldp_fec_vc_upstream_rec_list.ldp_fec_vc_upstream_rec_list, yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ldp-fec-vc-peer-ldp-id-up', extensions=None), is_container='list', yang_name="ldp-fec-vc-upstream-rec-list", rest_name="ldp-fec-vc-upstream-rec-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)

  ldp_fec_vc_feccb = __builtin__.property(_get_ldp_fec_vc_feccb, _set_ldp_fec_vc_feccb)
  ldp_fec_vc_idx = __builtin__.property(_get_ldp_fec_vc_idx, _set_ldp_fec_vc_idx)
  ldp_fec_vc_fec_type = __builtin__.property(_get_ldp_fec_vc_fec_type, _set_ldp_fec_vc_fec_type)
  ldp_fec_prefix_pend_notif = __builtin__.property(_get_ldp_fec_prefix_pend_notif, _set_ldp_fec_prefix_pend_notif)
  ldp_fec_prefix_state = __builtin__.property(_get_ldp_fec_prefix_state, _set_ldp_fec_prefix_state)
  ldp_fec_prefix_Ingress = __builtin__.property(_get_ldp_fec_prefix_Ingress, _set_ldp_fec_prefix_Ingress)
  ldp_fec_prefix_Egress = __builtin__.property(_get_ldp_fec_prefix_Egress, _set_ldp_fec_prefix_Egress)
  ldp_fec_prefix_um_dist_done = __builtin__.property(_get_ldp_fec_prefix_um_dist_done, _set_ldp_fec_prefix_um_dist_done)
  ldp_fec_vc_id = __builtin__.property(_get_ldp_fec_vc_id, _set_ldp_fec_vc_id)
  ldp_fec_vc_type = __builtin__.property(_get_ldp_fec_vc_type, _set_ldp_fec_vc_type)
  ldp_fec_vc_grp_id = __builtin__.property(_get_ldp_fec_vc_grp_id, _set_ldp_fec_vc_grp_id)
  ldp_fec_vc_local_mtu = __builtin__.property(_get_ldp_fec_vc_local_mtu, _set_ldp_fec_vc_local_mtu)
  ldp_fec_vc_remote_mtu = __builtin__.property(_get_ldp_fec_vc_remote_mtu, _set_ldp_fec_vc_remote_mtu)
  ldp_fec_vc_mtu_enforcement = __builtin__.property(_get_ldp_fec_vc_mtu_enforcement, _set_ldp_fec_vc_mtu_enforcement)
  ldp_fec_vc_agi = __builtin__.property(_get_ldp_fec_vc_agi, _set_ldp_fec_vc_agi)
  ldp_fec_vc_downstream_rec_list = __builtin__.property(_get_ldp_fec_vc_downstream_rec_list, _set_ldp_fec_vc_downstream_rec_list)
  ldp_fec_vc_upstream_rec_list = __builtin__.property(_get_ldp_fec_vc_upstream_rec_list, _set_ldp_fec_vc_upstream_rec_list)


  _pyangbind_elements = {'ldp_fec_vc_feccb': ldp_fec_vc_feccb, 'ldp_fec_vc_idx': ldp_fec_vc_idx, 'ldp_fec_vc_fec_type': ldp_fec_vc_fec_type, 'ldp_fec_prefix_pend_notif': ldp_fec_prefix_pend_notif, 'ldp_fec_prefix_state': ldp_fec_prefix_state, 'ldp_fec_prefix_Ingress': ldp_fec_prefix_Ingress, 'ldp_fec_prefix_Egress': ldp_fec_prefix_Egress, 'ldp_fec_prefix_um_dist_done': ldp_fec_prefix_um_dist_done, 'ldp_fec_vc_id': ldp_fec_vc_id, 'ldp_fec_vc_type': ldp_fec_vc_type, 'ldp_fec_vc_grp_id': ldp_fec_vc_grp_id, 'ldp_fec_vc_local_mtu': ldp_fec_vc_local_mtu, 'ldp_fec_vc_remote_mtu': ldp_fec_vc_remote_mtu, 'ldp_fec_vc_mtu_enforcement': ldp_fec_vc_mtu_enforcement, 'ldp_fec_vc_agi': ldp_fec_vc_agi, 'ldp_fec_vc_downstream_rec_list': ldp_fec_vc_downstream_rec_list, 'ldp_fec_vc_upstream_rec_list': ldp_fec_vc_upstream_rec_list, }


