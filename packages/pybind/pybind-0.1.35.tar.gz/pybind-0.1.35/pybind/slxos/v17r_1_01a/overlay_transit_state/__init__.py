
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class overlay_transit_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-ssm-operational - based on the path /overlay-transit-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  Vxlan Transit information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__overlay_transit_name','__binded_overlay_acl',)

  _yang_name = 'overlay-transit-state'
  _rest_name = 'overlay-transit-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__binded_overlay_acl = YANGDynClass(base=unicode, is_leaf=True, yang_name="binded-overlay-acl", rest_name="binded-overlay-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)
    self.__overlay_transit_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="overlay-transit-name", rest_name="overlay-transit-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'overlay-transit-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'overlay-transit-state']

  def _get_overlay_transit_name(self):
    """
    Getter method for overlay_transit_name, mapped from YANG variable /overlay_transit_state/overlay_transit_name (string)

    YANG Description: overlay_transit_name
    """
    return self.__overlay_transit_name
      
  def _set_overlay_transit_name(self, v, load=False):
    """
    Setter method for overlay_transit_name, mapped from YANG variable /overlay_transit_state/overlay_transit_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overlay_transit_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overlay_transit_name() directly.

    YANG Description: overlay_transit_name
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="overlay-transit-name", rest_name="overlay-transit-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overlay_transit_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="overlay-transit-name", rest_name="overlay-transit-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)""",
        })

    self.__overlay_transit_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overlay_transit_name(self):
    self.__overlay_transit_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="overlay-transit-name", rest_name="overlay-transit-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)


  def _get_binded_overlay_acl(self):
    """
    Getter method for binded_overlay_acl, mapped from YANG variable /overlay_transit_state/binded_overlay_acl (string)

    YANG Description: binded_overlay_acl
    """
    return self.__binded_overlay_acl
      
  def _set_binded_overlay_acl(self, v, load=False):
    """
    Setter method for binded_overlay_acl, mapped from YANG variable /overlay_transit_state/binded_overlay_acl (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_binded_overlay_acl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_binded_overlay_acl() directly.

    YANG Description: binded_overlay_acl
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="binded-overlay-acl", rest_name="binded-overlay-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """binded_overlay_acl must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="binded-overlay-acl", rest_name="binded-overlay-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)""",
        })

    self.__binded_overlay_acl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_binded_overlay_acl(self):
    self.__binded_overlay_acl = YANGDynClass(base=unicode, is_leaf=True, yang_name="binded-overlay-acl", rest_name="binded-overlay-acl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-ssm-operational', defining_module='brocade-ssm-operational', yang_type='string', is_config=False)

  overlay_transit_name = __builtin__.property(_get_overlay_transit_name)
  binded_overlay_acl = __builtin__.property(_get_binded_overlay_acl)


  _pyangbind_elements = {'overlay_transit_name': overlay_transit_name, 'binded_overlay_acl': binded_overlay_acl, }


