
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class global_isis_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state/global-isis-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS Global
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__isis_protocol','__isis_state','__is_type','__system_id','__area_addresses','__database_state_level_1','__database_state_level_2','__database_state_level_1_2','__overload_reason','__check_alarm','__overload_state_since','__overload_state_rem_time','__admin_distance','__v6_admin_distance','__max_paths','__v6_max_paths','__default_redis_metric','__v6_default_redis_metric','__default_link_metric_l1_conf','__default_link_metric_l1_adv','__default_link_metric_l2_conf','__default_link_metric_l2_adv','__v6_default_link_metric_l1_conf','__v6_default_link_metric_l1_adv','__v6_default_link_metric_l2_conf','__v6_default_link_metric_l2_adv','__redis_protocol','__no_routes_redis','__v6_redis_protocol','__v6_no_routes_redis','__auth_mode_l1','__auth_mode_l2','__auth_key_l1','__auth_key_l2','__l1_auth_no_check','__l2_auth_no_check','__metric_style_l1','__metric_style_l2','__graceful_restart_helper','__pspf_optimization','__spf_max_wait_l1','__spf_max_wait_l2','__spf_init_wait_l1','__spf_init_wait_l2','__spf_second_wait_l1','__spf_second_wait_l2','__spf_scheduled_l1','__spf_scheduled_l2','__pspf_max_wait','__pspf_init_wait','__pspf_second_wait','__pspf_scheduled','__spf6_max_wait_l1','__spf6_max_wait_l2','__spf6_init_wait_l1','__spf6_init_wait_l2','__spf6_second_wait_l1','__spf6_second_wait_l2','__spf6_scheduled_l1','__spf6_scheduled_l2','__pspf6_max_wait','__pspf6_init_wait','__pspf6_second_wait','__pspf6_scheduled','__lsp_max_lifetime','__lsp_refresh_interval','__lsp_gen_interval','__lsp_retrans_interval','__lsp_interval','__snp_csnp_interval','__snp_psnp_interval','__hello_padding','__hello_padding_ptp','__ptp_handshake','__bgp_ipv4_converged','__bgp_ipv6_converged','__isis_te','__isis_shortcuts','__isis_reverse_metric','__isis_reverse_metric_wbit','__isis_reverse_metric_sbit','__bfd_enabled','__bfd_hold_interval','__nsr_enabled','__nsr_state','__nsr_sync_state','__isis_is_mp','__ldp_sync','__ldp_sync_holddown_time',)

  _yang_name = 'global-isis-info'
  _rest_name = 'global-isis-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__auth_mode_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-mode-l2", rest_name="auth-mode-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__auth_mode_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-mode-l1", rest_name="auth-mode-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__max_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-paths", rest_name="max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__isis_reverse_metric_wbit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-wbit", rest_name="isis-reverse-metric-wbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pspf6_scheduled = YANGDynClass(base=unicode, is_leaf=True, yang_name="pspf6-scheduled", rest_name="pspf6-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__spf6_second_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l1", rest_name="spf6-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf6_second_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l2", rest_name="spf6-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__bfd_hold_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-hold-interval", rest_name="bfd-hold-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__v6_redis_protocol = YANGDynClass(base=unicode, is_leaf=True, yang_name="v6-redis-protocol", rest_name="v6-redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__isis_is_mp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-is-mp", rest_name="isis-is-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__no_routes_redis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-routes-redis", rest_name="no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__graceful_restart_helper = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__nsr_sync_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsr-sync-state", rest_name="nsr-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__spf_second_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l2", rest_name="spf-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf6_max_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l1", rest_name="spf6-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf6_max_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l2", rest_name="spf6-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf6_init_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l1", rest_name="spf6-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf6_init_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l2", rest_name="spf6-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__hello_padding_ptp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__default_link_metric_l2_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-conf", rest_name="default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__isis_te = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-te", rest_name="isis-te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__snp_psnp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-psnp-interval", rest_name="snp-psnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_retrans_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-retrans-interval", rest_name="lsp-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__v6_no_routes_redis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-no-routes-redis", rest_name="v6-no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__default_redis_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-redis-metric", rest_name="default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__isis_reverse_metric_sbit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-sbit", rest_name="isis-reverse-metric-sbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pspf6_init_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-init-wait", rest_name="pspf6-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__metric_style_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric-style-l2", rest_name="metric-style-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__metric_style_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric-style-l1", rest_name="metric-style-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__isis_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-state", rest_name="isis-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__database_state_level_2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-2", rest_name="database-state-level-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__pspf_init_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-init-wait", rest_name="pspf-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1_auth_no_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l1-auth-no-check", rest_name="l1-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__nsr_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__v6_default_link_metric_l1_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-adv", rest_name="v6-default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_refresh_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__nsr_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsr-enabled", rest_name="nsr-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__pspf_optimization = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pspf-optimization", rest_name="pspf-optimization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__hello_padding = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__snp_csnp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-csnp-interval", rest_name="snp-csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__check_alarm = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="check-alarm", rest_name="check-alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__is_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__isis_shortcuts = YANGDynClass(base=unicode, is_leaf=True, yang_name="isis-shortcuts", rest_name="isis-shortcuts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__v6_default_link_metric_l2_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-adv", rest_name="v6-default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__overload_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-reason", rest_name="overload-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__v6_max_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-max-paths", rest_name="v6-max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__redis_protocol = YANGDynClass(base=unicode, is_leaf=True, yang_name="redis-protocol", rest_name="redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__lsp_max_lifetime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-max-lifetime", rest_name="lsp-max-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__default_link_metric_l1_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-conf", rest_name="default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf_second_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l1", rest_name="spf-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__admin_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-distance", rest_name="admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__ptp_handshake = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ptp-handshake", rest_name="ptp-handshake", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__database_state_level_1_2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-1-2", rest_name="database-state-level-1-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__isis_reverse_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric", rest_name="isis-reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__v6_default_link_metric_l2_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-conf", rest_name="v6-default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_gen_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf_init_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l1", rest_name="spf-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf_init_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l2", rest_name="spf-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pspf_max_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-max-wait", rest_name="pspf-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__bgp_ipv4_converged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bgp-ipv4-converged", rest_name="bgp-ipv4-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__overload_state_since = YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-state-since", rest_name="overload-state-since", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__default_link_metric_l2_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-adv", rest_name="default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__area_addresses = YANGDynClass(base=unicode, is_leaf=True, yang_name="area-addresses", rest_name="area-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__ldp_sync = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__spf_max_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l2", rest_name="spf-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__spf_max_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l1", rest_name="spf-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__isis_protocol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-protocol", rest_name="isis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__pspf6_max_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-max-wait", rest_name="pspf6-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pspf6_second_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-second-wait", rest_name="pspf6-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__bgp_ipv6_converged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bgp-ipv6-converged", rest_name="bgp-ipv6-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__spf6_scheduled_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf6-scheduled-l1", rest_name="spf6-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__spf6_scheduled_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf6-scheduled-l2", rest_name="spf6-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__spf_scheduled_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf-scheduled-l1", rest_name="spf-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__spf_scheduled_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf-scheduled-l2", rest_name="spf-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__system_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="system-id", rest_name="system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__v6_admin_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-admin-distance", rest_name="v6-admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__default_link_metric_l1_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-adv", rest_name="default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__pspf_scheduled = YANGDynClass(base=unicode, is_leaf=True, yang_name="pspf-scheduled", rest_name="pspf-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__auth_key_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key-l2", rest_name="auth-key-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__database_state_level_1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-1", rest_name="database-state-level-1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__auth_key_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key-l1", rest_name="auth-key-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__v6_default_link_metric_l1_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-conf", rest_name="v6-default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__ldp_sync_holddown_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-sync-holddown-time", rest_name="ldp-sync-holddown-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2_auth_no_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l2-auth-no-check", rest_name="l2-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    self.__overload_state_rem_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-state-rem-time", rest_name="overload-state-rem-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__bfd_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    self.__pspf_second_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-second-wait", rest_name="pspf-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__v6_default_redis_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-redis-metric", rest_name="v6-default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state', u'global-isis-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state', u'global-isis-info']

  def _get_isis_protocol(self):
    """
    Getter method for isis_protocol, mapped from YANG variable /isis_state/global_isis_info/isis_protocol (boolean)

    YANG Description: IS-IS Routing Protocol Configuration State
    """
    return self.__isis_protocol
      
  def _set_isis_protocol(self, v, load=False):
    """
    Setter method for isis_protocol, mapped from YANG variable /isis_state/global_isis_info/isis_protocol (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_protocol() directly.

    YANG Description: IS-IS Routing Protocol Configuration State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="isis-protocol", rest_name="isis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_protocol must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-protocol", rest_name="isis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__isis_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_protocol(self):
    self.__isis_protocol = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-protocol", rest_name="isis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_isis_state(self):
    """
    Getter method for isis_state, mapped from YANG variable /isis_state/global_isis_info/isis_state (boolean)

    YANG Description: IS-IS Routing Protocol Operation State
    """
    return self.__isis_state
      
  def _set_isis_state(self, v, load=False):
    """
    Setter method for isis_state, mapped from YANG variable /isis_state/global_isis_info/isis_state (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_state() directly.

    YANG Description: IS-IS Routing Protocol Operation State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="isis-state", rest_name="isis-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_state must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-state", rest_name="isis-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__isis_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_state(self):
    self.__isis_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-state", rest_name="isis-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_is_type(self):
    """
    Getter method for is_type, mapped from YANG variable /isis_state/global_isis_info/is_type (uint32)

    YANG Description: IS-Type
    """
    return self.__is_type
      
  def _set_is_type(self, v, load=False):
    """
    Setter method for is_type, mapped from YANG variable /isis_state/global_isis_info/is_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_type() directly.

    YANG Description: IS-Type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__is_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_type(self):
    self.__is_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_system_id(self):
    """
    Getter method for system_id, mapped from YANG variable /isis_state/global_isis_info/system_id (string)

    YANG Description: System ID
    """
    return self.__system_id
      
  def _set_system_id(self, v, load=False):
    """
    Setter method for system_id, mapped from YANG variable /isis_state/global_isis_info/system_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_id() directly.

    YANG Description: System ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="system-id", rest_name="system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="system-id", rest_name="system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__system_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_id(self):
    self.__system_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="system-id", rest_name="system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_area_addresses(self):
    """
    Getter method for area_addresses, mapped from YANG variable /isis_state/global_isis_info/area_addresses (string)

    YANG Description: ISIS Area addresses
    """
    return self.__area_addresses
      
  def _set_area_addresses(self, v, load=False):
    """
    Setter method for area_addresses, mapped from YANG variable /isis_state/global_isis_info/area_addresses (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_area_addresses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_area_addresses() directly.

    YANG Description: ISIS Area addresses
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="area-addresses", rest_name="area-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """area_addresses must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="area-addresses", rest_name="area-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__area_addresses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_area_addresses(self):
    self.__area_addresses = YANGDynClass(base=unicode, is_leaf=True, yang_name="area-addresses", rest_name="area-addresses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_database_state_level_1(self):
    """
    Getter method for database_state_level_1, mapped from YANG variable /isis_state/global_isis_info/database_state_level_1 (string)

    YANG Description: Database State for Level-1
    """
    return self.__database_state_level_1
      
  def _set_database_state_level_1(self, v, load=False):
    """
    Setter method for database_state_level_1, mapped from YANG variable /isis_state/global_isis_info/database_state_level_1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_database_state_level_1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_database_state_level_1() directly.

    YANG Description: Database State for Level-1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="database-state-level-1", rest_name="database-state-level-1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """database_state_level_1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-1", rest_name="database-state-level-1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__database_state_level_1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_database_state_level_1(self):
    self.__database_state_level_1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-1", rest_name="database-state-level-1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_database_state_level_2(self):
    """
    Getter method for database_state_level_2, mapped from YANG variable /isis_state/global_isis_info/database_state_level_2 (string)

    YANG Description: Database State for Level-1
    """
    return self.__database_state_level_2
      
  def _set_database_state_level_2(self, v, load=False):
    """
    Setter method for database_state_level_2, mapped from YANG variable /isis_state/global_isis_info/database_state_level_2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_database_state_level_2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_database_state_level_2() directly.

    YANG Description: Database State for Level-1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="database-state-level-2", rest_name="database-state-level-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """database_state_level_2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-2", rest_name="database-state-level-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__database_state_level_2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_database_state_level_2(self):
    self.__database_state_level_2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-2", rest_name="database-state-level-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_database_state_level_1_2(self):
    """
    Getter method for database_state_level_1_2, mapped from YANG variable /isis_state/global_isis_info/database_state_level_1_2 (string)

    YANG Description: Database State for Level-1_2
    """
    return self.__database_state_level_1_2
      
  def _set_database_state_level_1_2(self, v, load=False):
    """
    Setter method for database_state_level_1_2, mapped from YANG variable /isis_state/global_isis_info/database_state_level_1_2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_database_state_level_1_2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_database_state_level_1_2() directly.

    YANG Description: Database State for Level-1_2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="database-state-level-1-2", rest_name="database-state-level-1-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """database_state_level_1_2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-1-2", rest_name="database-state-level-1-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__database_state_level_1_2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_database_state_level_1_2(self):
    self.__database_state_level_1_2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="database-state-level-1-2", rest_name="database-state-level-1-2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_overload_reason(self):
    """
    Getter method for overload_reason, mapped from YANG variable /isis_state/global_isis_info/overload_reason (string)

    YANG Description: ISIS Overload Reason
    """
    return self.__overload_reason
      
  def _set_overload_reason(self, v, load=False):
    """
    Setter method for overload_reason, mapped from YANG variable /isis_state/global_isis_info/overload_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_reason() directly.

    YANG Description: ISIS Overload Reason
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="overload-reason", rest_name="overload-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-reason", rest_name="overload-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__overload_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_reason(self):
    self.__overload_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-reason", rest_name="overload-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_check_alarm(self):
    """
    Getter method for check_alarm, mapped from YANG variable /isis_state/global_isis_info/check_alarm (boolean)

    YANG Description: Database State
    """
    return self.__check_alarm
      
  def _set_check_alarm(self, v, load=False):
    """
    Setter method for check_alarm, mapped from YANG variable /isis_state/global_isis_info/check_alarm (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_check_alarm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_check_alarm() directly.

    YANG Description: Database State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="check-alarm", rest_name="check-alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """check_alarm must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="check-alarm", rest_name="check-alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__check_alarm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_check_alarm(self):
    self.__check_alarm = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="check-alarm", rest_name="check-alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_overload_state_since(self):
    """
    Getter method for overload_state_since, mapped from YANG variable /isis_state/global_isis_info/overload_state_since (string)

    YANG Description: Overload state since
    """
    return self.__overload_state_since
      
  def _set_overload_state_since(self, v, load=False):
    """
    Setter method for overload_state_since, mapped from YANG variable /isis_state/global_isis_info/overload_state_since (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_state_since is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_state_since() directly.

    YANG Description: Overload state since
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="overload-state-since", rest_name="overload-state-since", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_state_since must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-state-since", rest_name="overload-state-since", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__overload_state_since = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_state_since(self):
    self.__overload_state_since = YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-state-since", rest_name="overload-state-since", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_overload_state_rem_time(self):
    """
    Getter method for overload_state_rem_time, mapped from YANG variable /isis_state/global_isis_info/overload_state_rem_time (string)

    YANG Description: Overload state remaining time
    """
    return self.__overload_state_rem_time
      
  def _set_overload_state_rem_time(self, v, load=False):
    """
    Setter method for overload_state_rem_time, mapped from YANG variable /isis_state/global_isis_info/overload_state_rem_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_overload_state_rem_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_overload_state_rem_time() directly.

    YANG Description: Overload state remaining time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="overload-state-rem-time", rest_name="overload-state-rem-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """overload_state_rem_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-state-rem-time", rest_name="overload-state-rem-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__overload_state_rem_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_overload_state_rem_time(self):
    self.__overload_state_rem_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="overload-state-rem-time", rest_name="overload-state-rem-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_admin_distance(self):
    """
    Getter method for admin_distance, mapped from YANG variable /isis_state/global_isis_info/admin_distance (uint32)

    YANG Description: Admin Distance
    """
    return self.__admin_distance
      
  def _set_admin_distance(self, v, load=False):
    """
    Setter method for admin_distance, mapped from YANG variable /isis_state/global_isis_info/admin_distance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_distance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_distance() directly.

    YANG Description: Admin Distance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-distance", rest_name="admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_distance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-distance", rest_name="admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__admin_distance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_distance(self):
    self.__admin_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="admin-distance", rest_name="admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_admin_distance(self):
    """
    Getter method for v6_admin_distance, mapped from YANG variable /isis_state/global_isis_info/v6_admin_distance (uint32)

    YANG Description: Ipv6 Admin Distance
    """
    return self.__v6_admin_distance
      
  def _set_v6_admin_distance(self, v, load=False):
    """
    Setter method for v6_admin_distance, mapped from YANG variable /isis_state/global_isis_info/v6_admin_distance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_admin_distance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_admin_distance() directly.

    YANG Description: Ipv6 Admin Distance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-admin-distance", rest_name="v6-admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_admin_distance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-admin-distance", rest_name="v6-admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_admin_distance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_admin_distance(self):
    self.__v6_admin_distance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-admin-distance", rest_name="v6-admin-distance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_max_paths(self):
    """
    Getter method for max_paths, mapped from YANG variable /isis_state/global_isis_info/max_paths (uint32)

    YANG Description: Maximum ipv4 Paths
    """
    return self.__max_paths
      
  def _set_max_paths(self, v, load=False):
    """
    Setter method for max_paths, mapped from YANG variable /isis_state/global_isis_info/max_paths (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_paths is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_paths() directly.

    YANG Description: Maximum ipv4 Paths
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-paths", rest_name="max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_paths must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-paths", rest_name="max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__max_paths = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_paths(self):
    self.__max_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="max-paths", rest_name="max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_max_paths(self):
    """
    Getter method for v6_max_paths, mapped from YANG variable /isis_state/global_isis_info/v6_max_paths (uint32)

    YANG Description: Maximum ipv6 Paths
    """
    return self.__v6_max_paths
      
  def _set_v6_max_paths(self, v, load=False):
    """
    Setter method for v6_max_paths, mapped from YANG variable /isis_state/global_isis_info/v6_max_paths (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_max_paths is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_max_paths() directly.

    YANG Description: Maximum ipv6 Paths
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-max-paths", rest_name="v6-max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_max_paths must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-max-paths", rest_name="v6-max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_max_paths = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_max_paths(self):
    self.__v6_max_paths = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-max-paths", rest_name="v6-max-paths", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_default_redis_metric(self):
    """
    Getter method for default_redis_metric, mapped from YANG variable /isis_state/global_isis_info/default_redis_metric (uint32)

    YANG Description: Admin Distance
    """
    return self.__default_redis_metric
      
  def _set_default_redis_metric(self, v, load=False):
    """
    Setter method for default_redis_metric, mapped from YANG variable /isis_state/global_isis_info/default_redis_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_redis_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_redis_metric() directly.

    YANG Description: Admin Distance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-redis-metric", rest_name="default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_redis_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-redis-metric", rest_name="default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__default_redis_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_redis_metric(self):
    self.__default_redis_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-redis-metric", rest_name="default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_default_redis_metric(self):
    """
    Getter method for v6_default_redis_metric, mapped from YANG variable /isis_state/global_isis_info/v6_default_redis_metric (uint32)

    YANG Description: Admin ipv6 Distance
    """
    return self.__v6_default_redis_metric
      
  def _set_v6_default_redis_metric(self, v, load=False):
    """
    Setter method for v6_default_redis_metric, mapped from YANG variable /isis_state/global_isis_info/v6_default_redis_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_default_redis_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_default_redis_metric() directly.

    YANG Description: Admin ipv6 Distance
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-redis-metric", rest_name="v6-default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_default_redis_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-redis-metric", rest_name="v6-default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_default_redis_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_default_redis_metric(self):
    self.__v6_default_redis_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-redis-metric", rest_name="v6-default-redis-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_default_link_metric_l1_conf(self):
    """
    Getter method for default_link_metric_l1_conf, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l1_conf (uint32)

    YANG Description: Default Link Metric L1
    """
    return self.__default_link_metric_l1_conf
      
  def _set_default_link_metric_l1_conf(self, v, load=False):
    """
    Setter method for default_link_metric_l1_conf, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l1_conf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_link_metric_l1_conf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_link_metric_l1_conf() directly.

    YANG Description: Default Link Metric L1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-conf", rest_name="default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_link_metric_l1_conf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-conf", rest_name="default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__default_link_metric_l1_conf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_link_metric_l1_conf(self):
    self.__default_link_metric_l1_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-conf", rest_name="default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_default_link_metric_l1_adv(self):
    """
    Getter method for default_link_metric_l1_adv, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l1_adv (uint32)

    YANG Description: Default Link Metric L1
    """
    return self.__default_link_metric_l1_adv
      
  def _set_default_link_metric_l1_adv(self, v, load=False):
    """
    Setter method for default_link_metric_l1_adv, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l1_adv (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_link_metric_l1_adv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_link_metric_l1_adv() directly.

    YANG Description: Default Link Metric L1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-adv", rest_name="default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_link_metric_l1_adv must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-adv", rest_name="default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__default_link_metric_l1_adv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_link_metric_l1_adv(self):
    self.__default_link_metric_l1_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l1-adv", rest_name="default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_default_link_metric_l2_conf(self):
    """
    Getter method for default_link_metric_l2_conf, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l2_conf (uint32)

    YANG Description: Default Link Metric L2
    """
    return self.__default_link_metric_l2_conf
      
  def _set_default_link_metric_l2_conf(self, v, load=False):
    """
    Setter method for default_link_metric_l2_conf, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l2_conf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_link_metric_l2_conf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_link_metric_l2_conf() directly.

    YANG Description: Default Link Metric L2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-conf", rest_name="default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_link_metric_l2_conf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-conf", rest_name="default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__default_link_metric_l2_conf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_link_metric_l2_conf(self):
    self.__default_link_metric_l2_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-conf", rest_name="default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_default_link_metric_l2_adv(self):
    """
    Getter method for default_link_metric_l2_adv, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l2_adv (uint32)

    YANG Description: Default Link Metric L2
    """
    return self.__default_link_metric_l2_adv
      
  def _set_default_link_metric_l2_adv(self, v, load=False):
    """
    Setter method for default_link_metric_l2_adv, mapped from YANG variable /isis_state/global_isis_info/default_link_metric_l2_adv (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_default_link_metric_l2_adv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_default_link_metric_l2_adv() directly.

    YANG Description: Default Link Metric L2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-adv", rest_name="default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """default_link_metric_l2_adv must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-adv", rest_name="default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__default_link_metric_l2_adv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_default_link_metric_l2_adv(self):
    self.__default_link_metric_l2_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="default-link-metric-l2-adv", rest_name="default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_default_link_metric_l1_conf(self):
    """
    Getter method for v6_default_link_metric_l1_conf, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l1_conf (uint32)

    YANG Description: Default ipv6 Link Metric L1
    """
    return self.__v6_default_link_metric_l1_conf
      
  def _set_v6_default_link_metric_l1_conf(self, v, load=False):
    """
    Setter method for v6_default_link_metric_l1_conf, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l1_conf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_default_link_metric_l1_conf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_default_link_metric_l1_conf() directly.

    YANG Description: Default ipv6 Link Metric L1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-conf", rest_name="v6-default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_default_link_metric_l1_conf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-conf", rest_name="v6-default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_default_link_metric_l1_conf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_default_link_metric_l1_conf(self):
    self.__v6_default_link_metric_l1_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-conf", rest_name="v6-default-link-metric-l1-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_default_link_metric_l1_adv(self):
    """
    Getter method for v6_default_link_metric_l1_adv, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l1_adv (uint32)

    YANG Description: Default ipv6 Link Metric L1
    """
    return self.__v6_default_link_metric_l1_adv
      
  def _set_v6_default_link_metric_l1_adv(self, v, load=False):
    """
    Setter method for v6_default_link_metric_l1_adv, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l1_adv (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_default_link_metric_l1_adv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_default_link_metric_l1_adv() directly.

    YANG Description: Default ipv6 Link Metric L1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-adv", rest_name="v6-default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_default_link_metric_l1_adv must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-adv", rest_name="v6-default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_default_link_metric_l1_adv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_default_link_metric_l1_adv(self):
    self.__v6_default_link_metric_l1_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l1-adv", rest_name="v6-default-link-metric-l1-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_default_link_metric_l2_conf(self):
    """
    Getter method for v6_default_link_metric_l2_conf, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l2_conf (uint32)

    YANG Description: Default ipv6 Link Metric L2
    """
    return self.__v6_default_link_metric_l2_conf
      
  def _set_v6_default_link_metric_l2_conf(self, v, load=False):
    """
    Setter method for v6_default_link_metric_l2_conf, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l2_conf (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_default_link_metric_l2_conf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_default_link_metric_l2_conf() directly.

    YANG Description: Default ipv6 Link Metric L2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-conf", rest_name="v6-default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_default_link_metric_l2_conf must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-conf", rest_name="v6-default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_default_link_metric_l2_conf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_default_link_metric_l2_conf(self):
    self.__v6_default_link_metric_l2_conf = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-conf", rest_name="v6-default-link-metric-l2-conf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_default_link_metric_l2_adv(self):
    """
    Getter method for v6_default_link_metric_l2_adv, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l2_adv (uint32)

    YANG Description: Default ipv6 Link Metric L2
    """
    return self.__v6_default_link_metric_l2_adv
      
  def _set_v6_default_link_metric_l2_adv(self, v, load=False):
    """
    Setter method for v6_default_link_metric_l2_adv, mapped from YANG variable /isis_state/global_isis_info/v6_default_link_metric_l2_adv (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_default_link_metric_l2_adv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_default_link_metric_l2_adv() directly.

    YANG Description: Default ipv6 Link Metric L2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-adv", rest_name="v6-default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_default_link_metric_l2_adv must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-adv", rest_name="v6-default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_default_link_metric_l2_adv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_default_link_metric_l2_adv(self):
    self.__v6_default_link_metric_l2_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-default-link-metric-l2-adv", rest_name="v6-default-link-metric-l2-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_redis_protocol(self):
    """
    Getter method for redis_protocol, mapped from YANG variable /isis_state/global_isis_info/redis_protocol (string)

    YANG Description: Redistributed Protocols
    """
    return self.__redis_protocol
      
  def _set_redis_protocol(self, v, load=False):
    """
    Setter method for redis_protocol, mapped from YANG variable /isis_state/global_isis_info/redis_protocol (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_redis_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_redis_protocol() directly.

    YANG Description: Redistributed Protocols
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="redis-protocol", rest_name="redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """redis_protocol must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="redis-protocol", rest_name="redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__redis_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_redis_protocol(self):
    self.__redis_protocol = YANGDynClass(base=unicode, is_leaf=True, yang_name="redis-protocol", rest_name="redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_no_routes_redis(self):
    """
    Getter method for no_routes_redis, mapped from YANG variable /isis_state/global_isis_info/no_routes_redis (uint32)

    YANG Description: Number of redistributed routes
    """
    return self.__no_routes_redis
      
  def _set_no_routes_redis(self, v, load=False):
    """
    Setter method for no_routes_redis, mapped from YANG variable /isis_state/global_isis_info/no_routes_redis (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_no_routes_redis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_no_routes_redis() directly.

    YANG Description: Number of redistributed routes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-routes-redis", rest_name="no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """no_routes_redis must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-routes-redis", rest_name="no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__no_routes_redis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_no_routes_redis(self):
    self.__no_routes_redis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="no-routes-redis", rest_name="no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_v6_redis_protocol(self):
    """
    Getter method for v6_redis_protocol, mapped from YANG variable /isis_state/global_isis_info/v6_redis_protocol (string)

    YANG Description: Ipv6 Redistributed Protocols
    """
    return self.__v6_redis_protocol
      
  def _set_v6_redis_protocol(self, v, load=False):
    """
    Setter method for v6_redis_protocol, mapped from YANG variable /isis_state/global_isis_info/v6_redis_protocol (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_redis_protocol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_redis_protocol() directly.

    YANG Description: Ipv6 Redistributed Protocols
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="v6-redis-protocol", rest_name="v6-redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_redis_protocol must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="v6-redis-protocol", rest_name="v6-redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__v6_redis_protocol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_redis_protocol(self):
    self.__v6_redis_protocol = YANGDynClass(base=unicode, is_leaf=True, yang_name="v6-redis-protocol", rest_name="v6-redis-protocol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_v6_no_routes_redis(self):
    """
    Getter method for v6_no_routes_redis, mapped from YANG variable /isis_state/global_isis_info/v6_no_routes_redis (uint32)

    YANG Description: Number of ipv6 redistributed routes
    """
    return self.__v6_no_routes_redis
      
  def _set_v6_no_routes_redis(self, v, load=False):
    """
    Setter method for v6_no_routes_redis, mapped from YANG variable /isis_state/global_isis_info/v6_no_routes_redis (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_v6_no_routes_redis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_v6_no_routes_redis() directly.

    YANG Description: Number of ipv6 redistributed routes
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-no-routes-redis", rest_name="v6-no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """v6_no_routes_redis must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-no-routes-redis", rest_name="v6-no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__v6_no_routes_redis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_v6_no_routes_redis(self):
    self.__v6_no_routes_redis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="v6-no-routes-redis", rest_name="v6-no-routes-redis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_auth_mode_l1(self):
    """
    Getter method for auth_mode_l1, mapped from YANG variable /isis_state/global_isis_info/auth_mode_l1 (string)

    YANG Description: AuthMode for Level1
    """
    return self.__auth_mode_l1
      
  def _set_auth_mode_l1(self, v, load=False):
    """
    Setter method for auth_mode_l1, mapped from YANG variable /isis_state/global_isis_info/auth_mode_l1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode_l1() directly.

    YANG Description: AuthMode for Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-mode-l1", rest_name="auth-mode-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode_l1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-mode-l1", rest_name="auth-mode-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__auth_mode_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode_l1(self):
    self.__auth_mode_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-mode-l1", rest_name="auth-mode-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_auth_mode_l2(self):
    """
    Getter method for auth_mode_l2, mapped from YANG variable /isis_state/global_isis_info/auth_mode_l2 (string)

    YANG Description: AuthMode for Level2
    """
    return self.__auth_mode_l2
      
  def _set_auth_mode_l2(self, v, load=False):
    """
    Setter method for auth_mode_l2, mapped from YANG variable /isis_state/global_isis_info/auth_mode_l2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode_l2() directly.

    YANG Description: AuthMode for Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-mode-l2", rest_name="auth-mode-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode_l2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-mode-l2", rest_name="auth-mode-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__auth_mode_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode_l2(self):
    self.__auth_mode_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-mode-l2", rest_name="auth-mode-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_auth_key_l1(self):
    """
    Getter method for auth_key_l1, mapped from YANG variable /isis_state/global_isis_info/auth_key_l1 (string)

    YANG Description: Authkey for Level1
    """
    return self.__auth_key_l1
      
  def _set_auth_key_l1(self, v, load=False):
    """
    Setter method for auth_key_l1, mapped from YANG variable /isis_state/global_isis_info/auth_key_l1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_key_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_key_l1() directly.

    YANG Description: Authkey for Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-key-l1", rest_name="auth-key-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_key_l1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key-l1", rest_name="auth-key-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__auth_key_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_key_l1(self):
    self.__auth_key_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key-l1", rest_name="auth-key-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_auth_key_l2(self):
    """
    Getter method for auth_key_l2, mapped from YANG variable /isis_state/global_isis_info/auth_key_l2 (string)

    YANG Description: Authkey for Level2
    """
    return self.__auth_key_l2
      
  def _set_auth_key_l2(self, v, load=False):
    """
    Setter method for auth_key_l2, mapped from YANG variable /isis_state/global_isis_info/auth_key_l2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_key_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_key_l2() directly.

    YANG Description: Authkey for Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="auth-key-l2", rest_name="auth-key-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_key_l2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key-l2", rest_name="auth-key-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__auth_key_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_key_l2(self):
    self.__auth_key_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="auth-key-l2", rest_name="auth-key-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_l1_auth_no_check(self):
    """
    Getter method for l1_auth_no_check, mapped from YANG variable /isis_state/global_isis_info/l1_auth_no_check (isis-status)

    YANG Description: If authentication enabled on incoming Level1 IS-IS PDUs
    """
    return self.__l1_auth_no_check
      
  def _set_l1_auth_no_check(self, v, load=False):
    """
    Setter method for l1_auth_no_check, mapped from YANG variable /isis_state/global_isis_info/l1_auth_no_check (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1_auth_no_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1_auth_no_check() directly.

    YANG Description: If authentication enabled on incoming Level1 IS-IS PDUs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l1-auth-no-check", rest_name="l1-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1_auth_no_check must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l1-auth-no-check", rest_name="l1-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__l1_auth_no_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1_auth_no_check(self):
    self.__l1_auth_no_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l1-auth-no-check", rest_name="l1-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_l2_auth_no_check(self):
    """
    Getter method for l2_auth_no_check, mapped from YANG variable /isis_state/global_isis_info/l2_auth_no_check (isis-status)

    YANG Description: If authentication enabled on incoming Level2 IS-IS PDUs
    """
    return self.__l2_auth_no_check
      
  def _set_l2_auth_no_check(self, v, load=False):
    """
    Setter method for l2_auth_no_check, mapped from YANG variable /isis_state/global_isis_info/l2_auth_no_check (isis-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2_auth_no_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2_auth_no_check() directly.

    YANG Description: If authentication enabled on incoming Level2 IS-IS PDUs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l2-auth-no-check", rest_name="l2-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2_auth_no_check must be of a type compatible with isis-status""",
          'defined-type': "brocade-isis-operational:isis-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l2-auth-no-check", rest_name="l2-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)""",
        })

    self.__l2_auth_no_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2_auth_no_check(self):
    self.__l2_auth_no_check = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'is-enabled': {'value': 1}, u'is-disabled': {'value': 0}},), is_leaf=True, yang_name="l2-auth-no-check", rest_name="l2-auth-no-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='isis-status', is_config=False)


  def _get_metric_style_l1(self):
    """
    Getter method for metric_style_l1, mapped from YANG variable /isis_state/global_isis_info/metric_style_l1 (string)

    YANG Description: Metric Style Level1
    """
    return self.__metric_style_l1
      
  def _set_metric_style_l1(self, v, load=False):
    """
    Setter method for metric_style_l1, mapped from YANG variable /isis_state/global_isis_info/metric_style_l1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric_style_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric_style_l1() directly.

    YANG Description: Metric Style Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="metric-style-l1", rest_name="metric-style-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric_style_l1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="metric-style-l1", rest_name="metric-style-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__metric_style_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric_style_l1(self):
    self.__metric_style_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric-style-l1", rest_name="metric-style-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_metric_style_l2(self):
    """
    Getter method for metric_style_l2, mapped from YANG variable /isis_state/global_isis_info/metric_style_l2 (string)

    YANG Description: Metric Style Level1
    """
    return self.__metric_style_l2
      
  def _set_metric_style_l2(self, v, load=False):
    """
    Setter method for metric_style_l2, mapped from YANG variable /isis_state/global_isis_info/metric_style_l2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_metric_style_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_metric_style_l2() directly.

    YANG Description: Metric Style Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="metric-style-l2", rest_name="metric-style-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """metric_style_l2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="metric-style-l2", rest_name="metric-style-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__metric_style_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_metric_style_l2(self):
    self.__metric_style_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="metric-style-l2", rest_name="metric-style-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_graceful_restart_helper(self):
    """
    Getter method for graceful_restart_helper, mapped from YANG variable /isis_state/global_isis_info/graceful_restart_helper (boolean)

    YANG Description: Grafeful Restart Helper
    """
    return self.__graceful_restart_helper
      
  def _set_graceful_restart_helper(self, v, load=False):
    """
    Setter method for graceful_restart_helper, mapped from YANG variable /isis_state/global_isis_info/graceful_restart_helper (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_graceful_restart_helper is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_graceful_restart_helper() directly.

    YANG Description: Grafeful Restart Helper
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """graceful_restart_helper must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__graceful_restart_helper = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_graceful_restart_helper(self):
    self.__graceful_restart_helper = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="graceful-restart-helper", rest_name="graceful-restart-helper", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_pspf_optimization(self):
    """
    Getter method for pspf_optimization, mapped from YANG variable /isis_state/global_isis_info/pspf_optimization (boolean)

    YANG Description: PSPF Optimization
    """
    return self.__pspf_optimization
      
  def _set_pspf_optimization(self, v, load=False):
    """
    Setter method for pspf_optimization, mapped from YANG variable /isis_state/global_isis_info/pspf_optimization (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_optimization is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_optimization() directly.

    YANG Description: PSPF Optimization
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="pspf-optimization", rest_name="pspf-optimization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_optimization must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pspf-optimization", rest_name="pspf-optimization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__pspf_optimization = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_optimization(self):
    self.__pspf_optimization = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="pspf-optimization", rest_name="pspf-optimization", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_spf_max_wait_l1(self):
    """
    Getter method for spf_max_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf_max_wait_l1 (uint32)

    YANG Description: SPF Max Wait Level1
    """
    return self.__spf_max_wait_l1
      
  def _set_spf_max_wait_l1(self, v, load=False):
    """
    Setter method for spf_max_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf_max_wait_l1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_max_wait_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_max_wait_l1() directly.

    YANG Description: SPF Max Wait Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l1", rest_name="spf-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_max_wait_l1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l1", rest_name="spf-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf_max_wait_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_max_wait_l1(self):
    self.__spf_max_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l1", rest_name="spf-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf_max_wait_l2(self):
    """
    Getter method for spf_max_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf_max_wait_l2 (uint32)

    YANG Description: SPF Max Wait Level2
    """
    return self.__spf_max_wait_l2
      
  def _set_spf_max_wait_l2(self, v, load=False):
    """
    Setter method for spf_max_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf_max_wait_l2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_max_wait_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_max_wait_l2() directly.

    YANG Description: SPF Max Wait Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l2", rest_name="spf-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_max_wait_l2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l2", rest_name="spf-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf_max_wait_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_max_wait_l2(self):
    self.__spf_max_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-max-wait-l2", rest_name="spf-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf_init_wait_l1(self):
    """
    Getter method for spf_init_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf_init_wait_l1 (uint32)

    YANG Description: SPF Init Wait Level1
    """
    return self.__spf_init_wait_l1
      
  def _set_spf_init_wait_l1(self, v, load=False):
    """
    Setter method for spf_init_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf_init_wait_l1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_init_wait_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_init_wait_l1() directly.

    YANG Description: SPF Init Wait Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l1", rest_name="spf-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_init_wait_l1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l1", rest_name="spf-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf_init_wait_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_init_wait_l1(self):
    self.__spf_init_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l1", rest_name="spf-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf_init_wait_l2(self):
    """
    Getter method for spf_init_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf_init_wait_l2 (uint32)

    YANG Description: SPF Init Wait Level2
    """
    return self.__spf_init_wait_l2
      
  def _set_spf_init_wait_l2(self, v, load=False):
    """
    Setter method for spf_init_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf_init_wait_l2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_init_wait_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_init_wait_l2() directly.

    YANG Description: SPF Init Wait Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l2", rest_name="spf-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_init_wait_l2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l2", rest_name="spf-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf_init_wait_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_init_wait_l2(self):
    self.__spf_init_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-init-wait-l2", rest_name="spf-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf_second_wait_l1(self):
    """
    Getter method for spf_second_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf_second_wait_l1 (uint32)

    YANG Description: SPF Second Wait Level1
    """
    return self.__spf_second_wait_l1
      
  def _set_spf_second_wait_l1(self, v, load=False):
    """
    Setter method for spf_second_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf_second_wait_l1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_second_wait_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_second_wait_l1() directly.

    YANG Description: SPF Second Wait Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l1", rest_name="spf-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_second_wait_l1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l1", rest_name="spf-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf_second_wait_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_second_wait_l1(self):
    self.__spf_second_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l1", rest_name="spf-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf_second_wait_l2(self):
    """
    Getter method for spf_second_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf_second_wait_l2 (uint32)

    YANG Description: SPF Second Wait Level2
    """
    return self.__spf_second_wait_l2
      
  def _set_spf_second_wait_l2(self, v, load=False):
    """
    Setter method for spf_second_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf_second_wait_l2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_second_wait_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_second_wait_l2() directly.

    YANG Description: SPF Second Wait Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l2", rest_name="spf-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_second_wait_l2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l2", rest_name="spf-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf_second_wait_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_second_wait_l2(self):
    self.__spf_second_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf-second-wait-l2", rest_name="spf-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf_scheduled_l1(self):
    """
    Getter method for spf_scheduled_l1, mapped from YANG variable /isis_state/global_isis_info/spf_scheduled_l1 (string)

    YANG Description: SPF Secheduled Level1
    """
    return self.__spf_scheduled_l1
      
  def _set_spf_scheduled_l1(self, v, load=False):
    """
    Setter method for spf_scheduled_l1, mapped from YANG variable /isis_state/global_isis_info/spf_scheduled_l1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_scheduled_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_scheduled_l1() directly.

    YANG Description: SPF Secheduled Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="spf-scheduled-l1", rest_name="spf-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_scheduled_l1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="spf-scheduled-l1", rest_name="spf-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__spf_scheduled_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_scheduled_l1(self):
    self.__spf_scheduled_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf-scheduled-l1", rest_name="spf-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_spf_scheduled_l2(self):
    """
    Getter method for spf_scheduled_l2, mapped from YANG variable /isis_state/global_isis_info/spf_scheduled_l2 (string)

    YANG Description: SPF Secheduled Level2
    """
    return self.__spf_scheduled_l2
      
  def _set_spf_scheduled_l2(self, v, load=False):
    """
    Setter method for spf_scheduled_l2, mapped from YANG variable /isis_state/global_isis_info/spf_scheduled_l2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_scheduled_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_scheduled_l2() directly.

    YANG Description: SPF Secheduled Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="spf-scheduled-l2", rest_name="spf-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_scheduled_l2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="spf-scheduled-l2", rest_name="spf-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__spf_scheduled_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_scheduled_l2(self):
    self.__spf_scheduled_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf-scheduled-l2", rest_name="spf-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_pspf_max_wait(self):
    """
    Getter method for pspf_max_wait, mapped from YANG variable /isis_state/global_isis_info/pspf_max_wait (uint32)

    YANG Description: PSPF Max Wait
    """
    return self.__pspf_max_wait
      
  def _set_pspf_max_wait(self, v, load=False):
    """
    Setter method for pspf_max_wait, mapped from YANG variable /isis_state/global_isis_info/pspf_max_wait (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_max_wait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_max_wait() directly.

    YANG Description: PSPF Max Wait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-max-wait", rest_name="pspf-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_max_wait must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-max-wait", rest_name="pspf-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pspf_max_wait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_max_wait(self):
    self.__pspf_max_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-max-wait", rest_name="pspf-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pspf_init_wait(self):
    """
    Getter method for pspf_init_wait, mapped from YANG variable /isis_state/global_isis_info/pspf_init_wait (uint32)

    YANG Description: PSPF Init Wait
    """
    return self.__pspf_init_wait
      
  def _set_pspf_init_wait(self, v, load=False):
    """
    Setter method for pspf_init_wait, mapped from YANG variable /isis_state/global_isis_info/pspf_init_wait (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_init_wait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_init_wait() directly.

    YANG Description: PSPF Init Wait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-init-wait", rest_name="pspf-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_init_wait must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-init-wait", rest_name="pspf-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pspf_init_wait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_init_wait(self):
    self.__pspf_init_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-init-wait", rest_name="pspf-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pspf_second_wait(self):
    """
    Getter method for pspf_second_wait, mapped from YANG variable /isis_state/global_isis_info/pspf_second_wait (uint32)

    YANG Description: PSPF Second Wait
    """
    return self.__pspf_second_wait
      
  def _set_pspf_second_wait(self, v, load=False):
    """
    Setter method for pspf_second_wait, mapped from YANG variable /isis_state/global_isis_info/pspf_second_wait (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_second_wait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_second_wait() directly.

    YANG Description: PSPF Second Wait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-second-wait", rest_name="pspf-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_second_wait must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-second-wait", rest_name="pspf-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pspf_second_wait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_second_wait(self):
    self.__pspf_second_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf-second-wait", rest_name="pspf-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pspf_scheduled(self):
    """
    Getter method for pspf_scheduled, mapped from YANG variable /isis_state/global_isis_info/pspf_scheduled (string)

    YANG Description: PSPF Secheduled
    """
    return self.__pspf_scheduled
      
  def _set_pspf_scheduled(self, v, load=False):
    """
    Setter method for pspf_scheduled, mapped from YANG variable /isis_state/global_isis_info/pspf_scheduled (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf_scheduled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf_scheduled() directly.

    YANG Description: PSPF Secheduled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pspf-scheduled", rest_name="pspf-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf_scheduled must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pspf-scheduled", rest_name="pspf-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__pspf_scheduled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf_scheduled(self):
    self.__pspf_scheduled = YANGDynClass(base=unicode, is_leaf=True, yang_name="pspf-scheduled", rest_name="pspf-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_spf6_max_wait_l1(self):
    """
    Getter method for spf6_max_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_max_wait_l1 (uint32)

    YANG Description: SPF Max Wait Level1
    """
    return self.__spf6_max_wait_l1
      
  def _set_spf6_max_wait_l1(self, v, load=False):
    """
    Setter method for spf6_max_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_max_wait_l1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_max_wait_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_max_wait_l1() directly.

    YANG Description: SPF Max Wait Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l1", rest_name="spf6-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_max_wait_l1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l1", rest_name="spf6-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf6_max_wait_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_max_wait_l1(self):
    self.__spf6_max_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l1", rest_name="spf6-max-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf6_max_wait_l2(self):
    """
    Getter method for spf6_max_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_max_wait_l2 (uint32)

    YANG Description: SPF Max Wait Level2
    """
    return self.__spf6_max_wait_l2
      
  def _set_spf6_max_wait_l2(self, v, load=False):
    """
    Setter method for spf6_max_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_max_wait_l2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_max_wait_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_max_wait_l2() directly.

    YANG Description: SPF Max Wait Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l2", rest_name="spf6-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_max_wait_l2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l2", rest_name="spf6-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf6_max_wait_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_max_wait_l2(self):
    self.__spf6_max_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-max-wait-l2", rest_name="spf6-max-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf6_init_wait_l1(self):
    """
    Getter method for spf6_init_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_init_wait_l1 (uint32)

    YANG Description: SPF Init Wait Level1
    """
    return self.__spf6_init_wait_l1
      
  def _set_spf6_init_wait_l1(self, v, load=False):
    """
    Setter method for spf6_init_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_init_wait_l1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_init_wait_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_init_wait_l1() directly.

    YANG Description: SPF Init Wait Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l1", rest_name="spf6-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_init_wait_l1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l1", rest_name="spf6-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf6_init_wait_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_init_wait_l1(self):
    self.__spf6_init_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l1", rest_name="spf6-init-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf6_init_wait_l2(self):
    """
    Getter method for spf6_init_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_init_wait_l2 (uint32)

    YANG Description: SPF Init Wait Level2
    """
    return self.__spf6_init_wait_l2
      
  def _set_spf6_init_wait_l2(self, v, load=False):
    """
    Setter method for spf6_init_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_init_wait_l2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_init_wait_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_init_wait_l2() directly.

    YANG Description: SPF Init Wait Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l2", rest_name="spf6-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_init_wait_l2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l2", rest_name="spf6-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf6_init_wait_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_init_wait_l2(self):
    self.__spf6_init_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-init-wait-l2", rest_name="spf6-init-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf6_second_wait_l1(self):
    """
    Getter method for spf6_second_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_second_wait_l1 (uint32)

    YANG Description: SPF Second Wait Level1
    """
    return self.__spf6_second_wait_l1
      
  def _set_spf6_second_wait_l1(self, v, load=False):
    """
    Setter method for spf6_second_wait_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_second_wait_l1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_second_wait_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_second_wait_l1() directly.

    YANG Description: SPF Second Wait Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l1", rest_name="spf6-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_second_wait_l1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l1", rest_name="spf6-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf6_second_wait_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_second_wait_l1(self):
    self.__spf6_second_wait_l1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l1", rest_name="spf6-second-wait-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf6_second_wait_l2(self):
    """
    Getter method for spf6_second_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_second_wait_l2 (uint32)

    YANG Description: SPF Second Wait Level2
    """
    return self.__spf6_second_wait_l2
      
  def _set_spf6_second_wait_l2(self, v, load=False):
    """
    Setter method for spf6_second_wait_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_second_wait_l2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_second_wait_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_second_wait_l2() directly.

    YANG Description: SPF Second Wait Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l2", rest_name="spf6-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_second_wait_l2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l2", rest_name="spf6-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__spf6_second_wait_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_second_wait_l2(self):
    self.__spf6_second_wait_l2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="spf6-second-wait-l2", rest_name="spf6-second-wait-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_spf6_scheduled_l1(self):
    """
    Getter method for spf6_scheduled_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_scheduled_l1 (string)

    YANG Description: SPF6 Secheduled Level1
    """
    return self.__spf6_scheduled_l1
      
  def _set_spf6_scheduled_l1(self, v, load=False):
    """
    Setter method for spf6_scheduled_l1, mapped from YANG variable /isis_state/global_isis_info/spf6_scheduled_l1 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_scheduled_l1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_scheduled_l1() directly.

    YANG Description: SPF6 Secheduled Level1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="spf6-scheduled-l1", rest_name="spf6-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_scheduled_l1 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="spf6-scheduled-l1", rest_name="spf6-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__spf6_scheduled_l1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_scheduled_l1(self):
    self.__spf6_scheduled_l1 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf6-scheduled-l1", rest_name="spf6-scheduled-l1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_spf6_scheduled_l2(self):
    """
    Getter method for spf6_scheduled_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_scheduled_l2 (string)

    YANG Description: SPF6 Secheduled Level2
    """
    return self.__spf6_scheduled_l2
      
  def _set_spf6_scheduled_l2(self, v, load=False):
    """
    Setter method for spf6_scheduled_l2, mapped from YANG variable /isis_state/global_isis_info/spf6_scheduled_l2 (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf6_scheduled_l2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf6_scheduled_l2() directly.

    YANG Description: SPF6 Secheduled Level2
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="spf6-scheduled-l2", rest_name="spf6-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf6_scheduled_l2 must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="spf6-scheduled-l2", rest_name="spf6-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__spf6_scheduled_l2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf6_scheduled_l2(self):
    self.__spf6_scheduled_l2 = YANGDynClass(base=unicode, is_leaf=True, yang_name="spf6-scheduled-l2", rest_name="spf6-scheduled-l2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_pspf6_max_wait(self):
    """
    Getter method for pspf6_max_wait, mapped from YANG variable /isis_state/global_isis_info/pspf6_max_wait (uint32)

    YANG Description: PSPF Max Wait
    """
    return self.__pspf6_max_wait
      
  def _set_pspf6_max_wait(self, v, load=False):
    """
    Setter method for pspf6_max_wait, mapped from YANG variable /isis_state/global_isis_info/pspf6_max_wait (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf6_max_wait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf6_max_wait() directly.

    YANG Description: PSPF Max Wait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-max-wait", rest_name="pspf6-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf6_max_wait must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-max-wait", rest_name="pspf6-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pspf6_max_wait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf6_max_wait(self):
    self.__pspf6_max_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-max-wait", rest_name="pspf6-max-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pspf6_init_wait(self):
    """
    Getter method for pspf6_init_wait, mapped from YANG variable /isis_state/global_isis_info/pspf6_init_wait (uint32)

    YANG Description: PSPF Init Wait
    """
    return self.__pspf6_init_wait
      
  def _set_pspf6_init_wait(self, v, load=False):
    """
    Setter method for pspf6_init_wait, mapped from YANG variable /isis_state/global_isis_info/pspf6_init_wait (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf6_init_wait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf6_init_wait() directly.

    YANG Description: PSPF Init Wait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-init-wait", rest_name="pspf6-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf6_init_wait must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-init-wait", rest_name="pspf6-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pspf6_init_wait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf6_init_wait(self):
    self.__pspf6_init_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-init-wait", rest_name="pspf6-init-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pspf6_second_wait(self):
    """
    Getter method for pspf6_second_wait, mapped from YANG variable /isis_state/global_isis_info/pspf6_second_wait (uint32)

    YANG Description: PSPF Second Wait
    """
    return self.__pspf6_second_wait
      
  def _set_pspf6_second_wait(self, v, load=False):
    """
    Setter method for pspf6_second_wait, mapped from YANG variable /isis_state/global_isis_info/pspf6_second_wait (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf6_second_wait is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf6_second_wait() directly.

    YANG Description: PSPF Second Wait
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-second-wait", rest_name="pspf6-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf6_second_wait must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-second-wait", rest_name="pspf6-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__pspf6_second_wait = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf6_second_wait(self):
    self.__pspf6_second_wait = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="pspf6-second-wait", rest_name="pspf6-second-wait", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_pspf6_scheduled(self):
    """
    Getter method for pspf6_scheduled, mapped from YANG variable /isis_state/global_isis_info/pspf6_scheduled (string)

    YANG Description: PSPF Secheduled
    """
    return self.__pspf6_scheduled
      
  def _set_pspf6_scheduled(self, v, load=False):
    """
    Setter method for pspf6_scheduled, mapped from YANG variable /isis_state/global_isis_info/pspf6_scheduled (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pspf6_scheduled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pspf6_scheduled() directly.

    YANG Description: PSPF Secheduled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pspf6-scheduled", rest_name="pspf6-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pspf6_scheduled must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pspf6-scheduled", rest_name="pspf6-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__pspf6_scheduled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pspf6_scheduled(self):
    self.__pspf6_scheduled = YANGDynClass(base=unicode, is_leaf=True, yang_name="pspf6-scheduled", rest_name="pspf6-scheduled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_lsp_max_lifetime(self):
    """
    Getter method for lsp_max_lifetime, mapped from YANG variable /isis_state/global_isis_info/lsp_max_lifetime (uint32)

    YANG Description: LSP MAX Lifetime
    """
    return self.__lsp_max_lifetime
      
  def _set_lsp_max_lifetime(self, v, load=False):
    """
    Setter method for lsp_max_lifetime, mapped from YANG variable /isis_state/global_isis_info/lsp_max_lifetime (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_max_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_max_lifetime() directly.

    YANG Description: LSP MAX Lifetime
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-max-lifetime", rest_name="lsp-max-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_max_lifetime must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-max-lifetime", rest_name="lsp-max-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_max_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_max_lifetime(self):
    self.__lsp_max_lifetime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-max-lifetime", rest_name="lsp-max-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_refresh_interval(self):
    """
    Getter method for lsp_refresh_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_refresh_interval (uint32)

    YANG Description: LSP Refresh Interval
    """
    return self.__lsp_refresh_interval
      
  def _set_lsp_refresh_interval(self, v, load=False):
    """
    Setter method for lsp_refresh_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_refresh_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_refresh_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_refresh_interval() directly.

    YANG Description: LSP Refresh Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_refresh_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_refresh_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_refresh_interval(self):
    self.__lsp_refresh_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_gen_interval(self):
    """
    Getter method for lsp_gen_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_gen_interval (uint32)

    YANG Description: LSP Gen Interval
    """
    return self.__lsp_gen_interval
      
  def _set_lsp_gen_interval(self, v, load=False):
    """
    Setter method for lsp_gen_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_gen_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_gen_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_gen_interval() directly.

    YANG Description: LSP Gen Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_gen_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_gen_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_gen_interval(self):
    self.__lsp_gen_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_retrans_interval(self):
    """
    Getter method for lsp_retrans_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_retrans_interval (uint32)

    YANG Description: LSP Retrans Interval
    """
    return self.__lsp_retrans_interval
      
  def _set_lsp_retrans_interval(self, v, load=False):
    """
    Setter method for lsp_retrans_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_retrans_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_retrans_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_retrans_interval() directly.

    YANG Description: LSP Retrans Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-retrans-interval", rest_name="lsp-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_retrans_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-retrans-interval", rest_name="lsp-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_retrans_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_retrans_interval(self):
    self.__lsp_retrans_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-retrans-interval", rest_name="lsp-retrans-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_interval(self):
    """
    Getter method for lsp_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_interval (uint32)

    YANG Description: LSP Interval
    """
    return self.__lsp_interval
      
  def _set_lsp_interval(self, v, load=False):
    """
    Setter method for lsp_interval, mapped from YANG variable /isis_state/global_isis_info/lsp_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_interval() directly.

    YANG Description: LSP Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_interval(self):
    self.__lsp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_snp_csnp_interval(self):
    """
    Getter method for snp_csnp_interval, mapped from YANG variable /isis_state/global_isis_info/snp_csnp_interval (uint32)

    YANG Description: CSNP Interval
    """
    return self.__snp_csnp_interval
      
  def _set_snp_csnp_interval(self, v, load=False):
    """
    Setter method for snp_csnp_interval, mapped from YANG variable /isis_state/global_isis_info/snp_csnp_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snp_csnp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snp_csnp_interval() directly.

    YANG Description: CSNP Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-csnp-interval", rest_name="snp-csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snp_csnp_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-csnp-interval", rest_name="snp-csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__snp_csnp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snp_csnp_interval(self):
    self.__snp_csnp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-csnp-interval", rest_name="snp-csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_snp_psnp_interval(self):
    """
    Getter method for snp_psnp_interval, mapped from YANG variable /isis_state/global_isis_info/snp_psnp_interval (uint32)

    YANG Description: PSNP Interval
    """
    return self.__snp_psnp_interval
      
  def _set_snp_psnp_interval(self, v, load=False):
    """
    Setter method for snp_psnp_interval, mapped from YANG variable /isis_state/global_isis_info/snp_psnp_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snp_psnp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snp_psnp_interval() directly.

    YANG Description: PSNP Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-psnp-interval", rest_name="snp-psnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snp_psnp_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-psnp-interval", rest_name="snp-psnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__snp_psnp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snp_psnp_interval(self):
    self.__snp_psnp_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="snp-psnp-interval", rest_name="snp-psnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_hello_padding(self):
    """
    Getter method for hello_padding, mapped from YANG variable /isis_state/global_isis_info/hello_padding (boolean)

    YANG Description: Hello Padding
    """
    return self.__hello_padding
      
  def _set_hello_padding(self, v, load=False):
    """
    Setter method for hello_padding, mapped from YANG variable /isis_state/global_isis_info/hello_padding (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_padding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_padding() directly.

    YANG Description: Hello Padding
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_padding must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__hello_padding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_padding(self):
    self.__hello_padding = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="hello-padding", rest_name="hello-padding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_hello_padding_ptp(self):
    """
    Getter method for hello_padding_ptp, mapped from YANG variable /isis_state/global_isis_info/hello_padding_ptp (uint32)

    YANG Description: Hello Padding for Point-to-Point
    """
    return self.__hello_padding_ptp
      
  def _set_hello_padding_ptp(self, v, load=False):
    """
    Setter method for hello_padding_ptp, mapped from YANG variable /isis_state/global_isis_info/hello_padding_ptp (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_padding_ptp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_padding_ptp() directly.

    YANG Description: Hello Padding for Point-to-Point
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_padding_ptp must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__hello_padding_ptp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_padding_ptp(self):
    self.__hello_padding_ptp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hello-padding-ptp", rest_name="hello-padding-ptp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_ptp_handshake(self):
    """
    Getter method for ptp_handshake, mapped from YANG variable /isis_state/global_isis_info/ptp_handshake (boolean)

    YANG Description: Point to Point Handshake
    """
    return self.__ptp_handshake
      
  def _set_ptp_handshake(self, v, load=False):
    """
    Setter method for ptp_handshake, mapped from YANG variable /isis_state/global_isis_info/ptp_handshake (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ptp_handshake is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ptp_handshake() directly.

    YANG Description: Point to Point Handshake
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ptp-handshake", rest_name="ptp-handshake", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ptp_handshake must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ptp-handshake", rest_name="ptp-handshake", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__ptp_handshake = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ptp_handshake(self):
    self.__ptp_handshake = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ptp-handshake", rest_name="ptp-handshake", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_bgp_ipv4_converged(self):
    """
    Getter method for bgp_ipv4_converged, mapped from YANG variable /isis_state/global_isis_info/bgp_ipv4_converged (boolean)

    YANG Description: IPV4 BGP Converged
    """
    return self.__bgp_ipv4_converged
      
  def _set_bgp_ipv4_converged(self, v, load=False):
    """
    Setter method for bgp_ipv4_converged, mapped from YANG variable /isis_state/global_isis_info/bgp_ipv4_converged (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bgp_ipv4_converged is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bgp_ipv4_converged() directly.

    YANG Description: IPV4 BGP Converged
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bgp-ipv4-converged", rest_name="bgp-ipv4-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bgp_ipv4_converged must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bgp-ipv4-converged", rest_name="bgp-ipv4-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__bgp_ipv4_converged = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bgp_ipv4_converged(self):
    self.__bgp_ipv4_converged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bgp-ipv4-converged", rest_name="bgp-ipv4-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_bgp_ipv6_converged(self):
    """
    Getter method for bgp_ipv6_converged, mapped from YANG variable /isis_state/global_isis_info/bgp_ipv6_converged (boolean)

    YANG Description: IPV6 BGP Converged
    """
    return self.__bgp_ipv6_converged
      
  def _set_bgp_ipv6_converged(self, v, load=False):
    """
    Setter method for bgp_ipv6_converged, mapped from YANG variable /isis_state/global_isis_info/bgp_ipv6_converged (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bgp_ipv6_converged is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bgp_ipv6_converged() directly.

    YANG Description: IPV6 BGP Converged
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bgp-ipv6-converged", rest_name="bgp-ipv6-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bgp_ipv6_converged must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bgp-ipv6-converged", rest_name="bgp-ipv6-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__bgp_ipv6_converged = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bgp_ipv6_converged(self):
    self.__bgp_ipv6_converged = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bgp-ipv6-converged", rest_name="bgp-ipv6-converged", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_isis_te(self):
    """
    Getter method for isis_te, mapped from YANG variable /isis_state/global_isis_info/isis_te (boolean)

    YANG Description: ISIS Traffic Engineering
    """
    return self.__isis_te
      
  def _set_isis_te(self, v, load=False):
    """
    Setter method for isis_te, mapped from YANG variable /isis_state/global_isis_info/isis_te (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_te is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_te() directly.

    YANG Description: ISIS Traffic Engineering
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="isis-te", rest_name="isis-te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_te must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-te", rest_name="isis-te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__isis_te = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_te(self):
    self.__isis_te = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-te", rest_name="isis-te", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_isis_shortcuts(self):
    """
    Getter method for isis_shortcuts, mapped from YANG variable /isis_state/global_isis_info/isis_shortcuts (string)

    YANG Description: ISIS Shortcuts
    """
    return self.__isis_shortcuts
      
  def _set_isis_shortcuts(self, v, load=False):
    """
    Setter method for isis_shortcuts, mapped from YANG variable /isis_state/global_isis_info/isis_shortcuts (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_shortcuts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_shortcuts() directly.

    YANG Description: ISIS Shortcuts
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="isis-shortcuts", rest_name="isis-shortcuts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_shortcuts must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="isis-shortcuts", rest_name="isis-shortcuts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__isis_shortcuts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_shortcuts(self):
    self.__isis_shortcuts = YANGDynClass(base=unicode, is_leaf=True, yang_name="isis-shortcuts", rest_name="isis-shortcuts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_isis_reverse_metric(self):
    """
    Getter method for isis_reverse_metric, mapped from YANG variable /isis_state/global_isis_info/isis_reverse_metric (uint32)

    YANG Description: ISIS Reverse Metric
    """
    return self.__isis_reverse_metric
      
  def _set_isis_reverse_metric(self, v, load=False):
    """
    Setter method for isis_reverse_metric, mapped from YANG variable /isis_state/global_isis_info/isis_reverse_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_reverse_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_reverse_metric() directly.

    YANG Description: ISIS Reverse Metric
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric", rest_name="isis-reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_reverse_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric", rest_name="isis-reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__isis_reverse_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_reverse_metric(self):
    self.__isis_reverse_metric = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric", rest_name="isis-reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_isis_reverse_metric_wbit(self):
    """
    Getter method for isis_reverse_metric_wbit, mapped from YANG variable /isis_state/global_isis_info/isis_reverse_metric_wbit (uint32)

    YANG Description: ISIS Reverse Metric W Flag
    """
    return self.__isis_reverse_metric_wbit
      
  def _set_isis_reverse_metric_wbit(self, v, load=False):
    """
    Setter method for isis_reverse_metric_wbit, mapped from YANG variable /isis_state/global_isis_info/isis_reverse_metric_wbit (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_reverse_metric_wbit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_reverse_metric_wbit() directly.

    YANG Description: ISIS Reverse Metric W Flag
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-wbit", rest_name="isis-reverse-metric-wbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_reverse_metric_wbit must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-wbit", rest_name="isis-reverse-metric-wbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__isis_reverse_metric_wbit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_reverse_metric_wbit(self):
    self.__isis_reverse_metric_wbit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-wbit", rest_name="isis-reverse-metric-wbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_isis_reverse_metric_sbit(self):
    """
    Getter method for isis_reverse_metric_sbit, mapped from YANG variable /isis_state/global_isis_info/isis_reverse_metric_sbit (uint32)

    YANG Description: ISIS Reverse Metric S Flag
    """
    return self.__isis_reverse_metric_sbit
      
  def _set_isis_reverse_metric_sbit(self, v, load=False):
    """
    Setter method for isis_reverse_metric_sbit, mapped from YANG variable /isis_state/global_isis_info/isis_reverse_metric_sbit (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_reverse_metric_sbit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_reverse_metric_sbit() directly.

    YANG Description: ISIS Reverse Metric S Flag
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-sbit", rest_name="isis-reverse-metric-sbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_reverse_metric_sbit must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-sbit", rest_name="isis-reverse-metric-sbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__isis_reverse_metric_sbit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_reverse_metric_sbit(self):
    self.__isis_reverse_metric_sbit = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="isis-reverse-metric-sbit", rest_name="isis-reverse-metric-sbit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_bfd_enabled(self):
    """
    Getter method for bfd_enabled, mapped from YANG variable /isis_state/global_isis_info/bfd_enabled (boolean)

    YANG Description: BFD Enabled
    """
    return self.__bfd_enabled
      
  def _set_bfd_enabled(self, v, load=False):
    """
    Setter method for bfd_enabled, mapped from YANG variable /isis_state/global_isis_info/bfd_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_enabled() directly.

    YANG Description: BFD Enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__bfd_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_enabled(self):
    self.__bfd_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="bfd-enabled", rest_name="bfd-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_bfd_hold_interval(self):
    """
    Getter method for bfd_hold_interval, mapped from YANG variable /isis_state/global_isis_info/bfd_hold_interval (uint32)

    YANG Description: BGP Hold Interval
    """
    return self.__bfd_hold_interval
      
  def _set_bfd_hold_interval(self, v, load=False):
    """
    Setter method for bfd_hold_interval, mapped from YANG variable /isis_state/global_isis_info/bfd_hold_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_hold_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_hold_interval() directly.

    YANG Description: BGP Hold Interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-hold-interval", rest_name="bfd-hold-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_hold_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-hold-interval", rest_name="bfd-hold-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bfd_hold_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_hold_interval(self):
    self.__bfd_hold_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bfd-hold-interval", rest_name="bfd-hold-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_nsr_enabled(self):
    """
    Getter method for nsr_enabled, mapped from YANG variable /isis_state/global_isis_info/nsr_enabled (boolean)

    YANG Description: NSR Enabled
    """
    return self.__nsr_enabled
      
  def _set_nsr_enabled(self, v, load=False):
    """
    Setter method for nsr_enabled, mapped from YANG variable /isis_state/global_isis_info/nsr_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsr_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsr_enabled() directly.

    YANG Description: NSR Enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="nsr-enabled", rest_name="nsr-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsr_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsr-enabled", rest_name="nsr-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__nsr_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsr_enabled(self):
    self.__nsr_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsr-enabled", rest_name="nsr-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_nsr_state(self):
    """
    Getter method for nsr_state, mapped from YANG variable /isis_state/global_isis_info/nsr_state (string)

    YANG Description: NSR State
    """
    return self.__nsr_state
      
  def _set_nsr_state(self, v, load=False):
    """
    Setter method for nsr_state, mapped from YANG variable /isis_state/global_isis_info/nsr_state (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsr_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsr_state() directly.

    YANG Description: NSR State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsr_state must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__nsr_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsr_state(self):
    self.__nsr_state = YANGDynClass(base=unicode, is_leaf=True, yang_name="nsr-state", rest_name="nsr-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_nsr_sync_state(self):
    """
    Getter method for nsr_sync_state, mapped from YANG variable /isis_state/global_isis_info/nsr_sync_state (boolean)

    YANG Description: NSR Sync State
    """
    return self.__nsr_sync_state
      
  def _set_nsr_sync_state(self, v, load=False):
    """
    Setter method for nsr_sync_state, mapped from YANG variable /isis_state/global_isis_info/nsr_sync_state (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nsr_sync_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nsr_sync_state() directly.

    YANG Description: NSR Sync State
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="nsr-sync-state", rest_name="nsr-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nsr_sync_state must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsr-sync-state", rest_name="nsr-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__nsr_sync_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nsr_sync_state(self):
    self.__nsr_sync_state = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nsr-sync-state", rest_name="nsr-sync-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_isis_is_mp(self):
    """
    Getter method for isis_is_mp, mapped from YANG variable /isis_state/global_isis_info/isis_is_mp (boolean)

    YANG Description: ISIS Active
    """
    return self.__isis_is_mp
      
  def _set_isis_is_mp(self, v, load=False):
    """
    Setter method for isis_is_mp, mapped from YANG variable /isis_state/global_isis_info/isis_is_mp (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isis_is_mp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isis_is_mp() directly.

    YANG Description: ISIS Active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="isis-is-mp", rest_name="isis-is-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isis_is_mp must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-is-mp", rest_name="isis-is-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__isis_is_mp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isis_is_mp(self):
    self.__isis_is_mp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isis-is-mp", rest_name="isis-is-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_ldp_sync(self):
    """
    Getter method for ldp_sync, mapped from YANG variable /isis_state/global_isis_info/ldp_sync (boolean)

    YANG Description: LDP Sync
    """
    return self.__ldp_sync
      
  def _set_ldp_sync(self, v, load=False):
    """
    Setter method for ldp_sync, mapped from YANG variable /isis_state/global_isis_info/ldp_sync (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_sync() directly.

    YANG Description: LDP Sync
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_sync must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)""",
        })

    self.__ldp_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_sync(self):
    self.__ldp_sync = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='boolean', is_config=False)


  def _get_ldp_sync_holddown_time(self):
    """
    Getter method for ldp_sync_holddown_time, mapped from YANG variable /isis_state/global_isis_info/ldp_sync_holddown_time (uint32)

    YANG Description: LDP Sync Holddown Time
    """
    return self.__ldp_sync_holddown_time
      
  def _set_ldp_sync_holddown_time(self, v, load=False):
    """
    Setter method for ldp_sync_holddown_time, mapped from YANG variable /isis_state/global_isis_info/ldp_sync_holddown_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ldp_sync_holddown_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ldp_sync_holddown_time() directly.

    YANG Description: LDP Sync Holddown Time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-sync-holddown-time", rest_name="ldp-sync-holddown-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ldp_sync_holddown_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-sync-holddown-time", rest_name="ldp-sync-holddown-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ldp_sync_holddown_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ldp_sync_holddown_time(self):
    self.__ldp_sync_holddown_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ldp-sync-holddown-time", rest_name="ldp-sync-holddown-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

  isis_protocol = __builtin__.property(_get_isis_protocol)
  isis_state = __builtin__.property(_get_isis_state)
  is_type = __builtin__.property(_get_is_type)
  system_id = __builtin__.property(_get_system_id)
  area_addresses = __builtin__.property(_get_area_addresses)
  database_state_level_1 = __builtin__.property(_get_database_state_level_1)
  database_state_level_2 = __builtin__.property(_get_database_state_level_2)
  database_state_level_1_2 = __builtin__.property(_get_database_state_level_1_2)
  overload_reason = __builtin__.property(_get_overload_reason)
  check_alarm = __builtin__.property(_get_check_alarm)
  overload_state_since = __builtin__.property(_get_overload_state_since)
  overload_state_rem_time = __builtin__.property(_get_overload_state_rem_time)
  admin_distance = __builtin__.property(_get_admin_distance)
  v6_admin_distance = __builtin__.property(_get_v6_admin_distance)
  max_paths = __builtin__.property(_get_max_paths)
  v6_max_paths = __builtin__.property(_get_v6_max_paths)
  default_redis_metric = __builtin__.property(_get_default_redis_metric)
  v6_default_redis_metric = __builtin__.property(_get_v6_default_redis_metric)
  default_link_metric_l1_conf = __builtin__.property(_get_default_link_metric_l1_conf)
  default_link_metric_l1_adv = __builtin__.property(_get_default_link_metric_l1_adv)
  default_link_metric_l2_conf = __builtin__.property(_get_default_link_metric_l2_conf)
  default_link_metric_l2_adv = __builtin__.property(_get_default_link_metric_l2_adv)
  v6_default_link_metric_l1_conf = __builtin__.property(_get_v6_default_link_metric_l1_conf)
  v6_default_link_metric_l1_adv = __builtin__.property(_get_v6_default_link_metric_l1_adv)
  v6_default_link_metric_l2_conf = __builtin__.property(_get_v6_default_link_metric_l2_conf)
  v6_default_link_metric_l2_adv = __builtin__.property(_get_v6_default_link_metric_l2_adv)
  redis_protocol = __builtin__.property(_get_redis_protocol)
  no_routes_redis = __builtin__.property(_get_no_routes_redis)
  v6_redis_protocol = __builtin__.property(_get_v6_redis_protocol)
  v6_no_routes_redis = __builtin__.property(_get_v6_no_routes_redis)
  auth_mode_l1 = __builtin__.property(_get_auth_mode_l1)
  auth_mode_l2 = __builtin__.property(_get_auth_mode_l2)
  auth_key_l1 = __builtin__.property(_get_auth_key_l1)
  auth_key_l2 = __builtin__.property(_get_auth_key_l2)
  l1_auth_no_check = __builtin__.property(_get_l1_auth_no_check)
  l2_auth_no_check = __builtin__.property(_get_l2_auth_no_check)
  metric_style_l1 = __builtin__.property(_get_metric_style_l1)
  metric_style_l2 = __builtin__.property(_get_metric_style_l2)
  graceful_restart_helper = __builtin__.property(_get_graceful_restart_helper)
  pspf_optimization = __builtin__.property(_get_pspf_optimization)
  spf_max_wait_l1 = __builtin__.property(_get_spf_max_wait_l1)
  spf_max_wait_l2 = __builtin__.property(_get_spf_max_wait_l2)
  spf_init_wait_l1 = __builtin__.property(_get_spf_init_wait_l1)
  spf_init_wait_l2 = __builtin__.property(_get_spf_init_wait_l2)
  spf_second_wait_l1 = __builtin__.property(_get_spf_second_wait_l1)
  spf_second_wait_l2 = __builtin__.property(_get_spf_second_wait_l2)
  spf_scheduled_l1 = __builtin__.property(_get_spf_scheduled_l1)
  spf_scheduled_l2 = __builtin__.property(_get_spf_scheduled_l2)
  pspf_max_wait = __builtin__.property(_get_pspf_max_wait)
  pspf_init_wait = __builtin__.property(_get_pspf_init_wait)
  pspf_second_wait = __builtin__.property(_get_pspf_second_wait)
  pspf_scheduled = __builtin__.property(_get_pspf_scheduled)
  spf6_max_wait_l1 = __builtin__.property(_get_spf6_max_wait_l1)
  spf6_max_wait_l2 = __builtin__.property(_get_spf6_max_wait_l2)
  spf6_init_wait_l1 = __builtin__.property(_get_spf6_init_wait_l1)
  spf6_init_wait_l2 = __builtin__.property(_get_spf6_init_wait_l2)
  spf6_second_wait_l1 = __builtin__.property(_get_spf6_second_wait_l1)
  spf6_second_wait_l2 = __builtin__.property(_get_spf6_second_wait_l2)
  spf6_scheduled_l1 = __builtin__.property(_get_spf6_scheduled_l1)
  spf6_scheduled_l2 = __builtin__.property(_get_spf6_scheduled_l2)
  pspf6_max_wait = __builtin__.property(_get_pspf6_max_wait)
  pspf6_init_wait = __builtin__.property(_get_pspf6_init_wait)
  pspf6_second_wait = __builtin__.property(_get_pspf6_second_wait)
  pspf6_scheduled = __builtin__.property(_get_pspf6_scheduled)
  lsp_max_lifetime = __builtin__.property(_get_lsp_max_lifetime)
  lsp_refresh_interval = __builtin__.property(_get_lsp_refresh_interval)
  lsp_gen_interval = __builtin__.property(_get_lsp_gen_interval)
  lsp_retrans_interval = __builtin__.property(_get_lsp_retrans_interval)
  lsp_interval = __builtin__.property(_get_lsp_interval)
  snp_csnp_interval = __builtin__.property(_get_snp_csnp_interval)
  snp_psnp_interval = __builtin__.property(_get_snp_psnp_interval)
  hello_padding = __builtin__.property(_get_hello_padding)
  hello_padding_ptp = __builtin__.property(_get_hello_padding_ptp)
  ptp_handshake = __builtin__.property(_get_ptp_handshake)
  bgp_ipv4_converged = __builtin__.property(_get_bgp_ipv4_converged)
  bgp_ipv6_converged = __builtin__.property(_get_bgp_ipv6_converged)
  isis_te = __builtin__.property(_get_isis_te)
  isis_shortcuts = __builtin__.property(_get_isis_shortcuts)
  isis_reverse_metric = __builtin__.property(_get_isis_reverse_metric)
  isis_reverse_metric_wbit = __builtin__.property(_get_isis_reverse_metric_wbit)
  isis_reverse_metric_sbit = __builtin__.property(_get_isis_reverse_metric_sbit)
  bfd_enabled = __builtin__.property(_get_bfd_enabled)
  bfd_hold_interval = __builtin__.property(_get_bfd_hold_interval)
  nsr_enabled = __builtin__.property(_get_nsr_enabled)
  nsr_state = __builtin__.property(_get_nsr_state)
  nsr_sync_state = __builtin__.property(_get_nsr_sync_state)
  isis_is_mp = __builtin__.property(_get_isis_is_mp)
  ldp_sync = __builtin__.property(_get_ldp_sync)
  ldp_sync_holddown_time = __builtin__.property(_get_ldp_sync_holddown_time)


  _pyangbind_elements = {'isis_protocol': isis_protocol, 'isis_state': isis_state, 'is_type': is_type, 'system_id': system_id, 'area_addresses': area_addresses, 'database_state_level_1': database_state_level_1, 'database_state_level_2': database_state_level_2, 'database_state_level_1_2': database_state_level_1_2, 'overload_reason': overload_reason, 'check_alarm': check_alarm, 'overload_state_since': overload_state_since, 'overload_state_rem_time': overload_state_rem_time, 'admin_distance': admin_distance, 'v6_admin_distance': v6_admin_distance, 'max_paths': max_paths, 'v6_max_paths': v6_max_paths, 'default_redis_metric': default_redis_metric, 'v6_default_redis_metric': v6_default_redis_metric, 'default_link_metric_l1_conf': default_link_metric_l1_conf, 'default_link_metric_l1_adv': default_link_metric_l1_adv, 'default_link_metric_l2_conf': default_link_metric_l2_conf, 'default_link_metric_l2_adv': default_link_metric_l2_adv, 'v6_default_link_metric_l1_conf': v6_default_link_metric_l1_conf, 'v6_default_link_metric_l1_adv': v6_default_link_metric_l1_adv, 'v6_default_link_metric_l2_conf': v6_default_link_metric_l2_conf, 'v6_default_link_metric_l2_adv': v6_default_link_metric_l2_adv, 'redis_protocol': redis_protocol, 'no_routes_redis': no_routes_redis, 'v6_redis_protocol': v6_redis_protocol, 'v6_no_routes_redis': v6_no_routes_redis, 'auth_mode_l1': auth_mode_l1, 'auth_mode_l2': auth_mode_l2, 'auth_key_l1': auth_key_l1, 'auth_key_l2': auth_key_l2, 'l1_auth_no_check': l1_auth_no_check, 'l2_auth_no_check': l2_auth_no_check, 'metric_style_l1': metric_style_l1, 'metric_style_l2': metric_style_l2, 'graceful_restart_helper': graceful_restart_helper, 'pspf_optimization': pspf_optimization, 'spf_max_wait_l1': spf_max_wait_l1, 'spf_max_wait_l2': spf_max_wait_l2, 'spf_init_wait_l1': spf_init_wait_l1, 'spf_init_wait_l2': spf_init_wait_l2, 'spf_second_wait_l1': spf_second_wait_l1, 'spf_second_wait_l2': spf_second_wait_l2, 'spf_scheduled_l1': spf_scheduled_l1, 'spf_scheduled_l2': spf_scheduled_l2, 'pspf_max_wait': pspf_max_wait, 'pspf_init_wait': pspf_init_wait, 'pspf_second_wait': pspf_second_wait, 'pspf_scheduled': pspf_scheduled, 'spf6_max_wait_l1': spf6_max_wait_l1, 'spf6_max_wait_l2': spf6_max_wait_l2, 'spf6_init_wait_l1': spf6_init_wait_l1, 'spf6_init_wait_l2': spf6_init_wait_l2, 'spf6_second_wait_l1': spf6_second_wait_l1, 'spf6_second_wait_l2': spf6_second_wait_l2, 'spf6_scheduled_l1': spf6_scheduled_l1, 'spf6_scheduled_l2': spf6_scheduled_l2, 'pspf6_max_wait': pspf6_max_wait, 'pspf6_init_wait': pspf6_init_wait, 'pspf6_second_wait': pspf6_second_wait, 'pspf6_scheduled': pspf6_scheduled, 'lsp_max_lifetime': lsp_max_lifetime, 'lsp_refresh_interval': lsp_refresh_interval, 'lsp_gen_interval': lsp_gen_interval, 'lsp_retrans_interval': lsp_retrans_interval, 'lsp_interval': lsp_interval, 'snp_csnp_interval': snp_csnp_interval, 'snp_psnp_interval': snp_psnp_interval, 'hello_padding': hello_padding, 'hello_padding_ptp': hello_padding_ptp, 'ptp_handshake': ptp_handshake, 'bgp_ipv4_converged': bgp_ipv4_converged, 'bgp_ipv6_converged': bgp_ipv6_converged, 'isis_te': isis_te, 'isis_shortcuts': isis_shortcuts, 'isis_reverse_metric': isis_reverse_metric, 'isis_reverse_metric_wbit': isis_reverse_metric_wbit, 'isis_reverse_metric_sbit': isis_reverse_metric_sbit, 'bfd_enabled': bfd_enabled, 'bfd_hold_interval': bfd_hold_interval, 'nsr_enabled': nsr_enabled, 'nsr_state': nsr_state, 'nsr_sync_state': nsr_sync_state, 'isis_is_mp': isis_is_mp, 'ldp_sync': ldp_sync, 'ldp_sync_holddown_time': ldp_sync_holddown_time, }


