
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import lsp_tlv_entry
class lsp_entry(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /isis-state/database/lsp-entry. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: ISIS LSP MO
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__lsp_level','__lsp_id','__lsp_seq_no','__lsp_checksum','__lsp_holdtime','__lsp_att','__lsp_p','__lsp_ol','__lsp_tlv_entry',)

  _yang_name = 'lsp-entry'
  _rest_name = 'lsp-entry'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__lsp_tlv_entry = YANGDynClass(base=YANGListType("type",lsp_tlv_entry.lsp_tlv_entry, yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__lsp_ol = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-ol", rest_name="lsp-ol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level", rest_name="lsp-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_checksum = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-checksum", rest_name="lsp-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    self.__lsp_p = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-p", rest_name="lsp-p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_att = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-att", rest_name="lsp-att", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_holdtime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-holdtime", rest_name="lsp-holdtime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__lsp_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    self.__lsp_seq_no = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-seq-no", rest_name="lsp-seq-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isis-state', u'database', u'lsp-entry']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isis-state', u'database', u'lsp-entry']

  def _get_lsp_level(self):
    """
    Getter method for lsp_level, mapped from YANG variable /isis_state/database/lsp_entry/lsp_level (uint32)

    YANG Description: IS-Level
    """
    return self.__lsp_level
      
  def _set_lsp_level(self, v, load=False):
    """
    Setter method for lsp_level, mapped from YANG variable /isis_state/database/lsp_entry/lsp_level (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_level is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_level() directly.

    YANG Description: IS-Level
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level", rest_name="lsp-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_level must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level", rest_name="lsp-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_level = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_level(self):
    self.__lsp_level = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-level", rest_name="lsp-level", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_id(self):
    """
    Getter method for lsp_id, mapped from YANG variable /isis_state/database/lsp_entry/lsp_id (string)

    YANG Description: LSP ID
    """
    return self.__lsp_id
      
  def _set_lsp_id(self, v, load=False):
    """
    Setter method for lsp_id, mapped from YANG variable /isis_state/database/lsp_entry/lsp_id (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_id() directly.

    YANG Description: LSP ID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_id must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)""",
        })

    self.__lsp_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_id(self):
    self.__lsp_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='string', is_config=False)


  def _get_lsp_seq_no(self):
    """
    Getter method for lsp_seq_no, mapped from YANG variable /isis_state/database/lsp_entry/lsp_seq_no (uint32)

    YANG Description: Seq No
    """
    return self.__lsp_seq_no
      
  def _set_lsp_seq_no(self, v, load=False):
    """
    Setter method for lsp_seq_no, mapped from YANG variable /isis_state/database/lsp_entry/lsp_seq_no (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_seq_no is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_seq_no() directly.

    YANG Description: Seq No
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-seq-no", rest_name="lsp-seq-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_seq_no must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-seq-no", rest_name="lsp-seq-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_seq_no = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_seq_no(self):
    self.__lsp_seq_no = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-seq-no", rest_name="lsp-seq-no", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_checksum(self):
    """
    Getter method for lsp_checksum, mapped from YANG variable /isis_state/database/lsp_entry/lsp_checksum (uint16)

    YANG Description: Checksum
    """
    return self.__lsp_checksum
      
  def _set_lsp_checksum(self, v, load=False):
    """
    Setter method for lsp_checksum, mapped from YANG variable /isis_state/database/lsp_entry/lsp_checksum (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_checksum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_checksum() directly.

    YANG Description: Checksum
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-checksum", rest_name="lsp-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_checksum must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-checksum", rest_name="lsp-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)""",
        })

    self.__lsp_checksum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_checksum(self):
    self.__lsp_checksum = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="lsp-checksum", rest_name="lsp-checksum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint16', is_config=False)


  def _get_lsp_holdtime(self):
    """
    Getter method for lsp_holdtime, mapped from YANG variable /isis_state/database/lsp_entry/lsp_holdtime (uint32)

    YANG Description: HoldTime
    """
    return self.__lsp_holdtime
      
  def _set_lsp_holdtime(self, v, load=False):
    """
    Setter method for lsp_holdtime, mapped from YANG variable /isis_state/database/lsp_entry/lsp_holdtime (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_holdtime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_holdtime() directly.

    YANG Description: HoldTime
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-holdtime", rest_name="lsp-holdtime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_holdtime must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-holdtime", rest_name="lsp-holdtime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_holdtime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_holdtime(self):
    self.__lsp_holdtime = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-holdtime", rest_name="lsp-holdtime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_att(self):
    """
    Getter method for lsp_att, mapped from YANG variable /isis_state/database/lsp_entry/lsp_att (uint32)

    YANG Description: ATT
    """
    return self.__lsp_att
      
  def _set_lsp_att(self, v, load=False):
    """
    Setter method for lsp_att, mapped from YANG variable /isis_state/database/lsp_entry/lsp_att (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_att is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_att() directly.

    YANG Description: ATT
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-att", rest_name="lsp-att", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_att must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-att", rest_name="lsp-att", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_att = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_att(self):
    self.__lsp_att = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-att", rest_name="lsp-att", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_p(self):
    """
    Getter method for lsp_p, mapped from YANG variable /isis_state/database/lsp_entry/lsp_p (uint32)

    YANG Description: LSP Flag P
    """
    return self.__lsp_p
      
  def _set_lsp_p(self, v, load=False):
    """
    Setter method for lsp_p, mapped from YANG variable /isis_state/database/lsp_entry/lsp_p (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_p is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_p() directly.

    YANG Description: LSP Flag P
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-p", rest_name="lsp-p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_p must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-p", rest_name="lsp-p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_p = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_p(self):
    self.__lsp_p = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-p", rest_name="lsp-p", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_ol(self):
    """
    Getter method for lsp_ol, mapped from YANG variable /isis_state/database/lsp_entry/lsp_ol (uint32)

    YANG Description: LSP OL
    """
    return self.__lsp_ol
      
  def _set_lsp_ol(self, v, load=False):
    """
    Setter method for lsp_ol, mapped from YANG variable /isis_state/database/lsp_entry/lsp_ol (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_ol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_ol() directly.

    YANG Description: LSP OL
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-ol", rest_name="lsp-ol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_ol must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-ol", rest_name="lsp-ol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_ol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_ol(self):
    self.__lsp_ol = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-ol", rest_name="lsp-ol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_lsp_tlv_entry(self):
    """
    Getter method for lsp_tlv_entry, mapped from YANG variable /isis_state/database/lsp_entry/lsp_tlv_entry (list)

    YANG Description: ISIS LSP TLV
    """
    return self.__lsp_tlv_entry
      
  def _set_lsp_tlv_entry(self, v, load=False):
    """
    Setter method for lsp_tlv_entry, mapped from YANG variable /isis_state/database/lsp_entry/lsp_tlv_entry (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_tlv_entry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_tlv_entry() directly.

    YANG Description: ISIS LSP TLV
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("type",lsp_tlv_entry.lsp_tlv_entry, yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_tlv_entry must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("type",lsp_tlv_entry.lsp_tlv_entry, yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__lsp_tlv_entry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_tlv_entry(self):
    self.__lsp_tlv_entry = YANGDynClass(base=YANGListType("type",lsp_tlv_entry.lsp_tlv_entry, yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type', extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}), is_container='list', yang_name="lsp-tlv-entry", rest_name="lsp-tlv-entry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-lsp-tlv', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  lsp_level = __builtin__.property(_get_lsp_level)
  lsp_id = __builtin__.property(_get_lsp_id)
  lsp_seq_no = __builtin__.property(_get_lsp_seq_no)
  lsp_checksum = __builtin__.property(_get_lsp_checksum)
  lsp_holdtime = __builtin__.property(_get_lsp_holdtime)
  lsp_att = __builtin__.property(_get_lsp_att)
  lsp_p = __builtin__.property(_get_lsp_p)
  lsp_ol = __builtin__.property(_get_lsp_ol)
  lsp_tlv_entry = __builtin__.property(_get_lsp_tlv_entry)


  _pyangbind_elements = {'lsp_level': lsp_level, 'lsp_id': lsp_id, 'lsp_seq_no': lsp_seq_no, 'lsp_checksum': lsp_checksum, 'lsp_holdtime': lsp_holdtime, 'lsp_att': lsp_att, 'lsp_p': lsp_p, 'lsp_ol': lsp_ol, 'lsp_tlv_entry': lsp_tlv_entry, }


