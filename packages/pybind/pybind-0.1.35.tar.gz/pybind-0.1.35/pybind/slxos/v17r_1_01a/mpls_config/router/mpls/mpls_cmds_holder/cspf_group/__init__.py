
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import cspf_group_ip
import cspf_group_link
import cspf_group_subnet
import cspf_group_node
import cspf_group_penalty_n
class cspf_group(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /mpls-config/router/mpls/mpls-cmds-holder/cspf-group. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cspf_group_name','__cspf_group_ip','__cspf_group_link','__cspf_group_subnet','__cspf_group_node','__cspf_group_penalty_n',)

  _yang_name = 'cspf-group'
  _rest_name = 'cspf-group'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__cspf_group_node = YANGDynClass(base=YANGListType("cspf_group_node_ip",cspf_group_node.cspf_group_node, yang_name="cspf-group-node", rest_name="node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-node-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}), is_container='list', yang_name="cspf-group-node", rest_name="node", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__cspf_group_penalty_n = YANGDynClass(base=cspf_group_penalty_n.cspf_group_penalty_n, is_container='container', presence=False, yang_name="cspf-group-penalty-n", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__cspf_group_link = YANGDynClass(base=YANGListType("cspf_group_link_from cspf_group_link_to",cspf_group_link.cspf_group_link, yang_name="cspf-group-link", rest_name="link", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-link-from cspf-group-link-to', extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}), is_container='list', yang_name="cspf-group-link", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__cspf_group_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..128']}), is_leaf=True, yang_name="cspf-group-name", rest_name="cspf-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ASCII string;;Name (up to 128 characters)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__cspf_group_subnet = YANGDynClass(base=YANGListType("cspf_group_subnet_ip",cspf_group_subnet.cspf_group_subnet, yang_name="cspf-group-subnet", rest_name="subnet", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-subnet-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}), is_container='list', yang_name="cspf-group-subnet", rest_name="subnet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    self.__cspf_group_ip = YANGDynClass(base=YANGListType("cspf_group_ip_address",cspf_group_ip.cspf_group_ip, yang_name="cspf-group-ip", rest_name="from", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-ip-address', extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}), is_container='list', yang_name="cspf-group-ip", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-config', u'router', u'mpls', u'mpls-cmds-holder', u'cspf-group']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'mpls', u'cspf-group']

  def _get_cspf_group_name(self):
    """
    Getter method for cspf_group_name, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_name (string)
    """
    return self.__cspf_group_name
      
  def _set_cspf_group_name(self, v, load=False):
    """
    Setter method for cspf_group_name, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_name() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..128']}), is_leaf=True, yang_name="cspf-group-name", rest_name="cspf-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ASCII string;;Name (up to 128 characters)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..128']}), is_leaf=True, yang_name="cspf-group-name", rest_name="cspf-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ASCII string;;Name (up to 128 characters)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__cspf_group_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_name(self):
    self.__cspf_group_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..128']}), is_leaf=True, yang_name="cspf-group-name", rest_name="cspf-group-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ASCII string;;Name (up to 128 characters)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_cspf_group_ip(self):
    """
    Getter method for cspf_group_ip, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_ip (list)
    """
    return self.__cspf_group_ip
      
  def _set_cspf_group_ip(self, v, load=False):
    """
    Setter method for cspf_group_ip, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_ip (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("cspf_group_ip_address",cspf_group_ip.cspf_group_ip, yang_name="cspf-group-ip", rest_name="from", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-ip-address', extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}), is_container='list', yang_name="cspf-group-ip", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_ip must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("cspf_group_ip_address",cspf_group_ip.cspf_group_ip, yang_name="cspf-group-ip", rest_name="from", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-ip-address', extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}), is_container='list', yang_name="cspf-group-ip", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__cspf_group_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_ip(self):
    self.__cspf_group_ip = YANGDynClass(base=YANGListType("cspf_group_ip_address",cspf_group_ip.cspf_group_ip, yang_name="cspf-group-ip", rest_name="from", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-ip-address', extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}), is_container='list', yang_name="cspf-group-ip", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from ip address', u'cli-suppress-mode': None, u'callpoint': u'MplsCspfGroupIp', u'alt-name': u'from'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_cspf_group_link(self):
    """
    Getter method for cspf_group_link, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_link (list)
    """
    return self.__cspf_group_link
      
  def _set_cspf_group_link(self, v, load=False):
    """
    Setter method for cspf_group_link, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_link (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_link is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_link() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("cspf_group_link_from cspf_group_link_to",cspf_group_link.cspf_group_link, yang_name="cspf-group-link", rest_name="link", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-link-from cspf-group-link-to', extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}), is_container='list', yang_name="cspf-group-link", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_link must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("cspf_group_link_from cspf_group_link_to",cspf_group_link.cspf_group_link, yang_name="cspf-group-link", rest_name="link", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-link-from cspf-group-link-to', extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}), is_container='list', yang_name="cspf-group-link", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__cspf_group_link = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_link(self):
    self.__cspf_group_link = YANGDynClass(base=YANGListType("cspf_group_link_from cspf_group_link_to",cspf_group_link.cspf_group_link, yang_name="cspf-group-link", rest_name="link", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-link-from cspf-group-link-to', extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}), is_container='list', yang_name="cspf-group-link", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group from and to ip address', u'cli-suppress-mode': None, u'alt-name': u'link', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupLink'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_cspf_group_subnet(self):
    """
    Getter method for cspf_group_subnet, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_subnet (list)
    """
    return self.__cspf_group_subnet
      
  def _set_cspf_group_subnet(self, v, load=False):
    """
    Setter method for cspf_group_subnet, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_subnet (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_subnet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_subnet() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("cspf_group_subnet_ip",cspf_group_subnet.cspf_group_subnet, yang_name="cspf-group-subnet", rest_name="subnet", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-subnet-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}), is_container='list', yang_name="cspf-group-subnet", rest_name="subnet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_subnet must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("cspf_group_subnet_ip",cspf_group_subnet.cspf_group_subnet, yang_name="cspf-group-subnet", rest_name="subnet", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-subnet-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}), is_container='list', yang_name="cspf-group-subnet", rest_name="subnet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__cspf_group_subnet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_subnet(self):
    self.__cspf_group_subnet = YANGDynClass(base=YANGListType("cspf_group_subnet_ip",cspf_group_subnet.cspf_group_subnet, yang_name="cspf-group-subnet", rest_name="subnet", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-subnet-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}), is_container='list', yang_name="cspf-group-subnet", rest_name="subnet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group subnet address', u'cli-suppress-mode': None, u'alt-name': u'subnet', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'callpoint': u'MplsCspfGroupSubnet'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_cspf_group_node(self):
    """
    Getter method for cspf_group_node, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_node (list)
    """
    return self.__cspf_group_node
      
  def _set_cspf_group_node(self, v, load=False):
    """
    Setter method for cspf_group_node, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_node (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_node is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_node() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("cspf_group_node_ip",cspf_group_node.cspf_group_node, yang_name="cspf-group-node", rest_name="node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-node-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}), is_container='list', yang_name="cspf-group-node", rest_name="node", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_node must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("cspf_group_node_ip",cspf_group_node.cspf_group_node, yang_name="cspf-group-node", rest_name="node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-node-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}), is_container='list', yang_name="cspf-group-node", rest_name="node", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)""",
        })

    self.__cspf_group_node = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_node(self):
    self.__cspf_group_node = YANGDynClass(base=YANGListType("cspf_group_node_ip",cspf_group_node.cspf_group_node, yang_name="cspf-group-node", rest_name="node", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='cspf-group-node-ip', extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}), is_container='list', yang_name="cspf-group-node", rest_name="node", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure cspf group node ip address', u'cli-no-key-completion': None, u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'alt-name': u'node', u'callpoint': u'MplsCspfGroupNode'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='list', is_config=True)


  def _get_cspf_group_penalty_n(self):
    """
    Getter method for cspf_group_penalty_n, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_penalty_n (container)
    """
    return self.__cspf_group_penalty_n
      
  def _set_cspf_group_penalty_n(self, v, load=False):
    """
    Setter method for cspf_group_penalty_n, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/cspf_group/cspf_group_penalty_n (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cspf_group_penalty_n is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cspf_group_penalty_n() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=cspf_group_penalty_n.cspf_group_penalty_n, is_container='container', presence=False, yang_name="cspf-group-penalty-n", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cspf_group_penalty_n must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=cspf_group_penalty_n.cspf_group_penalty_n, is_container='container', presence=False, yang_name="cspf-group-penalty-n", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__cspf_group_penalty_n = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cspf_group_penalty_n(self):
    self.__cspf_group_penalty_n = YANGDynClass(base=cspf_group_penalty_n.cspf_group_penalty_n, is_container='container', presence=False, yang_name="cspf-group-penalty-n", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

  cspf_group_name = __builtin__.property(_get_cspf_group_name, _set_cspf_group_name)
  cspf_group_ip = __builtin__.property(_get_cspf_group_ip, _set_cspf_group_ip)
  cspf_group_link = __builtin__.property(_get_cspf_group_link, _set_cspf_group_link)
  cspf_group_subnet = __builtin__.property(_get_cspf_group_subnet, _set_cspf_group_subnet)
  cspf_group_node = __builtin__.property(_get_cspf_group_node, _set_cspf_group_node)
  cspf_group_penalty_n = __builtin__.property(_get_cspf_group_penalty_n, _set_cspf_group_penalty_n)


  _pyangbind_elements = {'cspf_group_name': cspf_group_name, 'cspf_group_ip': cspf_group_ip, 'cspf_group_link': cspf_group_link, 'cspf_group_subnet': cspf_group_subnet, 'cspf_group_node': cspf_group_node, 'cspf_group_penalty_n': cspf_group_penalty_n, }


