
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import priority
import traffic_eng
class mpls_interface_dynamic_bypass_sub_cmds(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /mpls-config/router/mpls/mpls-cmds-holder/mpls-interface/interface-dynamic-bypass/mpls-interface-dynamic-bypass-sub-cmds. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_dynamic_bypass_disable','__interface_dynamic_bypass_max_bypasses','__interface_dynamic_bypass_max_bypasses_per_mp','__interface_dynamic_bypass_reoptimize_timer','__interface_dynamic_bypass_cos','__interface_dynamic_bypass_from','__interface_dynamic_bypass_adaptive','__interface_dynamic_bypass_record_route','__interface_dynamic_bypass_hop_limit','__interface_dynamic_bypass_exclude_any','__interface_dynamic_bypass_include_any','__interface_dynamic_bypass_include_all','__interface_dynamic_bypass_primary_path','__interface_dynamic_bypass_name_prefix','__interface_dynamic_bypass_tie_breaking','__interface_dynamic_bypass_cspf_computation_mode','__priority','__traffic_eng',)

  _yang_name = 'mpls-interface-dynamic-bypass-sub-cmds'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__interface_dynamic_bypass_include_all = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-all", rest_name="include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include all of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-all'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__interface_dynamic_bypass_adaptive = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-adaptive", rest_name="adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level adaptiveness of dynamic bypasses', u'alt-name': u'adaptive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)
    self.__interface_dynamic_bypass_cspf_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'use-igp-metric': {'value': 1}, u'use-te-metric': {'value': 2}},), is_leaf=True, yang_name="interface-dynamic-bypass-cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf cspf computation mode', u'alt-name': u'cspf-computation-mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='cspf-computation-mode', is_config=True)
    self.__interface_dynamic_bypass_max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__interface_dynamic_bypass_primary_path = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="interface-dynamic-bypass-primary-path", rest_name="primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set primary explicit path', u'alt-name': u'primary-path', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__interface_dynamic_bypass_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..255']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(4), is_leaf=True, yang_name="interface-dynamic-bypass-hop-limit", rest_name="hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level hop limit value for dynamic bypasses', u'alt-name': u'hop-limit', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    self.__interface_dynamic_bypass_name_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), default=unicode("dbyp"), is_leaf=True, yang_name="interface-dynamic-bypass-name-prefix", rest_name="name-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass name prefix', u'alt-name': u'name-prefix', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__interface_dynamic_bypass_from = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="interface-dynamic-bypass-from", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level from address for dynamic bypasses', u'alt-name': u'from', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ip-address', is_config=True)
    self.__traffic_eng = YANGDynClass(base=traffic_eng.traffic_eng, is_container='container', presence=False, yang_name="traffic-eng", rest_name="traffic-eng", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dynamic bypass traffic engineering parameters', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__interface_dynamic_bypass_cos = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="interface-dynamic-bypass-cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level cos value for dynamic bypasses', u'alt-name': u'cos', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__priority = YANGDynClass(base=priority.priority, is_container='container', presence=False, yang_name="priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dyanmic bypass setup and holding priority levels', u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__interface_dynamic_bypass_max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__interface_dynamic_bypass_include_any = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-any", rest_name="include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__interface_dynamic_bypass_tie_breaking = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'most-fill': {'value': 2}, u'random': {'value': 0}, u'least-fill': {'value': 1}},), default=unicode("random"), is_leaf=True, yang_name="interface-dynamic-bypass-tie-breaking", rest_name="tie-breaking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf tie breaking mechanism', u'alt-name': u'tie-breaking', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='tie-breaking', is_config=True)
    self.__interface_dynamic_bypass_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    self.__interface_dynamic_bypass_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="interface-dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__interface_dynamic_bypass_record_route = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-record-route", rest_name="record-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level record route for dynamic bypasses', u'alt-name': u'record-route', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)
    self.__interface_dynamic_bypass_exclude_any = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-exclude-any", rest_name="exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exclude any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'exclude-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-config', u'router', u'mpls', u'mpls-cmds-holder', u'mpls-interface', u'interface-dynamic-bypass', u'mpls-interface-dynamic-bypass-sub-cmds']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'mpls', u'mpls-interface', u'dynamic-bypass']

  def _get_interface_dynamic_bypass_disable(self):
    """
    Getter method for interface_dynamic_bypass_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_disable (empty)
    """
    return self.__interface_dynamic_bypass_disable
      
  def _set_interface_dynamic_bypass_disable(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_disable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_disable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_disable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="interface-dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_disable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)""",
        })

    self.__interface_dynamic_bypass_disable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_disable(self):
    self.__interface_dynamic_bypass_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-dynamic-bypass-disable", rest_name="disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enable or disable dynamic bypass', u'alt-name': u'disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)


  def _get_interface_dynamic_bypass_max_bypasses(self):
    """
    Getter method for interface_dynamic_bypass_max_bypasses, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_max_bypasses (uint32)
    """
    return self.__interface_dynamic_bypass_max_bypasses
      
  def _set_interface_dynamic_bypass_max_bypasses(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_max_bypasses, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_max_bypasses (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_max_bypasses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_max_bypasses() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_max_bypasses must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__interface_dynamic_bypass_max_bypasses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_max_bypasses(self):
    self.__interface_dynamic_bypass_max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses', u'alt-name': u'max-bypasses', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_interface_dynamic_bypass_max_bypasses_per_mp(self):
    """
    Getter method for interface_dynamic_bypass_max_bypasses_per_mp, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_max_bypasses_per_mp (uint32)
    """
    return self.__interface_dynamic_bypass_max_bypasses_per_mp
      
  def _set_interface_dynamic_bypass_max_bypasses_per_mp(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_max_bypasses_per_mp, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_max_bypasses_per_mp (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_max_bypasses_per_mp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_max_bypasses_per_mp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_max_bypasses_per_mp must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__interface_dynamic_bypass_max_bypasses_per_mp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_max_bypasses_per_mp(self):
    self.__interface_dynamic_bypass_max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(250), is_leaf=True, yang_name="interface-dynamic-bypass-max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level maximum number of dynamic bypasses per merge point', u'alt-name': u'max-bypasses-per-mp', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_interface_dynamic_bypass_reoptimize_timer(self):
    """
    Getter method for interface_dynamic_bypass_reoptimize_timer, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_reoptimize_timer (uint32)
    """
    return self.__interface_dynamic_bypass_reoptimize_timer
      
  def _set_interface_dynamic_bypass_reoptimize_timer(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_reoptimize_timer, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_reoptimize_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_reoptimize_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_reoptimize_timer() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="interface-dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_reoptimize_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="interface-dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__interface_dynamic_bypass_reoptimize_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_reoptimize_timer(self):
    self.__interface_dynamic_bypass_reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'300..65535']}), is_leaf=True, yang_name="interface-dynamic-bypass-reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level reoptimer timer value for dynamic bypasses', u'alt-name': u'reoptimize-timer', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_interface_dynamic_bypass_cos(self):
    """
    Getter method for interface_dynamic_bypass_cos, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_cos (uint32)
    """
    return self.__interface_dynamic_bypass_cos
      
  def _set_interface_dynamic_bypass_cos(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_cos, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_cos (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_cos() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="interface-dynamic-bypass-cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level cos value for dynamic bypasses', u'alt-name': u'cos', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_cos must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="interface-dynamic-bypass-cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level cos value for dynamic bypasses', u'alt-name': u'cos', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__interface_dynamic_bypass_cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_cos(self):
    self.__interface_dynamic_bypass_cos = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="interface-dynamic-bypass-cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level cos value for dynamic bypasses', u'alt-name': u'cos', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_interface_dynamic_bypass_from(self):
    """
    Getter method for interface_dynamic_bypass_from, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_from (inet:ip-address)
    """
    return self.__interface_dynamic_bypass_from
      
  def _set_interface_dynamic_bypass_from(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_from, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_from (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_from is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_from() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="interface-dynamic-bypass-from", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level from address for dynamic bypasses', u'alt-name': u'from', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_from must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="interface-dynamic-bypass-from", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level from address for dynamic bypasses', u'alt-name': u'from', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__interface_dynamic_bypass_from = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_from(self):
    self.__interface_dynamic_bypass_from = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="interface-dynamic-bypass-from", rest_name="from", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level from address for dynamic bypasses', u'alt-name': u'from', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='inet:ip-address', is_config=True)


  def _get_interface_dynamic_bypass_adaptive(self):
    """
    Getter method for interface_dynamic_bypass_adaptive, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_adaptive (enable-disable)
    """
    return self.__interface_dynamic_bypass_adaptive
      
  def _set_interface_dynamic_bypass_adaptive(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_adaptive, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_adaptive (enable-disable)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_adaptive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_adaptive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-adaptive", rest_name="adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level adaptiveness of dynamic bypasses', u'alt-name': u'adaptive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_adaptive must be of a type compatible with enable-disable""",
          'defined-type': "brocade-mpls:enable-disable",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-adaptive", rest_name="adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level adaptiveness of dynamic bypasses', u'alt-name': u'adaptive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)""",
        })

    self.__interface_dynamic_bypass_adaptive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_adaptive(self):
    self.__interface_dynamic_bypass_adaptive = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-adaptive", rest_name="adaptive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level adaptiveness of dynamic bypasses', u'alt-name': u'adaptive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)


  def _get_interface_dynamic_bypass_record_route(self):
    """
    Getter method for interface_dynamic_bypass_record_route, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_record_route (enable-disable)
    """
    return self.__interface_dynamic_bypass_record_route
      
  def _set_interface_dynamic_bypass_record_route(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_record_route, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_record_route (enable-disable)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_record_route is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_record_route() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-record-route", rest_name="record-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level record route for dynamic bypasses', u'alt-name': u'record-route', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_record_route must be of a type compatible with enable-disable""",
          'defined-type': "brocade-mpls:enable-disable",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-record-route", rest_name="record-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level record route for dynamic bypasses', u'alt-name': u'record-route', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)""",
        })

    self.__interface_dynamic_bypass_record_route = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_record_route(self):
    self.__interface_dynamic_bypass_record_route = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 0}},), is_leaf=True, yang_name="interface-dynamic-bypass-record-route", rest_name="record-route", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level record route for dynamic bypasses', u'alt-name': u'record-route', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='enable-disable', is_config=True)


  def _get_interface_dynamic_bypass_hop_limit(self):
    """
    Getter method for interface_dynamic_bypass_hop_limit, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_hop_limit (uint8)
    """
    return self.__interface_dynamic_bypass_hop_limit
      
  def _set_interface_dynamic_bypass_hop_limit(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_hop_limit, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_hop_limit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_hop_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_hop_limit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..255']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(4), is_leaf=True, yang_name="interface-dynamic-bypass-hop-limit", rest_name="hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level hop limit value for dynamic bypasses', u'alt-name': u'hop-limit', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_hop_limit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..255']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(4), is_leaf=True, yang_name="interface-dynamic-bypass-hop-limit", rest_name="hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level hop limit value for dynamic bypasses', u'alt-name': u'hop-limit', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)""",
        })

    self.__interface_dynamic_bypass_hop_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_hop_limit(self):
    self.__interface_dynamic_bypass_hop_limit = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'0..255']}), default=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8)(4), is_leaf=True, yang_name="interface-dynamic-bypass-hop-limit", rest_name="hop-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level hop limit value for dynamic bypasses', u'alt-name': u'hop-limit', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint8', is_config=True)


  def _get_interface_dynamic_bypass_exclude_any(self):
    """
    Getter method for interface_dynamic_bypass_exclude_any, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_exclude_any (string)
    """
    return self.__interface_dynamic_bypass_exclude_any
      
  def _set_interface_dynamic_bypass_exclude_any(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_exclude_any, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_exclude_any (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_exclude_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_exclude_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-exclude-any", rest_name="exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exclude any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'exclude-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_exclude_any must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-exclude-any", rest_name="exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exclude any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'exclude-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__interface_dynamic_bypass_exclude_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_exclude_any(self):
    self.__interface_dynamic_bypass_exclude_any = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-exclude-any", rest_name="exclude-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exclude any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'exclude-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_interface_dynamic_bypass_include_any(self):
    """
    Getter method for interface_dynamic_bypass_include_any, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_include_any (string)
    """
    return self.__interface_dynamic_bypass_include_any
      
  def _set_interface_dynamic_bypass_include_any(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_include_any, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_include_any (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_include_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_include_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-any", rest_name="include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_include_any must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-any", rest_name="include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__interface_dynamic_bypass_include_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_include_any(self):
    self.__interface_dynamic_bypass_include_any = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-any", rest_name="include-any", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include any of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-any'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_interface_dynamic_bypass_include_all(self):
    """
    Getter method for interface_dynamic_bypass_include_all, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_include_all (string)
    """
    return self.__interface_dynamic_bypass_include_all
      
  def _set_interface_dynamic_bypass_include_all(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_include_all, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_include_all (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_include_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_include_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-all", rest_name="include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include all of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-all'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_include_all must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-all", rest_name="include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include all of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-all'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__interface_dynamic_bypass_include_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_include_all(self):
    self.__interface_dynamic_bypass_include_all = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-dynamic-bypass-include-all", rest_name="include-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Include all of the administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'include-all'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_interface_dynamic_bypass_primary_path(self):
    """
    Getter method for interface_dynamic_bypass_primary_path, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_primary_path (string)
    """
    return self.__interface_dynamic_bypass_primary_path
      
  def _set_interface_dynamic_bypass_primary_path(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_primary_path, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_primary_path (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_primary_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_primary_path() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="interface-dynamic-bypass-primary-path", rest_name="primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set primary explicit path', u'alt-name': u'primary-path', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_primary_path must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="interface-dynamic-bypass-primary-path", rest_name="primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set primary explicit path', u'alt-name': u'primary-path', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__interface_dynamic_bypass_primary_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_primary_path(self):
    self.__interface_dynamic_bypass_primary_path = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="interface-dynamic-bypass-primary-path", rest_name="primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set primary explicit path', u'alt-name': u'primary-path', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_interface_dynamic_bypass_name_prefix(self):
    """
    Getter method for interface_dynamic_bypass_name_prefix, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_name_prefix (string)
    """
    return self.__interface_dynamic_bypass_name_prefix
      
  def _set_interface_dynamic_bypass_name_prefix(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_name_prefix, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_name_prefix (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_name_prefix is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_name_prefix() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), default=unicode("dbyp"), is_leaf=True, yang_name="interface-dynamic-bypass-name-prefix", rest_name="name-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass name prefix', u'alt-name': u'name-prefix', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_name_prefix must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), default=unicode("dbyp"), is_leaf=True, yang_name="interface-dynamic-bypass-name-prefix", rest_name="name-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass name prefix', u'alt-name': u'name-prefix', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__interface_dynamic_bypass_name_prefix = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_name_prefix(self):
    self.__interface_dynamic_bypass_name_prefix = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), default=unicode("dbyp"), is_leaf=True, yang_name="interface-dynamic-bypass-name-prefix", rest_name="name-prefix", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass name prefix', u'alt-name': u'name-prefix', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_interface_dynamic_bypass_tie_breaking(self):
    """
    Getter method for interface_dynamic_bypass_tie_breaking, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_tie_breaking (tie-breaking)
    """
    return self.__interface_dynamic_bypass_tie_breaking
      
  def _set_interface_dynamic_bypass_tie_breaking(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_tie_breaking, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_tie_breaking (tie-breaking)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_tie_breaking is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_tie_breaking() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'most-fill': {'value': 2}, u'random': {'value': 0}, u'least-fill': {'value': 1}},), default=unicode("random"), is_leaf=True, yang_name="interface-dynamic-bypass-tie-breaking", rest_name="tie-breaking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf tie breaking mechanism', u'alt-name': u'tie-breaking', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='tie-breaking', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_tie_breaking must be of a type compatible with tie-breaking""",
          'defined-type': "brocade-mpls:tie-breaking",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'most-fill': {'value': 2}, u'random': {'value': 0}, u'least-fill': {'value': 1}},), default=unicode("random"), is_leaf=True, yang_name="interface-dynamic-bypass-tie-breaking", rest_name="tie-breaking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf tie breaking mechanism', u'alt-name': u'tie-breaking', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='tie-breaking', is_config=True)""",
        })

    self.__interface_dynamic_bypass_tie_breaking = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_tie_breaking(self):
    self.__interface_dynamic_bypass_tie_breaking = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'most-fill': {'value': 2}, u'random': {'value': 0}, u'least-fill': {'value': 1}},), default=unicode("random"), is_leaf=True, yang_name="interface-dynamic-bypass-tie-breaking", rest_name="tie-breaking", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf tie breaking mechanism', u'alt-name': u'tie-breaking', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='tie-breaking', is_config=True)


  def _get_interface_dynamic_bypass_cspf_computation_mode(self):
    """
    Getter method for interface_dynamic_bypass_cspf_computation_mode, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_cspf_computation_mode (cspf-computation-mode)
    """
    return self.__interface_dynamic_bypass_cspf_computation_mode
      
  def _set_interface_dynamic_bypass_cspf_computation_mode(self, v, load=False):
    """
    Setter method for interface_dynamic_bypass_cspf_computation_mode, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/interface_dynamic_bypass_cspf_computation_mode (cspf-computation-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_dynamic_bypass_cspf_computation_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_dynamic_bypass_cspf_computation_mode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'use-igp-metric': {'value': 1}, u'use-te-metric': {'value': 2}},), is_leaf=True, yang_name="interface-dynamic-bypass-cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf cspf computation mode', u'alt-name': u'cspf-computation-mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='cspf-computation-mode', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_dynamic_bypass_cspf_computation_mode must be of a type compatible with cspf-computation-mode""",
          'defined-type': "brocade-mpls:cspf-computation-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'use-igp-metric': {'value': 1}, u'use-te-metric': {'value': 2}},), is_leaf=True, yang_name="interface-dynamic-bypass-cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf cspf computation mode', u'alt-name': u'cspf-computation-mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='cspf-computation-mode', is_config=True)""",
        })

    self.__interface_dynamic_bypass_cspf_computation_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_dynamic_bypass_cspf_computation_mode(self):
    self.__interface_dynamic_bypass_cspf_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'use-igp-metric': {'value': 1}, u'use-te-metric': {'value': 2}},), is_leaf=True, yang_name="interface-dynamic-bypass-cspf-computation-mode", rest_name="cspf-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'interface level dynamic bypass cspf cspf computation mode', u'alt-name': u'cspf-computation-mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='cspf-computation-mode', is_config=True)


  def _get_priority(self):
    """
    Getter method for priority, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/priority (container)
    """
    return self.__priority
      
  def _set_priority(self, v, load=False):
    """
    Setter method for priority, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/priority (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_priority() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=priority.priority, is_container='container', presence=False, yang_name="priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dyanmic bypass setup and holding priority levels', u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """priority must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=priority.priority, is_container='container', presence=False, yang_name="priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dyanmic bypass setup and holding priority levels', u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_priority(self):
    self.__priority = YANGDynClass(base=priority.priority, is_container='container', presence=False, yang_name="priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dyanmic bypass setup and holding priority levels', u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_traffic_eng(self):
    """
    Getter method for traffic_eng, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/traffic_eng (container)
    """
    return self.__traffic_eng
      
  def _set_traffic_eng(self, v, load=False):
    """
    Setter method for traffic_eng, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/interface_dynamic_bypass/mpls_interface_dynamic_bypass_sub_cmds/traffic_eng (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_traffic_eng is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_traffic_eng() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=traffic_eng.traffic_eng, is_container='container', presence=False, yang_name="traffic-eng", rest_name="traffic-eng", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dynamic bypass traffic engineering parameters', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """traffic_eng must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=traffic_eng.traffic_eng, is_container='container', presence=False, yang_name="traffic-eng", rest_name="traffic-eng", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dynamic bypass traffic engineering parameters', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__traffic_eng = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_traffic_eng(self):
    self.__traffic_eng = YANGDynClass(base=traffic_eng.traffic_eng, is_container='container', presence=False, yang_name="traffic-eng", rest_name="traffic-eng", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'interface level dynamic bypass traffic engineering parameters', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

  interface_dynamic_bypass_disable = __builtin__.property(_get_interface_dynamic_bypass_disable, _set_interface_dynamic_bypass_disable)
  interface_dynamic_bypass_max_bypasses = __builtin__.property(_get_interface_dynamic_bypass_max_bypasses, _set_interface_dynamic_bypass_max_bypasses)
  interface_dynamic_bypass_max_bypasses_per_mp = __builtin__.property(_get_interface_dynamic_bypass_max_bypasses_per_mp, _set_interface_dynamic_bypass_max_bypasses_per_mp)
  interface_dynamic_bypass_reoptimize_timer = __builtin__.property(_get_interface_dynamic_bypass_reoptimize_timer, _set_interface_dynamic_bypass_reoptimize_timer)
  interface_dynamic_bypass_cos = __builtin__.property(_get_interface_dynamic_bypass_cos, _set_interface_dynamic_bypass_cos)
  interface_dynamic_bypass_from = __builtin__.property(_get_interface_dynamic_bypass_from, _set_interface_dynamic_bypass_from)
  interface_dynamic_bypass_adaptive = __builtin__.property(_get_interface_dynamic_bypass_adaptive, _set_interface_dynamic_bypass_adaptive)
  interface_dynamic_bypass_record_route = __builtin__.property(_get_interface_dynamic_bypass_record_route, _set_interface_dynamic_bypass_record_route)
  interface_dynamic_bypass_hop_limit = __builtin__.property(_get_interface_dynamic_bypass_hop_limit, _set_interface_dynamic_bypass_hop_limit)
  interface_dynamic_bypass_exclude_any = __builtin__.property(_get_interface_dynamic_bypass_exclude_any, _set_interface_dynamic_bypass_exclude_any)
  interface_dynamic_bypass_include_any = __builtin__.property(_get_interface_dynamic_bypass_include_any, _set_interface_dynamic_bypass_include_any)
  interface_dynamic_bypass_include_all = __builtin__.property(_get_interface_dynamic_bypass_include_all, _set_interface_dynamic_bypass_include_all)
  interface_dynamic_bypass_primary_path = __builtin__.property(_get_interface_dynamic_bypass_primary_path, _set_interface_dynamic_bypass_primary_path)
  interface_dynamic_bypass_name_prefix = __builtin__.property(_get_interface_dynamic_bypass_name_prefix, _set_interface_dynamic_bypass_name_prefix)
  interface_dynamic_bypass_tie_breaking = __builtin__.property(_get_interface_dynamic_bypass_tie_breaking, _set_interface_dynamic_bypass_tie_breaking)
  interface_dynamic_bypass_cspf_computation_mode = __builtin__.property(_get_interface_dynamic_bypass_cspf_computation_mode, _set_interface_dynamic_bypass_cspf_computation_mode)
  priority = __builtin__.property(_get_priority, _set_priority)
  traffic_eng = __builtin__.property(_get_traffic_eng, _set_traffic_eng)


  _pyangbind_elements = {'interface_dynamic_bypass_disable': interface_dynamic_bypass_disable, 'interface_dynamic_bypass_max_bypasses': interface_dynamic_bypass_max_bypasses, 'interface_dynamic_bypass_max_bypasses_per_mp': interface_dynamic_bypass_max_bypasses_per_mp, 'interface_dynamic_bypass_reoptimize_timer': interface_dynamic_bypass_reoptimize_timer, 'interface_dynamic_bypass_cos': interface_dynamic_bypass_cos, 'interface_dynamic_bypass_from': interface_dynamic_bypass_from, 'interface_dynamic_bypass_adaptive': interface_dynamic_bypass_adaptive, 'interface_dynamic_bypass_record_route': interface_dynamic_bypass_record_route, 'interface_dynamic_bypass_hop_limit': interface_dynamic_bypass_hop_limit, 'interface_dynamic_bypass_exclude_any': interface_dynamic_bypass_exclude_any, 'interface_dynamic_bypass_include_any': interface_dynamic_bypass_include_any, 'interface_dynamic_bypass_include_all': interface_dynamic_bypass_include_all, 'interface_dynamic_bypass_primary_path': interface_dynamic_bypass_primary_path, 'interface_dynamic_bypass_name_prefix': interface_dynamic_bypass_name_prefix, 'interface_dynamic_bypass_tie_breaking': interface_dynamic_bypass_tie_breaking, 'interface_dynamic_bypass_cspf_computation_mode': interface_dynamic_bypass_cspf_computation_mode, 'priority': priority, 'traffic_eng': traffic_eng, }


