
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import rsvp_reservable_bandwidth
import rsvp_authentication
import interface_rsvp_hello
import rsvp_intf_flooding_threshold
import interface_refresh_reduction
import interface_reliable_messaging
class rsvp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls - based on the path /mpls-config/router/mpls/mpls-cmds-holder/mpls-interface/rsvp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__rsvp_reservable_bandwidth','__rsvp_authentication','__interface_rsvp_hello','__rsvp_hello_disable','__rsvp_te_metric','__rsvp_intf_flooding_threshold','__interface_rsvp_admin_group','__interface_refresh_reduction','__interface_reliable_messaging',)

  _yang_name = 'rsvp'
  _rest_name = 'rsvp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__interface_refresh_reduction = YANGDynClass(base=interface_refresh_reduction.interface_refresh_reduction, is_container='container', presence=False, yang_name="interface-refresh-reduction", rest_name="refresh-reduction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Refresh reduction on this interface', u'alt-name': u'refresh-reduction'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__rsvp_hello_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-hello-disable", rest_name="hello-disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Hello on the interface', u'alt-name': u'hello-disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    self.__interface_rsvp_admin_group = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-rsvp-admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'admin-group'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    self.__rsvp_reservable_bandwidth = YANGDynClass(base=rsvp_reservable_bandwidth.rsvp_reservable_bandwidth, is_container='container', presence=False, yang_name="rsvp-reservable-bandwidth", rest_name="reservable-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum reservable bandwidth for MPLS interface', u'alt-name': u'reservable-bandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__interface_reliable_messaging = YANGDynClass(base=interface_reliable_messaging.interface_reliable_messaging, is_container='container', presence=True, yang_name="interface-reliable-messaging", rest_name="reliable-messaging", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Reliable messaging on this interface', u'alt-name': u'reliable-messaging'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__rsvp_intf_flooding_threshold = YANGDynClass(base=rsvp_intf_flooding_threshold.rsvp_intf_flooding_threshold, is_container='container', presence=False, yang_name="rsvp-intf-flooding-threshold", rest_name="rsvp-intf-flooding-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSVP triggered TE-LSA flooding reduction', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__interface_rsvp_hello = YANGDynClass(base=interface_rsvp_hello.interface_rsvp_hello, is_container='container', presence=True, yang_name="interface-rsvp-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP Hello on the interface', u'cli-compact-syntax': None, u'alt-name': u'hello'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    self.__rsvp_te_metric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="rsvp-te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set te-metric for this interface', u'alt-name': u'te-metric', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    self.__rsvp_authentication = YANGDynClass(base=rsvp_authentication.rsvp_authentication, is_container='container', presence=False, yang_name="rsvp-authentication", rest_name="authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP authentication on this interface', u'alt-name': u'authentication', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-config', u'router', u'mpls', u'mpls-cmds-holder', u'mpls-interface', u'rsvp']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'mpls', u'mpls-interface', u'rsvp']

  def _get_rsvp_reservable_bandwidth(self):
    """
    Getter method for rsvp_reservable_bandwidth, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_reservable_bandwidth (container)
    """
    return self.__rsvp_reservable_bandwidth
      
  def _set_rsvp_reservable_bandwidth(self, v, load=False):
    """
    Setter method for rsvp_reservable_bandwidth, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_reservable_bandwidth (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_reservable_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_reservable_bandwidth() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rsvp_reservable_bandwidth.rsvp_reservable_bandwidth, is_container='container', presence=False, yang_name="rsvp-reservable-bandwidth", rest_name="reservable-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum reservable bandwidth for MPLS interface', u'alt-name': u'reservable-bandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_reservable_bandwidth must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rsvp_reservable_bandwidth.rsvp_reservable_bandwidth, is_container='container', presence=False, yang_name="rsvp-reservable-bandwidth", rest_name="reservable-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum reservable bandwidth for MPLS interface', u'alt-name': u'reservable-bandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__rsvp_reservable_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_reservable_bandwidth(self):
    self.__rsvp_reservable_bandwidth = YANGDynClass(base=rsvp_reservable_bandwidth.rsvp_reservable_bandwidth, is_container='container', presence=False, yang_name="rsvp-reservable-bandwidth", rest_name="reservable-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Maximum reservable bandwidth for MPLS interface', u'alt-name': u'reservable-bandwidth'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_rsvp_authentication(self):
    """
    Getter method for rsvp_authentication, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_authentication (container)
    """
    return self.__rsvp_authentication
      
  def _set_rsvp_authentication(self, v, load=False):
    """
    Setter method for rsvp_authentication, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_authentication (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_authentication is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_authentication() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rsvp_authentication.rsvp_authentication, is_container='container', presence=False, yang_name="rsvp-authentication", rest_name="authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP authentication on this interface', u'alt-name': u'authentication', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_authentication must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rsvp_authentication.rsvp_authentication, is_container='container', presence=False, yang_name="rsvp-authentication", rest_name="authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP authentication on this interface', u'alt-name': u'authentication', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__rsvp_authentication = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_authentication(self):
    self.__rsvp_authentication = YANGDynClass(base=rsvp_authentication.rsvp_authentication, is_container='container', presence=False, yang_name="rsvp-authentication", rest_name="authentication", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP authentication on this interface', u'alt-name': u'authentication', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_interface_rsvp_hello(self):
    """
    Getter method for interface_rsvp_hello, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_rsvp_hello (container)
    """
    return self.__interface_rsvp_hello
      
  def _set_interface_rsvp_hello(self, v, load=False):
    """
    Setter method for interface_rsvp_hello, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_rsvp_hello (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_rsvp_hello is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_rsvp_hello() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_rsvp_hello.interface_rsvp_hello, is_container='container', presence=True, yang_name="interface-rsvp-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP Hello on the interface', u'cli-compact-syntax': None, u'alt-name': u'hello'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_rsvp_hello must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_rsvp_hello.interface_rsvp_hello, is_container='container', presence=True, yang_name="interface-rsvp-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP Hello on the interface', u'cli-compact-syntax': None, u'alt-name': u'hello'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__interface_rsvp_hello = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_rsvp_hello(self):
    self.__interface_rsvp_hello = YANGDynClass(base=interface_rsvp_hello.interface_rsvp_hello, is_container='container', presence=True, yang_name="interface-rsvp-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable RSVP Hello on the interface', u'cli-compact-syntax': None, u'alt-name': u'hello'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_rsvp_hello_disable(self):
    """
    Getter method for rsvp_hello_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_hello_disable (empty)
    """
    return self.__rsvp_hello_disable
      
  def _set_rsvp_hello_disable(self, v, load=False):
    """
    Setter method for rsvp_hello_disable, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_hello_disable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_hello_disable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_hello_disable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="rsvp-hello-disable", rest_name="hello-disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Hello on the interface', u'alt-name': u'hello-disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_hello_disable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-hello-disable", rest_name="hello-disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Hello on the interface', u'alt-name': u'hello-disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)""",
        })

    self.__rsvp_hello_disable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_hello_disable(self):
    self.__rsvp_hello_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="rsvp-hello-disable", rest_name="hello-disable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Disable RSVP Hello on the interface', u'alt-name': u'hello-disable'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='empty', is_config=True)


  def _get_rsvp_te_metric(self):
    """
    Getter method for rsvp_te_metric, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_te_metric (uint32)
    """
    return self.__rsvp_te_metric
      
  def _set_rsvp_te_metric(self, v, load=False):
    """
    Setter method for rsvp_te_metric, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_te_metric (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_te_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_te_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="rsvp-te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set te-metric for this interface', u'alt-name': u'te-metric', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_te_metric must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="rsvp-te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set te-metric for this interface', u'alt-name': u'te-metric', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)""",
        })

    self.__rsvp_te_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_te_metric(self):
    self.__rsvp_te_metric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="rsvp-te-metric", rest_name="te-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set te-metric for this interface', u'alt-name': u'te-metric', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='uint32', is_config=True)


  def _get_rsvp_intf_flooding_threshold(self):
    """
    Getter method for rsvp_intf_flooding_threshold, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_intf_flooding_threshold (container)
    """
    return self.__rsvp_intf_flooding_threshold
      
  def _set_rsvp_intf_flooding_threshold(self, v, load=False):
    """
    Setter method for rsvp_intf_flooding_threshold, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/rsvp_intf_flooding_threshold (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_intf_flooding_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_intf_flooding_threshold() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rsvp_intf_flooding_threshold.rsvp_intf_flooding_threshold, is_container='container', presence=False, yang_name="rsvp-intf-flooding-threshold", rest_name="rsvp-intf-flooding-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSVP triggered TE-LSA flooding reduction', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_intf_flooding_threshold must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rsvp_intf_flooding_threshold.rsvp_intf_flooding_threshold, is_container='container', presence=False, yang_name="rsvp-intf-flooding-threshold", rest_name="rsvp-intf-flooding-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSVP triggered TE-LSA flooding reduction', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__rsvp_intf_flooding_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_intf_flooding_threshold(self):
    self.__rsvp_intf_flooding_threshold = YANGDynClass(base=rsvp_intf_flooding_threshold.rsvp_intf_flooding_threshold, is_container='container', presence=False, yang_name="rsvp-intf-flooding-threshold", rest_name="rsvp-intf-flooding-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSVP triggered TE-LSA flooding reduction', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_interface_rsvp_admin_group(self):
    """
    Getter method for interface_rsvp_admin_group, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_rsvp_admin_group (string)
    """
    return self.__interface_rsvp_admin_group
      
  def _set_interface_rsvp_admin_group(self, v, load=False):
    """
    Setter method for interface_rsvp_admin_group, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_rsvp_admin_group (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_rsvp_admin_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_rsvp_admin_group() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-rsvp-admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'admin-group'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_rsvp_admin_group must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-rsvp-admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'admin-group'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)""",
        })

    self.__interface_rsvp_admin_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_rsvp_admin_group(self):
    self.__interface_rsvp_admin_group = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..256']})), is_leaf=False, yang_name="interface-rsvp-admin-group", rest_name="admin-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Administrative groups', u'cli-full-no': None, u'cli-suppress-list-no': None, u'cli-full-command': None, u'cli-flat-list-syntax': None, u'alt-name': u'admin-group'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='string', is_config=True)


  def _get_interface_refresh_reduction(self):
    """
    Getter method for interface_refresh_reduction, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_refresh_reduction (container)
    """
    return self.__interface_refresh_reduction
      
  def _set_interface_refresh_reduction(self, v, load=False):
    """
    Setter method for interface_refresh_reduction, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_refresh_reduction (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_refresh_reduction is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_refresh_reduction() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_refresh_reduction.interface_refresh_reduction, is_container='container', presence=False, yang_name="interface-refresh-reduction", rest_name="refresh-reduction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Refresh reduction on this interface', u'alt-name': u'refresh-reduction'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_refresh_reduction must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_refresh_reduction.interface_refresh_reduction, is_container='container', presence=False, yang_name="interface-refresh-reduction", rest_name="refresh-reduction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Refresh reduction on this interface', u'alt-name': u'refresh-reduction'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__interface_refresh_reduction = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_refresh_reduction(self):
    self.__interface_refresh_reduction = YANGDynClass(base=interface_refresh_reduction.interface_refresh_reduction, is_container='container', presence=False, yang_name="interface-refresh-reduction", rest_name="refresh-reduction", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Refresh reduction on this interface', u'alt-name': u'refresh-reduction'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)


  def _get_interface_reliable_messaging(self):
    """
    Getter method for interface_reliable_messaging, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging (container)
    """
    return self.__interface_reliable_messaging
      
  def _set_interface_reliable_messaging(self, v, load=False):
    """
    Setter method for interface_reliable_messaging, mapped from YANG variable /mpls_config/router/mpls/mpls_cmds_holder/mpls_interface/rsvp/interface_reliable_messaging (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_reliable_messaging is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_reliable_messaging() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_reliable_messaging.interface_reliable_messaging, is_container='container', presence=True, yang_name="interface-reliable-messaging", rest_name="reliable-messaging", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Reliable messaging on this interface', u'alt-name': u'reliable-messaging'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_reliable_messaging must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_reliable_messaging.interface_reliable_messaging, is_container='container', presence=True, yang_name="interface-reliable-messaging", rest_name="reliable-messaging", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Reliable messaging on this interface', u'alt-name': u'reliable-messaging'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)""",
        })

    self.__interface_reliable_messaging = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_reliable_messaging(self):
    self.__interface_reliable_messaging = YANGDynClass(base=interface_reliable_messaging.interface_reliable_messaging, is_container='container', presence=True, yang_name="interface-reliable-messaging", rest_name="reliable-messaging", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure RSVP Reliable messaging on this interface', u'alt-name': u'reliable-messaging'}}, namespace='urn:brocade.com:mgmt:brocade-mpls', defining_module='brocade-mpls', yang_type='container', is_config=True)

  rsvp_reservable_bandwidth = __builtin__.property(_get_rsvp_reservable_bandwidth, _set_rsvp_reservable_bandwidth)
  rsvp_authentication = __builtin__.property(_get_rsvp_authentication, _set_rsvp_authentication)
  interface_rsvp_hello = __builtin__.property(_get_interface_rsvp_hello, _set_interface_rsvp_hello)
  rsvp_hello_disable = __builtin__.property(_get_rsvp_hello_disable, _set_rsvp_hello_disable)
  rsvp_te_metric = __builtin__.property(_get_rsvp_te_metric, _set_rsvp_te_metric)
  rsvp_intf_flooding_threshold = __builtin__.property(_get_rsvp_intf_flooding_threshold, _set_rsvp_intf_flooding_threshold)
  interface_rsvp_admin_group = __builtin__.property(_get_interface_rsvp_admin_group, _set_interface_rsvp_admin_group)
  interface_refresh_reduction = __builtin__.property(_get_interface_refresh_reduction, _set_interface_refresh_reduction)
  interface_reliable_messaging = __builtin__.property(_get_interface_reliable_messaging, _set_interface_reliable_messaging)


  _pyangbind_elements = {'rsvp_reservable_bandwidth': rsvp_reservable_bandwidth, 'rsvp_authentication': rsvp_authentication, 'interface_rsvp_hello': interface_rsvp_hello, 'rsvp_hello_disable': rsvp_hello_disable, 'rsvp_te_metric': rsvp_te_metric, 'rsvp_intf_flooding_threshold': rsvp_intf_flooding_threshold, 'interface_rsvp_admin_group': interface_rsvp_admin_group, 'interface_refresh_reduction': interface_refresh_reduction, 'interface_reliable_messaging': interface_reliable_messaging, }


