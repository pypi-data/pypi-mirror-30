
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import replicator
class tunnel(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-tunnels - based on the path /tunnel-settings/system/tunnel. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__suppress_debounce','__replicator',)

  _yang_name = 'tunnel'
  _rest_name = 'tunnel'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__suppress_debounce = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="suppress-debounce", rest_name="suppress-debounce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'suppress debouncing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='empty', is_config=True)
    self.__replicator = YANGDynClass(base=replicator.replicator, is_container='container', presence=False, yang_name="replicator", rest_name="replicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NSX replicator tunnel related settings', u'hidden': u'debug', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'tunnel-settings', u'system', u'tunnel']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'system', u'tunnel']

  def _get_suppress_debounce(self):
    """
    Getter method for suppress_debounce, mapped from YANG variable /tunnel_settings/system/tunnel/suppress_debounce (empty)

    YANG Description: Enable suppressing of debounce timer for a tunnel.
Tunnel becomes down at the same time as underlay
is down without a delay.
    """
    return self.__suppress_debounce
      
  def _set_suppress_debounce(self, v, load=False):
    """
    Setter method for suppress_debounce, mapped from YANG variable /tunnel_settings/system/tunnel/suppress_debounce (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_suppress_debounce is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_suppress_debounce() directly.

    YANG Description: Enable suppressing of debounce timer for a tunnel.
Tunnel becomes down at the same time as underlay
is down without a delay.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="suppress-debounce", rest_name="suppress-debounce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'suppress debouncing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """suppress_debounce must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="suppress-debounce", rest_name="suppress-debounce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'suppress debouncing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='empty', is_config=True)""",
        })

    self.__suppress_debounce = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_suppress_debounce(self):
    self.__suppress_debounce = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="suppress-debounce", rest_name="suppress-debounce", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'suppress debouncing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='empty', is_config=True)


  def _get_replicator(self):
    """
    Getter method for replicator, mapped from YANG variable /tunnel_settings/system/tunnel/replicator (container)
    """
    return self.__replicator
      
  def _set_replicator(self, v, load=False):
    """
    Setter method for replicator, mapped from YANG variable /tunnel_settings/system/tunnel/replicator (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_replicator is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_replicator() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=replicator.replicator, is_container='container', presence=False, yang_name="replicator", rest_name="replicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NSX replicator tunnel related settings', u'hidden': u'debug', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """replicator must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=replicator.replicator, is_container='container', presence=False, yang_name="replicator", rest_name="replicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NSX replicator tunnel related settings', u'hidden': u'debug', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='container', is_config=True)""",
        })

    self.__replicator = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_replicator(self):
    self.__replicator = YANGDynClass(base=replicator.replicator, is_container='container', presence=False, yang_name="replicator", rest_name="replicator", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'NSX replicator tunnel related settings', u'hidden': u'debug', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-tunnels', defining_module='brocade-tunnels', yang_type='container', is_config=True)

  suppress_debounce = __builtin__.property(_get_suppress_debounce, _set_suppress_debounce)
  replicator = __builtin__.property(_get_replicator, _set_replicator)


  _pyangbind_elements = {'suppress_debounce': suppress_debounce, 'replicator': replicator, }


