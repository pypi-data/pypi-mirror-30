
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class ext_seq(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-vxlan-visibility - based on the path /overlay/access-list/type/vxlan/extended/ext-seq. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ext_seq_num','__ext_permit_deny','__ext_dst_vtep_ip','__ext_dst_vtep_ip_any','__ext_src_vtep_ip','__ext_src_vtep_ip_any','__ext_vni','__ext_vni_any','__ext_vni_mask','__ext_count','__ext_mirror','__ext_redirect','__ext_sflow','__native','__tag','__dst_ip_host','__dst_ip','__dst_ip_any','__src_ip_host','__src_ip','__src_ip_any','__dst_port','__dst_port_any','__src_port','__src_port_any',)

  _yang_name = 'ext-seq'
  _rest_name = 'seq'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ext_vni_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0|[1-9a-fA-F][0-9a-fA-F]{0,5}'}), is_leaf=True, yang_name="ext-vni-mask", rest_name="vni-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni mask:Hexadecimal 0..FFFFFF', u'display-when': u'not(../ext-vni-any)', u'cli-incomplete-no': None, u'alt-name': u'vni-mask'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='string', is_config=True)
    self.__ext_count = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'count', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'cli-break-sequence-commands': None, u'alt-name': u'count'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__ext_src_vtep_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-src-vtep-ip", rest_name="src-vtep-ip-host", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: A.B.C.D', u'alt-name': u'src-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    self.__ext_seq_num = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="ext-seq-num", rest_name="ext-seq-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    self.__src_port_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="src-port-any", rest_name="src-port-any", parent=self, choice=(u'choice-src-port', u'case-src-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src-port-any', u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__src_ip_host = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip-host", rest_name="src-ip-host", parent=self, choice=(u'choice-src-ip', u'case-src-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip host: A.B.C.D', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'single': {'value': 2}, u'any': {'value': 3}},), is_leaf=True, yang_name="tag", rest_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../native)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)
    self.__ext_sflow = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'sflow', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'sflow'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__native = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="native", rest_name="native", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-optional-in-sequence': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__src_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'choice-src-ip', u'case-src-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip: A.B.C.D/mask', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)
    self.__src_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="src-port", rest_name="src-port", parent=self, choice=(u'choice-src-port', u'case-src-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    self.__ext_src_vtep_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-src-vtep-ip-any", rest_name="src-vtep-ip-any", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: any', u'alt-name': u'src-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__src_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="src-ip-any", rest_name="src-ip-any", parent=self, choice=(u'choice-src-ip', u'case-src-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip address: any', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__ext_dst_vtep_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-dst-vtep-ip-any", rest_name="dst-vtep-ip-any", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: any', u'alt-name': u'dst-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__ext_vni_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-vni-any", rest_name="vni-any", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni any', u'alt-name': u'vni-any', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__dst_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dst-ip-any", rest_name="dst-ip-any", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip address: any', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__ext_redirect = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-redirect", rest_name="redirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'redirect <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'redirect'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)
    self.__dst_ip_host = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-ip-host", rest_name="dst-ip-host", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip host: A.B.C.D', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    self.__ext_permit_deny = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="ext-permit-deny", rest_name="ext-permit-deny", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)
    self.__dst_port_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dst-port-any", rest_name="dst-port-any", parent=self, choice=(u'choice-dst-port', u'case-dst-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst-port-any', u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    self.__ext_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 16777215']}), is_leaf=True, yang_name="ext-vni", rest_name="vni", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni number: 1..16777215', u'alt-name': u'vni', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    self.__ext_mirror = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mirror <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'mirror'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)
    self.__ext_dst_vtep_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-dst-vtep-ip", rest_name="dst-vtep-ip-host", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: A.B.C.D', u'alt-name': u'dst-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    self.__dst_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dst-port", rest_name="dst-port", parent=self, choice=(u'choice-dst-port', u'case-dst-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    self.__dst_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="dst-ip", rest_name="dst-ip", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip: A.B.C.D/mask', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'overlay', u'access-list', u'type', u'vxlan', u'extended', u'ext-seq']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'overlay', u'access-list', u'type', u'vxlan', u'extended', u'seq']

  def _get_ext_seq_num(self):
    """
    Getter method for ext_seq_num, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_seq_num (uint32)
    """
    return self.__ext_seq_num
      
  def _set_ext_seq_num(self, v, load=False):
    """
    Setter method for ext_seq_num, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_seq_num (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_seq_num is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_seq_num() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="ext-seq-num", rest_name="ext-seq-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_seq_num must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="ext-seq-num", rest_name="ext-seq-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)""",
        })

    self.__ext_seq_num = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_seq_num(self):
    self.__ext_seq_num = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 65535']}), is_leaf=True, yang_name="ext-seq-num", rest_name="ext-seq-num", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)


  def _get_ext_permit_deny(self):
    """
    Getter method for ext_permit_deny, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_permit_deny (enumeration)
    """
    return self.__ext_permit_deny
      
  def _set_ext_permit_deny(self, v, load=False):
    """
    Setter method for ext_permit_deny, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_permit_deny (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_permit_deny is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_permit_deny() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="ext-permit-deny", rest_name="ext-permit-deny", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_permit_deny must be of a type compatible with enumeration""",
          'defined-type': "brocade-vxlan-visibility:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="ext-permit-deny", rest_name="ext-permit-deny", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)""",
        })

    self.__ext_permit_deny = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_permit_deny(self):
    self.__ext_permit_deny = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deny': {'value': 2}, u'permit': {'value': 1}},), is_leaf=True, yang_name="ext-permit-deny", rest_name="ext-permit-deny", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)


  def _get_ext_dst_vtep_ip(self):
    """
    Getter method for ext_dst_vtep_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_dst_vtep_ip (inet:ipv4-address)
    """
    return self.__ext_dst_vtep_ip
      
  def _set_ext_dst_vtep_ip(self, v, load=False):
    """
    Setter method for ext_dst_vtep_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_dst_vtep_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_dst_vtep_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_dst_vtep_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-dst-vtep-ip", rest_name="dst-vtep-ip-host", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: A.B.C.D', u'alt-name': u'dst-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_dst_vtep_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-dst-vtep-ip", rest_name="dst-vtep-ip-host", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: A.B.C.D', u'alt-name': u'dst-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__ext_dst_vtep_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_dst_vtep_ip(self):
    self.__ext_dst_vtep_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-dst-vtep-ip", rest_name="dst-vtep-ip-host", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: A.B.C.D', u'alt-name': u'dst-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)


  def _get_ext_dst_vtep_ip_any(self):
    """
    Getter method for ext_dst_vtep_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_dst_vtep_ip_any (empty)
    """
    return self.__ext_dst_vtep_ip_any
      
  def _set_ext_dst_vtep_ip_any(self, v, load=False):
    """
    Setter method for ext_dst_vtep_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_dst_vtep_ip_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_dst_vtep_ip_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_dst_vtep_ip_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ext-dst-vtep-ip-any", rest_name="dst-vtep-ip-any", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: any', u'alt-name': u'dst-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_dst_vtep_ip_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-dst-vtep-ip-any", rest_name="dst-vtep-ip-any", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: any', u'alt-name': u'dst-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__ext_dst_vtep_ip_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_dst_vtep_ip_any(self):
    self.__ext_dst_vtep_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-dst-vtep-ip-any", rest_name="dst-vtep-ip-any", parent=self, choice=(u'choice-ext-dst-vtep-ip', u'case-ext-dst-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst vtep ip address: any', u'alt-name': u'dst-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_ext_src_vtep_ip(self):
    """
    Getter method for ext_src_vtep_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_src_vtep_ip (inet:ipv4-address)
    """
    return self.__ext_src_vtep_ip
      
  def _set_ext_src_vtep_ip(self, v, load=False):
    """
    Setter method for ext_src_vtep_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_src_vtep_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_src_vtep_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_src_vtep_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-src-vtep-ip", rest_name="src-vtep-ip-host", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: A.B.C.D', u'alt-name': u'src-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_src_vtep_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-src-vtep-ip", rest_name="src-vtep-ip-host", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: A.B.C.D', u'alt-name': u'src-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__ext_src_vtep_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_src_vtep_ip(self):
    self.__ext_src_vtep_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="ext-src-vtep-ip", rest_name="src-vtep-ip-host", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: A.B.C.D', u'alt-name': u'src-vtep-ip-host', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)


  def _get_ext_src_vtep_ip_any(self):
    """
    Getter method for ext_src_vtep_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_src_vtep_ip_any (empty)
    """
    return self.__ext_src_vtep_ip_any
      
  def _set_ext_src_vtep_ip_any(self, v, load=False):
    """
    Setter method for ext_src_vtep_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_src_vtep_ip_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_src_vtep_ip_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_src_vtep_ip_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ext-src-vtep-ip-any", rest_name="src-vtep-ip-any", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: any', u'alt-name': u'src-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_src_vtep_ip_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-src-vtep-ip-any", rest_name="src-vtep-ip-any", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: any', u'alt-name': u'src-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__ext_src_vtep_ip_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_src_vtep_ip_any(self):
    self.__ext_src_vtep_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-src-vtep-ip-any", rest_name="src-vtep-ip-any", parent=self, choice=(u'choice-ext-src-vtep-ip', u'case-ext-src-vtep-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src vtep ip address: any', u'alt-name': u'src-vtep-ip-any', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_ext_vni(self):
    """
    Getter method for ext_vni, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_vni (uint32)
    """
    return self.__ext_vni
      
  def _set_ext_vni(self, v, load=False):
    """
    Setter method for ext_vni, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_vni (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_vni is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_vni() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 16777215']}), is_leaf=True, yang_name="ext-vni", rest_name="vni", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni number: 1..16777215', u'alt-name': u'vni', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_vni must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 16777215']}), is_leaf=True, yang_name="ext-vni", rest_name="vni", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni number: 1..16777215', u'alt-name': u'vni', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)""",
        })

    self.__ext_vni = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_vni(self):
    self.__ext_vni = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1 .. 16777215']}), is_leaf=True, yang_name="ext-vni", rest_name="vni", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni number: 1..16777215', u'alt-name': u'vni', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)


  def _get_ext_vni_any(self):
    """
    Getter method for ext_vni_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_vni_any (empty)
    """
    return self.__ext_vni_any
      
  def _set_ext_vni_any(self, v, load=False):
    """
    Setter method for ext_vni_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_vni_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_vni_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_vni_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ext-vni-any", rest_name="vni-any", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni any', u'alt-name': u'vni-any', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_vni_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-vni-any", rest_name="vni-any", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni any', u'alt-name': u'vni-any', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__ext_vni_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_vni_any(self):
    self.__ext_vni_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-vni-any", rest_name="vni-any", parent=self, choice=(u'choice-ext-vni', u'case-ext-vni-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni any', u'alt-name': u'vni-any', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_ext_vni_mask(self):
    """
    Getter method for ext_vni_mask, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_vni_mask (string)
    """
    return self.__ext_vni_mask
      
  def _set_ext_vni_mask(self, v, load=False):
    """
    Setter method for ext_vni_mask, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_vni_mask (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_vni_mask is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_vni_mask() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0|[1-9a-fA-F][0-9a-fA-F]{0,5}'}), is_leaf=True, yang_name="ext-vni-mask", rest_name="vni-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni mask:Hexadecimal 0..FFFFFF', u'display-when': u'not(../ext-vni-any)', u'cli-incomplete-no': None, u'alt-name': u'vni-mask'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_vni_mask must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0|[1-9a-fA-F][0-9a-fA-F]{0,5}'}), is_leaf=True, yang_name="ext-vni-mask", rest_name="vni-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni mask:Hexadecimal 0..FFFFFF', u'display-when': u'not(../ext-vni-any)', u'cli-incomplete-no': None, u'alt-name': u'vni-mask'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='string', is_config=True)""",
        })

    self.__ext_vni_mask = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_vni_mask(self):
    self.__ext_vni_mask = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'0|[1-9a-fA-F][0-9a-fA-F]{0,5}'}), is_leaf=True, yang_name="ext-vni-mask", rest_name="vni-mask", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'vni mask:Hexadecimal 0..FFFFFF', u'display-when': u'not(../ext-vni-any)', u'cli-incomplete-no': None, u'alt-name': u'vni-mask'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='string', is_config=True)


  def _get_ext_count(self):
    """
    Getter method for ext_count, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_count (empty)
    """
    return self.__ext_count
      
  def _set_ext_count(self, v, load=False):
    """
    Setter method for ext_count, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_count (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ext-count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'count', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'cli-break-sequence-commands': None, u'alt-name': u'count'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_count must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'count', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'cli-break-sequence-commands': None, u'alt-name': u'count'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__ext_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_count(self):
    self.__ext_count = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-count", rest_name="count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'count', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'cli-break-sequence-commands': None, u'alt-name': u'count'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_ext_mirror(self):
    """
    Getter method for ext_mirror, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_mirror (interface:interface-type)
    """
    return self.__ext_mirror
      
  def _set_ext_mirror(self, v, load=False):
    """
    Setter method for ext_mirror, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_mirror (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_mirror is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_mirror() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mirror <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'mirror'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_mirror must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mirror <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'mirror'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__ext_mirror = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_mirror(self):
    self.__ext_mirror = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-mirror", rest_name="mirror", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'mirror <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'mirror'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)


  def _get_ext_redirect(self):
    """
    Getter method for ext_redirect, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_redirect (interface:interface-type)
    """
    return self.__ext_redirect
      
  def _set_ext_redirect(self, v, load=False):
    """
    Setter method for ext_redirect, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_redirect (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_redirect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_redirect() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-redirect", rest_name="redirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'redirect <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'redirect'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_redirect must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-redirect", rest_name="redirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'redirect <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'redirect'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__ext_redirect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_redirect(self):
    self.__ext_redirect = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="ext-redirect", rest_name="redirect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'redirect <interface-name>', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'redirect'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='interface:interface-type', is_config=True)


  def _get_ext_sflow(self):
    """
    Getter method for ext_sflow, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_sflow (empty)
    """
    return self.__ext_sflow
      
  def _set_ext_sflow(self, v, load=False):
    """
    Setter method for ext_sflow, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/ext_sflow (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ext_sflow is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ext_sflow() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="ext-sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'sflow', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'sflow'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ext_sflow must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'sflow', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'sflow'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__ext_sflow = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ext_sflow(self):
    self.__ext_sflow = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="ext-sflow", rest_name="sflow", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'sflow', u'display-when': u'(not(../native)) or ((../native) and (../tag) and ((../dst-ip-host) or (../dst-ip) or (../dst-ip-any)) and ((../src-ip-host) or (../src-ip) or (../src-ip-any)) and ((../dst-port) or (../dst-port-any)) and ((../src-port) or (../src-port-any)))', u'alt-name': u'sflow'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_native(self):
    """
    Getter method for native, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/native (empty)
    """
    return self.__native
      
  def _set_native(self, v, load=False):
    """
    Setter method for native, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/native (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_native is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_native() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="native", rest_name="native", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-optional-in-sequence': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """native must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="native", rest_name="native", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-optional-in-sequence': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__native = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_native(self):
    self.__native = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="native", rest_name="native", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-optional-in-sequence': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_tag(self):
    """
    Getter method for tag, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/tag (enumeration)
    """
    return self.__tag
      
  def _set_tag(self, v, load=False):
    """
    Setter method for tag, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/tag (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tag() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'single': {'value': 2}, u'any': {'value': 3}},), is_leaf=True, yang_name="tag", rest_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../native)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tag must be of a type compatible with enumeration""",
          'defined-type': "brocade-vxlan-visibility:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'single': {'value': 2}, u'any': {'value': 3}},), is_leaf=True, yang_name="tag", rest_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../native)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)""",
        })

    self.__tag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tag(self):
    self.__tag = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'single': {'value': 2}, u'any': {'value': 3}},), is_leaf=True, yang_name="tag", rest_name="tag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../native)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='enumeration', is_config=True)


  def _get_dst_ip_host(self):
    """
    Getter method for dst_ip_host, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_ip_host (inet:ipv4-address)
    """
    return self.__dst_ip_host
      
  def _set_dst_ip_host(self, v, load=False):
    """
    Setter method for dst_ip_host, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_ip_host (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ip_host is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ip_host() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-ip-host", rest_name="dst-ip-host", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip host: A.B.C.D', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ip_host must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-ip-host", rest_name="dst-ip-host", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip host: A.B.C.D', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__dst_ip_host = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ip_host(self):
    self.__dst_ip_host = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dst-ip-host", rest_name="dst-ip-host", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip host: A.B.C.D', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)


  def _get_dst_ip(self):
    """
    Getter method for dst_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_ip (union)
    """
    return self.__dst_ip
      
  def _set_dst_ip(self, v, load=False):
    """
    Setter method for dst_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_ip (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="dst-ip", rest_name="dst-ip", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip: A.B.C.D/mask', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ip must be of a type compatible with union""",
          'defined-type': "brocade-vxlan-visibility:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="dst-ip", rest_name="dst-ip", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip: A.B.C.D/mask', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)""",
        })

    self.__dst_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ip(self):
    self.__dst_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="dst-ip", rest_name="dst-ip", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip: A.B.C.D/mask', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)


  def _get_dst_ip_any(self):
    """
    Getter method for dst_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_ip_any (empty)
    """
    return self.__dst_ip_any
      
  def _set_dst_ip_any(self, v, load=False):
    """
    Setter method for dst_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_ip_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_ip_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_ip_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dst-ip-any", rest_name="dst-ip-any", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip address: any', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_ip_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dst-ip-any", rest_name="dst-ip-any", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip address: any', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__dst_ip_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_ip_any(self):
    self.__dst_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dst-ip-any", rest_name="dst-ip-any", parent=self, choice=(u'choice-dst-ip', u'case-dst-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst ip address: any', u'display-when': u'(../tag)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_src_ip_host(self):
    """
    Getter method for src_ip_host, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_ip_host (inet:ipv4-address)
    """
    return self.__src_ip_host
      
  def _set_src_ip_host(self, v, load=False):
    """
    Setter method for src_ip_host, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_ip_host (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ip_host is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ip_host() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip-host", rest_name="src-ip-host", parent=self, choice=(u'choice-src-ip', u'case-src-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip host: A.B.C.D', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ip_host must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip-host", rest_name="src-ip-host", parent=self, choice=(u'choice-src-ip', u'case-src-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip host: A.B.C.D', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__src_ip_host = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ip_host(self):
    self.__src_ip_host = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip-host", rest_name="src-ip-host", parent=self, choice=(u'choice-src-ip', u'case-src-ip-host'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip host: A.B.C.D', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='inet:ipv4-address', is_config=True)


  def _get_src_ip(self):
    """
    Getter method for src_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_ip (union)
    """
    return self.__src_ip
      
  def _set_src_ip(self, v, load=False):
    """
    Setter method for src_ip, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_ip (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ip() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'choice-src-ip', u'case-src-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip: A.B.C.D/mask', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ip must be of a type compatible with union""",
          'defined-type': "brocade-vxlan-visibility:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'choice-src-ip', u'case-src-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip: A.B.C.D/mask', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)""",
        })

    self.__src_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ip(self):
    self.__src_ip = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.)(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([1-9])|([1-2][0-9])|(3[0-1]))'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/(([0-9])|([1-2][0-9])|(3[0-2]))'}),], is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'choice-src-ip', u'case-src-ip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip: A.B.C.D/mask', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='union', is_config=True)


  def _get_src_ip_any(self):
    """
    Getter method for src_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_ip_any (empty)
    """
    return self.__src_ip_any
      
  def _set_src_ip_any(self, v, load=False):
    """
    Setter method for src_ip_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_ip_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ip_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ip_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="src-ip-any", rest_name="src-ip-any", parent=self, choice=(u'choice-src-ip', u'case-src-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip address: any', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ip_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="src-ip-any", rest_name="src-ip-any", parent=self, choice=(u'choice-src-ip', u'case-src-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip address: any', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__src_ip_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ip_any(self):
    self.__src_ip_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="src-ip-any", rest_name="src-ip-any", parent=self, choice=(u'choice-src-ip', u'case-src-ip-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src ip address: any', u'display-when': u'(../dst-ip-host) or (../dst-ip) or (../dst-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_dst_port(self):
    """
    Getter method for dst_port, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_port (uint32)
    """
    return self.__dst_port
      
  def _set_dst_port(self, v, load=False):
    """
    Setter method for dst_port, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_port() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dst-port", rest_name="dst-port", parent=self, choice=(u'choice-dst-port', u'case-dst-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dst-port", rest_name="dst-port", parent=self, choice=(u'choice-dst-port', u'case-dst-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)""",
        })

    self.__dst_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_port(self):
    self.__dst_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="dst-port", rest_name="dst-port", parent=self, choice=(u'choice-dst-port', u'case-dst-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)


  def _get_dst_port_any(self):
    """
    Getter method for dst_port_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_port_any (empty)
    """
    return self.__dst_port_any
      
  def _set_dst_port_any(self, v, load=False):
    """
    Setter method for dst_port_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/dst_port_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dst_port_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dst_port_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dst-port-any", rest_name="dst-port-any", parent=self, choice=(u'choice-dst-port', u'case-dst-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst-port-any', u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dst_port_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dst-port-any", rest_name="dst-port-any", parent=self, choice=(u'choice-dst-port', u'case-dst-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst-port-any', u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__dst_port_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dst_port_any(self):
    self.__dst_port_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dst-port-any", rest_name="dst-port-any", parent=self, choice=(u'choice-dst-port', u'case-dst-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'dst-port-any', u'display-when': u'(../src-ip-host) or (../src-ip) or (../src-ip-any)', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)


  def _get_src_port(self):
    """
    Getter method for src_port, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_port (uint32)
    """
    return self.__src_port
      
  def _set_src_port(self, v, load=False):
    """
    Setter method for src_port, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_port() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="src-port", rest_name="src-port", parent=self, choice=(u'choice-src-port', u'case-src-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="src-port", rest_name="src-port", parent=self, choice=(u'choice-src-port', u'case-src-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)""",
        })

    self.__src_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_port(self):
    self.__src_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="src-port", rest_name="src-port", parent=self, choice=(u'choice-src-port', u'case-src-port'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='uint32', is_config=True)


  def _get_src_port_any(self):
    """
    Getter method for src_port_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_port_any (empty)
    """
    return self.__src_port_any
      
  def _set_src_port_any(self, v, load=False):
    """
    Setter method for src_port_any, mapped from YANG variable /overlay/access_list/type/vxlan/extended/ext_seq/src_port_any (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_port_any is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_port_any() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="src-port-any", rest_name="src-port-any", parent=self, choice=(u'choice-src-port', u'case-src-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src-port-any', u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_port_any must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="src-port-any", rest_name="src-port-any", parent=self, choice=(u'choice-src-port', u'case-src-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src-port-any', u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)""",
        })

    self.__src_port_any = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_port_any(self):
    self.__src_port_any = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="src-port-any", rest_name="src-port-any", parent=self, choice=(u'choice-src-port', u'case-src-port-any'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'src-port-any', u'display-when': u'(../dst-port) or (../dst-port-any)'}}, namespace='urn:brocade.com:mgmt:brocade-vxlan-visibility', defining_module='brocade-vxlan-visibility', yang_type='empty', is_config=True)

  ext_seq_num = __builtin__.property(_get_ext_seq_num, _set_ext_seq_num)
  ext_permit_deny = __builtin__.property(_get_ext_permit_deny, _set_ext_permit_deny)
  ext_dst_vtep_ip = __builtin__.property(_get_ext_dst_vtep_ip, _set_ext_dst_vtep_ip)
  ext_dst_vtep_ip_any = __builtin__.property(_get_ext_dst_vtep_ip_any, _set_ext_dst_vtep_ip_any)
  ext_src_vtep_ip = __builtin__.property(_get_ext_src_vtep_ip, _set_ext_src_vtep_ip)
  ext_src_vtep_ip_any = __builtin__.property(_get_ext_src_vtep_ip_any, _set_ext_src_vtep_ip_any)
  ext_vni = __builtin__.property(_get_ext_vni, _set_ext_vni)
  ext_vni_any = __builtin__.property(_get_ext_vni_any, _set_ext_vni_any)
  ext_vni_mask = __builtin__.property(_get_ext_vni_mask, _set_ext_vni_mask)
  ext_count = __builtin__.property(_get_ext_count, _set_ext_count)
  ext_mirror = __builtin__.property(_get_ext_mirror, _set_ext_mirror)
  ext_redirect = __builtin__.property(_get_ext_redirect, _set_ext_redirect)
  ext_sflow = __builtin__.property(_get_ext_sflow, _set_ext_sflow)
  native = __builtin__.property(_get_native, _set_native)
  tag = __builtin__.property(_get_tag, _set_tag)
  dst_ip_host = __builtin__.property(_get_dst_ip_host, _set_dst_ip_host)
  dst_ip = __builtin__.property(_get_dst_ip, _set_dst_ip)
  dst_ip_any = __builtin__.property(_get_dst_ip_any, _set_dst_ip_any)
  src_ip_host = __builtin__.property(_get_src_ip_host, _set_src_ip_host)
  src_ip = __builtin__.property(_get_src_ip, _set_src_ip)
  src_ip_any = __builtin__.property(_get_src_ip_any, _set_src_ip_any)
  dst_port = __builtin__.property(_get_dst_port, _set_dst_port)
  dst_port_any = __builtin__.property(_get_dst_port_any, _set_dst_port_any)
  src_port = __builtin__.property(_get_src_port, _set_src_port)
  src_port_any = __builtin__.property(_get_src_port_any, _set_src_port_any)

  __choices__ = {u'choice-ext-dst-vtep-ip': {u'case-ext-dst-vtep-ip-any': [u'ext_dst_vtep_ip_any'], u'case-ext-dst-vtep-ip': [u'ext_dst_vtep_ip']}, u'choice-ext-src-vtep-ip': {u'case-ext-src-vtep-ip-any': [u'ext_src_vtep_ip_any'], u'case-ext-src-vtep-ip': [u'ext_src_vtep_ip']}, u'choice-ext-vni': {u'case-ext-vni': [u'ext_vni'], u'case-ext-vni-any': [u'ext_vni_any']}, u'choice-dst-ip': {u'case-dst-ip': [u'dst_ip'], u'case-dst-ip-any': [u'dst_ip_any'], u'case-dst-ip-host': [u'dst_ip_host']}, u'choice-src-ip': {u'case-src-ip-host': [u'src_ip_host'], u'case-src-ip': [u'src_ip'], u'case-src-ip-any': [u'src_ip_any']}, u'choice-dst-port': {u'case-dst-port-any': [u'dst_port_any'], u'case-dst-port': [u'dst_port']}, u'choice-src-port': {u'case-src-port-any': [u'src_port_any'], u'case-src-port': [u'src_port']}}
  _pyangbind_elements = {'ext_seq_num': ext_seq_num, 'ext_permit_deny': ext_permit_deny, 'ext_dst_vtep_ip': ext_dst_vtep_ip, 'ext_dst_vtep_ip_any': ext_dst_vtep_ip_any, 'ext_src_vtep_ip': ext_src_vtep_ip, 'ext_src_vtep_ip_any': ext_src_vtep_ip_any, 'ext_vni': ext_vni, 'ext_vni_any': ext_vni_any, 'ext_vni_mask': ext_vni_mask, 'ext_count': ext_count, 'ext_mirror': ext_mirror, 'ext_redirect': ext_redirect, 'ext_sflow': ext_sflow, 'native': native, 'tag': tag, 'dst_ip_host': dst_ip_host, 'dst_ip': dst_ip, 'dst_ip_any': dst_ip_any, 'src_ip_host': src_ip_host, 'src_ip': src_ip, 'src_ip_any': src_ip_any, 'dst_port': dst_port, 'dst_port_any': dst_port_any, 'src_port': src_port, 'src_port_any': src_port_any, }


