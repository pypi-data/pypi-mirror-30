
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import aggr_member
class lacp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-lag - based on the path /brocade_lag_rpc/get-port-channel-detail/output/lacp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__aggregator_id','__aggregator_type','__isvlag','__aggregator_mode','__admin_key','__oper_key','__actor_system_id','__partner_system_id','__system_priority','__partner_oper_priority','__rx_link_count','__tx_link_count','__individual_agg','__ready_agg','__partner_oper_key','__aggr_member',)

  _yang_name = 'lacp'
  _rest_name = 'lacp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__rx_link_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-link-count", rest_name="rx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    self.__system_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__aggregator_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}), is_leaf=True, yang_name="aggregator-id", rest_name="aggregator-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='interface:portchannel-type', is_config=True)
    self.__aggregator_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {'value': 4}, u'hybrid': {'value': 3}, u'brcd': {'value': 2}, u'standard': {'value': 1}},), is_leaf=True, yang_name="aggregator-type", rest_name="aggregator-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    self.__ready_agg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ready-agg", rest_name="ready-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__aggregator_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {'value': 2}, u'none': {'value': 0}, u'dynamic': {'value': 1}},), is_leaf=True, yang_name="aggregator-mode", rest_name="aggregator-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    self.__partner_oper_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="partner-oper-key", rest_name="partner-oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    self.__oper_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    self.__admin_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    self.__aggr_member = YANGDynClass(base=YANGListType(False,aggr_member.aggr_member, yang_name="aggr-member", rest_name="aggr-member", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="aggr-member", rest_name="aggr-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='list', is_config=True)
    self.__isvlag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isvlag", rest_name="isvlag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='boolean', is_config=True)
    self.__individual_agg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="individual-agg", rest_name="individual-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__tx_link_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-link-count", rest_name="tx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    self.__partner_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    self.__actor_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    self.__partner_oper_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_lag_rpc', u'get-port-channel-detail', u'output', u'lacp']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-port-channel-detail', u'output', u'lacp']

  def _get_aggregator_id(self):
    """
    Getter method for aggregator_id, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggregator_id (interface:portchannel-type)

    YANG Description: Agreegator id
    """
    return self.__aggregator_id
      
  def _set_aggregator_id(self, v, load=False):
    """
    Setter method for aggregator_id, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggregator_id (interface:portchannel-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aggregator_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aggregator_id() directly.

    YANG Description: Agreegator id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}), is_leaf=True, yang_name="aggregator-id", rest_name="aggregator-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='interface:portchannel-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aggregator_id must be of a type compatible with interface:portchannel-type""",
          'defined-type': "interface:portchannel-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}), is_leaf=True, yang_name="aggregator-id", rest_name="aggregator-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='interface:portchannel-type', is_config=True)""",
        })

    self.__aggregator_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aggregator_id(self):
    self.__aggregator_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}), is_leaf=True, yang_name="aggregator-id", rest_name="aggregator-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='interface:portchannel-type', is_config=True)


  def _get_aggregator_type(self):
    """
    Getter method for aggregator_type, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggregator_type (enumeration)
    """
    return self.__aggregator_type
      
  def _set_aggregator_type(self, v, load=False):
    """
    Setter method for aggregator_type, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggregator_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aggregator_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aggregator_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {'value': 4}, u'hybrid': {'value': 3}, u'brcd': {'value': 2}, u'standard': {'value': 1}},), is_leaf=True, yang_name="aggregator-type", rest_name="aggregator-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aggregator_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-lag:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {'value': 4}, u'hybrid': {'value': 3}, u'brcd': {'value': 2}, u'standard': {'value': 1}},), is_leaf=True, yang_name="aggregator-type", rest_name="aggregator-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)""",
        })

    self.__aggregator_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aggregator_type(self):
    self.__aggregator_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'internal': {'value': 4}, u'hybrid': {'value': 3}, u'brcd': {'value': 2}, u'standard': {'value': 1}},), is_leaf=True, yang_name="aggregator-type", rest_name="aggregator-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)


  def _get_isvlag(self):
    """
    Getter method for isvlag, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/isvlag (boolean)

    YANG Description:  Specifies if Agreegator is vlag.
    """
    return self.__isvlag
      
  def _set_isvlag(self, v, load=False):
    """
    Setter method for isvlag, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/isvlag (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isvlag is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isvlag() directly.

    YANG Description:  Specifies if Agreegator is vlag.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="isvlag", rest_name="isvlag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isvlag must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isvlag", rest_name="isvlag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='boolean', is_config=True)""",
        })

    self.__isvlag = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isvlag(self):
    self.__isvlag = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="isvlag", rest_name="isvlag", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='boolean', is_config=True)


  def _get_aggregator_mode(self):
    """
    Getter method for aggregator_mode, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggregator_mode (enumeration)
    """
    return self.__aggregator_mode
      
  def _set_aggregator_mode(self, v, load=False):
    """
    Setter method for aggregator_mode, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggregator_mode (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aggregator_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aggregator_mode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {'value': 2}, u'none': {'value': 0}, u'dynamic': {'value': 1}},), is_leaf=True, yang_name="aggregator-mode", rest_name="aggregator-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aggregator_mode must be of a type compatible with enumeration""",
          'defined-type': "brocade-lag:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {'value': 2}, u'none': {'value': 0}, u'dynamic': {'value': 1}},), is_leaf=True, yang_name="aggregator-mode", rest_name="aggregator-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)""",
        })

    self.__aggregator_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aggregator_mode(self):
    self.__aggregator_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'static': {'value': 2}, u'none': {'value': 0}, u'dynamic': {'value': 1}},), is_leaf=True, yang_name="aggregator-mode", rest_name="aggregator-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)


  def _get_admin_key(self):
    """
    Getter method for admin_key, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/admin_key (lacp-key)

    YANG Description: The Admin key
    """
    return self.__admin_key
      
  def _set_admin_key(self, v, load=False):
    """
    Setter method for admin_key, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/admin_key (lacp-key)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_key() directly.

    YANG Description: The Admin key
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_key must be of a type compatible with lacp-key""",
          'defined-type': "brocade-lag:lacp-key",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)""",
        })

    self.__admin_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_key(self):
    self.__admin_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)


  def _get_oper_key(self):
    """
    Getter method for oper_key, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/oper_key (lacp-key)

    YANG Description: The Opertional key
    """
    return self.__oper_key
      
  def _set_oper_key(self, v, load=False):
    """
    Setter method for oper_key, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/oper_key (lacp-key)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_key() directly.

    YANG Description: The Opertional key
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_key must be of a type compatible with lacp-key""",
          'defined-type': "brocade-lag:lacp-key",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)""",
        })

    self.__oper_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_key(self):
    self.__oper_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)


  def _get_actor_system_id(self):
    """
    Getter method for actor_system_id, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/actor_system_id (yang:mac-address)

    YANG Description: The Actor system id
    """
    return self.__actor_system_id
      
  def _set_actor_system_id(self, v, load=False):
    """
    Setter method for actor_system_id, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/actor_system_id (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_system_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_system_id() directly.

    YANG Description: The Actor system id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_system_id must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__actor_system_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_system_id(self):
    self.__actor_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)


  def _get_partner_system_id(self):
    """
    Getter method for partner_system_id, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/partner_system_id (yang:mac-address)

    YANG Description: The Partner system id
    """
    return self.__partner_system_id
      
  def _set_partner_system_id(self, v, load=False):
    """
    Setter method for partner_system_id, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/partner_system_id (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_system_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_system_id() directly.

    YANG Description: The Partner system id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_system_id must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__partner_system_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_system_id(self):
    self.__partner_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)


  def _get_system_priority(self):
    """
    Getter method for system_priority, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/system_priority (uint32)

    YANG Description: The System Priority
    """
    return self.__system_priority
      
  def _set_system_priority(self, v, load=False):
    """
    Setter method for system_priority, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/system_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_priority() directly.

    YANG Description: The System Priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__system_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_priority(self):
    self.__system_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_partner_oper_priority(self):
    """
    Getter method for partner_oper_priority, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/partner_oper_priority (uint32)

    YANG Description: The partner operational priority
    """
    return self.__partner_oper_priority
      
  def _set_partner_oper_priority(self, v, load=False):
    """
    Setter method for partner_oper_priority, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/partner_oper_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_oper_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_oper_priority() directly.

    YANG Description: The partner operational priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_oper_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__partner_oper_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_oper_priority(self):
    self.__partner_oper_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_rx_link_count(self):
    """
    Getter method for rx_link_count, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/rx_link_count (uint64)

    YANG Description: The RX link counter
    """
    return self.__rx_link_count
      
  def _set_rx_link_count(self, v, load=False):
    """
    Setter method for rx_link_count, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/rx_link_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_link_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_link_count() directly.

    YANG Description: The RX link counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-link-count", rest_name="rx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_link_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-link-count", rest_name="rx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)""",
        })

    self.__rx_link_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_link_count(self):
    self.__rx_link_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-link-count", rest_name="rx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)


  def _get_tx_link_count(self):
    """
    Getter method for tx_link_count, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/tx_link_count (uint64)

    YANG Description: The RX link counter
    """
    return self.__tx_link_count
      
  def _set_tx_link_count(self, v, load=False):
    """
    Setter method for tx_link_count, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/tx_link_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_link_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_link_count() directly.

    YANG Description: The RX link counter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-link-count", rest_name="tx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_link_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-link-count", rest_name="tx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)""",
        })

    self.__tx_link_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_link_count(self):
    self.__tx_link_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-link-count", rest_name="tx-link-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)


  def _get_individual_agg(self):
    """
    Getter method for individual_agg, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/individual_agg (uint32)

    YANG Description: Individual aggregator
    """
    return self.__individual_agg
      
  def _set_individual_agg(self, v, load=False):
    """
    Setter method for individual_agg, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/individual_agg (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_individual_agg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_individual_agg() directly.

    YANG Description: Individual aggregator
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="individual-agg", rest_name="individual-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """individual_agg must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="individual-agg", rest_name="individual-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__individual_agg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_individual_agg(self):
    self.__individual_agg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="individual-agg", rest_name="individual-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_ready_agg(self):
    """
    Getter method for ready_agg, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/ready_agg (uint32)

    YANG Description: Individual aggregator
    """
    return self.__ready_agg
      
  def _set_ready_agg(self, v, load=False):
    """
    Setter method for ready_agg, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/ready_agg (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ready_agg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ready_agg() directly.

    YANG Description: Individual aggregator
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ready-agg", rest_name="ready-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ready_agg must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ready-agg", rest_name="ready-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__ready_agg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ready_agg(self):
    self.__ready_agg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ready-agg", rest_name="ready-agg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_partner_oper_key(self):
    """
    Getter method for partner_oper_key, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/partner_oper_key (lacp-key)

    YANG Description: The Partner Opertional key
    """
    return self.__partner_oper_key
      
  def _set_partner_oper_key(self, v, load=False):
    """
    Setter method for partner_oper_key, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/partner_oper_key (lacp-key)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_oper_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_oper_key() directly.

    YANG Description: The Partner Opertional key
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="partner-oper-key", rest_name="partner-oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_oper_key must be of a type compatible with lacp-key""",
          'defined-type': "brocade-lag:lacp-key",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="partner-oper-key", rest_name="partner-oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)""",
        })

    self.__partner_oper_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_oper_key(self):
    self.__partner_oper_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="partner-oper-key", rest_name="partner-oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)


  def _get_aggr_member(self):
    """
    Getter method for aggr_member, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggr_member (list)

    YANG Description: Describes the aggregator member
details.
    """
    return self.__aggr_member
      
  def _set_aggr_member(self, v, load=False):
    """
    Setter method for aggr_member, mapped from YANG variable /brocade_lag_rpc/get_port_channel_detail/output/lacp/aggr_member (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_aggr_member is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_aggr_member() directly.

    YANG Description: Describes the aggregator member
details.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,aggr_member.aggr_member, yang_name="aggr-member", rest_name="aggr-member", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="aggr-member", rest_name="aggr-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """aggr_member must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,aggr_member.aggr_member, yang_name="aggr-member", rest_name="aggr-member", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="aggr-member", rest_name="aggr-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='list', is_config=True)""",
        })

    self.__aggr_member = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_aggr_member(self):
    self.__aggr_member = YANGDynClass(base=YANGListType(False,aggr_member.aggr_member, yang_name="aggr-member", rest_name="aggr-member", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="aggr-member", rest_name="aggr-member", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='list', is_config=True)

  aggregator_id = __builtin__.property(_get_aggregator_id, _set_aggregator_id)
  aggregator_type = __builtin__.property(_get_aggregator_type, _set_aggregator_type)
  isvlag = __builtin__.property(_get_isvlag, _set_isvlag)
  aggregator_mode = __builtin__.property(_get_aggregator_mode, _set_aggregator_mode)
  admin_key = __builtin__.property(_get_admin_key, _set_admin_key)
  oper_key = __builtin__.property(_get_oper_key, _set_oper_key)
  actor_system_id = __builtin__.property(_get_actor_system_id, _set_actor_system_id)
  partner_system_id = __builtin__.property(_get_partner_system_id, _set_partner_system_id)
  system_priority = __builtin__.property(_get_system_priority, _set_system_priority)
  partner_oper_priority = __builtin__.property(_get_partner_oper_priority, _set_partner_oper_priority)
  rx_link_count = __builtin__.property(_get_rx_link_count, _set_rx_link_count)
  tx_link_count = __builtin__.property(_get_tx_link_count, _set_tx_link_count)
  individual_agg = __builtin__.property(_get_individual_agg, _set_individual_agg)
  ready_agg = __builtin__.property(_get_ready_agg, _set_ready_agg)
  partner_oper_key = __builtin__.property(_get_partner_oper_key, _set_partner_oper_key)
  aggr_member = __builtin__.property(_get_aggr_member, _set_aggr_member)


  _pyangbind_elements = {'aggregator_id': aggregator_id, 'aggregator_type': aggregator_type, 'isvlag': isvlag, 'aggregator_mode': aggregator_mode, 'admin_key': admin_key, 'oper_key': oper_key, 'actor_system_id': actor_system_id, 'partner_system_id': partner_system_id, 'system_priority': system_priority, 'partner_oper_priority': partner_oper_priority, 'rx_link_count': rx_link_count, 'tx_link_count': tx_link_count, 'individual_agg': individual_agg, 'ready_agg': ready_agg, 'partner_oper_key': partner_oper_key, 'aggr_member': aggr_member, }


