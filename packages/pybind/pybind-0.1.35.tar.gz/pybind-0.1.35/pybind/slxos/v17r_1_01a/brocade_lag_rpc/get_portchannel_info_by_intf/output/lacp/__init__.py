
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class lacp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-lag - based on the path /brocade_lag_rpc/get-portchannel-info-by-intf/output/lacp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_type','__interface_name','__actor_port','__admin_key','__oper_key','__actor_system_id','__partner_system_id','__system_priority','__partner_oper_priority','__actor_priority','__receive_machine_state','__periodic_transmission_machine_state','__mux_machine_state','__admin_state','__oper_state','__partner_oper_state','__partner_oper_port','__actor_chip_number','__actor_max_deskew','__partner_chip_number','__partner_max_deskew','__actor_brcd_state','__partner_brcd_state',)

  _yang_name = 'lacp'
  _rest_name = 'lacp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__oper_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    self.__partner_chip_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-chip-number", rest_name="partner-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__actor_brcd_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="actor-brcd-state", rest_name="actor-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)
    self.__periodic_transmission_machine_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fast-periodic': {'value': 4}, u'unknown': {'value': 1}, u'no-periodic': {'value': 3}, u'slow-periodic': {'value': 5}, u'periodic': {'value': 6}, u'invalid': {'value': 2}},), is_leaf=True, yang_name="periodic-transmission-machine-state", rest_name="periodic-transmission-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    self.__actor_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    self.__partner_oper_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__actor_max_deskew = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-max-deskew", rest_name="actor-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__partner_brcd_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="partner-brcd-state", rest_name="partner-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='union', is_config=True)
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 8}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    self.__admin_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    self.__actor_chip_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-chip-number", rest_name="actor-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__mux_machine_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 5}, u'generated-mark': {'value': 8}, u'deskew-not-ok': {'value': 12}, u'calculate-deskew': {'value': 9}, u'collecting-distributing': {'value': 7}, u'unknown': {'value': 1}, u'deskew-ok': {'value': 11}, u'attached': {'value': 4}, u'distributing': {'value': 6}, u'waiting': {'value': 3}, u'waiting-remote-deskew': {'value': 10}, u'detached': {'value': 2}},), is_leaf=True, yang_name="mux-machine-state", rest_name="mux-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    self.__actor_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="actor-priority", rest_name="actor-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__system_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__partner_oper_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="partner-oper-state", rest_name="partner-oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)
    self.__actor_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="actor-port", rest_name="actor-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    self.__partner_oper_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="partner-oper-port", rest_name="partner-oper-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    self.__receive_machine_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-disabled': {'value': 4}, u'unknown': {'value': 1}, u'lacp-disabled': {'value': 5}, u'invalid': {'value': 2}, u'current': {'value': 8}, u'defaulted': {'value': 7}, u'initialize': {'value': 3}, u'expired': {'value': 6}},), is_leaf=True, yang_name="receive-machine-state", rest_name="receive-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    self.__admin_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)
    self.__partner_max_deskew = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-max-deskew", rest_name="partner-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    self.__partner_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_lag_rpc', u'get-portchannel-info-by-intf', u'output', u'lacp']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-portchannel-info-by-intf', u'output', u'lacp']

  def _get_interface_type(self):
    """
    Getter method for interface_type, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/interface_type (enumeration)

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    return self.__interface_type
      
  def _set_interface_type(self, v, load=False):
    """
    Setter method for interface_type, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_type() directly.

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 8}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-lag:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 8}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_type(self):
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'loopback': {'value': 7}, u'tunnel': {'value': 12}, u'unknown': {'value': 1}, u'port-channel': {'value': 5}, u'fibrechannel': {'value': 8}, u'ethernet': {'value': 10}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/interface_name (union)

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
ethernet               slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
ethernet               slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with union""",
          'defined-type': "brocade-lag:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='union', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..512']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='union', is_config=True)


  def _get_actor_port(self):
    """
    Getter method for actor_port, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_port (uint64)

    YANG Description: The actor port number
    """
    return self.__actor_port
      
  def _set_actor_port(self, v, load=False):
    """
    Setter method for actor_port, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_port (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_port() directly.

    YANG Description: The actor port number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="actor-port", rest_name="actor-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_port must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="actor-port", rest_name="actor-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)""",
        })

    self.__actor_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_port(self):
    self.__actor_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="actor-port", rest_name="actor-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)


  def _get_admin_key(self):
    """
    Getter method for admin_key, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/admin_key (lacp-key)

    YANG Description: The Admin key
    """
    return self.__admin_key
      
  def _set_admin_key(self, v, load=False):
    """
    Setter method for admin_key, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/admin_key (lacp-key)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_key() directly.

    YANG Description: The Admin key
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_key must be of a type compatible with lacp-key""",
          'defined-type': "brocade-lag:lacp-key",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)""",
        })

    self.__admin_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_key(self):
    self.__admin_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="admin-key", rest_name="admin-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)


  def _get_oper_key(self):
    """
    Getter method for oper_key, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/oper_key (lacp-key)

    YANG Description: The Opertional key
    """
    return self.__oper_key
      
  def _set_oper_key(self, v, load=False):
    """
    Setter method for oper_key, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/oper_key (lacp-key)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_key() directly.

    YANG Description: The Opertional key
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_key must be of a type compatible with lacp-key""",
          'defined-type': "brocade-lag:lacp-key",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)""",
        })

    self.__oper_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_key(self):
    self.__oper_key = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), is_leaf=True, yang_name="oper-key", rest_name="oper-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-key', is_config=True)


  def _get_actor_system_id(self):
    """
    Getter method for actor_system_id, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_system_id (yang:mac-address)

    YANG Description: The Actor system id
    """
    return self.__actor_system_id
      
  def _set_actor_system_id(self, v, load=False):
    """
    Setter method for actor_system_id, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_system_id (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_system_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_system_id() directly.

    YANG Description: The Actor system id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_system_id must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__actor_system_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_system_id(self):
    self.__actor_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="actor-system-id", rest_name="actor-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)


  def _get_partner_system_id(self):
    """
    Getter method for partner_system_id, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_system_id (yang:mac-address)

    YANG Description: The Partner system id
    """
    return self.__partner_system_id
      
  def _set_partner_system_id(self, v, load=False):
    """
    Setter method for partner_system_id, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_system_id (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_system_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_system_id() directly.

    YANG Description: The Partner system id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_system_id must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__partner_system_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_system_id(self):
    self.__partner_system_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="partner-system-id", rest_name="partner-system-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='yang:mac-address', is_config=True)


  def _get_system_priority(self):
    """
    Getter method for system_priority, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/system_priority (uint32)

    YANG Description: The System Priority
    """
    return self.__system_priority
      
  def _set_system_priority(self, v, load=False):
    """
    Setter method for system_priority, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/system_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_system_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_system_priority() directly.

    YANG Description: The System Priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """system_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__system_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_system_priority(self):
    self.__system_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="system-priority", rest_name="system-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_partner_oper_priority(self):
    """
    Getter method for partner_oper_priority, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_oper_priority (uint32)

    YANG Description: The partner operational priority
    """
    return self.__partner_oper_priority
      
  def _set_partner_oper_priority(self, v, load=False):
    """
    Setter method for partner_oper_priority, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_oper_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_oper_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_oper_priority() directly.

    YANG Description: The partner operational priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_oper_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__partner_oper_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_oper_priority(self):
    self.__partner_oper_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="partner-oper-priority", rest_name="partner-oper-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_actor_priority(self):
    """
    Getter method for actor_priority, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_priority (uint32)

    YANG Description: The Actor Priority
    """
    return self.__actor_priority
      
  def _set_actor_priority(self, v, load=False):
    """
    Setter method for actor_priority, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_priority() directly.

    YANG Description: The Actor Priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="actor-priority", rest_name="actor-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="actor-priority", rest_name="actor-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__actor_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_priority(self):
    self.__actor_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), is_leaf=True, yang_name="actor-priority", rest_name="actor-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_receive_machine_state(self):
    """
    Getter method for receive_machine_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/receive_machine_state (enumeration)

    YANG Description: The state of the 'Receive Machine'
    """
    return self.__receive_machine_state
      
  def _set_receive_machine_state(self, v, load=False):
    """
    Setter method for receive_machine_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/receive_machine_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_receive_machine_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_receive_machine_state() directly.

    YANG Description: The state of the 'Receive Machine'
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-disabled': {'value': 4}, u'unknown': {'value': 1}, u'lacp-disabled': {'value': 5}, u'invalid': {'value': 2}, u'current': {'value': 8}, u'defaulted': {'value': 7}, u'initialize': {'value': 3}, u'expired': {'value': 6}},), is_leaf=True, yang_name="receive-machine-state", rest_name="receive-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """receive_machine_state must be of a type compatible with enumeration""",
          'defined-type': "brocade-lag:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-disabled': {'value': 4}, u'unknown': {'value': 1}, u'lacp-disabled': {'value': 5}, u'invalid': {'value': 2}, u'current': {'value': 8}, u'defaulted': {'value': 7}, u'initialize': {'value': 3}, u'expired': {'value': 6}},), is_leaf=True, yang_name="receive-machine-state", rest_name="receive-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)""",
        })

    self.__receive_machine_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_receive_machine_state(self):
    self.__receive_machine_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-disabled': {'value': 4}, u'unknown': {'value': 1}, u'lacp-disabled': {'value': 5}, u'invalid': {'value': 2}, u'current': {'value': 8}, u'defaulted': {'value': 7}, u'initialize': {'value': 3}, u'expired': {'value': 6}},), is_leaf=True, yang_name="receive-machine-state", rest_name="receive-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)


  def _get_periodic_transmission_machine_state(self):
    """
    Getter method for periodic_transmission_machine_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/periodic_transmission_machine_state (enumeration)

    YANG Description: The state of the 'Periodic Transmission
machine'
    """
    return self.__periodic_transmission_machine_state
      
  def _set_periodic_transmission_machine_state(self, v, load=False):
    """
    Setter method for periodic_transmission_machine_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/periodic_transmission_machine_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_periodic_transmission_machine_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_periodic_transmission_machine_state() directly.

    YANG Description: The state of the 'Periodic Transmission
machine'
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fast-periodic': {'value': 4}, u'unknown': {'value': 1}, u'no-periodic': {'value': 3}, u'slow-periodic': {'value': 5}, u'periodic': {'value': 6}, u'invalid': {'value': 2}},), is_leaf=True, yang_name="periodic-transmission-machine-state", rest_name="periodic-transmission-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """periodic_transmission_machine_state must be of a type compatible with enumeration""",
          'defined-type': "brocade-lag:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fast-periodic': {'value': 4}, u'unknown': {'value': 1}, u'no-periodic': {'value': 3}, u'slow-periodic': {'value': 5}, u'periodic': {'value': 6}, u'invalid': {'value': 2}},), is_leaf=True, yang_name="periodic-transmission-machine-state", rest_name="periodic-transmission-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)""",
        })

    self.__periodic_transmission_machine_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_periodic_transmission_machine_state(self):
    self.__periodic_transmission_machine_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fast-periodic': {'value': 4}, u'unknown': {'value': 1}, u'no-periodic': {'value': 3}, u'slow-periodic': {'value': 5}, u'periodic': {'value': 6}, u'invalid': {'value': 2}},), is_leaf=True, yang_name="periodic-transmission-machine-state", rest_name="periodic-transmission-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)


  def _get_mux_machine_state(self):
    """
    Getter method for mux_machine_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/mux_machine_state (enumeration)

    YANG Description: The state of the 'Mux machine'
    """
    return self.__mux_machine_state
      
  def _set_mux_machine_state(self, v, load=False):
    """
    Setter method for mux_machine_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/mux_machine_state (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mux_machine_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mux_machine_state() directly.

    YANG Description: The state of the 'Mux machine'
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 5}, u'generated-mark': {'value': 8}, u'deskew-not-ok': {'value': 12}, u'calculate-deskew': {'value': 9}, u'collecting-distributing': {'value': 7}, u'unknown': {'value': 1}, u'deskew-ok': {'value': 11}, u'attached': {'value': 4}, u'distributing': {'value': 6}, u'waiting': {'value': 3}, u'waiting-remote-deskew': {'value': 10}, u'detached': {'value': 2}},), is_leaf=True, yang_name="mux-machine-state", rest_name="mux-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mux_machine_state must be of a type compatible with enumeration""",
          'defined-type': "brocade-lag:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 5}, u'generated-mark': {'value': 8}, u'deskew-not-ok': {'value': 12}, u'calculate-deskew': {'value': 9}, u'collecting-distributing': {'value': 7}, u'unknown': {'value': 1}, u'deskew-ok': {'value': 11}, u'attached': {'value': 4}, u'distributing': {'value': 6}, u'waiting': {'value': 3}, u'waiting-remote-deskew': {'value': 10}, u'detached': {'value': 2}},), is_leaf=True, yang_name="mux-machine-state", rest_name="mux-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)""",
        })

    self.__mux_machine_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mux_machine_state(self):
    self.__mux_machine_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 5}, u'generated-mark': {'value': 8}, u'deskew-not-ok': {'value': 12}, u'calculate-deskew': {'value': 9}, u'collecting-distributing': {'value': 7}, u'unknown': {'value': 1}, u'deskew-ok': {'value': 11}, u'attached': {'value': 4}, u'distributing': {'value': 6}, u'waiting': {'value': 3}, u'waiting-remote-deskew': {'value': 10}, u'detached': {'value': 2}},), is_leaf=True, yang_name="mux-machine-state", rest_name="mux-machine-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='enumeration', is_config=True)


  def _get_admin_state(self):
    """
    Getter method for admin_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/admin_state (lacp-state)

    YANG Description: The Admin state
    """
    return self.__admin_state
      
  def _set_admin_state(self, v, load=False):
    """
    Setter method for admin_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/admin_state (lacp-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_state() directly.

    YANG Description: The Admin state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_state must be of a type compatible with lacp-state""",
          'defined-type': "brocade-lag:lacp-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)""",
        })

    self.__admin_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_state(self):
    self.__admin_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)


  def _get_oper_state(self):
    """
    Getter method for oper_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/oper_state (lacp-state)

    YANG Description: The Operational state
    """
    return self.__oper_state
      
  def _set_oper_state(self, v, load=False):
    """
    Setter method for oper_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/oper_state (lacp-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_state() directly.

    YANG Description: The Operational state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_state must be of a type compatible with lacp-state""",
          'defined-type': "brocade-lag:lacp-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)""",
        })

    self.__oper_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_state(self):
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)


  def _get_partner_oper_state(self):
    """
    Getter method for partner_oper_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_oper_state (lacp-state)

    YANG Description: The Partner Operational state
    """
    return self.__partner_oper_state
      
  def _set_partner_oper_state(self, v, load=False):
    """
    Setter method for partner_oper_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_oper_state (lacp-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_oper_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_oper_state() directly.

    YANG Description: The Partner Operational state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="partner-oper-state", rest_name="partner-oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_oper_state must be of a type compatible with lacp-state""",
          'defined-type': "brocade-lag:lacp-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="partner-oper-state", rest_name="partner-oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)""",
        })

    self.__partner_oper_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_oper_state(self):
    self.__partner_oper_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'collecting': {'value': 4}, u'aggregation': {'value': 2}, u'distributing': {'value': 5}, u'synchronization': {'value': 3}, u'defaulted': {'value': 6}, u'timeout': {'value': 1}, u'activity': {'value': 0}, u'expired': {'value': 7}},), is_leaf=True, yang_name="partner-oper-state", rest_name="partner-oper-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='lacp-state', is_config=True)


  def _get_partner_oper_port(self):
    """
    Getter method for partner_oper_port, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_oper_port (uint64)

    YANG Description: The Partner Operational port
    """
    return self.__partner_oper_port
      
  def _set_partner_oper_port(self, v, load=False):
    """
    Setter method for partner_oper_port, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_oper_port (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_oper_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_oper_port() directly.

    YANG Description: The Partner Operational port
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="partner-oper-port", rest_name="partner-oper-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_oper_port must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="partner-oper-port", rest_name="partner-oper-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)""",
        })

    self.__partner_oper_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_oper_port(self):
    self.__partner_oper_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="partner-oper-port", rest_name="partner-oper-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint64', is_config=True)


  def _get_actor_chip_number(self):
    """
    Getter method for actor_chip_number, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_chip_number (uint32)

    YANG Description: The actor chip number
    """
    return self.__actor_chip_number
      
  def _set_actor_chip_number(self, v, load=False):
    """
    Setter method for actor_chip_number, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_chip_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_chip_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_chip_number() directly.

    YANG Description: The actor chip number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-chip-number", rest_name="actor-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_chip_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-chip-number", rest_name="actor-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__actor_chip_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_chip_number(self):
    self.__actor_chip_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-chip-number", rest_name="actor-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_actor_max_deskew(self):
    """
    Getter method for actor_max_deskew, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_max_deskew (uint32)

    YANG Description: The actor maximum deskew
    """
    return self.__actor_max_deskew
      
  def _set_actor_max_deskew(self, v, load=False):
    """
    Setter method for actor_max_deskew, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_max_deskew (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_max_deskew is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_max_deskew() directly.

    YANG Description: The actor maximum deskew
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-max-deskew", rest_name="actor-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_max_deskew must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-max-deskew", rest_name="actor-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__actor_max_deskew = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_max_deskew(self):
    self.__actor_max_deskew = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="actor-max-deskew", rest_name="actor-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_partner_chip_number(self):
    """
    Getter method for partner_chip_number, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_chip_number (uint32)

    YANG Description: The actor chip number
    """
    return self.__partner_chip_number
      
  def _set_partner_chip_number(self, v, load=False):
    """
    Setter method for partner_chip_number, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_chip_number (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_chip_number is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_chip_number() directly.

    YANG Description: The actor chip number
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-chip-number", rest_name="partner-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_chip_number must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-chip-number", rest_name="partner-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__partner_chip_number = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_chip_number(self):
    self.__partner_chip_number = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-chip-number", rest_name="partner-chip-number", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_partner_max_deskew(self):
    """
    Getter method for partner_max_deskew, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_max_deskew (uint32)

    YANG Description: The partner maximum deskew
    """
    return self.__partner_max_deskew
      
  def _set_partner_max_deskew(self, v, load=False):
    """
    Setter method for partner_max_deskew, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_max_deskew (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_max_deskew is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_max_deskew() directly.

    YANG Description: The partner maximum deskew
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-max-deskew", rest_name="partner-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_max_deskew must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-max-deskew", rest_name="partner-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)""",
        })

    self.__partner_max_deskew = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_max_deskew(self):
    self.__partner_max_deskew = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="partner-max-deskew", rest_name="partner-max-deskew", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='uint32', is_config=True)


  def _get_actor_brcd_state(self):
    """
    Getter method for actor_brcd_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_brcd_state (brcd-trunk-states)

    YANG Description: Actor brcd trunk state
    """
    return self.__actor_brcd_state
      
  def _set_actor_brcd_state(self, v, load=False):
    """
    Setter method for actor_brcd_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/actor_brcd_state (brcd-trunk-states)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_actor_brcd_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_actor_brcd_state() directly.

    YANG Description: Actor brcd trunk state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="actor-brcd-state", rest_name="actor-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """actor_brcd_state must be of a type compatible with brcd-trunk-states""",
          'defined-type': "brocade-lag:brcd-trunk-states",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="actor-brcd-state", rest_name="actor-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)""",
        })

    self.__actor_brcd_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_actor_brcd_state(self):
    self.__actor_brcd_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="actor-brcd-state", rest_name="actor-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)


  def _get_partner_brcd_state(self):
    """
    Getter method for partner_brcd_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_brcd_state (brcd-trunk-states)

    YANG Description: partner brcd trunk state
    """
    return self.__partner_brcd_state
      
  def _set_partner_brcd_state(self, v, load=False):
    """
    Setter method for partner_brcd_state, mapped from YANG variable /brocade_lag_rpc/get_portchannel_info_by_intf/output/lacp/partner_brcd_state (brcd-trunk-states)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partner_brcd_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partner_brcd_state() directly.

    YANG Description: partner brcd trunk state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="partner-brcd-state", rest_name="partner-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partner_brcd_state must be of a type compatible with brcd-trunk-states""",
          'defined-type': "brocade-lag:brcd-trunk-states",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="partner-brcd-state", rest_name="partner-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)""",
        })

    self.__partner_brcd_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partner_brcd_state(self):
    self.__partner_brcd_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'deskew-not-ok': {'value': 3}, u'deskew-ok': {'value': 2}, u'port-attached': {'value': 4}, u'marker-generated': {'value': 0}, u'deskew-calculation-completed': {'value': 1}},), is_leaf=True, yang_name="partner-brcd-state", rest_name="partner-brcd-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-lag', defining_module='brocade-lag', yang_type='brcd-trunk-states', is_config=True)

  interface_type = __builtin__.property(_get_interface_type, _set_interface_type)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  actor_port = __builtin__.property(_get_actor_port, _set_actor_port)
  admin_key = __builtin__.property(_get_admin_key, _set_admin_key)
  oper_key = __builtin__.property(_get_oper_key, _set_oper_key)
  actor_system_id = __builtin__.property(_get_actor_system_id, _set_actor_system_id)
  partner_system_id = __builtin__.property(_get_partner_system_id, _set_partner_system_id)
  system_priority = __builtin__.property(_get_system_priority, _set_system_priority)
  partner_oper_priority = __builtin__.property(_get_partner_oper_priority, _set_partner_oper_priority)
  actor_priority = __builtin__.property(_get_actor_priority, _set_actor_priority)
  receive_machine_state = __builtin__.property(_get_receive_machine_state, _set_receive_machine_state)
  periodic_transmission_machine_state = __builtin__.property(_get_periodic_transmission_machine_state, _set_periodic_transmission_machine_state)
  mux_machine_state = __builtin__.property(_get_mux_machine_state, _set_mux_machine_state)
  admin_state = __builtin__.property(_get_admin_state, _set_admin_state)
  oper_state = __builtin__.property(_get_oper_state, _set_oper_state)
  partner_oper_state = __builtin__.property(_get_partner_oper_state, _set_partner_oper_state)
  partner_oper_port = __builtin__.property(_get_partner_oper_port, _set_partner_oper_port)
  actor_chip_number = __builtin__.property(_get_actor_chip_number, _set_actor_chip_number)
  actor_max_deskew = __builtin__.property(_get_actor_max_deskew, _set_actor_max_deskew)
  partner_chip_number = __builtin__.property(_get_partner_chip_number, _set_partner_chip_number)
  partner_max_deskew = __builtin__.property(_get_partner_max_deskew, _set_partner_max_deskew)
  actor_brcd_state = __builtin__.property(_get_actor_brcd_state, _set_actor_brcd_state)
  partner_brcd_state = __builtin__.property(_get_partner_brcd_state, _set_partner_brcd_state)


  _pyangbind_elements = {'interface_type': interface_type, 'interface_name': interface_name, 'actor_port': actor_port, 'admin_key': admin_key, 'oper_key': oper_key, 'actor_system_id': actor_system_id, 'partner_system_id': partner_system_id, 'system_priority': system_priority, 'partner_oper_priority': partner_oper_priority, 'actor_priority': actor_priority, 'receive_machine_state': receive_machine_state, 'periodic_transmission_machine_state': periodic_transmission_machine_state, 'mux_machine_state': mux_machine_state, 'admin_state': admin_state, 'oper_state': oper_state, 'partner_oper_state': partner_oper_state, 'partner_oper_port': partner_oper_port, 'actor_chip_number': actor_chip_number, 'actor_max_deskew': actor_max_deskew, 'partner_chip_number': partner_chip_number, 'partner_max_deskew': partner_max_deskew, 'actor_brcd_state': actor_brcd_state, 'partner_brcd_state': partner_brcd_state, }


