
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class links(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysmgr-operational - based on the path /sfm-state/links. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SFM Links
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__links_count','__links_sfmid','__links_feid','__links_crc','__links_size','__links_codegroup','__links_misalign','__links_lock','__links_accept','__links_error','__links_errorcount',)

  _yang_name = 'links'
  _rest_name = 'links'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__links_lock = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-lock", rest_name="links-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-count", rest_name="links-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_errorcount = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-errorcount", rest_name="links-errorcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_accept = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-accept", rest_name="links-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_misalign = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-misalign", rest_name="links-misalign", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_codegroup = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-codegroup", rest_name="links-codegroup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-sfmid", rest_name="links-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_size = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-size", rest_name="links-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_error = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-error", rest_name="links-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-feid", rest_name="links-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__links_crc = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-crc", rest_name="links-crc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sfm-state', u'links']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'sfm-state', u'links']

  def _get_links_count(self):
    """
    Getter method for links_count, mapped from YANG variable /sfm_state/links/links_count (uint32)

    YANG Description: SFM Links
    """
    return self.__links_count
      
  def _set_links_count(self, v, load=False):
    """
    Setter method for links_count, mapped from YANG variable /sfm_state/links/links_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_count() directly.

    YANG Description: SFM Links
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-count", rest_name="links-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-count", rest_name="links-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_count(self):
    self.__links_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-count", rest_name="links-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_sfmid(self):
    """
    Getter method for links_sfmid, mapped from YANG variable /sfm_state/links/links_sfmid (uint32)

    YANG Description: SFM SFMID
    """
    return self.__links_sfmid
      
  def _set_links_sfmid(self, v, load=False):
    """
    Setter method for links_sfmid, mapped from YANG variable /sfm_state/links/links_sfmid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_sfmid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_sfmid() directly.

    YANG Description: SFM SFMID
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-sfmid", rest_name="links-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_sfmid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-sfmid", rest_name="links-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_sfmid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_sfmid(self):
    self.__links_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-sfmid", rest_name="links-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_feid(self):
    """
    Getter method for links_feid, mapped from YANG variable /sfm_state/links/links_feid (uint32)

    YANG Description: SFM SFMID
    """
    return self.__links_feid
      
  def _set_links_feid(self, v, load=False):
    """
    Setter method for links_feid, mapped from YANG variable /sfm_state/links/links_feid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_feid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_feid() directly.

    YANG Description: SFM SFMID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-feid", rest_name="links-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_feid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-feid", rest_name="links-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_feid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_feid(self):
    self.__links_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="links-feid", rest_name="links-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_crc(self):
    """
    Getter method for links_crc, mapped from YANG variable /sfm_state/links/links_crc (uint32)

    YANG Description: SFM CRC Links
    """
    return self.__links_crc
      
  def _set_links_crc(self, v, load=False):
    """
    Setter method for links_crc, mapped from YANG variable /sfm_state/links/links_crc (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_crc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_crc() directly.

    YANG Description: SFM CRC Links
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-crc", rest_name="links-crc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_crc must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-crc", rest_name="links-crc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_crc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_crc(self):
    self.__links_crc = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-crc", rest_name="links-crc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_size(self):
    """
    Getter method for links_size, mapped from YANG variable /sfm_state/links/links_size (uint32)

    YANG Description: SFM Links Size Error
    """
    return self.__links_size
      
  def _set_links_size(self, v, load=False):
    """
    Setter method for links_size, mapped from YANG variable /sfm_state/links/links_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_size() directly.

    YANG Description: SFM Links Size Error
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-size", rest_name="links-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-size", rest_name="links-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_size(self):
    self.__links_size = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-size", rest_name="links-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_codegroup(self):
    """
    Getter method for links_codegroup, mapped from YANG variable /sfm_state/links/links_codegroup (uint32)

    YANG Description: SFM Links Code Group
    """
    return self.__links_codegroup
      
  def _set_links_codegroup(self, v, load=False):
    """
    Setter method for links_codegroup, mapped from YANG variable /sfm_state/links/links_codegroup (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_codegroup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_codegroup() directly.

    YANG Description: SFM Links Code Group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-codegroup", rest_name="links-codegroup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_codegroup must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-codegroup", rest_name="links-codegroup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_codegroup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_codegroup(self):
    self.__links_codegroup = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-codegroup", rest_name="links-codegroup", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_misalign(self):
    """
    Getter method for links_misalign, mapped from YANG variable /sfm_state/links/links_misalign (uint32)

    YANG Description: SFM Links Misalign
    """
    return self.__links_misalign
      
  def _set_links_misalign(self, v, load=False):
    """
    Setter method for links_misalign, mapped from YANG variable /sfm_state/links/links_misalign (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_misalign is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_misalign() directly.

    YANG Description: SFM Links Misalign
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-misalign", rest_name="links-misalign", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_misalign must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-misalign", rest_name="links-misalign", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_misalign = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_misalign(self):
    self.__links_misalign = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-misalign", rest_name="links-misalign", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_lock(self):
    """
    Getter method for links_lock, mapped from YANG variable /sfm_state/links/links_lock (uint32)

    YANG Description: SFM Links Signal Lock
    """
    return self.__links_lock
      
  def _set_links_lock(self, v, load=False):
    """
    Setter method for links_lock, mapped from YANG variable /sfm_state/links/links_lock (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_lock is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_lock() directly.

    YANG Description: SFM Links Signal Lock
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-lock", rest_name="links-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_lock must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-lock", rest_name="links-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_lock = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_lock(self):
    self.__links_lock = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-lock", rest_name="links-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_accept(self):
    """
    Getter method for links_accept, mapped from YANG variable /sfm_state/links/links_accept (uint32)

    YANG Description: SFM Links Signal Accept
    """
    return self.__links_accept
      
  def _set_links_accept(self, v, load=False):
    """
    Setter method for links_accept, mapped from YANG variable /sfm_state/links/links_accept (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_accept is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_accept() directly.

    YANG Description: SFM Links Signal Accept
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-accept", rest_name="links-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_accept must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-accept", rest_name="links-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_accept = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_accept(self):
    self.__links_accept = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-accept", rest_name="links-accept", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_error(self):
    """
    Getter method for links_error, mapped from YANG variable /sfm_state/links/links_error (uint32)

    YANG Description: SFM Links Error
    """
    return self.__links_error
      
  def _set_links_error(self, v, load=False):
    """
    Setter method for links_error, mapped from YANG variable /sfm_state/links/links_error (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_error() directly.

    YANG Description: SFM Links Error
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-error", rest_name="links-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_error must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-error", rest_name="links-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_error(self):
    self.__links_error = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-error", rest_name="links-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_links_errorcount(self):
    """
    Getter method for links_errorcount, mapped from YANG variable /sfm_state/links/links_errorcount (uint32)

    YANG Description: SFM Links Error Count
    """
    return self.__links_errorcount
      
  def _set_links_errorcount(self, v, load=False):
    """
    Setter method for links_errorcount, mapped from YANG variable /sfm_state/links/links_errorcount (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_links_errorcount is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_links_errorcount() directly.

    YANG Description: SFM Links Error Count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-errorcount", rest_name="links-errorcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """links_errorcount must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-errorcount", rest_name="links-errorcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__links_errorcount = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_links_errorcount(self):
    self.__links_errorcount = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="links-errorcount", rest_name="links-errorcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

  links_count = __builtin__.property(_get_links_count)
  links_sfmid = __builtin__.property(_get_links_sfmid)
  links_feid = __builtin__.property(_get_links_feid)
  links_crc = __builtin__.property(_get_links_crc)
  links_size = __builtin__.property(_get_links_size)
  links_codegroup = __builtin__.property(_get_links_codegroup)
  links_misalign = __builtin__.property(_get_links_misalign)
  links_lock = __builtin__.property(_get_links_lock)
  links_accept = __builtin__.property(_get_links_accept)
  links_error = __builtin__.property(_get_links_error)
  links_errorcount = __builtin__.property(_get_links_errorcount)


  _pyangbind_elements = {'links_count': links_count, 'links_sfmid': links_sfmid, 'links_feid': links_feid, 'links_crc': links_crc, 'links_size': links_size, 'links_codegroup': links_codegroup, 'links_misalign': links_misalign, 'links_lock': links_lock, 'links_accept': links_accept, 'links_error': links_error, 'links_errorcount': links_errorcount, }


