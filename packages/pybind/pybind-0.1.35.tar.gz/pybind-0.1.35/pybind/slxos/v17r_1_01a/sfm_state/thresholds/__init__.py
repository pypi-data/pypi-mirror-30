
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class thresholds(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysmgr-operational - based on the path /sfm-state/thresholds. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SFM Links Thresholds
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__thresholds_sfmid','__thresholds_feid','__thresholds_port','__thresholds_pipe','__thresholds_rxthreshold','__thresholds_txthreshold','__thresholds_midthreshold',)

  _yang_name = 'thresholds'
  _rest_name = 'thresholds'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__thresholds_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-sfmid", rest_name="thresholds-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__thresholds_pipe = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-pipe", rest_name="thresholds-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__thresholds_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-port", rest_name="thresholds-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__thresholds_txthreshold = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-txthreshold", rest_name="thresholds-txthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__thresholds_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-feid", rest_name="thresholds-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__thresholds_midthreshold = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-midthreshold", rest_name="thresholds-midthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__thresholds_rxthreshold = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-rxthreshold", rest_name="thresholds-rxthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sfm-state', u'thresholds']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'sfm-state', u'thresholds']

  def _get_thresholds_sfmid(self):
    """
    Getter method for thresholds_sfmid, mapped from YANG variable /sfm_state/thresholds/thresholds_sfmid (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_sfmid
      
  def _set_thresholds_sfmid(self, v, load=False):
    """
    Setter method for thresholds_sfmid, mapped from YANG variable /sfm_state/thresholds/thresholds_sfmid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_sfmid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_sfmid() directly.

    YANG Description: SFM Links Thresholds
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-sfmid", rest_name="thresholds-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_sfmid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-sfmid", rest_name="thresholds-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_sfmid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_sfmid(self):
    self.__thresholds_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-sfmid", rest_name="thresholds-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_thresholds_feid(self):
    """
    Getter method for thresholds_feid, mapped from YANG variable /sfm_state/thresholds/thresholds_feid (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_feid
      
  def _set_thresholds_feid(self, v, load=False):
    """
    Setter method for thresholds_feid, mapped from YANG variable /sfm_state/thresholds/thresholds_feid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_feid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_feid() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-feid", rest_name="thresholds-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_feid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-feid", rest_name="thresholds-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_feid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_feid(self):
    self.__thresholds_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-feid", rest_name="thresholds-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_thresholds_port(self):
    """
    Getter method for thresholds_port, mapped from YANG variable /sfm_state/thresholds/thresholds_port (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_port
      
  def _set_thresholds_port(self, v, load=False):
    """
    Setter method for thresholds_port, mapped from YANG variable /sfm_state/thresholds/thresholds_port (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_port() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-port", rest_name="thresholds-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_port must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-port", rest_name="thresholds-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_port(self):
    self.__thresholds_port = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="thresholds-port", rest_name="thresholds-port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_thresholds_pipe(self):
    """
    Getter method for thresholds_pipe, mapped from YANG variable /sfm_state/thresholds/thresholds_pipe (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_pipe
      
  def _set_thresholds_pipe(self, v, load=False):
    """
    Setter method for thresholds_pipe, mapped from YANG variable /sfm_state/thresholds/thresholds_pipe (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_pipe is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_pipe() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-pipe", rest_name="thresholds-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_pipe must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-pipe", rest_name="thresholds-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_pipe = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_pipe(self):
    self.__thresholds_pipe = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-pipe", rest_name="thresholds-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_thresholds_rxthreshold(self):
    """
    Getter method for thresholds_rxthreshold, mapped from YANG variable /sfm_state/thresholds/thresholds_rxthreshold (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_rxthreshold
      
  def _set_thresholds_rxthreshold(self, v, load=False):
    """
    Setter method for thresholds_rxthreshold, mapped from YANG variable /sfm_state/thresholds/thresholds_rxthreshold (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_rxthreshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_rxthreshold() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-rxthreshold", rest_name="thresholds-rxthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_rxthreshold must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-rxthreshold", rest_name="thresholds-rxthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_rxthreshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_rxthreshold(self):
    self.__thresholds_rxthreshold = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-rxthreshold", rest_name="thresholds-rxthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_thresholds_txthreshold(self):
    """
    Getter method for thresholds_txthreshold, mapped from YANG variable /sfm_state/thresholds/thresholds_txthreshold (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_txthreshold
      
  def _set_thresholds_txthreshold(self, v, load=False):
    """
    Setter method for thresholds_txthreshold, mapped from YANG variable /sfm_state/thresholds/thresholds_txthreshold (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_txthreshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_txthreshold() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-txthreshold", rest_name="thresholds-txthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_txthreshold must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-txthreshold", rest_name="thresholds-txthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_txthreshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_txthreshold(self):
    self.__thresholds_txthreshold = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-txthreshold", rest_name="thresholds-txthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_thresholds_midthreshold(self):
    """
    Getter method for thresholds_midthreshold, mapped from YANG variable /sfm_state/thresholds/thresholds_midthreshold (uint32)

    YANG Description: SFM Links Thresholds
    """
    return self.__thresholds_midthreshold
      
  def _set_thresholds_midthreshold(self, v, load=False):
    """
    Setter method for thresholds_midthreshold, mapped from YANG variable /sfm_state/thresholds/thresholds_midthreshold (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresholds_midthreshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresholds_midthreshold() directly.

    YANG Description: SFM Links Thresholds
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-midthreshold", rest_name="thresholds-midthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresholds_midthreshold must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-midthreshold", rest_name="thresholds-midthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__thresholds_midthreshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresholds_midthreshold(self):
    self.__thresholds_midthreshold = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="thresholds-midthreshold", rest_name="thresholds-midthreshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

  thresholds_sfmid = __builtin__.property(_get_thresholds_sfmid)
  thresholds_feid = __builtin__.property(_get_thresholds_feid)
  thresholds_port = __builtin__.property(_get_thresholds_port)
  thresholds_pipe = __builtin__.property(_get_thresholds_pipe)
  thresholds_rxthreshold = __builtin__.property(_get_thresholds_rxthreshold)
  thresholds_txthreshold = __builtin__.property(_get_thresholds_txthreshold)
  thresholds_midthreshold = __builtin__.property(_get_thresholds_midthreshold)


  _pyangbind_elements = {'thresholds_sfmid': thresholds_sfmid, 'thresholds_feid': thresholds_feid, 'thresholds_port': thresholds_port, 'thresholds_pipe': thresholds_pipe, 'thresholds_rxthreshold': thresholds_rxthreshold, 'thresholds_txthreshold': thresholds_txthreshold, 'thresholds_midthreshold': thresholds_midthreshold, }


