
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class statistics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sysmgr-operational - based on the path /sfm-state/statistics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: SFM Statistics
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__statistics_sfmid','__statistics_feid','__statistics_pipe','__statistics_dch_total_in','__statistics_dch_total_out','__statistics_dch_fifo_discard','__statistics_dch_reorder_discard','__statistics_dch_unreach_discard','__statistics_dch_max_q_size','__statistics_dcm_tot','__statistics_dcm_drop','__statistics_dcm_max','__statistics_dcl_tot_in','__statistics_dcl_tot_out','__statistics_dcl_dropped','__statistics_dcl_max',)

  _yang_name = 'statistics'
  _rest_name = 'statistics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__statistics_dch_reorder_discard = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-reorder-discard", rest_name="statistics-dch-reorder-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcl_tot_in = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-in", rest_name="statistics-dcl-tot-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-sfmid", rest_name="statistics-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcm_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-max", rest_name="statistics-dcm-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dch_max_q_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-max-q-size", rest_name="statistics-dch-max-q-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcm_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-drop", rest_name="statistics-dcm-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcl_tot_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-out", rest_name="statistics-dcl-tot-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dch_unreach_discard = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-unreach-discard", rest_name="statistics-dch-unreach-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcl_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-dropped", rest_name="statistics-dcl-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dch_total_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-out", rest_name="statistics-dch-total-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcl_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-max", rest_name="statistics-dcl-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dch_fifo_discard = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-fifo-discard", rest_name="statistics-dch-fifo-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-feid", rest_name="statistics-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dcm_tot = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-tot", rest_name="statistics-dcm-tot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_dch_total_in = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-in", rest_name="statistics-dch-total-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    self.__statistics_pipe = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-pipe", rest_name="statistics-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'sfm-state', u'statistics']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'sfm-state', u'statistics']

  def _get_statistics_sfmid(self):
    """
    Getter method for statistics_sfmid, mapped from YANG variable /sfm_state/statistics/statistics_sfmid (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_sfmid
      
  def _set_statistics_sfmid(self, v, load=False):
    """
    Setter method for statistics_sfmid, mapped from YANG variable /sfm_state/statistics/statistics_sfmid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_sfmid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_sfmid() directly.

    YANG Description: SFM Statistics
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-sfmid", rest_name="statistics-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_sfmid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-sfmid", rest_name="statistics-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_sfmid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_sfmid(self):
    self.__statistics_sfmid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-sfmid", rest_name="statistics-sfmid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_feid(self):
    """
    Getter method for statistics_feid, mapped from YANG variable /sfm_state/statistics/statistics_feid (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_feid
      
  def _set_statistics_feid(self, v, load=False):
    """
    Setter method for statistics_feid, mapped from YANG variable /sfm_state/statistics/statistics_feid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_feid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_feid() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-feid", rest_name="statistics-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_feid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-feid", rest_name="statistics-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_feid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_feid(self):
    self.__statistics_feid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-feid", rest_name="statistics-feid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_pipe(self):
    """
    Getter method for statistics_pipe, mapped from YANG variable /sfm_state/statistics/statistics_pipe (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_pipe
      
  def _set_statistics_pipe(self, v, load=False):
    """
    Setter method for statistics_pipe, mapped from YANG variable /sfm_state/statistics/statistics_pipe (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_pipe is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_pipe() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-pipe", rest_name="statistics-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_pipe must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-pipe", rest_name="statistics-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_pipe = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_pipe(self):
    self.__statistics_pipe = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-pipe", rest_name="statistics-pipe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dch_total_in(self):
    """
    Getter method for statistics_dch_total_in, mapped from YANG variable /sfm_state/statistics/statistics_dch_total_in (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dch_total_in
      
  def _set_statistics_dch_total_in(self, v, load=False):
    """
    Setter method for statistics_dch_total_in, mapped from YANG variable /sfm_state/statistics/statistics_dch_total_in (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dch_total_in is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dch_total_in() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-in", rest_name="statistics-dch-total-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dch_total_in must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-in", rest_name="statistics-dch-total-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dch_total_in = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dch_total_in(self):
    self.__statistics_dch_total_in = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-in", rest_name="statistics-dch-total-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dch_total_out(self):
    """
    Getter method for statistics_dch_total_out, mapped from YANG variable /sfm_state/statistics/statistics_dch_total_out (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dch_total_out
      
  def _set_statistics_dch_total_out(self, v, load=False):
    """
    Setter method for statistics_dch_total_out, mapped from YANG variable /sfm_state/statistics/statistics_dch_total_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dch_total_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dch_total_out() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-out", rest_name="statistics-dch-total-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dch_total_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-out", rest_name="statistics-dch-total-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dch_total_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dch_total_out(self):
    self.__statistics_dch_total_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-total-out", rest_name="statistics-dch-total-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dch_fifo_discard(self):
    """
    Getter method for statistics_dch_fifo_discard, mapped from YANG variable /sfm_state/statistics/statistics_dch_fifo_discard (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dch_fifo_discard
      
  def _set_statistics_dch_fifo_discard(self, v, load=False):
    """
    Setter method for statistics_dch_fifo_discard, mapped from YANG variable /sfm_state/statistics/statistics_dch_fifo_discard (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dch_fifo_discard is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dch_fifo_discard() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-fifo-discard", rest_name="statistics-dch-fifo-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dch_fifo_discard must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-fifo-discard", rest_name="statistics-dch-fifo-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dch_fifo_discard = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dch_fifo_discard(self):
    self.__statistics_dch_fifo_discard = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-fifo-discard", rest_name="statistics-dch-fifo-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dch_reorder_discard(self):
    """
    Getter method for statistics_dch_reorder_discard, mapped from YANG variable /sfm_state/statistics/statistics_dch_reorder_discard (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dch_reorder_discard
      
  def _set_statistics_dch_reorder_discard(self, v, load=False):
    """
    Setter method for statistics_dch_reorder_discard, mapped from YANG variable /sfm_state/statistics/statistics_dch_reorder_discard (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dch_reorder_discard is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dch_reorder_discard() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-reorder-discard", rest_name="statistics-dch-reorder-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dch_reorder_discard must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-reorder-discard", rest_name="statistics-dch-reorder-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dch_reorder_discard = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dch_reorder_discard(self):
    self.__statistics_dch_reorder_discard = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-reorder-discard", rest_name="statistics-dch-reorder-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dch_unreach_discard(self):
    """
    Getter method for statistics_dch_unreach_discard, mapped from YANG variable /sfm_state/statistics/statistics_dch_unreach_discard (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dch_unreach_discard
      
  def _set_statistics_dch_unreach_discard(self, v, load=False):
    """
    Setter method for statistics_dch_unreach_discard, mapped from YANG variable /sfm_state/statistics/statistics_dch_unreach_discard (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dch_unreach_discard is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dch_unreach_discard() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-unreach-discard", rest_name="statistics-dch-unreach-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dch_unreach_discard must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-unreach-discard", rest_name="statistics-dch-unreach-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dch_unreach_discard = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dch_unreach_discard(self):
    self.__statistics_dch_unreach_discard = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-unreach-discard", rest_name="statistics-dch-unreach-discard", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dch_max_q_size(self):
    """
    Getter method for statistics_dch_max_q_size, mapped from YANG variable /sfm_state/statistics/statistics_dch_max_q_size (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dch_max_q_size
      
  def _set_statistics_dch_max_q_size(self, v, load=False):
    """
    Setter method for statistics_dch_max_q_size, mapped from YANG variable /sfm_state/statistics/statistics_dch_max_q_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dch_max_q_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dch_max_q_size() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-max-q-size", rest_name="statistics-dch-max-q-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dch_max_q_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-max-q-size", rest_name="statistics-dch-max-q-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dch_max_q_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dch_max_q_size(self):
    self.__statistics_dch_max_q_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dch-max-q-size", rest_name="statistics-dch-max-q-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcm_tot(self):
    """
    Getter method for statistics_dcm_tot, mapped from YANG variable /sfm_state/statistics/statistics_dcm_tot (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcm_tot
      
  def _set_statistics_dcm_tot(self, v, load=False):
    """
    Setter method for statistics_dcm_tot, mapped from YANG variable /sfm_state/statistics/statistics_dcm_tot (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcm_tot is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcm_tot() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-tot", rest_name="statistics-dcm-tot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcm_tot must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-tot", rest_name="statistics-dcm-tot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcm_tot = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcm_tot(self):
    self.__statistics_dcm_tot = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-tot", rest_name="statistics-dcm-tot", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcm_drop(self):
    """
    Getter method for statistics_dcm_drop, mapped from YANG variable /sfm_state/statistics/statistics_dcm_drop (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcm_drop
      
  def _set_statistics_dcm_drop(self, v, load=False):
    """
    Setter method for statistics_dcm_drop, mapped from YANG variable /sfm_state/statistics/statistics_dcm_drop (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcm_drop is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcm_drop() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-drop", rest_name="statistics-dcm-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcm_drop must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-drop", rest_name="statistics-dcm-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcm_drop = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcm_drop(self):
    self.__statistics_dcm_drop = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-drop", rest_name="statistics-dcm-drop", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcm_max(self):
    """
    Getter method for statistics_dcm_max, mapped from YANG variable /sfm_state/statistics/statistics_dcm_max (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcm_max
      
  def _set_statistics_dcm_max(self, v, load=False):
    """
    Setter method for statistics_dcm_max, mapped from YANG variable /sfm_state/statistics/statistics_dcm_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcm_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcm_max() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-max", rest_name="statistics-dcm-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcm_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-max", rest_name="statistics-dcm-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcm_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcm_max(self):
    self.__statistics_dcm_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcm-max", rest_name="statistics-dcm-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcl_tot_in(self):
    """
    Getter method for statistics_dcl_tot_in, mapped from YANG variable /sfm_state/statistics/statistics_dcl_tot_in (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcl_tot_in
      
  def _set_statistics_dcl_tot_in(self, v, load=False):
    """
    Setter method for statistics_dcl_tot_in, mapped from YANG variable /sfm_state/statistics/statistics_dcl_tot_in (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcl_tot_in is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcl_tot_in() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-in", rest_name="statistics-dcl-tot-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcl_tot_in must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-in", rest_name="statistics-dcl-tot-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcl_tot_in = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcl_tot_in(self):
    self.__statistics_dcl_tot_in = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-in", rest_name="statistics-dcl-tot-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcl_tot_out(self):
    """
    Getter method for statistics_dcl_tot_out, mapped from YANG variable /sfm_state/statistics/statistics_dcl_tot_out (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcl_tot_out
      
  def _set_statistics_dcl_tot_out(self, v, load=False):
    """
    Setter method for statistics_dcl_tot_out, mapped from YANG variable /sfm_state/statistics/statistics_dcl_tot_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcl_tot_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcl_tot_out() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-out", rest_name="statistics-dcl-tot-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcl_tot_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-out", rest_name="statistics-dcl-tot-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcl_tot_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcl_tot_out(self):
    self.__statistics_dcl_tot_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-tot-out", rest_name="statistics-dcl-tot-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcl_dropped(self):
    """
    Getter method for statistics_dcl_dropped, mapped from YANG variable /sfm_state/statistics/statistics_dcl_dropped (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcl_dropped
      
  def _set_statistics_dcl_dropped(self, v, load=False):
    """
    Setter method for statistics_dcl_dropped, mapped from YANG variable /sfm_state/statistics/statistics_dcl_dropped (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcl_dropped is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcl_dropped() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-dropped", rest_name="statistics-dcl-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcl_dropped must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-dropped", rest_name="statistics-dcl-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcl_dropped = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcl_dropped(self):
    self.__statistics_dcl_dropped = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-dropped", rest_name="statistics-dcl-dropped", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)


  def _get_statistics_dcl_max(self):
    """
    Getter method for statistics_dcl_max, mapped from YANG variable /sfm_state/statistics/statistics_dcl_max (uint32)

    YANG Description: SFM Statistics
    """
    return self.__statistics_dcl_max
      
  def _set_statistics_dcl_max(self, v, load=False):
    """
    Setter method for statistics_dcl_max, mapped from YANG variable /sfm_state/statistics/statistics_dcl_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics_dcl_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics_dcl_max() directly.

    YANG Description: SFM Statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-max", rest_name="statistics-dcl-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics_dcl_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-max", rest_name="statistics-dcl-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)""",
        })

    self.__statistics_dcl_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics_dcl_max(self):
    self.__statistics_dcl_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="statistics-dcl-max", rest_name="statistics-dcl-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-sysmgr-operational', defining_module='brocade-sysmgr-operational', yang_type='uint32', is_config=False)

  statistics_sfmid = __builtin__.property(_get_statistics_sfmid)
  statistics_feid = __builtin__.property(_get_statistics_feid)
  statistics_pipe = __builtin__.property(_get_statistics_pipe)
  statistics_dch_total_in = __builtin__.property(_get_statistics_dch_total_in)
  statistics_dch_total_out = __builtin__.property(_get_statistics_dch_total_out)
  statistics_dch_fifo_discard = __builtin__.property(_get_statistics_dch_fifo_discard)
  statistics_dch_reorder_discard = __builtin__.property(_get_statistics_dch_reorder_discard)
  statistics_dch_unreach_discard = __builtin__.property(_get_statistics_dch_unreach_discard)
  statistics_dch_max_q_size = __builtin__.property(_get_statistics_dch_max_q_size)
  statistics_dcm_tot = __builtin__.property(_get_statistics_dcm_tot)
  statistics_dcm_drop = __builtin__.property(_get_statistics_dcm_drop)
  statistics_dcm_max = __builtin__.property(_get_statistics_dcm_max)
  statistics_dcl_tot_in = __builtin__.property(_get_statistics_dcl_tot_in)
  statistics_dcl_tot_out = __builtin__.property(_get_statistics_dcl_tot_out)
  statistics_dcl_dropped = __builtin__.property(_get_statistics_dcl_dropped)
  statistics_dcl_max = __builtin__.property(_get_statistics_dcl_max)


  _pyangbind_elements = {'statistics_sfmid': statistics_sfmid, 'statistics_feid': statistics_feid, 'statistics_pipe': statistics_pipe, 'statistics_dch_total_in': statistics_dch_total_in, 'statistics_dch_total_out': statistics_dch_total_out, 'statistics_dch_fifo_discard': statistics_dch_fifo_discard, 'statistics_dch_reorder_discard': statistics_dch_reorder_discard, 'statistics_dch_unreach_discard': statistics_dch_unreach_discard, 'statistics_dch_max_q_size': statistics_dch_max_q_size, 'statistics_dcm_tot': statistics_dcm_tot, 'statistics_dcm_drop': statistics_dcm_drop, 'statistics_dcm_max': statistics_dcm_max, 'statistics_dcl_tot_in': statistics_dcl_tot_in, 'statistics_dcl_tot_out': statistics_dcl_tot_out, 'statistics_dcl_dropped': statistics_dcl_dropped, 'statistics_dcl_max': statistics_dcl_max, }


