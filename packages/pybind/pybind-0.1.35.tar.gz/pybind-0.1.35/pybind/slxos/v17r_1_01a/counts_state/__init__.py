
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import bad_lsp_log
class counts_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isis-operational - based on the path /counts-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: IS-IS Counters
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__areamis','__maxareamis','__badidlen','__seqskip','__seqerr','__l1dbol','__l2dbol','__ownpurge','__csnp_l1authfail','__csnp_l2authfail','__psnp_l1authfail','__psnp_l2authfail','__circ_l1authfail','__circ_l2authfail','__bad_lsp_log',)

  _yang_name = 'counts-state'
  _rest_name = 'counts-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__psnp_l2authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l2authfail", rest_name="psnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__circ_l1authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l1authfail", rest_name="circ-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__circ_l2authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l2authfail", rest_name="circ-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__maxareamis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxareamis", rest_name="maxareamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__bad_lsp_log = YANGDynClass(base=YANGListType("type_index",bad_lsp_log.bad_lsp_log, yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type-index', extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    self.__seqskip = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqskip", rest_name="seqskip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__csnp_l2authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l2authfail", rest_name="csnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__seqerr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqerr", rest_name="seqerr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l1dbol = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1dbol", rest_name="l1dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__csnp_l1authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l1authfail", rest_name="csnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__psnp_l1authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l1authfail", rest_name="psnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__l2dbol = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2dbol", rest_name="l2dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__areamis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="areamis", rest_name="areamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__ownpurge = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ownpurge", rest_name="ownpurge", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    self.__badidlen = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="badidlen", rest_name="badidlen", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'counts-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'counts-state']

  def _get_areamis(self):
    """
    Getter method for areamis, mapped from YANG variable /counts_state/areamis (uint32)

    YANG Description: Area Mismatch
    """
    return self.__areamis
      
  def _set_areamis(self, v, load=False):
    """
    Setter method for areamis, mapped from YANG variable /counts_state/areamis (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_areamis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_areamis() directly.

    YANG Description: Area Mismatch
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="areamis", rest_name="areamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """areamis must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="areamis", rest_name="areamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__areamis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_areamis(self):
    self.__areamis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="areamis", rest_name="areamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_maxareamis(self):
    """
    Getter method for maxareamis, mapped from YANG variable /counts_state/maxareamis (uint32)

    YANG Description: Max Area Mismatch
    """
    return self.__maxareamis
      
  def _set_maxareamis(self, v, load=False):
    """
    Setter method for maxareamis, mapped from YANG variable /counts_state/maxareamis (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_maxareamis is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_maxareamis() directly.

    YANG Description: Max Area Mismatch
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxareamis", rest_name="maxareamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """maxareamis must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxareamis", rest_name="maxareamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__maxareamis = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_maxareamis(self):
    self.__maxareamis = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="maxareamis", rest_name="maxareamis", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_badidlen(self):
    """
    Getter method for badidlen, mapped from YANG variable /counts_state/badidlen (uint32)

    YANG Description: System ID Length Mismatch
    """
    return self.__badidlen
      
  def _set_badidlen(self, v, load=False):
    """
    Setter method for badidlen, mapped from YANG variable /counts_state/badidlen (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_badidlen is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_badidlen() directly.

    YANG Description: System ID Length Mismatch
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="badidlen", rest_name="badidlen", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """badidlen must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="badidlen", rest_name="badidlen", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__badidlen = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_badidlen(self):
    self.__badidlen = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="badidlen", rest_name="badidlen", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_seqskip(self):
    """
    Getter method for seqskip, mapped from YANG variable /counts_state/seqskip (uint32)

    YANG Description: LSP Sequence Number Skipped
    """
    return self.__seqskip
      
  def _set_seqskip(self, v, load=False):
    """
    Setter method for seqskip, mapped from YANG variable /counts_state/seqskip (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seqskip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seqskip() directly.

    YANG Description: LSP Sequence Number Skipped
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqskip", rest_name="seqskip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seqskip must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqskip", rest_name="seqskip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__seqskip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seqskip(self):
    self.__seqskip = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqskip", rest_name="seqskip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_seqerr(self):
    """
    Getter method for seqerr, mapped from YANG variable /counts_state/seqerr (uint32)

    YANG Description: LSP Max Sequence Number Exceeded
    """
    return self.__seqerr
      
  def _set_seqerr(self, v, load=False):
    """
    Setter method for seqerr, mapped from YANG variable /counts_state/seqerr (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seqerr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seqerr() directly.

    YANG Description: LSP Max Sequence Number Exceeded
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqerr", rest_name="seqerr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seqerr must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqerr", rest_name="seqerr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__seqerr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seqerr(self):
    self.__seqerr = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seqerr", rest_name="seqerr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l1dbol(self):
    """
    Getter method for l1dbol, mapped from YANG variable /counts_state/l1dbol (uint32)

    YANG Description: Level-1 Database Overload
    """
    return self.__l1dbol
      
  def _set_l1dbol(self, v, load=False):
    """
    Setter method for l1dbol, mapped from YANG variable /counts_state/l1dbol (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l1dbol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l1dbol() directly.

    YANG Description: Level-1 Database Overload
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1dbol", rest_name="l1dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l1dbol must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1dbol", rest_name="l1dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l1dbol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l1dbol(self):
    self.__l1dbol = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l1dbol", rest_name="l1dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_l2dbol(self):
    """
    Getter method for l2dbol, mapped from YANG variable /counts_state/l2dbol (uint32)

    YANG Description: Level-2 Database Overload
    """
    return self.__l2dbol
      
  def _set_l2dbol(self, v, load=False):
    """
    Setter method for l2dbol, mapped from YANG variable /counts_state/l2dbol (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2dbol is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2dbol() directly.

    YANG Description: Level-2 Database Overload
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2dbol", rest_name="l2dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2dbol must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2dbol", rest_name="l2dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__l2dbol = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2dbol(self):
    self.__l2dbol = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="l2dbol", rest_name="l2dbol", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_ownpurge(self):
    """
    Getter method for ownpurge, mapped from YANG variable /counts_state/ownpurge (uint32)

    YANG Description: Our LSP Purged
    """
    return self.__ownpurge
      
  def _set_ownpurge(self, v, load=False):
    """
    Setter method for ownpurge, mapped from YANG variable /counts_state/ownpurge (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ownpurge is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ownpurge() directly.

    YANG Description: Our LSP Purged
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ownpurge", rest_name="ownpurge", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ownpurge must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ownpurge", rest_name="ownpurge", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ownpurge = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ownpurge(self):
    self.__ownpurge = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ownpurge", rest_name="ownpurge", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_csnp_l1authfail(self):
    """
    Getter method for csnp_l1authfail, mapped from YANG variable /counts_state/csnp_l1authfail (uint32)

    YANG Description: L1 CSNP PDU auth failures
    """
    return self.__csnp_l1authfail
      
  def _set_csnp_l1authfail(self, v, load=False):
    """
    Setter method for csnp_l1authfail, mapped from YANG variable /counts_state/csnp_l1authfail (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_csnp_l1authfail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_csnp_l1authfail() directly.

    YANG Description: L1 CSNP PDU auth failures
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l1authfail", rest_name="csnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """csnp_l1authfail must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l1authfail", rest_name="csnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__csnp_l1authfail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_csnp_l1authfail(self):
    self.__csnp_l1authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l1authfail", rest_name="csnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_csnp_l2authfail(self):
    """
    Getter method for csnp_l2authfail, mapped from YANG variable /counts_state/csnp_l2authfail (uint32)

    YANG Description: L2 CSNP PDU auth failures
    """
    return self.__csnp_l2authfail
      
  def _set_csnp_l2authfail(self, v, load=False):
    """
    Setter method for csnp_l2authfail, mapped from YANG variable /counts_state/csnp_l2authfail (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_csnp_l2authfail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_csnp_l2authfail() directly.

    YANG Description: L2 CSNP PDU auth failures
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l2authfail", rest_name="csnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """csnp_l2authfail must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l2authfail", rest_name="csnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__csnp_l2authfail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_csnp_l2authfail(self):
    self.__csnp_l2authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="csnp-l2authfail", rest_name="csnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_psnp_l1authfail(self):
    """
    Getter method for psnp_l1authfail, mapped from YANG variable /counts_state/psnp_l1authfail (uint32)

    YANG Description: L1 PSNP PDU auth failures
    """
    return self.__psnp_l1authfail
      
  def _set_psnp_l1authfail(self, v, load=False):
    """
    Setter method for psnp_l1authfail, mapped from YANG variable /counts_state/psnp_l1authfail (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_psnp_l1authfail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_psnp_l1authfail() directly.

    YANG Description: L1 PSNP PDU auth failures
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l1authfail", rest_name="psnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """psnp_l1authfail must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l1authfail", rest_name="psnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__psnp_l1authfail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_psnp_l1authfail(self):
    self.__psnp_l1authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l1authfail", rest_name="psnp-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_psnp_l2authfail(self):
    """
    Getter method for psnp_l2authfail, mapped from YANG variable /counts_state/psnp_l2authfail (uint32)

    YANG Description: L2 PSNP PDU auth failures
    """
    return self.__psnp_l2authfail
      
  def _set_psnp_l2authfail(self, v, load=False):
    """
    Setter method for psnp_l2authfail, mapped from YANG variable /counts_state/psnp_l2authfail (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_psnp_l2authfail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_psnp_l2authfail() directly.

    YANG Description: L2 PSNP PDU auth failures
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l2authfail", rest_name="psnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """psnp_l2authfail must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l2authfail", rest_name="psnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__psnp_l2authfail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_psnp_l2authfail(self):
    self.__psnp_l2authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="psnp-l2authfail", rest_name="psnp-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_circ_l1authfail(self):
    """
    Getter method for circ_l1authfail, mapped from YANG variable /counts_state/circ_l1authfail (uint32)

    YANG Description: Total L1 Hello PDU auth failures
    """
    return self.__circ_l1authfail
      
  def _set_circ_l1authfail(self, v, load=False):
    """
    Setter method for circ_l1authfail, mapped from YANG variable /counts_state/circ_l1authfail (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circ_l1authfail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circ_l1authfail() directly.

    YANG Description: Total L1 Hello PDU auth failures
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l1authfail", rest_name="circ-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circ_l1authfail must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l1authfail", rest_name="circ-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__circ_l1authfail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circ_l1authfail(self):
    self.__circ_l1authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l1authfail", rest_name="circ-l1authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_circ_l2authfail(self):
    """
    Getter method for circ_l2authfail, mapped from YANG variable /counts_state/circ_l2authfail (uint32)

    YANG Description: Total L2 Hello PDU auth failures
    """
    return self.__circ_l2authfail
      
  def _set_circ_l2authfail(self, v, load=False):
    """
    Setter method for circ_l2authfail, mapped from YANG variable /counts_state/circ_l2authfail (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circ_l2authfail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circ_l2authfail() directly.

    YANG Description: Total L2 Hello PDU auth failures
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l2authfail", rest_name="circ-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circ_l2authfail must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l2authfail", rest_name="circ-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)""",
        })

    self.__circ_l2authfail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circ_l2authfail(self):
    self.__circ_l2authfail = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="circ-l2authfail", rest_name="circ-l2authfail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='uint32', is_config=False)


  def _get_bad_lsp_log(self):
    """
    Getter method for bad_lsp_log, mapped from YANG variable /counts_state/bad_lsp_log (list)

    YANG Description: LSP Name
    """
    return self.__bad_lsp_log
      
  def _set_bad_lsp_log(self, v, load=False):
    """
    Setter method for bad_lsp_log, mapped from YANG variable /counts_state/bad_lsp_log (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bad_lsp_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bad_lsp_log() directly.

    YANG Description: LSP Name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("type_index",bad_lsp_log.bad_lsp_log, yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type-index', extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bad_lsp_log must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("type_index",bad_lsp_log.bad_lsp_log, yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type-index', extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)""",
        })

    self.__bad_lsp_log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bad_lsp_log(self):
    self.__bad_lsp_log = YANGDynClass(base=YANGListType("type_index",bad_lsp_log.bad_lsp_log, yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='type-index', extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bad-lsp-log", rest_name="bad-lsp-log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'isis-bad-lsp-log-entry', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-isis-operational', defining_module='brocade-isis-operational', yang_type='list', is_config=False)

  areamis = __builtin__.property(_get_areamis)
  maxareamis = __builtin__.property(_get_maxareamis)
  badidlen = __builtin__.property(_get_badidlen)
  seqskip = __builtin__.property(_get_seqskip)
  seqerr = __builtin__.property(_get_seqerr)
  l1dbol = __builtin__.property(_get_l1dbol)
  l2dbol = __builtin__.property(_get_l2dbol)
  ownpurge = __builtin__.property(_get_ownpurge)
  csnp_l1authfail = __builtin__.property(_get_csnp_l1authfail)
  csnp_l2authfail = __builtin__.property(_get_csnp_l2authfail)
  psnp_l1authfail = __builtin__.property(_get_psnp_l1authfail)
  psnp_l2authfail = __builtin__.property(_get_psnp_l2authfail)
  circ_l1authfail = __builtin__.property(_get_circ_l1authfail)
  circ_l2authfail = __builtin__.property(_get_circ_l2authfail)
  bad_lsp_log = __builtin__.property(_get_bad_lsp_log)


  _pyangbind_elements = {'areamis': areamis, 'maxareamis': maxareamis, 'badidlen': badidlen, 'seqskip': seqskip, 'seqerr': seqerr, 'l1dbol': l1dbol, 'l2dbol': l2dbol, 'ownpurge': ownpurge, 'csnp_l1authfail': csnp_l1authfail, 'csnp_l2authfail': csnp_l2authfail, 'psnp_l1authfail': psnp_l1authfail, 'psnp_l2authfail': psnp_l2authfail, 'circ_l1authfail': circ_l1authfail, 'circ_l2authfail': circ_l2authfail, 'bad_lsp_log': bad_lsp_log, }


