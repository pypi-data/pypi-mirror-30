
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import best_range
class advertise_set(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/route-map/content/match/additional-paths/advertise-set. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: BGP Add-Path set
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__all','__best','__best_range','__group_best',)

  _yang_name = 'advertise-set'
  _rest_name = 'advertise-set'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__all = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-all', u'info': u'BGP Add-Path advertise all paths(Max: 16)'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)
    self.__group_best = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="group-best", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'BGP Add-Path advertise group-best path', u'code-name': u'additional-paths-advertise-set-group-best', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)
    self.__best_range = YANGDynClass(base=best_range.best_range, is_container='container', presence=False, yang_name="best-range", rest_name="best-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Best number range', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    self.__best = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best', u'cli-full-no': None, u'info': u'BGP Add-Path advertise best n paths'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'route-map', u'content', u'match', u'additional-paths', u'advertise-set']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'route-map', u'match', u'additional-paths', u'advertise-set']

  def _get_all(self):
    """
    Getter method for all, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/all (empty)

    YANG Description: BGP Add-Path advertise all paths (Max 16)
    """
    return self.__all
      
  def _set_all(self, v, load=False):
    """
    Setter method for all, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/all (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_all() directly.

    YANG Description: BGP Add-Path advertise all paths (Max 16)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-all', u'info': u'BGP Add-Path advertise all paths(Max: 16)'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """all must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-all', u'info': u'BGP Add-Path advertise all paths(Max: 16)'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)""",
        })

    self.__all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_all(self):
    self.__all = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-all', u'info': u'BGP Add-Path advertise all paths(Max: 16)'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)


  def _get_best(self):
    """
    Getter method for best, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best (uint32)

    YANG Description: BGP Add-Path advertise best n paths
    """
    return self.__best
      
  def _set_best(self, v, load=False):
    """
    Setter method for best, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_best is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_best() directly.

    YANG Description: BGP Add-Path advertise best n paths
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best', u'cli-full-no': None, u'info': u'BGP Add-Path advertise best n paths'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """best must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best', u'cli-full-no': None, u'info': u'BGP Add-Path advertise best n paths'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)""",
        })

    self.__best = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_best(self):
    self.__best = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16']}), is_leaf=True, yang_name="best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'additional-paths-advertise-set-best', u'cli-full-no': None, u'info': u'BGP Add-Path advertise best n paths'}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='uint32', is_config=True)


  def _get_best_range(self):
    """
    Getter method for best_range, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best_range (container)

    YANG Description: Best number range
    """
    return self.__best_range
      
  def _set_best_range(self, v, load=False):
    """
    Setter method for best_range, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/best_range (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_best_range is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_best_range() directly.

    YANG Description: Best number range
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=best_range.best_range, is_container='container', presence=False, yang_name="best-range", rest_name="best-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Best number range', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """best_range must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=best_range.best_range, is_container='container', presence=False, yang_name="best-range", rest_name="best-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Best number range', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)""",
        })

    self.__best_range = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_best_range(self):
    self.__best_range = YANGDynClass(base=best_range.best_range, is_container='container', presence=False, yang_name="best-range", rest_name="best-range", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Best number range', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-full-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)


  def _get_group_best(self):
    """
    Getter method for group_best, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/group_best (empty)

    YANG Description: BGP Add-Path advertise group-best path
    """
    return self.__group_best
      
  def _set_group_best(self, v, load=False):
    """
    Setter method for group_best, mapped from YANG variable /routing_system/route_map/content/match/additional_paths/advertise_set/group_best (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_group_best is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_group_best() directly.

    YANG Description: BGP Add-Path advertise group-best path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="group-best", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'BGP Add-Path advertise group-best path', u'code-name': u'additional-paths-advertise-set-group-best', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """group_best must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="group-best", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'BGP Add-Path advertise group-best path', u'code-name': u'additional-paths-advertise-set-group-best', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)""",
        })

    self.__group_best = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_group_best(self):
    self.__group_best = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="group-best", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'BGP Add-Path advertise group-best path', u'code-name': u'additional-paths-advertise-set-group-best', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='empty', is_config=True)

  all = __builtin__.property(_get_all, _set_all)
  best = __builtin__.property(_get_best, _set_best)
  best_range = __builtin__.property(_get_best_range, _set_best_range)
  group_best = __builtin__.property(_get_group_best, _set_group_best)


  _pyangbind_elements = {'all': all, 'best': best, 'best_range': best_range, 'group_best': group_best, }


