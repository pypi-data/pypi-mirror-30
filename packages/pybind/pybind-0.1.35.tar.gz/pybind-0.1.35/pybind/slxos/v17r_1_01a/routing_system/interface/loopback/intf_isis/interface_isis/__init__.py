
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import auth_check
import interface_reverse_metric
import interface_auth_mode
import interface_auth_key
import interface_hello
import interface_hello_interval
import interface_hello_multiplier
import interface_ipv6
import interface_metric
import interface_priority
import interface_bfd
class interface_isis(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/interface/loopback/intf-isis/interface-isis. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__auth_check','__interface_reverse_metric','__interface_auth_mode','__interface_auth_key','__interface_hello','__interface_hello_interval','__interface_hello_multiplier','__circuit_type','__interface_ipv6','__interface_metric','__interface_point_to_point','__interface_passive','__interface_priority','__interface_bfd','__interface_ldp_sync',)

  _yang_name = 'interface-isis'
  _rest_name = 'isis'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__interface_ldp_sync = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 2}},), is_leaf=True, yang_name="interface-ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set LDP-SYNC operation mode on this interface', u'alt-name': u'ldp-sync', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)
    self.__interface_ipv6 = YANGDynClass(base=interface_ipv6.interface_ipv6, is_container='container', presence=False, yang_name="interface-ipv6", rest_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface ipv6 attributes for isis', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'ipv6'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__interface_hello = YANGDynClass(base=interface_hello.interface_hello, is_container='container', presence=False, yang_name="interface-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello mode on this interface', u'alt-name': u'hello', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__interface_point_to_point = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-point-to-point", rest_name="point-to-point", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Point-to-point interface for ISIS operation', u'alt-name': u'point-to-point', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__interface_priority = YANGDynClass(base=interface_priority.interface_priority, is_container='container', presence=False, yang_name="interface-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router priority for ISIS', u'alt-name': u'priority', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__interface_auth_key = YANGDynClass(base=YANGListType("interface_auth_key_level",interface_auth_key.interface_auth_key, yang_name="interface-auth-key", rest_name="auth-key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-auth-key-level', extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}), is_container='list', yang_name="interface-auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__interface_passive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-passive", rest_name="passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Passive interface for ISIS operation', u'alt-name': u'passive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__interface_hello_multiplier = YANGDynClass(base=YANGListType("interface_hello_multiplier_level",interface_hello_multiplier.interface_hello_multiplier, yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-multiplier-level', extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}), is_container='list', yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__circuit_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)
    self.__interface_metric = YANGDynClass(base=YANGListType("interface_metric_level",interface_metric.interface_metric, yang_name="interface-metric", rest_name="metric", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-metric-level', extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}), is_container='list', yang_name="interface-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__interface_reverse_metric = YANGDynClass(base=interface_reverse_metric.interface_reverse_metric, is_container='container', presence=True, yang_name="interface-reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure reverse metric at the interface level', u'alt-name': u'reverse-metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__interface_auth_mode = YANGDynClass(base=interface_auth_mode.interface_auth_mode, is_container='container', presence=False, yang_name="interface-auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication mode', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'auth-mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__interface_bfd = YANGDynClass(base=interface_bfd.interface_bfd, is_container='container', presence=False, yang_name="interface-bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set BFD operation mode on this interface', u'alt-name': u'bfd'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__interface_hello_interval = YANGDynClass(base=YANGListType("interface_hello_interval_level",interface_hello_interval.interface_hello_interval, yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-interval-level', extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}), is_container='list', yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__auth_check = YANGDynClass(base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'interface', u'loopback', u'intf-isis', u'interface-isis']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Loopback', u'isis']

  def _get_auth_check(self):
    """
    Getter method for auth_check, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/auth_check (container)
    """
    return self.__auth_check
      
  def _set_auth_check(self, v, load=False):
    """
    Setter method for auth_check, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/auth_check (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_check() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_check must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__auth_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_check(self):
    self.__auth_check = YANGDynClass(base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_reverse_metric(self):
    """
    Getter method for interface_reverse_metric, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_reverse_metric (container)
    """
    return self.__interface_reverse_metric
      
  def _set_interface_reverse_metric(self, v, load=False):
    """
    Setter method for interface_reverse_metric, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_reverse_metric (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_reverse_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_reverse_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_reverse_metric.interface_reverse_metric, is_container='container', presence=True, yang_name="interface-reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure reverse metric at the interface level', u'alt-name': u'reverse-metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_reverse_metric must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_reverse_metric.interface_reverse_metric, is_container='container', presence=True, yang_name="interface-reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure reverse metric at the interface level', u'alt-name': u'reverse-metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__interface_reverse_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_reverse_metric(self):
    self.__interface_reverse_metric = YANGDynClass(base=interface_reverse_metric.interface_reverse_metric, is_container='container', presence=True, yang_name="interface-reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure reverse metric at the interface level', u'alt-name': u'reverse-metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_auth_mode(self):
    """
    Getter method for interface_auth_mode, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_auth_mode (container)
    """
    return self.__interface_auth_mode
      
  def _set_interface_auth_mode(self, v, load=False):
    """
    Setter method for interface_auth_mode, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_auth_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_auth_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_auth_mode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_auth_mode.interface_auth_mode, is_container='container', presence=False, yang_name="interface-auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication mode', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'auth-mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_auth_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_auth_mode.interface_auth_mode, is_container='container', presence=False, yang_name="interface-auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication mode', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'auth-mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__interface_auth_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_auth_mode(self):
    self.__interface_auth_mode = YANGDynClass(base=interface_auth_mode.interface_auth_mode, is_container='container', presence=False, yang_name="interface-auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication mode', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'auth-mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_auth_key(self):
    """
    Getter method for interface_auth_key, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_auth_key (list)
    """
    return self.__interface_auth_key
      
  def _set_interface_auth_key(self, v, load=False):
    """
    Setter method for interface_auth_key, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_auth_key (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_auth_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_auth_key() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_auth_key_level",interface_auth_key.interface_auth_key, yang_name="interface-auth-key", rest_name="auth-key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-auth-key-level', extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}), is_container='list', yang_name="interface-auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_auth_key must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_auth_key_level",interface_auth_key.interface_auth_key, yang_name="interface-auth-key", rest_name="auth-key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-auth-key-level', extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}), is_container='list', yang_name="interface-auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__interface_auth_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_auth_key(self):
    self.__interface_auth_key = YANGDynClass(base=YANGListType("interface_auth_key_level",interface_auth_key.interface_auth_key, yang_name="interface-auth-key", rest_name="auth-key", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-auth-key-level', extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}), is_container='list', yang_name="interface-auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceAuthKey', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'auth-key'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_interface_hello(self):
    """
    Getter method for interface_hello, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_hello (container)
    """
    return self.__interface_hello
      
  def _set_interface_hello(self, v, load=False):
    """
    Setter method for interface_hello, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_hello (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_hello is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_hello() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_hello.interface_hello, is_container='container', presence=False, yang_name="interface-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello mode on this interface', u'alt-name': u'hello', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_hello must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_hello.interface_hello, is_container='container', presence=False, yang_name="interface-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello mode on this interface', u'alt-name': u'hello', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__interface_hello = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_hello(self):
    self.__interface_hello = YANGDynClass(base=interface_hello.interface_hello, is_container='container', presence=False, yang_name="interface-hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello mode on this interface', u'alt-name': u'hello', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_hello_interval(self):
    """
    Getter method for interface_hello_interval, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_hello_interval (list)
    """
    return self.__interface_hello_interval
      
  def _set_interface_hello_interval(self, v, load=False):
    """
    Setter method for interface_hello_interval, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_hello_interval (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_hello_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_hello_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_hello_interval_level",interface_hello_interval.interface_hello_interval, yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-interval-level', extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}), is_container='list', yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_hello_interval must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_hello_interval_level",interface_hello_interval.interface_hello_interval, yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-interval-level', extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}), is_container='list', yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__interface_hello_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_hello_interval(self):
    self.__interface_hello_interval = YANGDynClass(base=YANGListType("interface_hello_interval_level",interface_hello_interval.interface_hello_interval, yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-interval-level', extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}), is_container='list', yang_name="interface-hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define interval between hello PDUs', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloInterval', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-interval'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_interface_hello_multiplier(self):
    """
    Getter method for interface_hello_multiplier, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_hello_multiplier (list)
    """
    return self.__interface_hello_multiplier
      
  def _set_interface_hello_multiplier(self, v, load=False):
    """
    Setter method for interface_hello_multiplier, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_hello_multiplier (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_hello_multiplier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_hello_multiplier() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_hello_multiplier_level",interface_hello_multiplier.interface_hello_multiplier, yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-multiplier-level', extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}), is_container='list', yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_hello_multiplier must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_hello_multiplier_level",interface_hello_multiplier.interface_hello_multiplier, yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-multiplier-level', extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}), is_container='list', yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__interface_hello_multiplier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_hello_multiplier(self):
    self.__interface_hello_multiplier = YANGDynClass(base=YANGListType("interface_hello_multiplier_level",interface_hello_multiplier.interface_hello_multiplier, yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-hello-multiplier-level', extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}), is_container='list', yang_name="interface-hello-multiplier", rest_name="hello-multiplier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define neighbor dead interval as multiplier of hello interval', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceHelloMultiplier', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'hello-multiplier'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_circuit_type(self):
    """
    Getter method for circuit_type, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/circuit_type (enumeration)
    """
    return self.__circuit_type
      
  def _set_circuit_type(self, v, load=False):
    """
    Setter method for circuit_type, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/circuit_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_circuit_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_circuit_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """circuit_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-isis:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)""",
        })

    self.__circuit_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_circuit_type(self):
    self.__circuit_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="circuit-type", rest_name="circuit-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)


  def _get_interface_ipv6(self):
    """
    Getter method for interface_ipv6, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_ipv6 (container)
    """
    return self.__interface_ipv6
      
  def _set_interface_ipv6(self, v, load=False):
    """
    Setter method for interface_ipv6, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_ipv6 (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ipv6 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ipv6() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_ipv6.interface_ipv6, is_container='container', presence=False, yang_name="interface-ipv6", rest_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface ipv6 attributes for isis', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'ipv6'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ipv6 must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_ipv6.interface_ipv6, is_container='container', presence=False, yang_name="interface-ipv6", rest_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface ipv6 attributes for isis', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'ipv6'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__interface_ipv6 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ipv6(self):
    self.__interface_ipv6 = YANGDynClass(base=interface_ipv6.interface_ipv6, is_container='container', presence=False, yang_name="interface-ipv6", rest_name="ipv6", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface ipv6 attributes for isis', u'cli-incomplete-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-incomplete-command': None, u'alt-name': u'ipv6'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_metric(self):
    """
    Getter method for interface_metric, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_metric (list)
    """
    return self.__interface_metric
      
  def _set_interface_metric(self, v, load=False):
    """
    Setter method for interface_metric, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_metric (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("interface_metric_level",interface_metric.interface_metric, yang_name="interface-metric", rest_name="metric", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-metric-level', extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}), is_container='list', yang_name="interface-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_metric must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("interface_metric_level",interface_metric.interface_metric, yang_name="interface-metric", rest_name="metric", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-metric-level', extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}), is_container='list', yang_name="interface-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__interface_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_metric(self):
    self.__interface_metric = YANGDynClass(base=YANGListType("interface_metric_level",interface_metric.interface_metric, yang_name="interface-metric", rest_name="metric", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='interface-metric-level', extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}), is_container='list', yang_name="interface-metric", rest_name="metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Interface metric', u'cli-suppress-mode': None, u'callpoint': u'IsisLoopbackInterfaceMetric', u'cli-full-no': None, u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'alt-name': u'metric'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_interface_point_to_point(self):
    """
    Getter method for interface_point_to_point, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_point_to_point (empty)
    """
    return self.__interface_point_to_point
      
  def _set_interface_point_to_point(self, v, load=False):
    """
    Setter method for interface_point_to_point, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_point_to_point (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_point_to_point is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_point_to_point() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="interface-point-to-point", rest_name="point-to-point", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Point-to-point interface for ISIS operation', u'alt-name': u'point-to-point', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_point_to_point must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-point-to-point", rest_name="point-to-point", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Point-to-point interface for ISIS operation', u'alt-name': u'point-to-point', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__interface_point_to_point = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_point_to_point(self):
    self.__interface_point_to_point = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-point-to-point", rest_name="point-to-point", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Point-to-point interface for ISIS operation', u'alt-name': u'point-to-point', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_interface_passive(self):
    """
    Getter method for interface_passive, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_passive (empty)
    """
    return self.__interface_passive
      
  def _set_interface_passive(self, v, load=False):
    """
    Setter method for interface_passive, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_passive (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_passive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_passive() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="interface-passive", rest_name="passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Passive interface for ISIS operation', u'alt-name': u'passive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_passive must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-passive", rest_name="passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Passive interface for ISIS operation', u'alt-name': u'passive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__interface_passive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_passive(self):
    self.__interface_passive = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="interface-passive", rest_name="passive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Passive interface for ISIS operation', u'alt-name': u'passive', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_interface_priority(self):
    """
    Getter method for interface_priority, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_priority (container)
    """
    return self.__interface_priority
      
  def _set_interface_priority(self, v, load=False):
    """
    Setter method for interface_priority, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_priority (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_priority() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_priority.interface_priority, is_container='container', presence=False, yang_name="interface-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router priority for ISIS', u'alt-name': u'priority', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_priority must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_priority.interface_priority, is_container='container', presence=False, yang_name="interface-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router priority for ISIS', u'alt-name': u'priority', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__interface_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_priority(self):
    self.__interface_priority = YANGDynClass(base=interface_priority.interface_priority, is_container='container', presence=False, yang_name="interface-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router priority for ISIS', u'alt-name': u'priority', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_bfd(self):
    """
    Getter method for interface_bfd, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_bfd (container)

    YANG Description: Set Bidirectional Forwarding Detection operation mode on this interface
    """
    return self.__interface_bfd
      
  def _set_interface_bfd(self, v, load=False):
    """
    Setter method for interface_bfd, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_bfd (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_bfd() directly.

    YANG Description: Set Bidirectional Forwarding Detection operation mode on this interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=interface_bfd.interface_bfd, is_container='container', presence=False, yang_name="interface-bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set BFD operation mode on this interface', u'alt-name': u'bfd'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_bfd must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=interface_bfd.interface_bfd, is_container='container', presence=False, yang_name="interface-bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set BFD operation mode on this interface', u'alt-name': u'bfd'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__interface_bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_bfd(self):
    self.__interface_bfd = YANGDynClass(base=interface_bfd.interface_bfd, is_container='container', presence=False, yang_name="interface-bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set BFD operation mode on this interface', u'alt-name': u'bfd'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_interface_ldp_sync(self):
    """
    Getter method for interface_ldp_sync, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_ldp_sync (enumeration)
    """
    return self.__interface_ldp_sync
      
  def _set_interface_ldp_sync(self, v, load=False):
    """
    Setter method for interface_ldp_sync, mapped from YANG variable /routing_system/interface/loopback/intf_isis/interface_isis/interface_ldp_sync (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_ldp_sync is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_ldp_sync() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 2}},), is_leaf=True, yang_name="interface-ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set LDP-SYNC operation mode on this interface', u'alt-name': u'ldp-sync', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_ldp_sync must be of a type compatible with enumeration""",
          'defined-type': "brocade-isis:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 2}},), is_leaf=True, yang_name="interface-ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set LDP-SYNC operation mode on this interface', u'alt-name': u'ldp-sync', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_ldp_sync = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_ldp_sync(self):
    self.__interface_ldp_sync = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'enable': {'value': 1}, u'disable': {'value': 2}},), is_leaf=True, yang_name="interface-ldp-sync", rest_name="ldp-sync", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Set LDP-SYNC operation mode on this interface', u'alt-name': u'ldp-sync', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)

  auth_check = __builtin__.property(_get_auth_check, _set_auth_check)
  interface_reverse_metric = __builtin__.property(_get_interface_reverse_metric, _set_interface_reverse_metric)
  interface_auth_mode = __builtin__.property(_get_interface_auth_mode, _set_interface_auth_mode)
  interface_auth_key = __builtin__.property(_get_interface_auth_key, _set_interface_auth_key)
  interface_hello = __builtin__.property(_get_interface_hello, _set_interface_hello)
  interface_hello_interval = __builtin__.property(_get_interface_hello_interval, _set_interface_hello_interval)
  interface_hello_multiplier = __builtin__.property(_get_interface_hello_multiplier, _set_interface_hello_multiplier)
  circuit_type = __builtin__.property(_get_circuit_type, _set_circuit_type)
  interface_ipv6 = __builtin__.property(_get_interface_ipv6, _set_interface_ipv6)
  interface_metric = __builtin__.property(_get_interface_metric, _set_interface_metric)
  interface_point_to_point = __builtin__.property(_get_interface_point_to_point, _set_interface_point_to_point)
  interface_passive = __builtin__.property(_get_interface_passive, _set_interface_passive)
  interface_priority = __builtin__.property(_get_interface_priority, _set_interface_priority)
  interface_bfd = __builtin__.property(_get_interface_bfd, _set_interface_bfd)
  interface_ldp_sync = __builtin__.property(_get_interface_ldp_sync, _set_interface_ldp_sync)


  _pyangbind_elements = {'auth_check': auth_check, 'interface_reverse_metric': interface_reverse_metric, 'interface_auth_mode': interface_auth_mode, 'interface_auth_key': interface_auth_key, 'interface_hello': interface_hello, 'interface_hello_interval': interface_hello_interval, 'interface_hello_multiplier': interface_hello_multiplier, 'circuit_type': circuit_type, 'interface_ipv6': interface_ipv6, 'interface_metric': interface_metric, 'interface_point_to_point': interface_point_to_point, 'interface_passive': interface_passive, 'interface_priority': interface_priority, 'interface_bfd': interface_bfd, 'interface_ldp_sync': interface_ldp_sync, }


