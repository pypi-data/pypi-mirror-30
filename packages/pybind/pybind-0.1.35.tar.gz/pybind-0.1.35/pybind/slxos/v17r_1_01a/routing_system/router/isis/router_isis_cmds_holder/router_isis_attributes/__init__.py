
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import auth_check
import auth_mode
import auth_key
import bfd
import fast_flood
import graceful_restart
import hello
import hostname
import log
import partial_spf_interval
import set_debug
import set_overload_bit
import spf_interval
import reverse_metric
class router_isis_attributes(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/router/isis/router-isis-cmds-holder/router-isis-attributes. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__auth_check','__auth_mode','__auth_key','__bfd','__csnp_interval','__disable_inc_stct_spf_opt','__disable_incremental_spf_opt','__disable_partial_spf_opt','__fast_flood','__graceful_restart','__hello','__hostname','__is_type','__log','__lsp_gen_interval','__lsp_interval','__lsp_refresh_interval','__max_lsp_lifetime','__nonstop_routing','__partial_spf_interval','__retransmit_interval','__set_debug','__set_overload_bit','__spf_interval','__reverse_metric',)

  _yang_name = 'router-isis-attributes'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__auth_mode = YANGDynClass(base=auth_mode.auth_mode, is_container='container', presence=False, yang_name="auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define authentication mode', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__lsp_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(33), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of LSPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    self.__reverse_metric = YANGDynClass(base=reverse_metric.reverse_metric, is_container='container', presence=True, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure IS-IS reverse metric at the router level'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__disable_incremental_spf_opt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-incremental-spf-opt", rest_name="disable-incremental-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__nonstop_routing = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nonstop-routing", rest_name="nonstop-routing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enables the ISIS nonstop routing capability', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__auth_check = YANGDynClass(base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__retransmit_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Time between retransmission of LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    self.__log = YANGDynClass(base=log.log, is_container='container', presence=False, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Logging IS-IS activities', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__bfd = YANGDynClass(base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure bfd for IS-IS'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__max_lsp_lifetime = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1200), is_leaf=True, yang_name="max-lsp-lifetime", rest_name="max-lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Maximum LSP lifetime', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    self.__set_debug = YANGDynClass(base=set_debug.set_debug, is_container='container', presence=False, yang_name="set-debug", rest_name="set-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enabling isis debug configuration', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__hostname = YANGDynClass(base=hostname.hostname, is_container='container', presence=False, yang_name="hostname", rest_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Integrated IS-IS dynamic hostname', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__csnp_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of CSNPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    self.__spf_interval = YANGDynClass(base=YANGListType("spf_interval_level",spf_interval.spf_interval, yang_name="spf-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="spf-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    self.__lsp_gen_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..120']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Minimum interval between regenerating same LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    self.__lsp_refresh_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(900), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'LSP refresh interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    self.__set_overload_bit = YANGDynClass(base=set_overload_bit.set_overload_bit, is_container='container', presence=True, yang_name="set-overload-bit", rest_name="set-overload-bit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Indicate to other routers not to use us'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__disable_inc_stct_spf_opt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-inc-stct-spf-opt", rest_name="disable-inc-stct-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental Shortcut SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__disable_partial_spf_opt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-partial-spf-opt", rest_name="disable-partial-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Partial SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    self.__is_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)
    self.__fast_flood = YANGDynClass(base=fast_flood.fast_flood, is_container='container', presence=True, yang_name="fast-flood", rest_name="fast-flood", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define number of LSPs to be flooded before SPF Run'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__partial_spf_interval = YANGDynClass(base=partial_spf_interval.partial_spf_interval, is_container='container', presence=False, yang_name="partial-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__graceful_restart = YANGDynClass(base=graceful_restart.graceful_restart, is_container='container', presence=False, yang_name="graceful-restart", rest_name="graceful-restart", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enables the ISIS graceful restart capability', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__auth_key = YANGDynClass(base=auth_key.auth_key, is_container='container', presence=False, yang_name="auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    self.__hello = YANGDynClass(base=hello.hello, is_container='container', presence=False, yang_name="hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pad IS-IS hello PDUs to full MTU', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'router', u'isis', u'router-isis-cmds-holder', u'router-isis-attributes']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'isis']

  def _get_auth_check(self):
    """
    Getter method for auth_check, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/auth_check (container)
    """
    return self.__auth_check
      
  def _set_auth_check(self, v, load=False):
    """
    Setter method for auth_check, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/auth_check (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_check is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_check() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_check must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__auth_check = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_check(self):
    self.__auth_check = YANGDynClass(base=auth_check.auth_check, is_container='container', presence=False, yang_name="auth-check", rest_name="auth-check", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Authenticate incoming PDUs for LSPs, CSNP, PSNP', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_auth_mode(self):
    """
    Getter method for auth_mode, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/auth_mode (container)
    """
    return self.__auth_mode
      
  def _set_auth_mode(self, v, load=False):
    """
    Setter method for auth_mode, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/auth_mode (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_mode() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=auth_mode.auth_mode, is_container='container', presence=False, yang_name="auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define authentication mode', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_mode must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=auth_mode.auth_mode, is_container='container', presence=False, yang_name="auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define authentication mode', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__auth_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_mode(self):
    self.__auth_mode = YANGDynClass(base=auth_mode.auth_mode, is_container='container', presence=False, yang_name="auth-mode", rest_name="auth-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define authentication mode', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_auth_key(self):
    """
    Getter method for auth_key, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/auth_key (container)
    """
    return self.__auth_key
      
  def _set_auth_key(self, v, load=False):
    """
    Setter method for auth_key, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/auth_key (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auth_key is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auth_key() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=auth_key.auth_key, is_container='container', presence=False, yang_name="auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auth_key must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=auth_key.auth_key, is_container='container', presence=False, yang_name="auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__auth_key = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auth_key(self):
    self.__auth_key = YANGDynClass(base=auth_key.auth_key, is_container='container', presence=False, yang_name="auth-key", rest_name="auth-key", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Define authentication key', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_bfd(self):
    """
    Getter method for bfd, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/bfd (container)
    """
    return self.__bfd
      
  def _set_bfd(self, v, load=False):
    """
    Setter method for bfd, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/bfd (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure bfd for IS-IS'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure bfd for IS-IS'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__bfd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd(self):
    self.__bfd = YANGDynClass(base=bfd.bfd, is_container='container', presence=False, yang_name="bfd", rest_name="bfd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure bfd for IS-IS'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_csnp_interval(self):
    """
    Getter method for csnp_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/csnp_interval (uint32)
    """
    return self.__csnp_interval
      
  def _set_csnp_interval(self, v, load=False):
    """
    Setter method for csnp_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/csnp_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_csnp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_csnp_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of CSNPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """csnp_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of CSNPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)""",
        })

    self.__csnp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_csnp_interval(self):
    self.__csnp_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="csnp-interval", rest_name="csnp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of CSNPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)


  def _get_disable_inc_stct_spf_opt(self):
    """
    Getter method for disable_inc_stct_spf_opt, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/disable_inc_stct_spf_opt (empty)
    """
    return self.__disable_inc_stct_spf_opt
      
  def _set_disable_inc_stct_spf_opt(self, v, load=False):
    """
    Setter method for disable_inc_stct_spf_opt, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/disable_inc_stct_spf_opt (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disable_inc_stct_spf_opt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disable_inc_stct_spf_opt() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="disable-inc-stct-spf-opt", rest_name="disable-inc-stct-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental Shortcut SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disable_inc_stct_spf_opt must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-inc-stct-spf-opt", rest_name="disable-inc-stct-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental Shortcut SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__disable_inc_stct_spf_opt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disable_inc_stct_spf_opt(self):
    self.__disable_inc_stct_spf_opt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-inc-stct-spf-opt", rest_name="disable-inc-stct-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental Shortcut SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_disable_incremental_spf_opt(self):
    """
    Getter method for disable_incremental_spf_opt, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/disable_incremental_spf_opt (empty)
    """
    return self.__disable_incremental_spf_opt
      
  def _set_disable_incremental_spf_opt(self, v, load=False):
    """
    Setter method for disable_incremental_spf_opt, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/disable_incremental_spf_opt (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disable_incremental_spf_opt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disable_incremental_spf_opt() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="disable-incremental-spf-opt", rest_name="disable-incremental-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disable_incremental_spf_opt must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-incremental-spf-opt", rest_name="disable-incremental-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__disable_incremental_spf_opt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disable_incremental_spf_opt(self):
    self.__disable_incremental_spf_opt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-incremental-spf-opt", rest_name="disable-incremental-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Incremental SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_disable_partial_spf_opt(self):
    """
    Getter method for disable_partial_spf_opt, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/disable_partial_spf_opt (empty)
    """
    return self.__disable_partial_spf_opt
      
  def _set_disable_partial_spf_opt(self, v, load=False):
    """
    Setter method for disable_partial_spf_opt, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/disable_partial_spf_opt (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_disable_partial_spf_opt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_disable_partial_spf_opt() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="disable-partial-spf-opt", rest_name="disable-partial-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Partial SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """disable_partial_spf_opt must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-partial-spf-opt", rest_name="disable-partial-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Partial SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__disable_partial_spf_opt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_disable_partial_spf_opt(self):
    self.__disable_partial_spf_opt = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="disable-partial-spf-opt", rest_name="disable-partial-spf-opt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Disable Partial SPF Optimizations - resort to Full SPF', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_fast_flood(self):
    """
    Getter method for fast_flood, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/fast_flood (container)
    """
    return self.__fast_flood
      
  def _set_fast_flood(self, v, load=False):
    """
    Setter method for fast_flood, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/fast_flood (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fast_flood is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fast_flood() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fast_flood.fast_flood, is_container='container', presence=True, yang_name="fast-flood", rest_name="fast-flood", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define number of LSPs to be flooded before SPF Run'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fast_flood must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fast_flood.fast_flood, is_container='container', presence=True, yang_name="fast-flood", rest_name="fast-flood", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define number of LSPs to be flooded before SPF Run'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__fast_flood = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fast_flood(self):
    self.__fast_flood = YANGDynClass(base=fast_flood.fast_flood, is_container='container', presence=True, yang_name="fast-flood", rest_name="fast-flood", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Define number of LSPs to be flooded before SPF Run'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_graceful_restart(self):
    """
    Getter method for graceful_restart, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/graceful_restart (container)

    YANG Description: Enables the ISIS graceful restart capability
    """
    return self.__graceful_restart
      
  def _set_graceful_restart(self, v, load=False):
    """
    Setter method for graceful_restart, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/graceful_restart (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_graceful_restart is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_graceful_restart() directly.

    YANG Description: Enables the ISIS graceful restart capability
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=graceful_restart.graceful_restart, is_container='container', presence=False, yang_name="graceful-restart", rest_name="graceful-restart", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enables the ISIS graceful restart capability', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """graceful_restart must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=graceful_restart.graceful_restart, is_container='container', presence=False, yang_name="graceful-restart", rest_name="graceful-restart", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enables the ISIS graceful restart capability', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__graceful_restart = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_graceful_restart(self):
    self.__graceful_restart = YANGDynClass(base=graceful_restart.graceful_restart, is_container='container', presence=False, yang_name="graceful-restart", rest_name="graceful-restart", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enables the ISIS graceful restart capability', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_hello(self):
    """
    Getter method for hello, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/hello (container)
    """
    return self.__hello
      
  def _set_hello(self, v, load=False):
    """
    Setter method for hello, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/hello (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=hello.hello, is_container='container', presence=False, yang_name="hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pad IS-IS hello PDUs to full MTU', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=hello.hello, is_container='container', presence=False, yang_name="hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pad IS-IS hello PDUs to full MTU', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__hello = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello(self):
    self.__hello = YANGDynClass(base=hello.hello, is_container='container', presence=False, yang_name="hello", rest_name="hello", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Pad IS-IS hello PDUs to full MTU', u'cli-sequence-commands': None, u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_hostname(self):
    """
    Getter method for hostname, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/hostname (container)
    """
    return self.__hostname
      
  def _set_hostname(self, v, load=False):
    """
    Setter method for hostname, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/hostname (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hostname is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hostname() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=hostname.hostname, is_container='container', presence=False, yang_name="hostname", rest_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Integrated IS-IS dynamic hostname', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hostname must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=hostname.hostname, is_container='container', presence=False, yang_name="hostname", rest_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Integrated IS-IS dynamic hostname', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__hostname = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hostname(self):
    self.__hostname = YANGDynClass(base=hostname.hostname, is_container='container', presence=False, yang_name="hostname", rest_name="hostname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Integrated IS-IS dynamic hostname', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_is_type(self):
    """
    Getter method for is_type, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/is_type (enumeration)
    """
    return self.__is_type
      
  def _set_is_type(self, v, load=False):
    """
    Setter method for is_type, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/is_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-isis:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)""",
        })

    self.__is_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_type(self):
    self.__is_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'level-1-2': {'value': 3}, u'level-2': {'value': 2}, u'level-1': {'value': 1}},), is_leaf=True, yang_name="is-type", rest_name="is-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Define inter-area/intra area operation mode'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='enumeration', is_config=True)


  def _get_log(self):
    """
    Getter method for log, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/log (container)
    """
    return self.__log
      
  def _set_log(self, v, load=False):
    """
    Setter method for log, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/log (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_log is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_log() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=log.log, is_container='container', presence=False, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Logging IS-IS activities', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """log must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=log.log, is_container='container', presence=False, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Logging IS-IS activities', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__log = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_log(self):
    self.__log = YANGDynClass(base=log.log, is_container='container', presence=False, yang_name="log", rest_name="log", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable Logging IS-IS activities', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_lsp_gen_interval(self):
    """
    Getter method for lsp_gen_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/lsp_gen_interval (uint32)
    """
    return self.__lsp_gen_interval
      
  def _set_lsp_gen_interval(self, v, load=False):
    """
    Setter method for lsp_gen_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/lsp_gen_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_gen_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_gen_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..120']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Minimum interval between regenerating same LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_gen_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..120']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Minimum interval between regenerating same LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_gen_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_gen_interval(self):
    self.__lsp_gen_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..120']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="lsp-gen-interval", rest_name="lsp-gen-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Minimum interval between regenerating same LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)


  def _get_lsp_interval(self):
    """
    Getter method for lsp_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/lsp_interval (uint32)
    """
    return self.__lsp_interval
      
  def _set_lsp_interval(self, v, load=False):
    """
    Setter method for lsp_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/lsp_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(33), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of LSPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(33), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of LSPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_interval(self):
    self.__lsp_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(33), is_leaf=True, yang_name="lsp-interval", rest_name="lsp-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Rate of transmission of LSPs', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)


  def _get_lsp_refresh_interval(self):
    """
    Getter method for lsp_refresh_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/lsp_refresh_interval (uint32)
    """
    return self.__lsp_refresh_interval
      
  def _set_lsp_refresh_interval(self, v, load=False):
    """
    Setter method for lsp_refresh_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/lsp_refresh_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_refresh_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_refresh_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(900), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'LSP refresh interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_refresh_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(900), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'LSP refresh interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)""",
        })

    self.__lsp_refresh_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_refresh_interval(self):
    self.__lsp_refresh_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(900), is_leaf=True, yang_name="lsp-refresh-interval", rest_name="lsp-refresh-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'LSP refresh interval', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)


  def _get_max_lsp_lifetime(self):
    """
    Getter method for max_lsp_lifetime, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/max_lsp_lifetime (uint32)
    """
    return self.__max_lsp_lifetime
      
  def _set_max_lsp_lifetime(self, v, load=False):
    """
    Setter method for max_lsp_lifetime, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/max_lsp_lifetime (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_lsp_lifetime is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_lsp_lifetime() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1200), is_leaf=True, yang_name="max-lsp-lifetime", rest_name="max-lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Maximum LSP lifetime', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_lsp_lifetime must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1200), is_leaf=True, yang_name="max-lsp-lifetime", rest_name="max-lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Maximum LSP lifetime', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)""",
        })

    self.__max_lsp_lifetime = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_lsp_lifetime(self):
    self.__max_lsp_lifetime = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1200), is_leaf=True, yang_name="max-lsp-lifetime", rest_name="max-lsp-lifetime", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Maximum LSP lifetime', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)


  def _get_nonstop_routing(self):
    """
    Getter method for nonstop_routing, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/nonstop_routing (empty)
    """
    return self.__nonstop_routing
      
  def _set_nonstop_routing(self, v, load=False):
    """
    Setter method for nonstop_routing, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/nonstop_routing (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nonstop_routing is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nonstop_routing() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="nonstop-routing", rest_name="nonstop-routing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enables the ISIS nonstop routing capability', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nonstop_routing must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nonstop-routing", rest_name="nonstop-routing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enables the ISIS nonstop routing capability', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)""",
        })

    self.__nonstop_routing = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nonstop_routing(self):
    self.__nonstop_routing = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="nonstop-routing", rest_name="nonstop-routing", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Enables the ISIS nonstop routing capability', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='empty', is_config=True)


  def _get_partial_spf_interval(self):
    """
    Getter method for partial_spf_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/partial_spf_interval (container)
    """
    return self.__partial_spf_interval
      
  def _set_partial_spf_interval(self, v, load=False):
    """
    Setter method for partial_spf_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/partial_spf_interval (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_partial_spf_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_partial_spf_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=partial_spf_interval.partial_spf_interval, is_container='container', presence=False, yang_name="partial-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """partial_spf_interval must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=partial_spf_interval.partial_spf_interval, is_container='container', presence=False, yang_name="partial-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__partial_spf_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_partial_spf_interval(self):
    self.__partial_spf_interval = YANGDynClass(base=partial_spf_interval.partial_spf_interval, is_container='container', presence=False, yang_name="partial-spf-interval", rest_name="partial-spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Partial SPF Calculation Timers', u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_retransmit_interval(self):
    """
    Getter method for retransmit_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/retransmit_interval (uint32)
    """
    return self.__retransmit_interval
      
  def _set_retransmit_interval(self, v, load=False):
    """
    Setter method for retransmit_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/retransmit_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retransmit_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retransmit_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Time between retransmission of LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retransmit_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Time between retransmission of LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)""",
        })

    self.__retransmit_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retransmit_interval(self):
    self.__retransmit_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(5), is_leaf=True, yang_name="retransmit-interval", rest_name="retransmit-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Time between retransmission of LSP', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='uint32', is_config=True)


  def _get_set_debug(self):
    """
    Getter method for set_debug, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/set_debug (container)
    """
    return self.__set_debug
      
  def _set_set_debug(self, v, load=False):
    """
    Setter method for set_debug, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/set_debug (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_debug is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_debug() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=set_debug.set_debug, is_container='container', presence=False, yang_name="set-debug", rest_name="set-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enabling isis debug configuration', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_debug must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=set_debug.set_debug, is_container='container', presence=False, yang_name="set-debug", rest_name="set-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enabling isis debug configuration', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__set_debug = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_debug(self):
    self.__set_debug = YANGDynClass(base=set_debug.set_debug, is_container='container', presence=False, yang_name="set-debug", rest_name="set-debug", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enabling isis debug configuration', u'cli-incomplete-no': None, u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_set_overload_bit(self):
    """
    Getter method for set_overload_bit, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/set_overload_bit (container)
    """
    return self.__set_overload_bit
      
  def _set_set_overload_bit(self, v, load=False):
    """
    Setter method for set_overload_bit, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/set_overload_bit (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_overload_bit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_overload_bit() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=set_overload_bit.set_overload_bit, is_container='container', presence=True, yang_name="set-overload-bit", rest_name="set-overload-bit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Indicate to other routers not to use us'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_overload_bit must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=set_overload_bit.set_overload_bit, is_container='container', presence=True, yang_name="set-overload-bit", rest_name="set-overload-bit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Indicate to other routers not to use us'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__set_overload_bit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_overload_bit(self):
    self.__set_overload_bit = YANGDynClass(base=set_overload_bit.set_overload_bit, is_container='container', presence=True, yang_name="set-overload-bit", rest_name="set-overload-bit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Indicate to other routers not to use us'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)


  def _get_spf_interval(self):
    """
    Getter method for spf_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/spf_interval (list)
    """
    return self.__spf_interval
      
  def _set_spf_interval(self, v, load=False):
    """
    Setter method for spf_interval, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/spf_interval (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spf_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spf_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("spf_interval_level",spf_interval.spf_interval, yang_name="spf-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="spf-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spf_interval must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("spf_interval_level",spf_interval.spf_interval, yang_name="spf-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="spf-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)""",
        })

    self.__spf_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spf_interval(self):
    self.__spf_interval = YANGDynClass(base=YANGListType("spf_interval_level",spf_interval.spf_interval, yang_name="spf-interval", rest_name="spf-interval", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='spf-interval-level', extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}), is_container='list', yang_name="spf-interval", rest_name="spf-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'SPF calculation Timers', u'cli-suppress-mode': None, u'callpoint': u'IsisSpfInterval', u'cli-compact-syntax': None, u'cli-sequence-commands': None, u'cli-suppress-key-abbreviation': None, u'cli-incomplete-command': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='list', is_config=True)


  def _get_reverse_metric(self):
    """
    Getter method for reverse_metric, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/reverse_metric (container)
    """
    return self.__reverse_metric
      
  def _set_reverse_metric(self, v, load=False):
    """
    Setter method for reverse_metric, mapped from YANG variable /routing_system/router/isis/router_isis_cmds_holder/router_isis_attributes/reverse_metric (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reverse_metric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reverse_metric() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=reverse_metric.reverse_metric, is_container='container', presence=True, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure IS-IS reverse metric at the router level'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reverse_metric must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=reverse_metric.reverse_metric, is_container='container', presence=True, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure IS-IS reverse metric at the router level'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)""",
        })

    self.__reverse_metric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reverse_metric(self):
    self.__reverse_metric = YANGDynClass(base=reverse_metric.reverse_metric, is_container='container', presence=True, yang_name="reverse-metric", rest_name="reverse-metric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Configure IS-IS reverse metric at the router level'}}, namespace='urn:brocade.com:mgmt:brocade-isis', defining_module='brocade-isis', yang_type='container', is_config=True)

  auth_check = __builtin__.property(_get_auth_check, _set_auth_check)
  auth_mode = __builtin__.property(_get_auth_mode, _set_auth_mode)
  auth_key = __builtin__.property(_get_auth_key, _set_auth_key)
  bfd = __builtin__.property(_get_bfd, _set_bfd)
  csnp_interval = __builtin__.property(_get_csnp_interval, _set_csnp_interval)
  disable_inc_stct_spf_opt = __builtin__.property(_get_disable_inc_stct_spf_opt, _set_disable_inc_stct_spf_opt)
  disable_incremental_spf_opt = __builtin__.property(_get_disable_incremental_spf_opt, _set_disable_incremental_spf_opt)
  disable_partial_spf_opt = __builtin__.property(_get_disable_partial_spf_opt, _set_disable_partial_spf_opt)
  fast_flood = __builtin__.property(_get_fast_flood, _set_fast_flood)
  graceful_restart = __builtin__.property(_get_graceful_restart, _set_graceful_restart)
  hello = __builtin__.property(_get_hello, _set_hello)
  hostname = __builtin__.property(_get_hostname, _set_hostname)
  is_type = __builtin__.property(_get_is_type, _set_is_type)
  log = __builtin__.property(_get_log, _set_log)
  lsp_gen_interval = __builtin__.property(_get_lsp_gen_interval, _set_lsp_gen_interval)
  lsp_interval = __builtin__.property(_get_lsp_interval, _set_lsp_interval)
  lsp_refresh_interval = __builtin__.property(_get_lsp_refresh_interval, _set_lsp_refresh_interval)
  max_lsp_lifetime = __builtin__.property(_get_max_lsp_lifetime, _set_max_lsp_lifetime)
  nonstop_routing = __builtin__.property(_get_nonstop_routing, _set_nonstop_routing)
  partial_spf_interval = __builtin__.property(_get_partial_spf_interval, _set_partial_spf_interval)
  retransmit_interval = __builtin__.property(_get_retransmit_interval, _set_retransmit_interval)
  set_debug = __builtin__.property(_get_set_debug, _set_set_debug)
  set_overload_bit = __builtin__.property(_get_set_overload_bit, _set_set_overload_bit)
  spf_interval = __builtin__.property(_get_spf_interval, _set_spf_interval)
  reverse_metric = __builtin__.property(_get_reverse_metric, _set_reverse_metric)


  _pyangbind_elements = {'auth_check': auth_check, 'auth_mode': auth_mode, 'auth_key': auth_key, 'bfd': bfd, 'csnp_interval': csnp_interval, 'disable_inc_stct_spf_opt': disable_inc_stct_spf_opt, 'disable_incremental_spf_opt': disable_incremental_spf_opt, 'disable_partial_spf_opt': disable_partial_spf_opt, 'fast_flood': fast_flood, 'graceful_restart': graceful_restart, 'hello': hello, 'hostname': hostname, 'is_type': is_type, 'log': log, 'lsp_gen_interval': lsp_gen_interval, 'lsp_interval': lsp_interval, 'lsp_refresh_interval': lsp_refresh_interval, 'max_lsp_lifetime': max_lsp_lifetime, 'nonstop_routing': nonstop_routing, 'partial_spf_interval': partial_spf_interval, 'retransmit_interval': retransmit_interval, 'set_debug': set_debug, 'set_overload_bit': set_overload_bit, 'spf_interval': spf_interval, 'reverse_metric': reverse_metric, }


