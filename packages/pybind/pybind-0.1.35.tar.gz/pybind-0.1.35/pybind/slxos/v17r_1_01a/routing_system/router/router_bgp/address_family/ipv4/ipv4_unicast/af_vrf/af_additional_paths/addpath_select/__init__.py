
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class addpath_select(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/router/router-bgp/address-family/ipv4/ipv4-unicast/af-vrf/af-additional-paths/addpath-select. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__addpath_sel_best','__addpath_sel_groupbest','__addpath_sel_all',)

  _yang_name = 'addpath-select'
  _rest_name = 'select'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__addpath_sel_best = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'2..16']}), is_leaf=True, yang_name="addpath-sel-best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u"Select best 'n'", u'alt-name': u'best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='uint8', is_config=True)
    self.__addpath_sel_groupbest = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addpath-sel-groupbest", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select group-best', u'alt-name': u'group-best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)
    self.__addpath_sel_all = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addpath-sel-all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select all(Max: 16)', u'alt-name': u'all'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'router', u'router-bgp', u'address-family', u'ipv4', u'ipv4-unicast', u'af-vrf', u'af-additional-paths', u'addpath-select']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'bgp', u'address-family', u'ipv4', u'unicast', u'vrf', u'additional-paths', u'select']

  def _get_addpath_sel_best(self):
    """
    Getter method for addpath_sel_best, mapped from YANG variable /routing_system/router/router_bgp/address_family/ipv4/ipv4_unicast/af_vrf/af_additional_paths/addpath_select/addpath_sel_best (uint8)
    """
    return self.__addpath_sel_best
      
  def _set_addpath_sel_best(self, v, load=False):
    """
    Setter method for addpath_sel_best, mapped from YANG variable /routing_system/router/router_bgp/address_family/ipv4/ipv4_unicast/af_vrf/af_additional_paths/addpath_select/addpath_sel_best (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_addpath_sel_best is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_addpath_sel_best() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'2..16']}), is_leaf=True, yang_name="addpath-sel-best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u"Select best 'n'", u'alt-name': u'best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """addpath_sel_best must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'2..16']}), is_leaf=True, yang_name="addpath-sel-best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u"Select best 'n'", u'alt-name': u'best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='uint8', is_config=True)""",
        })

    self.__addpath_sel_best = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_addpath_sel_best(self):
    self.__addpath_sel_best = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'2..16']}), is_leaf=True, yang_name="addpath-sel-best", rest_name="best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u"Select best 'n'", u'alt-name': u'best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='uint8', is_config=True)


  def _get_addpath_sel_groupbest(self):
    """
    Getter method for addpath_sel_groupbest, mapped from YANG variable /routing_system/router/router_bgp/address_family/ipv4/ipv4_unicast/af_vrf/af_additional_paths/addpath_select/addpath_sel_groupbest (empty)
    """
    return self.__addpath_sel_groupbest
      
  def _set_addpath_sel_groupbest(self, v, load=False):
    """
    Setter method for addpath_sel_groupbest, mapped from YANG variable /routing_system/router/router_bgp/address_family/ipv4/ipv4_unicast/af_vrf/af_additional_paths/addpath_select/addpath_sel_groupbest (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_addpath_sel_groupbest is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_addpath_sel_groupbest() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="addpath-sel-groupbest", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select group-best', u'alt-name': u'group-best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """addpath_sel_groupbest must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addpath-sel-groupbest", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select group-best', u'alt-name': u'group-best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)""",
        })

    self.__addpath_sel_groupbest = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_addpath_sel_groupbest(self):
    self.__addpath_sel_groupbest = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addpath-sel-groupbest", rest_name="group-best", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select group-best', u'alt-name': u'group-best'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)


  def _get_addpath_sel_all(self):
    """
    Getter method for addpath_sel_all, mapped from YANG variable /routing_system/router/router_bgp/address_family/ipv4/ipv4_unicast/af_vrf/af_additional_paths/addpath_select/addpath_sel_all (empty)
    """
    return self.__addpath_sel_all
      
  def _set_addpath_sel_all(self, v, load=False):
    """
    Setter method for addpath_sel_all, mapped from YANG variable /routing_system/router/router_bgp/address_family/ipv4/ipv4_unicast/af_vrf/af_additional_paths/addpath_select/addpath_sel_all (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_addpath_sel_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_addpath_sel_all() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="addpath-sel-all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select all(Max: 16)', u'alt-name': u'all'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """addpath_sel_all must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addpath-sel-all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select all(Max: 16)', u'alt-name': u'all'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)""",
        })

    self.__addpath_sel_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_addpath_sel_all(self):
    self.__addpath_sel_all = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="addpath-sel-all", rest_name="all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Select all(Max: 16)', u'alt-name': u'all'}}, namespace='urn:brocade.com:mgmt:brocade-bgp', defining_module='brocade-bgp', yang_type='empty', is_config=True)

  addpath_sel_best = __builtin__.property(_get_addpath_sel_best, _set_addpath_sel_best)
  addpath_sel_groupbest = __builtin__.property(_get_addpath_sel_groupbest, _set_addpath_sel_groupbest)
  addpath_sel_all = __builtin__.property(_get_addpath_sel_all, _set_addpath_sel_all)


  _pyangbind_elements = {'addpath_sel_best': addpath_sel_best, 'addpath_sel_groupbest': addpath_sel_groupbest, 'addpath_sel_all': addpath_sel_all, }


