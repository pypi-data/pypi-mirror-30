
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import external_lsa_onstartup
import summary_lsa_onstartup
import link_onstartup
class on_startup(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-common-def - based on the path /routing-system/router/ospf/max-metric/router-lsa/on-startup. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__time','__wait_for_bgp','__all_lsas_onstartup','__external_lsa_onstartup','__summary_lsa_onstartup','__link_onstartup',)

  _yang_name = 'on-startup'
  _rest_name = 'on-startup'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__external_lsa_onstartup = YANGDynClass(base=external_lsa_onstartup.external_lsa_onstartup, is_container='container', presence=True, yang_name="external-lsa-onstartup", rest_name="external-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in External LSA with max metric value', u'alt-name': u'external-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)
    self.__link_onstartup = YANGDynClass(base=link_onstartup.link_onstartup, is_container='container', presence=False, yang_name="link-onstartup", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router LSA link type', u'alt-name': u'link', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)
    self.__all_lsas_onstartup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="all-lsas-onstartup", rest_name="all-lsas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Replace Metric in all External and Summary\nLSAs with default max metric value', u'alt-name': u'all-lsas'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)
    self.__time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5 ..86400']}), is_leaf=True, yang_name="time", rest_name="time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL Amount of time to advertise maximum metric,range 5 to 86400 seconds', u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='uint32', is_config=True)
    self.__wait_for_bgp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="wait-for-bgp", rest_name="wait-for-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Advertise maximum metric until BGP has converged or 600 seconds'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)
    self.__summary_lsa_onstartup = YANGDynClass(base=summary_lsa_onstartup.summary_lsa_onstartup, is_container='container', presence=True, yang_name="summary-lsa-onstartup", rest_name="summary-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in Summary LSA with max metric value', u'alt-name': u'summary-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'routing-system', u'router', u'ospf', u'max-metric', u'router-lsa', u'on-startup']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'router', u'ospf', u'max-metric', u'router-lsa', u'on-startup']

  def _get_time(self):
    """
    Getter method for time, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/time (uint32)
    """
    return self.__time
      
  def _set_time(self, v, load=False):
    """
    Setter method for time, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_time() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5 ..86400']}), is_leaf=True, yang_name="time", rest_name="time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL Amount of time to advertise maximum metric,range 5 to 86400 seconds', u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5 ..86400']}), is_leaf=True, yang_name="time", rest_name="time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL Amount of time to advertise maximum metric,range 5 to 86400 seconds', u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='uint32', is_config=True)""",
        })

    self.__time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_time(self):
    self.__time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'5 ..86400']}), is_leaf=True, yang_name="time", rest_name="time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DECIMAL Amount of time to advertise maximum metric,range 5 to 86400 seconds', u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='uint32', is_config=True)


  def _get_wait_for_bgp(self):
    """
    Getter method for wait_for_bgp, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/wait_for_bgp (empty)
    """
    return self.__wait_for_bgp
      
  def _set_wait_for_bgp(self, v, load=False):
    """
    Setter method for wait_for_bgp, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/wait_for_bgp (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_wait_for_bgp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_wait_for_bgp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="wait-for-bgp", rest_name="wait-for-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Advertise maximum metric until BGP has converged or 600 seconds'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """wait_for_bgp must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="wait-for-bgp", rest_name="wait-for-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Advertise maximum metric until BGP has converged or 600 seconds'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)""",
        })

    self.__wait_for_bgp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_wait_for_bgp(self):
    self.__wait_for_bgp = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="wait-for-bgp", rest_name="wait-for-bgp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Advertise maximum metric until BGP has converged or 600 seconds'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)


  def _get_all_lsas_onstartup(self):
    """
    Getter method for all_lsas_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/all_lsas_onstartup (empty)
    """
    return self.__all_lsas_onstartup
      
  def _set_all_lsas_onstartup(self, v, load=False):
    """
    Setter method for all_lsas_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/all_lsas_onstartup (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_all_lsas_onstartup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_all_lsas_onstartup() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="all-lsas-onstartup", rest_name="all-lsas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Replace Metric in all External and Summary\nLSAs with default max metric value', u'alt-name': u'all-lsas'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """all_lsas_onstartup must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="all-lsas-onstartup", rest_name="all-lsas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Replace Metric in all External and Summary\nLSAs with default max metric value', u'alt-name': u'all-lsas'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)""",
        })

    self.__all_lsas_onstartup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_all_lsas_onstartup(self):
    self.__all_lsas_onstartup = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="all-lsas-onstartup", rest_name="all-lsas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Replace Metric in all External and Summary\nLSAs with default max metric value', u'alt-name': u'all-lsas'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='empty', is_config=True)


  def _get_external_lsa_onstartup(self):
    """
    Getter method for external_lsa_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/external_lsa_onstartup (container)
    """
    return self.__external_lsa_onstartup
      
  def _set_external_lsa_onstartup(self, v, load=False):
    """
    Setter method for external_lsa_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/external_lsa_onstartup (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_external_lsa_onstartup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_external_lsa_onstartup() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=external_lsa_onstartup.external_lsa_onstartup, is_container='container', presence=True, yang_name="external-lsa-onstartup", rest_name="external-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in External LSA with max metric value', u'alt-name': u'external-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """external_lsa_onstartup must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=external_lsa_onstartup.external_lsa_onstartup, is_container='container', presence=True, yang_name="external-lsa-onstartup", rest_name="external-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in External LSA with max metric value', u'alt-name': u'external-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)""",
        })

    self.__external_lsa_onstartup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_external_lsa_onstartup(self):
    self.__external_lsa_onstartup = YANGDynClass(base=external_lsa_onstartup.external_lsa_onstartup, is_container='container', presence=True, yang_name="external-lsa-onstartup", rest_name="external-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in External LSA with max metric value', u'alt-name': u'external-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)


  def _get_summary_lsa_onstartup(self):
    """
    Getter method for summary_lsa_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/summary_lsa_onstartup (container)
    """
    return self.__summary_lsa_onstartup
      
  def _set_summary_lsa_onstartup(self, v, load=False):
    """
    Setter method for summary_lsa_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/summary_lsa_onstartup (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_summary_lsa_onstartup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_summary_lsa_onstartup() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=summary_lsa_onstartup.summary_lsa_onstartup, is_container='container', presence=True, yang_name="summary-lsa-onstartup", rest_name="summary-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in Summary LSA with max metric value', u'alt-name': u'summary-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """summary_lsa_onstartup must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=summary_lsa_onstartup.summary_lsa_onstartup, is_container='container', presence=True, yang_name="summary-lsa-onstartup", rest_name="summary-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in Summary LSA with max metric value', u'alt-name': u'summary-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)""",
        })

    self.__summary_lsa_onstartup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_summary_lsa_onstartup(self):
    self.__summary_lsa_onstartup = YANGDynClass(base=summary_lsa_onstartup.summary_lsa_onstartup, is_container='container', presence=True, yang_name="summary-lsa-onstartup", rest_name="summary-lsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Replace Metric in Summary LSA with max metric value', u'alt-name': u'summary-lsa'}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)


  def _get_link_onstartup(self):
    """
    Getter method for link_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/link_onstartup (container)
    """
    return self.__link_onstartup
      
  def _set_link_onstartup(self, v, load=False):
    """
    Setter method for link_onstartup, mapped from YANG variable /routing_system/router/ospf/max_metric/router_lsa/on_startup/link_onstartup (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_onstartup is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_onstartup() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=link_onstartup.link_onstartup, is_container='container', presence=False, yang_name="link-onstartup", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router LSA link type', u'alt-name': u'link', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_onstartup must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=link_onstartup.link_onstartup, is_container='container', presence=False, yang_name="link-onstartup", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router LSA link type', u'alt-name': u'link', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)""",
        })

    self.__link_onstartup = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_onstartup(self):
    self.__link_onstartup = YANGDynClass(base=link_onstartup.link_onstartup, is_container='container', presence=False, yang_name="link-onstartup", rest_name="link", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Router LSA link type', u'alt-name': u'link', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-ospf', defining_module='brocade-ospf', yang_type='container', is_config=True)

  time = __builtin__.property(_get_time, _set_time)
  wait_for_bgp = __builtin__.property(_get_wait_for_bgp, _set_wait_for_bgp)
  all_lsas_onstartup = __builtin__.property(_get_all_lsas_onstartup, _set_all_lsas_onstartup)
  external_lsa_onstartup = __builtin__.property(_get_external_lsa_onstartup, _set_external_lsa_onstartup)
  summary_lsa_onstartup = __builtin__.property(_get_summary_lsa_onstartup, _set_summary_lsa_onstartup)
  link_onstartup = __builtin__.property(_get_link_onstartup, _set_link_onstartup)


  _pyangbind_elements = {'time': time, 'wait_for_bgp': wait_for_bgp, 'all_lsas_onstartup': all_lsas_onstartup, 'external_lsa_onstartup': external_lsa_onstartup, 'summary_lsa_onstartup': summary_lsa_onstartup, 'link_onstartup': link_onstartup, }


