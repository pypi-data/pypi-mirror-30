
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import layer2
class children(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-opstest - based on the path /opstest-state/routes/route/children. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__keyid','__parentKey','__attr1','__attr2','__layer2',)

  _yang_name = 'children'
  _rest_name = 'children'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__attr2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr2", rest_name="attr2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)
    self.__keyid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keyid", rest_name="keyid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)
    self.__parentKey = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="parentKey", rest_name="parentKey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='inet:ipv4-address', is_config=False)
    self.__layer2 = YANGDynClass(base=YANGListType("layer2id",layer2.layer2, yang_name="layer2", rest_name="layer2", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='layer2id', extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}), is_container='list', yang_name="layer2", rest_name="layer2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='list', is_config=False)
    self.__attr1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr1", rest_name="attr1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'opstest-state', u'routes', u'route', u'children']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'opstest-state', u'routes', u'route', u'children']

  def _get_keyid(self):
    """
    Getter method for keyid, mapped from YANG variable /opstest_state/routes/route/children/keyid (uint32)
    """
    return self.__keyid
      
  def _set_keyid(self, v, load=False):
    """
    Setter method for keyid, mapped from YANG variable /opstest_state/routes/route/children/keyid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_keyid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_keyid() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keyid", rest_name="keyid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """keyid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keyid", rest_name="keyid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)""",
        })

    self.__keyid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_keyid(self):
    self.__keyid = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="keyid", rest_name="keyid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)


  def _get_parentKey(self):
    """
    Getter method for parentKey, mapped from YANG variable /opstest_state/routes/route/children/parentKey (inet:ipv4-address)
    """
    return self.__parentKey
      
  def _set_parentKey(self, v, load=False):
    """
    Setter method for parentKey, mapped from YANG variable /opstest_state/routes/route/children/parentKey (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_parentKey is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_parentKey() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="parentKey", rest_name="parentKey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """parentKey must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="parentKey", rest_name="parentKey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__parentKey = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_parentKey(self):
    self.__parentKey = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="parentKey", rest_name="parentKey", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='inet:ipv4-address', is_config=False)


  def _get_attr1(self):
    """
    Getter method for attr1, mapped from YANG variable /opstest_state/routes/route/children/attr1 (uint32)
    """
    return self.__attr1
      
  def _set_attr1(self, v, load=False):
    """
    Setter method for attr1, mapped from YANG variable /opstest_state/routes/route/children/attr1 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr1 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr1() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr1", rest_name="attr1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr1 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr1", rest_name="attr1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)""",
        })

    self.__attr1 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr1(self):
    self.__attr1 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr1", rest_name="attr1", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)


  def _get_attr2(self):
    """
    Getter method for attr2, mapped from YANG variable /opstest_state/routes/route/children/attr2 (uint32)
    """
    return self.__attr2
      
  def _set_attr2(self, v, load=False):
    """
    Setter method for attr2, mapped from YANG variable /opstest_state/routes/route/children/attr2 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_attr2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_attr2() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr2", rest_name="attr2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """attr2 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr2", rest_name="attr2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)""",
        })

    self.__attr2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_attr2(self):
    self.__attr2 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="attr2", rest_name="attr2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='uint32', is_config=False)


  def _get_layer2(self):
    """
    Getter method for layer2, mapped from YANG variable /opstest_state/routes/route/children/layer2 (list)
    """
    return self.__layer2
      
  def _set_layer2(self, v, load=False):
    """
    Setter method for layer2, mapped from YANG variable /opstest_state/routes/route/children/layer2 (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_layer2 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_layer2() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("layer2id",layer2.layer2, yang_name="layer2", rest_name="layer2", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='layer2id', extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}), is_container='list', yang_name="layer2", rest_name="layer2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """layer2 must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("layer2id",layer2.layer2, yang_name="layer2", rest_name="layer2", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='layer2id', extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}), is_container='list', yang_name="layer2", rest_name="layer2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='list', is_config=False)""",
        })

    self.__layer2 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_layer2(self):
    self.__layer2 = YANGDynClass(base=YANGListType("layer2id",layer2.layer2, yang_name="layer2", rest_name="layer2", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='layer2id', extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}), is_container='list', yang_name="layer2", rest_name="layer2", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'MplstestRouteLayer2'}}, namespace='urn:brocade.com:mgmt:brocade-opstest', defining_module='brocade-opstest', yang_type='list', is_config=False)

  keyid = __builtin__.property(_get_keyid)
  parentKey = __builtin__.property(_get_parentKey)
  attr1 = __builtin__.property(_get_attr1)
  attr2 = __builtin__.property(_get_attr2)
  layer2 = __builtin__.property(_get_layer2)


  _pyangbind_elements = {'keyid': keyid, 'parentKey': parentKey, 'attr1': attr1, 'attr2': attr2, 'layer2': layer2, }


