
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import forward
import backward
class slm_threshold(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /protocol/cfm/y1731/test-profile/test-profile-params/slm-threshold. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__forward','__backward',)

  _yang_name = 'slm-threshold'
  _rest_name = 'threshold'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__forward = YANGDynClass(base=forward.forward, is_container='container', presence=False, yang_name="forward", rest_name="forward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM forward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__backward = YANGDynClass(base=backward.backward, is_container='container', presence=False, yang_name="backward", rest_name="backward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM backward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'protocol', u'cfm', u'y1731', u'test-profile', u'test-profile-params', u'slm-threshold']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'protocol', u'cfm', u'y1731', u'test-profile', u'threshold']

  def _get_forward(self):
    """
    Getter method for forward, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile_params/slm_threshold/forward (container)
    """
    return self.__forward
      
  def _set_forward(self, v, load=False):
    """
    Setter method for forward, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile_params/slm_threshold/forward (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forward is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forward() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=forward.forward, is_container='container', presence=False, yang_name="forward", rest_name="forward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM forward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forward must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=forward.forward, is_container='container', presence=False, yang_name="forward", rest_name="forward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM forward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__forward = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forward(self):
    self.__forward = YANGDynClass(base=forward.forward, is_container='container', presence=False, yang_name="forward", rest_name="forward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM forward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)


  def _get_backward(self):
    """
    Getter method for backward, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile_params/slm_threshold/backward (container)
    """
    return self.__backward
      
  def _set_backward(self, v, load=False):
    """
    Setter method for backward, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile_params/slm_threshold/backward (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_backward is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_backward() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=backward.backward, is_container='container', presence=False, yang_name="backward", rest_name="backward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM backward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """backward must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=backward.backward, is_container='container', presence=False, yang_name="backward", rest_name="backward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM backward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__backward = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_backward(self):
    self.__backward = YANGDynClass(base=backward.backward, is_container='container', presence=False, yang_name="backward", rest_name="backward", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure ETH-SLM backward threshold'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)

  forward = __builtin__.property(_get_forward, _set_forward)
  backward = __builtin__.property(_get_backward, _set_backward)


  _pyangbind_elements = {'forward': forward, 'backward': backward, }


