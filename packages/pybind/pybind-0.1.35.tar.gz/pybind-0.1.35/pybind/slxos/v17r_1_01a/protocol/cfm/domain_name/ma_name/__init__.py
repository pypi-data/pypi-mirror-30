
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import cfm_ma_sub_commands
class ma_name(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /protocol/cfm/domain-name/ma-name. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__ma_name','__ma_id','__ma_vlan_vid','__ma_bd_vid','__ma_priority','__cfm_ma_sub_commands',)

  _yang_name = 'ma-name'
  _rest_name = 'ma-name'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__ma_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'MA ID used for short-MAID', u'cli-run-template': u'$(.?:)', u'alt-name': u'id', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    self.__ma_bd_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16384']}), is_leaf=True, yang_name="ma-bd-vid", rest_name="bridge-domain", parent=self, choice=(u'vid-type', u'bridgeDomain'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'bridge-domain association', u'cli-run-template': u'$(.?:)', u'alt-name': u'bridge-domain', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    self.__ma_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'String length 21 char', u'cli-run-template': u'$(.?:)', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    self.__cfm_ma_sub_commands = YANGDynClass(base=cfm_ma_sub_commands.cfm_ma_sub_commands, is_container='container', presence=False, yang_name="cfm-ma-sub-commands", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-break-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__ma_vlan_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-vlan-vid", rest_name="vlan", parent=self, choice=(u'vid-type', u'vlan'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan association', u'cli-run-template': u'$(.?:)', u'alt-name': u'vlan', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    self.__ma_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="ma-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-run-template': u'$(.?:)', u'alt-name': u'priority', u'info': u'Set Priority for this MA', u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'protocol', u'cfm', u'domain-name', u'ma-name']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'protocol', u'cfm', u'domain-name', u'ma-name']

  def _get_ma_name(self):
    """
    Getter method for ma_name, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_name (string)
    """
    return self.__ma_name
      
  def _set_ma_name(self, v, load=False):
    """
    Setter method for ma_name, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_name() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'String length 21 char', u'cli-run-template': u'$(.?:)', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'String length 21 char', u'cli-run-template': u'$(.?:)', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)""",
        })

    self.__ma_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_name(self):
    self.__ma_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..21']}), is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'String length 21 char', u'cli-run-template': u'$(.?:)', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)


  def _get_ma_id(self):
    """
    Getter method for ma_id, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_id (uint32)
    """
    return self.__ma_id
      
  def _set_ma_id(self, v, load=False):
    """
    Setter method for ma_id, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_id() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'MA ID used for short-MAID', u'cli-run-template': u'$(.?:)', u'alt-name': u'id', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'MA ID used for short-MAID', u'cli-run-template': u'$(.?:)', u'alt-name': u'id', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__ma_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_id(self):
    self.__ma_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-id", rest_name="id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'MA ID used for short-MAID', u'cli-run-template': u'$(.?:)', u'alt-name': u'id', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_ma_vlan_vid(self):
    """
    Getter method for ma_vlan_vid, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_vlan_vid (uint32)
    """
    return self.__ma_vlan_vid
      
  def _set_ma_vlan_vid(self, v, load=False):
    """
    Setter method for ma_vlan_vid, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_vlan_vid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_vlan_vid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_vlan_vid() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-vlan-vid", rest_name="vlan", parent=self, choice=(u'vid-type', u'vlan'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan association', u'cli-run-template': u'$(.?:)', u'alt-name': u'vlan', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_vlan_vid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-vlan-vid", rest_name="vlan", parent=self, choice=(u'vid-type', u'vlan'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan association', u'cli-run-template': u'$(.?:)', u'alt-name': u'vlan', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__ma_vlan_vid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_vlan_vid(self):
    self.__ma_vlan_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4090']}), is_leaf=True, yang_name="ma-vlan-vid", rest_name="vlan", parent=self, choice=(u'vid-type', u'vlan'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Vlan association', u'cli-run-template': u'$(.?:)', u'alt-name': u'vlan', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_ma_bd_vid(self):
    """
    Getter method for ma_bd_vid, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_bd_vid (uint32)
    """
    return self.__ma_bd_vid
      
  def _set_ma_bd_vid(self, v, load=False):
    """
    Setter method for ma_bd_vid, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_bd_vid (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_bd_vid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_bd_vid() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16384']}), is_leaf=True, yang_name="ma-bd-vid", rest_name="bridge-domain", parent=self, choice=(u'vid-type', u'bridgeDomain'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'bridge-domain association', u'cli-run-template': u'$(.?:)', u'alt-name': u'bridge-domain', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_bd_vid must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16384']}), is_leaf=True, yang_name="ma-bd-vid", rest_name="bridge-domain", parent=self, choice=(u'vid-type', u'bridgeDomain'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'bridge-domain association', u'cli-run-template': u'$(.?:)', u'alt-name': u'bridge-domain', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__ma_bd_vid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_bd_vid(self):
    self.__ma_bd_vid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..16384']}), is_leaf=True, yang_name="ma-bd-vid", rest_name="bridge-domain", parent=self, choice=(u'vid-type', u'bridgeDomain'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'bridge-domain association', u'cli-run-template': u'$(.?:)', u'alt-name': u'bridge-domain', u'cli-incomplete-command': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_ma_priority(self):
    """
    Getter method for ma_priority, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_priority (uint32)
    """
    return self.__ma_priority
      
  def _set_ma_priority(self, v, load=False):
    """
    Setter method for ma_priority, mapped from YANG variable /protocol/cfm/domain_name/ma_name/ma_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_priority() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="ma-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-run-template': u'$(.?:)', u'alt-name': u'priority', u'info': u'Set Priority for this MA', u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="ma-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-run-template': u'$(.?:)', u'alt-name': u'priority', u'info': u'Set Priority for this MA', u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__ma_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_priority(self):
    self.__ma_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0..7']}), is_leaf=True, yang_name="ma-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-run-template': u'$(.?:)', u'alt-name': u'priority', u'info': u'Set Priority for this MA', u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_cfm_ma_sub_commands(self):
    """
    Getter method for cfm_ma_sub_commands, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands (container)
    """
    return self.__cfm_ma_sub_commands
      
  def _set_cfm_ma_sub_commands(self, v, load=False):
    """
    Setter method for cfm_ma_sub_commands, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cfm_ma_sub_commands is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cfm_ma_sub_commands() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=cfm_ma_sub_commands.cfm_ma_sub_commands, is_container='container', presence=False, yang_name="cfm-ma-sub-commands", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-break-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cfm_ma_sub_commands must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=cfm_ma_sub_commands.cfm_ma_sub_commands, is_container='container', presence=False, yang_name="cfm-ma-sub-commands", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-break-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__cfm_ma_sub_commands = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cfm_ma_sub_commands(self):
    self.__cfm_ma_sub_commands = YANGDynClass(base=cfm_ma_sub_commands.cfm_ma_sub_commands, is_container='container', presence=False, yang_name="cfm-ma-sub-commands", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-break-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)

  ma_name = __builtin__.property(_get_ma_name, _set_ma_name)
  ma_id = __builtin__.property(_get_ma_id, _set_ma_id)
  ma_vlan_vid = __builtin__.property(_get_ma_vlan_vid, _set_ma_vlan_vid)
  ma_bd_vid = __builtin__.property(_get_ma_bd_vid, _set_ma_bd_vid)
  ma_priority = __builtin__.property(_get_ma_priority, _set_ma_priority)
  cfm_ma_sub_commands = __builtin__.property(_get_cfm_ma_sub_commands, _set_cfm_ma_sub_commands)

  __choices__ = {u'vid-type': {u'vlan': [u'ma_vlan_vid'], u'bridgeDomain': [u'ma_bd_vid']}}
  _pyangbind_elements = {'ma_name': ma_name, 'ma_id': ma_id, 'ma_vlan_vid': ma_vlan_vid, 'ma_bd_vid': ma_bd_vid, 'ma_priority': ma_priority, 'cfm_ma_sub_commands': cfm_ma_sub_commands, }


