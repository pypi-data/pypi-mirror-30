
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import test_profile_params
class test_profile(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /protocol/cfm/y1731/test-profile. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__test_profile','__profile_type','__test_profile_params',)

  _yang_name = 'test-profile'
  _rest_name = 'test-profile'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__test_profile = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure test profile name [1-32 characters]', u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    self.__test_profile_params = YANGDynClass(base=test_profile_params.test_profile_params, is_container='container', presence=False, yang_name="test-profile-params", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    self.__profile_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'synthetic-loss-measurement': {'value': 2}, u'delay-measurement': {'value': 1}},), is_leaf=True, yang_name="profile-type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Profile Type as ETH-DM / ETH-SLM', u'alt-name': u'type', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'protocol', u'cfm', u'y1731', u'test-profile']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'protocol', u'cfm', u'y1731', u'test-profile']

  def _get_test_profile(self):
    """
    Getter method for test_profile, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile (string)
    """
    return self.__test_profile
      
  def _set_test_profile(self, v, load=False):
    """
    Setter method for test_profile, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test_profile() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure test profile name [1-32 characters]', u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test_profile must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure test profile name [1-32 characters]', u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)""",
        })

    self.__test_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test_profile(self):
    self.__test_profile = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure test profile name [1-32 characters]', u'cli-hide-in-submode': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)


  def _get_profile_type(self):
    """
    Getter method for profile_type, mapped from YANG variable /protocol/cfm/y1731/test_profile/profile_type (y1731-profile-type)
    """
    return self.__profile_type
      
  def _set_profile_type(self, v, load=False):
    """
    Setter method for profile_type, mapped from YANG variable /protocol/cfm/y1731/test_profile/profile_type (y1731-profile-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_profile_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_profile_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'synthetic-loss-measurement': {'value': 2}, u'delay-measurement': {'value': 1}},), is_leaf=True, yang_name="profile-type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Profile Type as ETH-DM / ETH-SLM', u'alt-name': u'type', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """profile_type must be of a type compatible with y1731-profile-type""",
          'defined-type': "brocade-dot1ag:y1731-profile-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'synthetic-loss-measurement': {'value': 2}, u'delay-measurement': {'value': 1}},), is_leaf=True, yang_name="profile-type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Profile Type as ETH-DM / ETH-SLM', u'alt-name': u'type', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-type', is_config=True)""",
        })

    self.__profile_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_profile_type(self):
    self.__profile_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'synthetic-loss-measurement': {'value': 2}, u'delay-measurement': {'value': 1}},), is_leaf=True, yang_name="profile-type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure Profile Type as ETH-DM / ETH-SLM', u'alt-name': u'type', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='y1731-profile-type', is_config=True)


  def _get_test_profile_params(self):
    """
    Getter method for test_profile_params, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile_params (container)
    """
    return self.__test_profile_params
      
  def _set_test_profile_params(self, v, load=False):
    """
    Setter method for test_profile_params, mapped from YANG variable /protocol/cfm/y1731/test_profile/test_profile_params (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test_profile_params is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test_profile_params() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=test_profile_params.test_profile_params, is_container='container', presence=False, yang_name="test-profile-params", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test_profile_params must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=test_profile_params.test_profile_params, is_container='container', presence=False, yang_name="test-profile-params", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)""",
        })

    self.__test_profile_params = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test_profile_params(self):
    self.__test_profile_params = YANGDynClass(base=test_profile_params.test_profile_params, is_container='container', presence=False, yang_name="test-profile-params", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='container', is_config=True)

  test_profile = __builtin__.property(_get_test_profile, _set_test_profile)
  profile_type = __builtin__.property(_get_profile_type, _set_profile_type)
  test_profile_params = __builtin__.property(_get_test_profile_params, _set_test_profile_params)


  _pyangbind_elements = {'test_profile': test_profile, 'profile_type': profile_type, 'test_profile_params': test_profile_params, }


