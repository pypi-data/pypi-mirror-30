
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import rmep_test_profile
class remote_mep(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /protocol/cfm/domain-name/ma-name/cfm-ma-sub-commands/mep/cfm-mep-sub-commands/remote-mep. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__remote_mep','__rmep_test_profile','__action_profile_association',)

  _yang_name = 'remote-mep'
  _rest_name = 'remote-mep'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__rmep_test_profile = YANGDynClass(base=YANGListType("rmep_test_profile mode",rmep_test_profile.rmep_test_profile, yang_name="rmep-test-profile", rest_name="test-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-test-profile mode', extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}), is_container='list', yang_name="rmep-test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)
    self.__action_profile_association = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="action-profile-association", rest_name="action-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Associate action profile with Remote-MEP', u'alt-name': u'action-profile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    self.__remote_mep = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}), is_leaf=True, yang_name="remote-mep", rest_name="remote-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'DECIMAL :: <1-8191>', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'protocol', u'cfm', u'domain-name', u'ma-name', u'cfm-ma-sub-commands', u'mep', u'cfm-mep-sub-commands', u'remote-mep']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'protocol', u'cfm', u'domain-name', u'ma-name', u'mep', u'remote-mep']

  def _get_remote_mep(self):
    """
    Getter method for remote_mep, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands/mep/cfm_mep_sub_commands/remote_mep/remote_mep (uint32)
    """
    return self.__remote_mep
      
  def _set_remote_mep(self, v, load=False):
    """
    Setter method for remote_mep, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands/mep/cfm_mep_sub_commands/remote_mep/remote_mep (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_remote_mep is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_remote_mep() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}), is_leaf=True, yang_name="remote-mep", rest_name="remote-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'DECIMAL :: <1-8191>', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """remote_mep must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}), is_leaf=True, yang_name="remote-mep", rest_name="remote-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'DECIMAL :: <1-8191>', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)""",
        })

    self.__remote_mep = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_remote_mep(self):
    self.__remote_mep = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}), is_leaf=True, yang_name="remote-mep", rest_name="remote-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'DECIMAL :: <1-8191>', u'cli-full-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='uint32', is_config=True)


  def _get_rmep_test_profile(self):
    """
    Getter method for rmep_test_profile, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands/mep/cfm_mep_sub_commands/remote_mep/rmep_test_profile (list)
    """
    return self.__rmep_test_profile
      
  def _set_rmep_test_profile(self, v, load=False):
    """
    Setter method for rmep_test_profile, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands/mep/cfm_mep_sub_commands/remote_mep/rmep_test_profile (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rmep_test_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rmep_test_profile() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("rmep_test_profile mode",rmep_test_profile.rmep_test_profile, yang_name="rmep-test-profile", rest_name="test-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-test-profile mode', extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}), is_container='list', yang_name="rmep-test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rmep_test_profile must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("rmep_test_profile mode",rmep_test_profile.rmep_test_profile, yang_name="rmep-test-profile", rest_name="test-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-test-profile mode', extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}), is_container='list', yang_name="rmep-test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)""",
        })

    self.__rmep_test_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rmep_test_profile(self):
    self.__rmep_test_profile = YANGDynClass(base=YANGListType("rmep_test_profile mode",rmep_test_profile.rmep_test_profile, yang_name="rmep-test-profile", rest_name="test-profile", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rmep-test-profile mode', extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}), is_container='list', yang_name="rmep-test-profile", rest_name="test-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate test profile with Remote-MEP', u'cli-suppress-mode': None, u'alt-name': u'test-profile', u'callpoint': u'setDot1agRmepProfile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='list', is_config=True)


  def _get_action_profile_association(self):
    """
    Getter method for action_profile_association, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands/mep/cfm_mep_sub_commands/remote_mep/action_profile_association (string)
    """
    return self.__action_profile_association
      
  def _set_action_profile_association(self, v, load=False):
    """
    Setter method for action_profile_association, mapped from YANG variable /protocol/cfm/domain_name/ma_name/cfm_ma_sub_commands/mep/cfm_mep_sub_commands/remote_mep/action_profile_association (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_action_profile_association is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_action_profile_association() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="action-profile-association", rest_name="action-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Associate action profile with Remote-MEP', u'alt-name': u'action-profile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """action_profile_association must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="action-profile-association", rest_name="action-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Associate action profile with Remote-MEP', u'alt-name': u'action-profile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)""",
        })

    self.__action_profile_association = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_action_profile_association(self):
    self.__action_profile_association = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..32']}), is_leaf=True, yang_name="action-profile-association", rest_name="action-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Associate action profile with Remote-MEP', u'alt-name': u'action-profile'}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag', defining_module='brocade-dot1ag', yang_type='string', is_config=True)

  remote_mep = __builtin__.property(_get_remote_mep, _set_remote_mep)
  rmep_test_profile = __builtin__.property(_get_rmep_test_profile, _set_rmep_test_profile)
  action_profile_association = __builtin__.property(_get_action_profile_association, _set_action_profile_association)


  _pyangbind_elements = {'remote_mep': remote_mep, 'rmep_test_profile': rmep_test_profile, 'action_profile_association': action_profile_association, }


