
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class member_bridge_domain(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-topology-group - based on the path /topology-group/member-bridge-domain. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__member_bridge_domain_add','__member_bridge_domain_remove',)

  _yang_name = 'member-bridge-domain'
  _rest_name = 'member-bridge-domain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__member_bridge_domain_add = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Add the Member Bridge Domain range to this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'add'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)
    self.__member_bridge_domain_remove = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Remove the Member Bridge Domain range from this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'remove'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'topology-group', u'member-bridge-domain']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'topology-group', u'member-bridge-domain']

  def _get_member_bridge_domain_add(self):
    """
    Getter method for member_bridge_domain_add, mapped from YANG variable /topology_group/member_bridge_domain/member_bridge_domain_add (bd:ui32-bridge-domain-range)

    YANG Description: This specifies list of Member Bridge Domains to
be added to this topology group
    """
    return self.__member_bridge_domain_add
      
  def _set_member_bridge_domain_add(self, v, load=False):
    """
    Setter method for member_bridge_domain_add, mapped from YANG variable /topology_group/member_bridge_domain/member_bridge_domain_add (bd:ui32-bridge-domain-range)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_member_bridge_domain_add is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_member_bridge_domain_add() directly.

    YANG Description: This specifies list of Member Bridge Domains to
be added to this topology group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Add the Member Bridge Domain range to this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'add'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """member_bridge_domain_add must be of a type compatible with bd:ui32-bridge-domain-range""",
          'defined-type': "bd:ui32-bridge-domain-range",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Add the Member Bridge Domain range to this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'add'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)""",
        })

    self.__member_bridge_domain_add = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_member_bridge_domain_add(self):
    self.__member_bridge_domain_add = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-add", rest_name="add", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Add the Member Bridge Domain range to this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'add'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)


  def _get_member_bridge_domain_remove(self):
    """
    Getter method for member_bridge_domain_remove, mapped from YANG variable /topology_group/member_bridge_domain/member_bridge_domain_remove (bd:ui32-bridge-domain-range)

    YANG Description: This specifies list of Member Bridge Domains to
be removed from this topology group
    """
    return self.__member_bridge_domain_remove
      
  def _set_member_bridge_domain_remove(self, v, load=False):
    """
    Setter method for member_bridge_domain_remove, mapped from YANG variable /topology_group/member_bridge_domain/member_bridge_domain_remove (bd:ui32-bridge-domain-range)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_member_bridge_domain_remove is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_member_bridge_domain_remove() directly.

    YANG Description: This specifies list of Member Bridge Domains to
be removed from this topology group
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Remove the Member Bridge Domain range from this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'remove'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """member_bridge_domain_remove must be of a type compatible with bd:ui32-bridge-domain-range""",
          'defined-type': "bd:ui32-bridge-domain-range",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Remove the Member Bridge Domain range from this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'remove'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)""",
        })

    self.__member_bridge_domain_remove = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_member_bridge_domain_remove(self):
    self.__member_bridge_domain_remove = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([1-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?((,((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6]))(-((1[0-9]{1,2})|([2-9][0-9]{0,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-6])))?)?)*', 'length': [u'1..253']}), is_leaf=True, yang_name="member-bridge-domain-remove", rest_name="remove", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Remove the Member Bridge Domain range from this topology group', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-suppress-show-conf-path': None, u'cli-full-command': None, u'alt-name': u'remove'}}, namespace='urn:brocade.com:mgmt:brocade-topology-group', defining_module='brocade-topology-group', yang_type='bd:ui32-bridge-domain-range', is_config=True)

  member_bridge_domain_add = __builtin__.property(_get_member_bridge_domain_add, _set_member_bridge_domain_add)
  member_bridge_domain_remove = __builtin__.property(_get_member_bridge_domain_remove, _set_member_bridge_domain_remove)


  _pyangbind_elements = {'member_bridge_domain_add': member_bridge_domain_add, 'member_bridge_domain_remove': member_bridge_domain_remove, }


