
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import outer_vlan_list
class bridge_domain_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-nsm-operational - based on the path /bridge-domain-state/bridge-domain-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  bridge domain node
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__bd_id','__vc_id','__active_ac_lif_count','__config_ac_lif_count','__active_vfi_lif_count','__config_vfi_lif_count','__local_switching','__block_bpdu','__bd_type','__ve_ifindex','__pw_profile','__mac_limit','__statistics','__mac_addr_withdrawal','__mct_enabled','__description','__outer_vlan_list',)

  _yang_name = 'bridge-domain-list'
  _rest_name = 'bridge-domain-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", rest_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)
    self.__pw_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="pw-profile", rest_name="pw-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)
    self.__mac_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-limit", rest_name="mac-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    self.__bd_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bd-type", rest_name="bd-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    self.__mac_addr_withdrawal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-addr-withdrawal", rest_name="mac-addr-withdrawal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    self.__bd_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bd-id", rest_name="bd-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__config_ac_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-ac-lif-count", rest_name="config-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    self.__block_bpdu = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="block-bpdu", rest_name="block-bpdu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    self.__active_ac_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-ac-lif-count", rest_name="active-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    self.__mct_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mct-enabled", rest_name="mct-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    self.__statistics = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__outer_vlan_list = YANGDynClass(base=YANGListType("outer_vlan",outer_vlan_list.outer_vlan_list, yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='outer-vlan', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)
    self.__config_vfi_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-vfi-lif-count", rest_name="config-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    self.__ve_ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ve-ifindex", rest_name="ve-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    self.__active_vfi_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-vfi-lif-count", rest_name="active-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    self.__local_switching = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="local-switching", rest_name="local-switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bridge-domain-state', u'bridge-domain-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bridge-domain-state', u'bridge-domain-list']

  def _get_bd_id(self):
    """
    Getter method for bd_id, mapped from YANG variable /bridge_domain_state/bridge_domain_list/bd_id (uint32)

    YANG Description: BD id
    """
    return self.__bd_id
      
  def _set_bd_id(self, v, load=False):
    """
    Setter method for bd_id, mapped from YANG variable /bridge_domain_state/bridge_domain_list/bd_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bd_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bd_id() directly.

    YANG Description: BD id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bd-id", rest_name="bd-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bd_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bd-id", rest_name="bd-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bd_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bd_id(self):
    self.__bd_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bd-id", rest_name="bd-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_vc_id(self):
    """
    Getter method for vc_id, mapped from YANG variable /bridge_domain_state/bridge_domain_list/vc_id (uint32)

    YANG Description: vc id
    """
    return self.__vc_id
      
  def _set_vc_id(self, v, load=False):
    """
    Setter method for vc_id, mapped from YANG variable /bridge_domain_state/bridge_domain_list/vc_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_id() directly.

    YANG Description: vc id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_id(self):
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_active_ac_lif_count(self):
    """
    Getter method for active_ac_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/active_ac_lif_count (uint16)

    YANG Description: active ac lif count
    """
    return self.__active_ac_lif_count
      
  def _set_active_ac_lif_count(self, v, load=False):
    """
    Setter method for active_ac_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/active_ac_lif_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active_ac_lif_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active_ac_lif_count() directly.

    YANG Description: active ac lif count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-ac-lif-count", rest_name="active-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active_ac_lif_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-ac-lif-count", rest_name="active-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)""",
        })

    self.__active_ac_lif_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active_ac_lif_count(self):
    self.__active_ac_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-ac-lif-count", rest_name="active-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)


  def _get_config_ac_lif_count(self):
    """
    Getter method for config_ac_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/config_ac_lif_count (uint16)

    YANG Description: config ac lif count
    """
    return self.__config_ac_lif_count
      
  def _set_config_ac_lif_count(self, v, load=False):
    """
    Setter method for config_ac_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/config_ac_lif_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_ac_lif_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_ac_lif_count() directly.

    YANG Description: config ac lif count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-ac-lif-count", rest_name="config-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_ac_lif_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-ac-lif-count", rest_name="config-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)""",
        })

    self.__config_ac_lif_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_ac_lif_count(self):
    self.__config_ac_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-ac-lif-count", rest_name="config-ac-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)


  def _get_active_vfi_lif_count(self):
    """
    Getter method for active_vfi_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/active_vfi_lif_count (uint16)

    YANG Description: active vfi lif count
    """
    return self.__active_vfi_lif_count
      
  def _set_active_vfi_lif_count(self, v, load=False):
    """
    Setter method for active_vfi_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/active_vfi_lif_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active_vfi_lif_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active_vfi_lif_count() directly.

    YANG Description: active vfi lif count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-vfi-lif-count", rest_name="active-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active_vfi_lif_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-vfi-lif-count", rest_name="active-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)""",
        })

    self.__active_vfi_lif_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active_vfi_lif_count(self):
    self.__active_vfi_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="active-vfi-lif-count", rest_name="active-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)


  def _get_config_vfi_lif_count(self):
    """
    Getter method for config_vfi_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/config_vfi_lif_count (uint16)

    YANG Description: config vfi lif count
    """
    return self.__config_vfi_lif_count
      
  def _set_config_vfi_lif_count(self, v, load=False):
    """
    Setter method for config_vfi_lif_count, mapped from YANG variable /bridge_domain_state/bridge_domain_list/config_vfi_lif_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_vfi_lif_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_vfi_lif_count() directly.

    YANG Description: config vfi lif count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-vfi-lif-count", rest_name="config-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_vfi_lif_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-vfi-lif-count", rest_name="config-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)""",
        })

    self.__config_vfi_lif_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_vfi_lif_count(self):
    self.__config_vfi_lif_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-vfi-lif-count", rest_name="config-vfi-lif-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)


  def _get_local_switching(self):
    """
    Getter method for local_switching, mapped from YANG variable /bridge_domain_state/bridge_domain_list/local_switching (boolean)

    YANG Description: local switching
    """
    return self.__local_switching
      
  def _set_local_switching(self, v, load=False):
    """
    Setter method for local_switching, mapped from YANG variable /bridge_domain_state/bridge_domain_list/local_switching (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_local_switching is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_local_switching() directly.

    YANG Description: local switching
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="local-switching", rest_name="local-switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """local_switching must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="local-switching", rest_name="local-switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__local_switching = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_local_switching(self):
    self.__local_switching = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="local-switching", rest_name="local-switching", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)


  def _get_block_bpdu(self):
    """
    Getter method for block_bpdu, mapped from YANG variable /bridge_domain_state/bridge_domain_list/block_bpdu (boolean)

    YANG Description: block bpdu
    """
    return self.__block_bpdu
      
  def _set_block_bpdu(self, v, load=False):
    """
    Setter method for block_bpdu, mapped from YANG variable /bridge_domain_state/bridge_domain_list/block_bpdu (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_block_bpdu is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_block_bpdu() directly.

    YANG Description: block bpdu
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="block-bpdu", rest_name="block-bpdu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """block_bpdu must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="block-bpdu", rest_name="block-bpdu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__block_bpdu = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_block_bpdu(self):
    self.__block_bpdu = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="block-bpdu", rest_name="block-bpdu", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)


  def _get_bd_type(self):
    """
    Getter method for bd_type, mapped from YANG variable /bridge_domain_state/bridge_domain_list/bd_type (uint16)

    YANG Description: bd type
    """
    return self.__bd_type
      
  def _set_bd_type(self, v, load=False):
    """
    Setter method for bd_type, mapped from YANG variable /bridge_domain_state/bridge_domain_list/bd_type (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bd_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bd_type() directly.

    YANG Description: bd type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bd-type", rest_name="bd-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bd_type must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bd-type", rest_name="bd-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)""",
        })

    self.__bd_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bd_type(self):
    self.__bd_type = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bd-type", rest_name="bd-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)


  def _get_ve_ifindex(self):
    """
    Getter method for ve_ifindex, mapped from YANG variable /bridge_domain_state/bridge_domain_list/ve_ifindex (uint32)

    YANG Description: ve_ifindex
    """
    return self.__ve_ifindex
      
  def _set_ve_ifindex(self, v, load=False):
    """
    Setter method for ve_ifindex, mapped from YANG variable /bridge_domain_state/bridge_domain_list/ve_ifindex (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ve_ifindex is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ve_ifindex() directly.

    YANG Description: ve_ifindex
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ve-ifindex", rest_name="ve-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ve_ifindex must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ve-ifindex", rest_name="ve-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__ve_ifindex = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ve_ifindex(self):
    self.__ve_ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="ve-ifindex", rest_name="ve-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint32', is_config=False)


  def _get_pw_profile(self):
    """
    Getter method for pw_profile, mapped from YANG variable /bridge_domain_state/bridge_domain_list/pw_profile (string)

    YANG Description: pw_profile
    """
    return self.__pw_profile
      
  def _set_pw_profile(self, v, load=False):
    """
    Setter method for pw_profile, mapped from YANG variable /bridge_domain_state/bridge_domain_list/pw_profile (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pw_profile is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pw_profile() directly.

    YANG Description: pw_profile
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="pw-profile", rest_name="pw-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pw_profile must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="pw-profile", rest_name="pw-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)""",
        })

    self.__pw_profile = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pw_profile(self):
    self.__pw_profile = YANGDynClass(base=unicode, is_leaf=True, yang_name="pw-profile", rest_name="pw-profile", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)


  def _get_mac_limit(self):
    """
    Getter method for mac_limit, mapped from YANG variable /bridge_domain_state/bridge_domain_list/mac_limit (uint16)

    YANG Description: mac_limit
    """
    return self.__mac_limit
      
  def _set_mac_limit(self, v, load=False):
    """
    Setter method for mac_limit, mapped from YANG variable /bridge_domain_state/bridge_domain_list/mac_limit (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_limit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_limit() directly.

    YANG Description: mac_limit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-limit", rest_name="mac-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_limit must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-limit", rest_name="mac-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)""",
        })

    self.__mac_limit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_limit(self):
    self.__mac_limit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="mac-limit", rest_name="mac-limit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='uint16', is_config=False)


  def _get_statistics(self):
    """
    Getter method for statistics, mapped from YANG variable /bridge_domain_state/bridge_domain_list/statistics (boolean)

    YANG Description: statistics
    """
    return self.__statistics
      
  def _set_statistics(self, v, load=False):
    """
    Setter method for statistics, mapped from YANG variable /bridge_domain_state/bridge_domain_list/statistics (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_statistics is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_statistics() directly.

    YANG Description: statistics
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """statistics must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__statistics = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_statistics(self):
    self.__statistics = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="statistics", rest_name="statistics", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)


  def _get_mac_addr_withdrawal(self):
    """
    Getter method for mac_addr_withdrawal, mapped from YANG variable /bridge_domain_state/bridge_domain_list/mac_addr_withdrawal (boolean)

    YANG Description: mac address withdrawal
    """
    return self.__mac_addr_withdrawal
      
  def _set_mac_addr_withdrawal(self, v, load=False):
    """
    Setter method for mac_addr_withdrawal, mapped from YANG variable /bridge_domain_state/bridge_domain_list/mac_addr_withdrawal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mac_addr_withdrawal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mac_addr_withdrawal() directly.

    YANG Description: mac address withdrawal
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mac-addr-withdrawal", rest_name="mac-addr-withdrawal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mac_addr_withdrawal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-addr-withdrawal", rest_name="mac-addr-withdrawal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__mac_addr_withdrawal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mac_addr_withdrawal(self):
    self.__mac_addr_withdrawal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mac-addr-withdrawal", rest_name="mac-addr-withdrawal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)


  def _get_mct_enabled(self):
    """
    Getter method for mct_enabled, mapped from YANG variable /bridge_domain_state/bridge_domain_list/mct_enabled (boolean)

    YANG Description: mct enabled
    """
    return self.__mct_enabled
      
  def _set_mct_enabled(self, v, load=False):
    """
    Setter method for mct_enabled, mapped from YANG variable /bridge_domain_state/bridge_domain_list/mct_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mct_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mct_enabled() directly.

    YANG Description: mct enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="mct-enabled", rest_name="mct-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mct_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mct-enabled", rest_name="mct-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)""",
        })

    self.__mct_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mct_enabled(self):
    self.__mct_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="mct-enabled", rest_name="mct-enabled", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='boolean', is_config=False)


  def _get_description(self):
    """
    Getter method for description, mapped from YANG variable /bridge_domain_state/bridge_domain_list/description (string)

    YANG Description: bridge domain specific description
    """
    return self.__description
      
  def _set_description(self, v, load=False):
    """
    Setter method for description, mapped from YANG variable /bridge_domain_state/bridge_domain_list/description (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_description is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_description() directly.

    YANG Description: bridge domain specific description
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="description", rest_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """description must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="description", rest_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)""",
        })

    self.__description = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_description(self):
    self.__description = YANGDynClass(base=unicode, is_leaf=True, yang_name="description", rest_name="description", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='string', is_config=False)


  def _get_outer_vlan_list(self):
    """
    Getter method for outer_vlan_list, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list (list)

    YANG Description: bd_vlan_tag_info
    """
    return self.__outer_vlan_list
      
  def _set_outer_vlan_list(self, v, load=False):
    """
    Setter method for outer_vlan_list, mapped from YANG variable /bridge_domain_state/bridge_domain_list/outer_vlan_list (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_outer_vlan_list is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_outer_vlan_list() directly.

    YANG Description: bd_vlan_tag_info
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("outer_vlan",outer_vlan_list.outer_vlan_list, yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='outer-vlan', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """outer_vlan_list must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("outer_vlan",outer_vlan_list.outer_vlan_list, yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='outer-vlan', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)""",
        })

    self.__outer_vlan_list = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_outer_vlan_list(self):
    self.__outer_vlan_list = YANGDynClass(base=YANGListType("outer_vlan",outer_vlan_list.outer_vlan_list, yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='outer-vlan', extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}), is_container='list', yang_name="outer-vlan-list", rest_name="outer-vlan-list", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'nsm-bd-vlan-tag-info', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-nsm-operational', defining_module='brocade-nsm-operational', yang_type='list', is_config=False)

  bd_id = __builtin__.property(_get_bd_id)
  vc_id = __builtin__.property(_get_vc_id)
  active_ac_lif_count = __builtin__.property(_get_active_ac_lif_count)
  config_ac_lif_count = __builtin__.property(_get_config_ac_lif_count)
  active_vfi_lif_count = __builtin__.property(_get_active_vfi_lif_count)
  config_vfi_lif_count = __builtin__.property(_get_config_vfi_lif_count)
  local_switching = __builtin__.property(_get_local_switching)
  block_bpdu = __builtin__.property(_get_block_bpdu)
  bd_type = __builtin__.property(_get_bd_type)
  ve_ifindex = __builtin__.property(_get_ve_ifindex)
  pw_profile = __builtin__.property(_get_pw_profile)
  mac_limit = __builtin__.property(_get_mac_limit)
  statistics = __builtin__.property(_get_statistics)
  mac_addr_withdrawal = __builtin__.property(_get_mac_addr_withdrawal)
  mct_enabled = __builtin__.property(_get_mct_enabled)
  description = __builtin__.property(_get_description)
  outer_vlan_list = __builtin__.property(_get_outer_vlan_list)


  _pyangbind_elements = {'bd_id': bd_id, 'vc_id': vc_id, 'active_ac_lif_count': active_ac_lif_count, 'config_ac_lif_count': config_ac_lif_count, 'active_vfi_lif_count': active_vfi_lif_count, 'config_vfi_lif_count': config_vfi_lif_count, 'local_switching': local_switching, 'block_bpdu': block_bpdu, 'bd_type': bd_type, 've_ifindex': ve_ifindex, 'pw_profile': pw_profile, 'mac_limit': mac_limit, 'statistics': statistics, 'mac_addr_withdrawal': mac_addr_withdrawal, 'mct_enabled': mct_enabled, 'description': description, 'outer_vlan_list': outer_vlan_list, }


