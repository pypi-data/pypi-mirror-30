
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import bd_vc_peer_counter
import bd_vc_peer_data
class bd_vc_peer_state(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-pwm-operational - based on the path /bd-vc-peer-state. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description:  VC peer information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__vc_id','__bd_vc_peer_counter','__bd_vc_peer_data',)

  _yang_name = 'bd-vc-peer-state'
  _rest_name = 'bd-vc-peer-state'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__bd_vc_peer_counter = YANGDynClass(base=bd_vc_peer_counter.bd_vc_peer_counter, is_container='container', presence=False, yang_name="bd-vc-peer-counter", rest_name="bd-vc-peer-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-counter', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='container', is_config=False)
    self.__bd_vc_peer_data = YANGDynClass(base=YANGListType("vc_peer_address",bd_vc_peer_data.bd_vc_peer_data, yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-peer-address', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'bd-vc-peer-state']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'bd-vc-peer-state']

  def _get_vc_id(self):
    """
    Getter method for vc_id, mapped from YANG variable /bd_vc_peer_state/vc_id (uint32)

    YANG Description: peer vc id
    """
    return self.__vc_id
      
  def _set_vc_id(self, v, load=False):
    """
    Setter method for vc_id, mapped from YANG variable /bd_vc_peer_state/vc_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vc_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vc_id() directly.

    YANG Description: peer vc id
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vc_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)""",
        })

    self.__vc_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vc_id(self):
    self.__vc_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="vc-id", rest_name="vc-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='uint32', is_config=False)


  def _get_bd_vc_peer_counter(self):
    """
    Getter method for bd_vc_peer_counter, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_counter (container)

    YANG Description:  VC peer counters
    """
    return self.__bd_vc_peer_counter
      
  def _set_bd_vc_peer_counter(self, v, load=False):
    """
    Setter method for bd_vc_peer_counter, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_counter (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bd_vc_peer_counter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bd_vc_peer_counter() directly.

    YANG Description:  VC peer counters
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=bd_vc_peer_counter.bd_vc_peer_counter, is_container='container', presence=False, yang_name="bd-vc-peer-counter", rest_name="bd-vc-peer-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-counter', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='container', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bd_vc_peer_counter must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bd_vc_peer_counter.bd_vc_peer_counter, is_container='container', presence=False, yang_name="bd-vc-peer-counter", rest_name="bd-vc-peer-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-counter', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='container', is_config=False)""",
        })

    self.__bd_vc_peer_counter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bd_vc_peer_counter(self):
    self.__bd_vc_peer_counter = YANGDynClass(base=bd_vc_peer_counter.bd_vc_peer_counter, is_container='container', presence=False, yang_name="bd-vc-peer-counter", rest_name="bd-vc-peer-counter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-counter', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='container', is_config=False)


  def _get_bd_vc_peer_data(self):
    """
    Getter method for bd_vc_peer_data, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data (list)

    YANG Description:  VC peer
    """
    return self.__bd_vc_peer_data
      
  def _set_bd_vc_peer_data(self, v, load=False):
    """
    Setter method for bd_vc_peer_data, mapped from YANG variable /bd_vc_peer_state/bd_vc_peer_data (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bd_vc_peer_data is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bd_vc_peer_data() directly.

    YANG Description:  VC peer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("vc_peer_address",bd_vc_peer_data.bd_vc_peer_data, yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-peer-address', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bd_vc_peer_data must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("vc_peer_address",bd_vc_peer_data.bd_vc_peer_data, yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-peer-address', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)""",
        })

    self.__bd_vc_peer_data = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bd_vc_peer_data(self):
    self.__bd_vc_peer_data = YANGDynClass(base=YANGListType("vc_peer_address",bd_vc_peer_data.bd_vc_peer_data, yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='vc-peer-address', extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}), is_container='list', yang_name="bd-vc-peer-data", rest_name="bd-vc-peer-data", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'pwm-bd-vc-peer-data', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-pwm-operational', defining_module='brocade-pwm-operational', yang_type='list', is_config=False)

  vc_id = __builtin__.property(_get_vc_id)
  bd_vc_peer_counter = __builtin__.property(_get_bd_vc_peer_counter)
  bd_vc_peer_data = __builtin__.property(_get_bd_vc_peer_data)


  _pyangbind_elements = {'vc_id': vc_id, 'bd_vc_peer_counter': bd_vc_peer_counter, 'bd_vc_peer_data': bd_vc_peer_data, }


