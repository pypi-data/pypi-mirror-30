
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import vlans
import port
class cist(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-xstp-ext - based on the path /brocade_xstp_ext_rpc/get-stp-mst-detail/output/cist. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cist_root_id','__cist_bridge_id','__cist_reg_root_id','__root_forward_delay','__hello_time','__max_age','__max_hops','__migrate_time','__vlans','__port',)

  _yang_name = 'cist'
  _rest_name = 'cist'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__max_age = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'6..40']}), is_leaf=True, yang_name="max-age", rest_name="max-age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__vlans = YANGDynClass(base=vlans.vlans, is_container='container', presence=False, yang_name="vlans", rest_name="vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='container', is_config=True)
    self.__cist_root_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-root-id", rest_name="cist-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    self.__hello_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), is_leaf=True, yang_name="hello-time", rest_name="hello-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__root_forward_delay = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'4..30']}), is_leaf=True, yang_name="root-forward-delay", rest_name="root-forward-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__migrate_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="migrate-time", rest_name="migrate-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__max_hops = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..40']}), is_leaf=True, yang_name="max-hops", rest_name="max-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__cist_bridge_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-bridge-id", rest_name="cist-bridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    self.__cist_reg_root_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-reg-root-id", rest_name="cist-reg-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    self.__port = YANGDynClass(base=YANGListType(False,port.port, yang_name="port", rest_name="port", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="port", rest_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_xstp_ext_rpc', u'get-stp-mst-detail', u'output', u'cist']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-stp-mst-detail', u'output', u'cist']

  def _get_cist_root_id(self):
    """
    Getter method for cist_root_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/cist_root_id (bridge-id-type)

    YANG Description: CIST Root Id
    """
    return self.__cist_root_id
      
  def _set_cist_root_id(self, v, load=False):
    """
    Setter method for cist_root_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/cist_root_id (bridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cist_root_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cist_root_id() directly.

    YANG Description: CIST Root Id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cist-root-id", rest_name="cist-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cist_root_id must be of a type compatible with bridge-id-type""",
          'defined-type': "brocade-xstp-ext:bridge-id-type",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-root-id", rest_name="cist-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)""",
        })

    self.__cist_root_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cist_root_id(self):
    self.__cist_root_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-root-id", rest_name="cist-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)


  def _get_cist_bridge_id(self):
    """
    Getter method for cist_bridge_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/cist_bridge_id (bridge-id-type)

    YANG Description: CIST bridge Id
    """
    return self.__cist_bridge_id
      
  def _set_cist_bridge_id(self, v, load=False):
    """
    Setter method for cist_bridge_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/cist_bridge_id (bridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cist_bridge_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cist_bridge_id() directly.

    YANG Description: CIST bridge Id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cist-bridge-id", rest_name="cist-bridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cist_bridge_id must be of a type compatible with bridge-id-type""",
          'defined-type': "brocade-xstp-ext:bridge-id-type",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-bridge-id", rest_name="cist-bridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)""",
        })

    self.__cist_bridge_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cist_bridge_id(self):
    self.__cist_bridge_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-bridge-id", rest_name="cist-bridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)


  def _get_cist_reg_root_id(self):
    """
    Getter method for cist_reg_root_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/cist_reg_root_id (bridge-id-type)

    YANG Description: CIST regional root Id
    """
    return self.__cist_reg_root_id
      
  def _set_cist_reg_root_id(self, v, load=False):
    """
    Setter method for cist_reg_root_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/cist_reg_root_id (bridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cist_reg_root_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cist_reg_root_id() directly.

    YANG Description: CIST regional root Id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cist-reg-root-id", rest_name="cist-reg-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cist_reg_root_id must be of a type compatible with bridge-id-type""",
          'defined-type': "brocade-xstp-ext:bridge-id-type",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-reg-root-id", rest_name="cist-reg-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)""",
        })

    self.__cist_reg_root_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cist_reg_root_id(self):
    self.__cist_reg_root_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="cist-reg-root-id", rest_name="cist-reg-root-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)


  def _get_root_forward_delay(self):
    """
    Getter method for root_forward_delay, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/root_forward_delay (uint32)

    YANG Description: CIST root forward delay (4..30 sec)
    """
    return self.__root_forward_delay
      
  def _set_root_forward_delay(self, v, load=False):
    """
    Setter method for root_forward_delay, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/root_forward_delay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_root_forward_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_root_forward_delay() directly.

    YANG Description: CIST root forward delay (4..30 sec)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'4..30']}), is_leaf=True, yang_name="root-forward-delay", rest_name="root-forward-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """root_forward_delay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'4..30']}), is_leaf=True, yang_name="root-forward-delay", rest_name="root-forward-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__root_forward_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_root_forward_delay(self):
    self.__root_forward_delay = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'4..30']}), is_leaf=True, yang_name="root-forward-delay", rest_name="root-forward-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_hello_time(self):
    """
    Getter method for hello_time, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/hello_time (uint32)

    YANG Description: CIST root hello time (1..10 sec)
    """
    return self.__hello_time
      
  def _set_hello_time(self, v, load=False):
    """
    Setter method for hello_time, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/hello_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_time() directly.

    YANG Description: CIST root hello time (1..10 sec)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), is_leaf=True, yang_name="hello-time", rest_name="hello-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), is_leaf=True, yang_name="hello-time", rest_name="hello-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__hello_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_time(self):
    self.__hello_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), is_leaf=True, yang_name="hello-time", rest_name="hello-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_max_age(self):
    """
    Getter method for max_age, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/max_age (uint32)

    YANG Description: CIST root maximum age (6..40 sec)
    """
    return self.__max_age
      
  def _set_max_age(self, v, load=False):
    """
    Setter method for max_age, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/max_age (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_age is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_age() directly.

    YANG Description: CIST root maximum age (6..40 sec)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'6..40']}), is_leaf=True, yang_name="max-age", rest_name="max-age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_age must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'6..40']}), is_leaf=True, yang_name="max-age", rest_name="max-age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__max_age = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_age(self):
    self.__max_age = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'6..40']}), is_leaf=True, yang_name="max-age", rest_name="max-age", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_max_hops(self):
    """
    Getter method for max_hops, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/max_hops (uint32)

    YANG Description: Hops the BPDU will be valid (1..40)
    """
    return self.__max_hops
      
  def _set_max_hops(self, v, load=False):
    """
    Setter method for max_hops, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/max_hops (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_hops() directly.

    YANG Description: Hops the BPDU will be valid (1..40)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..40']}), is_leaf=True, yang_name="max-hops", rest_name="max-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_hops must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..40']}), is_leaf=True, yang_name="max-hops", rest_name="max-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__max_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_hops(self):
    self.__max_hops = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..40']}), is_leaf=True, yang_name="max-hops", rest_name="max-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_migrate_time(self):
    """
    Getter method for migrate_time, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/migrate_time (uint32)

    YANG Description: Migration time (in seconds)
    """
    return self.__migrate_time
      
  def _set_migrate_time(self, v, load=False):
    """
    Setter method for migrate_time, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/migrate_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_migrate_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_migrate_time() directly.

    YANG Description: Migration time (in seconds)
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="migrate-time", rest_name="migrate-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """migrate_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="migrate-time", rest_name="migrate-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__migrate_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_migrate_time(self):
    self.__migrate_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="migrate-time", rest_name="migrate-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_vlans(self):
    """
    Getter method for vlans, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/vlans (container)

    YANG Description: VLANs associated with this instance.
    """
    return self.__vlans
      
  def _set_vlans(self, v, load=False):
    """
    Setter method for vlans, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/vlans (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vlans is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vlans() directly.

    YANG Description: VLANs associated with this instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vlans.vlans, is_container='container', presence=False, yang_name="vlans", rest_name="vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vlans must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vlans.vlans, is_container='container', presence=False, yang_name="vlans", rest_name="vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='container', is_config=True)""",
        })

    self.__vlans = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vlans(self):
    self.__vlans = YANGDynClass(base=vlans.vlans, is_container='container', presence=False, yang_name="vlans", rest_name="vlans", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='container', is_config=True)


  def _get_port(self):
    """
    Getter method for port, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/port (list)
    """
    return self.__port
      
  def _set_port(self, v, load=False):
    """
    Setter method for port, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_mst_detail/output/cist/port (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType(False,port.port, yang_name="port", rest_name="port", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="port", rest_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType(False,port.port, yang_name="port", rest_name="port", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="port", rest_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='list', is_config=True)""",
        })

    self.__port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port(self):
    self.__port = YANGDynClass(base=YANGListType(False,port.port, yang_name="port", rest_name="port", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='False', extensions=None), is_container='list', yang_name="port", rest_name="port", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='list', is_config=True)

  cist_root_id = __builtin__.property(_get_cist_root_id, _set_cist_root_id)
  cist_bridge_id = __builtin__.property(_get_cist_bridge_id, _set_cist_bridge_id)
  cist_reg_root_id = __builtin__.property(_get_cist_reg_root_id, _set_cist_reg_root_id)
  root_forward_delay = __builtin__.property(_get_root_forward_delay, _set_root_forward_delay)
  hello_time = __builtin__.property(_get_hello_time, _set_hello_time)
  max_age = __builtin__.property(_get_max_age, _set_max_age)
  max_hops = __builtin__.property(_get_max_hops, _set_max_hops)
  migrate_time = __builtin__.property(_get_migrate_time, _set_migrate_time)
  vlans = __builtin__.property(_get_vlans, _set_vlans)
  port = __builtin__.property(_get_port, _set_port)


  _pyangbind_elements = {'cist_root_id': cist_root_id, 'cist_bridge_id': cist_bridge_id, 'cist_reg_root_id': cist_reg_root_id, 'root_forward_delay': root_forward_delay, 'hello_time': hello_time, 'max_age': max_age, 'max_hops': max_hops, 'migrate_time': migrate_time, 'vlans': vlans, 'port': port, }


