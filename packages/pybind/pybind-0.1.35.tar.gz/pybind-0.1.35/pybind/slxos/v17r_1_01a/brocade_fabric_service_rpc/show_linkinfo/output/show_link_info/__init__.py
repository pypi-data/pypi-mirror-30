
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import linkinfo_isl
class show_link_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fabric-service - based on the path /brocade_fabric_service_rpc/show-linkinfo/output/show-link-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__linkinfo_rbridgeid','__linkinfo_domain_reachable','__linkinfo_wwn','__linkinfo_version','__linkinfo_isl',)

  _yang_name = 'show-link-info'
  _rest_name = 'show-link-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__linkinfo_rbridgeid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-rbridgeid", rest_name="linkinfo-rbridgeid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'rbridge-id'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)
    self.__linkinfo_isl = YANGDynClass(base=YANGListType("linkinfo_isl_linknumber",linkinfo_isl.linkinfo_isl, yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='linkinfo-isl-linknumber', extensions=None), is_container='list', yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='list', is_config=True)
    self.__linkinfo_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="linkinfo-wwn", rest_name="linkinfo-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'World Wide Name'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    self.__linkinfo_domain_reachable = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-domain-reachable", rest_name="linkinfo-domain-reachable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the RBridge is reachable\nor not'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-domain-reachable-type', is_config=True)
    self.__linkinfo_version = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-version", rest_name="linkinfo-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'FSPF version'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_fabric_service_rpc', u'show-linkinfo', u'output', u'show-link-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-linkinfo', u'output', u'show-link-info']

  def _get_linkinfo_rbridgeid(self):
    """
    Getter method for linkinfo_rbridgeid, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_rbridgeid (common-def:rbridge-id-type)

    YANG Description: The RBridge-ID of the node in the fabric.
    """
    return self.__linkinfo_rbridgeid
      
  def _set_linkinfo_rbridgeid(self, v, load=False):
    """
    Setter method for linkinfo_rbridgeid, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_rbridgeid (common-def:rbridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_rbridgeid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_rbridgeid() directly.

    YANG Description: The RBridge-ID of the node in the fabric.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-rbridgeid", rest_name="linkinfo-rbridgeid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'rbridge-id'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_rbridgeid must be of a type compatible with common-def:rbridge-id-type""",
          'defined-type': "common-def:rbridge-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-rbridgeid", rest_name="linkinfo-rbridgeid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'rbridge-id'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)""",
        })

    self.__linkinfo_rbridgeid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_rbridgeid(self):
    self.__linkinfo_rbridgeid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-rbridgeid", rest_name="linkinfo-rbridgeid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'rbridge-id'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)


  def _get_linkinfo_domain_reachable(self):
    """
    Getter method for linkinfo_domain_reachable, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_domain_reachable (linkinfo-domain-reachable-type)

    YANG Description: Indicates whether the RBridge is reachable
or not.
Yes - Indicates RBridge is reachable
No  - Indicates RBridge is not reachable.
    """
    return self.__linkinfo_domain_reachable
      
  def _set_linkinfo_domain_reachable(self, v, load=False):
    """
    Setter method for linkinfo_domain_reachable, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_domain_reachable (linkinfo-domain-reachable-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_domain_reachable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_domain_reachable() directly.

    YANG Description: Indicates whether the RBridge is reachable
or not.
Yes - Indicates RBridge is reachable
No  - Indicates RBridge is not reachable.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-domain-reachable", rest_name="linkinfo-domain-reachable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the RBridge is reachable\nor not'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-domain-reachable-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_domain_reachable must be of a type compatible with linkinfo-domain-reachable-type""",
          'defined-type': "brocade-fabric-service:linkinfo-domain-reachable-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-domain-reachable", rest_name="linkinfo-domain-reachable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the RBridge is reachable\nor not'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-domain-reachable-type', is_config=True)""",
        })

    self.__linkinfo_domain_reachable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_domain_reachable(self):
    self.__linkinfo_domain_reachable = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-domain-reachable", rest_name="linkinfo-domain-reachable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the RBridge is reachable\nor not'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-domain-reachable-type', is_config=True)


  def _get_linkinfo_wwn(self):
    """
    Getter method for linkinfo_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_wwn (common-def:wwn-type)

    YANG Description: The WWN of the switch.
    """
    return self.__linkinfo_wwn
      
  def _set_linkinfo_wwn(self, v, load=False):
    """
    Setter method for linkinfo_wwn, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_wwn (common-def:wwn-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_wwn() directly.

    YANG Description: The WWN of the switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="linkinfo-wwn", rest_name="linkinfo-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'World Wide Name'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_wwn must be of a type compatible with common-def:wwn-type""",
          'defined-type': "common-def:wwn-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="linkinfo-wwn", rest_name="linkinfo-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'World Wide Name'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)""",
        })

    self.__linkinfo_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_wwn(self):
    self.__linkinfo_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="linkinfo-wwn", rest_name="linkinfo-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'World Wide Name'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:wwn-type', is_config=True)


  def _get_linkinfo_version(self):
    """
    Getter method for linkinfo_version, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_version (uint32)

    YANG Description: FSPF version.
    """
    return self.__linkinfo_version
      
  def _set_linkinfo_version(self, v, load=False):
    """
    Setter method for linkinfo_version, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_version (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_version() directly.

    YANG Description: FSPF version.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-version", rest_name="linkinfo-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'FSPF version'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_version must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-version", rest_name="linkinfo-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'FSPF version'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__linkinfo_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_version(self):
    self.__linkinfo_version = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-version", rest_name="linkinfo-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'FSPF version'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_linkinfo_isl(self):
    """
    Getter method for linkinfo_isl, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl (list)
    """
    return self.__linkinfo_isl
      
  def _set_linkinfo_isl(self, v, load=False):
    """
    Setter method for linkinfo_isl, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isl is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isl() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("linkinfo_isl_linknumber",linkinfo_isl.linkinfo_isl, yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='linkinfo-isl-linknumber', extensions=None), is_container='list', yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isl must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("linkinfo_isl_linknumber",linkinfo_isl.linkinfo_isl, yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='linkinfo-isl-linknumber', extensions=None), is_container='list', yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='list', is_config=True)""",
        })

    self.__linkinfo_isl = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isl(self):
    self.__linkinfo_isl = YANGDynClass(base=YANGListType("linkinfo_isl_linknumber",linkinfo_isl.linkinfo_isl, yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='linkinfo-isl-linknumber', extensions=None), is_container='list', yang_name="linkinfo-isl", rest_name="linkinfo-isl", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='list', is_config=True)

  linkinfo_rbridgeid = __builtin__.property(_get_linkinfo_rbridgeid, _set_linkinfo_rbridgeid)
  linkinfo_domain_reachable = __builtin__.property(_get_linkinfo_domain_reachable, _set_linkinfo_domain_reachable)
  linkinfo_wwn = __builtin__.property(_get_linkinfo_wwn, _set_linkinfo_wwn)
  linkinfo_version = __builtin__.property(_get_linkinfo_version, _set_linkinfo_version)
  linkinfo_isl = __builtin__.property(_get_linkinfo_isl, _set_linkinfo_isl)


  _pyangbind_elements = {'linkinfo_rbridgeid': linkinfo_rbridgeid, 'linkinfo_domain_reachable': linkinfo_domain_reachable, 'linkinfo_wwn': linkinfo_wwn, 'linkinfo_version': linkinfo_version, 'linkinfo_isl': linkinfo_isl, }


