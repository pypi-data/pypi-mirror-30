
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class linkinfo_isl(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fabric-service - based on the path /brocade_fabric_service_rpc/show-linkinfo/output/show-link-info/linkinfo-isl. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__linkinfo_isl_linknumber','__linkinfo_isllink_destdomain','__linkinfo_isllink_srcport','__linkinfo_isllink_srcport_type','__linkinfo_isllink_srcport_interface','__linkinfo_isllink_destport','__linkinfo_isllink_destport_type','__linkinfo_isllink_destport_interface','__linkinfo_isl_linkcost','__linkinfo_isllink_costcount','__linkinfo_isllink_type','__linkinfo_trunked',)

  _yang_name = 'linkinfo-isl'
  _rest_name = 'linkinfo-isl'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__linkinfo_isllink_destport = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-destport", rest_name="linkinfo-isllink-destport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)
    self.__linkinfo_isllink_destport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-destport-type", rest_name="linkinfo-isllink-destport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)
    self.__linkinfo_isllink_destport_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-destport-interface", rest_name="linkinfo-isllink-destport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)
    self.__linkinfo_isl_linknumber = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linknumber", rest_name="linkinfo-isl-linknumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'ISL number'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__linkinfo_isllink_srcport_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-interface", rest_name="linkinfo-isllink-srcport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)
    self.__linkinfo_isllink_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-type", rest_name="linkinfo-isllink-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Type of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__linkinfo_isl_linkcost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linkcost", rest_name="linkinfo-isl-linkcost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__linkinfo_isllink_srcport = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-srcport", rest_name="linkinfo-isllink-srcport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)
    self.__linkinfo_trunked = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-trunked", rest_name="linkinfo-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the ISL is trunked or not.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-trunked-type', is_config=True)
    self.__linkinfo_isllink_costcount = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-costcount", rest_name="linkinfo-isllink-costcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost count of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    self.__linkinfo_isllink_destdomain = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-isllink-destdomain", rest_name="linkinfo-isllink-destdomain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination RBridge-ID'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)
    self.__linkinfo_isllink_srcport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-type", rest_name="linkinfo-isllink-srcport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_fabric_service_rpc', u'show-linkinfo', u'output', u'show-link-info', u'linkinfo-isl']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-linkinfo', u'output', u'show-link-info', u'linkinfo-isl']

  def _get_linkinfo_isl_linknumber(self):
    """
    Getter method for linkinfo_isl_linknumber, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isl_linknumber (uint32)

    YANG Description: ISL number.
    """
    return self.__linkinfo_isl_linknumber
      
  def _set_linkinfo_isl_linknumber(self, v, load=False):
    """
    Setter method for linkinfo_isl_linknumber, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isl_linknumber (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isl_linknumber is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isl_linknumber() directly.

    YANG Description: ISL number.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linknumber", rest_name="linkinfo-isl-linknumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'ISL number'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isl_linknumber must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linknumber", rest_name="linkinfo-isl-linknumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'ISL number'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__linkinfo_isl_linknumber = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isl_linknumber(self):
    self.__linkinfo_isl_linknumber = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linknumber", rest_name="linkinfo-isl-linknumber", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'ISL number'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_linkinfo_isllink_destdomain(self):
    """
    Getter method for linkinfo_isllink_destdomain, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destdomain (common-def:rbridge-id-type)

    YANG Description: RBridge-ID of the remote/destination switch.
    """
    return self.__linkinfo_isllink_destdomain
      
  def _set_linkinfo_isllink_destdomain(self, v, load=False):
    """
    Setter method for linkinfo_isllink_destdomain, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destdomain (common-def:rbridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_destdomain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_destdomain() directly.

    YANG Description: RBridge-ID of the remote/destination switch.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-isllink-destdomain", rest_name="linkinfo-isllink-destdomain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination RBridge-ID'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_destdomain must be of a type compatible with common-def:rbridge-id-type""",
          'defined-type': "common-def:rbridge-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-isllink-destdomain", rest_name="linkinfo-isllink-destdomain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination RBridge-ID'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)""",
        })

    self.__linkinfo_isllink_destdomain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_destdomain(self):
    self.__linkinfo_isllink_destdomain = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="linkinfo-isllink-destdomain", rest_name="linkinfo-isllink-destdomain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination RBridge-ID'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='common-def:rbridge-id-type', is_config=True)


  def _get_linkinfo_isllink_srcport(self):
    """
    Getter method for linkinfo_isllink_srcport, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_srcport (uint16)

    YANG Description: The source port index of the
RBridge.
    """
    return self.__linkinfo_isllink_srcport
      
  def _set_linkinfo_isllink_srcport(self, v, load=False):
    """
    Setter method for linkinfo_isllink_srcport, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_srcport (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_srcport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_srcport() directly.

    YANG Description: The source port index of the
RBridge.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-srcport", rest_name="linkinfo-isllink-srcport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_srcport must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-srcport", rest_name="linkinfo-isllink-srcport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)""",
        })

    self.__linkinfo_isllink_srcport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_srcport(self):
    self.__linkinfo_isllink_srcport = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-srcport", rest_name="linkinfo-isllink-srcport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)


  def _get_linkinfo_isllink_srcport_type(self):
    """
    Getter method for linkinfo_isllink_srcport_type, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_srcport_type (interfacetype-type)

    YANG Description: Source port/interface type.
It can take the following values:
Te - for 10G Ethernet ports.
Fi - for Fibre Channel ports.
    """
    return self.__linkinfo_isllink_srcport_type
      
  def _set_linkinfo_isllink_srcport_type(self, v, load=False):
    """
    Setter method for linkinfo_isllink_srcport_type, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_srcport_type (interfacetype-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_srcport_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_srcport_type() directly.

    YANG Description: Source port/interface type.
It can take the following values:
Te - for 10G Ethernet ports.
Fi - for Fibre Channel ports.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-type", rest_name="linkinfo-isllink-srcport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_srcport_type must be of a type compatible with interfacetype-type""",
          'defined-type': "brocade-fabric-service:interfacetype-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-type", rest_name="linkinfo-isllink-srcport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)""",
        })

    self.__linkinfo_isllink_srcport_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_srcport_type(self):
    self.__linkinfo_isllink_srcport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-type", rest_name="linkinfo-isllink-srcport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)


  def _get_linkinfo_isllink_srcport_interface(self):
    """
    Getter method for linkinfo_isllink_srcport_interface, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_srcport_interface (interface:interface-type)

    YANG Description: Source port interface information
It is in the format
rbridge-id/slot/port.
    """
    return self.__linkinfo_isllink_srcport_interface
      
  def _set_linkinfo_isllink_srcport_interface(self, v, load=False):
    """
    Setter method for linkinfo_isllink_srcport_interface, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_srcport_interface (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_srcport_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_srcport_interface() directly.

    YANG Description: Source port interface information
It is in the format
rbridge-id/slot/port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-interface", rest_name="linkinfo-isllink-srcport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_srcport_interface must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-interface", rest_name="linkinfo-isllink-srcport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__linkinfo_isllink_srcport_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_srcport_interface(self):
    self.__linkinfo_isllink_srcport_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-srcport-interface", rest_name="linkinfo-isllink-srcport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Source port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)


  def _get_linkinfo_isllink_destport(self):
    """
    Getter method for linkinfo_isllink_destport, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destport (uint16)

    YANG Description: Remote/Destination port index of the ISL
connected to the source port.
    """
    return self.__linkinfo_isllink_destport
      
  def _set_linkinfo_isllink_destport(self, v, load=False):
    """
    Setter method for linkinfo_isllink_destport, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destport (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_destport is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_destport() directly.

    YANG Description: Remote/Destination port index of the ISL
connected to the source port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-destport", rest_name="linkinfo-isllink-destport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_destport must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-destport", rest_name="linkinfo-isllink-destport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)""",
        })

    self.__linkinfo_isllink_destport = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_destport(self):
    self.__linkinfo_isllink_destport = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="linkinfo-isllink-destport", rest_name="linkinfo-isllink-destport", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port index'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint16', is_config=True)


  def _get_linkinfo_isllink_destport_type(self):
    """
    Getter method for linkinfo_isllink_destport_type, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destport_type (interfacetype-type)

    YANG Description: Remote/Destination port/interface type.
It can take the following values:
Te - for 10G Ethernet ports.
Fi - for Fibre Channel ports.
    """
    return self.__linkinfo_isllink_destport_type
      
  def _set_linkinfo_isllink_destport_type(self, v, load=False):
    """
    Setter method for linkinfo_isllink_destport_type, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destport_type (interfacetype-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_destport_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_destport_type() directly.

    YANG Description: Remote/Destination port/interface type.
It can take the following values:
Te - for 10G Ethernet ports.
Fi - for Fibre Channel ports.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-destport-type", rest_name="linkinfo-isllink-destport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_destport_type must be of a type compatible with interfacetype-type""",
          'defined-type': "brocade-fabric-service:interfacetype-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-destport-type", rest_name="linkinfo-isllink-destport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)""",
        })

    self.__linkinfo_isllink_destport_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_destport_type(self):
    self.__linkinfo_isllink_destport_type = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Te|Fi', 'length': [u'2']}), is_leaf=True, yang_name="linkinfo-isllink-destport-type", rest_name="linkinfo-isllink-destport-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port/interface type'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interfacetype-type', is_config=True)


  def _get_linkinfo_isllink_destport_interface(self):
    """
    Getter method for linkinfo_isllink_destport_interface, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destport_interface (interface:interface-type)

    YANG Description: Remote/Destination port interface information
It is in the format
rbridge-id/slot/port.
    """
    return self.__linkinfo_isllink_destport_interface
      
  def _set_linkinfo_isllink_destport_interface(self, v, load=False):
    """
    Setter method for linkinfo_isllink_destport_interface, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_destport_interface (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_destport_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_destport_interface() directly.

    YANG Description: Remote/Destination port interface information
It is in the format
rbridge-id/slot/port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-destport-interface", rest_name="linkinfo-isllink-destport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_destport_interface must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-destport-interface", rest_name="linkinfo-isllink-destport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__linkinfo_isllink_destport_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_destport_interface(self):
    self.__linkinfo_isllink_destport_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="linkinfo-isllink-destport-interface", rest_name="linkinfo-isllink-destport-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Remote/Destination port interface information'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='interface:interface-type', is_config=True)


  def _get_linkinfo_isl_linkcost(self):
    """
    Getter method for linkinfo_isl_linkcost, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isl_linkcost (uint32)

    YANG Description: The cost of the link to reach the
destination. This is a dimensionless
positive number. Every ISL has a
default cost that is inversely
proportional to its bandwidth.
    """
    return self.__linkinfo_isl_linkcost
      
  def _set_linkinfo_isl_linkcost(self, v, load=False):
    """
    Setter method for linkinfo_isl_linkcost, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isl_linkcost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isl_linkcost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isl_linkcost() directly.

    YANG Description: The cost of the link to reach the
destination. This is a dimensionless
positive number. Every ISL has a
default cost that is inversely
proportional to its bandwidth.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linkcost", rest_name="linkinfo-isl-linkcost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isl_linkcost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linkcost", rest_name="linkinfo-isl-linkcost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__linkinfo_isl_linkcost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isl_linkcost(self):
    self.__linkinfo_isl_linkcost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isl-linkcost", rest_name="linkinfo-isl-linkcost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_linkinfo_isllink_costcount(self):
    """
    Getter method for linkinfo_isllink_costcount, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_costcount (uint32)

    YANG Description: Cost count of the link.
    """
    return self.__linkinfo_isllink_costcount
      
  def _set_linkinfo_isllink_costcount(self, v, load=False):
    """
    Setter method for linkinfo_isllink_costcount, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_costcount (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_costcount is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_costcount() directly.

    YANG Description: Cost count of the link.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-costcount", rest_name="linkinfo-isllink-costcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost count of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_costcount must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-costcount", rest_name="linkinfo-isllink-costcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost count of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__linkinfo_isllink_costcount = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_costcount(self):
    self.__linkinfo_isllink_costcount = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-costcount", rest_name="linkinfo-isllink-costcount", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Cost count of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_linkinfo_isllink_type(self):
    """
    Getter method for linkinfo_isllink_type, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_type (uint32)

    YANG Description: Provides the type of the link.
It can be point to point or
virtual links or PISL  or
point to point ethernet.
This parameter is set to
'1' for point to point,
'2' for virtual links,
'3' for PISL and 
'4' for point to point ethernet.
    """
    return self.__linkinfo_isllink_type
      
  def _set_linkinfo_isllink_type(self, v, load=False):
    """
    Setter method for linkinfo_isllink_type, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_isllink_type (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_isllink_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_isllink_type() directly.

    YANG Description: Provides the type of the link.
It can be point to point or
virtual links or PISL  or
point to point ethernet.
This parameter is set to
'1' for point to point,
'2' for virtual links,
'3' for PISL and 
'4' for point to point ethernet.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-type", rest_name="linkinfo-isllink-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Type of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_isllink_type must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-type", rest_name="linkinfo-isllink-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Type of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)""",
        })

    self.__linkinfo_isllink_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_isllink_type(self):
    self.__linkinfo_isllink_type = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="linkinfo-isllink-type", rest_name="linkinfo-isllink-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Type of the link'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='uint32', is_config=True)


  def _get_linkinfo_trunked(self):
    """
    Getter method for linkinfo_trunked, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_trunked (linkinfo-trunked-type)

    YANG Description: Indicates whether the ISL is trunked or not.
Yes - for trunked ISL port
No  - for non trunked ISL port.
    """
    return self.__linkinfo_trunked
      
  def _set_linkinfo_trunked(self, v, load=False):
    """
    Setter method for linkinfo_trunked, mapped from YANG variable /brocade_fabric_service_rpc/show_linkinfo/output/show_link_info/linkinfo_isl/linkinfo_trunked (linkinfo-trunked-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_linkinfo_trunked is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_linkinfo_trunked() directly.

    YANG Description: Indicates whether the ISL is trunked or not.
Yes - for trunked ISL port
No  - for non trunked ISL port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-trunked", rest_name="linkinfo-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the ISL is trunked or not.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-trunked-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """linkinfo_trunked must be of a type compatible with linkinfo-trunked-type""",
          'defined-type': "brocade-fabric-service:linkinfo-trunked-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-trunked", rest_name="linkinfo-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the ISL is trunked or not.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-trunked-type', is_config=True)""",
        })

    self.__linkinfo_trunked = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_linkinfo_trunked(self):
    self.__linkinfo_trunked = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Yes|No|yes|no', 'length': [u'0..3']}), is_leaf=True, yang_name="linkinfo-trunked", rest_name="linkinfo-trunked", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'Indicates whether the ISL is trunked or not.'}}, namespace='urn:brocade.com:mgmt:brocade-fabric-service', defining_module='brocade-fabric-service', yang_type='linkinfo-trunked-type', is_config=True)

  linkinfo_isl_linknumber = __builtin__.property(_get_linkinfo_isl_linknumber, _set_linkinfo_isl_linknumber)
  linkinfo_isllink_destdomain = __builtin__.property(_get_linkinfo_isllink_destdomain, _set_linkinfo_isllink_destdomain)
  linkinfo_isllink_srcport = __builtin__.property(_get_linkinfo_isllink_srcport, _set_linkinfo_isllink_srcport)
  linkinfo_isllink_srcport_type = __builtin__.property(_get_linkinfo_isllink_srcport_type, _set_linkinfo_isllink_srcport_type)
  linkinfo_isllink_srcport_interface = __builtin__.property(_get_linkinfo_isllink_srcport_interface, _set_linkinfo_isllink_srcport_interface)
  linkinfo_isllink_destport = __builtin__.property(_get_linkinfo_isllink_destport, _set_linkinfo_isllink_destport)
  linkinfo_isllink_destport_type = __builtin__.property(_get_linkinfo_isllink_destport_type, _set_linkinfo_isllink_destport_type)
  linkinfo_isllink_destport_interface = __builtin__.property(_get_linkinfo_isllink_destport_interface, _set_linkinfo_isllink_destport_interface)
  linkinfo_isl_linkcost = __builtin__.property(_get_linkinfo_isl_linkcost, _set_linkinfo_isl_linkcost)
  linkinfo_isllink_costcount = __builtin__.property(_get_linkinfo_isllink_costcount, _set_linkinfo_isllink_costcount)
  linkinfo_isllink_type = __builtin__.property(_get_linkinfo_isllink_type, _set_linkinfo_isllink_type)
  linkinfo_trunked = __builtin__.property(_get_linkinfo_trunked, _set_linkinfo_trunked)


  _pyangbind_elements = {'linkinfo_isl_linknumber': linkinfo_isl_linknumber, 'linkinfo_isllink_destdomain': linkinfo_isllink_destdomain, 'linkinfo_isllink_srcport': linkinfo_isllink_srcport, 'linkinfo_isllink_srcport_type': linkinfo_isllink_srcport_type, 'linkinfo_isllink_srcport_interface': linkinfo_isllink_srcport_interface, 'linkinfo_isllink_destport': linkinfo_isllink_destport, 'linkinfo_isllink_destport_type': linkinfo_isllink_destport_type, 'linkinfo_isllink_destport_interface': linkinfo_isllink_destport_interface, 'linkinfo_isl_linkcost': linkinfo_isl_linkcost, 'linkinfo_isllink_costcount': linkinfo_isllink_costcount, 'linkinfo_isllink_type': linkinfo_isllink_type, 'linkinfo_trunked': linkinfo_trunked, }


