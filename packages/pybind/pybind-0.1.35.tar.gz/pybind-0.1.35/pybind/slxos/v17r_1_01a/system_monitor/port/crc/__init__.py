
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class crc(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-system-monitor - based on the path /system-monitor/port/crc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__port_crc_mon_action','__port_crc_mon_interval','__port_crc_mon_threshold','__port_crc_mon_disable',)

  _yang_name = 'crc'
  _rest_name = 'crc'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__port_crc_mon_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-crc-mon-disable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-disable', u'alt-name': u'enable', u'cli-show-no': None, u'info': u'Enable Port CRC Monitoring (Default: Enabled)'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='empty', is_config=True)
    self.__port_crc_mon_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-shutdown': {'value': 2}, u'raslog': {'value': 1}},), is_leaf=True, yang_name="port-crc-mon-action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-act', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Action', u'alt-name': u'action'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='enumeration', is_config=True)
    self.__port_crc_mon_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'2 .. 65535']}), is_leaf=True, yang_name="port-crc-mon-interval", rest_name="poll-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-intvl', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Poll-Interval', u'alt-name': u'poll-interval'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint16', is_config=True)
    self.__port_crc_mon_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1 .. 10']}), is_leaf=True, yang_name="port-crc-mon-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-th', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Threshold', u'alt-name': u'threshold'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint8', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'system-monitor', u'port', u'crc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'system-monitor', u'port', u'crc']

  def _get_port_crc_mon_action(self):
    """
    Getter method for port_crc_mon_action, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_action (enumeration)
    """
    return self.__port_crc_mon_action
      
  def _set_port_crc_mon_action(self, v, load=False):
    """
    Setter method for port_crc_mon_action, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_action (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_crc_mon_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_crc_mon_action() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-shutdown': {'value': 2}, u'raslog': {'value': 1}},), is_leaf=True, yang_name="port-crc-mon-action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-act', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Action', u'alt-name': u'action'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_crc_mon_action must be of a type compatible with enumeration""",
          'defined-type': "brocade-system-monitor:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-shutdown': {'value': 2}, u'raslog': {'value': 1}},), is_leaf=True, yang_name="port-crc-mon-action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-act', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Action', u'alt-name': u'action'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='enumeration', is_config=True)""",
        })

    self.__port_crc_mon_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_crc_mon_action(self):
    self.__port_crc_mon_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-shutdown': {'value': 2}, u'raslog': {'value': 1}},), is_leaf=True, yang_name="port-crc-mon-action", rest_name="action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-act', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Action', u'alt-name': u'action'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='enumeration', is_config=True)


  def _get_port_crc_mon_interval(self):
    """
    Getter method for port_crc_mon_interval, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_interval (uint16)
    """
    return self.__port_crc_mon_interval
      
  def _set_port_crc_mon_interval(self, v, load=False):
    """
    Setter method for port_crc_mon_interval, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_crc_mon_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_crc_mon_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'2 .. 65535']}), is_leaf=True, yang_name="port-crc-mon-interval", rest_name="poll-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-intvl', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Poll-Interval', u'alt-name': u'poll-interval'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_crc_mon_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'2 .. 65535']}), is_leaf=True, yang_name="port-crc-mon-interval", rest_name="poll-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-intvl', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Poll-Interval', u'alt-name': u'poll-interval'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint16', is_config=True)""",
        })

    self.__port_crc_mon_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_crc_mon_interval(self):
    self.__port_crc_mon_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'2 .. 65535']}), is_leaf=True, yang_name="port-crc-mon-interval", rest_name="poll-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-intvl', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Poll-Interval', u'alt-name': u'poll-interval'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint16', is_config=True)


  def _get_port_crc_mon_threshold(self):
    """
    Getter method for port_crc_mon_threshold, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_threshold (uint8)
    """
    return self.__port_crc_mon_threshold
      
  def _set_port_crc_mon_threshold(self, v, load=False):
    """
    Setter method for port_crc_mon_threshold, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_threshold (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_crc_mon_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_crc_mon_threshold() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1 .. 10']}), is_leaf=True, yang_name="port-crc-mon-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-th', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Threshold', u'alt-name': u'threshold'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint8', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_crc_mon_threshold must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1 .. 10']}), is_leaf=True, yang_name="port-crc-mon-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-th', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Threshold', u'alt-name': u'threshold'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint8', is_config=True)""",
        })

    self.__port_crc_mon_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_crc_mon_threshold(self):
    self.__port_crc_mon_threshold = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), restriction_dict={'range': [u'1 .. 10']}), is_leaf=True, yang_name="port-crc-mon-threshold", rest_name="threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-th', u'cli-full-no': None, u'info': u'Set Port CRC Monitoring Threshold', u'alt-name': u'threshold'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='uint8', is_config=True)


  def _get_port_crc_mon_disable(self):
    """
    Getter method for port_crc_mon_disable, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_disable (empty)
    """
    return self.__port_crc_mon_disable
      
  def _set_port_crc_mon_disable(self, v, load=False):
    """
    Setter method for port_crc_mon_disable, mapped from YANG variable /system_monitor/port/crc/port_crc_mon_disable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_crc_mon_disable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_crc_mon_disable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="port-crc-mon-disable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-disable', u'alt-name': u'enable', u'cli-show-no': None, u'info': u'Enable Port CRC Monitoring (Default: Enabled)'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_crc_mon_disable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-crc-mon-disable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-disable', u'alt-name': u'enable', u'cli-show-no': None, u'info': u'Enable Port CRC Monitoring (Default: Enabled)'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='empty', is_config=True)""",
        })

    self.__port_crc_mon_disable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_crc_mon_disable(self):
    self.__port_crc_mon_disable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="port-crc-mon-disable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'code-name': u'port-crc-mon-disable', u'alt-name': u'enable', u'cli-show-no': None, u'info': u'Enable Port CRC Monitoring (Default: Enabled)'}}, namespace='urn:brocade.com:mgmt:brocade-system-monitor', defining_module='brocade-system-monitor', yang_type='empty', is_config=True)

  port_crc_mon_action = __builtin__.property(_get_port_crc_mon_action, _set_port_crc_mon_action)
  port_crc_mon_interval = __builtin__.property(_get_port_crc_mon_interval, _set_port_crc_mon_interval)
  port_crc_mon_threshold = __builtin__.property(_get_port_crc_mon_threshold, _set_port_crc_mon_threshold)
  port_crc_mon_disable = __builtin__.property(_get_port_crc_mon_disable, _set_port_crc_mon_disable)


  _pyangbind_elements = {'port_crc_mon_action': port_crc_mon_action, 'port_crc_mon_interval': port_crc_mon_interval, 'port_crc_mon_threshold': port_crc_mon_threshold, 'port_crc_mon_disable': port_crc_mon_disable, }


