
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class ldp_fec_statistics(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/ldp/ldp-fec-statistics. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: LDP FEC statistics
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__number_of_prefix_fec','__number_of_prefix_fec_installed','__number_of_prefix_fec_filtered_in','__number_of_prefix_fec_filtered_out','__number_of_vc_fec_128','__number_of_vc_fec_129','__number_of_vc_fec_installed','__number_of_route_upd_proc_errors','__number_of_vc_fec_proc_errors','__number_of_prefix_fec_lwd','__number_of_vc_fec',)

  _yang_name = 'ldp-fec-statistics'
  _rest_name = 'ldp-fec-statistics'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__number_of_prefix_fec = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec", rest_name="number-of-prefix-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_vc_fec_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-installed", rest_name="number-of-vc-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_vc_fec_proc_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-proc-errors", rest_name="number-of-vc-fec-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_vc_fec = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec", rest_name="number-of-vc-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_prefix_fec_lwd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-lwd", rest_name="number-of-prefix-fec-lwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_prefix_fec_filtered_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-out", rest_name="number-of-prefix-fec-filtered-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_vc_fec_128 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-128", rest_name="number-of-vc-fec-128", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_vc_fec_129 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-129", rest_name="number-of-vc-fec-129", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_route_upd_proc_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-route-upd-proc-errors", rest_name="number-of-route-upd-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_prefix_fec_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-installed", rest_name="number-of-prefix-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__number_of_prefix_fec_filtered_in = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-in", rest_name="number-of-prefix-fec-filtered-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'ldp', u'ldp-fec-statistics']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'ldp', u'ldp-fec-statistics']

  def _get_number_of_prefix_fec(self):
    """
    Getter method for number_of_prefix_fec, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec (uint32)

    YANG Description: The total number of prefix FECs in the LDP FEC database
    """
    return self.__number_of_prefix_fec
      
  def _set_number_of_prefix_fec(self, v, load=False):
    """
    Setter method for number_of_prefix_fec, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_prefix_fec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_prefix_fec() directly.

    YANG Description: The total number of prefix FECs in the LDP FEC database
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec", rest_name="number-of-prefix-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_prefix_fec must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec", rest_name="number-of-prefix-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_prefix_fec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_prefix_fec(self):
    self.__number_of_prefix_fec = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec", rest_name="number-of-prefix-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_prefix_fec_installed(self):
    """
    Getter method for number_of_prefix_fec_installed, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_installed (uint32)

    YANG Description: Total number of prefix FECs installed
    """
    return self.__number_of_prefix_fec_installed
      
  def _set_number_of_prefix_fec_installed(self, v, load=False):
    """
    Setter method for number_of_prefix_fec_installed, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_prefix_fec_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_prefix_fec_installed() directly.

    YANG Description: Total number of prefix FECs installed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-installed", rest_name="number-of-prefix-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_prefix_fec_installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-installed", rest_name="number-of-prefix-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_prefix_fec_installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_prefix_fec_installed(self):
    self.__number_of_prefix_fec_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-installed", rest_name="number-of-prefix-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_prefix_fec_filtered_in(self):
    """
    Getter method for number_of_prefix_fec_filtered_in, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_filtered_in (uint32)

    YANG Description: Number of FECs from this peer which are filtered due to the inbound FEC filter configurations
    """
    return self.__number_of_prefix_fec_filtered_in
      
  def _set_number_of_prefix_fec_filtered_in(self, v, load=False):
    """
    Setter method for number_of_prefix_fec_filtered_in, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_filtered_in (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_prefix_fec_filtered_in is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_prefix_fec_filtered_in() directly.

    YANG Description: Number of FECs from this peer which are filtered due to the inbound FEC filter configurations
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-in", rest_name="number-of-prefix-fec-filtered-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_prefix_fec_filtered_in must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-in", rest_name="number-of-prefix-fec-filtered-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_prefix_fec_filtered_in = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_prefix_fec_filtered_in(self):
    self.__number_of_prefix_fec_filtered_in = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-in", rest_name="number-of-prefix-fec-filtered-in", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_prefix_fec_filtered_out(self):
    """
    Getter method for number_of_prefix_fec_filtered_out, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_filtered_out (uint32)

    YANG Description: Number of FECs from this peer which are filtered due to the outbound FEC filter configurations
    """
    return self.__number_of_prefix_fec_filtered_out
      
  def _set_number_of_prefix_fec_filtered_out(self, v, load=False):
    """
    Setter method for number_of_prefix_fec_filtered_out, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_filtered_out (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_prefix_fec_filtered_out is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_prefix_fec_filtered_out() directly.

    YANG Description: Number of FECs from this peer which are filtered due to the outbound FEC filter configurations
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-out", rest_name="number-of-prefix-fec-filtered-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_prefix_fec_filtered_out must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-out", rest_name="number-of-prefix-fec-filtered-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_prefix_fec_filtered_out = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_prefix_fec_filtered_out(self):
    self.__number_of_prefix_fec_filtered_out = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-filtered-out", rest_name="number-of-prefix-fec-filtered-out", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_vc_fec_128(self):
    """
    Getter method for number_of_vc_fec_128, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_128 (uint32)

    YANG Description: The total number of VC FECs for type 128.    The FEC type for VC FEC can be 128 or 129
    """
    return self.__number_of_vc_fec_128
      
  def _set_number_of_vc_fec_128(self, v, load=False):
    """
    Setter method for number_of_vc_fec_128, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_128 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_vc_fec_128 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_vc_fec_128() directly.

    YANG Description: The total number of VC FECs for type 128.    The FEC type for VC FEC can be 128 or 129
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-128", rest_name="number-of-vc-fec-128", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_vc_fec_128 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-128", rest_name="number-of-vc-fec-128", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_vc_fec_128 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_vc_fec_128(self):
    self.__number_of_vc_fec_128 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-128", rest_name="number-of-vc-fec-128", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_vc_fec_129(self):
    """
    Getter method for number_of_vc_fec_129, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_129 (uint32)

    YANG Description: The total number of VC FECs for type 129. The FEC type for VC FEC can be 128 or 129
    """
    return self.__number_of_vc_fec_129
      
  def _set_number_of_vc_fec_129(self, v, load=False):
    """
    Setter method for number_of_vc_fec_129, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_129 (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_vc_fec_129 is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_vc_fec_129() directly.

    YANG Description: The total number of VC FECs for type 129. The FEC type for VC FEC can be 128 or 129
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-129", rest_name="number-of-vc-fec-129", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_vc_fec_129 must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-129", rest_name="number-of-vc-fec-129", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_vc_fec_129 = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_vc_fec_129(self):
    self.__number_of_vc_fec_129 = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-129", rest_name="number-of-vc-fec-129", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_vc_fec_installed(self):
    """
    Getter method for number_of_vc_fec_installed, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_installed (uint32)

    YANG Description: Total number of vc FECs installed
    """
    return self.__number_of_vc_fec_installed
      
  def _set_number_of_vc_fec_installed(self, v, load=False):
    """
    Setter method for number_of_vc_fec_installed, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_installed (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_vc_fec_installed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_vc_fec_installed() directly.

    YANG Description: Total number of vc FECs installed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-installed", rest_name="number-of-vc-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_vc_fec_installed must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-installed", rest_name="number-of-vc-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_vc_fec_installed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_vc_fec_installed(self):
    self.__number_of_vc_fec_installed = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-installed", rest_name="number-of-vc-fec-installed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_route_upd_proc_errors(self):
    """
    Getter method for number_of_route_upd_proc_errors, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_route_upd_proc_errors (uint32)

    YANG Description: The total number of route update processing errors for L3 FEC prefix
    """
    return self.__number_of_route_upd_proc_errors
      
  def _set_number_of_route_upd_proc_errors(self, v, load=False):
    """
    Setter method for number_of_route_upd_proc_errors, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_route_upd_proc_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_route_upd_proc_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_route_upd_proc_errors() directly.

    YANG Description: The total number of route update processing errors for L3 FEC prefix
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-route-upd-proc-errors", rest_name="number-of-route-upd-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_route_upd_proc_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-route-upd-proc-errors", rest_name="number-of-route-upd-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_route_upd_proc_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_route_upd_proc_errors(self):
    self.__number_of_route_upd_proc_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-route-upd-proc-errors", rest_name="number-of-route-upd-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_vc_fec_proc_errors(self):
    """
    Getter method for number_of_vc_fec_proc_errors, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_proc_errors (uint32)

    YANG Description: The total number of L3 VC FEC internal processing errors
    """
    return self.__number_of_vc_fec_proc_errors
      
  def _set_number_of_vc_fec_proc_errors(self, v, load=False):
    """
    Setter method for number_of_vc_fec_proc_errors, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec_proc_errors (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_vc_fec_proc_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_vc_fec_proc_errors() directly.

    YANG Description: The total number of L3 VC FEC internal processing errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-proc-errors", rest_name="number-of-vc-fec-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_vc_fec_proc_errors must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-proc-errors", rest_name="number-of-vc-fec-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_vc_fec_proc_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_vc_fec_proc_errors(self):
    self.__number_of_vc_fec_proc_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec-proc-errors", rest_name="number-of-vc-fec-proc-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_prefix_fec_lwd(self):
    """
    Getter method for number_of_prefix_fec_lwd, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_lwd (uint32)

    YANG Description: The total number of FECs which currently have the label withdrawal delay timer running
    """
    return self.__number_of_prefix_fec_lwd
      
  def _set_number_of_prefix_fec_lwd(self, v, load=False):
    """
    Setter method for number_of_prefix_fec_lwd, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_prefix_fec_lwd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_prefix_fec_lwd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_prefix_fec_lwd() directly.

    YANG Description: The total number of FECs which currently have the label withdrawal delay timer running
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-lwd", rest_name="number-of-prefix-fec-lwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_prefix_fec_lwd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-lwd", rest_name="number-of-prefix-fec-lwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_prefix_fec_lwd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_prefix_fec_lwd(self):
    self.__number_of_prefix_fec_lwd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-prefix-fec-lwd", rest_name="number-of-prefix-fec-lwd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_number_of_vc_fec(self):
    """
    Getter method for number_of_vc_fec, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec (uint32)

    YANG Description: The total number of vc FECs in the LDP FEC database
    """
    return self.__number_of_vc_fec
      
  def _set_number_of_vc_fec(self, v, load=False):
    """
    Setter method for number_of_vc_fec, mapped from YANG variable /mpls_state/ldp/ldp_fec_statistics/number_of_vc_fec (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_number_of_vc_fec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_number_of_vc_fec() directly.

    YANG Description: The total number of vc FECs in the LDP FEC database
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec", rest_name="number-of-vc-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """number_of_vc_fec must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec", rest_name="number-of-vc-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__number_of_vc_fec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_number_of_vc_fec(self):
    self.__number_of_vc_fec = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="number-of-vc-fec", rest_name="number-of-vc-fec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

  number_of_prefix_fec = __builtin__.property(_get_number_of_prefix_fec)
  number_of_prefix_fec_installed = __builtin__.property(_get_number_of_prefix_fec_installed)
  number_of_prefix_fec_filtered_in = __builtin__.property(_get_number_of_prefix_fec_filtered_in)
  number_of_prefix_fec_filtered_out = __builtin__.property(_get_number_of_prefix_fec_filtered_out)
  number_of_vc_fec_128 = __builtin__.property(_get_number_of_vc_fec_128)
  number_of_vc_fec_129 = __builtin__.property(_get_number_of_vc_fec_129)
  number_of_vc_fec_installed = __builtin__.property(_get_number_of_vc_fec_installed)
  number_of_route_upd_proc_errors = __builtin__.property(_get_number_of_route_upd_proc_errors)
  number_of_vc_fec_proc_errors = __builtin__.property(_get_number_of_vc_fec_proc_errors)
  number_of_prefix_fec_lwd = __builtin__.property(_get_number_of_prefix_fec_lwd)
  number_of_vc_fec = __builtin__.property(_get_number_of_vc_fec)


  _pyangbind_elements = {'number_of_prefix_fec': number_of_prefix_fec, 'number_of_prefix_fec_installed': number_of_prefix_fec_installed, 'number_of_prefix_fec_filtered_in': number_of_prefix_fec_filtered_in, 'number_of_prefix_fec_filtered_out': number_of_prefix_fec_filtered_out, 'number_of_vc_fec_128': number_of_vc_fec_128, 'number_of_vc_fec_129': number_of_vc_fec_129, 'number_of_vc_fec_installed': number_of_vc_fec_installed, 'number_of_route_upd_proc_errors': number_of_route_upd_proc_errors, 'number_of_vc_fec_proc_errors': number_of_vc_fec_proc_errors, 'number_of_prefix_fec_lwd': number_of_prefix_fec_lwd, 'number_of_vc_fec': number_of_vc_fec, }


