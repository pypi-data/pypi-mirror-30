
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class neighbors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/rsvp/neighbors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: RSVP Neighbor Operational Information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__neighbor_ip_addr','__neighbor_interface','__neighbor_status','__neighbor_last_status_change','__rsvp_hello_tx','__rsvp_hello_rx','__refresh_reduction_support','__msg_id_support','__active_lsps','__rsvp_hello_interval','__rsvp_hello_tolerance','__neighbor_remote_instance','__neighbor_local_instance','__last_hello_rx','__next_hello_req_tx',)

  _yang_name = 'neighbors'
  _rest_name = 'neighbors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__active_lsps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="active-lsps", rest_name="active-lsps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__refresh_reduction_support = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="refresh-reduction-support", rest_name="refresh-reduction-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__neighbor_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-interface", rest_name="neighbor-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__rsvp_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tx", rest_name="rsvp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__neighbor_last_status_change = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-last-status-change", rest_name="neighbor-last-status-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__msg_id_support = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="msg-id-support", rest_name="msg-id-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__neighbor_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-status", rest_name="neighbor-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__last_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-hello-rx", rest_name="last-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__rsvp_hello_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-interval", rest_name="rsvp-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__neighbor_remote_instance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-remote-instance", rest_name="neighbor-remote-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__rsvp_hello_tolerance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tolerance", rest_name="rsvp-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__neighbor_local_instance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-local-instance", rest_name="neighbor-local-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__next_hello_req_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="next-hello-req-tx", rest_name="next-hello-req-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__neighbor_ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-ip-addr", rest_name="neighbor-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__rsvp_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-rx", rest_name="rsvp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'rsvp', u'neighbors']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'rsvp', u'neighbors']

  def _get_neighbor_ip_addr(self):
    """
    Getter method for neighbor_ip_addr, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_ip_addr (inet:ipv4-address)

    YANG Description: RSVP neighbor IP address
    """
    return self.__neighbor_ip_addr
      
  def _set_neighbor_ip_addr(self, v, load=False):
    """
    Setter method for neighbor_ip_addr, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_ip_addr (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_ip_addr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_ip_addr() directly.

    YANG Description: RSVP neighbor IP address
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-ip-addr", rest_name="neighbor-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_ip_addr must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-ip-addr", rest_name="neighbor-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__neighbor_ip_addr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_ip_addr(self):
    self.__neighbor_ip_addr = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="neighbor-ip-addr", rest_name="neighbor-ip-addr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_neighbor_interface(self):
    """
    Getter method for neighbor_interface, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_interface (string)

    YANG Description: Interface on which neighbor is learnt
    """
    return self.__neighbor_interface
      
  def _set_neighbor_interface(self, v, load=False):
    """
    Setter method for neighbor_interface, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_interface() directly.

    YANG Description: Interface on which neighbor is learnt
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="neighbor-interface", rest_name="neighbor-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-interface", rest_name="neighbor-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__neighbor_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_interface(self):
    self.__neighbor_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-interface", rest_name="neighbor-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_neighbor_status(self):
    """
    Getter method for neighbor_status, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_status (string)

    YANG Description: Neighbor status
    """
    return self.__neighbor_status
      
  def _set_neighbor_status(self, v, load=False):
    """
    Setter method for neighbor_status, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_status() directly.

    YANG Description: Neighbor status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="neighbor-status", rest_name="neighbor-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-status", rest_name="neighbor-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__neighbor_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_status(self):
    self.__neighbor_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-status", rest_name="neighbor-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_neighbor_last_status_change(self):
    """
    Getter method for neighbor_last_status_change, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_last_status_change (string)

    YANG Description: Time since the status of RSVP neighbor last changed
    """
    return self.__neighbor_last_status_change
      
  def _set_neighbor_last_status_change(self, v, load=False):
    """
    Setter method for neighbor_last_status_change, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_last_status_change (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_last_status_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_last_status_change() directly.

    YANG Description: Time since the status of RSVP neighbor last changed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="neighbor-last-status-change", rest_name="neighbor-last-status-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_last_status_change must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-last-status-change", rest_name="neighbor-last-status-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__neighbor_last_status_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_last_status_change(self):
    self.__neighbor_last_status_change = YANGDynClass(base=unicode, is_leaf=True, yang_name="neighbor-last-status-change", rest_name="neighbor-last-status-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_rsvp_hello_tx(self):
    """
    Getter method for rsvp_hello_tx, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_tx (uint32)

    YANG Description: Number of RSVP Hello messages transmitted for the neighbor
    """
    return self.__rsvp_hello_tx
      
  def _set_rsvp_hello_tx(self, v, load=False):
    """
    Setter method for rsvp_hello_tx, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_hello_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_hello_tx() directly.

    YANG Description: Number of RSVP Hello messages transmitted for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tx", rest_name="rsvp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_hello_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tx", rest_name="rsvp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rsvp_hello_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_hello_tx(self):
    self.__rsvp_hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tx", rest_name="rsvp-hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_rsvp_hello_rx(self):
    """
    Getter method for rsvp_hello_rx, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_rx (uint32)

    YANG Description: Number of RSVP Hello messages received for the neighbor
    """
    return self.__rsvp_hello_rx
      
  def _set_rsvp_hello_rx(self, v, load=False):
    """
    Setter method for rsvp_hello_rx, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_hello_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_hello_rx() directly.

    YANG Description: Number of RSVP Hello messages received for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-rx", rest_name="rsvp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_hello_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-rx", rest_name="rsvp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rsvp_hello_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_hello_rx(self):
    self.__rsvp_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-rx", rest_name="rsvp-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_refresh_reduction_support(self):
    """
    Getter method for refresh_reduction_support, mapped from YANG variable /mpls_state/rsvp/neighbors/refresh_reduction_support (boolean)

    YANG Description: Status of Refresh Reduction support for the RSVP neighbor
    """
    return self.__refresh_reduction_support
      
  def _set_refresh_reduction_support(self, v, load=False):
    """
    Setter method for refresh_reduction_support, mapped from YANG variable /mpls_state/rsvp/neighbors/refresh_reduction_support (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_refresh_reduction_support is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_refresh_reduction_support() directly.

    YANG Description: Status of Refresh Reduction support for the RSVP neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="refresh-reduction-support", rest_name="refresh-reduction-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """refresh_reduction_support must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="refresh-reduction-support", rest_name="refresh-reduction-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__refresh_reduction_support = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_refresh_reduction_support(self):
    self.__refresh_reduction_support = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="refresh-reduction-support", rest_name="refresh-reduction-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_msg_id_support(self):
    """
    Getter method for msg_id_support, mapped from YANG variable /mpls_state/rsvp/neighbors/msg_id_support (boolean)

    YANG Description: Status of Message ID support for the RSVP neighbor
    """
    return self.__msg_id_support
      
  def _set_msg_id_support(self, v, load=False):
    """
    Setter method for msg_id_support, mapped from YANG variable /mpls_state/rsvp/neighbors/msg_id_support (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_msg_id_support is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_msg_id_support() directly.

    YANG Description: Status of Message ID support for the RSVP neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="msg-id-support", rest_name="msg-id-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """msg_id_support must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="msg-id-support", rest_name="msg-id-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__msg_id_support = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_msg_id_support(self):
    self.__msg_id_support = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="msg-id-support", rest_name="msg-id-support", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_active_lsps(self):
    """
    Getter method for active_lsps, mapped from YANG variable /mpls_state/rsvp/neighbors/active_lsps (uint32)

    YANG Description: Number of Active LSPs to or from the RSVP neighbor
    """
    return self.__active_lsps
      
  def _set_active_lsps(self, v, load=False):
    """
    Setter method for active_lsps, mapped from YANG variable /mpls_state/rsvp/neighbors/active_lsps (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_active_lsps is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_active_lsps() directly.

    YANG Description: Number of Active LSPs to or from the RSVP neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="active-lsps", rest_name="active-lsps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """active_lsps must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="active-lsps", rest_name="active-lsps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__active_lsps = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_active_lsps(self):
    self.__active_lsps = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="active-lsps", rest_name="active-lsps", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_rsvp_hello_interval(self):
    """
    Getter method for rsvp_hello_interval, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_interval (uint32)

    YANG Description: RSVP Hello interval for the neighbor
    """
    return self.__rsvp_hello_interval
      
  def _set_rsvp_hello_interval(self, v, load=False):
    """
    Setter method for rsvp_hello_interval, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_hello_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_hello_interval() directly.

    YANG Description: RSVP Hello interval for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-interval", rest_name="rsvp-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_hello_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-interval", rest_name="rsvp-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rsvp_hello_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_hello_interval(self):
    self.__rsvp_hello_interval = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-interval", rest_name="rsvp-hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_rsvp_hello_tolerance(self):
    """
    Getter method for rsvp_hello_tolerance, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_tolerance (uint32)

    YANG Description: RSVP Hello tolerance for the neighbor
    """
    return self.__rsvp_hello_tolerance
      
  def _set_rsvp_hello_tolerance(self, v, load=False):
    """
    Setter method for rsvp_hello_tolerance, mapped from YANG variable /mpls_state/rsvp/neighbors/rsvp_hello_tolerance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsvp_hello_tolerance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsvp_hello_tolerance() directly.

    YANG Description: RSVP Hello tolerance for the neighbor
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tolerance", rest_name="rsvp-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsvp_hello_tolerance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tolerance", rest_name="rsvp-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rsvp_hello_tolerance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsvp_hello_tolerance(self):
    self.__rsvp_hello_tolerance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rsvp-hello-tolerance", rest_name="rsvp-hello-tolerance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_neighbor_remote_instance(self):
    """
    Getter method for neighbor_remote_instance, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_remote_instance (uint32)

    YANG Description: RSVP Hello Remote instance ID
    """
    return self.__neighbor_remote_instance
      
  def _set_neighbor_remote_instance(self, v, load=False):
    """
    Setter method for neighbor_remote_instance, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_remote_instance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_remote_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_remote_instance() directly.

    YANG Description: RSVP Hello Remote instance ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-remote-instance", rest_name="neighbor-remote-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_remote_instance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-remote-instance", rest_name="neighbor-remote-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__neighbor_remote_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_remote_instance(self):
    self.__neighbor_remote_instance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-remote-instance", rest_name="neighbor-remote-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_neighbor_local_instance(self):
    """
    Getter method for neighbor_local_instance, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_local_instance (uint32)

    YANG Description: RSVP Hello Local instance ID
    """
    return self.__neighbor_local_instance
      
  def _set_neighbor_local_instance(self, v, load=False):
    """
    Setter method for neighbor_local_instance, mapped from YANG variable /mpls_state/rsvp/neighbors/neighbor_local_instance (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_neighbor_local_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_neighbor_local_instance() directly.

    YANG Description: RSVP Hello Local instance ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-local-instance", rest_name="neighbor-local-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """neighbor_local_instance must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-local-instance", rest_name="neighbor-local-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__neighbor_local_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_neighbor_local_instance(self):
    self.__neighbor_local_instance = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="neighbor-local-instance", rest_name="neighbor-local-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_last_hello_rx(self):
    """
    Getter method for last_hello_rx, mapped from YANG variable /mpls_state/rsvp/neighbors/last_hello_rx (uint32)

    YANG Description: Time elapsed since the last RSVP Hello message was received
    """
    return self.__last_hello_rx
      
  def _set_last_hello_rx(self, v, load=False):
    """
    Setter method for last_hello_rx, mapped from YANG variable /mpls_state/rsvp/neighbors/last_hello_rx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_hello_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_hello_rx() directly.

    YANG Description: Time elapsed since the last RSVP Hello message was received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-hello-rx", rest_name="last-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_hello_rx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-hello-rx", rest_name="last-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__last_hello_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_hello_rx(self):
    self.__last_hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="last-hello-rx", rest_name="last-hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_next_hello_req_tx(self):
    """
    Getter method for next_hello_req_tx, mapped from YANG variable /mpls_state/rsvp/neighbors/next_hello_req_tx (uint32)

    YANG Description: Time remaining for the next RSVP Hello Request to be sent
    """
    return self.__next_hello_req_tx
      
  def _set_next_hello_req_tx(self, v, load=False):
    """
    Setter method for next_hello_req_tx, mapped from YANG variable /mpls_state/rsvp/neighbors/next_hello_req_tx (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_next_hello_req_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_next_hello_req_tx() directly.

    YANG Description: Time remaining for the next RSVP Hello Request to be sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="next-hello-req-tx", rest_name="next-hello-req-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """next_hello_req_tx must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="next-hello-req-tx", rest_name="next-hello-req-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__next_hello_req_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_next_hello_req_tx(self):
    self.__next_hello_req_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="next-hello-req-tx", rest_name="next-hello-req-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

  neighbor_ip_addr = __builtin__.property(_get_neighbor_ip_addr)
  neighbor_interface = __builtin__.property(_get_neighbor_interface)
  neighbor_status = __builtin__.property(_get_neighbor_status)
  neighbor_last_status_change = __builtin__.property(_get_neighbor_last_status_change)
  rsvp_hello_tx = __builtin__.property(_get_rsvp_hello_tx)
  rsvp_hello_rx = __builtin__.property(_get_rsvp_hello_rx)
  refresh_reduction_support = __builtin__.property(_get_refresh_reduction_support)
  msg_id_support = __builtin__.property(_get_msg_id_support)
  active_lsps = __builtin__.property(_get_active_lsps)
  rsvp_hello_interval = __builtin__.property(_get_rsvp_hello_interval)
  rsvp_hello_tolerance = __builtin__.property(_get_rsvp_hello_tolerance)
  neighbor_remote_instance = __builtin__.property(_get_neighbor_remote_instance)
  neighbor_local_instance = __builtin__.property(_get_neighbor_local_instance)
  last_hello_rx = __builtin__.property(_get_last_hello_rx)
  next_hello_req_tx = __builtin__.property(_get_next_hello_req_tx)


  _pyangbind_elements = {'neighbor_ip_addr': neighbor_ip_addr, 'neighbor_interface': neighbor_interface, 'neighbor_status': neighbor_status, 'neighbor_last_status_change': neighbor_last_status_change, 'rsvp_hello_tx': rsvp_hello_tx, 'rsvp_hello_rx': rsvp_hello_rx, 'refresh_reduction_support': refresh_reduction_support, 'msg_id_support': msg_id_support, 'active_lsps': active_lsps, 'rsvp_hello_interval': rsvp_hello_interval, 'rsvp_hello_tolerance': rsvp_hello_tolerance, 'neighbor_remote_instance': neighbor_remote_instance, 'neighbor_local_instance': neighbor_local_instance, 'last_hello_rx': last_hello_rx, 'next_hello_req_tx': next_hello_req_tx, }


