
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class basic(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/lsp/basic. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS basic LSP operational information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__tunnel_vif_index','__lsp_type_bypass','__lsp_type_dynamic','__from_address_configured','__from_address','__to_address','__admin_up','__operational_status','__lsp_is_active','__lsp_has_primary_path','__path_name','__out_label','__out_interface_name','__primary_up','__primary_active','__lsp_has_secondary','__secondary_up','__secondary_active','__lsp_has_selected_secondary','__selected_secondary_up','__selected_secondary_active','__primary_is_selected','__lsp_has_frr','__frr_up','__frr_active','__up_down_count','__retry_count','__down_reason',)

  _yang_name = 'basic'
  _rest_name = 'basic'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__path_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="path-name", rest_name="path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__to_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="to-address", rest_name="to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__from_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="from-address", rest_name="from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__down_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="down-reason", rest_name="down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__lsp_type_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-type-bypass", rest_name="lsp-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__primary_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-active", rest_name="primary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__primary_is_selected = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-is-selected", rest_name="primary-is-selected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__secondary_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="secondary-up", rest_name="secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__lsp_has_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-secondary", rest_name="lsp-has-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__selected_secondary_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="selected-secondary-up", rest_name="selected-secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-count", rest_name="retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__lsp_is_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-active", rest_name="lsp-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__operational_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'operational-up': {'value': 1}, u'operational-down': {'value': 2}},), is_leaf=True, yang_name="operational-status", rest_name="operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-operational-status', is_config=False)
    self.__out_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="out-interface-name", rest_name="out-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-label", rest_name="out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-up", rest_name="frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__frr_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-active", rest_name="frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__lsp_has_primary_path = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-primary-path", rest_name="lsp-has-primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__tunnel_vif_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tunnel-vif-index", rest_name="tunnel-vif-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__secondary_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="secondary-active", rest_name="secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__primary_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-up", rest_name="primary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="admin-up", rest_name="admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__lsp_type_dynamic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-type-dynamic", rest_name="lsp-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__selected_secondary_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="selected-secondary-active", rest_name="selected-secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__up_down_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-down-count", rest_name="up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__lsp_has_frr = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-frr", rest_name="lsp-has-frr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__from_address_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="from-address-configured", rest_name="from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__lsp_has_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-selected-secondary", rest_name="lsp-has-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'lsp', u'basic']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'lsp', u'basic']

  def _get_tunnel_vif_index(self):
    """
    Getter method for tunnel_vif_index, mapped from YANG variable /mpls_state/lsp/basic/tunnel_vif_index (uint32)

    YANG Description: lsp tunnel vif index
    """
    return self.__tunnel_vif_index
      
  def _set_tunnel_vif_index(self, v, load=False):
    """
    Setter method for tunnel_vif_index, mapped from YANG variable /mpls_state/lsp/basic/tunnel_vif_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tunnel_vif_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tunnel_vif_index() directly.

    YANG Description: lsp tunnel vif index
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tunnel-vif-index", rest_name="tunnel-vif-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tunnel_vif_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tunnel-vif-index", rest_name="tunnel-vif-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tunnel_vif_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tunnel_vif_index(self):
    self.__tunnel_vif_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tunnel-vif-index", rest_name="tunnel-vif-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_lsp_type_bypass(self):
    """
    Getter method for lsp_type_bypass, mapped from YANG variable /mpls_state/lsp/basic/lsp_type_bypass (boolean)

    YANG Description: lsp_type_bypass
    """
    return self.__lsp_type_bypass
      
  def _set_lsp_type_bypass(self, v, load=False):
    """
    Setter method for lsp_type_bypass, mapped from YANG variable /mpls_state/lsp/basic/lsp_type_bypass (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_type_bypass is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_type_bypass() directly.

    YANG Description: lsp_type_bypass
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-type-bypass", rest_name="lsp-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_type_bypass must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-type-bypass", rest_name="lsp-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_type_bypass = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_type_bypass(self):
    self.__lsp_type_bypass = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-type-bypass", rest_name="lsp-type-bypass", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_lsp_type_dynamic(self):
    """
    Getter method for lsp_type_dynamic, mapped from YANG variable /mpls_state/lsp/basic/lsp_type_dynamic (boolean)

    YANG Description: lsp_type_dynamic
    """
    return self.__lsp_type_dynamic
      
  def _set_lsp_type_dynamic(self, v, load=False):
    """
    Setter method for lsp_type_dynamic, mapped from YANG variable /mpls_state/lsp/basic/lsp_type_dynamic (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_type_dynamic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_type_dynamic() directly.

    YANG Description: lsp_type_dynamic
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-type-dynamic", rest_name="lsp-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_type_dynamic must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-type-dynamic", rest_name="lsp-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_type_dynamic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_type_dynamic(self):
    self.__lsp_type_dynamic = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-type-dynamic", rest_name="lsp-type-dynamic", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_from_address_configured(self):
    """
    Getter method for from_address_configured, mapped from YANG variable /mpls_state/lsp/basic/from_address_configured (boolean)

    YANG Description: lsp_from_address_configured
    """
    return self.__from_address_configured
      
  def _set_from_address_configured(self, v, load=False):
    """
    Setter method for from_address_configured, mapped from YANG variable /mpls_state/lsp/basic/from_address_configured (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_from_address_configured is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_from_address_configured() directly.

    YANG Description: lsp_from_address_configured
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="from-address-configured", rest_name="from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """from_address_configured must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="from-address-configured", rest_name="from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__from_address_configured = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_from_address_configured(self):
    self.__from_address_configured = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="from-address-configured", rest_name="from-address-configured", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_from_address(self):
    """
    Getter method for from_address, mapped from YANG variable /mpls_state/lsp/basic/from_address (inet:ipv4-address)

    YANG Description: lsp_from_address
    """
    return self.__from_address
      
  def _set_from_address(self, v, load=False):
    """
    Setter method for from_address, mapped from YANG variable /mpls_state/lsp/basic/from_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_from_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_from_address() directly.

    YANG Description: lsp_from_address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="from-address", rest_name="from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """from_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="from-address", rest_name="from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__from_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_from_address(self):
    self.__from_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="from-address", rest_name="from-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_to_address(self):
    """
    Getter method for to_address, mapped from YANG variable /mpls_state/lsp/basic/to_address (inet:ipv4-address)

    YANG Description: lsp_to_address
    """
    return self.__to_address
      
  def _set_to_address(self, v, load=False):
    """
    Setter method for to_address, mapped from YANG variable /mpls_state/lsp/basic/to_address (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_to_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_to_address() directly.

    YANG Description: lsp_to_address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="to-address", rest_name="to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """to_address must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="to-address", rest_name="to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__to_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_to_address(self):
    self.__to_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="to-address", rest_name="to-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_admin_up(self):
    """
    Getter method for admin_up, mapped from YANG variable /mpls_state/lsp/basic/admin_up (boolean)

    YANG Description: lsp_admin_up
    """
    return self.__admin_up
      
  def _set_admin_up(self, v, load=False):
    """
    Setter method for admin_up, mapped from YANG variable /mpls_state/lsp/basic/admin_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_up() directly.

    YANG Description: lsp_admin_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="admin-up", rest_name="admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="admin-up", rest_name="admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__admin_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_up(self):
    self.__admin_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="admin-up", rest_name="admin-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_operational_status(self):
    """
    Getter method for operational_status, mapped from YANG variable /mpls_state/lsp/basic/operational_status (lsp-operational-status)

    YANG Description: LSP Operational status
    """
    return self.__operational_status
      
  def _set_operational_status(self, v, load=False):
    """
    Setter method for operational_status, mapped from YANG variable /mpls_state/lsp/basic/operational_status (lsp-operational-status)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_operational_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_operational_status() directly.

    YANG Description: LSP Operational status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'operational-up': {'value': 1}, u'operational-down': {'value': 2}},), is_leaf=True, yang_name="operational-status", rest_name="operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-operational-status', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """operational_status must be of a type compatible with lsp-operational-status""",
          'defined-type': "brocade-mpls-operational:lsp-operational-status",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'operational-up': {'value': 1}, u'operational-down': {'value': 2}},), is_leaf=True, yang_name="operational-status", rest_name="operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-operational-status', is_config=False)""",
        })

    self.__operational_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_operational_status(self):
    self.__operational_status = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'operational-up': {'value': 1}, u'operational-down': {'value': 2}},), is_leaf=True, yang_name="operational-status", rest_name="operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='lsp-operational-status', is_config=False)


  def _get_lsp_is_active(self):
    """
    Getter method for lsp_is_active, mapped from YANG variable /mpls_state/lsp/basic/lsp_is_active (boolean)

    YANG Description: lsp_is_active
    """
    return self.__lsp_is_active
      
  def _set_lsp_is_active(self, v, load=False):
    """
    Setter method for lsp_is_active, mapped from YANG variable /mpls_state/lsp/basic/lsp_is_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_is_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_is_active() directly.

    YANG Description: lsp_is_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-is-active", rest_name="lsp-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_is_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-active", rest_name="lsp-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_is_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_is_active(self):
    self.__lsp_is_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-is-active", rest_name="lsp-is-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_lsp_has_primary_path(self):
    """
    Getter method for lsp_has_primary_path, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_primary_path (boolean)

    YANG Description: lsp_has_primary_path
    """
    return self.__lsp_has_primary_path
      
  def _set_lsp_has_primary_path(self, v, load=False):
    """
    Setter method for lsp_has_primary_path, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_primary_path (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_has_primary_path is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_has_primary_path() directly.

    YANG Description: lsp_has_primary_path
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-has-primary-path", rest_name="lsp-has-primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_has_primary_path must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-primary-path", rest_name="lsp-has-primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_has_primary_path = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_has_primary_path(self):
    self.__lsp_has_primary_path = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-primary-path", rest_name="lsp-has-primary-path", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_path_name(self):
    """
    Getter method for path_name, mapped from YANG variable /mpls_state/lsp/basic/path_name (string)

    YANG Description: lsp_path_name
    """
    return self.__path_name
      
  def _set_path_name(self, v, load=False):
    """
    Setter method for path_name, mapped from YANG variable /mpls_state/lsp/basic/path_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_name() directly.

    YANG Description: lsp_path_name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="path-name", rest_name="path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="path-name", rest_name="path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__path_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_name(self):
    self.__path_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="path-name", rest_name="path-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_out_label(self):
    """
    Getter method for out_label, mapped from YANG variable /mpls_state/lsp/basic/out_label (uint32)

    YANG Description: lsp_out_label
    """
    return self.__out_label
      
  def _set_out_label(self, v, load=False):
    """
    Setter method for out_label, mapped from YANG variable /mpls_state/lsp/basic/out_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_label() directly.

    YANG Description: lsp_out_label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-label", rest_name="out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-label", rest_name="out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__out_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_label(self):
    self.__out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="out-label", rest_name="out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_out_interface_name(self):
    """
    Getter method for out_interface_name, mapped from YANG variable /mpls_state/lsp/basic/out_interface_name (string)

    YANG Description: lsp_out_interface_name
    """
    return self.__out_interface_name
      
  def _set_out_interface_name(self, v, load=False):
    """
    Setter method for out_interface_name, mapped from YANG variable /mpls_state/lsp/basic/out_interface_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_out_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_out_interface_name() directly.

    YANG Description: lsp_out_interface_name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="out-interface-name", rest_name="out-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """out_interface_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="out-interface-name", rest_name="out-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__out_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_out_interface_name(self):
    self.__out_interface_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="out-interface-name", rest_name="out-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_primary_up(self):
    """
    Getter method for primary_up, mapped from YANG variable /mpls_state/lsp/basic/primary_up (boolean)

    YANG Description: lsp_primary_up
    """
    return self.__primary_up
      
  def _set_primary_up(self, v, load=False):
    """
    Setter method for primary_up, mapped from YANG variable /mpls_state/lsp/basic/primary_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_up() directly.

    YANG Description: lsp_primary_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="primary-up", rest_name="primary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-up", rest_name="primary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__primary_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_up(self):
    self.__primary_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-up", rest_name="primary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_primary_active(self):
    """
    Getter method for primary_active, mapped from YANG variable /mpls_state/lsp/basic/primary_active (boolean)

    YANG Description: lsp_primary_active
    """
    return self.__primary_active
      
  def _set_primary_active(self, v, load=False):
    """
    Setter method for primary_active, mapped from YANG variable /mpls_state/lsp/basic/primary_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_active() directly.

    YANG Description: lsp_primary_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="primary-active", rest_name="primary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-active", rest_name="primary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__primary_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_active(self):
    self.__primary_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-active", rest_name="primary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_lsp_has_secondary(self):
    """
    Getter method for lsp_has_secondary, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_secondary (boolean)

    YANG Description: lsp_has_secondary
    """
    return self.__lsp_has_secondary
      
  def _set_lsp_has_secondary(self, v, load=False):
    """
    Setter method for lsp_has_secondary, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_has_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_has_secondary() directly.

    YANG Description: lsp_has_secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-has-secondary", rest_name="lsp-has-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_has_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-secondary", rest_name="lsp-has-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_has_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_has_secondary(self):
    self.__lsp_has_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-secondary", rest_name="lsp-has-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_secondary_up(self):
    """
    Getter method for secondary_up, mapped from YANG variable /mpls_state/lsp/basic/secondary_up (boolean)

    YANG Description: lsp_secondary_up
    """
    return self.__secondary_up
      
  def _set_secondary_up(self, v, load=False):
    """
    Setter method for secondary_up, mapped from YANG variable /mpls_state/lsp/basic/secondary_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secondary_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secondary_up() directly.

    YANG Description: lsp_secondary_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="secondary-up", rest_name="secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secondary_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="secondary-up", rest_name="secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__secondary_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secondary_up(self):
    self.__secondary_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="secondary-up", rest_name="secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_secondary_active(self):
    """
    Getter method for secondary_active, mapped from YANG variable /mpls_state/lsp/basic/secondary_active (boolean)

    YANG Description: lsp_secondary_active
    """
    return self.__secondary_active
      
  def _set_secondary_active(self, v, load=False):
    """
    Setter method for secondary_active, mapped from YANG variable /mpls_state/lsp/basic/secondary_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secondary_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secondary_active() directly.

    YANG Description: lsp_secondary_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="secondary-active", rest_name="secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secondary_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="secondary-active", rest_name="secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__secondary_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secondary_active(self):
    self.__secondary_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="secondary-active", rest_name="secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_lsp_has_selected_secondary(self):
    """
    Getter method for lsp_has_selected_secondary, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_selected_secondary (boolean)

    YANG Description: lsp_has_selected_secondary
    """
    return self.__lsp_has_selected_secondary
      
  def _set_lsp_has_selected_secondary(self, v, load=False):
    """
    Setter method for lsp_has_selected_secondary, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_selected_secondary (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_has_selected_secondary is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_has_selected_secondary() directly.

    YANG Description: lsp_has_selected_secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-has-selected-secondary", rest_name="lsp-has-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_has_selected_secondary must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-selected-secondary", rest_name="lsp-has-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_has_selected_secondary = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_has_selected_secondary(self):
    self.__lsp_has_selected_secondary = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-selected-secondary", rest_name="lsp-has-selected-secondary", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_selected_secondary_up(self):
    """
    Getter method for selected_secondary_up, mapped from YANG variable /mpls_state/lsp/basic/selected_secondary_up (boolean)

    YANG Description: lsp_selected_secondary_up
    """
    return self.__selected_secondary_up
      
  def _set_selected_secondary_up(self, v, load=False):
    """
    Setter method for selected_secondary_up, mapped from YANG variable /mpls_state/lsp/basic/selected_secondary_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_selected_secondary_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_selected_secondary_up() directly.

    YANG Description: lsp_selected_secondary_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="selected-secondary-up", rest_name="selected-secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """selected_secondary_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="selected-secondary-up", rest_name="selected-secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__selected_secondary_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_selected_secondary_up(self):
    self.__selected_secondary_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="selected-secondary-up", rest_name="selected-secondary-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_selected_secondary_active(self):
    """
    Getter method for selected_secondary_active, mapped from YANG variable /mpls_state/lsp/basic/selected_secondary_active (boolean)

    YANG Description: lsp_selected_secondary_active
    """
    return self.__selected_secondary_active
      
  def _set_selected_secondary_active(self, v, load=False):
    """
    Setter method for selected_secondary_active, mapped from YANG variable /mpls_state/lsp/basic/selected_secondary_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_selected_secondary_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_selected_secondary_active() directly.

    YANG Description: lsp_selected_secondary_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="selected-secondary-active", rest_name="selected-secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """selected_secondary_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="selected-secondary-active", rest_name="selected-secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__selected_secondary_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_selected_secondary_active(self):
    self.__selected_secondary_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="selected-secondary-active", rest_name="selected-secondary-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_primary_is_selected(self):
    """
    Getter method for primary_is_selected, mapped from YANG variable /mpls_state/lsp/basic/primary_is_selected (boolean)

    YANG Description: lsp_primary_is_selected
    """
    return self.__primary_is_selected
      
  def _set_primary_is_selected(self, v, load=False):
    """
    Setter method for primary_is_selected, mapped from YANG variable /mpls_state/lsp/basic/primary_is_selected (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_is_selected is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_is_selected() directly.

    YANG Description: lsp_primary_is_selected
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="primary-is-selected", rest_name="primary-is-selected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_is_selected must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-is-selected", rest_name="primary-is-selected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__primary_is_selected = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_is_selected(self):
    self.__primary_is_selected = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="primary-is-selected", rest_name="primary-is-selected", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_lsp_has_frr(self):
    """
    Getter method for lsp_has_frr, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_frr (boolean)

    YANG Description: lsp_has_frr
    """
    return self.__lsp_has_frr
      
  def _set_lsp_has_frr(self, v, load=False):
    """
    Setter method for lsp_has_frr, mapped from YANG variable /mpls_state/lsp/basic/lsp_has_frr (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_has_frr is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_has_frr() directly.

    YANG Description: lsp_has_frr
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="lsp-has-frr", rest_name="lsp-has-frr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_has_frr must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-frr", rest_name="lsp-has-frr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__lsp_has_frr = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_has_frr(self):
    self.__lsp_has_frr = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="lsp-has-frr", rest_name="lsp-has-frr", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_up(self):
    """
    Getter method for frr_up, mapped from YANG variable /mpls_state/lsp/basic/frr_up (boolean)

    YANG Description: lsp_frr_up
    """
    return self.__frr_up
      
  def _set_frr_up(self, v, load=False):
    """
    Setter method for frr_up, mapped from YANG variable /mpls_state/lsp/basic/frr_up (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_up is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_up() directly.

    YANG Description: lsp_frr_up
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-up", rest_name="frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_up must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-up", rest_name="frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_up = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_up(self):
    self.__frr_up = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-up", rest_name="frr-up", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_active(self):
    """
    Getter method for frr_active, mapped from YANG variable /mpls_state/lsp/basic/frr_active (boolean)

    YANG Description: lsp_frr_active
    """
    return self.__frr_active
      
  def _set_frr_active(self, v, load=False):
    """
    Setter method for frr_active, mapped from YANG variable /mpls_state/lsp/basic/frr_active (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_active is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_active() directly.

    YANG Description: lsp_frr_active
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-active", rest_name="frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_active must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-active", rest_name="frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_active = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_active(self):
    self.__frr_active = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-active", rest_name="frr-active", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_up_down_count(self):
    """
    Getter method for up_down_count, mapped from YANG variable /mpls_state/lsp/basic/up_down_count (uint32)

    YANG Description: lsp_up_down_count
    """
    return self.__up_down_count
      
  def _set_up_down_count(self, v, load=False):
    """
    Setter method for up_down_count, mapped from YANG variable /mpls_state/lsp/basic/up_down_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_up_down_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_up_down_count() directly.

    YANG Description: lsp_up_down_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-down-count", rest_name="up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """up_down_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-down-count", rest_name="up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__up_down_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_up_down_count(self):
    self.__up_down_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="up-down-count", rest_name="up-down-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_retry_count(self):
    """
    Getter method for retry_count, mapped from YANG variable /mpls_state/lsp/basic/retry_count (uint32)

    YANG Description: lsp_retry_count
    """
    return self.__retry_count
      
  def _set_retry_count(self, v, load=False):
    """
    Setter method for retry_count, mapped from YANG variable /mpls_state/lsp/basic/retry_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_retry_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_retry_count() directly.

    YANG Description: lsp_retry_count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-count", rest_name="retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """retry_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-count", rest_name="retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__retry_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_retry_count(self):
    self.__retry_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="retry-count", rest_name="retry-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_down_reason(self):
    """
    Getter method for down_reason, mapped from YANG variable /mpls_state/lsp/basic/down_reason (string)

    YANG Description: lsp_down_reason
    """
    return self.__down_reason
      
  def _set_down_reason(self, v, load=False):
    """
    Setter method for down_reason, mapped from YANG variable /mpls_state/lsp/basic/down_reason (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_down_reason is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_down_reason() directly.

    YANG Description: lsp_down_reason
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="down-reason", rest_name="down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """down_reason must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="down-reason", rest_name="down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__down_reason = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_down_reason(self):
    self.__down_reason = YANGDynClass(base=unicode, is_leaf=True, yang_name="down-reason", rest_name="down-reason", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)

  tunnel_vif_index = __builtin__.property(_get_tunnel_vif_index)
  lsp_type_bypass = __builtin__.property(_get_lsp_type_bypass)
  lsp_type_dynamic = __builtin__.property(_get_lsp_type_dynamic)
  from_address_configured = __builtin__.property(_get_from_address_configured)
  from_address = __builtin__.property(_get_from_address)
  to_address = __builtin__.property(_get_to_address)
  admin_up = __builtin__.property(_get_admin_up)
  operational_status = __builtin__.property(_get_operational_status)
  lsp_is_active = __builtin__.property(_get_lsp_is_active)
  lsp_has_primary_path = __builtin__.property(_get_lsp_has_primary_path)
  path_name = __builtin__.property(_get_path_name)
  out_label = __builtin__.property(_get_out_label)
  out_interface_name = __builtin__.property(_get_out_interface_name)
  primary_up = __builtin__.property(_get_primary_up)
  primary_active = __builtin__.property(_get_primary_active)
  lsp_has_secondary = __builtin__.property(_get_lsp_has_secondary)
  secondary_up = __builtin__.property(_get_secondary_up)
  secondary_active = __builtin__.property(_get_secondary_active)
  lsp_has_selected_secondary = __builtin__.property(_get_lsp_has_selected_secondary)
  selected_secondary_up = __builtin__.property(_get_selected_secondary_up)
  selected_secondary_active = __builtin__.property(_get_selected_secondary_active)
  primary_is_selected = __builtin__.property(_get_primary_is_selected)
  lsp_has_frr = __builtin__.property(_get_lsp_has_frr)
  frr_up = __builtin__.property(_get_frr_up)
  frr_active = __builtin__.property(_get_frr_active)
  up_down_count = __builtin__.property(_get_up_down_count)
  retry_count = __builtin__.property(_get_retry_count)
  down_reason = __builtin__.property(_get_down_reason)


  _pyangbind_elements = {'tunnel_vif_index': tunnel_vif_index, 'lsp_type_bypass': lsp_type_bypass, 'lsp_type_dynamic': lsp_type_dynamic, 'from_address_configured': from_address_configured, 'from_address': from_address, 'to_address': to_address, 'admin_up': admin_up, 'operational_status': operational_status, 'lsp_is_active': lsp_is_active, 'lsp_has_primary_path': lsp_has_primary_path, 'path_name': path_name, 'out_label': out_label, 'out_interface_name': out_interface_name, 'primary_up': primary_up, 'primary_active': primary_active, 'lsp_has_secondary': lsp_has_secondary, 'secondary_up': secondary_up, 'secondary_active': secondary_active, 'lsp_has_selected_secondary': lsp_has_selected_secondary, 'selected_secondary_up': selected_secondary_up, 'selected_secondary_active': selected_secondary_active, 'primary_is_selected': primary_is_selected, 'lsp_has_frr': lsp_has_frr, 'frr_up': frr_up, 'frr_active': frr_active, 'up_down_count': up_down_count, 'retry_count': retry_count, 'down_reason': down_reason, }


