
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class packet_counters(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/rsvp/interfaces/packet-counters. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__path_tx','__resv_tx','__patherr_tx','__resverr_tx','__pathtear_tx','__resvtear_tx','__resvconf_tx','__bundle_tx','__ack_tx','__sumrefresh_tx','__hello_tx','__path_rx','__resv_rx','__patherr_rx','__resverr_rx','__pathtear_rx','__resvtear_rx','__resvconf_rx','__bundle_rx','__ack_rx','__sumrefresh_rx','__hello_rx','__path_tx_since_last_clear','__resv_tx_since_last_clear','__patherr_tx_since_last_clear','__resverr_tx_since_last_clear','__pathtear_tx_since_last_clear','__resvtear_tx_since_last_clear','__resvconf_tx_since_last_clear','__bundle_tx_since_last_clear','__ack_tx_since_last_clear','__sumrefresh_tx_since_last_clear','__hello_tx_since_last_clear','__path_rx_since_last_clear','__resv_rx_since_last_clear','__patherr_rx_since_last_clear','__resverr_rx_since_last_clear','__pathtear_rx_since_last_clear','__resvtear_rx_since_last_clear','__resvconf_rx_since_last_clear','__bundle_rx_since_last_clear','__ack_rx_since_last_clear','__sumrefresh_rx_since_last_clear','__hello_rx_since_last_clear',)

  _yang_name = 'packet-counters'
  _rest_name = 'packet-counters'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__resvconf_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx-since-last-clear", rest_name="resvconf-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx", rest_name="hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx-since-last-clear", rest_name="resv-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvconf_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx", rest_name="resvconf-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx", rest_name="resv-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvconf_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx-since-last-clear", rest_name="resvconf-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__ack_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx-since-last-clear", rest_name="ack-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx-since-last-clear", rest_name="resv-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvconf_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx", rest_name="resvconf-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pathtear_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx-since-last-clear", rest_name="pathtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resverr_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx", rest_name="resverr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__patherr_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx-since-last-clear", rest_name="patherr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__bundle_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx", rest_name="bundle-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resv_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx", rest_name="resv-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__hello_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-since-last-clear", rest_name="hello-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvtear_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx-since-last-clear", rest_name="resvtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__patherr_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx-since-last-clear", rest_name="patherr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resverr_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx", rest_name="resverr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvtear_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx-since-last-clear", rest_name="resvtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pathtear_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx-since-last-clear", rest_name="pathtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__ack_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx", rest_name="ack-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__sumrefresh_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx-since-last-clear", rest_name="sumrefresh-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx", rest_name="path-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx-since-last-clear", rest_name="path-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resverr_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx-since-last-clear", rest_name="resverr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx", rest_name="path-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvtear_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx", rest_name="resvtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__patherr_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx", rest_name="patherr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resvtear_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx", rest_name="resvtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__patherr_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx", rest_name="patherr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__ack_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx", rest_name="ack-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__bundle_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx-since-last-clear", rest_name="bundle-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__bundle_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx-since-last-clear", rest_name="bundle-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__sumrefresh_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx", rest_name="sumrefresh-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__bundle_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx", rest_name="bundle-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__hello_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-since-last-clear", rest_name="hello-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__path_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx-since-last-clear", rest_name="path-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pathtear_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx", rest_name="pathtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__resverr_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx-since-last-clear", rest_name="resverr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__sumrefresh_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx", rest_name="sumrefresh-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__pathtear_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx", rest_name="pathtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__sumrefresh_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx-since-last-clear", rest_name="sumrefresh-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx", rest_name="hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    self.__ack_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx-since-last-clear", rest_name="ack-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'rsvp', u'interfaces', u'packet-counters']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'rsvp', u'interfaces', u'packet-counters']

  def _get_path_tx(self):
    """
    Getter method for path_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_tx (uint64)

    YANG Description: RSVP Path messages sent
    """
    return self.__path_tx
      
  def _set_path_tx(self, v, load=False):
    """
    Setter method for path_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_tx() directly.

    YANG Description: RSVP Path messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx", rest_name="path-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx", rest_name="path-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_tx(self):
    self.__path_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx", rest_name="path-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_tx(self):
    """
    Getter method for resv_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_tx (uint64)

    YANG Description: RSVP Resv messages sent
    """
    return self.__resv_tx
      
  def _set_resv_tx(self, v, load=False):
    """
    Setter method for resv_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_tx() directly.

    YANG Description: RSVP Resv messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx", rest_name="resv-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx", rest_name="resv-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_tx(self):
    self.__resv_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx", rest_name="resv-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_patherr_tx(self):
    """
    Getter method for patherr_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_tx (uint64)

    YANG Description: RSVP PathErr messages sent
    """
    return self.__patherr_tx
      
  def _set_patherr_tx(self, v, load=False):
    """
    Setter method for patherr_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_patherr_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_patherr_tx() directly.

    YANG Description: RSVP PathErr messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx", rest_name="patherr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """patherr_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx", rest_name="patherr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__patherr_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_patherr_tx(self):
    self.__patherr_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx", rest_name="patherr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resverr_tx(self):
    """
    Getter method for resverr_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_tx (uint64)

    YANG Description: RSVP ResvErr messages sent
    """
    return self.__resverr_tx
      
  def _set_resverr_tx(self, v, load=False):
    """
    Setter method for resverr_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resverr_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resverr_tx() directly.

    YANG Description: RSVP ResvErr messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx", rest_name="resverr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resverr_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx", rest_name="resverr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resverr_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resverr_tx(self):
    self.__resverr_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx", rest_name="resverr-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pathtear_tx(self):
    """
    Getter method for pathtear_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_tx (uint64)

    YANG Description: RSVP PathTear messages sent
    """
    return self.__pathtear_tx
      
  def _set_pathtear_tx(self, v, load=False):
    """
    Setter method for pathtear_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pathtear_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pathtear_tx() directly.

    YANG Description: RSVP PathTear messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx", rest_name="pathtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pathtear_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx", rest_name="pathtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pathtear_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pathtear_tx(self):
    self.__pathtear_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx", rest_name="pathtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvtear_tx(self):
    """
    Getter method for resvtear_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_tx (uint64)

    YANG Description: RSVP ResvTear messages sent
    """
    return self.__resvtear_tx
      
  def _set_resvtear_tx(self, v, load=False):
    """
    Setter method for resvtear_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvtear_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvtear_tx() directly.

    YANG Description: RSVP ResvTear messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx", rest_name="resvtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvtear_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx", rest_name="resvtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvtear_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvtear_tx(self):
    self.__resvtear_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx", rest_name="resvtear-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvconf_tx(self):
    """
    Getter method for resvconf_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_tx (uint64)

    YANG Description: RSVP ResvConf messages sent
    """
    return self.__resvconf_tx
      
  def _set_resvconf_tx(self, v, load=False):
    """
    Setter method for resvconf_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvconf_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvconf_tx() directly.

    YANG Description: RSVP ResvConf messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx", rest_name="resvconf-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvconf_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx", rest_name="resvconf-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvconf_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvconf_tx(self):
    self.__resvconf_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx", rest_name="resvconf-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_bundle_tx(self):
    """
    Getter method for bundle_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_tx (uint64)

    YANG Description: RSVP Bundle messages sent
    """
    return self.__bundle_tx
      
  def _set_bundle_tx(self, v, load=False):
    """
    Setter method for bundle_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bundle_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bundle_tx() directly.

    YANG Description: RSVP Bundle messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx", rest_name="bundle-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bundle_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx", rest_name="bundle-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__bundle_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bundle_tx(self):
    self.__bundle_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx", rest_name="bundle-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_ack_tx(self):
    """
    Getter method for ack_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_tx (uint64)

    YANG Description: RSVP acknowledgements sent
    """
    return self.__ack_tx
      
  def _set_ack_tx(self, v, load=False):
    """
    Setter method for ack_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack_tx() directly.

    YANG Description: RSVP acknowledgements sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx", rest_name="ack-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx", rest_name="ack-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ack_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack_tx(self):
    self.__ack_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx", rest_name="ack-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_sumrefresh_tx(self):
    """
    Getter method for sumrefresh_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_tx (uint64)

    YANG Description: RSVP SumRefresh messages sent
    """
    return self.__sumrefresh_tx
      
  def _set_sumrefresh_tx(self, v, load=False):
    """
    Setter method for sumrefresh_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sumrefresh_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sumrefresh_tx() directly.

    YANG Description: RSVP SumRefresh messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx", rest_name="sumrefresh-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sumrefresh_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx", rest_name="sumrefresh-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__sumrefresh_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sumrefresh_tx(self):
    self.__sumrefresh_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx", rest_name="sumrefresh-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_hello_tx(self):
    """
    Getter method for hello_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_tx (uint64)

    YANG Description: RSVP hello messages sent
    """
    return self.__hello_tx
      
  def _set_hello_tx(self, v, load=False):
    """
    Setter method for hello_tx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_tx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_tx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_tx() directly.

    YANG Description: RSVP hello messages sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx", rest_name="hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_tx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx", rest_name="hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_tx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_tx(self):
    self.__hello_tx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx", rest_name="hello-tx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_rx(self):
    """
    Getter method for path_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_rx (uint64)

    YANG Description: RSVP Path messages received
    """
    return self.__path_rx
      
  def _set_path_rx(self, v, load=False):
    """
    Setter method for path_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_rx() directly.

    YANG Description: RSVP Path messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx", rest_name="path-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx", rest_name="path-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_rx(self):
    self.__path_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx", rest_name="path-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_rx(self):
    """
    Getter method for resv_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_rx (uint64)

    YANG Description: RSVP Resv messages received
    """
    return self.__resv_rx
      
  def _set_resv_rx(self, v, load=False):
    """
    Setter method for resv_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_rx() directly.

    YANG Description: RSVP Resv messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx", rest_name="resv-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx", rest_name="resv-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_rx(self):
    self.__resv_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx", rest_name="resv-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_patherr_rx(self):
    """
    Getter method for patherr_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_rx (uint64)

    YANG Description: RSVP PathErr messages received
    """
    return self.__patherr_rx
      
  def _set_patherr_rx(self, v, load=False):
    """
    Setter method for patherr_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_patherr_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_patherr_rx() directly.

    YANG Description: RSVP PathErr messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx", rest_name="patherr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """patherr_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx", rest_name="patherr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__patherr_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_patherr_rx(self):
    self.__patherr_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx", rest_name="patherr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resverr_rx(self):
    """
    Getter method for resverr_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_rx (uint64)

    YANG Description: RSVP ResvErr messages received
    """
    return self.__resverr_rx
      
  def _set_resverr_rx(self, v, load=False):
    """
    Setter method for resverr_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resverr_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resverr_rx() directly.

    YANG Description: RSVP ResvErr messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx", rest_name="resverr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resverr_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx", rest_name="resverr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resverr_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resverr_rx(self):
    self.__resverr_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx", rest_name="resverr-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pathtear_rx(self):
    """
    Getter method for pathtear_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_rx (uint64)

    YANG Description: RSVP PathTear messages received
    """
    return self.__pathtear_rx
      
  def _set_pathtear_rx(self, v, load=False):
    """
    Setter method for pathtear_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pathtear_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pathtear_rx() directly.

    YANG Description: RSVP PathTear messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx", rest_name="pathtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pathtear_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx", rest_name="pathtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pathtear_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pathtear_rx(self):
    self.__pathtear_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx", rest_name="pathtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvtear_rx(self):
    """
    Getter method for resvtear_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_rx (uint64)

    YANG Description: RSVP ResvTear messages received
    """
    return self.__resvtear_rx
      
  def _set_resvtear_rx(self, v, load=False):
    """
    Setter method for resvtear_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvtear_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvtear_rx() directly.

    YANG Description: RSVP ResvTear messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx", rest_name="resvtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvtear_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx", rest_name="resvtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvtear_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvtear_rx(self):
    self.__resvtear_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx", rest_name="resvtear-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvconf_rx(self):
    """
    Getter method for resvconf_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_rx (uint64)

    YANG Description: RSVP ResvConf messages received
    """
    return self.__resvconf_rx
      
  def _set_resvconf_rx(self, v, load=False):
    """
    Setter method for resvconf_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvconf_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvconf_rx() directly.

    YANG Description: RSVP ResvConf messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx", rest_name="resvconf-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvconf_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx", rest_name="resvconf-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvconf_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvconf_rx(self):
    self.__resvconf_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx", rest_name="resvconf-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_bundle_rx(self):
    """
    Getter method for bundle_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_rx (uint64)

    YANG Description: RSVP Bundle messages received
    """
    return self.__bundle_rx
      
  def _set_bundle_rx(self, v, load=False):
    """
    Setter method for bundle_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bundle_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bundle_rx() directly.

    YANG Description: RSVP Bundle messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx", rest_name="bundle-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bundle_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx", rest_name="bundle-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__bundle_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bundle_rx(self):
    self.__bundle_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx", rest_name="bundle-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_ack_rx(self):
    """
    Getter method for ack_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_rx (uint64)

    YANG Description: RSVP acknowledgements received
    """
    return self.__ack_rx
      
  def _set_ack_rx(self, v, load=False):
    """
    Setter method for ack_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack_rx() directly.

    YANG Description: RSVP acknowledgements received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx", rest_name="ack-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx", rest_name="ack-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ack_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack_rx(self):
    self.__ack_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx", rest_name="ack-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_sumrefresh_rx(self):
    """
    Getter method for sumrefresh_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_rx (uint64)

    YANG Description: RSVP SumRefresh messages received
    """
    return self.__sumrefresh_rx
      
  def _set_sumrefresh_rx(self, v, load=False):
    """
    Setter method for sumrefresh_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sumrefresh_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sumrefresh_rx() directly.

    YANG Description: RSVP SumRefresh messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx", rest_name="sumrefresh-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sumrefresh_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx", rest_name="sumrefresh-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__sumrefresh_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sumrefresh_rx(self):
    self.__sumrefresh_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx", rest_name="sumrefresh-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_hello_rx(self):
    """
    Getter method for hello_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_rx (uint64)

    YANG Description: RSVP hello messages received
    """
    return self.__hello_rx
      
  def _set_hello_rx(self, v, load=False):
    """
    Setter method for hello_rx, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_rx (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_rx is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_rx() directly.

    YANG Description: RSVP hello messages received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx", rest_name="hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_rx must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx", rest_name="hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_rx = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_rx(self):
    self.__hello_rx = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx", rest_name="hello-rx", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_tx_since_last_clear(self):
    """
    Getter method for path_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_tx_since_last_clear (uint64)

    YANG Description: RSVP Path messages sent since last clear
    """
    return self.__path_tx_since_last_clear
      
  def _set_path_tx_since_last_clear(self, v, load=False):
    """
    Setter method for path_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_tx_since_last_clear() directly.

    YANG Description: RSVP Path messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx-since-last-clear", rest_name="path-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx-since-last-clear", rest_name="path-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_tx_since_last_clear(self):
    self.__path_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-tx-since-last-clear", rest_name="path-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_tx_since_last_clear(self):
    """
    Getter method for resv_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_tx_since_last_clear (uint64)

    YANG Description: RSVP Resv messages sent since last clear
    """
    return self.__resv_tx_since_last_clear
      
  def _set_resv_tx_since_last_clear(self, v, load=False):
    """
    Setter method for resv_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_tx_since_last_clear() directly.

    YANG Description: RSVP Resv messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx-since-last-clear", rest_name="resv-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx-since-last-clear", rest_name="resv-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_tx_since_last_clear(self):
    self.__resv_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-tx-since-last-clear", rest_name="resv-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_patherr_tx_since_last_clear(self):
    """
    Getter method for patherr_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_tx_since_last_clear (uint64)

    YANG Description: RSVP PathErr messages sent since last clear
    """
    return self.__patherr_tx_since_last_clear
      
  def _set_patherr_tx_since_last_clear(self, v, load=False):
    """
    Setter method for patherr_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_patherr_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_patherr_tx_since_last_clear() directly.

    YANG Description: RSVP PathErr messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx-since-last-clear", rest_name="patherr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """patherr_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx-since-last-clear", rest_name="patherr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__patherr_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_patherr_tx_since_last_clear(self):
    self.__patherr_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-tx-since-last-clear", rest_name="patherr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resverr_tx_since_last_clear(self):
    """
    Getter method for resverr_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_tx_since_last_clear (uint64)

    YANG Description: RSVP ResvErr messages sent since last clear
    """
    return self.__resverr_tx_since_last_clear
      
  def _set_resverr_tx_since_last_clear(self, v, load=False):
    """
    Setter method for resverr_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resverr_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resverr_tx_since_last_clear() directly.

    YANG Description: RSVP ResvErr messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx-since-last-clear", rest_name="resverr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resverr_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx-since-last-clear", rest_name="resverr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resverr_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resverr_tx_since_last_clear(self):
    self.__resverr_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-tx-since-last-clear", rest_name="resverr-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pathtear_tx_since_last_clear(self):
    """
    Getter method for pathtear_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_tx_since_last_clear (uint64)

    YANG Description: RSVP PathTear messages sent since last clear
    """
    return self.__pathtear_tx_since_last_clear
      
  def _set_pathtear_tx_since_last_clear(self, v, load=False):
    """
    Setter method for pathtear_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pathtear_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pathtear_tx_since_last_clear() directly.

    YANG Description: RSVP PathTear messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx-since-last-clear", rest_name="pathtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pathtear_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx-since-last-clear", rest_name="pathtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pathtear_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pathtear_tx_since_last_clear(self):
    self.__pathtear_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-tx-since-last-clear", rest_name="pathtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvtear_tx_since_last_clear(self):
    """
    Getter method for resvtear_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_tx_since_last_clear (uint64)

    YANG Description: RSVP ResvTear messages sent since last clear
    """
    return self.__resvtear_tx_since_last_clear
      
  def _set_resvtear_tx_since_last_clear(self, v, load=False):
    """
    Setter method for resvtear_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvtear_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvtear_tx_since_last_clear() directly.

    YANG Description: RSVP ResvTear messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx-since-last-clear", rest_name="resvtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvtear_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx-since-last-clear", rest_name="resvtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvtear_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvtear_tx_since_last_clear(self):
    self.__resvtear_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-tx-since-last-clear", rest_name="resvtear-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvconf_tx_since_last_clear(self):
    """
    Getter method for resvconf_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_tx_since_last_clear (uint64)

    YANG Description: RSVP ResvConf messages sent since last clear
    """
    return self.__resvconf_tx_since_last_clear
      
  def _set_resvconf_tx_since_last_clear(self, v, load=False):
    """
    Setter method for resvconf_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvconf_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvconf_tx_since_last_clear() directly.

    YANG Description: RSVP ResvConf messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx-since-last-clear", rest_name="resvconf-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvconf_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx-since-last-clear", rest_name="resvconf-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvconf_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvconf_tx_since_last_clear(self):
    self.__resvconf_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-tx-since-last-clear", rest_name="resvconf-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_bundle_tx_since_last_clear(self):
    """
    Getter method for bundle_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_tx_since_last_clear (uint64)

    YANG Description: RSVP Bundle messages sent since last clear
    """
    return self.__bundle_tx_since_last_clear
      
  def _set_bundle_tx_since_last_clear(self, v, load=False):
    """
    Setter method for bundle_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bundle_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bundle_tx_since_last_clear() directly.

    YANG Description: RSVP Bundle messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx-since-last-clear", rest_name="bundle-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bundle_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx-since-last-clear", rest_name="bundle-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__bundle_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bundle_tx_since_last_clear(self):
    self.__bundle_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-tx-since-last-clear", rest_name="bundle-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_ack_tx_since_last_clear(self):
    """
    Getter method for ack_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_tx_since_last_clear (uint64)

    YANG Description: RSVP acknowledgements sent since last clear
    """
    return self.__ack_tx_since_last_clear
      
  def _set_ack_tx_since_last_clear(self, v, load=False):
    """
    Setter method for ack_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack_tx_since_last_clear() directly.

    YANG Description: RSVP acknowledgements sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx-since-last-clear", rest_name="ack-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx-since-last-clear", rest_name="ack-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ack_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack_tx_since_last_clear(self):
    self.__ack_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-tx-since-last-clear", rest_name="ack-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_sumrefresh_tx_since_last_clear(self):
    """
    Getter method for sumrefresh_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_tx_since_last_clear (uint64)

    YANG Description: RSVP SumRefresh messages sent since last clear
    """
    return self.__sumrefresh_tx_since_last_clear
      
  def _set_sumrefresh_tx_since_last_clear(self, v, load=False):
    """
    Setter method for sumrefresh_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sumrefresh_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sumrefresh_tx_since_last_clear() directly.

    YANG Description: RSVP SumRefresh messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx-since-last-clear", rest_name="sumrefresh-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sumrefresh_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx-since-last-clear", rest_name="sumrefresh-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__sumrefresh_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sumrefresh_tx_since_last_clear(self):
    self.__sumrefresh_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-tx-since-last-clear", rest_name="sumrefresh-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_hello_tx_since_last_clear(self):
    """
    Getter method for hello_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_tx_since_last_clear (uint64)

    YANG Description: RSVP hello messages sent since last clear
    """
    return self.__hello_tx_since_last_clear
      
  def _set_hello_tx_since_last_clear(self, v, load=False):
    """
    Setter method for hello_tx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_tx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_tx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_tx_since_last_clear() directly.

    YANG Description: RSVP hello messages sent since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-since-last-clear", rest_name="hello-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_tx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-since-last-clear", rest_name="hello-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_tx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_tx_since_last_clear(self):
    self.__hello_tx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-tx-since-last-clear", rest_name="hello-tx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_path_rx_since_last_clear(self):
    """
    Getter method for path_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_rx_since_last_clear (uint64)

    YANG Description: RSVP Path messages received since last clear
    """
    return self.__path_rx_since_last_clear
      
  def _set_path_rx_since_last_clear(self, v, load=False):
    """
    Setter method for path_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/path_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_rx_since_last_clear() directly.

    YANG Description: RSVP Path messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx-since-last-clear", rest_name="path-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx-since-last-clear", rest_name="path-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__path_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_rx_since_last_clear(self):
    self.__path_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="path-rx-since-last-clear", rest_name="path-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resv_rx_since_last_clear(self):
    """
    Getter method for resv_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_rx_since_last_clear (uint64)

    YANG Description: RSVP Resv messages received since last clear
    """
    return self.__resv_rx_since_last_clear
      
  def _set_resv_rx_since_last_clear(self, v, load=False):
    """
    Setter method for resv_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resv_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_rx_since_last_clear() directly.

    YANG Description: RSVP Resv messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx-since-last-clear", rest_name="resv-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx-since-last-clear", rest_name="resv-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resv_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_rx_since_last_clear(self):
    self.__resv_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resv-rx-since-last-clear", rest_name="resv-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_patherr_rx_since_last_clear(self):
    """
    Getter method for patherr_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_rx_since_last_clear (uint64)

    YANG Description: RSVP PathErr messages received since last clear
    """
    return self.__patherr_rx_since_last_clear
      
  def _set_patherr_rx_since_last_clear(self, v, load=False):
    """
    Setter method for patherr_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/patherr_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_patherr_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_patherr_rx_since_last_clear() directly.

    YANG Description: RSVP PathErr messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx-since-last-clear", rest_name="patherr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """patherr_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx-since-last-clear", rest_name="patherr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__patherr_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_patherr_rx_since_last_clear(self):
    self.__patherr_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="patherr-rx-since-last-clear", rest_name="patherr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resverr_rx_since_last_clear(self):
    """
    Getter method for resverr_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_rx_since_last_clear (uint64)

    YANG Description: RSVP ResvErr messages received since last clear
    """
    return self.__resverr_rx_since_last_clear
      
  def _set_resverr_rx_since_last_clear(self, v, load=False):
    """
    Setter method for resverr_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resverr_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resverr_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resverr_rx_since_last_clear() directly.

    YANG Description: RSVP ResvErr messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx-since-last-clear", rest_name="resverr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resverr_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx-since-last-clear", rest_name="resverr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resverr_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resverr_rx_since_last_clear(self):
    self.__resverr_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resverr-rx-since-last-clear", rest_name="resverr-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_pathtear_rx_since_last_clear(self):
    """
    Getter method for pathtear_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_rx_since_last_clear (uint64)

    YANG Description: RSVP PathTear messages received since last clear
    """
    return self.__pathtear_rx_since_last_clear
      
  def _set_pathtear_rx_since_last_clear(self, v, load=False):
    """
    Setter method for pathtear_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/pathtear_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pathtear_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pathtear_rx_since_last_clear() directly.

    YANG Description: RSVP PathTear messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx-since-last-clear", rest_name="pathtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pathtear_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx-since-last-clear", rest_name="pathtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__pathtear_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pathtear_rx_since_last_clear(self):
    self.__pathtear_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="pathtear-rx-since-last-clear", rest_name="pathtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvtear_rx_since_last_clear(self):
    """
    Getter method for resvtear_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_rx_since_last_clear (uint64)

    YANG Description: RSVP ResvTear messages received since last clear
    """
    return self.__resvtear_rx_since_last_clear
      
  def _set_resvtear_rx_since_last_clear(self, v, load=False):
    """
    Setter method for resvtear_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvtear_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvtear_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvtear_rx_since_last_clear() directly.

    YANG Description: RSVP ResvTear messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx-since-last-clear", rest_name="resvtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvtear_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx-since-last-clear", rest_name="resvtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvtear_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvtear_rx_since_last_clear(self):
    self.__resvtear_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvtear-rx-since-last-clear", rest_name="resvtear-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_resvconf_rx_since_last_clear(self):
    """
    Getter method for resvconf_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_rx_since_last_clear (uint64)

    YANG Description: RSVP ResvConf messages received since last clear
    """
    return self.__resvconf_rx_since_last_clear
      
  def _set_resvconf_rx_since_last_clear(self, v, load=False):
    """
    Setter method for resvconf_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/resvconf_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resvconf_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resvconf_rx_since_last_clear() directly.

    YANG Description: RSVP ResvConf messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx-since-last-clear", rest_name="resvconf-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resvconf_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx-since-last-clear", rest_name="resvconf-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__resvconf_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resvconf_rx_since_last_clear(self):
    self.__resvconf_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="resvconf-rx-since-last-clear", rest_name="resvconf-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_bundle_rx_since_last_clear(self):
    """
    Getter method for bundle_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_rx_since_last_clear (uint64)

    YANG Description: RSVP Bundle messages received since last clear
    """
    return self.__bundle_rx_since_last_clear
      
  def _set_bundle_rx_since_last_clear(self, v, load=False):
    """
    Setter method for bundle_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/bundle_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bundle_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bundle_rx_since_last_clear() directly.

    YANG Description: RSVP Bundle messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx-since-last-clear", rest_name="bundle-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bundle_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx-since-last-clear", rest_name="bundle-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__bundle_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bundle_rx_since_last_clear(self):
    self.__bundle_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="bundle-rx-since-last-clear", rest_name="bundle-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_ack_rx_since_last_clear(self):
    """
    Getter method for ack_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_rx_since_last_clear (uint64)

    YANG Description: RSVP acknowledgements received since last clear
    """
    return self.__ack_rx_since_last_clear
      
  def _set_ack_rx_since_last_clear(self, v, load=False):
    """
    Setter method for ack_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/ack_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ack_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ack_rx_since_last_clear() directly.

    YANG Description: RSVP acknowledgements received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx-since-last-clear", rest_name="ack-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ack_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx-since-last-clear", rest_name="ack-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__ack_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ack_rx_since_last_clear(self):
    self.__ack_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="ack-rx-since-last-clear", rest_name="ack-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_sumrefresh_rx_since_last_clear(self):
    """
    Getter method for sumrefresh_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_rx_since_last_clear (uint64)

    YANG Description: RSVP SumRefresh messages received since last clear
    """
    return self.__sumrefresh_rx_since_last_clear
      
  def _set_sumrefresh_rx_since_last_clear(self, v, load=False):
    """
    Setter method for sumrefresh_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/sumrefresh_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sumrefresh_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sumrefresh_rx_since_last_clear() directly.

    YANG Description: RSVP SumRefresh messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx-since-last-clear", rest_name="sumrefresh-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sumrefresh_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx-since-last-clear", rest_name="sumrefresh-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__sumrefresh_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sumrefresh_rx_since_last_clear(self):
    self.__sumrefresh_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="sumrefresh-rx-since-last-clear", rest_name="sumrefresh-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)


  def _get_hello_rx_since_last_clear(self):
    """
    Getter method for hello_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_rx_since_last_clear (uint64)

    YANG Description: RSVP hello messages received since last clear
    """
    return self.__hello_rx_since_last_clear
      
  def _set_hello_rx_since_last_clear(self, v, load=False):
    """
    Setter method for hello_rx_since_last_clear, mapped from YANG variable /mpls_state/rsvp/interfaces/packet_counters/hello_rx_since_last_clear (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_rx_since_last_clear is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_rx_since_last_clear() directly.

    YANG Description: RSVP hello messages received since last clear
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-since-last-clear", rest_name="hello-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_rx_since_last_clear must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-since-last-clear", rest_name="hello-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)""",
        })

    self.__hello_rx_since_last_clear = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_rx_since_last_clear(self):
    self.__hello_rx_since_last_clear = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="hello-rx-since-last-clear", rest_name="hello-rx-since-last-clear", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint64', is_config=False)

  path_tx = __builtin__.property(_get_path_tx)
  resv_tx = __builtin__.property(_get_resv_tx)
  patherr_tx = __builtin__.property(_get_patherr_tx)
  resverr_tx = __builtin__.property(_get_resverr_tx)
  pathtear_tx = __builtin__.property(_get_pathtear_tx)
  resvtear_tx = __builtin__.property(_get_resvtear_tx)
  resvconf_tx = __builtin__.property(_get_resvconf_tx)
  bundle_tx = __builtin__.property(_get_bundle_tx)
  ack_tx = __builtin__.property(_get_ack_tx)
  sumrefresh_tx = __builtin__.property(_get_sumrefresh_tx)
  hello_tx = __builtin__.property(_get_hello_tx)
  path_rx = __builtin__.property(_get_path_rx)
  resv_rx = __builtin__.property(_get_resv_rx)
  patherr_rx = __builtin__.property(_get_patherr_rx)
  resverr_rx = __builtin__.property(_get_resverr_rx)
  pathtear_rx = __builtin__.property(_get_pathtear_rx)
  resvtear_rx = __builtin__.property(_get_resvtear_rx)
  resvconf_rx = __builtin__.property(_get_resvconf_rx)
  bundle_rx = __builtin__.property(_get_bundle_rx)
  ack_rx = __builtin__.property(_get_ack_rx)
  sumrefresh_rx = __builtin__.property(_get_sumrefresh_rx)
  hello_rx = __builtin__.property(_get_hello_rx)
  path_tx_since_last_clear = __builtin__.property(_get_path_tx_since_last_clear)
  resv_tx_since_last_clear = __builtin__.property(_get_resv_tx_since_last_clear)
  patherr_tx_since_last_clear = __builtin__.property(_get_patherr_tx_since_last_clear)
  resverr_tx_since_last_clear = __builtin__.property(_get_resverr_tx_since_last_clear)
  pathtear_tx_since_last_clear = __builtin__.property(_get_pathtear_tx_since_last_clear)
  resvtear_tx_since_last_clear = __builtin__.property(_get_resvtear_tx_since_last_clear)
  resvconf_tx_since_last_clear = __builtin__.property(_get_resvconf_tx_since_last_clear)
  bundle_tx_since_last_clear = __builtin__.property(_get_bundle_tx_since_last_clear)
  ack_tx_since_last_clear = __builtin__.property(_get_ack_tx_since_last_clear)
  sumrefresh_tx_since_last_clear = __builtin__.property(_get_sumrefresh_tx_since_last_clear)
  hello_tx_since_last_clear = __builtin__.property(_get_hello_tx_since_last_clear)
  path_rx_since_last_clear = __builtin__.property(_get_path_rx_since_last_clear)
  resv_rx_since_last_clear = __builtin__.property(_get_resv_rx_since_last_clear)
  patherr_rx_since_last_clear = __builtin__.property(_get_patherr_rx_since_last_clear)
  resverr_rx_since_last_clear = __builtin__.property(_get_resverr_rx_since_last_clear)
  pathtear_rx_since_last_clear = __builtin__.property(_get_pathtear_rx_since_last_clear)
  resvtear_rx_since_last_clear = __builtin__.property(_get_resvtear_rx_since_last_clear)
  resvconf_rx_since_last_clear = __builtin__.property(_get_resvconf_rx_since_last_clear)
  bundle_rx_since_last_clear = __builtin__.property(_get_bundle_rx_since_last_clear)
  ack_rx_since_last_clear = __builtin__.property(_get_ack_rx_since_last_clear)
  sumrefresh_rx_since_last_clear = __builtin__.property(_get_sumrefresh_rx_since_last_clear)
  hello_rx_since_last_clear = __builtin__.property(_get_hello_rx_since_last_clear)


  _pyangbind_elements = {'path_tx': path_tx, 'resv_tx': resv_tx, 'patherr_tx': patherr_tx, 'resverr_tx': resverr_tx, 'pathtear_tx': pathtear_tx, 'resvtear_tx': resvtear_tx, 'resvconf_tx': resvconf_tx, 'bundle_tx': bundle_tx, 'ack_tx': ack_tx, 'sumrefresh_tx': sumrefresh_tx, 'hello_tx': hello_tx, 'path_rx': path_rx, 'resv_rx': resv_rx, 'patherr_rx': patherr_rx, 'resverr_rx': resverr_rx, 'pathtear_rx': pathtear_rx, 'resvtear_rx': resvtear_rx, 'resvconf_rx': resvconf_rx, 'bundle_rx': bundle_rx, 'ack_rx': ack_rx, 'sumrefresh_rx': sumrefresh_rx, 'hello_rx': hello_rx, 'path_tx_since_last_clear': path_tx_since_last_clear, 'resv_tx_since_last_clear': resv_tx_since_last_clear, 'patherr_tx_since_last_clear': patherr_tx_since_last_clear, 'resverr_tx_since_last_clear': resverr_tx_since_last_clear, 'pathtear_tx_since_last_clear': pathtear_tx_since_last_clear, 'resvtear_tx_since_last_clear': resvtear_tx_since_last_clear, 'resvconf_tx_since_last_clear': resvconf_tx_since_last_clear, 'bundle_tx_since_last_clear': bundle_tx_since_last_clear, 'ack_tx_since_last_clear': ack_tx_since_last_clear, 'sumrefresh_tx_since_last_clear': sumrefresh_tx_since_last_clear, 'hello_tx_since_last_clear': hello_tx_since_last_clear, 'path_rx_since_last_clear': path_rx_since_last_clear, 'resv_rx_since_last_clear': resv_rx_since_last_clear, 'patherr_rx_since_last_clear': patherr_rx_since_last_clear, 'resverr_rx_since_last_clear': resverr_rx_since_last_clear, 'pathtear_rx_since_last_clear': pathtear_rx_since_last_clear, 'resvtear_rx_since_last_clear': resvtear_rx_since_last_clear, 'resvconf_rx_since_last_clear': resvconf_rx_since_last_clear, 'bundle_rx_since_last_clear': bundle_rx_since_last_clear, 'ack_rx_since_last_clear': ack_rx_since_last_clear, 'sumrefresh_rx_since_last_clear': sumrefresh_rx_since_last_clear, 'hello_rx_since_last_clear': hello_rx_since_last_clear, }


