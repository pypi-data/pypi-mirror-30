
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import protocol_error
class protocol_errors(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/ldp/statistics/protocol-errors. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__stats_group','__protocol_error',)

  _yang_name = 'protocol-errors'
  _rest_name = 'protocol-errors'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__protocol_error = YANGDynClass(base=YANGListType("error_type",protocol_error.protocol_error, yang_name="protocol-error", rest_name="protocol-error", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='error-type', extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}), is_container='list', yang_name="protocol-error", rest_name="protocol-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__stats_group = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global-stats-all': {'value': 1}, u'per-session-stats': {'value': 0}, u'global-stats-since-last-clear': {'value': 2}},), is_leaf=True, yang_name="stats-group", rest_name="stats-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='mpls-ldp-stats-error-group', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'ldp', u'statistics', u'protocol-errors']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'ldp', u'statistics', u'protocol-errors']

  def _get_stats_group(self):
    """
    Getter method for stats_group, mapped from YANG variable /mpls_state/ldp/statistics/protocol_errors/stats_group (mpls-ldp-stats-error-group)

    YANG Description: Describes if the stats are for a given session, global-all or global-since-last-clear
    """
    return self.__stats_group
      
  def _set_stats_group(self, v, load=False):
    """
    Setter method for stats_group, mapped from YANG variable /mpls_state/ldp/statistics/protocol_errors/stats_group (mpls-ldp-stats-error-group)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stats_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stats_group() directly.

    YANG Description: Describes if the stats are for a given session, global-all or global-since-last-clear
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global-stats-all': {'value': 1}, u'per-session-stats': {'value': 0}, u'global-stats-since-last-clear': {'value': 2}},), is_leaf=True, yang_name="stats-group", rest_name="stats-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='mpls-ldp-stats-error-group', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stats_group must be of a type compatible with mpls-ldp-stats-error-group""",
          'defined-type': "brocade-mpls-operational:mpls-ldp-stats-error-group",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global-stats-all': {'value': 1}, u'per-session-stats': {'value': 0}, u'global-stats-since-last-clear': {'value': 2}},), is_leaf=True, yang_name="stats-group", rest_name="stats-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='mpls-ldp-stats-error-group', is_config=False)""",
        })

    self.__stats_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stats_group(self):
    self.__stats_group = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'global-stats-all': {'value': 1}, u'per-session-stats': {'value': 0}, u'global-stats-since-last-clear': {'value': 2}},), is_leaf=True, yang_name="stats-group", rest_name="stats-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='mpls-ldp-stats-error-group', is_config=False)


  def _get_protocol_error(self):
    """
    Getter method for protocol_error, mapped from YANG variable /mpls_state/ldp/statistics/protocol_errors/protocol_error (list)

    YANG Description: protocol errors
    """
    return self.__protocol_error
      
  def _set_protocol_error(self, v, load=False):
    """
    Setter method for protocol_error, mapped from YANG variable /mpls_state/ldp/statistics/protocol_errors/protocol_error (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_error is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_error() directly.

    YANG Description: protocol errors
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("error_type",protocol_error.protocol_error, yang_name="protocol-error", rest_name="protocol-error", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='error-type', extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}), is_container='list', yang_name="protocol-error", rest_name="protocol-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_error must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("error_type",protocol_error.protocol_error, yang_name="protocol-error", rest_name="protocol-error", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='error-type', extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}), is_container='list', yang_name="protocol-error", rest_name="protocol-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__protocol_error = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_error(self):
    self.__protocol_error = YANGDynClass(base=YANGListType("error_type",protocol_error.protocol_error, yang_name="protocol-error", rest_name="protocol-error", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='error-type', extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}), is_container='list', yang_name="protocol-error", rest_name="protocol-error", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-protocol-error', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  stats_group = __builtin__.property(_get_stats_group)
  protocol_error = __builtin__.property(_get_protocol_error)


  _pyangbind_elements = {'stats_group': stats_group, 'protocol_error': protocol_error, }


