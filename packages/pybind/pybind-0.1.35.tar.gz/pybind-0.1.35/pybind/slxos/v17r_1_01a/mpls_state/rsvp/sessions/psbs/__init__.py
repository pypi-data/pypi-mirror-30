
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import session_ero_hops
import session_rro_hops
class psbs(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/rsvp/sessions/psbs. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS RSVP session path state
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__path_index','__session_name','__session_type','__path_operational_status','__session_in_label','__session_out_label','__session_out_interface','__lsp_id','__flap_lock','__path_refresh','__path_refresh_ttd','__resv_refresh','__resv_refresh_ttd','__tspec_peak','__tspec_rate','__tspec_size','__tspec_minimum','__tspec_m','__psb_setup_priority','__psb_hold_priority','__session_attribute_all_flags','__sa_flag_label_recording','__sa_flag_soft_preemption_desired','__sa_flag_se_style','__sa_flag_local_protect','__sa_flag_bandwidth_protect','__sa_flag_session_protection_type','__session_soft_preemption_wait_timer','__session_preemption_wait_timer','__frr_detour','__frr_facility','__frr_unknown_backup_mode_desired','__frr_unknown_flags','__frr_psb_setup_priority','__frr_psb_hold_priority','__frr_bandwidth','__frr_hoplimit','__frr_method','__frr_nh_node_protection_available','__frr_nh_node_protection_in_use','__frr_nh_link_protection_available','__frr_nh_link_protection_in_use','__frr_bandwidth_protection_available','__frr_lsp_bringup_abandoned','__frr_updown_transitions','__frr_retries','__frr_session_protection_available','__frr_next_retry','__frr_cost','__frr_cspf_group_computation_mode','__frr_cspf_group_computation_mode_use_bypass_liberal','__is_downstream_backup_psb','__is_backup_psb','__is_upstream_psb','__is_ps_frr_detour_sent','__is_ps_frr_backup_sent','__is_ps_frr_detour_received','__is_ps_frr_backup_received','__path_received_from_ip','__path_received_interface','__path_received_auth_on','__path_received_message_id','__path_downstream_only','__path_sent_to_ip','__path_sent_interface','__path_sent_auth_on','__path_sent_message_id','__resv_received_from_ip','__resv_received_interface','__resv_received_auth_on','__resv_received_message_id','__session_riding_bypass_name','__session_style','__points_of_local_repair_detour_rcvd','__avoid_nodes_detour_rcvd','__points_of_local_repair_detour_sent','__avoid_nodes_detour_sent','__session_ero_hops','__session_rro_hops',)

  _yang_name = 'psbs'
  _rest_name = 'psbs'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__is_ps_frr_backup_sent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-sent", rest_name="is-ps-frr-backup-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__psb_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-setup-priority", rest_name="psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__frr_facility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-facility", rest_name="frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__frr_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-method-backup': {'value': 0}, u'frr-method-detour': {'value': 1}},), is_leaf=True, yang_name="frr-method", rest_name="frr-method", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-method', is_config=False)
    self.__frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-bandwidth", rest_name="frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_backup_psb = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-backup-psb", rest_name="is-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__session_rro_hops = YANGDynClass(base=YANGListType("ip_addr",session_rro_hops.session_rro_hops, yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__frr_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-retries", rest_name="frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__path_sent_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="path-sent-interface", rest_name="path-sent-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__frr_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-cost", rest_name="frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__session_riding_bypass_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="session-riding-bypass-name", rest_name="session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__avoid_nodes_detour_rcvd = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-rcvd", rest_name="avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__path_received_auth_on = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-received-auth-on", rest_name="path-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__resv_received_auth_on = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="resv-received-auth-on", rest_name="resv-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__sa_flag_label_recording = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-label-recording", rest_name="sa-flag-label-recording", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__path_operational_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-operational-status", rest_name="path-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__session_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-out-label", rest_name="session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_ps_frr_detour_received = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-received", rest_name="is-ps-frr-detour-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__path_sent_message_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-sent-message-id", rest_name="path-sent-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__session_ero_hops = YANGDynClass(base=YANGListType("ip_addr",session_ero_hops.session_ero_hops, yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__is_ps_frr_backup_received = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-received", rest_name="is-ps-frr-backup-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__sa_flag_local_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-local-protect", rest_name="sa-flag-local-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__points_of_local_repair_detour_sent = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-sent", rest_name="points-of-local-repair-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__path_received_message_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-received-message-id", rest_name="path-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_unknown_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-unknown-flags", rest_name="frr-unknown-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__psb_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-hold-priority", rest_name="psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__session_out_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="session-out-interface", rest_name="session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__frr_nh_link_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-available", rest_name="frr-nh-link-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__is_ps_frr_detour_sent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-sent", rest_name="is-ps-frr-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__sa_flag_se_style = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-se-style", rest_name="sa-flag-se-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__path_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh", rest_name="path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_nh_node_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-available", rest_name="frr-nh-node-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__session_soft_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-soft-preemption-wait-timer", rest_name="session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__sa_flag_soft_preemption_desired = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-soft-preemption-desired", rest_name="sa-flag-soft-preemption-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__frr_next_retry = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-next-retry", rest_name="frr-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__path_received_from_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-received-from-ip", rest_name="path-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__path_downstream_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-downstream-only", rest_name="path-downstream-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__resv_received_from_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="resv-received-from-ip", rest_name="resv-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__frr_bandwidth_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-bandwidth-protection-available", rest_name="frr-bandwidth-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__lsp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__resv_received_message_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-received-message-id", rest_name="resv-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__tspec_peak = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-peak", rest_name="tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__path_received_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="path-received-interface", rest_name="path-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__resv_received_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="resv-received-interface", rest_name="resv-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__flap_lock = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flap-lock", rest_name="flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__is_upstream_psb = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-upstream-psb", rest_name="is-upstream-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__sa_flag_bandwidth_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-bandwidth-protect", rest_name="sa-flag-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__session_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-type-none': {'value': 0}, u'merged-backup': {'value': 6}, u'ingress-detour': {'value': 1}, u'egress-backup': {'value': 7}, u'repaired-session': {'value': 8}, u'bypass-ingress': {'value': 9}, u'transit-detour': {'value': 2}, u'egress-detour': {'value': 4}, u'ingress-backup': {'value': 5}, u'merged-detour': {'value': 3}},), is_leaf=True, yang_name="session-type", rest_name="session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-type', is_config=False)
    self.__tspec_m = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-m", rest_name="tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_psb_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-setup-priority", rest_name="frr-psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__frr_unknown_backup_mode_desired = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-unknown-backup-mode-desired", rest_name="frr-unknown-backup-mode-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__frr_psb_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-hold-priority", rest_name="frr-psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__session_style = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reservation-style-shared-explicit': {'value': 2}, u'reservation-style-wildcard-filter': {'value': 0}, u'reservation-style-unknown': {'value': 3}, u'reservation-style-fixed-filter': {'value': 1}},), is_leaf=True, yang_name="session-style", rest_name="session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-reservation-style', is_config=False)
    self.__frr_detour = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-detour", rest_name="frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__is_downstream_backup_psb = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-downstream-backup-psb", rest_name="is-downstream-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__path_sent_to_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-sent-to-ip", rest_name="path-sent-to-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__path_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh-ttd", rest_name="path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__avoid_nodes_detour_sent = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-sent", rest_name="avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__frr_hoplimit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-hoplimit", rest_name="frr-hoplimit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__session_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="session-name", rest_name="session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    self.__resv_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh", rest_name="resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_updown_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-updown-transitions", rest_name="frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__points_of_local_repair_detour_rcvd = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-rcvd", rest_name="points-of-local-repair-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    self.__resv_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh-ttd", rest_name="resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__path_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-index", rest_name="path-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_cspf_group_computation_mode_use_bypass_liberal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-cspf-group-computation-mode-use-bypass-liberal", rest_name="frr-cspf-group-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__frr_cspf_group_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-cspf-group-comp-mode-add-penalty': {'value': 1}, u'frr-cspf-group-comp-mode-high-penalty': {'value': 3}, u'frr-cspf-group-comp-mode-exclude-groups': {'value': 2}, u'frr-cspf-group-comp-mode-disabled': {'value': 0}},), is_leaf=True, yang_name="frr-cspf-group-computation-mode", rest_name="frr-cspf-group-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-cspf-group-computation-mode', is_config=False)
    self.__path_sent_auth_on = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-sent-auth-on", rest_name="path-sent-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__session_in_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-in-label", rest_name="session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__sa_flag_session_protection_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-protection-type-link': {'value': 1}, u'session-protection-type-node': {'value': 0}},), is_leaf=True, yang_name="sa-flag-session-protection-type", rest_name="sa-flag-session-protection-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-protection-type', is_config=False)
    self.__tspec_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-size", rest_name="tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_nh_node_protection_in_use = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-in-use", rest_name="frr-nh-node-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__frr_lsp_bringup_abandoned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-lsp-bringup-abandoned", rest_name="frr-lsp-bringup-abandoned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__tspec_minimum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-minimum", rest_name="tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__session_attribute_all_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="session-attribute-all-flags", rest_name="session-attribute-all-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    self.__frr_session_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-session-protection-available", rest_name="frr-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    self.__tspec_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-rate", rest_name="tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__session_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-preemption-wait-timer", rest_name="session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__frr_nh_link_protection_in_use = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-in-use", rest_name="frr-nh-link-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'rsvp', u'sessions', u'psbs']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'rsvp', u'sessions', u'psbs']

  def _get_path_index(self):
    """
    Getter method for path_index, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_index (uint32)

    YANG Description: Index of path which is a pseudo key
    """
    return self.__path_index
      
  def _set_path_index(self, v, load=False):
    """
    Setter method for path_index, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_index() directly.

    YANG Description: Index of path which is a pseudo key
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-index", rest_name="path-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-index", rest_name="path-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__path_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_index(self):
    self.__path_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-index", rest_name="path-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_session_name(self):
    """
    Getter method for session_name, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_name (string)

    YANG Description: Session name
    """
    return self.__session_name
      
  def _set_session_name(self, v, load=False):
    """
    Setter method for session_name, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_name() directly.

    YANG Description: Session name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="session-name", rest_name="session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="session-name", rest_name="session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__session_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_name(self):
    self.__session_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="session-name", rest_name="session-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_session_type(self):
    """
    Getter method for session_type, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_type (session-type)

    YANG Description: Session type
    """
    return self.__session_type
      
  def _set_session_type(self, v, load=False):
    """
    Setter method for session_type, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_type (session-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_type() directly.

    YANG Description: Session type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-type-none': {'value': 0}, u'merged-backup': {'value': 6}, u'ingress-detour': {'value': 1}, u'egress-backup': {'value': 7}, u'repaired-session': {'value': 8}, u'bypass-ingress': {'value': 9}, u'transit-detour': {'value': 2}, u'egress-detour': {'value': 4}, u'ingress-backup': {'value': 5}, u'merged-detour': {'value': 3}},), is_leaf=True, yang_name="session-type", rest_name="session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_type must be of a type compatible with session-type""",
          'defined-type': "brocade-mpls-operational:session-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-type-none': {'value': 0}, u'merged-backup': {'value': 6}, u'ingress-detour': {'value': 1}, u'egress-backup': {'value': 7}, u'repaired-session': {'value': 8}, u'bypass-ingress': {'value': 9}, u'transit-detour': {'value': 2}, u'egress-detour': {'value': 4}, u'ingress-backup': {'value': 5}, u'merged-detour': {'value': 3}},), is_leaf=True, yang_name="session-type", rest_name="session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-type', is_config=False)""",
        })

    self.__session_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_type(self):
    self.__session_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-type-none': {'value': 0}, u'merged-backup': {'value': 6}, u'ingress-detour': {'value': 1}, u'egress-backup': {'value': 7}, u'repaired-session': {'value': 8}, u'bypass-ingress': {'value': 9}, u'transit-detour': {'value': 2}, u'egress-detour': {'value': 4}, u'ingress-backup': {'value': 5}, u'merged-detour': {'value': 3}},), is_leaf=True, yang_name="session-type", rest_name="session-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-type', is_config=False)


  def _get_path_operational_status(self):
    """
    Getter method for path_operational_status, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_operational_status (boolean)

    YANG Description: If the path up or not
    """
    return self.__path_operational_status
      
  def _set_path_operational_status(self, v, load=False):
    """
    Setter method for path_operational_status, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_operational_status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_operational_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_operational_status() directly.

    YANG Description: If the path up or not
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="path-operational-status", rest_name="path-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_operational_status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-operational-status", rest_name="path-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__path_operational_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_operational_status(self):
    self.__path_operational_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-operational-status", rest_name="path-operational-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_session_in_label(self):
    """
    Getter method for session_in_label, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_in_label (uint32)

    YANG Description: Session in label
    """
    return self.__session_in_label
      
  def _set_session_in_label(self, v, load=False):
    """
    Setter method for session_in_label, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_in_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_in_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_in_label() directly.

    YANG Description: Session in label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-in-label", rest_name="session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_in_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-in-label", rest_name="session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_in_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_in_label(self):
    self.__session_in_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-in-label", rest_name="session-in-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_session_out_label(self):
    """
    Getter method for session_out_label, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_out_label (uint32)

    YANG Description: Session out label
    """
    return self.__session_out_label
      
  def _set_session_out_label(self, v, load=False):
    """
    Setter method for session_out_label, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_out_label (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_out_label is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_out_label() directly.

    YANG Description: Session out label
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-out-label", rest_name="session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_out_label must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-out-label", rest_name="session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_out_label = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_out_label(self):
    self.__session_out_label = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-out-label", rest_name="session-out-label", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_session_out_interface(self):
    """
    Getter method for session_out_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_out_interface (string)

    YANG Description: Out-going interface for the session
    """
    return self.__session_out_interface
      
  def _set_session_out_interface(self, v, load=False):
    """
    Setter method for session_out_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_out_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_out_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_out_interface() directly.

    YANG Description: Out-going interface for the session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="session-out-interface", rest_name="session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_out_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="session-out-interface", rest_name="session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__session_out_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_out_interface(self):
    self.__session_out_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="session-out-interface", rest_name="session-out-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_lsp_id(self):
    """
    Getter method for lsp_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/lsp_id (uint32)

    YANG Description: LSP ID
    """
    return self.__lsp_id
      
  def _set_lsp_id(self, v, load=False):
    """
    Setter method for lsp_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/lsp_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_lsp_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_lsp_id() directly.

    YANG Description: LSP ID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """lsp_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__lsp_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_lsp_id(self):
    self.__lsp_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="lsp-id", rest_name="lsp-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_flap_lock(self):
    """
    Getter method for flap_lock, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/flap_lock (uint32)

    YANG Description: Flap lock
    """
    return self.__flap_lock
      
  def _set_flap_lock(self, v, load=False):
    """
    Setter method for flap_lock, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/flap_lock (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_flap_lock is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_flap_lock() directly.

    YANG Description: Flap lock
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flap-lock", rest_name="flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """flap_lock must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flap-lock", rest_name="flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__flap_lock = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_flap_lock(self):
    self.__flap_lock = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="flap-lock", rest_name="flap-lock", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_path_refresh(self):
    """
    Getter method for path_refresh, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_refresh (uint32)

    YANG Description: Path refresh
    """
    return self.__path_refresh
      
  def _set_path_refresh(self, v, load=False):
    """
    Setter method for path_refresh, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_refresh (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_refresh is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_refresh() directly.

    YANG Description: Path refresh
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh", rest_name="path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_refresh must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh", rest_name="path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__path_refresh = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_refresh(self):
    self.__path_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh", rest_name="path-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_path_refresh_ttd(self):
    """
    Getter method for path_refresh_ttd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_refresh_ttd (uint32)

    YANG Description: Path fresesh ttd
    """
    return self.__path_refresh_ttd
      
  def _set_path_refresh_ttd(self, v, load=False):
    """
    Setter method for path_refresh_ttd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_refresh_ttd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_refresh_ttd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_refresh_ttd() directly.

    YANG Description: Path fresesh ttd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh-ttd", rest_name="path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_refresh_ttd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh-ttd", rest_name="path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__path_refresh_ttd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_refresh_ttd(self):
    self.__path_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-refresh-ttd", rest_name="path-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_resv_refresh(self):
    """
    Getter method for resv_refresh, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_refresh (uint32)

    YANG Description: Resv refresh
    """
    return self.__resv_refresh
      
  def _set_resv_refresh(self, v, load=False):
    """
    Setter method for resv_refresh, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_refresh (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_refresh is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_refresh() directly.

    YANG Description: Resv refresh
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh", rest_name="resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_refresh must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh", rest_name="resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__resv_refresh = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_refresh(self):
    self.__resv_refresh = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh", rest_name="resv-refresh", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_resv_refresh_ttd(self):
    """
    Getter method for resv_refresh_ttd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_refresh_ttd (uint32)

    YANG Description: Resv refresh ttd
    """
    return self.__resv_refresh_ttd
      
  def _set_resv_refresh_ttd(self, v, load=False):
    """
    Setter method for resv_refresh_ttd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_refresh_ttd (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_refresh_ttd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_refresh_ttd() directly.

    YANG Description: Resv refresh ttd
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh-ttd", rest_name="resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_refresh_ttd must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh-ttd", rest_name="resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__resv_refresh_ttd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_refresh_ttd(self):
    self.__resv_refresh_ttd = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-refresh-ttd", rest_name="resv-refresh-ttd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_tspec_peak(self):
    """
    Getter method for tspec_peak, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_peak (uint32)

    YANG Description: Tspec peak
    """
    return self.__tspec_peak
      
  def _set_tspec_peak(self, v, load=False):
    """
    Setter method for tspec_peak, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_peak (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tspec_peak is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tspec_peak() directly.

    YANG Description: Tspec peak
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-peak", rest_name="tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tspec_peak must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-peak", rest_name="tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tspec_peak = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tspec_peak(self):
    self.__tspec_peak = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-peak", rest_name="tspec-peak", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_tspec_rate(self):
    """
    Getter method for tspec_rate, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_rate (uint32)

    YANG Description: Tspec rate
    """
    return self.__tspec_rate
      
  def _set_tspec_rate(self, v, load=False):
    """
    Setter method for tspec_rate, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_rate (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tspec_rate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tspec_rate() directly.

    YANG Description: Tspec rate
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-rate", rest_name="tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tspec_rate must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-rate", rest_name="tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tspec_rate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tspec_rate(self):
    self.__tspec_rate = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-rate", rest_name="tspec-rate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_tspec_size(self):
    """
    Getter method for tspec_size, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_size (uint32)

    YANG Description: Tspec size
    """
    return self.__tspec_size
      
  def _set_tspec_size(self, v, load=False):
    """
    Setter method for tspec_size, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_size (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tspec_size is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tspec_size() directly.

    YANG Description: Tspec size
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-size", rest_name="tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tspec_size must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-size", rest_name="tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tspec_size = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tspec_size(self):
    self.__tspec_size = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-size", rest_name="tspec-size", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_tspec_minimum(self):
    """
    Getter method for tspec_minimum, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_minimum (uint32)

    YANG Description: Tspec minimum
    """
    return self.__tspec_minimum
      
  def _set_tspec_minimum(self, v, load=False):
    """
    Setter method for tspec_minimum, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_minimum (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tspec_minimum is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tspec_minimum() directly.

    YANG Description: Tspec minimum
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-minimum", rest_name="tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tspec_minimum must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-minimum", rest_name="tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tspec_minimum = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tspec_minimum(self):
    self.__tspec_minimum = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-minimum", rest_name="tspec-minimum", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_tspec_m(self):
    """
    Getter method for tspec_m, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_m (uint32)

    YANG Description: Tspec m
    """
    return self.__tspec_m
      
  def _set_tspec_m(self, v, load=False):
    """
    Setter method for tspec_m, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/tspec_m (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tspec_m is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tspec_m() directly.

    YANG Description: Tspec m
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-m", rest_name="tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tspec_m must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-m", rest_name="tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tspec_m = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tspec_m(self):
    self.__tspec_m = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tspec-m", rest_name="tspec-m", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_psb_setup_priority(self):
    """
    Getter method for psb_setup_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/psb_setup_priority (uint8)

    YANG Description: PSB setup priority
    """
    return self.__psb_setup_priority
      
  def _set_psb_setup_priority(self, v, load=False):
    """
    Setter method for psb_setup_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/psb_setup_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_psb_setup_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_psb_setup_priority() directly.

    YANG Description: PSB setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-setup-priority", rest_name="psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """psb_setup_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-setup-priority", rest_name="psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__psb_setup_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_psb_setup_priority(self):
    self.__psb_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-setup-priority", rest_name="psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_psb_hold_priority(self):
    """
    Getter method for psb_hold_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/psb_hold_priority (uint8)

    YANG Description: PSB hold priority
    """
    return self.__psb_hold_priority
      
  def _set_psb_hold_priority(self, v, load=False):
    """
    Setter method for psb_hold_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/psb_hold_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_psb_hold_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_psb_hold_priority() directly.

    YANG Description: PSB hold priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-hold-priority", rest_name="psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """psb_hold_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-hold-priority", rest_name="psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__psb_hold_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_psb_hold_priority(self):
    self.__psb_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="psb-hold-priority", rest_name="psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_session_attribute_all_flags(self):
    """
    Getter method for session_attribute_all_flags, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_attribute_all_flags (uint8)

    YANG Description: All session attribute flags
    """
    return self.__session_attribute_all_flags
      
  def _set_session_attribute_all_flags(self, v, load=False):
    """
    Setter method for session_attribute_all_flags, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_attribute_all_flags (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_attribute_all_flags is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_attribute_all_flags() directly.

    YANG Description: All session attribute flags
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="session-attribute-all-flags", rest_name="session-attribute-all-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_attribute_all_flags must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="session-attribute-all-flags", rest_name="session-attribute-all-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__session_attribute_all_flags = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_attribute_all_flags(self):
    self.__session_attribute_all_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="session-attribute-all-flags", rest_name="session-attribute-all-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_sa_flag_label_recording(self):
    """
    Getter method for sa_flag_label_recording, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_label_recording (boolean)

    YANG Description: Session attribute flag label recording
    """
    return self.__sa_flag_label_recording
      
  def _set_sa_flag_label_recording(self, v, load=False):
    """
    Setter method for sa_flag_label_recording, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_label_recording (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sa_flag_label_recording is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sa_flag_label_recording() directly.

    YANG Description: Session attribute flag label recording
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sa-flag-label-recording", rest_name="sa-flag-label-recording", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sa_flag_label_recording must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-label-recording", rest_name="sa-flag-label-recording", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__sa_flag_label_recording = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sa_flag_label_recording(self):
    self.__sa_flag_label_recording = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-label-recording", rest_name="sa-flag-label-recording", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_sa_flag_soft_preemption_desired(self):
    """
    Getter method for sa_flag_soft_preemption_desired, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_soft_preemption_desired (boolean)

    YANG Description: Session attribute flag soft preemption desired
    """
    return self.__sa_flag_soft_preemption_desired
      
  def _set_sa_flag_soft_preemption_desired(self, v, load=False):
    """
    Setter method for sa_flag_soft_preemption_desired, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_soft_preemption_desired (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sa_flag_soft_preemption_desired is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sa_flag_soft_preemption_desired() directly.

    YANG Description: Session attribute flag soft preemption desired
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sa-flag-soft-preemption-desired", rest_name="sa-flag-soft-preemption-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sa_flag_soft_preemption_desired must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-soft-preemption-desired", rest_name="sa-flag-soft-preemption-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__sa_flag_soft_preemption_desired = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sa_flag_soft_preemption_desired(self):
    self.__sa_flag_soft_preemption_desired = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-soft-preemption-desired", rest_name="sa-flag-soft-preemption-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_sa_flag_se_style(self):
    """
    Getter method for sa_flag_se_style, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_se_style (boolean)

    YANG Description: Session attribute flag SE style
    """
    return self.__sa_flag_se_style
      
  def _set_sa_flag_se_style(self, v, load=False):
    """
    Setter method for sa_flag_se_style, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_se_style (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sa_flag_se_style is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sa_flag_se_style() directly.

    YANG Description: Session attribute flag SE style
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sa-flag-se-style", rest_name="sa-flag-se-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sa_flag_se_style must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-se-style", rest_name="sa-flag-se-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__sa_flag_se_style = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sa_flag_se_style(self):
    self.__sa_flag_se_style = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-se-style", rest_name="sa-flag-se-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_sa_flag_local_protect(self):
    """
    Getter method for sa_flag_local_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_local_protect (boolean)

    YANG Description: Session attribute local protection desired
    """
    return self.__sa_flag_local_protect
      
  def _set_sa_flag_local_protect(self, v, load=False):
    """
    Setter method for sa_flag_local_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_local_protect (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sa_flag_local_protect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sa_flag_local_protect() directly.

    YANG Description: Session attribute local protection desired
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sa-flag-local-protect", rest_name="sa-flag-local-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sa_flag_local_protect must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-local-protect", rest_name="sa-flag-local-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__sa_flag_local_protect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sa_flag_local_protect(self):
    self.__sa_flag_local_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-local-protect", rest_name="sa-flag-local-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_sa_flag_bandwidth_protect(self):
    """
    Getter method for sa_flag_bandwidth_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_bandwidth_protect (boolean)

    YANG Description: Session attribute bandwidth protection desired
    """
    return self.__sa_flag_bandwidth_protect
      
  def _set_sa_flag_bandwidth_protect(self, v, load=False):
    """
    Setter method for sa_flag_bandwidth_protect, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_bandwidth_protect (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sa_flag_bandwidth_protect is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sa_flag_bandwidth_protect() directly.

    YANG Description: Session attribute bandwidth protection desired
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="sa-flag-bandwidth-protect", rest_name="sa-flag-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sa_flag_bandwidth_protect must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-bandwidth-protect", rest_name="sa-flag-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__sa_flag_bandwidth_protect = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sa_flag_bandwidth_protect(self):
    self.__sa_flag_bandwidth_protect = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="sa-flag-bandwidth-protect", rest_name="sa-flag-bandwidth-protect", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_sa_flag_session_protection_type(self):
    """
    Getter method for sa_flag_session_protection_type, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_session_protection_type (session-protection-type)

    YANG Description: Session attribute flag protection type
    """
    return self.__sa_flag_session_protection_type
      
  def _set_sa_flag_session_protection_type(self, v, load=False):
    """
    Setter method for sa_flag_session_protection_type, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/sa_flag_session_protection_type (session-protection-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_sa_flag_session_protection_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_sa_flag_session_protection_type() directly.

    YANG Description: Session attribute flag protection type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-protection-type-link': {'value': 1}, u'session-protection-type-node': {'value': 0}},), is_leaf=True, yang_name="sa-flag-session-protection-type", rest_name="sa-flag-session-protection-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-protection-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """sa_flag_session_protection_type must be of a type compatible with session-protection-type""",
          'defined-type': "brocade-mpls-operational:session-protection-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-protection-type-link': {'value': 1}, u'session-protection-type-node': {'value': 0}},), is_leaf=True, yang_name="sa-flag-session-protection-type", rest_name="sa-flag-session-protection-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-protection-type', is_config=False)""",
        })

    self.__sa_flag_session_protection_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_sa_flag_session_protection_type(self):
    self.__sa_flag_session_protection_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'session-protection-type-link': {'value': 1}, u'session-protection-type-node': {'value': 0}},), is_leaf=True, yang_name="sa-flag-session-protection-type", rest_name="sa-flag-session-protection-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-protection-type', is_config=False)


  def _get_session_soft_preemption_wait_timer(self):
    """
    Getter method for session_soft_preemption_wait_timer, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_soft_preemption_wait_timer (uint32)

    YANG Description: Session soft preemption wait timer
    """
    return self.__session_soft_preemption_wait_timer
      
  def _set_session_soft_preemption_wait_timer(self, v, load=False):
    """
    Setter method for session_soft_preemption_wait_timer, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_soft_preemption_wait_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_soft_preemption_wait_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_soft_preemption_wait_timer() directly.

    YANG Description: Session soft preemption wait timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-soft-preemption-wait-timer", rest_name="session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_soft_preemption_wait_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-soft-preemption-wait-timer", rest_name="session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_soft_preemption_wait_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_soft_preemption_wait_timer(self):
    self.__session_soft_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-soft-preemption-wait-timer", rest_name="session-soft-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_session_preemption_wait_timer(self):
    """
    Getter method for session_preemption_wait_timer, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_preemption_wait_timer (uint32)

    YANG Description: Session preemption wait timer
    """
    return self.__session_preemption_wait_timer
      
  def _set_session_preemption_wait_timer(self, v, load=False):
    """
    Setter method for session_preemption_wait_timer, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_preemption_wait_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_preemption_wait_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_preemption_wait_timer() directly.

    YANG Description: Session preemption wait timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-preemption-wait-timer", rest_name="session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_preemption_wait_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-preemption-wait-timer", rest_name="session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_preemption_wait_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_preemption_wait_timer(self):
    self.__session_preemption_wait_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-preemption-wait-timer", rest_name="session-preemption-wait-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_frr_detour(self):
    """
    Getter method for frr_detour, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_detour (boolean)

    YANG Description: Fast re-route detour
    """
    return self.__frr_detour
      
  def _set_frr_detour(self, v, load=False):
    """
    Setter method for frr_detour, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_detour (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_detour is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_detour() directly.

    YANG Description: Fast re-route detour
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-detour", rest_name="frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_detour must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-detour", rest_name="frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_detour = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_detour(self):
    self.__frr_detour = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-detour", rest_name="frr-detour", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_facility(self):
    """
    Getter method for frr_facility, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_facility (boolean)

    YANG Description: Fast re-route facility
    """
    return self.__frr_facility
      
  def _set_frr_facility(self, v, load=False):
    """
    Setter method for frr_facility, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_facility (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_facility is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_facility() directly.

    YANG Description: Fast re-route facility
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-facility", rest_name="frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_facility must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-facility", rest_name="frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_facility = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_facility(self):
    self.__frr_facility = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-facility", rest_name="frr-facility", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_unknown_backup_mode_desired(self):
    """
    Getter method for frr_unknown_backup_mode_desired, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_unknown_backup_mode_desired (boolean)

    YANG Description: Is unknown backup mode desired
    """
    return self.__frr_unknown_backup_mode_desired
      
  def _set_frr_unknown_backup_mode_desired(self, v, load=False):
    """
    Setter method for frr_unknown_backup_mode_desired, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_unknown_backup_mode_desired (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_unknown_backup_mode_desired is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_unknown_backup_mode_desired() directly.

    YANG Description: Is unknown backup mode desired
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-unknown-backup-mode-desired", rest_name="frr-unknown-backup-mode-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_unknown_backup_mode_desired must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-unknown-backup-mode-desired", rest_name="frr-unknown-backup-mode-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_unknown_backup_mode_desired = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_unknown_backup_mode_desired(self):
    self.__frr_unknown_backup_mode_desired = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-unknown-backup-mode-desired", rest_name="frr-unknown-backup-mode-desired", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_unknown_flags(self):
    """
    Getter method for frr_unknown_flags, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_unknown_flags (uint8)

    YANG Description: Unknown FRR flags
    """
    return self.__frr_unknown_flags
      
  def _set_frr_unknown_flags(self, v, load=False):
    """
    Setter method for frr_unknown_flags, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_unknown_flags (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_unknown_flags is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_unknown_flags() directly.

    YANG Description: Unknown FRR flags
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-unknown-flags", rest_name="frr-unknown-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_unknown_flags must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-unknown-flags", rest_name="frr-unknown-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__frr_unknown_flags = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_unknown_flags(self):
    self.__frr_unknown_flags = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-unknown-flags", rest_name="frr-unknown-flags", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_frr_psb_setup_priority(self):
    """
    Getter method for frr_psb_setup_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_psb_setup_priority (uint8)

    YANG Description: FRR PSB setup priority
    """
    return self.__frr_psb_setup_priority
      
  def _set_frr_psb_setup_priority(self, v, load=False):
    """
    Setter method for frr_psb_setup_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_psb_setup_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_psb_setup_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_psb_setup_priority() directly.

    YANG Description: FRR PSB setup priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-setup-priority", rest_name="frr-psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_psb_setup_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-setup-priority", rest_name="frr-psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__frr_psb_setup_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_psb_setup_priority(self):
    self.__frr_psb_setup_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-setup-priority", rest_name="frr-psb-setup-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_frr_psb_hold_priority(self):
    """
    Getter method for frr_psb_hold_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_psb_hold_priority (uint8)

    YANG Description: FRR PSB hold priority
    """
    return self.__frr_psb_hold_priority
      
  def _set_frr_psb_hold_priority(self, v, load=False):
    """
    Setter method for frr_psb_hold_priority, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_psb_hold_priority (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_psb_hold_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_psb_hold_priority() directly.

    YANG Description: FRR PSB hold priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-hold-priority", rest_name="frr-psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_psb_hold_priority must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-hold-priority", rest_name="frr-psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__frr_psb_hold_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_psb_hold_priority(self):
    self.__frr_psb_hold_priority = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-psb-hold-priority", rest_name="frr-psb-hold-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_frr_bandwidth(self):
    """
    Getter method for frr_bandwidth, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_bandwidth (uint32)

    YANG Description: FRR bandwidth
    """
    return self.__frr_bandwidth
      
  def _set_frr_bandwidth(self, v, load=False):
    """
    Setter method for frr_bandwidth, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_bandwidth (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_bandwidth is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_bandwidth() directly.

    YANG Description: FRR bandwidth
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-bandwidth", rest_name="frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_bandwidth must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-bandwidth", rest_name="frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__frr_bandwidth = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_bandwidth(self):
    self.__frr_bandwidth = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-bandwidth", rest_name="frr-bandwidth", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_frr_hoplimit(self):
    """
    Getter method for frr_hoplimit, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_hoplimit (uint8)

    YANG Description: FRR hoplimit
    """
    return self.__frr_hoplimit
      
  def _set_frr_hoplimit(self, v, load=False):
    """
    Setter method for frr_hoplimit, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_hoplimit (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_hoplimit is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_hoplimit() directly.

    YANG Description: FRR hoplimit
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-hoplimit", rest_name="frr-hoplimit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_hoplimit must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-hoplimit", rest_name="frr-hoplimit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)""",
        })

    self.__frr_hoplimit = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_hoplimit(self):
    self.__frr_hoplimit = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="frr-hoplimit", rest_name="frr-hoplimit", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint8', is_config=False)


  def _get_frr_method(self):
    """
    Getter method for frr_method, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_method (frr-method)

    YANG Description: Whether FRR use backup or detour LSPs
    """
    return self.__frr_method
      
  def _set_frr_method(self, v, load=False):
    """
    Setter method for frr_method, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_method (frr-method)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_method is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_method() directly.

    YANG Description: Whether FRR use backup or detour LSPs
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-method-backup': {'value': 0}, u'frr-method-detour': {'value': 1}},), is_leaf=True, yang_name="frr-method", rest_name="frr-method", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-method', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_method must be of a type compatible with frr-method""",
          'defined-type': "brocade-mpls-operational:frr-method",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-method-backup': {'value': 0}, u'frr-method-detour': {'value': 1}},), is_leaf=True, yang_name="frr-method", rest_name="frr-method", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-method', is_config=False)""",
        })

    self.__frr_method = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_method(self):
    self.__frr_method = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-method-backup': {'value': 0}, u'frr-method-detour': {'value': 1}},), is_leaf=True, yang_name="frr-method", rest_name="frr-method", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-method', is_config=False)


  def _get_frr_nh_node_protection_available(self):
    """
    Getter method for frr_nh_node_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_node_protection_available (boolean)

    YANG Description: FRR nexthop node protection avalable
    """
    return self.__frr_nh_node_protection_available
      
  def _set_frr_nh_node_protection_available(self, v, load=False):
    """
    Setter method for frr_nh_node_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_node_protection_available (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_nh_node_protection_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_nh_node_protection_available() directly.

    YANG Description: FRR nexthop node protection avalable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-available", rest_name="frr-nh-node-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_nh_node_protection_available must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-available", rest_name="frr-nh-node-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_nh_node_protection_available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_nh_node_protection_available(self):
    self.__frr_nh_node_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-available", rest_name="frr-nh-node-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_nh_node_protection_in_use(self):
    """
    Getter method for frr_nh_node_protection_in_use, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_node_protection_in_use (boolean)

    YANG Description: FRR nexthop node protection is in use
    """
    return self.__frr_nh_node_protection_in_use
      
  def _set_frr_nh_node_protection_in_use(self, v, load=False):
    """
    Setter method for frr_nh_node_protection_in_use, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_node_protection_in_use (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_nh_node_protection_in_use is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_nh_node_protection_in_use() directly.

    YANG Description: FRR nexthop node protection is in use
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-in-use", rest_name="frr-nh-node-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_nh_node_protection_in_use must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-in-use", rest_name="frr-nh-node-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_nh_node_protection_in_use = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_nh_node_protection_in_use(self):
    self.__frr_nh_node_protection_in_use = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-node-protection-in-use", rest_name="frr-nh-node-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_nh_link_protection_available(self):
    """
    Getter method for frr_nh_link_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_link_protection_available (boolean)

    YANG Description: FRR nexthop link protection avalable
    """
    return self.__frr_nh_link_protection_available
      
  def _set_frr_nh_link_protection_available(self, v, load=False):
    """
    Setter method for frr_nh_link_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_link_protection_available (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_nh_link_protection_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_nh_link_protection_available() directly.

    YANG Description: FRR nexthop link protection avalable
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-available", rest_name="frr-nh-link-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_nh_link_protection_available must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-available", rest_name="frr-nh-link-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_nh_link_protection_available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_nh_link_protection_available(self):
    self.__frr_nh_link_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-available", rest_name="frr-nh-link-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_nh_link_protection_in_use(self):
    """
    Getter method for frr_nh_link_protection_in_use, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_link_protection_in_use (boolean)

    YANG Description: FRR nexthop link protection is in use
    """
    return self.__frr_nh_link_protection_in_use
      
  def _set_frr_nh_link_protection_in_use(self, v, load=False):
    """
    Setter method for frr_nh_link_protection_in_use, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_nh_link_protection_in_use (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_nh_link_protection_in_use is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_nh_link_protection_in_use() directly.

    YANG Description: FRR nexthop link protection is in use
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-in-use", rest_name="frr-nh-link-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_nh_link_protection_in_use must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-in-use", rest_name="frr-nh-link-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_nh_link_protection_in_use = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_nh_link_protection_in_use(self):
    self.__frr_nh_link_protection_in_use = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-nh-link-protection-in-use", rest_name="frr-nh-link-protection-in-use", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_bandwidth_protection_available(self):
    """
    Getter method for frr_bandwidth_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_bandwidth_protection_available (boolean)

    YANG Description: FRR bandwidth protection available
    """
    return self.__frr_bandwidth_protection_available
      
  def _set_frr_bandwidth_protection_available(self, v, load=False):
    """
    Setter method for frr_bandwidth_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_bandwidth_protection_available (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_bandwidth_protection_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_bandwidth_protection_available() directly.

    YANG Description: FRR bandwidth protection available
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-bandwidth-protection-available", rest_name="frr-bandwidth-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_bandwidth_protection_available must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-bandwidth-protection-available", rest_name="frr-bandwidth-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_bandwidth_protection_available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_bandwidth_protection_available(self):
    self.__frr_bandwidth_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-bandwidth-protection-available", rest_name="frr-bandwidth-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_lsp_bringup_abandoned(self):
    """
    Getter method for frr_lsp_bringup_abandoned, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_lsp_bringup_abandoned (boolean)

    YANG Description: Not attempting to bring up FRR LSP (true).Otherwise (false) attempts have failed
    """
    return self.__frr_lsp_bringup_abandoned
      
  def _set_frr_lsp_bringup_abandoned(self, v, load=False):
    """
    Setter method for frr_lsp_bringup_abandoned, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_lsp_bringup_abandoned (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_lsp_bringup_abandoned is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_lsp_bringup_abandoned() directly.

    YANG Description: Not attempting to bring up FRR LSP (true).Otherwise (false) attempts have failed
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-lsp-bringup-abandoned", rest_name="frr-lsp-bringup-abandoned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_lsp_bringup_abandoned must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-lsp-bringup-abandoned", rest_name="frr-lsp-bringup-abandoned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_lsp_bringup_abandoned = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_lsp_bringup_abandoned(self):
    self.__frr_lsp_bringup_abandoned = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-lsp-bringup-abandoned", rest_name="frr-lsp-bringup-abandoned", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_updown_transitions(self):
    """
    Getter method for frr_updown_transitions, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_updown_transitions (uint32)

    YANG Description: FRR up and down transition count
    """
    return self.__frr_updown_transitions
      
  def _set_frr_updown_transitions(self, v, load=False):
    """
    Setter method for frr_updown_transitions, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_updown_transitions (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_updown_transitions is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_updown_transitions() directly.

    YANG Description: FRR up and down transition count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-updown-transitions", rest_name="frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_updown_transitions must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-updown-transitions", rest_name="frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__frr_updown_transitions = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_updown_transitions(self):
    self.__frr_updown_transitions = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-updown-transitions", rest_name="frr-updown-transitions", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_frr_retries(self):
    """
    Getter method for frr_retries, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_retries (uint32)

    YANG Description: FRR retries
    """
    return self.__frr_retries
      
  def _set_frr_retries(self, v, load=False):
    """
    Setter method for frr_retries, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_retries (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_retries is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_retries() directly.

    YANG Description: FRR retries
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-retries", rest_name="frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_retries must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-retries", rest_name="frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__frr_retries = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_retries(self):
    self.__frr_retries = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-retries", rest_name="frr-retries", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_frr_session_protection_available(self):
    """
    Getter method for frr_session_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_session_protection_available (boolean)

    YANG Description: Is FRR protection avalable for the session
    """
    return self.__frr_session_protection_available
      
  def _set_frr_session_protection_available(self, v, load=False):
    """
    Setter method for frr_session_protection_available, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_session_protection_available (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_session_protection_available is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_session_protection_available() directly.

    YANG Description: Is FRR protection avalable for the session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-session-protection-available", rest_name="frr-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_session_protection_available must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-session-protection-available", rest_name="frr-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_session_protection_available = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_session_protection_available(self):
    self.__frr_session_protection_available = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-session-protection-available", rest_name="frr-session-protection-available", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_frr_next_retry(self):
    """
    Getter method for frr_next_retry, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_next_retry (uint32)

    YANG Description: FRR next retry
    """
    return self.__frr_next_retry
      
  def _set_frr_next_retry(self, v, load=False):
    """
    Setter method for frr_next_retry, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_next_retry (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_next_retry is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_next_retry() directly.

    YANG Description: FRR next retry
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-next-retry", rest_name="frr-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_next_retry must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-next-retry", rest_name="frr-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__frr_next_retry = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_next_retry(self):
    self.__frr_next_retry = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-next-retry", rest_name="frr-next-retry", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_frr_cost(self):
    """
    Getter method for frr_cost, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_cost (uint32)

    YANG Description: FRR cost
    """
    return self.__frr_cost
      
  def _set_frr_cost(self, v, load=False):
    """
    Setter method for frr_cost, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_cost() directly.

    YANG Description: FRR cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-cost", rest_name="frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-cost", rest_name="frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__frr_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_cost(self):
    self.__frr_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="frr-cost", rest_name="frr-cost", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_frr_cspf_group_computation_mode(self):
    """
    Getter method for frr_cspf_group_computation_mode, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_cspf_group_computation_mode (frr-cspf-group-computation-mode)

    YANG Description: CSPF group computation mode
    """
    return self.__frr_cspf_group_computation_mode
      
  def _set_frr_cspf_group_computation_mode(self, v, load=False):
    """
    Setter method for frr_cspf_group_computation_mode, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_cspf_group_computation_mode (frr-cspf-group-computation-mode)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_cspf_group_computation_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_cspf_group_computation_mode() directly.

    YANG Description: CSPF group computation mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-cspf-group-comp-mode-add-penalty': {'value': 1}, u'frr-cspf-group-comp-mode-high-penalty': {'value': 3}, u'frr-cspf-group-comp-mode-exclude-groups': {'value': 2}, u'frr-cspf-group-comp-mode-disabled': {'value': 0}},), is_leaf=True, yang_name="frr-cspf-group-computation-mode", rest_name="frr-cspf-group-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-cspf-group-computation-mode', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_cspf_group_computation_mode must be of a type compatible with frr-cspf-group-computation-mode""",
          'defined-type': "brocade-mpls-operational:frr-cspf-group-computation-mode",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-cspf-group-comp-mode-add-penalty': {'value': 1}, u'frr-cspf-group-comp-mode-high-penalty': {'value': 3}, u'frr-cspf-group-comp-mode-exclude-groups': {'value': 2}, u'frr-cspf-group-comp-mode-disabled': {'value': 0}},), is_leaf=True, yang_name="frr-cspf-group-computation-mode", rest_name="frr-cspf-group-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-cspf-group-computation-mode', is_config=False)""",
        })

    self.__frr_cspf_group_computation_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_cspf_group_computation_mode(self):
    self.__frr_cspf_group_computation_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'frr-cspf-group-comp-mode-add-penalty': {'value': 1}, u'frr-cspf-group-comp-mode-high-penalty': {'value': 3}, u'frr-cspf-group-comp-mode-exclude-groups': {'value': 2}, u'frr-cspf-group-comp-mode-disabled': {'value': 0}},), is_leaf=True, yang_name="frr-cspf-group-computation-mode", rest_name="frr-cspf-group-computation-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='frr-cspf-group-computation-mode', is_config=False)


  def _get_frr_cspf_group_computation_mode_use_bypass_liberal(self):
    """
    Getter method for frr_cspf_group_computation_mode_use_bypass_liberal, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_cspf_group_computation_mode_use_bypass_liberal (boolean)

    YANG Description: Liberal use of bypasses in CSPF group computation
    """
    return self.__frr_cspf_group_computation_mode_use_bypass_liberal
      
  def _set_frr_cspf_group_computation_mode_use_bypass_liberal(self, v, load=False):
    """
    Setter method for frr_cspf_group_computation_mode_use_bypass_liberal, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/frr_cspf_group_computation_mode_use_bypass_liberal (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_frr_cspf_group_computation_mode_use_bypass_liberal is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_frr_cspf_group_computation_mode_use_bypass_liberal() directly.

    YANG Description: Liberal use of bypasses in CSPF group computation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="frr-cspf-group-computation-mode-use-bypass-liberal", rest_name="frr-cspf-group-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """frr_cspf_group_computation_mode_use_bypass_liberal must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-cspf-group-computation-mode-use-bypass-liberal", rest_name="frr-cspf-group-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__frr_cspf_group_computation_mode_use_bypass_liberal = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_frr_cspf_group_computation_mode_use_bypass_liberal(self):
    self.__frr_cspf_group_computation_mode_use_bypass_liberal = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="frr-cspf-group-computation-mode-use-bypass-liberal", rest_name="frr-cspf-group-computation-mode-use-bypass-liberal", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_downstream_backup_psb(self):
    """
    Getter method for is_downstream_backup_psb, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_downstream_backup_psb (boolean)

    YANG Description: Is downstream backup PSB
    """
    return self.__is_downstream_backup_psb
      
  def _set_is_downstream_backup_psb(self, v, load=False):
    """
    Setter method for is_downstream_backup_psb, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_downstream_backup_psb (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_downstream_backup_psb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_downstream_backup_psb() directly.

    YANG Description: Is downstream backup PSB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-downstream-backup-psb", rest_name="is-downstream-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_downstream_backup_psb must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-downstream-backup-psb", rest_name="is-downstream-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_downstream_backup_psb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_downstream_backup_psb(self):
    self.__is_downstream_backup_psb = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-downstream-backup-psb", rest_name="is-downstream-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_backup_psb(self):
    """
    Getter method for is_backup_psb, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_backup_psb (boolean)

    YANG Description: Is backup PSB
    """
    return self.__is_backup_psb
      
  def _set_is_backup_psb(self, v, load=False):
    """
    Setter method for is_backup_psb, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_backup_psb (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_backup_psb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_backup_psb() directly.

    YANG Description: Is backup PSB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-backup-psb", rest_name="is-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_backup_psb must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-backup-psb", rest_name="is-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_backup_psb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_backup_psb(self):
    self.__is_backup_psb = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-backup-psb", rest_name="is-backup-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_upstream_psb(self):
    """
    Getter method for is_upstream_psb, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_upstream_psb (boolean)

    YANG Description: Is upstream PSB
    """
    return self.__is_upstream_psb
      
  def _set_is_upstream_psb(self, v, load=False):
    """
    Setter method for is_upstream_psb, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_upstream_psb (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_upstream_psb is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_upstream_psb() directly.

    YANG Description: Is upstream PSB
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-upstream-psb", rest_name="is-upstream-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_upstream_psb must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-upstream-psb", rest_name="is-upstream-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_upstream_psb = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_upstream_psb(self):
    self.__is_upstream_psb = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-upstream-psb", rest_name="is-upstream-psb", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_ps_frr_detour_sent(self):
    """
    Getter method for is_ps_frr_detour_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_detour_sent (boolean)

    YANG Description: FRR detours sent
    """
    return self.__is_ps_frr_detour_sent
      
  def _set_is_ps_frr_detour_sent(self, v, load=False):
    """
    Setter method for is_ps_frr_detour_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_detour_sent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_ps_frr_detour_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_ps_frr_detour_sent() directly.

    YANG Description: FRR detours sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-sent", rest_name="is-ps-frr-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_ps_frr_detour_sent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-sent", rest_name="is-ps-frr-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_ps_frr_detour_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_ps_frr_detour_sent(self):
    self.__is_ps_frr_detour_sent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-sent", rest_name="is-ps-frr-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_ps_frr_backup_sent(self):
    """
    Getter method for is_ps_frr_backup_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_backup_sent (boolean)

    YANG Description: FRR backup sent
    """
    return self.__is_ps_frr_backup_sent
      
  def _set_is_ps_frr_backup_sent(self, v, load=False):
    """
    Setter method for is_ps_frr_backup_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_backup_sent (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_ps_frr_backup_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_ps_frr_backup_sent() directly.

    YANG Description: FRR backup sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-sent", rest_name="is-ps-frr-backup-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_ps_frr_backup_sent must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-sent", rest_name="is-ps-frr-backup-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_ps_frr_backup_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_ps_frr_backup_sent(self):
    self.__is_ps_frr_backup_sent = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-sent", rest_name="is-ps-frr-backup-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_ps_frr_detour_received(self):
    """
    Getter method for is_ps_frr_detour_received, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_detour_received (boolean)

    YANG Description: FRR detours received
    """
    return self.__is_ps_frr_detour_received
      
  def _set_is_ps_frr_detour_received(self, v, load=False):
    """
    Setter method for is_ps_frr_detour_received, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_detour_received (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_ps_frr_detour_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_ps_frr_detour_received() directly.

    YANG Description: FRR detours received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-received", rest_name="is-ps-frr-detour-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_ps_frr_detour_received must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-received", rest_name="is-ps-frr-detour-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_ps_frr_detour_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_ps_frr_detour_received(self):
    self.__is_ps_frr_detour_received = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-detour-received", rest_name="is-ps-frr-detour-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_is_ps_frr_backup_received(self):
    """
    Getter method for is_ps_frr_backup_received, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_backup_received (boolean)

    YANG Description: FRR backup received
    """
    return self.__is_ps_frr_backup_received
      
  def _set_is_ps_frr_backup_received(self, v, load=False):
    """
    Setter method for is_ps_frr_backup_received, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/is_ps_frr_backup_received (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_is_ps_frr_backup_received is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_is_ps_frr_backup_received() directly.

    YANG Description: FRR backup received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-received", rest_name="is-ps-frr-backup-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """is_ps_frr_backup_received must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-received", rest_name="is-ps-frr-backup-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__is_ps_frr_backup_received = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_is_ps_frr_backup_received(self):
    self.__is_ps_frr_backup_received = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="is-ps-frr-backup-received", rest_name="is-ps-frr-backup-received", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_path_received_from_ip(self):
    """
    Getter method for path_received_from_ip, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_from_ip (inet:ipv4-address)

    YANG Description: IP address from which the PATH message was received
    """
    return self.__path_received_from_ip
      
  def _set_path_received_from_ip(self, v, load=False):
    """
    Setter method for path_received_from_ip, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_from_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_received_from_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_received_from_ip() directly.

    YANG Description: IP address from which the PATH message was received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-received-from-ip", rest_name="path-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_received_from_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-received-from-ip", rest_name="path-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__path_received_from_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_received_from_ip(self):
    self.__path_received_from_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-received-from-ip", rest_name="path-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_path_received_interface(self):
    """
    Getter method for path_received_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_interface (string)

    YANG Description: Interface from which the PATH message was received
    """
    return self.__path_received_interface
      
  def _set_path_received_interface(self, v, load=False):
    """
    Setter method for path_received_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_received_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_received_interface() directly.

    YANG Description: Interface from which the PATH message was received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="path-received-interface", rest_name="path-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_received_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="path-received-interface", rest_name="path-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__path_received_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_received_interface(self):
    self.__path_received_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="path-received-interface", rest_name="path-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_path_received_auth_on(self):
    """
    Getter method for path_received_auth_on, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_auth_on (boolean)

    YANG Description: Whether authentication (MD5) was used in received PATH message
    """
    return self.__path_received_auth_on
      
  def _set_path_received_auth_on(self, v, load=False):
    """
    Setter method for path_received_auth_on, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_auth_on (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_received_auth_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_received_auth_on() directly.

    YANG Description: Whether authentication (MD5) was used in received PATH message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="path-received-auth-on", rest_name="path-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_received_auth_on must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-received-auth-on", rest_name="path-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__path_received_auth_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_received_auth_on(self):
    self.__path_received_auth_on = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-received-auth-on", rest_name="path-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_path_received_message_id(self):
    """
    Getter method for path_received_message_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_message_id (uint32)

    YANG Description: Message ID received in PATH message
    """
    return self.__path_received_message_id
      
  def _set_path_received_message_id(self, v, load=False):
    """
    Setter method for path_received_message_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_received_message_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_received_message_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_received_message_id() directly.

    YANG Description: Message ID received in PATH message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-received-message-id", rest_name="path-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_received_message_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-received-message-id", rest_name="path-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__path_received_message_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_received_message_id(self):
    self.__path_received_message_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-received-message-id", rest_name="path-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_path_downstream_only(self):
    """
    Getter method for path_downstream_only, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_downstream_only (boolean)

    YANG Description: Downstream only
    """
    return self.__path_downstream_only
      
  def _set_path_downstream_only(self, v, load=False):
    """
    Setter method for path_downstream_only, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_downstream_only (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_downstream_only is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_downstream_only() directly.

    YANG Description: Downstream only
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="path-downstream-only", rest_name="path-downstream-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_downstream_only must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-downstream-only", rest_name="path-downstream-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__path_downstream_only = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_downstream_only(self):
    self.__path_downstream_only = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-downstream-only", rest_name="path-downstream-only", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_path_sent_to_ip(self):
    """
    Getter method for path_sent_to_ip, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_to_ip (inet:ipv4-address)

    YANG Description: IP address from which the PATH message was sent
    """
    return self.__path_sent_to_ip
      
  def _set_path_sent_to_ip(self, v, load=False):
    """
    Setter method for path_sent_to_ip, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_to_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_sent_to_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_sent_to_ip() directly.

    YANG Description: IP address from which the PATH message was sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-sent-to-ip", rest_name="path-sent-to-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_sent_to_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-sent-to-ip", rest_name="path-sent-to-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__path_sent_to_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_sent_to_ip(self):
    self.__path_sent_to_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="path-sent-to-ip", rest_name="path-sent-to-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_path_sent_interface(self):
    """
    Getter method for path_sent_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_interface (string)

    YANG Description: Interface from which the PATH message was sent
    """
    return self.__path_sent_interface
      
  def _set_path_sent_interface(self, v, load=False):
    """
    Setter method for path_sent_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_sent_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_sent_interface() directly.

    YANG Description: Interface from which the PATH message was sent
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="path-sent-interface", rest_name="path-sent-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_sent_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="path-sent-interface", rest_name="path-sent-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__path_sent_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_sent_interface(self):
    self.__path_sent_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="path-sent-interface", rest_name="path-sent-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_path_sent_auth_on(self):
    """
    Getter method for path_sent_auth_on, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_auth_on (boolean)

    YANG Description: Whether authentication (MD5) was used in sent PATH message
    """
    return self.__path_sent_auth_on
      
  def _set_path_sent_auth_on(self, v, load=False):
    """
    Setter method for path_sent_auth_on, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_auth_on (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_sent_auth_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_sent_auth_on() directly.

    YANG Description: Whether authentication (MD5) was used in sent PATH message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="path-sent-auth-on", rest_name="path-sent-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_sent_auth_on must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-sent-auth-on", rest_name="path-sent-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__path_sent_auth_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_sent_auth_on(self):
    self.__path_sent_auth_on = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="path-sent-auth-on", rest_name="path-sent-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_path_sent_message_id(self):
    """
    Getter method for path_sent_message_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_message_id (uint32)

    YANG Description: Message ID sent in PATH message
    """
    return self.__path_sent_message_id
      
  def _set_path_sent_message_id(self, v, load=False):
    """
    Setter method for path_sent_message_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/path_sent_message_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_path_sent_message_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_path_sent_message_id() directly.

    YANG Description: Message ID sent in PATH message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-sent-message-id", rest_name="path-sent-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """path_sent_message_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-sent-message-id", rest_name="path-sent-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__path_sent_message_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_path_sent_message_id(self):
    self.__path_sent_message_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="path-sent-message-id", rest_name="path-sent-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_resv_received_from_ip(self):
    """
    Getter method for resv_received_from_ip, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_from_ip (inet:ipv4-address)

    YANG Description: IP address from which the RESV message was received
    """
    return self.__resv_received_from_ip
      
  def _set_resv_received_from_ip(self, v, load=False):
    """
    Setter method for resv_received_from_ip, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_from_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_received_from_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_received_from_ip() directly.

    YANG Description: IP address from which the RESV message was received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="resv-received-from-ip", rest_name="resv-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_received_from_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="resv-received-from-ip", rest_name="resv-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__resv_received_from_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_received_from_ip(self):
    self.__resv_received_from_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="resv-received-from-ip", rest_name="resv-received-from-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_resv_received_interface(self):
    """
    Getter method for resv_received_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_interface (string)

    YANG Description: Interface from which the RESV message was received
    """
    return self.__resv_received_interface
      
  def _set_resv_received_interface(self, v, load=False):
    """
    Setter method for resv_received_interface, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_interface (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_received_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_received_interface() directly.

    YANG Description: Interface from which the RESV message was received
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="resv-received-interface", rest_name="resv-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_received_interface must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="resv-received-interface", rest_name="resv-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__resv_received_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_received_interface(self):
    self.__resv_received_interface = YANGDynClass(base=unicode, is_leaf=True, yang_name="resv-received-interface", rest_name="resv-received-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_resv_received_auth_on(self):
    """
    Getter method for resv_received_auth_on, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_auth_on (boolean)

    YANG Description: Whether authentication (MD5) was used in received RESV message
    """
    return self.__resv_received_auth_on
      
  def _set_resv_received_auth_on(self, v, load=False):
    """
    Setter method for resv_received_auth_on, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_auth_on (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_received_auth_on is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_received_auth_on() directly.

    YANG Description: Whether authentication (MD5) was used in received RESV message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="resv-received-auth-on", rest_name="resv-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_received_auth_on must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="resv-received-auth-on", rest_name="resv-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)""",
        })

    self.__resv_received_auth_on = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_received_auth_on(self):
    self.__resv_received_auth_on = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="resv-received-auth-on", rest_name="resv-received-auth-on", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='boolean', is_config=False)


  def _get_resv_received_message_id(self):
    """
    Getter method for resv_received_message_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_message_id (uint32)

    YANG Description: Message ID received in RESV message
    """
    return self.__resv_received_message_id
      
  def _set_resv_received_message_id(self, v, load=False):
    """
    Setter method for resv_received_message_id, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/resv_received_message_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_resv_received_message_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_resv_received_message_id() directly.

    YANG Description: Message ID received in RESV message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-received-message-id", rest_name="resv-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """resv_received_message_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-received-message-id", rest_name="resv-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__resv_received_message_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_resv_received_message_id(self):
    self.__resv_received_message_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="resv-received-message-id", rest_name="resv-received-message-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_session_riding_bypass_name(self):
    """
    Getter method for session_riding_bypass_name, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_riding_bypass_name (string)

    YANG Description: Bypass LSP protecting this session
    """
    return self.__session_riding_bypass_name
      
  def _set_session_riding_bypass_name(self, v, load=False):
    """
    Setter method for session_riding_bypass_name, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_riding_bypass_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_riding_bypass_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_riding_bypass_name() directly.

    YANG Description: Bypass LSP protecting this session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="session-riding-bypass-name", rest_name="session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_riding_bypass_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="session-riding-bypass-name", rest_name="session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)""",
        })

    self.__session_riding_bypass_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_riding_bypass_name(self):
    self.__session_riding_bypass_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="session-riding-bypass-name", rest_name="session-riding-bypass-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='string', is_config=False)


  def _get_session_style(self):
    """
    Getter method for session_style, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_style (session-reservation-style)

    YANG Description: Style of session
    """
    return self.__session_style
      
  def _set_session_style(self, v, load=False):
    """
    Setter method for session_style, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_style (session-reservation-style)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_style is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_style() directly.

    YANG Description: Style of session
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reservation-style-shared-explicit': {'value': 2}, u'reservation-style-wildcard-filter': {'value': 0}, u'reservation-style-unknown': {'value': 3}, u'reservation-style-fixed-filter': {'value': 1}},), is_leaf=True, yang_name="session-style", rest_name="session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-reservation-style', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_style must be of a type compatible with session-reservation-style""",
          'defined-type': "brocade-mpls-operational:session-reservation-style",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reservation-style-shared-explicit': {'value': 2}, u'reservation-style-wildcard-filter': {'value': 0}, u'reservation-style-unknown': {'value': 3}, u'reservation-style-fixed-filter': {'value': 1}},), is_leaf=True, yang_name="session-style", rest_name="session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-reservation-style', is_config=False)""",
        })

    self.__session_style = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_style(self):
    self.__session_style = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'reservation-style-shared-explicit': {'value': 2}, u'reservation-style-wildcard-filter': {'value': 0}, u'reservation-style-unknown': {'value': 3}, u'reservation-style-fixed-filter': {'value': 1}},), is_leaf=True, yang_name="session-style", rest_name="session-style", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='session-reservation-style', is_config=False)


  def _get_points_of_local_repair_detour_rcvd(self):
    """
    Getter method for points_of_local_repair_detour_rcvd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/points_of_local_repair_detour_rcvd (inet:ipv4-address)

    YANG Description: Points of local repair on received path message
    """
    return self.__points_of_local_repair_detour_rcvd
      
  def _set_points_of_local_repair_detour_rcvd(self, v, load=False):
    """
    Setter method for points_of_local_repair_detour_rcvd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/points_of_local_repair_detour_rcvd (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_points_of_local_repair_detour_rcvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_points_of_local_repair_detour_rcvd() directly.

    YANG Description: Points of local repair on received path message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-rcvd", rest_name="points-of-local-repair-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """points_of_local_repair_detour_rcvd must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-rcvd", rest_name="points-of-local-repair-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__points_of_local_repair_detour_rcvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_points_of_local_repair_detour_rcvd(self):
    self.__points_of_local_repair_detour_rcvd = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-rcvd", rest_name="points-of-local-repair-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_avoid_nodes_detour_rcvd(self):
    """
    Getter method for avoid_nodes_detour_rcvd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/avoid_nodes_detour_rcvd (inet:ipv4-address)

    YANG Description: Avoid nodes on received path message
    """
    return self.__avoid_nodes_detour_rcvd
      
  def _set_avoid_nodes_detour_rcvd(self, v, load=False):
    """
    Setter method for avoid_nodes_detour_rcvd, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/avoid_nodes_detour_rcvd (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avoid_nodes_detour_rcvd is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avoid_nodes_detour_rcvd() directly.

    YANG Description: Avoid nodes on received path message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-rcvd", rest_name="avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avoid_nodes_detour_rcvd must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-rcvd", rest_name="avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__avoid_nodes_detour_rcvd = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avoid_nodes_detour_rcvd(self):
    self.__avoid_nodes_detour_rcvd = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-rcvd", rest_name="avoid-nodes-detour-rcvd", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_points_of_local_repair_detour_sent(self):
    """
    Getter method for points_of_local_repair_detour_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/points_of_local_repair_detour_sent (inet:ipv4-address)

    YANG Description: Points of local repair on sent path message
    """
    return self.__points_of_local_repair_detour_sent
      
  def _set_points_of_local_repair_detour_sent(self, v, load=False):
    """
    Setter method for points_of_local_repair_detour_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/points_of_local_repair_detour_sent (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_points_of_local_repair_detour_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_points_of_local_repair_detour_sent() directly.

    YANG Description: Points of local repair on sent path message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-sent", rest_name="points-of-local-repair-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """points_of_local_repair_detour_sent must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-sent", rest_name="points-of-local-repair-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__points_of_local_repair_detour_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_points_of_local_repair_detour_sent(self):
    self.__points_of_local_repair_detour_sent = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="points-of-local-repair-detour-sent", rest_name="points-of-local-repair-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_avoid_nodes_detour_sent(self):
    """
    Getter method for avoid_nodes_detour_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/avoid_nodes_detour_sent (inet:ipv4-address)

    YANG Description: Avoid nodes on sent path message
    """
    return self.__avoid_nodes_detour_sent
      
  def _set_avoid_nodes_detour_sent(self, v, load=False):
    """
    Setter method for avoid_nodes_detour_sent, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/avoid_nodes_detour_sent (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avoid_nodes_detour_sent is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avoid_nodes_detour_sent() directly.

    YANG Description: Avoid nodes on sent path message
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-sent", rest_name="avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avoid_nodes_detour_sent must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-sent", rest_name="avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)""",
        })

    self.__avoid_nodes_detour_sent = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avoid_nodes_detour_sent(self):
    self.__avoid_nodes_detour_sent = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'})), is_leaf=False, yang_name="avoid-nodes-detour-sent", rest_name="avoid-nodes-detour-sent", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='inet:ipv4-address', is_config=False)


  def _get_session_ero_hops(self):
    """
    Getter method for session_ero_hops, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_ero_hops (list)

    YANG Description: MPLS RSVP explicit route object hop
    """
    return self.__session_ero_hops
      
  def _set_session_ero_hops(self, v, load=False):
    """
    Setter method for session_ero_hops, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_ero_hops (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_ero_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_ero_hops() directly.

    YANG Description: MPLS RSVP explicit route object hop
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ip_addr",session_ero_hops.session_ero_hops, yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_ero_hops must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_addr",session_ero_hops.session_ero_hops, yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__session_ero_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_ero_hops(self):
    self.__session_ero_hops = YANGDynClass(base=YANGListType("ip_addr",session_ero_hops.session_ero_hops, yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-ero-hops", rest_name="session-ero-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-ero-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_session_rro_hops(self):
    """
    Getter method for session_rro_hops, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops (list)

    YANG Description: MPLS RSVP record route object hop
    """
    return self.__session_rro_hops
      
  def _set_session_rro_hops(self, v, load=False):
    """
    Setter method for session_rro_hops, mapped from YANG variable /mpls_state/rsvp/sessions/psbs/session_rro_hops (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_rro_hops is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_rro_hops() directly.

    YANG Description: MPLS RSVP record route object hop
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("ip_addr",session_rro_hops.session_rro_hops, yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_rro_hops must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("ip_addr",session_rro_hops.session_rro_hops, yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__session_rro_hops = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_rro_hops(self):
    self.__session_rro_hops = YANGDynClass(base=YANGListType("ip_addr",session_rro_hops.session_rro_hops, yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='ip-addr', extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}), is_container='list', yang_name="session-rro-hops", rest_name="session-rro-hops", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-rsvp-rro-hop', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  path_index = __builtin__.property(_get_path_index)
  session_name = __builtin__.property(_get_session_name)
  session_type = __builtin__.property(_get_session_type)
  path_operational_status = __builtin__.property(_get_path_operational_status)
  session_in_label = __builtin__.property(_get_session_in_label)
  session_out_label = __builtin__.property(_get_session_out_label)
  session_out_interface = __builtin__.property(_get_session_out_interface)
  lsp_id = __builtin__.property(_get_lsp_id)
  flap_lock = __builtin__.property(_get_flap_lock)
  path_refresh = __builtin__.property(_get_path_refresh)
  path_refresh_ttd = __builtin__.property(_get_path_refresh_ttd)
  resv_refresh = __builtin__.property(_get_resv_refresh)
  resv_refresh_ttd = __builtin__.property(_get_resv_refresh_ttd)
  tspec_peak = __builtin__.property(_get_tspec_peak)
  tspec_rate = __builtin__.property(_get_tspec_rate)
  tspec_size = __builtin__.property(_get_tspec_size)
  tspec_minimum = __builtin__.property(_get_tspec_minimum)
  tspec_m = __builtin__.property(_get_tspec_m)
  psb_setup_priority = __builtin__.property(_get_psb_setup_priority)
  psb_hold_priority = __builtin__.property(_get_psb_hold_priority)
  session_attribute_all_flags = __builtin__.property(_get_session_attribute_all_flags)
  sa_flag_label_recording = __builtin__.property(_get_sa_flag_label_recording)
  sa_flag_soft_preemption_desired = __builtin__.property(_get_sa_flag_soft_preemption_desired)
  sa_flag_se_style = __builtin__.property(_get_sa_flag_se_style)
  sa_flag_local_protect = __builtin__.property(_get_sa_flag_local_protect)
  sa_flag_bandwidth_protect = __builtin__.property(_get_sa_flag_bandwidth_protect)
  sa_flag_session_protection_type = __builtin__.property(_get_sa_flag_session_protection_type)
  session_soft_preemption_wait_timer = __builtin__.property(_get_session_soft_preemption_wait_timer)
  session_preemption_wait_timer = __builtin__.property(_get_session_preemption_wait_timer)
  frr_detour = __builtin__.property(_get_frr_detour)
  frr_facility = __builtin__.property(_get_frr_facility)
  frr_unknown_backup_mode_desired = __builtin__.property(_get_frr_unknown_backup_mode_desired)
  frr_unknown_flags = __builtin__.property(_get_frr_unknown_flags)
  frr_psb_setup_priority = __builtin__.property(_get_frr_psb_setup_priority)
  frr_psb_hold_priority = __builtin__.property(_get_frr_psb_hold_priority)
  frr_bandwidth = __builtin__.property(_get_frr_bandwidth)
  frr_hoplimit = __builtin__.property(_get_frr_hoplimit)
  frr_method = __builtin__.property(_get_frr_method)
  frr_nh_node_protection_available = __builtin__.property(_get_frr_nh_node_protection_available)
  frr_nh_node_protection_in_use = __builtin__.property(_get_frr_nh_node_protection_in_use)
  frr_nh_link_protection_available = __builtin__.property(_get_frr_nh_link_protection_available)
  frr_nh_link_protection_in_use = __builtin__.property(_get_frr_nh_link_protection_in_use)
  frr_bandwidth_protection_available = __builtin__.property(_get_frr_bandwidth_protection_available)
  frr_lsp_bringup_abandoned = __builtin__.property(_get_frr_lsp_bringup_abandoned)
  frr_updown_transitions = __builtin__.property(_get_frr_updown_transitions)
  frr_retries = __builtin__.property(_get_frr_retries)
  frr_session_protection_available = __builtin__.property(_get_frr_session_protection_available)
  frr_next_retry = __builtin__.property(_get_frr_next_retry)
  frr_cost = __builtin__.property(_get_frr_cost)
  frr_cspf_group_computation_mode = __builtin__.property(_get_frr_cspf_group_computation_mode)
  frr_cspf_group_computation_mode_use_bypass_liberal = __builtin__.property(_get_frr_cspf_group_computation_mode_use_bypass_liberal)
  is_downstream_backup_psb = __builtin__.property(_get_is_downstream_backup_psb)
  is_backup_psb = __builtin__.property(_get_is_backup_psb)
  is_upstream_psb = __builtin__.property(_get_is_upstream_psb)
  is_ps_frr_detour_sent = __builtin__.property(_get_is_ps_frr_detour_sent)
  is_ps_frr_backup_sent = __builtin__.property(_get_is_ps_frr_backup_sent)
  is_ps_frr_detour_received = __builtin__.property(_get_is_ps_frr_detour_received)
  is_ps_frr_backup_received = __builtin__.property(_get_is_ps_frr_backup_received)
  path_received_from_ip = __builtin__.property(_get_path_received_from_ip)
  path_received_interface = __builtin__.property(_get_path_received_interface)
  path_received_auth_on = __builtin__.property(_get_path_received_auth_on)
  path_received_message_id = __builtin__.property(_get_path_received_message_id)
  path_downstream_only = __builtin__.property(_get_path_downstream_only)
  path_sent_to_ip = __builtin__.property(_get_path_sent_to_ip)
  path_sent_interface = __builtin__.property(_get_path_sent_interface)
  path_sent_auth_on = __builtin__.property(_get_path_sent_auth_on)
  path_sent_message_id = __builtin__.property(_get_path_sent_message_id)
  resv_received_from_ip = __builtin__.property(_get_resv_received_from_ip)
  resv_received_interface = __builtin__.property(_get_resv_received_interface)
  resv_received_auth_on = __builtin__.property(_get_resv_received_auth_on)
  resv_received_message_id = __builtin__.property(_get_resv_received_message_id)
  session_riding_bypass_name = __builtin__.property(_get_session_riding_bypass_name)
  session_style = __builtin__.property(_get_session_style)
  points_of_local_repair_detour_rcvd = __builtin__.property(_get_points_of_local_repair_detour_rcvd)
  avoid_nodes_detour_rcvd = __builtin__.property(_get_avoid_nodes_detour_rcvd)
  points_of_local_repair_detour_sent = __builtin__.property(_get_points_of_local_repair_detour_sent)
  avoid_nodes_detour_sent = __builtin__.property(_get_avoid_nodes_detour_sent)
  session_ero_hops = __builtin__.property(_get_session_ero_hops)
  session_rro_hops = __builtin__.property(_get_session_rro_hops)


  _pyangbind_elements = {'path_index': path_index, 'session_name': session_name, 'session_type': session_type, 'path_operational_status': path_operational_status, 'session_in_label': session_in_label, 'session_out_label': session_out_label, 'session_out_interface': session_out_interface, 'lsp_id': lsp_id, 'flap_lock': flap_lock, 'path_refresh': path_refresh, 'path_refresh_ttd': path_refresh_ttd, 'resv_refresh': resv_refresh, 'resv_refresh_ttd': resv_refresh_ttd, 'tspec_peak': tspec_peak, 'tspec_rate': tspec_rate, 'tspec_size': tspec_size, 'tspec_minimum': tspec_minimum, 'tspec_m': tspec_m, 'psb_setup_priority': psb_setup_priority, 'psb_hold_priority': psb_hold_priority, 'session_attribute_all_flags': session_attribute_all_flags, 'sa_flag_label_recording': sa_flag_label_recording, 'sa_flag_soft_preemption_desired': sa_flag_soft_preemption_desired, 'sa_flag_se_style': sa_flag_se_style, 'sa_flag_local_protect': sa_flag_local_protect, 'sa_flag_bandwidth_protect': sa_flag_bandwidth_protect, 'sa_flag_session_protection_type': sa_flag_session_protection_type, 'session_soft_preemption_wait_timer': session_soft_preemption_wait_timer, 'session_preemption_wait_timer': session_preemption_wait_timer, 'frr_detour': frr_detour, 'frr_facility': frr_facility, 'frr_unknown_backup_mode_desired': frr_unknown_backup_mode_desired, 'frr_unknown_flags': frr_unknown_flags, 'frr_psb_setup_priority': frr_psb_setup_priority, 'frr_psb_hold_priority': frr_psb_hold_priority, 'frr_bandwidth': frr_bandwidth, 'frr_hoplimit': frr_hoplimit, 'frr_method': frr_method, 'frr_nh_node_protection_available': frr_nh_node_protection_available, 'frr_nh_node_protection_in_use': frr_nh_node_protection_in_use, 'frr_nh_link_protection_available': frr_nh_link_protection_available, 'frr_nh_link_protection_in_use': frr_nh_link_protection_in_use, 'frr_bandwidth_protection_available': frr_bandwidth_protection_available, 'frr_lsp_bringup_abandoned': frr_lsp_bringup_abandoned, 'frr_updown_transitions': frr_updown_transitions, 'frr_retries': frr_retries, 'frr_session_protection_available': frr_session_protection_available, 'frr_next_retry': frr_next_retry, 'frr_cost': frr_cost, 'frr_cspf_group_computation_mode': frr_cspf_group_computation_mode, 'frr_cspf_group_computation_mode_use_bypass_liberal': frr_cspf_group_computation_mode_use_bypass_liberal, 'is_downstream_backup_psb': is_downstream_backup_psb, 'is_backup_psb': is_backup_psb, 'is_upstream_psb': is_upstream_psb, 'is_ps_frr_detour_sent': is_ps_frr_detour_sent, 'is_ps_frr_backup_sent': is_ps_frr_backup_sent, 'is_ps_frr_detour_received': is_ps_frr_detour_received, 'is_ps_frr_backup_received': is_ps_frr_backup_received, 'path_received_from_ip': path_received_from_ip, 'path_received_interface': path_received_interface, 'path_received_auth_on': path_received_auth_on, 'path_received_message_id': path_received_message_id, 'path_downstream_only': path_downstream_only, 'path_sent_to_ip': path_sent_to_ip, 'path_sent_interface': path_sent_interface, 'path_sent_auth_on': path_sent_auth_on, 'path_sent_message_id': path_sent_message_id, 'resv_received_from_ip': resv_received_from_ip, 'resv_received_interface': resv_received_interface, 'resv_received_auth_on': resv_received_auth_on, 'resv_received_message_id': resv_received_message_id, 'session_riding_bypass_name': session_riding_bypass_name, 'session_style': session_style, 'points_of_local_repair_detour_rcvd': points_of_local_repair_detour_rcvd, 'avoid_nodes_detour_rcvd': avoid_nodes_detour_rcvd, 'points_of_local_repair_detour_sent': points_of_local_repair_detour_sent, 'avoid_nodes_detour_sent': avoid_nodes_detour_sent, 'session_ero_hops': session_ero_hops, 'session_rro_hops': session_rro_hops, }


