
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import pools
import stats
class memory(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/memory. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS memory information
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__total_non_pool_memory','__pools','__stats',)

  _yang_name = 'memory'
  _rest_name = 'memory'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__pools = YANGDynClass(base=YANGListType("pool_index",pools.pools, yang_name="pools", rest_name="pools", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pools", rest_name="pools", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    self.__total_non_pool_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-non-pool-memory", rest_name="total-non-pool-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    self.__stats = YANGDynClass(base=YANGListType("mem_stats_index",stats.stats, yang_name="stats", rest_name="stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mem-stats-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="stats", rest_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'memory']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'memory']

  def _get_total_non_pool_memory(self):
    """
    Getter method for total_non_pool_memory, mapped from YANG variable /mpls_state/memory/total_non_pool_memory (uint32)

    YANG Description: Total non pool memory
    """
    return self.__total_non_pool_memory
      
  def _set_total_non_pool_memory(self, v, load=False):
    """
    Setter method for total_non_pool_memory, mapped from YANG variable /mpls_state/memory/total_non_pool_memory (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_non_pool_memory is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_non_pool_memory() directly.

    YANG Description: Total non pool memory
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-non-pool-memory", rest_name="total-non-pool-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_non_pool_memory must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-non-pool-memory", rest_name="total-non-pool-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__total_non_pool_memory = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_non_pool_memory(self):
    self.__total_non_pool_memory = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="total-non-pool-memory", rest_name="total-non-pool-memory", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_pools(self):
    """
    Getter method for pools, mapped from YANG variable /mpls_state/memory/pools (list)

    YANG Description: Memory pools
    """
    return self.__pools
      
  def _set_pools(self, v, load=False):
    """
    Setter method for pools, mapped from YANG variable /mpls_state/memory/pools (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pools is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pools() directly.

    YANG Description: Memory pools
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("pool_index",pools.pools, yang_name="pools", rest_name="pools", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pools", rest_name="pools", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pools must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("pool_index",pools.pools, yang_name="pools", rest_name="pools", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pools", rest_name="pools", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__pools = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pools(self):
    self.__pools = YANGDynClass(base=YANGListType("pool_index",pools.pools, yang_name="pools", rest_name="pools", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='pool-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}), is_container='list', yang_name="pools", rest_name="pools", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-pools', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)


  def _get_stats(self):
    """
    Getter method for stats, mapped from YANG variable /mpls_state/memory/stats (list)

    YANG Description: 1
    """
    return self.__stats
      
  def _set_stats(self, v, load=False):
    """
    Setter method for stats, mapped from YANG variable /mpls_state/memory/stats (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stats is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stats() directly.

    YANG Description: 1
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("mem_stats_index",stats.stats, yang_name="stats", rest_name="stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mem-stats-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="stats", rest_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stats must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mem_stats_index",stats.stats, yang_name="stats", rest_name="stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mem-stats-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="stats", rest_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)""",
        })

    self.__stats = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stats(self):
    self.__stats = YANGDynClass(base=YANGListType("mem_stats_index",stats.stats, yang_name="stats", rest_name="stats", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mem-stats-index', extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}), is_container='list', yang_name="stats", rest_name="stats", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'mpls-mem-stats', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='list', is_config=False)

  total_non_pool_memory = __builtin__.property(_get_total_non_pool_memory)
  pools = __builtin__.property(_get_pools)
  stats = __builtin__.property(_get_stats)


  _pyangbind_elements = {'total_non_pool_memory': total_non_pool_memory, 'pools': pools, 'stats': stats, }


