
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class dynamic_bypass_global(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-mpls-operational - based on the path /mpls-state/dynamic-bypass/dynamic-bypass-global. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: MPLS dynamic bypass
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__config_enable','__config_enable_all','__reoptimize_timer','__max_bypasses_per_mp','__max_bypasses','__bypass_count',)

  _yang_name = 'dynamic-bypass-global'
  _rest_name = 'dynamic-bypass-global'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__config_enable_all = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable-all", rest_name="config-enable-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__config_enable = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable", rest_name="config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__bypass_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bypass-count", rest_name="bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    self.__reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'mpls-state', u'dynamic-bypass', u'dynamic-bypass-global']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'mpls-state', u'dynamic-bypass', u'dynamic-bypass-global']

  def _get_config_enable(self):
    """
    Getter method for config_enable, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/config_enable (uint16)

    YANG Description: Dynamic bypass enabled
    """
    return self.__config_enable
      
  def _set_config_enable(self, v, load=False):
    """
    Setter method for config_enable, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/config_enable (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_enable() directly.

    YANG Description: Dynamic bypass enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable", rest_name="config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_enable must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable", rest_name="config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__config_enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_enable(self):
    self.__config_enable = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable", rest_name="config-enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)


  def _get_config_enable_all(self):
    """
    Getter method for config_enable_all, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/config_enable_all (uint16)

    YANG Description: Dynamic bypass all interfaces enabled
    """
    return self.__config_enable_all
      
  def _set_config_enable_all(self, v, load=False):
    """
    Setter method for config_enable_all, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/config_enable_all (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_enable_all is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_enable_all() directly.

    YANG Description: Dynamic bypass all interfaces enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable-all", rest_name="config-enable-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_enable_all must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable-all", rest_name="config-enable-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__config_enable_all = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_enable_all(self):
    self.__config_enable_all = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="config-enable-all", rest_name="config-enable-all", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)


  def _get_reoptimize_timer(self):
    """
    Getter method for reoptimize_timer, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/reoptimize_timer (uint32)

    YANG Description: Reoptimize timer
    """
    return self.__reoptimize_timer
      
  def _set_reoptimize_timer(self, v, load=False):
    """
    Setter method for reoptimize_timer, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/reoptimize_timer (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_reoptimize_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_reoptimize_timer() directly.

    YANG Description: Reoptimize timer
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """reoptimize_timer must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)""",
        })

    self.__reoptimize_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_reoptimize_timer(self):
    self.__reoptimize_timer = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="reoptimize-timer", rest_name="reoptimize-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint32', is_config=False)


  def _get_max_bypasses_per_mp(self):
    """
    Getter method for max_bypasses_per_mp, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/max_bypasses_per_mp (uint16)

    YANG Description: Max dynamic bypasses per merge point
    """
    return self.__max_bypasses_per_mp
      
  def _set_max_bypasses_per_mp(self, v, load=False):
    """
    Setter method for max_bypasses_per_mp, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/max_bypasses_per_mp (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_bypasses_per_mp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_bypasses_per_mp() directly.

    YANG Description: Max dynamic bypasses per merge point
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_bypasses_per_mp must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__max_bypasses_per_mp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_bypasses_per_mp(self):
    self.__max_bypasses_per_mp = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses-per-mp", rest_name="max-bypasses-per-mp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)


  def _get_max_bypasses(self):
    """
    Getter method for max_bypasses, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/max_bypasses (uint16)

    YANG Description: Max bypasses
    """
    return self.__max_bypasses
      
  def _set_max_bypasses(self, v, load=False):
    """
    Setter method for max_bypasses, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/max_bypasses (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_bypasses is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_bypasses() directly.

    YANG Description: Max bypasses
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_bypasses must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__max_bypasses = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_bypasses(self):
    self.__max_bypasses = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="max-bypasses", rest_name="max-bypasses", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)


  def _get_bypass_count(self):
    """
    Getter method for bypass_count, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/bypass_count (uint16)

    YANG Description: Bypass count
    """
    return self.__bypass_count
      
  def _set_bypass_count(self, v, load=False):
    """
    Setter method for bypass_count, mapped from YANG variable /mpls_state/dynamic_bypass/dynamic_bypass_global/bypass_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bypass_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bypass_count() directly.

    YANG Description: Bypass count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bypass-count", rest_name="bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bypass_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bypass-count", rest_name="bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)""",
        })

    self.__bypass_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bypass_count(self):
    self.__bypass_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="bypass-count", rest_name="bypass-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-mpls-operational', defining_module='brocade-mpls-operational', yang_type='uint16', is_config=False)

  config_enable = __builtin__.property(_get_config_enable)
  config_enable_all = __builtin__.property(_get_config_enable_all)
  reoptimize_timer = __builtin__.property(_get_reoptimize_timer)
  max_bypasses_per_mp = __builtin__.property(_get_max_bypasses_per_mp)
  max_bypasses = __builtin__.property(_get_max_bypasses)
  bypass_count = __builtin__.property(_get_bypass_count)


  _pyangbind_elements = {'config_enable': config_enable, 'config_enable_all': config_enable_all, 'reoptimize_timer': reoptimize_timer, 'max_bypasses_per_mp': max_bypasses_per_mp, 'max_bypasses': max_bypasses, 'bypass_count': bypass_count, }


