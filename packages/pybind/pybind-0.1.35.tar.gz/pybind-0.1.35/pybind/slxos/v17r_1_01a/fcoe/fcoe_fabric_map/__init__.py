
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import fcoe_fip_advertisement
import fcoe_fip_keep_alive
import fcoe_fcf_map
import fcoe_fcport_group_config
class fcoe_fabric_map(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fcoe - based on the path /fcoe/fcoe-fabric-map. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of FCoE fabric map parameters.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__fcoe_fabric_map_name','__fcoe_fabric_map_vlan','__fcoe_fabric_mode','__fcoe_fabric_map_priority','__fcoe_fabric_map_virtual_fabric','__fcoe_fabric_map_fcmap','__fcoe_fip_advertisement','__fcoe_fip_keep_alive','__fcoe_fcf_map','__fcoe_fcport_group_config',)

  _yang_name = 'fcoe-fabric-map'
  _rest_name = 'fabric-map'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__fcoe_fabric_map_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-fabric-map-vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the VLAN for the FCoE Fabric-map', u'alt-name': u'vlan', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vlan-type', is_config=True)
    self.__fcoe_fabric_map_virtual_fabric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-fabric-map-virtual-fabric", rest_name="virtual-fabric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the Virtual-Fabric ID for the FCoE \nFabric-map', u'alt-name': u'virtual-fabric'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vfid-type', is_config=True)
    self.__fcoe_fabric_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'local|remote', 'length': [u'1..32']}), is_leaf=True, yang_name="fcoe-fabric-mode", rest_name="san-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the san mode', u'alt-name': u'san-mode', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-mode-type', is_config=True)
    self.__fcoe_fabric_map_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'0..6']}), is_leaf=True, yang_name="fcoe-fabric-map-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the priority for the FCoE Fabric-map', u'alt-name': u'priority'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-priority-type', is_config=True)
    self.__fcoe_fabric_map_fcmap = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0][Ee]:[Ff][Cc]:[0-9a-fA-F]{2}', 'length': [u'1..9']}), is_leaf=True, yang_name="fcoe-fabric-map-fcmap", rest_name="fcmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the FCMAP value for a FCoE Fabric-map', u'alt-name': u'fcmap', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fcmap-type', is_config=True)
    self.__fcoe_fcport_group_config = YANGDynClass(base=fcoe_fcport_group_config.fcoe_fcport_group_config, is_container='container', presence=False, yang_name="fcoe-fcport-group-config", rest_name="fcport-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure fcport-group parameters for the fabric-map', u'alt-name': u'fcport-group', u'cli-suppress-no': None, u'cli-add-mode': None, u'cli-full-command': None, u'callpoint': u'fcoe_fabric_map_cp', u'cli-mode-name': u'config-fabric-map-fcport-group-$(fcoe-fabric-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    self.__fcoe_fip_advertisement = YANGDynClass(base=fcoe_fip_advertisement.fcoe_fip_advertisement, is_container='container', presence=False, yang_name="fcoe-fip-advertisement", rest_name="advertisement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure the FIP Advertisement interval', u'alt-name': u'advertisement', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    self.__fcoe_fabric_map_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..31']}), is_leaf=True, yang_name="fcoe-fabric-map-name", rest_name="fcoe-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'FCoE Fabric-map name (Max Size - 31)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-map-name-type', is_config=True)
    self.__fcoe_fip_keep_alive = YANGDynClass(base=fcoe_fip_keep_alive.fcoe_fip_keep_alive, is_container='container', presence=False, yang_name="fcoe-fip-keep-alive", rest_name="keep-alive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the keep-alive timeout', u'alt-name': u'keep-alive', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    self.__fcoe_fcf_map = YANGDynClass(base=YANGListType("fcf_map_name",fcoe_fcf_map.fcoe_fcf_map, yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcf-map-name', extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}), is_container='list', yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'fcoe', u'fcoe-fabric-map']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'fcoe', u'fabric-map']

  def _get_fcoe_fabric_map_name(self):
    """
    Getter method for fcoe_fabric_map_name, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_name (fcoe-fabric-map-name-type)

    YANG Description: This specifies the name for the FCoE fabric map.
    """
    return self.__fcoe_fabric_map_name
      
  def _set_fcoe_fabric_map_name(self, v, load=False):
    """
    Setter method for fcoe_fabric_map_name, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_name (fcoe-fabric-map-name-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fabric_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fabric_map_name() directly.

    YANG Description: This specifies the name for the FCoE fabric map.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..31']}), is_leaf=True, yang_name="fcoe-fabric-map-name", rest_name="fcoe-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'FCoE Fabric-map name (Max Size - 31)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-map-name-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fabric_map_name must be of a type compatible with fcoe-fabric-map-name-type""",
          'defined-type': "brocade-fcoe:fcoe-fabric-map-name-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..31']}), is_leaf=True, yang_name="fcoe-fabric-map-name", rest_name="fcoe-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'FCoE Fabric-map name (Max Size - 31)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-map-name-type', is_config=True)""",
        })

    self.__fcoe_fabric_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fabric_map_name(self):
    self.__fcoe_fabric_map_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..31']}), is_leaf=True, yang_name="fcoe-fabric-map-name", rest_name="fcoe-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'FCoE Fabric-map name (Max Size - 31)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-map-name-type', is_config=True)


  def _get_fcoe_fabric_map_vlan(self):
    """
    Getter method for fcoe_fabric_map_vlan, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_vlan (fcoe-vlan-type)

    YANG Description: This specifies the VLAN for the FCoE Fabric Map.
    """
    return self.__fcoe_fabric_map_vlan
      
  def _set_fcoe_fabric_map_vlan(self, v, load=False):
    """
    Setter method for fcoe_fabric_map_vlan, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_vlan (fcoe-vlan-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fabric_map_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fabric_map_vlan() directly.

    YANG Description: This specifies the VLAN for the FCoE Fabric Map.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-fabric-map-vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the VLAN for the FCoE Fabric-map', u'alt-name': u'vlan', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vlan-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fabric_map_vlan must be of a type compatible with fcoe-vlan-type""",
          'defined-type': "brocade-fcoe:fcoe-vlan-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-fabric-map-vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the VLAN for the FCoE Fabric-map', u'alt-name': u'vlan', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vlan-type', is_config=True)""",
        })

    self.__fcoe_fabric_map_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fabric_map_vlan(self):
    self.__fcoe_fabric_map_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-fabric-map-vlan", rest_name="vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the VLAN for the FCoE Fabric-map', u'alt-name': u'vlan', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vlan-type', is_config=True)


  def _get_fcoe_fabric_mode(self):
    """
    Getter method for fcoe_fabric_mode, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_mode (fcoe-fabric-mode-type)

    YANG Description: This specifies the san mode.
    """
    return self.__fcoe_fabric_mode
      
  def _set_fcoe_fabric_mode(self, v, load=False):
    """
    Setter method for fcoe_fabric_mode, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_mode (fcoe-fabric-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fabric_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fabric_mode() directly.

    YANG Description: This specifies the san mode.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'local|remote', 'length': [u'1..32']}), is_leaf=True, yang_name="fcoe-fabric-mode", rest_name="san-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the san mode', u'alt-name': u'san-mode', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fabric_mode must be of a type compatible with fcoe-fabric-mode-type""",
          'defined-type': "brocade-fcoe:fcoe-fabric-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'local|remote', 'length': [u'1..32']}), is_leaf=True, yang_name="fcoe-fabric-mode", rest_name="san-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the san mode', u'alt-name': u'san-mode', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-mode-type', is_config=True)""",
        })

    self.__fcoe_fabric_mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fabric_mode(self):
    self.__fcoe_fabric_mode = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'local|remote', 'length': [u'1..32']}), is_leaf=True, yang_name="fcoe-fabric-mode", rest_name="san-mode", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the san mode', u'alt-name': u'san-mode', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fabric-mode-type', is_config=True)


  def _get_fcoe_fabric_map_priority(self):
    """
    Getter method for fcoe_fabric_map_priority, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_priority (fcoe-priority-type)

    YANG Description: This specifies the priority for the FCoE
Fabric-map.
    """
    return self.__fcoe_fabric_map_priority
      
  def _set_fcoe_fabric_map_priority(self, v, load=False):
    """
    Setter method for fcoe_fabric_map_priority, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_priority (fcoe-priority-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fabric_map_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fabric_map_priority() directly.

    YANG Description: This specifies the priority for the FCoE
Fabric-map.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'0..6']}), is_leaf=True, yang_name="fcoe-fabric-map-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the priority for the FCoE Fabric-map', u'alt-name': u'priority'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-priority-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fabric_map_priority must be of a type compatible with fcoe-priority-type""",
          'defined-type': "brocade-fcoe:fcoe-priority-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'0..6']}), is_leaf=True, yang_name="fcoe-fabric-map-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the priority for the FCoE Fabric-map', u'alt-name': u'priority'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-priority-type', is_config=True)""",
        })

    self.__fcoe_fabric_map_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fabric_map_priority(self):
    self.__fcoe_fabric_map_priority = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'0..6']}), is_leaf=True, yang_name="fcoe-fabric-map-priority", rest_name="priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the priority for the FCoE Fabric-map', u'alt-name': u'priority'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-priority-type', is_config=True)


  def _get_fcoe_fabric_map_virtual_fabric(self):
    """
    Getter method for fcoe_fabric_map_virtual_fabric, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_virtual_fabric (fcoe-vfid-type)

    YANG Description: This specifies the Virtual Fabric ID for the 
Fabric-map.
    """
    return self.__fcoe_fabric_map_virtual_fabric
      
  def _set_fcoe_fabric_map_virtual_fabric(self, v, load=False):
    """
    Setter method for fcoe_fabric_map_virtual_fabric, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_virtual_fabric (fcoe-vfid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fabric_map_virtual_fabric is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fabric_map_virtual_fabric() directly.

    YANG Description: This specifies the Virtual Fabric ID for the 
Fabric-map.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-fabric-map-virtual-fabric", rest_name="virtual-fabric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the Virtual-Fabric ID for the FCoE \nFabric-map', u'alt-name': u'virtual-fabric'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vfid-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fabric_map_virtual_fabric must be of a type compatible with fcoe-vfid-type""",
          'defined-type': "brocade-fcoe:fcoe-vfid-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-fabric-map-virtual-fabric", rest_name="virtual-fabric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the Virtual-Fabric ID for the FCoE \nFabric-map', u'alt-name': u'virtual-fabric'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vfid-type', is_config=True)""",
        })

    self.__fcoe_fabric_map_virtual_fabric = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fabric_map_virtual_fabric(self):
    self.__fcoe_fabric_map_virtual_fabric = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-fabric-map-virtual-fabric", rest_name="virtual-fabric", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the Virtual-Fabric ID for the FCoE \nFabric-map', u'alt-name': u'virtual-fabric'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-vfid-type', is_config=True)


  def _get_fcoe_fabric_map_fcmap(self):
    """
    Getter method for fcoe_fabric_map_fcmap, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_fcmap (fcoe-fcmap-type)

    YANG Description: This specifies the FCMAP value for a FCoE
Fabric-map.
    """
    return self.__fcoe_fabric_map_fcmap
      
  def _set_fcoe_fabric_map_fcmap(self, v, load=False):
    """
    Setter method for fcoe_fabric_map_fcmap, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fabric_map_fcmap (fcoe-fcmap-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fabric_map_fcmap is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fabric_map_fcmap() directly.

    YANG Description: This specifies the FCMAP value for a FCoE
Fabric-map.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0][Ee]:[Ff][Cc]:[0-9a-fA-F]{2}', 'length': [u'1..9']}), is_leaf=True, yang_name="fcoe-fabric-map-fcmap", rest_name="fcmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the FCMAP value for a FCoE Fabric-map', u'alt-name': u'fcmap', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fcmap-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fabric_map_fcmap must be of a type compatible with fcoe-fcmap-type""",
          'defined-type': "brocade-fcoe:fcoe-fcmap-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0][Ee]:[Ff][Cc]:[0-9a-fA-F]{2}', 'length': [u'1..9']}), is_leaf=True, yang_name="fcoe-fabric-map-fcmap", rest_name="fcmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the FCMAP value for a FCoE Fabric-map', u'alt-name': u'fcmap', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fcmap-type', is_config=True)""",
        })

    self.__fcoe_fabric_map_fcmap = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fabric_map_fcmap(self):
    self.__fcoe_fabric_map_fcmap = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0][Ee]:[Ff][Cc]:[0-9a-fA-F]{2}', 'length': [u'1..9']}), is_leaf=True, yang_name="fcoe-fabric-map-fcmap", rest_name="fcmap", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Configure the FCMAP value for a FCoE Fabric-map', u'alt-name': u'fcmap', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='fcoe-fcmap-type', is_config=True)


  def _get_fcoe_fip_advertisement(self):
    """
    Getter method for fcoe_fip_advertisement, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fip_advertisement (container)

    YANG Description: This provides the grouping of all FIP configuration
elements.
    """
    return self.__fcoe_fip_advertisement
      
  def _set_fcoe_fip_advertisement(self, v, load=False):
    """
    Setter method for fcoe_fip_advertisement, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fip_advertisement (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fip_advertisement is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fip_advertisement() directly.

    YANG Description: This provides the grouping of all FIP configuration
elements.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fcoe_fip_advertisement.fcoe_fip_advertisement, is_container='container', presence=False, yang_name="fcoe-fip-advertisement", rest_name="advertisement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure the FIP Advertisement interval', u'alt-name': u'advertisement', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fip_advertisement must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fcoe_fip_advertisement.fcoe_fip_advertisement, is_container='container', presence=False, yang_name="fcoe-fip-advertisement", rest_name="advertisement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure the FIP Advertisement interval', u'alt-name': u'advertisement', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)""",
        })

    self.__fcoe_fip_advertisement = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fip_advertisement(self):
    self.__fcoe_fip_advertisement = YANGDynClass(base=fcoe_fip_advertisement.fcoe_fip_advertisement, is_container='container', presence=False, yang_name="fcoe-fip-advertisement", rest_name="advertisement", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure the FIP Advertisement interval', u'alt-name': u'advertisement', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)


  def _get_fcoe_fip_keep_alive(self):
    """
    Getter method for fcoe_fip_keep_alive, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fip_keep_alive (container)

    YANG Description: This provides the grouping of FCoE keep alive
configuration elements.
    """
    return self.__fcoe_fip_keep_alive
      
  def _set_fcoe_fip_keep_alive(self, v, load=False):
    """
    Setter method for fcoe_fip_keep_alive, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fip_keep_alive (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fip_keep_alive is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fip_keep_alive() directly.

    YANG Description: This provides the grouping of FCoE keep alive
configuration elements.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fcoe_fip_keep_alive.fcoe_fip_keep_alive, is_container='container', presence=False, yang_name="fcoe-fip-keep-alive", rest_name="keep-alive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the keep-alive timeout', u'alt-name': u'keep-alive', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fip_keep_alive must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fcoe_fip_keep_alive.fcoe_fip_keep_alive, is_container='container', presence=False, yang_name="fcoe-fip-keep-alive", rest_name="keep-alive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the keep-alive timeout', u'alt-name': u'keep-alive', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)""",
        })

    self.__fcoe_fip_keep_alive = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fip_keep_alive(self):
    self.__fcoe_fip_keep_alive = YANGDynClass(base=fcoe_fip_keep_alive.fcoe_fip_keep_alive, is_container='container', presence=False, yang_name="fcoe-fip-keep-alive", rest_name="keep-alive", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the keep-alive timeout', u'alt-name': u'keep-alive', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)


  def _get_fcoe_fcf_map(self):
    """
    Getter method for fcoe_fcf_map, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fcf_map (list)

    YANG Description: The list of FCF Groups. Each row contains the FCF group
name, member FCoE map, FCF rbid and FDF rbids
    """
    return self.__fcoe_fcf_map
      
  def _set_fcoe_fcf_map(self, v, load=False):
    """
    Setter method for fcoe_fcf_map, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fcf_map (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fcf_map is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fcf_map() directly.

    YANG Description: The list of FCF Groups. Each row contains the FCF group
name, member FCoE map, FCF rbid and FDF rbids
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("fcf_map_name",fcoe_fcf_map.fcoe_fcf_map, yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcf-map-name', extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}), is_container='list', yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fcf_map must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("fcf_map_name",fcoe_fcf_map.fcoe_fcf_map, yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcf-map-name', extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}), is_container='list', yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)""",
        })

    self.__fcoe_fcf_map = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fcf_map(self):
    self.__fcoe_fcf_map = YANGDynClass(base=YANGListType("fcf_map_name",fcoe_fcf_map.fcoe_fcf_map, yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcf-map-name', extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}), is_container='list', yang_name="fcoe-fcf-map", rest_name="fcf-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'fcf_map_cp', u'cli-suppress-list-no': None, u'alt-name': u'fcf-group', u'info': u'Configure an FCF Group', u'cli-mode-name': u'config-fabric-map-fcf-group-$(fcf-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)


  def _get_fcoe_fcport_group_config(self):
    """
    Getter method for fcoe_fcport_group_config, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fcport_group_config (container)

    YANG Description: This specifies the fcport-group parameters for the fabric-map
    """
    return self.__fcoe_fcport_group_config
      
  def _set_fcoe_fcport_group_config(self, v, load=False):
    """
    Setter method for fcoe_fcport_group_config, mapped from YANG variable /fcoe/fcoe_fabric_map/fcoe_fcport_group_config (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_fcport_group_config is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_fcport_group_config() directly.

    YANG Description: This specifies the fcport-group parameters for the fabric-map
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fcoe_fcport_group_config.fcoe_fcport_group_config, is_container='container', presence=False, yang_name="fcoe-fcport-group-config", rest_name="fcport-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure fcport-group parameters for the fabric-map', u'alt-name': u'fcport-group', u'cli-suppress-no': None, u'cli-add-mode': None, u'cli-full-command': None, u'callpoint': u'fcoe_fabric_map_cp', u'cli-mode-name': u'config-fabric-map-fcport-group-$(fcoe-fabric-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_fcport_group_config must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fcoe_fcport_group_config.fcoe_fcport_group_config, is_container='container', presence=False, yang_name="fcoe-fcport-group-config", rest_name="fcport-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure fcport-group parameters for the fabric-map', u'alt-name': u'fcport-group', u'cli-suppress-no': None, u'cli-add-mode': None, u'cli-full-command': None, u'callpoint': u'fcoe_fabric_map_cp', u'cli-mode-name': u'config-fabric-map-fcport-group-$(fcoe-fabric-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)""",
        })

    self.__fcoe_fcport_group_config = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_fcport_group_config(self):
    self.__fcoe_fcport_group_config = YANGDynClass(base=fcoe_fcport_group_config.fcoe_fcport_group_config, is_container='container', presence=False, yang_name="fcoe-fcport-group-config", rest_name="fcport-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure fcport-group parameters for the fabric-map', u'alt-name': u'fcport-group', u'cli-suppress-no': None, u'cli-add-mode': None, u'cli-full-command': None, u'callpoint': u'fcoe_fabric_map_cp', u'cli-mode-name': u'config-fabric-map-fcport-group-$(fcoe-fabric-map-name)'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)

  fcoe_fabric_map_name = __builtin__.property(_get_fcoe_fabric_map_name, _set_fcoe_fabric_map_name)
  fcoe_fabric_map_vlan = __builtin__.property(_get_fcoe_fabric_map_vlan, _set_fcoe_fabric_map_vlan)
  fcoe_fabric_mode = __builtin__.property(_get_fcoe_fabric_mode, _set_fcoe_fabric_mode)
  fcoe_fabric_map_priority = __builtin__.property(_get_fcoe_fabric_map_priority, _set_fcoe_fabric_map_priority)
  fcoe_fabric_map_virtual_fabric = __builtin__.property(_get_fcoe_fabric_map_virtual_fabric, _set_fcoe_fabric_map_virtual_fabric)
  fcoe_fabric_map_fcmap = __builtin__.property(_get_fcoe_fabric_map_fcmap, _set_fcoe_fabric_map_fcmap)
  fcoe_fip_advertisement = __builtin__.property(_get_fcoe_fip_advertisement, _set_fcoe_fip_advertisement)
  fcoe_fip_keep_alive = __builtin__.property(_get_fcoe_fip_keep_alive, _set_fcoe_fip_keep_alive)
  fcoe_fcf_map = __builtin__.property(_get_fcoe_fcf_map, _set_fcoe_fcf_map)
  fcoe_fcport_group_config = __builtin__.property(_get_fcoe_fcport_group_config, _set_fcoe_fcport_group_config)


  _pyangbind_elements = {'fcoe_fabric_map_name': fcoe_fabric_map_name, 'fcoe_fabric_map_vlan': fcoe_fabric_map_vlan, 'fcoe_fabric_mode': fcoe_fabric_mode, 'fcoe_fabric_map_priority': fcoe_fabric_map_priority, 'fcoe_fabric_map_virtual_fabric': fcoe_fabric_map_virtual_fabric, 'fcoe_fabric_map_fcmap': fcoe_fabric_map_fcmap, 'fcoe_fip_advertisement': fcoe_fip_advertisement, 'fcoe_fip_keep_alive': fcoe_fip_keep_alive, 'fcoe_fcf_map': fcoe_fcf_map, 'fcoe_fcport_group_config': fcoe_fcport_group_config, }


