
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fcoe-ext - based on the path /brocade_fcoe_ext_rpc/fcoe-get-login/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__fcoe_login_interface','__fcoe_login_vfid','__fcoe_login_vlan','__fcoe_login_rbridge_id',)

  _yang_name = 'input'
  _rest_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__fcoe_login_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-login-vlan", rest_name="fcoe-login-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vlan-type', is_config=True)
    self.__fcoe_login_rbridge_id = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'all'}),], is_leaf=True, yang_name="fcoe-login-rbridge-id", rest_name="fcoe-login-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:rbridge-id-all-type', is_config=True)
    self.__fcoe_login_vfid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-login-vfid", rest_name="fcoe-login-vfid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vfid-type', is_config=True)
    self.__fcoe_login_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-interface", rest_name="fcoe-login-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_fcoe_ext_rpc', u'fcoe-get-login', u'input']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'fcoe-get-login', u'input']

  def _get_fcoe_login_interface(self):
    """
    Getter method for fcoe_login_interface, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_interface (fcoe:interface-fcoe-type)

    YANG Description: This specifies the fcoe interface for which this 
rpc function is invoked. In response to this 
request, the managed device returns the list of all
FCoE devices that have logged in on this 
interface.
    """
    return self.__fcoe_login_interface
      
  def _set_fcoe_login_interface(self, v, load=False):
    """
    Setter method for fcoe_login_interface, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_interface (fcoe:interface-fcoe-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_interface is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_interface() directly.

    YANG Description: This specifies the fcoe interface for which this 
rpc function is invoked. In response to this 
request, the managed device returns the list of all
FCoE devices that have logged in on this 
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-interface", rest_name="fcoe-login-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_interface must be of a type compatible with fcoe:interface-fcoe-type""",
          'defined-type': "fcoe:interface-fcoe-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-interface", rest_name="fcoe-login-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)""",
        })

    self.__fcoe_login_interface = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_interface(self):
    self.__fcoe_login_interface = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-interface", rest_name="fcoe-login-interface", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)


  def _get_fcoe_login_vfid(self):
    """
    Getter method for fcoe_login_vfid, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_vfid (fcoe:fcoe-vfid-type)

    YANG Description: This specifies the virtual fabric id for which 
this rpc function is invoked. In response to this 
request, the managed device returns a list of all
FCoE devices that have logged in to this virtual
fabric.
    """
    return self.__fcoe_login_vfid
      
  def _set_fcoe_login_vfid(self, v, load=False):
    """
    Setter method for fcoe_login_vfid, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_vfid (fcoe:fcoe-vfid-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_vfid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_vfid() directly.

    YANG Description: This specifies the virtual fabric id for which 
this rpc function is invoked. In response to this 
request, the managed device returns a list of all
FCoE devices that have logged in to this virtual
fabric.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-login-vfid", rest_name="fcoe-login-vfid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vfid-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_vfid must be of a type compatible with fcoe:fcoe-vfid-type""",
          'defined-type': "fcoe:fcoe-vfid-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-login-vfid", rest_name="fcoe-login-vfid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vfid-type', is_config=True)""",
        })

    self.__fcoe_login_vfid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_vfid(self):
    self.__fcoe_login_vfid = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1..4096']}), is_leaf=True, yang_name="fcoe-login-vfid", rest_name="fcoe-login-vfid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vfid-type', is_config=True)


  def _get_fcoe_login_vlan(self):
    """
    Getter method for fcoe_login_vlan, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_vlan (fcoe:fcoe-vlan-type)

    YANG Description: This specifies the vlan id for which this rpc
function is invoked. In response to this request, 
the managed device returns the list of all FCoE 
devices that have logged in on this vlan.
    """
    return self.__fcoe_login_vlan
      
  def _set_fcoe_login_vlan(self, v, load=False):
    """
    Setter method for fcoe_login_vlan, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_vlan (fcoe:fcoe-vlan-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_vlan is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_vlan() directly.

    YANG Description: This specifies the vlan id for which this rpc
function is invoked. In response to this request, 
the managed device returns the list of all FCoE 
devices that have logged in on this vlan.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-login-vlan", rest_name="fcoe-login-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vlan-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_vlan must be of a type compatible with fcoe:fcoe-vlan-type""",
          'defined-type': "fcoe:fcoe-vlan-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-login-vlan", rest_name="fcoe-login-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vlan-type', is_config=True)""",
        })

    self.__fcoe_login_vlan = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_vlan(self):
    self.__fcoe_login_vlan = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'2..4090']}), is_leaf=True, yang_name="fcoe-login-vlan", rest_name="fcoe-login-vlan", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:fcoe-vlan-type', is_config=True)


  def _get_fcoe_login_rbridge_id(self):
    """
    Getter method for fcoe_login_rbridge_id, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_rbridge_id (common-def:rbridge-id-all-type)

    YANG Description: This specifies the rbridge-id for which this rpc 
function is invoked. In response to this request, 
the managed device returns a list of all FCoE 
devices that have logged in to given rbridge or 
all rbridges if rbridge-id value is 'all'
    """
    return self.__fcoe_login_rbridge_id
      
  def _set_fcoe_login_rbridge_id(self, v, load=False):
    """
    Setter method for fcoe_login_rbridge_id, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/input/fcoe_login_rbridge_id (common-def:rbridge-id-all-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_rbridge_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_rbridge_id() directly.

    YANG Description: This specifies the rbridge-id for which this rpc 
function is invoked. In response to this request, 
the managed device returns a list of all FCoE 
devices that have logged in to given rbridge or 
all rbridges if rbridge-id value is 'all'
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'all'}),], is_leaf=True, yang_name="fcoe-login-rbridge-id", rest_name="fcoe-login-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:rbridge-id-all-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_rbridge_id must be of a type compatible with common-def:rbridge-id-all-type""",
          'defined-type': "common-def:rbridge-id-all-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'all'}),], is_leaf=True, yang_name="fcoe-login-rbridge-id", rest_name="fcoe-login-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:rbridge-id-all-type', is_config=True)""",
        })

    self.__fcoe_login_rbridge_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_rbridge_id(self):
    self.__fcoe_login_rbridge_id = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'all'}),], is_leaf=True, yang_name="fcoe-login-rbridge-id", rest_name="fcoe-login-rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:rbridge-id-all-type', is_config=True)

  fcoe_login_interface = __builtin__.property(_get_fcoe_login_interface, _set_fcoe_login_interface)
  fcoe_login_vfid = __builtin__.property(_get_fcoe_login_vfid, _set_fcoe_login_vfid)
  fcoe_login_vlan = __builtin__.property(_get_fcoe_login_vlan, _set_fcoe_login_vlan)
  fcoe_login_rbridge_id = __builtin__.property(_get_fcoe_login_rbridge_id, _set_fcoe_login_rbridge_id)


  _pyangbind_elements = {'fcoe_login_interface': fcoe_login_interface, 'fcoe_login_vfid': fcoe_login_vfid, 'fcoe_login_vlan': fcoe_login_vlan, 'fcoe_login_rbridge_id': fcoe_login_rbridge_id, }


