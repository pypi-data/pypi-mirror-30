
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class slm_session_detail(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag-operational - based on the path /cfm-state/slm/slm-session-detail. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed display of SLM configuration
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__type','__status','__domain_name','__ma_name','__src_mep','__tgt_mep','__cos','__start_time','__stop_time','__test_profile_name','__start_type','__stop_type','__tx_interval','__tx_frame_count','__meas_interval','__session_index','__fwd_avg','__fwd_max','__bwd_avg','__bwd_max',)

  _yang_name = 'slm-session-detail'
  _rest_name = 'slm-session-detail'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="status", rest_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)
    self.__tgt_mep = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tgt-mep", rest_name="tgt-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)
    self.__tx_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__start_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="start-type", rest_name="start-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)
    self.__bwd_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-max", rest_name="bwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__ma_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__tx_frame_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", rest_name="domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__meas_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="meas-interval", rest_name="meas-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__bwd_avg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-avg", rest_name="bwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__src_mep = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="src-mep", rest_name="src-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    self.__fwd_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-max", rest_name="fwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__stop_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="stop-time", rest_name="stop-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__stop_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="stop-type", rest_name="stop-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)
    self.__session_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__type = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)
    self.__test_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__fwd_avg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-avg", rest_name="fwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cfm-state', u'slm', u'slm-session-detail']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cfm-state', u'slm', u'slm-session-detail']

  def _get_type(self):
    """
    Getter method for type, mapped from YANG variable /cfm_state/slm/slm_session_detail/type (boolean)

    YANG Description: session type
    """
    return self.__type
      
  def _set_type(self, v, load=False):
    """
    Setter method for type, mapped from YANG variable /cfm_state/slm/slm_session_detail/type (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_type() directly.

    YANG Description: session type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """type must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)""",
        })

    self.__type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_type(self):
    self.__type = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="type", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)


  def _get_status(self):
    """
    Getter method for status, mapped from YANG variable /cfm_state/slm/slm_session_detail/status (boolean)

    YANG Description: session status
    """
    return self.__status
      
  def _set_status(self, v, load=False):
    """
    Setter method for status, mapped from YANG variable /cfm_state/slm/slm_session_detail/status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_status() directly.

    YANG Description: session status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="status", rest_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="status", rest_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)""",
        })

    self.__status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_status(self):
    self.__status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="status", rest_name="status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='boolean', is_config=False)


  def _get_domain_name(self):
    """
    Getter method for domain_name, mapped from YANG variable /cfm_state/slm/slm_session_detail/domain_name (string)

    YANG Description: domain name
    """
    return self.__domain_name
      
  def _set_domain_name(self, v, load=False):
    """
    Setter method for domain_name, mapped from YANG variable /cfm_state/slm/slm_session_detail/domain_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_domain_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_domain_name() directly.

    YANG Description: domain name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="domain-name", rest_name="domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """domain_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", rest_name="domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__domain_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_domain_name(self):
    self.__domain_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="domain-name", rest_name="domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_ma_name(self):
    """
    Getter method for ma_name, mapped from YANG variable /cfm_state/slm/slm_session_detail/ma_name (string)

    YANG Description: service name
    """
    return self.__ma_name
      
  def _set_ma_name(self, v, load=False):
    """
    Setter method for ma_name, mapped from YANG variable /cfm_state/slm/slm_session_detail/ma_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ma_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ma_name() directly.

    YANG Description: service name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ma_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__ma_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ma_name(self):
    self.__ma_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="ma-name", rest_name="ma-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_src_mep(self):
    """
    Getter method for src_mep, mapped from YANG variable /cfm_state/slm/slm_session_detail/src_mep (uint16)

    YANG Description: source mep
    """
    return self.__src_mep
      
  def _set_src_mep(self, v, load=False):
    """
    Setter method for src_mep, mapped from YANG variable /cfm_state/slm/slm_session_detail/src_mep (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_mep is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_mep() directly.

    YANG Description: source mep
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="src-mep", rest_name="src-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_mep must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="src-mep", rest_name="src-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__src_mep = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_mep(self):
    self.__src_mep = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="src-mep", rest_name="src-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_tgt_mep(self):
    """
    Getter method for tgt_mep, mapped from YANG variable /cfm_state/slm/slm_session_detail/tgt_mep (uint16)

    YANG Description: target mep
    """
    return self.__tgt_mep
      
  def _set_tgt_mep(self, v, load=False):
    """
    Setter method for tgt_mep, mapped from YANG variable /cfm_state/slm/slm_session_detail/tgt_mep (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tgt_mep is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tgt_mep() directly.

    YANG Description: target mep
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tgt-mep", rest_name="tgt-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tgt_mep must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tgt-mep", rest_name="tgt-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__tgt_mep = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tgt_mep(self):
    self.__tgt_mep = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tgt-mep", rest_name="tgt-mep", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_cos(self):
    """
    Getter method for cos, mapped from YANG variable /cfm_state/slm/slm_session_detail/cos (uint8)

    YANG Description: cos value
    """
    return self.__cos
      
  def _set_cos(self, v, load=False):
    """
    Setter method for cos, mapped from YANG variable /cfm_state/slm/slm_session_detail/cos (uint8)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cos is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cos() directly.

    YANG Description: cos value
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cos must be of a type compatible with uint8""",
          'defined-type': "uint8",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)""",
        })

    self.__cos = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cos(self):
    self.__cos = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..255']}, int_size=8), is_leaf=True, yang_name="cos", rest_name="cos", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint8', is_config=False)


  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /cfm_state/slm/slm_session_detail/start_time (string)

    YANG Description: Start time
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /cfm_state/slm/slm_session_detail/start_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: Start time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_stop_time(self):
    """
    Getter method for stop_time, mapped from YANG variable /cfm_state/slm/slm_session_detail/stop_time (string)

    YANG Description: Stop time
    """
    return self.__stop_time
      
  def _set_stop_time(self, v, load=False):
    """
    Setter method for stop_time, mapped from YANG variable /cfm_state/slm/slm_session_detail/stop_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stop_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stop_time() directly.

    YANG Description: Stop time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="stop-time", rest_name="stop-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stop_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="stop-time", rest_name="stop-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__stop_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stop_time(self):
    self.__stop_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="stop-time", rest_name="stop-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_test_profile_name(self):
    """
    Getter method for test_profile_name, mapped from YANG variable /cfm_state/slm/slm_session_detail/test_profile_name (string)

    YANG Description: Test Profile name
    """
    return self.__test_profile_name
      
  def _set_test_profile_name(self, v, load=False):
    """
    Setter method for test_profile_name, mapped from YANG variable /cfm_state/slm/slm_session_detail/test_profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test_profile_name() directly.

    YANG Description: Test Profile name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test_profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__test_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test_profile_name(self):
    self.__test_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_start_type(self):
    """
    Getter method for start_type, mapped from YANG variable /cfm_state/slm/slm_session_detail/start_type (start-stop-type)

    YANG Description: Start type
    """
    return self.__start_type
      
  def _set_start_type(self, v, load=False):
    """
    Setter method for start_type, mapped from YANG variable /cfm_state/slm/slm_session_detail/start_type (start-stop-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_type() directly.

    YANG Description: Start type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="start-type", rest_name="start-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_type must be of a type compatible with start-stop-type""",
          'defined-type': "brocade-dot1ag-operational:start-stop-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="start-type", rest_name="start-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)""",
        })

    self.__start_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_type(self):
    self.__start_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="start-type", rest_name="start-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)


  def _get_stop_type(self):
    """
    Getter method for stop_type, mapped from YANG variable /cfm_state/slm/slm_session_detail/stop_type (start-stop-type)

    YANG Description: Stop type
    """
    return self.__stop_type
      
  def _set_stop_type(self, v, load=False):
    """
    Setter method for stop_type, mapped from YANG variable /cfm_state/slm/slm_session_detail/stop_type (start-stop-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_stop_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_stop_type() directly.

    YANG Description: Stop type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="stop-type", rest_name="stop-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """stop_type must be of a type compatible with start-stop-type""",
          'defined-type': "brocade-dot1ag-operational:start-stop-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="stop-type", rest_name="stop-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)""",
        })

    self.__stop_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_stop_type(self):
    self.__stop_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'fixed': {'value': 1}, u'after': {'value': 2}, u'periodic': {'value': 3}},), is_leaf=True, yang_name="stop-type", rest_name="stop-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='start-stop-type', is_config=False)


  def _get_tx_interval(self):
    """
    Getter method for tx_interval, mapped from YANG variable /cfm_state/slm/slm_session_detail/tx_interval (uint16)

    YANG Description: Transmission interval
    """
    return self.__tx_interval
      
  def _set_tx_interval(self, v, load=False):
    """
    Setter method for tx_interval, mapped from YANG variable /cfm_state/slm/slm_session_detail/tx_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_interval() directly.

    YANG Description: Transmission interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__tx_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_interval(self):
    self.__tx_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-interval", rest_name="tx-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_tx_frame_count(self):
    """
    Getter method for tx_frame_count, mapped from YANG variable /cfm_state/slm/slm_session_detail/tx_frame_count (uint16)

    YANG Description: Packets count sent per tx-interval
    """
    return self.__tx_frame_count
      
  def _set_tx_frame_count(self, v, load=False):
    """
    Setter method for tx_frame_count, mapped from YANG variable /cfm_state/slm/slm_session_detail/tx_frame_count (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_frame_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_frame_count() directly.

    YANG Description: Packets count sent per tx-interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_frame_count must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__tx_frame_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_frame_count(self):
    self.__tx_frame_count = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="tx-frame-count", rest_name="tx-frame-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_meas_interval(self):
    """
    Getter method for meas_interval, mapped from YANG variable /cfm_state/slm/slm_session_detail/meas_interval (uint16)

    YANG Description: Measurement interval
    """
    return self.__meas_interval
      
  def _set_meas_interval(self, v, load=False):
    """
    Setter method for meas_interval, mapped from YANG variable /cfm_state/slm/slm_session_detail/meas_interval (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_meas_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_meas_interval() directly.

    YANG Description: Measurement interval
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="meas-interval", rest_name="meas-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """meas_interval must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="meas-interval", rest_name="meas-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)""",
        })

    self.__meas_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_meas_interval(self):
    self.__meas_interval = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="meas-interval", rest_name="meas-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint16', is_config=False)


  def _get_session_index(self):
    """
    Getter method for session_index, mapped from YANG variable /cfm_state/slm/slm_session_detail/session_index (uint32)

    YANG Description: SLM/DMM session index
    """
    return self.__session_index
      
  def _set_session_index(self, v, load=False):
    """
    Setter method for session_index, mapped from YANG variable /cfm_state/slm/slm_session_detail/session_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_index() directly.

    YANG Description: SLM/DMM session index
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_index(self):
    self.__session_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_fwd_avg(self):
    """
    Getter method for fwd_avg, mapped from YANG variable /cfm_state/slm/slm_session_detail/fwd_avg (uint32)

    YANG Description: Avg Threshold in Forward direction
    """
    return self.__fwd_avg
      
  def _set_fwd_avg(self, v, load=False):
    """
    Setter method for fwd_avg, mapped from YANG variable /cfm_state/slm/slm_session_detail/fwd_avg (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fwd_avg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fwd_avg() directly.

    YANG Description: Avg Threshold in Forward direction
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-avg", rest_name="fwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fwd_avg must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-avg", rest_name="fwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__fwd_avg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fwd_avg(self):
    self.__fwd_avg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-avg", rest_name="fwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_fwd_max(self):
    """
    Getter method for fwd_max, mapped from YANG variable /cfm_state/slm/slm_session_detail/fwd_max (uint32)

    YANG Description: Max Threshold in Forward direction
    """
    return self.__fwd_max
      
  def _set_fwd_max(self, v, load=False):
    """
    Setter method for fwd_max, mapped from YANG variable /cfm_state/slm/slm_session_detail/fwd_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fwd_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fwd_max() directly.

    YANG Description: Max Threshold in Forward direction
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-max", rest_name="fwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fwd_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-max", rest_name="fwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__fwd_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fwd_max(self):
    self.__fwd_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fwd-max", rest_name="fwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_bwd_avg(self):
    """
    Getter method for bwd_avg, mapped from YANG variable /cfm_state/slm/slm_session_detail/bwd_avg (uint32)

    YANG Description: Avg Threshold in Backward direction
    """
    return self.__bwd_avg
      
  def _set_bwd_avg(self, v, load=False):
    """
    Setter method for bwd_avg, mapped from YANG variable /cfm_state/slm/slm_session_detail/bwd_avg (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bwd_avg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bwd_avg() directly.

    YANG Description: Avg Threshold in Backward direction
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-avg", rest_name="bwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bwd_avg must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-avg", rest_name="bwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bwd_avg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bwd_avg(self):
    self.__bwd_avg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-avg", rest_name="bwd-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_bwd_max(self):
    """
    Getter method for bwd_max, mapped from YANG variable /cfm_state/slm/slm_session_detail/bwd_max (uint32)

    YANG Description: Max Threshold in Backward direction
    """
    return self.__bwd_max
      
  def _set_bwd_max(self, v, load=False):
    """
    Setter method for bwd_max, mapped from YANG variable /cfm_state/slm/slm_session_detail/bwd_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bwd_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bwd_max() directly.

    YANG Description: Max Threshold in Backward direction
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-max", rest_name="bwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bwd_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-max", rest_name="bwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__bwd_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bwd_max(self):
    self.__bwd_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="bwd-max", rest_name="bwd-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)

  type = __builtin__.property(_get_type)
  status = __builtin__.property(_get_status)
  domain_name = __builtin__.property(_get_domain_name)
  ma_name = __builtin__.property(_get_ma_name)
  src_mep = __builtin__.property(_get_src_mep)
  tgt_mep = __builtin__.property(_get_tgt_mep)
  cos = __builtin__.property(_get_cos)
  start_time = __builtin__.property(_get_start_time)
  stop_time = __builtin__.property(_get_stop_time)
  test_profile_name = __builtin__.property(_get_test_profile_name)
  start_type = __builtin__.property(_get_start_type)
  stop_type = __builtin__.property(_get_stop_type)
  tx_interval = __builtin__.property(_get_tx_interval)
  tx_frame_count = __builtin__.property(_get_tx_frame_count)
  meas_interval = __builtin__.property(_get_meas_interval)
  session_index = __builtin__.property(_get_session_index)
  fwd_avg = __builtin__.property(_get_fwd_avg)
  fwd_max = __builtin__.property(_get_fwd_max)
  bwd_avg = __builtin__.property(_get_bwd_avg)
  bwd_max = __builtin__.property(_get_bwd_max)


  _pyangbind_elements = {'type': type, 'status': status, 'domain_name': domain_name, 'ma_name': ma_name, 'src_mep': src_mep, 'tgt_mep': tgt_mep, 'cos': cos, 'start_time': start_time, 'stop_time': stop_time, 'test_profile_name': test_profile_name, 'start_type': start_type, 'stop_type': stop_type, 'tx_interval': tx_interval, 'tx_frame_count': tx_frame_count, 'meas_interval': meas_interval, 'session_index': session_index, 'fwd_avg': fwd_avg, 'fwd_max': fwd_max, 'bwd_avg': bwd_avg, 'bwd_max': bwd_max, }


