
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class dmm_stats_session_history_detailed(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag-operational - based on the path /cfm-state/dmm/dmm-stats-session-detailed/dmm-stats-session-history-detailed. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed display of DMM statistics for histories
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__start_time','__elapsed_time','__tx_count','__rx_count','__avg_delay','__max_delay','__min_delay','__fdv_avg','__fdv_max','__fdv_min','__test_profile_name','__intiated_meas','__completed_meas','__history_index','__session_index',)

  _yang_name = 'dmm-stats-session-history-detailed'
  _rest_name = 'dmm-stats-session-history-detailed'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__avg_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="avg-delay", rest_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__fdv_min = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-min", rest_name="fdv-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__intiated_meas = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="intiated-meas", rest_name="intiated-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__session_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__max_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="max-delay", rest_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__elapsed_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="elapsed-time", rest_name="elapsed-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__fdv_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-max", rest_name="fdv-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__history_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-index", rest_name="history-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__completed_meas = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="completed-meas", rest_name="completed-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__tx_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tx-count", rest_name="tx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__rx_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rx-count", rest_name="rx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__test_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    self.__fdv_avg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-avg", rest_name="fdv-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__min_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="min-delay", rest_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cfm-state', u'dmm', u'dmm-stats-session-detailed', u'dmm-stats-session-history-detailed']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cfm-state', u'dmm', u'dmm-stats-session-detailed', u'dmm-stats-session-history-detailed']

  def _get_start_time(self):
    """
    Getter method for start_time, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/start_time (string)

    YANG Description: Start time
    """
    return self.__start_time
      
  def _set_start_time(self, v, load=False):
    """
    Setter method for start_time, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/start_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_start_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_start_time() directly.

    YANG Description: Start time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """start_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__start_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_start_time(self):
    self.__start_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="start-time", rest_name="start-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_elapsed_time(self):
    """
    Getter method for elapsed_time, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/elapsed_time (string)

    YANG Description: Start time
    """
    return self.__elapsed_time
      
  def _set_elapsed_time(self, v, load=False):
    """
    Setter method for elapsed_time, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/elapsed_time (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_elapsed_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_elapsed_time() directly.

    YANG Description: Start time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="elapsed-time", rest_name="elapsed-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """elapsed_time must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="elapsed-time", rest_name="elapsed-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__elapsed_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_elapsed_time(self):
    self.__elapsed_time = YANGDynClass(base=unicode, is_leaf=True, yang_name="elapsed-time", rest_name="elapsed-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_tx_count(self):
    """
    Getter method for tx_count, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/tx_count (uint32)

    YANG Description: TX count
    """
    return self.__tx_count
      
  def _set_tx_count(self, v, load=False):
    """
    Setter method for tx_count, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/tx_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_count() directly.

    YANG Description: TX count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tx-count", rest_name="tx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tx-count", rest_name="tx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__tx_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_count(self):
    self.__tx_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="tx-count", rest_name="tx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_rx_count(self):
    """
    Getter method for rx_count, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/rx_count (uint32)

    YANG Description: RX count
    """
    return self.__rx_count
      
  def _set_rx_count(self, v, load=False):
    """
    Setter method for rx_count, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/rx_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_count() directly.

    YANG Description: RX count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rx-count", rest_name="rx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rx-count", rest_name="rx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__rx_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_count(self):
    self.__rx_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="rx-count", rest_name="rx-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_avg_delay(self):
    """
    Getter method for avg_delay, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/avg_delay (string)

    YANG Description: Average delay
    """
    return self.__avg_delay
      
  def _set_avg_delay(self, v, load=False):
    """
    Setter method for avg_delay, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/avg_delay (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_avg_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_avg_delay() directly.

    YANG Description: Average delay
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="avg-delay", rest_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """avg_delay must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="avg-delay", rest_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__avg_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_avg_delay(self):
    self.__avg_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="avg-delay", rest_name="avg-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_max_delay(self):
    """
    Getter method for max_delay, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/max_delay (string)

    YANG Description: Max delay
    """
    return self.__max_delay
      
  def _set_max_delay(self, v, load=False):
    """
    Setter method for max_delay, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/max_delay (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_delay() directly.

    YANG Description: Max delay
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="max-delay", rest_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_delay must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="max-delay", rest_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__max_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_delay(self):
    self.__max_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="max-delay", rest_name="max-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_min_delay(self):
    """
    Getter method for min_delay, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/min_delay (string)

    YANG Description: Min delay
    """
    return self.__min_delay
      
  def _set_min_delay(self, v, load=False):
    """
    Setter method for min_delay, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/min_delay (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_min_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_min_delay() directly.

    YANG Description: Min delay
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="min-delay", rest_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """min_delay must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="min-delay", rest_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__min_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_min_delay(self):
    self.__min_delay = YANGDynClass(base=unicode, is_leaf=True, yang_name="min-delay", rest_name="min-delay", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_fdv_avg(self):
    """
    Getter method for fdv_avg, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/fdv_avg (uint32)

    YANG Description: Avg Frame delay variation
    """
    return self.__fdv_avg
      
  def _set_fdv_avg(self, v, load=False):
    """
    Setter method for fdv_avg, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/fdv_avg (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fdv_avg is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fdv_avg() directly.

    YANG Description: Avg Frame delay variation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-avg", rest_name="fdv-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fdv_avg must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-avg", rest_name="fdv-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__fdv_avg = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fdv_avg(self):
    self.__fdv_avg = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-avg", rest_name="fdv-avg", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_fdv_max(self):
    """
    Getter method for fdv_max, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/fdv_max (uint32)

    YANG Description: Max Frame delay variation
    """
    return self.__fdv_max
      
  def _set_fdv_max(self, v, load=False):
    """
    Setter method for fdv_max, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/fdv_max (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fdv_max is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fdv_max() directly.

    YANG Description: Max Frame delay variation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-max", rest_name="fdv-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fdv_max must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-max", rest_name="fdv-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__fdv_max = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fdv_max(self):
    self.__fdv_max = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-max", rest_name="fdv-max", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_fdv_min(self):
    """
    Getter method for fdv_min, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/fdv_min (uint32)

    YANG Description: Min Frame delay variation
    """
    return self.__fdv_min
      
  def _set_fdv_min(self, v, load=False):
    """
    Setter method for fdv_min, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/fdv_min (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fdv_min is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fdv_min() directly.

    YANG Description: Min Frame delay variation
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-min", rest_name="fdv-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fdv_min must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-min", rest_name="fdv-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__fdv_min = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fdv_min(self):
    self.__fdv_min = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fdv-min", rest_name="fdv-min", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_test_profile_name(self):
    """
    Getter method for test_profile_name, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/test_profile_name (string)

    YANG Description: Test Profile name
    """
    return self.__test_profile_name
      
  def _set_test_profile_name(self, v, load=False):
    """
    Setter method for test_profile_name, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/test_profile_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_test_profile_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_test_profile_name() directly.

    YANG Description: Test Profile name
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """test_profile_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)""",
        })

    self.__test_profile_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_test_profile_name(self):
    self.__test_profile_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="test-profile-name", rest_name="test-profile-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='string', is_config=False)


  def _get_intiated_meas(self):
    """
    Getter method for intiated_meas, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/intiated_meas (uint32)

    YANG Description: Initiated Measurements
    """
    return self.__intiated_meas
      
  def _set_intiated_meas(self, v, load=False):
    """
    Setter method for intiated_meas, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/intiated_meas (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_intiated_meas is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_intiated_meas() directly.

    YANG Description: Initiated Measurements
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="intiated-meas", rest_name="intiated-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """intiated_meas must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="intiated-meas", rest_name="intiated-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__intiated_meas = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_intiated_meas(self):
    self.__intiated_meas = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="intiated-meas", rest_name="intiated-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_completed_meas(self):
    """
    Getter method for completed_meas, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/completed_meas (uint32)

    YANG Description: Completed Measurements
    """
    return self.__completed_meas
      
  def _set_completed_meas(self, v, load=False):
    """
    Setter method for completed_meas, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/completed_meas (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_completed_meas is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_completed_meas() directly.

    YANG Description: Completed Measurements
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="completed-meas", rest_name="completed-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """completed_meas must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="completed-meas", rest_name="completed-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__completed_meas = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_completed_meas(self):
    self.__completed_meas = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="completed-meas", rest_name="completed-meas", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_history_index(self):
    """
    Getter method for history_index, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/history_index (uint32)

    YANG Description: DMM history index for the session
    """
    return self.__history_index
      
  def _set_history_index(self, v, load=False):
    """
    Setter method for history_index, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/history_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_history_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_history_index() directly.

    YANG Description: DMM history index for the session
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-index", rest_name="history-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """history_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-index", rest_name="history-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__history_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_history_index(self):
    self.__history_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="history-index", rest_name="history-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_session_index(self):
    """
    Getter method for session_index, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/session_index (uint32)

    YANG Description: DMM session index
    """
    return self.__session_index
      
  def _set_session_index(self, v, load=False):
    """
    Setter method for session_index, mapped from YANG variable /cfm_state/dmm/dmm_stats_session_detailed/dmm_stats_session_history_detailed/session_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_index() directly.

    YANG Description: DMM session index
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_index(self):
    self.__session_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)

  start_time = __builtin__.property(_get_start_time)
  elapsed_time = __builtin__.property(_get_elapsed_time)
  tx_count = __builtin__.property(_get_tx_count)
  rx_count = __builtin__.property(_get_rx_count)
  avg_delay = __builtin__.property(_get_avg_delay)
  max_delay = __builtin__.property(_get_max_delay)
  min_delay = __builtin__.property(_get_min_delay)
  fdv_avg = __builtin__.property(_get_fdv_avg)
  fdv_max = __builtin__.property(_get_fdv_max)
  fdv_min = __builtin__.property(_get_fdv_min)
  test_profile_name = __builtin__.property(_get_test_profile_name)
  intiated_meas = __builtin__.property(_get_intiated_meas)
  completed_meas = __builtin__.property(_get_completed_meas)
  history_index = __builtin__.property(_get_history_index)
  session_index = __builtin__.property(_get_session_index)


  _pyangbind_elements = {'start_time': start_time, 'elapsed_time': elapsed_time, 'tx_count': tx_count, 'rx_count': rx_count, 'avg_delay': avg_delay, 'max_delay': max_delay, 'min_delay': min_delay, 'fdv_avg': fdv_avg, 'fdv_max': fdv_max, 'fdv_min': fdv_min, 'test_profile_name': test_profile_name, 'intiated_meas': intiated_meas, 'completed_meas': completed_meas, 'history_index': history_index, 'session_index': session_index, }


