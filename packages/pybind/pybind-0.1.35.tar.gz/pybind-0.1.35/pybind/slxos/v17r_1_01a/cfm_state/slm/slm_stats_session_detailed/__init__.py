
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import slm_stats_session_history_detailed
class slm_stats_session_detailed(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-dot1ag-operational - based on the path /cfm-state/slm/slm-stats-session-detailed. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Detailed display of SLM statistics
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__session_index','__slm_stats_session_history_detailed',)

  _yang_name = 'slm-stats-session-detailed'
  _rest_name = 'slm-stats-session-detailed'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__session_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    self.__slm_stats_session_history_detailed = YANGDynClass(base=YANGListType("history_index",slm_stats_session_history_detailed.slm_stats_session_history_detailed, yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='history-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cfm-state', u'slm', u'slm-stats-session-detailed']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cfm-state', u'slm', u'slm-stats-session-detailed']

  def _get_session_index(self):
    """
    Getter method for session_index, mapped from YANG variable /cfm_state/slm/slm_stats_session_detailed/session_index (uint32)

    YANG Description: SLM session index
    """
    return self.__session_index
      
  def _set_session_index(self, v, load=False):
    """
    Setter method for session_index, mapped from YANG variable /cfm_state/slm/slm_stats_session_detailed/session_index (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_session_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_session_index() directly.

    YANG Description: SLM session index
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """session_index must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)""",
        })

    self.__session_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_session_index(self):
    self.__session_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="session-index", rest_name="session-index", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='uint32', is_config=False)


  def _get_slm_stats_session_history_detailed(self):
    """
    Getter method for slm_stats_session_history_detailed, mapped from YANG variable /cfm_state/slm/slm_stats_session_detailed/slm_stats_session_history_detailed (list)

    YANG Description: Detailed display of SLM statistics for history
    """
    return self.__slm_stats_session_history_detailed
      
  def _set_slm_stats_session_history_detailed(self, v, load=False):
    """
    Setter method for slm_stats_session_history_detailed, mapped from YANG variable /cfm_state/slm/slm_stats_session_detailed/slm_stats_session_history_detailed (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_slm_stats_session_history_detailed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_slm_stats_session_history_detailed() directly.

    YANG Description: Detailed display of SLM statistics for history
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("history_index",slm_stats_session_history_detailed.slm_stats_session_history_detailed, yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='history-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """slm_stats_session_history_detailed must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("history_index",slm_stats_session_history_detailed.slm_stats_session_history_detailed, yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='history-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)""",
        })

    self.__slm_stats_session_history_detailed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_slm_stats_session_history_detailed(self):
    self.__slm_stats_session_history_detailed = YANGDynClass(base=YANGListType("history_index",slm_stats_session_history_detailed.slm_stats_session_history_detailed, yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='history-index', extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}), is_container='list', yang_name="slm-stats-session-history-detailed", rest_name="slm-stats-session-history-detailed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'callpoint': u'dot1ag-slm-stats-session-history-detailed', u'cli-suppress-show-path': None}}, namespace='urn:brocade.com:mgmt:brocade-dot1ag-operational', defining_module='brocade-dot1ag-operational', yang_type='list', is_config=False)

  session_index = __builtin__.property(_get_session_index)
  slm_stats_session_history_detailed = __builtin__.property(_get_slm_stats_session_history_detailed)


  _pyangbind_elements = {'session_index': session_index, 'slm_stats_session_history_detailed': slm_stats_session_history_detailed, }


