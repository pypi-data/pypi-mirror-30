
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-tunnels-ext - based on the path /brocade_tunnels_ext_rpc/get-tunnel-info/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__page_cursor','__rbridge_id','__id','__mode','__gw_name','__src_ip','__dest_ip','__config_src','__site_name','__admin_state','__oper_state','__bfd_state',)

  _yang_name = 'input'
  _rest_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__page_cursor = YANGDynClass(base=unicode, is_leaf=True, yang_name="page-cursor", rest_name="page-cursor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='string', is_config=True)
    self.__site_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,63}'}), is_leaf=True, yang_name="site-name", rest_name="site-name", parent=self, choice=(u'filter-type', u'filter-by-site'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:site-id-type', is_config=True)
    self.__rbridge_id = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='uint32', is_config=True)
    self.__bfd_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, choice=(u'filter-type', u'filter-by-bfd-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)
    self.__src_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'filter-type', u'filter-by-sip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)
    self.__admin_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, choice=(u'filter-type', u'filter-by-adm-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vxlan': {'value': 1}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, choice=(u'filter-type', u'filter-by-mode'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-mode-type', is_config=True)
    self.__gw_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,32}'}), is_leaf=True, yang_name="gw-name", rest_name="gw-name", parent=self, choice=(u'filter-type', u'filter-by-gateway'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:overlay-gw-name-type', is_config=True)
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, choice=(u'filter-type', u'filter-by-opr-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)
    self.__config_src = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'bgp-evpn': {'value': 3}, u'vtep-controller': {'value': 1}, u'site-config': {'value': 2}},), is_leaf=True, yang_name="config-src", rest_name="config-src", parent=self, choice=(u'filter-type', u'filter-by-cfg-src'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='config-src-type', is_config=True)
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="id", rest_name="id", parent=self, choice=(u'filter-type', u'filter-by-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-id-type', is_config=True)
    self.__dest_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip", rest_name="dest-ip", parent=self, choice=(u'filter-type', u'filter-by-dip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_tunnels_ext_rpc', u'get-tunnel-info', u'input']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-tunnel-info', u'input']

  def _get_page_cursor(self):
    """
    Getter method for page_cursor, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/page_cursor (string)

    YANG Description: Opaque data identifying the next page, returned by
previous RPC call. RPC returns first page data if
this value is not present or empty.
    """
    return self.__page_cursor
      
  def _set_page_cursor(self, v, load=False):
    """
    Setter method for page_cursor, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/page_cursor (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_page_cursor is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_page_cursor() directly.

    YANG Description: Opaque data identifying the next page, returned by
previous RPC call. RPC returns first page data if
this value is not present or empty.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="page-cursor", rest_name="page-cursor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """page_cursor must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="page-cursor", rest_name="page-cursor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='string', is_config=True)""",
        })

    self.__page_cursor = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_page_cursor(self):
    self.__page_cursor = YANGDynClass(base=unicode, is_leaf=True, yang_name="page-cursor", rest_name="page-cursor", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='string', is_config=True)


  def _get_rbridge_id(self):
    """
    Getter method for rbridge_id, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/rbridge_id (uint32)

    YANG Description: Rbridges from which the tunnel information to be
retrieved. If not specified, data is retrieved from
all rbridges.
    """
    return self.__rbridge_id
      
  def _set_rbridge_id(self, v, load=False):
    """
    Setter method for rbridge_id, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/rbridge_id (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rbridge_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rbridge_id() directly.

    YANG Description: Rbridges from which the tunnel information to be
retrieved. If not specified, data is retrieved from
all rbridges.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rbridge_id must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='uint32', is_config=True)""",
        })

    self.__rbridge_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rbridge_id(self):
    self.__rbridge_id = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)), is_leaf=False, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='uint32', is_config=True)


  def _get_id(self):
    """
    Getter method for id, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/id (tnl:tunnel-id-type)

    YANG Description: Filter by tunnel id. Output can have at
most only one tunnel information. The
last-rcvd-record-id parameter is ignored.
    """
    return self.__id
      
  def _set_id(self, v, load=False):
    """
    Setter method for id, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/id (tnl:tunnel-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_id() directly.

    YANG Description: Filter by tunnel id. Output can have at
most only one tunnel information. The
last-rcvd-record-id parameter is ignored.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="id", rest_name="id", parent=self, choice=(u'filter-type', u'filter-by-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """id must be of a type compatible with tnl:tunnel-id-type""",
          'defined-type': "tnl:tunnel-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="id", rest_name="id", parent=self, choice=(u'filter-type', u'filter-by-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-id-type', is_config=True)""",
        })

    self.__id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_id(self):
    self.__id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}), is_leaf=True, yang_name="id", rest_name="id", parent=self, choice=(u'filter-type', u'filter-by-id'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-id-type', is_config=True)


  def _get_mode(self):
    """
    Getter method for mode, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/mode (tnl:tunnel-mode-type)

    YANG Description: Filter by tunnel mode.
    """
    return self.__mode
      
  def _set_mode(self, v, load=False):
    """
    Setter method for mode, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/mode (tnl:tunnel-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mode is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mode() directly.

    YANG Description: Filter by tunnel mode.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vxlan': {'value': 1}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, choice=(u'filter-type', u'filter-by-mode'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mode must be of a type compatible with tnl:tunnel-mode-type""",
          'defined-type': "tnl:tunnel-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vxlan': {'value': 1}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, choice=(u'filter-type', u'filter-by-mode'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-mode-type', is_config=True)""",
        })

    self.__mode = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mode(self):
    self.__mode = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vxlan': {'value': 1}},), is_leaf=True, yang_name="mode", rest_name="mode", parent=self, choice=(u'filter-type', u'filter-by-mode'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:tunnel-mode-type', is_config=True)


  def _get_gw_name(self):
    """
    Getter method for gw_name, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/gw_name (tnl:overlay-gw-name-type)

    YANG Description: Filter by overlay gateway name.
    """
    return self.__gw_name
      
  def _set_gw_name(self, v, load=False):
    """
    Setter method for gw_name, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/gw_name (tnl:overlay-gw-name-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gw_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gw_name() directly.

    YANG Description: Filter by overlay gateway name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,32}'}), is_leaf=True, yang_name="gw-name", rest_name="gw-name", parent=self, choice=(u'filter-type', u'filter-by-gateway'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:overlay-gw-name-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gw_name must be of a type compatible with tnl:overlay-gw-name-type""",
          'defined-type': "tnl:overlay-gw-name-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,32}'}), is_leaf=True, yang_name="gw-name", rest_name="gw-name", parent=self, choice=(u'filter-type', u'filter-by-gateway'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:overlay-gw-name-type', is_config=True)""",
        })

    self.__gw_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gw_name(self):
    self.__gw_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,32}'}), is_leaf=True, yang_name="gw-name", rest_name="gw-name", parent=self, choice=(u'filter-type', u'filter-by-gateway'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:overlay-gw-name-type', is_config=True)


  def _get_src_ip(self):
    """
    Getter method for src_ip, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/src_ip (inet:ipv4-address)

    YANG Description: Filter by tunnel source IP. Only v4 address
are supported in this release.
    """
    return self.__src_ip
      
  def _set_src_ip(self, v, load=False):
    """
    Setter method for src_ip, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/src_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_src_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_src_ip() directly.

    YANG Description: Filter by tunnel source IP. Only v4 address
are supported in this release.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'filter-type', u'filter-by-sip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """src_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'filter-type', u'filter-by-sip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__src_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_src_ip(self):
    self.__src_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="src-ip", rest_name="src-ip", parent=self, choice=(u'filter-type', u'filter-by-sip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)


  def _get_dest_ip(self):
    """
    Getter method for dest_ip, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/dest_ip (inet:ipv4-address)

    YANG Description: Filter by tunnel destination IP. Only v4
address are supported in this release.
    """
    return self.__dest_ip
      
  def _set_dest_ip(self, v, load=False):
    """
    Setter method for dest_ip, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/dest_ip (inet:ipv4-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dest_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dest_ip() directly.

    YANG Description: Filter by tunnel destination IP. Only v4
address are supported in this release.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip", rest_name="dest-ip", parent=self, choice=(u'filter-type', u'filter-by-dip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dest_ip must be of a type compatible with inet:ipv4-address""",
          'defined-type': "inet:ipv4-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip", rest_name="dest-ip", parent=self, choice=(u'filter-type', u'filter-by-dip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)""",
        })

    self.__dest_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dest_ip(self):
    self.__dest_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="dest-ip", rest_name="dest-ip", parent=self, choice=(u'filter-type', u'filter-by-dip'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='inet:ipv4-address', is_config=True)


  def _get_config_src(self):
    """
    Getter method for config_src, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/config_src (config-src-type)

    YANG Description: Filter by configuration source.
    """
    return self.__config_src
      
  def _set_config_src(self, v, load=False):
    """
    Setter method for config_src, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/config_src (config-src-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_config_src is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_config_src() directly.

    YANG Description: Filter by configuration source.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'bgp-evpn': {'value': 3}, u'vtep-controller': {'value': 1}, u'site-config': {'value': 2}},), is_leaf=True, yang_name="config-src", rest_name="config-src", parent=self, choice=(u'filter-type', u'filter-by-cfg-src'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='config-src-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """config_src must be of a type compatible with config-src-type""",
          'defined-type': "brocade-tunnels-ext:config-src-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'bgp-evpn': {'value': 3}, u'vtep-controller': {'value': 1}, u'site-config': {'value': 2}},), is_leaf=True, yang_name="config-src", rest_name="config-src", parent=self, choice=(u'filter-type', u'filter-by-cfg-src'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='config-src-type', is_config=True)""",
        })

    self.__config_src = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_config_src(self):
    self.__config_src = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'bgp-evpn': {'value': 3}, u'vtep-controller': {'value': 1}, u'site-config': {'value': 2}},), is_leaf=True, yang_name="config-src", rest_name="config-src", parent=self, choice=(u'filter-type', u'filter-by-cfg-src'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='config-src-type', is_config=True)


  def _get_site_name(self):
    """
    Getter method for site_name, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/site_name (tnl:site-id-type)

    YANG Description: Filter by overlay site name.
    """
    return self.__site_name
      
  def _set_site_name(self, v, load=False):
    """
    Setter method for site_name, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/site_name (tnl:site-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_site_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_site_name() directly.

    YANG Description: Filter by overlay site name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,63}'}), is_leaf=True, yang_name="site-name", rest_name="site-name", parent=self, choice=(u'filter-type', u'filter-by-site'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:site-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """site_name must be of a type compatible with tnl:site-id-type""",
          'defined-type': "tnl:site-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,63}'}), is_leaf=True, yang_name="site-name", rest_name="site-name", parent=self, choice=(u'filter-type', u'filter-by-site'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:site-id-type', is_config=True)""",
        })

    self.__site_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_site_name(self):
    self.__site_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_a-zA-Z0-9]{1,63}'}), is_leaf=True, yang_name="site-name", rest_name="site-name", parent=self, choice=(u'filter-type', u'filter-by-site'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='tnl:site-id-type', is_config=True)


  def _get_admin_state(self):
    """
    Getter method for admin_state, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/admin_state (proto-state-type)

    YANG Description: Filter by tunnel admin state.
    """
    return self.__admin_state
      
  def _set_admin_state(self, v, load=False):
    """
    Setter method for admin_state, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/admin_state (proto-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_state() directly.

    YANG Description: Filter by tunnel admin state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, choice=(u'filter-type', u'filter-by-adm-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_state must be of a type compatible with proto-state-type""",
          'defined-type': "brocade-tunnels-ext:proto-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, choice=(u'filter-type', u'filter-by-adm-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)""",
        })

    self.__admin_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_state(self):
    self.__admin_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="admin-state", rest_name="admin-state", parent=self, choice=(u'filter-type', u'filter-by-adm-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)


  def _get_oper_state(self):
    """
    Getter method for oper_state, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/oper_state (proto-state-type)

    YANG Description: Filter by tunnel oper state.
    """
    return self.__oper_state
      
  def _set_oper_state(self, v, load=False):
    """
    Setter method for oper_state, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/oper_state (proto-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_state() directly.

    YANG Description: Filter by tunnel oper state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, choice=(u'filter-type', u'filter-by-opr-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_state must be of a type compatible with proto-state-type""",
          'defined-type': "brocade-tunnels-ext:proto-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, choice=(u'filter-type', u'filter-by-opr-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)""",
        })

    self.__oper_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_state(self):
    self.__oper_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="oper-state", rest_name="oper-state", parent=self, choice=(u'filter-type', u'filter-by-opr-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)


  def _get_bfd_state(self):
    """
    Getter method for bfd_state, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/bfd_state (proto-state-type)

    YANG Description: Filter by tunnel bfd state.
    """
    return self.__bfd_state
      
  def _set_bfd_state(self, v, load=False):
    """
    Setter method for bfd_state, mapped from YANG variable /brocade_tunnels_ext_rpc/get_tunnel_info/input/bfd_state (proto-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bfd_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bfd_state() directly.

    YANG Description: Filter by tunnel bfd state.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, choice=(u'filter-type', u'filter-by-bfd-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bfd_state must be of a type compatible with proto-state-type""",
          'defined-type': "brocade-tunnels-ext:proto-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, choice=(u'filter-type', u'filter-by-bfd-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)""",
        })

    self.__bfd_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bfd_state(self):
    self.__bfd_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'down': {'value': 2}, u'up': {'value': 1}},), is_leaf=True, yang_name="bfd-state", rest_name="bfd-state", parent=self, choice=(u'filter-type', u'filter-by-bfd-state'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-tunnels-ext', defining_module='brocade-tunnels-ext', yang_type='proto-state-type', is_config=True)

  page_cursor = __builtin__.property(_get_page_cursor, _set_page_cursor)
  rbridge_id = __builtin__.property(_get_rbridge_id, _set_rbridge_id)
  id = __builtin__.property(_get_id, _set_id)
  mode = __builtin__.property(_get_mode, _set_mode)
  gw_name = __builtin__.property(_get_gw_name, _set_gw_name)
  src_ip = __builtin__.property(_get_src_ip, _set_src_ip)
  dest_ip = __builtin__.property(_get_dest_ip, _set_dest_ip)
  config_src = __builtin__.property(_get_config_src, _set_config_src)
  site_name = __builtin__.property(_get_site_name, _set_site_name)
  admin_state = __builtin__.property(_get_admin_state, _set_admin_state)
  oper_state = __builtin__.property(_get_oper_state, _set_oper_state)
  bfd_state = __builtin__.property(_get_bfd_state, _set_bfd_state)

  __choices__ = {u'filter-type': {u'filter-by-gateway': [u'gw_name'], u'filter-by-adm-state': [u'admin_state'], u'filter-by-id': [u'id'], u'filter-by-sip': [u'src_ip'], u'filter-by-opr-state': [u'oper_state'], u'filter-by-bfd-state': [u'bfd_state'], u'filter-by-site': [u'site_name'], u'filter-by-cfg-src': [u'config_src'], u'filter-by-dip': [u'dest_ip'], u'filter-by-mode': [u'mode']}}
  _pyangbind_elements = {'page_cursor': page_cursor, 'rbridge_id': rbridge_id, 'id': id, 'mode': mode, 'gw_name': gw_name, 'src_ip': src_ip, 'dest_ip': dest_ip, 'config_src': config_src, 'site_name': site_name, 'admin_state': admin_state, 'oper_state': oper_state, 'bfd_state': bfd_state, }


