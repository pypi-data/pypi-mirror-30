
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import exec_
import commands
class accounting(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-aaa - based on the path /aaa-config/aaa/accounting. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__exec_','__commands',)

  _yang_name = 'accounting'
  _rest_name = 'accounting'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__commands = YANGDynClass(base=commands.commands, is_container='container', presence=False, yang_name="commands", rest_name="commands", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Command accounting', u'callpoint': u'acc_cmd_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)
    self.__exec_ = YANGDynClass(base=exec_.exec_, is_container='container', presence=False, yang_name="exec", rest_name="exec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Login accounting', u'callpoint': u'acc_exec_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'aaa-config', u'aaa', u'accounting']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'aaa', u'accounting']

  def _get_exec_(self):
    """
    Getter method for exec_, mapped from YANG variable /aaa_config/aaa/accounting/exec (container)
    """
    return self.__exec_
      
  def _set_exec_(self, v, load=False):
    """
    Setter method for exec_, mapped from YANG variable /aaa_config/aaa/accounting/exec (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exec_ is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exec_() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=exec_.exec_, is_container='container', presence=False, yang_name="exec", rest_name="exec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Login accounting', u'callpoint': u'acc_exec_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exec_ must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=exec_.exec_, is_container='container', presence=False, yang_name="exec", rest_name="exec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Login accounting', u'callpoint': u'acc_exec_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)""",
        })

    self.__exec_ = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exec_(self):
    self.__exec_ = YANGDynClass(base=exec_.exec_, is_container='container', presence=False, yang_name="exec", rest_name="exec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Login accounting', u'callpoint': u'acc_exec_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)


  def _get_commands(self):
    """
    Getter method for commands, mapped from YANG variable /aaa_config/aaa/accounting/commands (container)
    """
    return self.__commands
      
  def _set_commands(self, v, load=False):
    """
    Setter method for commands, mapped from YANG variable /aaa_config/aaa/accounting/commands (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_commands is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_commands() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=commands.commands, is_container='container', presence=False, yang_name="commands", rest_name="commands", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Command accounting', u'callpoint': u'acc_cmd_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """commands must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=commands.commands, is_container='container', presence=False, yang_name="commands", rest_name="commands", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Command accounting', u'callpoint': u'acc_cmd_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)""",
        })

    self.__commands = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_commands(self):
    self.__commands = YANGDynClass(base=commands.commands, is_container='container', presence=False, yang_name="commands", rest_name="commands", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable Command accounting', u'callpoint': u'acc_cmd_cp', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-aaa', defining_module='brocade-aaa', yang_type='container', is_config=True)

  exec_ = __builtin__.property(_get_exec_, _set_exec_)
  commands = __builtin__.property(_get_commands, _set_commands)


  _pyangbind_elements = {'exec_': exec_, 'commands': commands, }


