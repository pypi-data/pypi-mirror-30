
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class logicalgroup(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-rbridge - based on the path /rbridge-id/maps/logicalgroup. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__logicalgroupname','__elementtype','__members',)

  _yang_name = 'logicalgroup'
  _rest_name = 'group'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__elementtype = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'interface': {}, u'sfp': {}},), is_leaf=True, yang_name="elementtype", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'alt-name': u'type', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='enumeration', is_config=True)
    self.__logicalgroupname = YANGDynClass(base=unicode, is_leaf=True, yang_name="logicalgroupname", rest_name="logicalgroupname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure group name', u'cli-incomplete-command': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='string', is_config=True)
    self.__members = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*)(,(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*))*', 'length': [u'1..253']}), is_leaf=True, yang_name="members", rest_name="members", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure memberlist'}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='maps-interface-range-cli-pattern', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'rbridge-id', u'maps', u'logicalgroup']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'rbridge-id', u'maps', u'group']

  def _get_logicalgroupname(self):
    """
    Getter method for logicalgroupname, mapped from YANG variable /rbridge_id/maps/logicalgroup/logicalgroupname (string)
    """
    return self.__logicalgroupname
      
  def _set_logicalgroupname(self, v, load=False):
    """
    Setter method for logicalgroupname, mapped from YANG variable /rbridge_id/maps/logicalgroup/logicalgroupname (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_logicalgroupname is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_logicalgroupname() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="logicalgroupname", rest_name="logicalgroupname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure group name', u'cli-incomplete-command': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """logicalgroupname must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="logicalgroupname", rest_name="logicalgroupname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure group name', u'cli-incomplete-command': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='string', is_config=True)""",
        })

    self.__logicalgroupname = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_logicalgroupname(self):
    self.__logicalgroupname = YANGDynClass(base=unicode, is_leaf=True, yang_name="logicalgroupname", rest_name="logicalgroupname", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure group name', u'cli-incomplete-command': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='string', is_config=True)


  def _get_elementtype(self):
    """
    Getter method for elementtype, mapped from YANG variable /rbridge_id/maps/logicalgroup/elementtype (enumeration)
    """
    return self.__elementtype
      
  def _set_elementtype(self, v, load=False):
    """
    Setter method for elementtype, mapped from YANG variable /rbridge_id/maps/logicalgroup/elementtype (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_elementtype is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_elementtype() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'interface': {}, u'sfp': {}},), is_leaf=True, yang_name="elementtype", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'alt-name': u'type', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """elementtype must be of a type compatible with enumeration""",
          'defined-type': "brocade-maps:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'interface': {}, u'sfp': {}},), is_leaf=True, yang_name="elementtype", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'alt-name': u'type', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='enumeration', is_config=True)""",
        })

    self.__elementtype = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_elementtype(self):
    self.__elementtype = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'interface': {}, u'sfp': {}},), is_leaf=True, yang_name="elementtype", rest_name="type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'alt-name': u'type', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='enumeration', is_config=True)


  def _get_members(self):
    """
    Getter method for members, mapped from YANG variable /rbridge_id/maps/logicalgroup/members (maps-interface-range-cli-pattern)
    """
    return self.__members
      
  def _set_members(self, v, load=False):
    """
    Setter method for members, mapped from YANG variable /rbridge_id/maps/logicalgroup/members (maps-interface-range-cli-pattern)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_members is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_members() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*)(,(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*))*', 'length': [u'1..253']}), is_leaf=True, yang_name="members", rest_name="members", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure memberlist'}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='maps-interface-range-cli-pattern', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """members must be of a type compatible with maps-interface-range-cli-pattern""",
          'defined-type': "brocade-maps:maps-interface-range-cli-pattern",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*)(,(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*))*', 'length': [u'1..253']}), is_leaf=True, yang_name="members", rest_name="members", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure memberlist'}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='maps-interface-range-cli-pattern', is_config=True)""",
        })

    self.__members = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_members(self):
    self.__members = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*)(,(((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))((-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?)(((,([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))?){1})+|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9]))(-([1-9]|[1-9][0-9]|[1-9][0-9][0-9])){1}|((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:((([1-4])(-([1-4]))?)(((,([1-4])(-([1-4]))?){1})+)|([1-4])(-([1-4]))))))*))*', 'length': [u'1..253']}), is_leaf=True, yang_name="members", rest_name="members", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure memberlist'}}, namespace='urn:brocade.com:mgmt:brocade-maps', defining_module='brocade-maps', yang_type='maps-interface-range-cli-pattern', is_config=True)

  logicalgroupname = __builtin__.property(_get_logicalgroupname, _set_logicalgroupname)
  elementtype = __builtin__.property(_get_elementtype, _set_elementtype)
  members = __builtin__.property(_get_members, _set_members)


  _pyangbind_elements = {'logicalgroupname': logicalgroupname, 'elementtype': elementtype, 'members': members, }


