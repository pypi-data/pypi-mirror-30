
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class memory(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-rbridge - based on the path /rbridge-id/resource-monitor/process/memory. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__enable_process','__thresh_mem_alarm','__thresh_mem_critic',)

  _yang_name = 'memory'
  _rest_name = 'memory'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__enable_process = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-process", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable monitoring process memory usage', u'alt-name': u'enable', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='empty', is_config=True)
    self.__thresh_mem_critic = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'600 .. 699']}), is_leaf=True, yang_name="thresh-mem-critic", rest_name="critical", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Critical threshold for memory usage', u'alt-name': u'critical', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)
    self.__thresh_mem_alarm = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'500 .. 599']}), is_leaf=True, yang_name="thresh-mem-alarm", rest_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Alarm threshold for memory usage', u'alt-name': u'alarm', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'rbridge-id', u'resource-monitor', u'process', u'memory']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'rbridge-id', u'resource-monitor', u'process', u'memory']

  def _get_enable_process(self):
    """
    Getter method for enable_process, mapped from YANG variable /rbridge_id/resource_monitor/process/memory/enable_process (empty)
    """
    return self.__enable_process
      
  def _set_enable_process(self, v, load=False):
    """
    Setter method for enable_process, mapped from YANG variable /rbridge_id/resource_monitor/process/memory/enable_process (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable_process is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable_process() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable-process", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable monitoring process memory usage', u'alt-name': u'enable', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable_process must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-process", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable monitoring process memory usage', u'alt-name': u'enable', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='empty', is_config=True)""",
        })

    self.__enable_process = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable_process(self):
    self.__enable_process = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable-process", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable monitoring process memory usage', u'alt-name': u'enable', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='empty', is_config=True)


  def _get_thresh_mem_alarm(self):
    """
    Getter method for thresh_mem_alarm, mapped from YANG variable /rbridge_id/resource_monitor/process/memory/thresh_mem_alarm (uint32)
    """
    return self.__thresh_mem_alarm
      
  def _set_thresh_mem_alarm(self, v, load=False):
    """
    Setter method for thresh_mem_alarm, mapped from YANG variable /rbridge_id/resource_monitor/process/memory/thresh_mem_alarm (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresh_mem_alarm is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresh_mem_alarm() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'500 .. 599']}), is_leaf=True, yang_name="thresh-mem-alarm", rest_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Alarm threshold for memory usage', u'alt-name': u'alarm', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresh_mem_alarm must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'500 .. 599']}), is_leaf=True, yang_name="thresh-mem-alarm", rest_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Alarm threshold for memory usage', u'alt-name': u'alarm', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)""",
        })

    self.__thresh_mem_alarm = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresh_mem_alarm(self):
    self.__thresh_mem_alarm = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'500 .. 599']}), is_leaf=True, yang_name="thresh-mem-alarm", rest_name="alarm", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Alarm threshold for memory usage', u'alt-name': u'alarm', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)


  def _get_thresh_mem_critic(self):
    """
    Getter method for thresh_mem_critic, mapped from YANG variable /rbridge_id/resource_monitor/process/memory/thresh_mem_critic (uint32)
    """
    return self.__thresh_mem_critic
      
  def _set_thresh_mem_critic(self, v, load=False):
    """
    Setter method for thresh_mem_critic, mapped from YANG variable /rbridge_id/resource_monitor/process/memory/thresh_mem_critic (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_thresh_mem_critic is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_thresh_mem_critic() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'600 .. 699']}), is_leaf=True, yang_name="thresh-mem-critic", rest_name="critical", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Critical threshold for memory usage', u'alt-name': u'critical', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """thresh_mem_critic must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'600 .. 699']}), is_leaf=True, yang_name="thresh-mem-critic", rest_name="critical", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Critical threshold for memory usage', u'alt-name': u'critical', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)""",
        })

    self.__thresh_mem_critic = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_thresh_mem_critic(self):
    self.__thresh_mem_critic = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'600 .. 699']}), is_leaf=True, yang_name="thresh-mem-critic", rest_name="critical", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Critical threshold for memory usage', u'alt-name': u'critical', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-resource-monitor', defining_module='brocade-resource-monitor', yang_type='uint32', is_config=True)

  enable_process = __builtin__.property(_get_enable_process, _set_enable_process)
  thresh_mem_alarm = __builtin__.property(_get_thresh_mem_alarm, _set_thresh_mem_alarm)
  thresh_mem_critic = __builtin__.property(_get_thresh_mem_critic, _set_thresh_mem_critic)


  _pyangbind_elements = {'enable_process': enable_process, 'thresh_mem_alarm': thresh_mem_alarm, 'thresh_mem_critic': thresh_mem_critic, }


