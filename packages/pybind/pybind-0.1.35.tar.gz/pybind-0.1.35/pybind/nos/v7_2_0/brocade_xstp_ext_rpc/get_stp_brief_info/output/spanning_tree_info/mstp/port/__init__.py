
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class port(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-xstp-ext - based on the path /brocade_xstp_ext_rpc/get-stp-brief-info/output/spanning-tree-info/mstp/port. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__interface_type','__interface_name','__spanningtree_enabled','__if_index','__interface_id','__if_role','__if_state','__external_path_cost','__internal_path_cost','__configured_path_cost','__designated_port_id','__port_priority','__designated_bridge_id','__port_hello_time','__forward_transitions_count','__received_stp_type','__transmitted_stp_type','__edge_port','__auto_edge','__admin_edge','__edge_delay','__configured_root_guard','__oper_root_guard','__boundary_port','__oper_bpdu_guard','__oper_bpdu_filter','__link_type','__rx_bpdu_count','__tx_bpdu_count',)

  _yang_name = 'port'
  _rest_name = 'port'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__boundary_port = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="boundary-port", rest_name="boundary-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)
    self.__internal_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="internal-path-cost", rest_name="internal-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__if_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'listening': {'value': 4}, u'discarding': {'value': 7}, u'disabled': {'value': 2}, u'learning': {'value': 5}, u'error': {'value': 1}, u'forwarding': {'value': 6}, u'blocking': {'value': 3}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-state', is_config=True)
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='enumeration', is_config=True)
    self.__forward_transitions_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="forward-transitions-count", rest_name="forward-transitions-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__transmitted_stp_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="transmitted-stp-type", rest_name="transmitted-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)
    self.__interface_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="interface-id", rest_name="interface-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    self.__port_hello_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-hello-time", rest_name="port-hello-time", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="if-index", rest_name="if-index", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    self.__external_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="external-path-cost", rest_name="external-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__designated_bridge_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="designated-bridge-id", rest_name="designated-bridge-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    self.__tx_bpdu_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bpdu-count", rest_name="tx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    self.__received_stp_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="received-stp-type", rest_name="received-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)
    self.__configured_root_guard = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="configured-root-guard", rest_name="configured-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    self.__edge_port = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="edge-port", rest_name="edge-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='union', is_config=True)
    self.__configured_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="configured-path-cost", rest_name="configured-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__link_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'shared': {'value': 2}, u'point-to-point': {'value': 1}},), is_leaf=True, yang_name="link-type", rest_name="link-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-link-type', is_config=True)
    self.__admin_edge = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="admin-edge", rest_name="admin-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)
    self.__spanningtree_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="spanningtree-enabled", rest_name="spanningtree-enabled", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='boolean', is_config=True)
    self.__port_priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-priority", rest_name="port-priority", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__rx_bpdu_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bpdu-count", rest_name="rx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    self.__designated_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="designated-port-id", rest_name="designated-port-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    self.__oper_bpdu_filter = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-filter", rest_name="oper-bpdu-filter", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    self.__auto_edge = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="auto-edge", rest_name="auto-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)
    self.__edge_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="edge-delay", rest_name="edge-delay", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    self.__oper_bpdu_guard = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-guard", rest_name="oper-bpdu-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    self.__oper_root_guard = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-root-guard", rest_name="oper-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    self.__if_role = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'backup': {'value': 5}, u'alternate': {'value': 4}, u'designated': {'value': 2}, u'disabled': {'value': 6}, u'master': {'value': 7}, u'error': {'value': 1}, u'root': {'value': 3}},), is_leaf=True, yang_name="if-role", rest_name="if-role", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-role', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_xstp_ext_rpc', u'get-stp-brief-info', u'output', u'spanning-tree-info', u'mstp', u'port']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-stp-brief-info', u'output', u'spanning-tree-info', u'mstp', u'port']

  def _get_interface_type(self):
    """
    Getter method for interface_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/interface_type (enumeration)

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    return self.__interface_type
      
  def _set_interface_type(self, v, load=False):
    """
    Setter method for interface_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_type() directly.

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-xstp-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_type(self):
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='enumeration', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/interface_name (union)

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
gigabitethernet        [rbridge-id]/slot/port
tengigabitethernet     [rbridge-id]/slot/port
fortygigabitethernet   [rbridge-id]/slot/port
hundredgigabitethernet [rbridge-id]/slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
gigabitethernet        [rbridge-id]/slot/port
tengigabitethernet     [rbridge-id]/slot/port
fortygigabitethernet   [rbridge-id]/slot/port
hundredgigabitethernet [rbridge-id]/slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with union""",
          'defined-type': "brocade-xstp-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='union', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='union', is_config=True)


  def _get_spanningtree_enabled(self):
    """
    Getter method for spanningtree_enabled, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/spanningtree_enabled (boolean)

    YANG Description: Is spanning tree enabled
    """
    return self.__spanningtree_enabled
      
  def _set_spanningtree_enabled(self, v, load=False):
    """
    Setter method for spanningtree_enabled, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/spanningtree_enabled (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spanningtree_enabled is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spanningtree_enabled() directly.

    YANG Description: Is spanning tree enabled
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="spanningtree-enabled", rest_name="spanningtree-enabled", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spanningtree_enabled must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="spanningtree-enabled", rest_name="spanningtree-enabled", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='boolean', is_config=True)""",
        })

    self.__spanningtree_enabled = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spanningtree_enabled(self):
    self.__spanningtree_enabled = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="spanningtree-enabled", rest_name="spanningtree-enabled", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='boolean', is_config=True)


  def _get_if_index(self):
    """
    Getter method for if_index, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/if_index (uint64)

    YANG Description: Interface index
    """
    return self.__if_index
      
  def _set_if_index(self, v, load=False):
    """
    Setter method for if_index, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/if_index (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_index is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_index() directly.

    YANG Description: Interface index
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="if-index", rest_name="if-index", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_index must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="if-index", rest_name="if-index", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)""",
        })

    self.__if_index = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_index(self):
    self.__if_index = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="if-index", rest_name="if-index", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)


  def _get_interface_id(self):
    """
    Getter method for interface_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/interface_id (uint64)

    YANG Description: Interface id
    """
    return self.__interface_id
      
  def _set_interface_id(self, v, load=False):
    """
    Setter method for interface_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/interface_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_id() directly.

    YANG Description: Interface id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="interface-id", rest_name="interface-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="interface-id", rest_name="interface-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)""",
        })

    self.__interface_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_id(self):
    self.__interface_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="interface-id", rest_name="interface-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)


  def _get_if_role(self):
    """
    Getter method for if_role, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/if_role (stp-port-role)

    YANG Description: Interface role
    """
    return self.__if_role
      
  def _set_if_role(self, v, load=False):
    """
    Setter method for if_role, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/if_role (stp-port-role)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_role() directly.

    YANG Description: Interface role
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'backup': {'value': 5}, u'alternate': {'value': 4}, u'designated': {'value': 2}, u'disabled': {'value': 6}, u'master': {'value': 7}, u'error': {'value': 1}, u'root': {'value': 3}},), is_leaf=True, yang_name="if-role", rest_name="if-role", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-role', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_role must be of a type compatible with stp-port-role""",
          'defined-type': "brocade-xstp-ext:stp-port-role",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'backup': {'value': 5}, u'alternate': {'value': 4}, u'designated': {'value': 2}, u'disabled': {'value': 6}, u'master': {'value': 7}, u'error': {'value': 1}, u'root': {'value': 3}},), is_leaf=True, yang_name="if-role", rest_name="if-role", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-role', is_config=True)""",
        })

    self.__if_role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_role(self):
    self.__if_role = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'backup': {'value': 5}, u'alternate': {'value': 4}, u'designated': {'value': 2}, u'disabled': {'value': 6}, u'master': {'value': 7}, u'error': {'value': 1}, u'root': {'value': 3}},), is_leaf=True, yang_name="if-role", rest_name="if-role", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-role', is_config=True)


  def _get_if_state(self):
    """
    Getter method for if_state, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/if_state (stp-port-state)

    YANG Description: Interface state
    """
    return self.__if_state
      
  def _set_if_state(self, v, load=False):
    """
    Setter method for if_state, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/if_state (stp-port-state)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_if_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_if_state() directly.

    YANG Description: Interface state
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'listening': {'value': 4}, u'discarding': {'value': 7}, u'disabled': {'value': 2}, u'learning': {'value': 5}, u'error': {'value': 1}, u'forwarding': {'value': 6}, u'blocking': {'value': 3}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-state', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """if_state must be of a type compatible with stp-port-state""",
          'defined-type': "brocade-xstp-ext:stp-port-state",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'listening': {'value': 4}, u'discarding': {'value': 7}, u'disabled': {'value': 2}, u'learning': {'value': 5}, u'error': {'value': 1}, u'forwarding': {'value': 6}, u'blocking': {'value': 3}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-state', is_config=True)""",
        })

    self.__if_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_if_state(self):
    self.__if_state = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'listening': {'value': 4}, u'discarding': {'value': 7}, u'disabled': {'value': 2}, u'learning': {'value': 5}, u'error': {'value': 1}, u'forwarding': {'value': 6}, u'blocking': {'value': 3}},), is_leaf=True, yang_name="if-state", rest_name="if-state", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-port-state', is_config=True)


  def _get_external_path_cost(self):
    """
    Getter method for external_path_cost, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/external_path_cost (uint32)

    YANG Description: Designated external path cost
    """
    return self.__external_path_cost
      
  def _set_external_path_cost(self, v, load=False):
    """
    Setter method for external_path_cost, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/external_path_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_external_path_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_external_path_cost() directly.

    YANG Description: Designated external path cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="external-path-cost", rest_name="external-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """external_path_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="external-path-cost", rest_name="external-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__external_path_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_external_path_cost(self):
    self.__external_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="external-path-cost", rest_name="external-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_internal_path_cost(self):
    """
    Getter method for internal_path_cost, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/internal_path_cost (uint32)

    YANG Description: Designated internal path cost
    """
    return self.__internal_path_cost
      
  def _set_internal_path_cost(self, v, load=False):
    """
    Setter method for internal_path_cost, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/internal_path_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_internal_path_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_internal_path_cost() directly.

    YANG Description: Designated internal path cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="internal-path-cost", rest_name="internal-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """internal_path_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="internal-path-cost", rest_name="internal-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__internal_path_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_internal_path_cost(self):
    self.__internal_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="internal-path-cost", rest_name="internal-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_configured_path_cost(self):
    """
    Getter method for configured_path_cost, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/configured_path_cost (uint32)

    YANG Description: Configured path cost
    """
    return self.__configured_path_cost
      
  def _set_configured_path_cost(self, v, load=False):
    """
    Setter method for configured_path_cost, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/configured_path_cost (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configured_path_cost is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configured_path_cost() directly.

    YANG Description: Configured path cost
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="configured-path-cost", rest_name="configured-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configured_path_cost must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="configured-path-cost", rest_name="configured-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__configured_path_cost = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configured_path_cost(self):
    self.__configured_path_cost = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="configured-path-cost", rest_name="configured-path-cost", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_designated_port_id(self):
    """
    Getter method for designated_port_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/designated_port_id (uint64)

    YANG Description: Designated port id
    """
    return self.__designated_port_id
      
  def _set_designated_port_id(self, v, load=False):
    """
    Setter method for designated_port_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/designated_port_id (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_designated_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_designated_port_id() directly.

    YANG Description: Designated port id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="designated-port-id", rest_name="designated-port-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """designated_port_id must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="designated-port-id", rest_name="designated-port-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)""",
        })

    self.__designated_port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_designated_port_id(self):
    self.__designated_port_id = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="designated-port-id", rest_name="designated-port-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)


  def _get_port_priority(self):
    """
    Getter method for port_priority, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/port_priority (uint32)

    YANG Description: Port priority
    """
    return self.__port_priority
      
  def _set_port_priority(self, v, load=False):
    """
    Setter method for port_priority, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/port_priority (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_priority() directly.

    YANG Description: Port priority
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-priority", rest_name="port-priority", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_priority must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-priority", rest_name="port-priority", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__port_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_priority(self):
    self.__port_priority = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-priority", rest_name="port-priority", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_designated_bridge_id(self):
    """
    Getter method for designated_bridge_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/designated_bridge_id (bridge-id-type)

    YANG Description: Designated bridge Id
    """
    return self.__designated_bridge_id
      
  def _set_designated_bridge_id(self, v, load=False):
    """
    Setter method for designated_bridge_id, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/designated_bridge_id (bridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_designated_bridge_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_designated_bridge_id() directly.

    YANG Description: Designated bridge Id
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="designated-bridge-id", rest_name="designated-bridge-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """designated_bridge_id must be of a type compatible with bridge-id-type""",
          'defined-type': "brocade-xstp-ext:bridge-id-type",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="designated-bridge-id", rest_name="designated-bridge-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)""",
        })

    self.__designated_bridge_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_designated_bridge_id(self):
    self.__designated_bridge_id = YANGDynClass(base=unicode, is_leaf=True, yang_name="designated-bridge-id", rest_name="designated-bridge-id", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='bridge-id-type', is_config=True)


  def _get_port_hello_time(self):
    """
    Getter method for port_hello_time, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/port_hello_time (uint32)

    YANG Description: Port hello time
    """
    return self.__port_hello_time
      
  def _set_port_hello_time(self, v, load=False):
    """
    Setter method for port_hello_time, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/port_hello_time (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_hello_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_hello_time() directly.

    YANG Description: Port hello time
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-hello-time", rest_name="port-hello-time", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_hello_time must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-hello-time", rest_name="port-hello-time", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__port_hello_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_hello_time(self):
    self.__port_hello_time = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="port-hello-time", rest_name="port-hello-time", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_forward_transitions_count(self):
    """
    Getter method for forward_transitions_count, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/forward_transitions_count (uint32)

    YANG Description: Number of forward transitions
    """
    return self.__forward_transitions_count
      
  def _set_forward_transitions_count(self, v, load=False):
    """
    Setter method for forward_transitions_count, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/forward_transitions_count (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_forward_transitions_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_forward_transitions_count() directly.

    YANG Description: Number of forward transitions
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="forward-transitions-count", rest_name="forward-transitions-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """forward_transitions_count must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="forward-transitions-count", rest_name="forward-transitions-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__forward_transitions_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_forward_transitions_count(self):
    self.__forward_transitions_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="forward-transitions-count", rest_name="forward-transitions-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_received_stp_type(self):
    """
    Getter method for received_stp_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/received_stp_type (stp-type)

    YANG Description: Received (rx) stp type
    """
    return self.__received_stp_type
      
  def _set_received_stp_type(self, v, load=False):
    """
    Setter method for received_stp_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/received_stp_type (stp-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_received_stp_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_received_stp_type() directly.

    YANG Description: Received (rx) stp type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="received-stp-type", rest_name="received-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """received_stp_type must be of a type compatible with stp-type""",
          'defined-type': "brocade-xstp-ext:stp-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="received-stp-type", rest_name="received-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)""",
        })

    self.__received_stp_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_received_stp_type(self):
    self.__received_stp_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="received-stp-type", rest_name="received-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)


  def _get_transmitted_stp_type(self):
    """
    Getter method for transmitted_stp_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/transmitted_stp_type (stp-type)

    YANG Description: Transmitted (tx) stp type
    """
    return self.__transmitted_stp_type
      
  def _set_transmitted_stp_type(self, v, load=False):
    """
    Setter method for transmitted_stp_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/transmitted_stp_type (stp-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_transmitted_stp_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_transmitted_stp_type() directly.

    YANG Description: Transmitted (tx) stp type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="transmitted-stp-type", rest_name="transmitted-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """transmitted_stp_type must be of a type compatible with stp-type""",
          'defined-type': "brocade-xstp-ext:stp-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="transmitted-stp-type", rest_name="transmitted-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)""",
        })

    self.__transmitted_stp_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_transmitted_stp_type(self):
    self.__transmitted_stp_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'none': {'value': 1}, u'rstp': {'value': 3}, u'mstp': {'value': 4}, u'rpvstp': {'value': 6}, u'pvstp': {'value': 5}, u'stp': {'value': 2}},), is_leaf=True, yang_name="transmitted-stp-type", rest_name="transmitted-stp-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-type', is_config=True)


  def _get_edge_port(self):
    """
    Getter method for edge_port, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/edge_port (on-off-type)

    YANG Description: Edge Port mode
    """
    return self.__edge_port
      
  def _set_edge_port(self, v, load=False):
    """
    Setter method for edge_port, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/edge_port (on-off-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_edge_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_edge_port() directly.

    YANG Description: Edge Port mode
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="edge-port", rest_name="edge-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """edge_port must be of a type compatible with on-off-type""",
          'defined-type': "brocade-xstp-ext:on-off-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="edge-port", rest_name="edge-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)""",
        })

    self.__edge_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_edge_port(self):
    self.__edge_port = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="edge-port", rest_name="edge-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)


  def _get_auto_edge(self):
    """
    Getter method for auto_edge, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/auto_edge (yes-no-type)

    YANG Description: Auto Edge
    """
    return self.__auto_edge
      
  def _set_auto_edge(self, v, load=False):
    """
    Setter method for auto_edge, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/auto_edge (yes-no-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_auto_edge is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_auto_edge() directly.

    YANG Description: Auto Edge
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="auto-edge", rest_name="auto-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """auto_edge must be of a type compatible with yes-no-type""",
          'defined-type': "brocade-xstp-ext:yes-no-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="auto-edge", rest_name="auto-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)""",
        })

    self.__auto_edge = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_auto_edge(self):
    self.__auto_edge = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="auto-edge", rest_name="auto-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)


  def _get_admin_edge(self):
    """
    Getter method for admin_edge, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/admin_edge (yes-no-type)

    YANG Description: Admin Edge
    """
    return self.__admin_edge
      
  def _set_admin_edge(self, v, load=False):
    """
    Setter method for admin_edge, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/admin_edge (yes-no-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_admin_edge is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_admin_edge() directly.

    YANG Description: Admin Edge
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="admin-edge", rest_name="admin-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """admin_edge must be of a type compatible with yes-no-type""",
          'defined-type': "brocade-xstp-ext:yes-no-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="admin-edge", rest_name="admin-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)""",
        })

    self.__admin_edge = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_admin_edge(self):
    self.__admin_edge = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="admin-edge", rest_name="admin-edge", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)


  def _get_edge_delay(self):
    """
    Getter method for edge_delay, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/edge_delay (uint32)

    YANG Description: Edge delay
    """
    return self.__edge_delay
      
  def _set_edge_delay(self, v, load=False):
    """
    Setter method for edge_delay, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/edge_delay (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_edge_delay is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_edge_delay() directly.

    YANG Description: Edge delay
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="edge-delay", rest_name="edge-delay", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """edge_delay must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="edge-delay", rest_name="edge-delay", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)""",
        })

    self.__edge_delay = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_edge_delay(self):
    self.__edge_delay = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="edge-delay", rest_name="edge-delay", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint32', is_config=True)


  def _get_configured_root_guard(self):
    """
    Getter method for configured_root_guard, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/configured_root_guard (on-off-type)

    YANG Description: Configured root guard
    """
    return self.__configured_root_guard
      
  def _set_configured_root_guard(self, v, load=False):
    """
    Setter method for configured_root_guard, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/configured_root_guard (on-off-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_configured_root_guard is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_configured_root_guard() directly.

    YANG Description: Configured root guard
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="configured-root-guard", rest_name="configured-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """configured_root_guard must be of a type compatible with on-off-type""",
          'defined-type': "brocade-xstp-ext:on-off-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="configured-root-guard", rest_name="configured-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)""",
        })

    self.__configured_root_guard = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_configured_root_guard(self):
    self.__configured_root_guard = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="configured-root-guard", rest_name="configured-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)


  def _get_oper_root_guard(self):
    """
    Getter method for oper_root_guard, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/oper_root_guard (on-off-type)

    YANG Description: Operational root guard
    """
    return self.__oper_root_guard
      
  def _set_oper_root_guard(self, v, load=False):
    """
    Setter method for oper_root_guard, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/oper_root_guard (on-off-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_root_guard is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_root_guard() directly.

    YANG Description: Operational root guard
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-root-guard", rest_name="oper-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_root_guard must be of a type compatible with on-off-type""",
          'defined-type': "brocade-xstp-ext:on-off-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-root-guard", rest_name="oper-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)""",
        })

    self.__oper_root_guard = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_root_guard(self):
    self.__oper_root_guard = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-root-guard", rest_name="oper-root-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)


  def _get_boundary_port(self):
    """
    Getter method for boundary_port, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/boundary_port (yes-no-type)

    YANG Description: Is boundary
    """
    return self.__boundary_port
      
  def _set_boundary_port(self, v, load=False):
    """
    Setter method for boundary_port, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/boundary_port (yes-no-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_boundary_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_boundary_port() directly.

    YANG Description: Is boundary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="boundary-port", rest_name="boundary-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """boundary_port must be of a type compatible with yes-no-type""",
          'defined-type': "brocade-xstp-ext:yes-no-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="boundary-port", rest_name="boundary-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)""",
        })

    self.__boundary_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_boundary_port(self):
    self.__boundary_port = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'yes': {'value': 2}, u'no': {'value': 1}},), is_leaf=True, yang_name="boundary-port", rest_name="boundary-port", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='yes-no-type', is_config=True)


  def _get_oper_bpdu_guard(self):
    """
    Getter method for oper_bpdu_guard, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/oper_bpdu_guard (on-off-type)

    YANG Description: Operational BPDU guard
    """
    return self.__oper_bpdu_guard
      
  def _set_oper_bpdu_guard(self, v, load=False):
    """
    Setter method for oper_bpdu_guard, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/oper_bpdu_guard (on-off-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_bpdu_guard is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_bpdu_guard() directly.

    YANG Description: Operational BPDU guard
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-guard", rest_name="oper-bpdu-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_bpdu_guard must be of a type compatible with on-off-type""",
          'defined-type': "brocade-xstp-ext:on-off-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-guard", rest_name="oper-bpdu-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)""",
        })

    self.__oper_bpdu_guard = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_bpdu_guard(self):
    self.__oper_bpdu_guard = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-guard", rest_name="oper-bpdu-guard", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)


  def _get_oper_bpdu_filter(self):
    """
    Getter method for oper_bpdu_filter, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/oper_bpdu_filter (on-off-type)

    YANG Description: Pperational BPDU filter
    """
    return self.__oper_bpdu_filter
      
  def _set_oper_bpdu_filter(self, v, load=False):
    """
    Setter method for oper_bpdu_filter, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/oper_bpdu_filter (on-off-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_oper_bpdu_filter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_oper_bpdu_filter() directly.

    YANG Description: Pperational BPDU filter
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-filter", rest_name="oper-bpdu-filter", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """oper_bpdu_filter must be of a type compatible with on-off-type""",
          'defined-type': "brocade-xstp-ext:on-off-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-filter", rest_name="oper-bpdu-filter", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)""",
        })

    self.__oper_bpdu_filter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_oper_bpdu_filter(self):
    self.__oper_bpdu_filter = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 2}, u'off': {'value': 1}},), is_leaf=True, yang_name="oper-bpdu-filter", rest_name="oper-bpdu-filter", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='on-off-type', is_config=True)


  def _get_link_type(self):
    """
    Getter method for link_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/link_type (stp-link-type)
    """
    return self.__link_type
      
  def _set_link_type(self, v, load=False):
    """
    Setter method for link_type, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/link_type (stp-link-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_link_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_link_type() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'shared': {'value': 2}, u'point-to-point': {'value': 1}},), is_leaf=True, yang_name="link-type", rest_name="link-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-link-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """link_type must be of a type compatible with stp-link-type""",
          'defined-type': "brocade-xstp-ext:stp-link-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'shared': {'value': 2}, u'point-to-point': {'value': 1}},), is_leaf=True, yang_name="link-type", rest_name="link-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-link-type', is_config=True)""",
        })

    self.__link_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_link_type(self):
    self.__link_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'shared': {'value': 2}, u'point-to-point': {'value': 1}},), is_leaf=True, yang_name="link-type", rest_name="link-type", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='stp-link-type', is_config=True)


  def _get_rx_bpdu_count(self):
    """
    Getter method for rx_bpdu_count, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/rx_bpdu_count (uint64)

    YANG Description: Received Bpdu count
    """
    return self.__rx_bpdu_count
      
  def _set_rx_bpdu_count(self, v, load=False):
    """
    Setter method for rx_bpdu_count, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/rx_bpdu_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rx_bpdu_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rx_bpdu_count() directly.

    YANG Description: Received Bpdu count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bpdu-count", rest_name="rx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rx_bpdu_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bpdu-count", rest_name="rx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)""",
        })

    self.__rx_bpdu_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rx_bpdu_count(self):
    self.__rx_bpdu_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="rx-bpdu-count", rest_name="rx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)


  def _get_tx_bpdu_count(self):
    """
    Getter method for tx_bpdu_count, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/tx_bpdu_count (uint64)

    YANG Description: Transmitted Bpdu count
    """
    return self.__tx_bpdu_count
      
  def _set_tx_bpdu_count(self, v, load=False):
    """
    Setter method for tx_bpdu_count, mapped from YANG variable /brocade_xstp_ext_rpc/get_stp_brief_info/output/spanning_tree_info/mstp/port/tx_bpdu_count (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tx_bpdu_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tx_bpdu_count() directly.

    YANG Description: Transmitted Bpdu count
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bpdu-count", rest_name="tx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tx_bpdu_count must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bpdu-count", rest_name="tx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)""",
        })

    self.__tx_bpdu_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tx_bpdu_count(self):
    self.__tx_bpdu_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), is_leaf=True, yang_name="tx-bpdu-count", rest_name="tx-bpdu-count", parent=self, choice=(u'spanning-tree-mode', u'mstp'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-xstp-ext', defining_module='brocade-xstp-ext', yang_type='uint64', is_config=True)

  interface_type = __builtin__.property(_get_interface_type, _set_interface_type)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  spanningtree_enabled = __builtin__.property(_get_spanningtree_enabled, _set_spanningtree_enabled)
  if_index = __builtin__.property(_get_if_index, _set_if_index)
  interface_id = __builtin__.property(_get_interface_id, _set_interface_id)
  if_role = __builtin__.property(_get_if_role, _set_if_role)
  if_state = __builtin__.property(_get_if_state, _set_if_state)
  external_path_cost = __builtin__.property(_get_external_path_cost, _set_external_path_cost)
  internal_path_cost = __builtin__.property(_get_internal_path_cost, _set_internal_path_cost)
  configured_path_cost = __builtin__.property(_get_configured_path_cost, _set_configured_path_cost)
  designated_port_id = __builtin__.property(_get_designated_port_id, _set_designated_port_id)
  port_priority = __builtin__.property(_get_port_priority, _set_port_priority)
  designated_bridge_id = __builtin__.property(_get_designated_bridge_id, _set_designated_bridge_id)
  port_hello_time = __builtin__.property(_get_port_hello_time, _set_port_hello_time)
  forward_transitions_count = __builtin__.property(_get_forward_transitions_count, _set_forward_transitions_count)
  received_stp_type = __builtin__.property(_get_received_stp_type, _set_received_stp_type)
  transmitted_stp_type = __builtin__.property(_get_transmitted_stp_type, _set_transmitted_stp_type)
  edge_port = __builtin__.property(_get_edge_port, _set_edge_port)
  auto_edge = __builtin__.property(_get_auto_edge, _set_auto_edge)
  admin_edge = __builtin__.property(_get_admin_edge, _set_admin_edge)
  edge_delay = __builtin__.property(_get_edge_delay, _set_edge_delay)
  configured_root_guard = __builtin__.property(_get_configured_root_guard, _set_configured_root_guard)
  oper_root_guard = __builtin__.property(_get_oper_root_guard, _set_oper_root_guard)
  boundary_port = __builtin__.property(_get_boundary_port, _set_boundary_port)
  oper_bpdu_guard = __builtin__.property(_get_oper_bpdu_guard, _set_oper_bpdu_guard)
  oper_bpdu_filter = __builtin__.property(_get_oper_bpdu_filter, _set_oper_bpdu_filter)
  link_type = __builtin__.property(_get_link_type, _set_link_type)
  rx_bpdu_count = __builtin__.property(_get_rx_bpdu_count, _set_rx_bpdu_count)
  tx_bpdu_count = __builtin__.property(_get_tx_bpdu_count, _set_tx_bpdu_count)

  __choices__ = {u'spanning-tree-mode': {u'mstp': [u'interface_type', u'interface_name', u'spanningtree_enabled', u'if_index', u'interface_id', u'if_role', u'if_state', u'external_path_cost', u'internal_path_cost', u'configured_path_cost', u'designated_port_id', u'port_priority', u'designated_bridge_id', u'port_hello_time', u'forward_transitions_count', u'received_stp_type', u'transmitted_stp_type', u'edge_port', u'auto_edge', u'admin_edge', u'edge_delay', u'configured_root_guard', u'oper_root_guard', u'boundary_port', u'oper_bpdu_guard', u'oper_bpdu_filter', u'link_type', u'rx_bpdu_count', u'tx_bpdu_count']}}
  _pyangbind_elements = {'interface_type': interface_type, 'interface_name': interface_name, 'spanningtree_enabled': spanningtree_enabled, 'if_index': if_index, 'interface_id': interface_id, 'if_role': if_role, 'if_state': if_state, 'external_path_cost': external_path_cost, 'internal_path_cost': internal_path_cost, 'configured_path_cost': configured_path_cost, 'designated_port_id': designated_port_id, 'port_priority': port_priority, 'designated_bridge_id': designated_bridge_id, 'port_hello_time': port_hello_time, 'forward_transitions_count': forward_transitions_count, 'received_stp_type': received_stp_type, 'transmitted_stp_type': transmitted_stp_type, 'edge_port': edge_port, 'auto_edge': auto_edge, 'admin_edge': admin_edge, 'edge_delay': edge_delay, 'configured_root_guard': configured_root_guard, 'oper_root_guard': oper_root_guard, 'boundary_port': boundary_port, 'oper_bpdu_guard': oper_bpdu_guard, 'oper_bpdu_filter': oper_bpdu_filter, 'link_type': link_type, 'rx_bpdu_count': rx_bpdu_count, 'tx_bpdu_count': tx_bpdu_count, }


