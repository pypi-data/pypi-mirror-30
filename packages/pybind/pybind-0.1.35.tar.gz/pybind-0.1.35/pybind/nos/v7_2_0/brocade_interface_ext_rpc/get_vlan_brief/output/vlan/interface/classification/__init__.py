
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class classification(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface-ext - based on the path /brocade_interface_ext_rpc/get-vlan-brief/output/vlan/interface/classification. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This specifies the list of vlan classifications applied 
on a given vlan and an interface pair.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__classification_type','__classification_value',)

  _yang_name = 'classification'
  _rest_name = 'classification'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__classification_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="classification-value", rest_name="classification-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    self.__classification_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mac-group': {'value': 4}, u'ctag': {'value': 1}, u'none': {'value': 0}, u'mac': {'value': 2}, u'vni': {'value': 3}},), is_leaf=True, yang_name="classification-type", rest_name="classification-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_interface_ext_rpc', u'get-vlan-brief', u'output', u'vlan', u'interface', u'classification']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-vlan-brief', u'output', u'vlan', u'interface', u'classification']

  def _get_classification_type(self):
    """
    Getter method for classification_type, mapped from YANG variable /brocade_interface_ext_rpc/get_vlan_brief/output/vlan/interface/classification/classification_type (enumeration)

    YANG Description: This specifies the type of classifications,
which can be ctag, mac or vni.
    """
    return self.__classification_type
      
  def _set_classification_type(self, v, load=False):
    """
    Setter method for classification_type, mapped from YANG variable /brocade_interface_ext_rpc/get_vlan_brief/output/vlan/interface/classification/classification_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classification_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classification_type() directly.

    YANG Description: This specifies the type of classifications,
which can be ctag, mac or vni.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mac-group': {'value': 4}, u'ctag': {'value': 1}, u'none': {'value': 0}, u'mac': {'value': 2}, u'vni': {'value': 3}},), is_leaf=True, yang_name="classification-type", rest_name="classification-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classification_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-interface-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mac-group': {'value': 4}, u'ctag': {'value': 1}, u'none': {'value': 0}, u'mac': {'value': 2}, u'vni': {'value': 3}},), is_leaf=True, yang_name="classification-type", rest_name="classification-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__classification_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classification_type(self):
    self.__classification_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'mac-group': {'value': 4}, u'ctag': {'value': 1}, u'none': {'value': 0}, u'mac': {'value': 2}, u'vni': {'value': 3}},), is_leaf=True, yang_name="classification-type", rest_name="classification-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='enumeration', is_config=True)


  def _get_classification_value(self):
    """
    Getter method for classification_value, mapped from YANG variable /brocade_interface_ext_rpc/get_vlan_brief/output/vlan/interface/classification/classification_value (string)

    YANG Description: This specifies value of the vlan classification.
    """
    return self.__classification_value
      
  def _set_classification_value(self, v, load=False):
    """
    Setter method for classification_value, mapped from YANG variable /brocade_interface_ext_rpc/get_vlan_brief/output/vlan/interface/classification/classification_value (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_classification_value is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_classification_value() directly.

    YANG Description: This specifies value of the vlan classification.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="classification-value", rest_name="classification-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """classification_value must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="classification-value", rest_name="classification-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)""",
        })

    self.__classification_value = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_classification_value(self):
    self.__classification_value = YANGDynClass(base=unicode, is_leaf=True, yang_name="classification-value", rest_name="classification-value", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-interface-ext', defining_module='brocade-interface-ext', yang_type='string', is_config=True)

  classification_type = __builtin__.property(_get_classification_type, _set_classification_type)
  classification_value = __builtin__.property(_get_classification_value, _set_classification_value)


  _pyangbind_elements = {'classification_type': classification_type, 'classification_value': classification_value, }


