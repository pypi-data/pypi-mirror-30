
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class isns_discovery_domain(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isns - based on the path /isns/isns-vrf/isns-discovery-domain. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This specifies configurations of Discovery Domain.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__isns_discovery_domain_name','__isns_device',)

  _yang_name = 'isns-discovery-domain'
  _rest_name = 'discovery-domain'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__isns_device = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-.:0-9a-zA-Z]{1,223}', 'length': [u'1..223']})), is_leaf=False, yang_name="isns-device", rest_name="isns-device", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-flat-list-syntax': None, u'hidden': u'isns-device', u'info': u'Configure isns device for a discovery domain'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-device-name-type', is_config=True)
    self.__isns_discovery_domain_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS Discovery Domain Name (Max Size - 256)', u'hidden': u'isns-discovery-domain-name'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-dd-name-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isns', u'isns-vrf', u'isns-discovery-domain']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isns', u'vrf-forwarding', u'discovery-domain']

  def _get_isns_discovery_domain_name(self):
    """
    Getter method for isns_discovery_domain_name, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain/isns_discovery_domain_name (isns-dd-name-type)

    YANG Description: This specifies the name for the Discovery Domain.
    """
    return self.__isns_discovery_domain_name
      
  def _set_isns_discovery_domain_name(self, v, load=False):
    """
    Setter method for isns_discovery_domain_name, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain/isns_discovery_domain_name (isns-dd-name-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_discovery_domain_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_discovery_domain_name() directly.

    YANG Description: This specifies the name for the Discovery Domain.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS Discovery Domain Name (Max Size - 256)', u'hidden': u'isns-discovery-domain-name'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-dd-name-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_discovery_domain_name must be of a type compatible with isns-dd-name-type""",
          'defined-type': "brocade-isns:isns-dd-name-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS Discovery Domain Name (Max Size - 256)', u'hidden': u'isns-discovery-domain-name'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-dd-name-type', is_config=True)""",
        })

    self.__isns_discovery_domain_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_discovery_domain_name(self):
    self.__isns_discovery_domain_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS Discovery Domain Name (Max Size - 256)', u'hidden': u'isns-discovery-domain-name'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-dd-name-type', is_config=True)


  def _get_isns_device(self):
    """
    Getter method for isns_device, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain/isns_device (isns-device-name-type)

    YANG Description: This specifies the devices under discovery domain.
    """
    return self.__isns_device
      
  def _set_isns_device(self, v, load=False):
    """
    Setter method for isns_device, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain/isns_device (isns-device-name-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_device is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_device() directly.

    YANG Description: This specifies the devices under discovery domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-.:0-9a-zA-Z]{1,223}', 'length': [u'1..223']})), is_leaf=False, yang_name="isns-device", rest_name="isns-device", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-flat-list-syntax': None, u'hidden': u'isns-device', u'info': u'Configure isns device for a discovery domain'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-device-name-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_device must be of a type compatible with isns-device-name-type""",
          'defined-type': "brocade-isns:isns-device-name-type",
          'generated-type': """YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-.:0-9a-zA-Z]{1,223}', 'length': [u'1..223']})), is_leaf=False, yang_name="isns-device", rest_name="isns-device", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-flat-list-syntax': None, u'hidden': u'isns-device', u'info': u'Configure isns device for a discovery domain'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-device-name-type', is_config=True)""",
        })

    self.__isns_device = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_device(self):
    self.__isns_device = YANGDynClass(base=TypedListType(allowed_type=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-.:0-9a-zA-Z]{1,223}', 'length': [u'1..223']})), is_leaf=False, yang_name="isns-device", rest_name="isns-device", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-flat-list-syntax': None, u'hidden': u'isns-device', u'info': u'Configure isns device for a discovery domain'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-device-name-type', is_config=True)

  isns_discovery_domain_name = __builtin__.property(_get_isns_discovery_domain_name, _set_isns_discovery_domain_name)
  isns_device = __builtin__.property(_get_isns_device, _set_isns_device)


  _pyangbind_elements = {'isns_discovery_domain_name': isns_discovery_domain_name, 'isns_device': isns_device, }


