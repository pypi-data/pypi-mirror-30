
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import isns_discovery_domain
import isns_discovery_domain_set
class isns_vrf(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isns - based on the path /isns/isns-vrf. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: List of Discovery Domain Parameters.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__isns_vrf_instance','__isns_ipaddress','__esi_timeout','__isns_discovery_domain','__isns_discovery_domain_set',)

  _yang_name = 'isns-vrf'
  _rest_name = 'vrf-forwarding'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__isns_discovery_domain = YANGDynClass(base=YANGListType("isns_discovery_domain_name",isns_discovery_domain.isns_discovery_domain, yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}), is_container='list', yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)
    self.__isns_vrf_instance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1']}), is_leaf=True, yang_name="isns-vrf-instance", rest_name="isns-vrf-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding value 1', u'cli-drop-node-name': None, u'hidden': u'isns-vrf-instance'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-vrf-type', is_config=True)
    self.__esi_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120..3600']}), is_leaf=True, yang_name="esi-timeout", rest_name="esi-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding esi timeout.Default esi time is 300.', u'hidden': u'esi-timeout'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='esi-time', is_config=True)
    self.__isns_discovery_domain_set = YANGDynClass(base=YANGListType("isns_discovery_domain_set_name",isns_discovery_domain_set.isns_discovery_domain_set, yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-set-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}), is_container='list', yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)
    self.__isns_ipaddress = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="isns-ipaddress", rest_name="isns-ipaddress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding IP address A.B.C.D format', u'hidden': u'isns-ipaddress'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='inet:ip-address', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'isns', u'isns-vrf']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isns', u'vrf-forwarding']

  def _get_isns_vrf_instance(self):
    """
    Getter method for isns_vrf_instance, mapped from YANG variable /isns/isns_vrf/isns_vrf_instance (isns-vrf-type)

    YANG Description: This specifies iSNS VRF Instance.
    """
    return self.__isns_vrf_instance
      
  def _set_isns_vrf_instance(self, v, load=False):
    """
    Setter method for isns_vrf_instance, mapped from YANG variable /isns/isns_vrf/isns_vrf_instance (isns-vrf-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_vrf_instance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_vrf_instance() directly.

    YANG Description: This specifies iSNS VRF Instance.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1']}), is_leaf=True, yang_name="isns-vrf-instance", rest_name="isns-vrf-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding value 1', u'cli-drop-node-name': None, u'hidden': u'isns-vrf-instance'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-vrf-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_vrf_instance must be of a type compatible with isns-vrf-type""",
          'defined-type': "brocade-isns:isns-vrf-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1']}), is_leaf=True, yang_name="isns-vrf-instance", rest_name="isns-vrf-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding value 1', u'cli-drop-node-name': None, u'hidden': u'isns-vrf-instance'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-vrf-type', is_config=True)""",
        })

    self.__isns_vrf_instance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_vrf_instance(self):
    self.__isns_vrf_instance = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1']}), is_leaf=True, yang_name="isns-vrf-instance", rest_name="isns-vrf-instance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding value 1', u'cli-drop-node-name': None, u'hidden': u'isns-vrf-instance'}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='isns-vrf-type', is_config=True)


  def _get_isns_ipaddress(self):
    """
    Getter method for isns_ipaddress, mapped from YANG variable /isns/isns_vrf/isns_ipaddress (inet:ip-address)

    YANG Description: This specifies the IP address of the vrf instance.
    """
    return self.__isns_ipaddress
      
  def _set_isns_ipaddress(self, v, load=False):
    """
    Setter method for isns_ipaddress, mapped from YANG variable /isns/isns_vrf/isns_ipaddress (inet:ip-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_ipaddress is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_ipaddress() directly.

    YANG Description: This specifies the IP address of the vrf instance.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="isns-ipaddress", rest_name="isns-ipaddress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding IP address A.B.C.D format', u'hidden': u'isns-ipaddress'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='inet:ip-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_ipaddress must be of a type compatible with inet:ip-address""",
          'defined-type': "inet:ip-address",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="isns-ipaddress", rest_name="isns-ipaddress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding IP address A.B.C.D format', u'hidden': u'isns-ipaddress'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='inet:ip-address', is_config=True)""",
        })

    self.__isns_ipaddress = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_ipaddress(self):
    self.__isns_ipaddress = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}),RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'}),], is_leaf=True, yang_name="isns-ipaddress", rest_name="isns-ipaddress", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding IP address A.B.C.D format', u'hidden': u'isns-ipaddress'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='inet:ip-address', is_config=True)


  def _get_esi_timeout(self):
    """
    Getter method for esi_timeout, mapped from YANG variable /isns/isns_vrf/esi_timeout (esi-time)

    YANG Description: This specifies VRF instance esi timeout.
    """
    return self.__esi_timeout
      
  def _set_esi_timeout(self, v, load=False):
    """
    Setter method for esi_timeout, mapped from YANG variable /isns/isns_vrf/esi_timeout (esi-time)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_esi_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_esi_timeout() directly.

    YANG Description: This specifies VRF instance esi timeout.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120..3600']}), is_leaf=True, yang_name="esi-timeout", rest_name="esi-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding esi timeout.Default esi time is 300.', u'hidden': u'esi-timeout'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='esi-time', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """esi_timeout must be of a type compatible with esi-time""",
          'defined-type': "brocade-isns:esi-time",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120..3600']}), is_leaf=True, yang_name="esi-timeout", rest_name="esi-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding esi timeout.Default esi time is 300.', u'hidden': u'esi-timeout'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='esi-time', is_config=True)""",
        })

    self.__esi_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_esi_timeout(self):
    self.__esi_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'120..3600']}), is_leaf=True, yang_name="esi-timeout", rest_name="esi-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'iSNS VRF forwarding esi timeout.Default esi time is 300.', u'hidden': u'esi-timeout'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='esi-time', is_config=True)


  def _get_isns_discovery_domain(self):
    """
    Getter method for isns_discovery_domain, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain (list)

    YANG Description: This specifies configurations of Discovery Domain.
    """
    return self.__isns_discovery_domain
      
  def _set_isns_discovery_domain(self, v, load=False):
    """
    Setter method for isns_discovery_domain, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_discovery_domain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_discovery_domain() directly.

    YANG Description: This specifies configurations of Discovery Domain.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("isns_discovery_domain_name",isns_discovery_domain.isns_discovery_domain, yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}), is_container='list', yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_discovery_domain must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("isns_discovery_domain_name",isns_discovery_domain.isns_discovery_domain, yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}), is_container='list', yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)""",
        })

    self.__isns_discovery_domain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_discovery_domain(self):
    self.__isns_discovery_domain = YANGDynClass(base=YANGListType("isns_discovery_domain_name",isns_discovery_domain.isns_discovery_domain, yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}), is_container='list', yang_name="isns-discovery-domain", rest_name="discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain', u'hidden': u'isns-discovery-domain', u'callpoint': u'isns_discovery_domain_cp', u'cli-mode-name': u'config-dd-$(isns-discovery-domain-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)


  def _get_isns_discovery_domain_set(self):
    """
    Getter method for isns_discovery_domain_set, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain_set (list)

    YANG Description: List of Discovery Domain Set Parameters.
    """
    return self.__isns_discovery_domain_set
      
  def _set_isns_discovery_domain_set(self, v, load=False):
    """
    Setter method for isns_discovery_domain_set, mapped from YANG variable /isns/isns_vrf/isns_discovery_domain_set (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_discovery_domain_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_discovery_domain_set() directly.

    YANG Description: List of Discovery Domain Set Parameters.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("isns_discovery_domain_set_name",isns_discovery_domain_set.isns_discovery_domain_set, yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-set-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}), is_container='list', yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_discovery_domain_set must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("isns_discovery_domain_set_name",isns_discovery_domain_set.isns_discovery_domain_set, yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-set-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}), is_container='list', yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)""",
        })

    self.__isns_discovery_domain_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_discovery_domain_set(self):
    self.__isns_discovery_domain_set = YANGDynClass(base=YANGListType("isns_discovery_domain_set_name",isns_discovery_domain_set.isns_discovery_domain_set, yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='isns-discovery-domain-set-name', extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}), is_container='list', yang_name="isns-discovery-domain-set", rest_name="discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure Discovery Domain Set Parameters', u'cli-no-key-completion': None, u'alt-name': u'discovery-domain-set', u'hidden': u'isns-discovery-domain-set', u'callpoint': u'isns_discovery_domain_set_cp', u'cli-mode-name': u'config-dds-$(isns-discovery-domain-set-name)'}}, namespace='urn:brocade.com:mgmt:brocade-isns', defining_module='brocade-isns', yang_type='list', is_config=True)

  isns_vrf_instance = __builtin__.property(_get_isns_vrf_instance, _set_isns_vrf_instance)
  isns_ipaddress = __builtin__.property(_get_isns_ipaddress, _set_isns_ipaddress)
  esi_timeout = __builtin__.property(_get_esi_timeout, _set_esi_timeout)
  isns_discovery_domain = __builtin__.property(_get_isns_discovery_domain, _set_isns_discovery_domain)
  isns_discovery_domain_set = __builtin__.property(_get_isns_discovery_domain_set, _set_isns_discovery_domain_set)


  _pyangbind_elements = {'isns_vrf_instance': isns_vrf_instance, 'isns_ipaddress': isns_ipaddress, 'esi_timeout': esi_timeout, 'isns_discovery_domain': isns_discovery_domain, 'isns_discovery_domain_set': isns_discovery_domain_set, }


