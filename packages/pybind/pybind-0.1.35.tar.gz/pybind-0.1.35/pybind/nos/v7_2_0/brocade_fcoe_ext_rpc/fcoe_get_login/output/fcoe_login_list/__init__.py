
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class fcoe_login_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fcoe-ext - based on the path /brocade_fcoe_ext_rpc/fcoe-get-login/output/fcoe-login-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This is a list of logged-in FCoE End nodes. 
Each row represents a logged-in FCoE device 
operational details such as ethernet port number, 
the WWN and MAC address of the device that has 
logged in and session MAC. The session MAC is used
as the key for this list as it will be unique 
for each entry.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__fcoe_login_session_mac','__fcoe_login_fcoe_interface_name','__fcoe_login_interface_name','__interface_type','__interface_name','__fcoe_login_device_wwn','__fcoe_login_device_mac','__fcoe_login_direct_attached','__fcoe_login_connected_peer_type',)

  _yang_name = 'fcoe-login-list'
  _rest_name = 'fcoe-login-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__fcoe_login_device_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-login-device-wwn", rest_name="fcoe-login-device-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)
    self.__fcoe_login_direct_attached = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-login-direct-attached", rest_name="fcoe-login-direct-attached", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)
    self.__fcoe_login_connected_peer_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'peer-fcf': {'value': 1}, u'peer-fcoe-device': {'value': 2}},), is_leaf=True, yang_name="fcoe-login-connected-peer-type", rest_name="fcoe-login-connected-peer-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)
    self.__fcoe_login_device_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-device-mac", rest_name="fcoe-login-device-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    self.__fcoe_login_interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),], is_leaf=True, yang_name="fcoe-login-interface-name", rest_name="fcoe-login-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)
    self.__fcoe_login_session_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-session-mac", rest_name="fcoe-login-session-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    self.__fcoe_login_fcoe_interface_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-fcoe-interface-name", rest_name="fcoe-login-fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_fcoe_ext_rpc', u'fcoe-get-login', u'output', u'fcoe-login-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'fcoe-get-login', u'output', u'fcoe-login-list']

  def _get_fcoe_login_session_mac(self):
    """
    Getter method for fcoe_login_session_mac, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_session_mac (yang:mac-address)

    YANG Description: This leaf indicates the fabric assigned 
session MAC address of the End Node.
    """
    return self.__fcoe_login_session_mac
      
  def _set_fcoe_login_session_mac(self, v, load=False):
    """
    Setter method for fcoe_login_session_mac, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_session_mac (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_session_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_session_mac() directly.

    YANG Description: This leaf indicates the fabric assigned 
session MAC address of the End Node.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-session-mac", rest_name="fcoe-login-session-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_session_mac must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-session-mac", rest_name="fcoe-login-session-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__fcoe_login_session_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_session_mac(self):
    self.__fcoe_login_session_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-session-mac", rest_name="fcoe-login-session-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)


  def _get_fcoe_login_fcoe_interface_name(self):
    """
    Getter method for fcoe_login_fcoe_interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_fcoe_interface_name (fcoe:interface-fcoe-type)

    YANG Description: This leaf indicates the FCoE interface name.
    """
    return self.__fcoe_login_fcoe_interface_name
      
  def _set_fcoe_login_fcoe_interface_name(self, v, load=False):
    """
    Setter method for fcoe_login_fcoe_interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_fcoe_interface_name (fcoe:interface-fcoe-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_fcoe_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_fcoe_interface_name() directly.

    YANG Description: This leaf indicates the FCoE interface name.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-fcoe-interface-name", rest_name="fcoe-login-fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_fcoe_interface_name must be of a type compatible with fcoe:interface-fcoe-type""",
          'defined-type': "fcoe:interface-fcoe-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-fcoe-interface-name", rest_name="fcoe-login-fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)""",
        })

    self.__fcoe_login_fcoe_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_fcoe_interface_name(self):
    self.__fcoe_login_fcoe_interface_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-login-fcoe-interface-name", rest_name="fcoe-login-fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)


  def _get_fcoe_login_interface_name(self):
    """
    Getter method for fcoe_login_interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_interface_name (union)

    YANG Description: This leaf indicates the Interface name.
This leaf will be deprecated, and the
interface-name leaf in the interface-name-info
grouping should be used instead.
    """
    return self.__fcoe_login_interface_name
      
  def _set_fcoe_login_interface_name(self, v, load=False):
    """
    Setter method for fcoe_login_interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_interface_name() directly.

    YANG Description: This leaf indicates the Interface name.
This leaf will be deprecated, and the
interface-name leaf in the interface-name-info
grouping should be used instead.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),], is_leaf=True, yang_name="fcoe-login-interface-name", rest_name="fcoe-login-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_interface_name must be of a type compatible with union""",
          'defined-type': "brocade-fcoe-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),], is_leaf=True, yang_name="fcoe-login-interface-name", rest_name="fcoe-login-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)""",
        })

    self.__fcoe_login_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_interface_name(self):
    self.__fcoe_login_interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),], is_leaf=True, yang_name="fcoe-login-interface-name", rest_name="fcoe-login-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)


  def _get_interface_type(self):
    """
    Getter method for interface_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/interface_type (enumeration)

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    return self.__interface_type
      
  def _set_interface_type(self, v, load=False):
    """
    Setter method for interface_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_type() directly.

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-fcoe-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_type(self):
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/interface_name (union)

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
gigabitethernet        [rbridge-id]/slot/port
tengigabitethernet     [rbridge-id]/slot/port
fortygigabitethernet   [rbridge-id]/slot/port
hundredgigabitethernet [rbridge-id]/slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
gigabitethernet        [rbridge-id]/slot/port
tengigabitethernet     [rbridge-id]/slot/port
fortygigabitethernet   [rbridge-id]/slot/port
hundredgigabitethernet [rbridge-id]/slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with union""",
          'defined-type': "brocade-fcoe-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)


  def _get_fcoe_login_device_wwn(self):
    """
    Getter method for fcoe_login_device_wwn, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_device_wwn (common-def:wwn-type)

    YANG Description: This leaf indicates the World Wide Name of the
End Node.
    """
    return self.__fcoe_login_device_wwn
      
  def _set_fcoe_login_device_wwn(self, v, load=False):
    """
    Setter method for fcoe_login_device_wwn, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_device_wwn (common-def:wwn-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_device_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_device_wwn() directly.

    YANG Description: This leaf indicates the World Wide Name of the
End Node.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-login-device-wwn", rest_name="fcoe-login-device-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_device_wwn must be of a type compatible with common-def:wwn-type""",
          'defined-type': "common-def:wwn-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-login-device-wwn", rest_name="fcoe-login-device-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)""",
        })

    self.__fcoe_login_device_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_device_wwn(self):
    self.__fcoe_login_device_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-login-device-wwn", rest_name="fcoe-login-device-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)


  def _get_fcoe_login_device_mac(self):
    """
    Getter method for fcoe_login_device_mac, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_device_mac (yang:mac-address)

    YANG Description: This leaf indicates the MAC address of  
the End Node.
    """
    return self.__fcoe_login_device_mac
      
  def _set_fcoe_login_device_mac(self, v, load=False):
    """
    Setter method for fcoe_login_device_mac, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_device_mac (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_device_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_device_mac() directly.

    YANG Description: This leaf indicates the MAC address of  
the End Node.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-device-mac", rest_name="fcoe-login-device-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_device_mac must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-device-mac", rest_name="fcoe-login-device-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__fcoe_login_device_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_device_mac(self):
    self.__fcoe_login_device_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-login-device-mac", rest_name="fcoe-login-device-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)


  def _get_fcoe_login_direct_attached(self):
    """
    Getter method for fcoe_login_direct_attached, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_direct_attached (boolean)

    YANG Description: This leaf indicates if the device is  directly 
connected to the FCF.
                        
The value of 'true' indicates that this device 
is directly attached. The value of 'false' 
indicates that this device is not directly 
attached.
    """
    return self.__fcoe_login_direct_attached
      
  def _set_fcoe_login_direct_attached(self, v, load=False):
    """
    Setter method for fcoe_login_direct_attached, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_direct_attached (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_direct_attached is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_direct_attached() directly.

    YANG Description: This leaf indicates if the device is  directly 
connected to the FCF.
                        
The value of 'true' indicates that this device 
is directly attached. The value of 'false' 
indicates that this device is not directly 
attached.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="fcoe-login-direct-attached", rest_name="fcoe-login-direct-attached", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_direct_attached must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-login-direct-attached", rest_name="fcoe-login-direct-attached", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)""",
        })

    self.__fcoe_login_direct_attached = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_direct_attached(self):
    self.__fcoe_login_direct_attached = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-login-direct-attached", rest_name="fcoe-login-direct-attached", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)


  def _get_fcoe_login_connected_peer_type(self):
    """
    Getter method for fcoe_login_connected_peer_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_connected_peer_type (enumeration)

    YANG Description: This leaf indicates the type of device 
connected to the FCF.
    """
    return self.__fcoe_login_connected_peer_type
      
  def _set_fcoe_login_connected_peer_type(self, v, load=False):
    """
    Setter method for fcoe_login_connected_peer_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_login/output/fcoe_login_list/fcoe_login_connected_peer_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_login_connected_peer_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_login_connected_peer_type() directly.

    YANG Description: This leaf indicates the type of device 
connected to the FCF.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'peer-fcf': {'value': 1}, u'peer-fcoe-device': {'value': 2}},), is_leaf=True, yang_name="fcoe-login-connected-peer-type", rest_name="fcoe-login-connected-peer-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_login_connected_peer_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-fcoe-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'peer-fcf': {'value': 1}, u'peer-fcoe-device': {'value': 2}},), is_leaf=True, yang_name="fcoe-login-connected-peer-type", rest_name="fcoe-login-connected-peer-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__fcoe_login_connected_peer_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_login_connected_peer_type(self):
    self.__fcoe_login_connected_peer_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'peer-fcf': {'value': 1}, u'peer-fcoe-device': {'value': 2}},), is_leaf=True, yang_name="fcoe-login-connected-peer-type", rest_name="fcoe-login-connected-peer-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)

  fcoe_login_session_mac = __builtin__.property(_get_fcoe_login_session_mac, _set_fcoe_login_session_mac)
  fcoe_login_fcoe_interface_name = __builtin__.property(_get_fcoe_login_fcoe_interface_name, _set_fcoe_login_fcoe_interface_name)
  fcoe_login_interface_name = __builtin__.property(_get_fcoe_login_interface_name, _set_fcoe_login_interface_name)
  interface_type = __builtin__.property(_get_interface_type, _set_interface_type)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  fcoe_login_device_wwn = __builtin__.property(_get_fcoe_login_device_wwn, _set_fcoe_login_device_wwn)
  fcoe_login_device_mac = __builtin__.property(_get_fcoe_login_device_mac, _set_fcoe_login_device_mac)
  fcoe_login_direct_attached = __builtin__.property(_get_fcoe_login_direct_attached, _set_fcoe_login_direct_attached)
  fcoe_login_connected_peer_type = __builtin__.property(_get_fcoe_login_connected_peer_type, _set_fcoe_login_connected_peer_type)


  _pyangbind_elements = {'fcoe_login_session_mac': fcoe_login_session_mac, 'fcoe_login_fcoe_interface_name': fcoe_login_fcoe_interface_name, 'fcoe_login_interface_name': fcoe_login_interface_name, 'interface_type': interface_type, 'interface_name': interface_name, 'fcoe_login_device_wwn': fcoe_login_device_wwn, 'fcoe_login_device_mac': fcoe_login_device_mac, 'fcoe_login_direct_attached': fcoe_login_direct_attached, 'fcoe_login_connected_peer_type': fcoe_login_connected_peer_type, }


