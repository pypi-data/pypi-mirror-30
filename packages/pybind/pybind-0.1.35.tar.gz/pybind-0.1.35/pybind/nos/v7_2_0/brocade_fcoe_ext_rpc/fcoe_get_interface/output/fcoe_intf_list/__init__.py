
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class fcoe_intf_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-fcoe-ext - based on the path /brocade_fcoe_ext_rpc/fcoe-get-interface/output/fcoe-intf-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The format of the output for this rpc function 
will be a list of entries. Each row represents a 
FCoE interface operational characteristics such as 
fcoe port number, ethernet port number, the current
operational mode of the port and Tx/Rx stats for 
control traffic on that port.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__fcoe_intf_fcoe_port_id','__fcoe_intf_port_type','__fcoe_intf_config_port_type','__fcoe_intf_port_state','__fcoe_intf_fabric_map_name','__fcoe_intf_eth_port_id','__interface_type','__interface_name','__fcoe_intf_admin_status','__fcoe_intf_peer_fcf_mac','__fcoe_intf_device_count','__fcoe_intf_ifindex','__fcoe_intf_wwn','__fcoe_intf_enode_bind_type','__fcoe_intf_port_bind_type','__fcoe_intf_enode_mac_address','__fcoe_intf_rx_vlan_disc_req','__fcoe_intf_rx_disc_solicitations','__fcoe_intf_rx_flogi','__fcoe_intf_rx_fdiscs','__fcoe_intf_rx_logo','__fcoe_intf_rx_errors','__fcoe_intf_tx_vlan_disc_resp','__fcoe_intf_tx_disc_sol_adv','__fcoe_intf_tx_disc_unsol_adv','__fcoe_intf_rx_enode_ka','__fcoe_intf_rx_vnport_ka','__fcoe_intf_tx_accepts','__fcoe_intf_tx_ls_rjt','__fcoe_intf_time_since_last_change','__fcoe_intf_last_counters_cleared','__fcoe_intf_tx_cvls',)

  _yang_name = 'fcoe-intf-list'
  _rest_name = 'fcoe-intf-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__fcoe_intf_tx_cvls = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-cvls", rest_name="fcoe-intf-tx-cvls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_device_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-device-count", rest_name="fcoe-intf-device-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-errors", rest_name="fcoe-intf-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)
    self.__fcoe_intf_enode_bind_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-enode-bind-type", rest_name="fcoe-intf-enode-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)
    self.__fcoe_intf_rx_flogi = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-flogi", rest_name="fcoe-intf-rx-flogi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_fcoe_port_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-intf-fcoe-port-id", rest_name="fcoe-intf-fcoe-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)
    self.__fcoe_intf_last_counters_cleared = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-last-counters-cleared", rest_name="fcoe-intf-last-counters-cleared", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)
    self.__fcoe_intf_enode_mac_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-enode-mac-address", rest_name="fcoe-intf-enode-mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    self.__fcoe_intf_peer_fcf_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-peer-fcf-mac", rest_name="fcoe-intf-peer-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    self.__fcoe_intf_tx_ls_rjt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-ls-rjt", rest_name="fcoe-intf-tx-ls-rjt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_port_bind_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-port-bind-type", rest_name="fcoe-intf-port-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)
    self.__fcoe_intf_config_port_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-config-port-type", rest_name="fcoe-intf-config-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)
    self.__fcoe_intf_tx_vlan_disc_resp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-vlan-disc-resp", rest_name="fcoe-intf-tx-vlan-disc-resp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_rx_vlan_disc_req = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vlan-disc-req", rest_name="fcoe-intf-rx-vlan-disc-req", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)
    self.__fcoe_intf_fabric_map_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9_]{1,30}'}), is_leaf=True, yang_name="fcoe-intf-fabric-map-name", rest_name="fcoe-intf-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-map-name', is_config=True)
    self.__fcoe_intf_rx_logo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-logo", rest_name="fcoe-intf-rx-logo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_port_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-port-type", rest_name="fcoe-intf-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)
    self.__fcoe_intf_eth_port_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="fcoe-intf-eth-port-id", rest_name="fcoe-intf-eth-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='interface:interface-type', is_config=True)
    self.__fcoe_intf_ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fcoe-intf-ifindex", rest_name="fcoe-intf-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='uint32', is_config=True)
    self.__fcoe_intf_admin_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-intf-admin-status", rest_name="fcoe-intf-admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)
    self.__fcoe_intf_tx_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-accepts", rest_name="fcoe-intf-tx-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_tx_disc_unsol_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-unsol-adv", rest_name="fcoe-intf-tx-disc-unsol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_rx_enode_ka = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-enode-ka", rest_name="fcoe-intf-rx-enode-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_rx_fdiscs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-fdiscs", rest_name="fcoe-intf-rx-fdiscs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_rx_disc_solicitations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-disc-solicitations", rest_name="fcoe-intf-rx-disc-solicitations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_tx_disc_sol_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-sol-adv", rest_name="fcoe-intf-tx-disc-sol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    self.__fcoe_intf_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-intf-wwn", rest_name="fcoe-intf-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)
    self.__fcoe_intf_port_state = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Up|Down|up|down'}), is_leaf=True, yang_name="fcoe-intf-port-state", rest_name="fcoe-intf-port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-state-type', is_config=True)
    self.__fcoe_intf_time_since_last_change = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-time-since-last-change", rest_name="fcoe-intf-time-since-last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)
    self.__fcoe_intf_rx_vnport_ka = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vnport-ka", rest_name="fcoe-intf-rx-vnport-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_fcoe_ext_rpc', u'fcoe-get-interface', u'output', u'fcoe-intf-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'fcoe-get-interface', u'output', u'fcoe-intf-list']

  def _get_fcoe_intf_fcoe_port_id(self):
    """
    Getter method for fcoe_intf_fcoe_port_id, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_fcoe_port_id (fcoe:interface-fcoe-type)

    YANG Description: This indicates the name of this FCoE 
interface.
    """
    return self.__fcoe_intf_fcoe_port_id
      
  def _set_fcoe_intf_fcoe_port_id(self, v, load=False):
    """
    Setter method for fcoe_intf_fcoe_port_id, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_fcoe_port_id (fcoe:interface-fcoe-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_fcoe_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_fcoe_port_id() directly.

    YANG Description: This indicates the name of this FCoE 
interface.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-intf-fcoe-port-id", rest_name="fcoe-intf-fcoe-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_fcoe_port_id must be of a type compatible with fcoe:interface-fcoe-type""",
          'defined-type': "fcoe:interface-fcoe-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-intf-fcoe-port-id", rest_name="fcoe-intf-fcoe-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)""",
        })

    self.__fcoe_intf_fcoe_port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_fcoe_port_id(self):
    self.__fcoe_intf_fcoe_port_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-intf-fcoe-port-id", rest_name="fcoe-intf-fcoe-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe:interface-fcoe-type', is_config=True)


  def _get_fcoe_intf_port_type(self):
    """
    Getter method for fcoe_intf_port_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_port_type (fcoe-port-mode-type)

    YANG Description: This indicates the current operational mode
of this FCoE interface.
    """
    return self.__fcoe_intf_port_type
      
  def _set_fcoe_intf_port_type(self, v, load=False):
    """
    Setter method for fcoe_intf_port_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_port_type (fcoe-port-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_port_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_port_type() directly.

    YANG Description: This indicates the current operational mode
of this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-port-type", rest_name="fcoe-intf-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_port_type must be of a type compatible with fcoe-port-mode-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-port-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-port-type", rest_name="fcoe-intf-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)""",
        })

    self.__fcoe_intf_port_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_port_type(self):
    self.__fcoe_intf_port_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-port-type", rest_name="fcoe-intf-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)


  def _get_fcoe_intf_config_port_type(self):
    """
    Getter method for fcoe_intf_config_port_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_config_port_type (fcoe-port-mode-type)

    YANG Description: This indicates the configured mode of this
FCoE interface.
    """
    return self.__fcoe_intf_config_port_type
      
  def _set_fcoe_intf_config_port_type(self, v, load=False):
    """
    Setter method for fcoe_intf_config_port_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_config_port_type (fcoe-port-mode-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_config_port_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_config_port_type() directly.

    YANG Description: This indicates the configured mode of this
FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-config-port-type", rest_name="fcoe-intf-config-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_config_port_type must be of a type compatible with fcoe-port-mode-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-port-mode-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-config-port-type", rest_name="fcoe-intf-config-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)""",
        })

    self.__fcoe_intf_config_port_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_config_port_type(self):
    self.__fcoe_intf_config_port_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'VF': {'value': 1}},), is_leaf=True, yang_name="fcoe-intf-config-port-type", rest_name="fcoe-intf-config-port-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-mode-type', is_config=True)


  def _get_fcoe_intf_port_state(self):
    """
    Getter method for fcoe_intf_port_state, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_port_state (fcoe-port-state-type)

    YANG Description: This indicates the operational state of the 
FCoE interface.
    """
    return self.__fcoe_intf_port_state
      
  def _set_fcoe_intf_port_state(self, v, load=False):
    """
    Setter method for fcoe_intf_port_state, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_port_state (fcoe-port-state-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_port_state is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_port_state() directly.

    YANG Description: This indicates the operational state of the 
FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Up|Down|up|down'}), is_leaf=True, yang_name="fcoe-intf-port-state", rest_name="fcoe-intf-port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-state-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_port_state must be of a type compatible with fcoe-port-state-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-port-state-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Up|Down|up|down'}), is_leaf=True, yang_name="fcoe-intf-port-state", rest_name="fcoe-intf-port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-state-type', is_config=True)""",
        })

    self.__fcoe_intf_port_state = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_port_state(self):
    self.__fcoe_intf_port_state = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'Up|Down|up|down'}), is_leaf=True, yang_name="fcoe-intf-port-state", rest_name="fcoe-intf-port-state", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-port-state-type', is_config=True)


  def _get_fcoe_intf_fabric_map_name(self):
    """
    Getter method for fcoe_intf_fabric_map_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_fabric_map_name (fcoe-map-name)

    YANG Description: This indicates the fabric map name associated
with this interface.
    """
    return self.__fcoe_intf_fabric_map_name
      
  def _set_fcoe_intf_fabric_map_name(self, v, load=False):
    """
    Setter method for fcoe_intf_fabric_map_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_fabric_map_name (fcoe-map-name)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_fabric_map_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_fabric_map_name() directly.

    YANG Description: This indicates the fabric map name associated
with this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9_]{1,30}'}), is_leaf=True, yang_name="fcoe-intf-fabric-map-name", rest_name="fcoe-intf-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-map-name', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_fabric_map_name must be of a type compatible with fcoe-map-name""",
          'defined-type': "brocade-fcoe-ext:fcoe-map-name",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9_]{1,30}'}), is_leaf=True, yang_name="fcoe-intf-fabric-map-name", rest_name="fcoe-intf-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-map-name', is_config=True)""",
        })

    self.__fcoe_intf_fabric_map_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_fabric_map_name(self):
    self.__fcoe_intf_fabric_map_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[a-zA-Z0-9_]{1,30}'}), is_leaf=True, yang_name="fcoe-intf-fabric-map-name", rest_name="fcoe-intf-fabric-map-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-map-name', is_config=True)


  def _get_fcoe_intf_eth_port_id(self):
    """
    Getter method for fcoe_intf_eth_port_id, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_eth_port_id (interface:interface-type)

    YANG Description: This indicates the name of the ethernet
interface bound by this FCoE interface.
This leaf will be deprecated, and the
interface-name leaf in the interface-name-info
grouping should be used instead.
    """
    return self.__fcoe_intf_eth_port_id
      
  def _set_fcoe_intf_eth_port_id(self, v, load=False):
    """
    Setter method for fcoe_intf_eth_port_id, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_eth_port_id (interface:interface-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_eth_port_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_eth_port_id() directly.

    YANG Description: This indicates the name of the ethernet
interface bound by this FCoE interface.
This leaf will be deprecated, and the
interface-name leaf in the interface-name-info
grouping should be used instead.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="fcoe-intf-eth-port-id", rest_name="fcoe-intf-eth-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='interface:interface-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_eth_port_id must be of a type compatible with interface:interface-type""",
          'defined-type': "interface:interface-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="fcoe-intf-eth-port-id", rest_name="fcoe-intf-eth-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='interface:interface-type', is_config=True)""",
        })

    self.__fcoe_intf_eth_port_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_eth_port_id(self):
    self.__fcoe_intf_eth_port_id = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}), is_leaf=True, yang_name="fcoe-intf-eth-port-id", rest_name="fcoe-intf-eth-port-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='interface:interface-type', is_config=True)


  def _get_interface_type(self):
    """
    Getter method for interface_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/interface_type (enumeration)

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    return self.__interface_type
      
  def _set_interface_type(self, v, load=False):
    """
    Setter method for interface_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/interface_type (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_type() directly.

    YANG Description: The type of the interface. An 'unknown' type 
represents error scenario and should not be used.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_type must be of a type compatible with enumeration""",
          'defined-type': "brocade-fcoe-ext:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)""",
        })

    self.__interface_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_type(self):
    self.__interface_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'port-channel': {'value': 5}, u'loopback': {'value': 7}, u'fortygigabitethernet': {'value': 4}, u'unknown': {'value': 1}, u'gigabitethernet': {'value': 2}, u'tengigabitethernet': {'value': 3}, u'tunnel': {'value': 10}, u'hundredgigabitethernet': {'value': 9}, u'fibrechannel': {'value': 8}, u'l2vlan': {'value': 6}},), is_leaf=True, yang_name="interface-type", rest_name="interface-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u"The type of the interface. An 'unknown' type \nrepresents error scenario and should not be used."}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='enumeration', is_config=True)


  def _get_interface_name(self):
    """
    Getter method for interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/interface_name (union)

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
gigabitethernet        [rbridge-id]/slot/port
tengigabitethernet     [rbridge-id]/slot/port
fortygigabitethernet   [rbridge-id]/slot/port
hundredgigabitethernet [rbridge-id]/slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    return self.__interface_name
      
  def _set_interface_name(self, v, load=False):
    """
    Setter method for interface_name, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/interface_name (union)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_interface_name() directly.

    YANG Description: The Interface value. The interface value is always 
interpreted within the context of the value of 
'interface-type' leaf:

interface-type         interface-name
-----------------      --------------------
gigabitethernet        [rbridge-id]/slot/port
tengigabitethernet     [rbridge-id]/slot/port
fortygigabitethernet   [rbridge-id]/slot/port
hundredgigabitethernet [rbridge-id]/slot/port
port-channel           Port channel ID
l2vlan                 Vlan ID
unknown                Zero-length string.

The value of an 'interface-name' must always be 
consistent with the value of the associated 
'interface-type'.  Attempts to set an interface-name
to a value inconsistent with the associated 
'interface-type' must fail with an error.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """interface_name must be of a type compatible with union""",
          'defined-type': "brocade-fcoe-ext:union",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)""",
        })

    self.__interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_interface_name(self):
    self.__interface_name = YANGDynClass(base=[RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'((([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-3][0-9])/)?(([0-9]|[1][0-6]))/([1-9]|[1-9][0-9]|[1-9][0-9][0-9])(:[1-4])?)', 'length': [u'3..16']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..6144']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..8191']}),RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..100000']}),], is_leaf=True, yang_name="interface-name", rest_name="interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'The Interface value.'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='union', is_config=True)


  def _get_fcoe_intf_admin_status(self):
    """
    Getter method for fcoe_intf_admin_status, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_admin_status (boolean)

    YANG Description: This indicates the administratively 
configured state of the FCoE interface.
    """
    return self.__fcoe_intf_admin_status
      
  def _set_fcoe_intf_admin_status(self, v, load=False):
    """
    Setter method for fcoe_intf_admin_status, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_admin_status (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_admin_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_admin_status() directly.

    YANG Description: This indicates the administratively 
configured state of the FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="fcoe-intf-admin-status", rest_name="fcoe-intf-admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_admin_status must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-intf-admin-status", rest_name="fcoe-intf-admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)""",
        })

    self.__fcoe_intf_admin_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_admin_status(self):
    self.__fcoe_intf_admin_status = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-intf-admin-status", rest_name="fcoe-intf-admin-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='boolean', is_config=True)


  def _get_fcoe_intf_peer_fcf_mac(self):
    """
    Getter method for fcoe_intf_peer_fcf_mac, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_peer_fcf_mac (yang:mac-address)

    YANG Description: The value of this leaf indicates the MAC 
address of the neighboring FCF connected via 
this VE interface.
    """
    return self.__fcoe_intf_peer_fcf_mac
      
  def _set_fcoe_intf_peer_fcf_mac(self, v, load=False):
    """
    Setter method for fcoe_intf_peer_fcf_mac, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_peer_fcf_mac (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_peer_fcf_mac is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_peer_fcf_mac() directly.

    YANG Description: The value of this leaf indicates the MAC 
address of the neighboring FCF connected via 
this VE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-peer-fcf-mac", rest_name="fcoe-intf-peer-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_peer_fcf_mac must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-peer-fcf-mac", rest_name="fcoe-intf-peer-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__fcoe_intf_peer_fcf_mac = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_peer_fcf_mac(self):
    self.__fcoe_intf_peer_fcf_mac = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-peer-fcf-mac", rest_name="fcoe-intf-peer-fcf-mac", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)


  def _get_fcoe_intf_device_count(self):
    """
    Getter method for fcoe_intf_device_count, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_device_count (yang:zero-based-counter32)

    YANG Description: This indicates the number of devices logged in
on this interface.
    """
    return self.__fcoe_intf_device_count
      
  def _set_fcoe_intf_device_count(self, v, load=False):
    """
    Setter method for fcoe_intf_device_count, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_device_count (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_device_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_device_count() directly.

    YANG Description: This indicates the number of devices logged in
on this interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-device-count", rest_name="fcoe-intf-device-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_device_count must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-device-count", rest_name="fcoe-intf-device-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_device_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_device_count(self):
    self.__fcoe_intf_device_count = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-device-count", rest_name="fcoe-intf-device-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_ifindex(self):
    """
    Getter method for fcoe_intf_ifindex, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_ifindex (uint32)

    YANG Description: This indicates the Interface index of the Ethernet
port.
    """
    return self.__fcoe_intf_ifindex
      
  def _set_fcoe_intf_ifindex(self, v, load=False):
    """
    Setter method for fcoe_intf_ifindex, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_ifindex (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_ifindex is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_ifindex() directly.

    YANG Description: This indicates the Interface index of the Ethernet
port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fcoe-intf-ifindex", rest_name="fcoe-intf-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_ifindex must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fcoe-intf-ifindex", rest_name="fcoe-intf-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='uint32', is_config=True)""",
        })

    self.__fcoe_intf_ifindex = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_ifindex(self):
    self.__fcoe_intf_ifindex = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="fcoe-intf-ifindex", rest_name="fcoe-intf-ifindex", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='uint32', is_config=True)


  def _get_fcoe_intf_wwn(self):
    """
    Getter method for fcoe_intf_wwn, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_wwn (common-def:wwn-type)

    YANG Description: This indicates the Fabric WWN of this FCoE 
interface.
    """
    return self.__fcoe_intf_wwn
      
  def _set_fcoe_intf_wwn(self, v, load=False):
    """
    Setter method for fcoe_intf_wwn, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_wwn (common-def:wwn-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_wwn() directly.

    YANG Description: This indicates the Fabric WWN of this FCoE 
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-intf-wwn", rest_name="fcoe-intf-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_wwn must be of a type compatible with common-def:wwn-type""",
          'defined-type': "common-def:wwn-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-intf-wwn", rest_name="fcoe-intf-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)""",
        })

    self.__fcoe_intf_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_wwn(self):
    self.__fcoe_intf_wwn = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]:[0-9a-fA-F][0-9a-fA-F]'}), is_leaf=True, yang_name="fcoe-intf-wwn", rest_name="fcoe-intf-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='common-def:wwn-type', is_config=True)


  def _get_fcoe_intf_enode_bind_type(self):
    """
    Getter method for fcoe_intf_enode_bind_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_enode_bind_type (fcoe-binding-type)

    YANG Description: This indicates if the enode is statically bound to
the fcoe interface or not i.e. if statically bound 
this enode's mac will always login on the same fcoe
port.
    """
    return self.__fcoe_intf_enode_bind_type
      
  def _set_fcoe_intf_enode_bind_type(self, v, load=False):
    """
    Setter method for fcoe_intf_enode_bind_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_enode_bind_type (fcoe-binding-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_enode_bind_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_enode_bind_type() directly.

    YANG Description: This indicates if the enode is statically bound to
the fcoe interface or not i.e. if statically bound 
this enode's mac will always login on the same fcoe
port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-enode-bind-type", rest_name="fcoe-intf-enode-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_enode_bind_type must be of a type compatible with fcoe-binding-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-binding-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-enode-bind-type", rest_name="fcoe-intf-enode-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)""",
        })

    self.__fcoe_intf_enode_bind_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_enode_bind_type(self):
    self.__fcoe_intf_enode_bind_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-enode-bind-type", rest_name="fcoe-intf-enode-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)


  def _get_fcoe_intf_port_bind_type(self):
    """
    Getter method for fcoe_intf_port_bind_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_port_bind_type (fcoe-binding-type)

    YANG Description: This indicates if the ethernet port is statically
bound to the fcoe interface or not i.e. if statically
bound the ethernet port and the fcoe interface will
have a static 1-to-1 mapping.
    """
    return self.__fcoe_intf_port_bind_type
      
  def _set_fcoe_intf_port_bind_type(self, v, load=False):
    """
    Setter method for fcoe_intf_port_bind_type, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_port_bind_type (fcoe-binding-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_port_bind_type is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_port_bind_type() directly.

    YANG Description: This indicates if the ethernet port is statically
bound to the fcoe interface or not i.e. if statically
bound the ethernet port and the fcoe interface will
have a static 1-to-1 mapping.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-port-bind-type", rest_name="fcoe-intf-port-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_port_bind_type must be of a type compatible with fcoe-binding-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-binding-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-port-bind-type", rest_name="fcoe-intf-port-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)""",
        })

    self.__fcoe_intf_port_bind_type = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_port_bind_type(self):
    self.__fcoe_intf_port_bind_type = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'Dynamic': {'value': 2}, u'Static': {'value': 1}, u'Unknown': {'value': 3}},), is_leaf=True, yang_name="fcoe-intf-port-bind-type", rest_name="fcoe-intf-port-bind-type", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-binding-type', is_config=True)


  def _get_fcoe_intf_enode_mac_address(self):
    """
    Getter method for fcoe_intf_enode_mac_address, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_enode_mac_address (yang:mac-address)

    YANG Description: This indicates the enode mac-addresss of the
device that is statically or dynamically 
bound to the fcoe port.
    """
    return self.__fcoe_intf_enode_mac_address
      
  def _set_fcoe_intf_enode_mac_address(self, v, load=False):
    """
    Setter method for fcoe_intf_enode_mac_address, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_enode_mac_address (yang:mac-address)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_enode_mac_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_enode_mac_address() directly.

    YANG Description: This indicates the enode mac-addresss of the
device that is statically or dynamically 
bound to the fcoe port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-enode-mac-address", rest_name="fcoe-intf-enode-mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_enode_mac_address must be of a type compatible with yang:mac-address""",
          'defined-type': "yang:mac-address",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-enode-mac-address", rest_name="fcoe-intf-enode-mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)""",
        })

    self.__fcoe_intf_enode_mac_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_enode_mac_address(self):
    self.__fcoe_intf_enode_mac_address = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'}), is_leaf=True, yang_name="fcoe-intf-enode-mac-address", rest_name="fcoe-intf-enode-mac-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:mac-address', is_config=True)


  def _get_fcoe_intf_rx_vlan_disc_req(self):
    """
    Getter method for fcoe_intf_rx_vlan_disc_req, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_vlan_disc_req (yang:zero-based-counter32)

    YANG Description: This indicates the number of FIP VLAN 
Discovery requests received on this FCoE 
interface.
    """
    return self.__fcoe_intf_rx_vlan_disc_req
      
  def _set_fcoe_intf_rx_vlan_disc_req(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_vlan_disc_req, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_vlan_disc_req (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_vlan_disc_req is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_vlan_disc_req() directly.

    YANG Description: This indicates the number of FIP VLAN 
Discovery requests received on this FCoE 
interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vlan-disc-req", rest_name="fcoe-intf-rx-vlan-disc-req", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_vlan_disc_req must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vlan-disc-req", rest_name="fcoe-intf-rx-vlan-disc-req", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_vlan_disc_req = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_vlan_disc_req(self):
    self.__fcoe_intf_rx_vlan_disc_req = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vlan-disc-req", rest_name="fcoe-intf-rx-vlan-disc-req", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_disc_solicitations(self):
    """
    Getter method for fcoe_intf_rx_disc_solicitations, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_disc_solicitations (yang:zero-based-counter32)

    YANG Description: This indicates the number of FCF Discovery 
   solicitations received on this FCoE interface.
    """
    return self.__fcoe_intf_rx_disc_solicitations
      
  def _set_fcoe_intf_rx_disc_solicitations(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_disc_solicitations, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_disc_solicitations (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_disc_solicitations is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_disc_solicitations() directly.

    YANG Description: This indicates the number of FCF Discovery 
   solicitations received on this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-disc-solicitations", rest_name="fcoe-intf-rx-disc-solicitations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_disc_solicitations must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-disc-solicitations", rest_name="fcoe-intf-rx-disc-solicitations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_disc_solicitations = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_disc_solicitations(self):
    self.__fcoe_intf_rx_disc_solicitations = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-disc-solicitations", rest_name="fcoe-intf-rx-disc-solicitations", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_flogi(self):
    """
    Getter method for fcoe_intf_rx_flogi, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_flogi (yang:zero-based-counter32)

    YANG Description: This indicates the number of FLOGI requests 
   received on this FCoE interface.
    """
    return self.__fcoe_intf_rx_flogi
      
  def _set_fcoe_intf_rx_flogi(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_flogi, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_flogi (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_flogi is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_flogi() directly.

    YANG Description: This indicates the number of FLOGI requests 
   received on this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-flogi", rest_name="fcoe-intf-rx-flogi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_flogi must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-flogi", rest_name="fcoe-intf-rx-flogi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_flogi = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_flogi(self):
    self.__fcoe_intf_rx_flogi = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-flogi", rest_name="fcoe-intf-rx-flogi", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_fdiscs(self):
    """
    Getter method for fcoe_intf_rx_fdiscs, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_fdiscs (yang:zero-based-counter32)

    YANG Description: This indicates the number of FDISC requests 
   received on this FCoE interface.
    """
    return self.__fcoe_intf_rx_fdiscs
      
  def _set_fcoe_intf_rx_fdiscs(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_fdiscs, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_fdiscs (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_fdiscs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_fdiscs() directly.

    YANG Description: This indicates the number of FDISC requests 
   received on this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-fdiscs", rest_name="fcoe-intf-rx-fdiscs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_fdiscs must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-fdiscs", rest_name="fcoe-intf-rx-fdiscs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_fdiscs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_fdiscs(self):
    self.__fcoe_intf_rx_fdiscs = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-fdiscs", rest_name="fcoe-intf-rx-fdiscs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_logo(self):
    """
    Getter method for fcoe_intf_rx_logo, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_logo (yang:zero-based-counter32)

    YANG Description: This indicates the number of FIP LOGO requests 
   received on this FCoE interface.
    """
    return self.__fcoe_intf_rx_logo
      
  def _set_fcoe_intf_rx_logo(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_logo, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_logo (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_logo is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_logo() directly.

    YANG Description: This indicates the number of FIP LOGO requests 
   received on this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-logo", rest_name="fcoe-intf-rx-logo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_logo must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-logo", rest_name="fcoe-intf-rx-logo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_logo = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_logo(self):
    self.__fcoe_intf_rx_logo = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-logo", rest_name="fcoe-intf-rx-logo", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_errors(self):
    """
    Getter method for fcoe_intf_rx_errors, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_errors (yang:zero-based-counter32)

    YANG Description: This indicates the Number of Errors 
encountered on this FCoE interface.
    """
    return self.__fcoe_intf_rx_errors
      
  def _set_fcoe_intf_rx_errors(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_errors, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_errors (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_errors is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_errors() directly.

    YANG Description: This indicates the Number of Errors 
encountered on this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-errors", rest_name="fcoe-intf-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_errors must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-errors", rest_name="fcoe-intf-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_errors = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_errors(self):
    self.__fcoe_intf_rx_errors = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-errors", rest_name="fcoe-intf-rx-errors", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_tx_vlan_disc_resp(self):
    """
    Getter method for fcoe_intf_tx_vlan_disc_resp, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_vlan_disc_resp (yang:zero-based-counter32)

    YANG Description: This indicates the Number of FIP 
VLAN Discovery response frames transmitted on 
this FCoE interface.
    """
    return self.__fcoe_intf_tx_vlan_disc_resp
      
  def _set_fcoe_intf_tx_vlan_disc_resp(self, v, load=False):
    """
    Setter method for fcoe_intf_tx_vlan_disc_resp, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_vlan_disc_resp (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_tx_vlan_disc_resp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_tx_vlan_disc_resp() directly.

    YANG Description: This indicates the Number of FIP 
VLAN Discovery response frames transmitted on 
this FCoE interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-vlan-disc-resp", rest_name="fcoe-intf-tx-vlan-disc-resp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_tx_vlan_disc_resp must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-vlan-disc-resp", rest_name="fcoe-intf-tx-vlan-disc-resp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_tx_vlan_disc_resp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_tx_vlan_disc_resp(self):
    self.__fcoe_intf_tx_vlan_disc_resp = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-vlan-disc-resp", rest_name="fcoe-intf-tx-vlan-disc-resp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_tx_disc_sol_adv(self):
    """
    Getter method for fcoe_intf_tx_disc_sol_adv, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_disc_sol_adv (yang:zero-based-counter32)

    YANG Description: This indicates the number of FCF solicited  
   advertisements transmitted on this FCoE 
   interface.
    """
    return self.__fcoe_intf_tx_disc_sol_adv
      
  def _set_fcoe_intf_tx_disc_sol_adv(self, v, load=False):
    """
    Setter method for fcoe_intf_tx_disc_sol_adv, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_disc_sol_adv (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_tx_disc_sol_adv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_tx_disc_sol_adv() directly.

    YANG Description: This indicates the number of FCF solicited  
   advertisements transmitted on this FCoE 
   interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-sol-adv", rest_name="fcoe-intf-tx-disc-sol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_tx_disc_sol_adv must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-sol-adv", rest_name="fcoe-intf-tx-disc-sol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_tx_disc_sol_adv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_tx_disc_sol_adv(self):
    self.__fcoe_intf_tx_disc_sol_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-sol-adv", rest_name="fcoe-intf-tx-disc-sol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_tx_disc_unsol_adv(self):
    """
    Getter method for fcoe_intf_tx_disc_unsol_adv, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_disc_unsol_adv (yang:zero-based-counter32)

    YANG Description: This indicates the Number of unsolicited 
  advertisements transmitted on this FCoE 
  interface.
    """
    return self.__fcoe_intf_tx_disc_unsol_adv
      
  def _set_fcoe_intf_tx_disc_unsol_adv(self, v, load=False):
    """
    Setter method for fcoe_intf_tx_disc_unsol_adv, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_disc_unsol_adv (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_tx_disc_unsol_adv is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_tx_disc_unsol_adv() directly.

    YANG Description: This indicates the Number of unsolicited 
  advertisements transmitted on this FCoE 
  interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-unsol-adv", rest_name="fcoe-intf-tx-disc-unsol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_tx_disc_unsol_adv must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-unsol-adv", rest_name="fcoe-intf-tx-disc-unsol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_tx_disc_unsol_adv = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_tx_disc_unsol_adv(self):
    self.__fcoe_intf_tx_disc_unsol_adv = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-disc-unsol-adv", rest_name="fcoe-intf-tx-disc-unsol-adv", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_enode_ka(self):
    """
    Getter method for fcoe_intf_rx_enode_ka, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_enode_ka (yang:zero-based-counter32)

    YANG Description: This indicates the number of ENODE keep-alive
frames recieved.
    """
    return self.__fcoe_intf_rx_enode_ka
      
  def _set_fcoe_intf_rx_enode_ka(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_enode_ka, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_enode_ka (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_enode_ka is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_enode_ka() directly.

    YANG Description: This indicates the number of ENODE keep-alive
frames recieved.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-enode-ka", rest_name="fcoe-intf-rx-enode-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_enode_ka must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-enode-ka", rest_name="fcoe-intf-rx-enode-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_enode_ka = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_enode_ka(self):
    self.__fcoe_intf_rx_enode_ka = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-enode-ka", rest_name="fcoe-intf-rx-enode-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_rx_vnport_ka(self):
    """
    Getter method for fcoe_intf_rx_vnport_ka, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_vnport_ka (yang:zero-based-counter32)

    YANG Description: This indicates the number of VN-Port keep-alive
frames recieved.
    """
    return self.__fcoe_intf_rx_vnport_ka
      
  def _set_fcoe_intf_rx_vnport_ka(self, v, load=False):
    """
    Setter method for fcoe_intf_rx_vnport_ka, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_rx_vnport_ka (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_rx_vnport_ka is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_rx_vnport_ka() directly.

    YANG Description: This indicates the number of VN-Port keep-alive
frames recieved.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vnport-ka", rest_name="fcoe-intf-rx-vnport-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_rx_vnport_ka must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vnport-ka", rest_name="fcoe-intf-rx-vnport-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_rx_vnport_ka = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_rx_vnport_ka(self):
    self.__fcoe_intf_rx_vnport_ka = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-rx-vnport-ka", rest_name="fcoe-intf-rx-vnport-ka", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_tx_accepts(self):
    """
    Getter method for fcoe_intf_tx_accepts, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_accepts (yang:zero-based-counter32)

    YANG Description: This indicates the number of ACC frames  
   transmitted on this FCoE interface in response
   to FLOGI/FDISC.
    """
    return self.__fcoe_intf_tx_accepts
      
  def _set_fcoe_intf_tx_accepts(self, v, load=False):
    """
    Setter method for fcoe_intf_tx_accepts, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_accepts (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_tx_accepts is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_tx_accepts() directly.

    YANG Description: This indicates the number of ACC frames  
   transmitted on this FCoE interface in response
   to FLOGI/FDISC.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-accepts", rest_name="fcoe-intf-tx-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_tx_accepts must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-accepts", rest_name="fcoe-intf-tx-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_tx_accepts = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_tx_accepts(self):
    self.__fcoe_intf_tx_accepts = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-accepts", rest_name="fcoe-intf-tx-accepts", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_tx_ls_rjt(self):
    """
    Getter method for fcoe_intf_tx_ls_rjt, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_ls_rjt (yang:zero-based-counter32)

    YANG Description: This indicates the number of Reject frames 
    transmitted on this FCoE interface in response
    to FLOGI/FDISC/LOGO.
    """
    return self.__fcoe_intf_tx_ls_rjt
      
  def _set_fcoe_intf_tx_ls_rjt(self, v, load=False):
    """
    Setter method for fcoe_intf_tx_ls_rjt, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_ls_rjt (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_tx_ls_rjt is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_tx_ls_rjt() directly.

    YANG Description: This indicates the number of Reject frames 
    transmitted on this FCoE interface in response
    to FLOGI/FDISC/LOGO.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-ls-rjt", rest_name="fcoe-intf-tx-ls-rjt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_tx_ls_rjt must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-ls-rjt", rest_name="fcoe-intf-tx-ls-rjt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_tx_ls_rjt = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_tx_ls_rjt(self):
    self.__fcoe_intf_tx_ls_rjt = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-ls-rjt", rest_name="fcoe-intf-tx-ls-rjt", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)


  def _get_fcoe_intf_time_since_last_change(self):
    """
    Getter method for fcoe_intf_time_since_last_change, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_time_since_last_change (fcoe-counters-date-and-time-type)

    YANG Description: This indicates the time elapsed since the 
status of this FCoE port last changed.
    """
    return self.__fcoe_intf_time_since_last_change
      
  def _set_fcoe_intf_time_since_last_change(self, v, load=False):
    """
    Setter method for fcoe_intf_time_since_last_change, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_time_since_last_change (fcoe-counters-date-and-time-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_time_since_last_change is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_time_since_last_change() directly.

    YANG Description: This indicates the time elapsed since the 
status of this FCoE port last changed.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-time-since-last-change", rest_name="fcoe-intf-time-since-last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_time_since_last_change must be of a type compatible with fcoe-counters-date-and-time-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-counters-date-and-time-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-time-since-last-change", rest_name="fcoe-intf-time-since-last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)""",
        })

    self.__fcoe_intf_time_since_last_change = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_time_since_last_change(self):
    self.__fcoe_intf_time_since_last_change = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-time-since-last-change", rest_name="fcoe-intf-time-since-last-change", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)


  def _get_fcoe_intf_last_counters_cleared(self):
    """
    Getter method for fcoe_intf_last_counters_cleared, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_last_counters_cleared (fcoe-counters-date-and-time-type)

    YANG Description: This indicates the time when the interface 
counters were last cleared.
    """
    return self.__fcoe_intf_last_counters_cleared
      
  def _set_fcoe_intf_last_counters_cleared(self, v, load=False):
    """
    Setter method for fcoe_intf_last_counters_cleared, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_last_counters_cleared (fcoe-counters-date-and-time-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_last_counters_cleared is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_last_counters_cleared() directly.

    YANG Description: This indicates the time when the interface 
counters were last cleared.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-last-counters-cleared", rest_name="fcoe-intf-last-counters-cleared", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_last_counters_cleared must be of a type compatible with fcoe-counters-date-and-time-type""",
          'defined-type': "brocade-fcoe-ext:fcoe-counters-date-and-time-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-last-counters-cleared", rest_name="fcoe-intf-last-counters-cleared", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)""",
        })

    self.__fcoe_intf_last_counters_cleared = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_last_counters_cleared(self):
    self.__fcoe_intf_last_counters_cleared = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\.\\d{6}'}), is_leaf=True, yang_name="fcoe-intf-last-counters-cleared", rest_name="fcoe-intf-last-counters-cleared", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='fcoe-counters-date-and-time-type', is_config=True)


  def _get_fcoe_intf_tx_cvls(self):
    """
    Getter method for fcoe_intf_tx_cvls, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_cvls (yang:zero-based-counter32)

    YANG Description: This indicates the number of CVL frames
transmitted.
    """
    return self.__fcoe_intf_tx_cvls
      
  def _set_fcoe_intf_tx_cvls(self, v, load=False):
    """
    Setter method for fcoe_intf_tx_cvls, mapped from YANG variable /brocade_fcoe_ext_rpc/fcoe_get_interface/output/fcoe_intf_list/fcoe_intf_tx_cvls (yang:zero-based-counter32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_intf_tx_cvls is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_intf_tx_cvls() directly.

    YANG Description: This indicates the number of CVL frames
transmitted.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-cvls", rest_name="fcoe-intf-tx-cvls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_intf_tx_cvls must be of a type compatible with yang:zero-based-counter32""",
          'defined-type': "yang:zero-based-counter32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-cvls", rest_name="fcoe-intf-tx-cvls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)""",
        })

    self.__fcoe_intf_tx_cvls = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_intf_tx_cvls(self):
    self.__fcoe_intf_tx_cvls = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(0), is_leaf=True, yang_name="fcoe-intf-tx-cvls", rest_name="fcoe-intf-tx-cvls", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-fcoe-ext', defining_module='brocade-fcoe-ext', yang_type='yang:zero-based-counter32', is_config=True)

  fcoe_intf_fcoe_port_id = __builtin__.property(_get_fcoe_intf_fcoe_port_id, _set_fcoe_intf_fcoe_port_id)
  fcoe_intf_port_type = __builtin__.property(_get_fcoe_intf_port_type, _set_fcoe_intf_port_type)
  fcoe_intf_config_port_type = __builtin__.property(_get_fcoe_intf_config_port_type, _set_fcoe_intf_config_port_type)
  fcoe_intf_port_state = __builtin__.property(_get_fcoe_intf_port_state, _set_fcoe_intf_port_state)
  fcoe_intf_fabric_map_name = __builtin__.property(_get_fcoe_intf_fabric_map_name, _set_fcoe_intf_fabric_map_name)
  fcoe_intf_eth_port_id = __builtin__.property(_get_fcoe_intf_eth_port_id, _set_fcoe_intf_eth_port_id)
  interface_type = __builtin__.property(_get_interface_type, _set_interface_type)
  interface_name = __builtin__.property(_get_interface_name, _set_interface_name)
  fcoe_intf_admin_status = __builtin__.property(_get_fcoe_intf_admin_status, _set_fcoe_intf_admin_status)
  fcoe_intf_peer_fcf_mac = __builtin__.property(_get_fcoe_intf_peer_fcf_mac, _set_fcoe_intf_peer_fcf_mac)
  fcoe_intf_device_count = __builtin__.property(_get_fcoe_intf_device_count, _set_fcoe_intf_device_count)
  fcoe_intf_ifindex = __builtin__.property(_get_fcoe_intf_ifindex, _set_fcoe_intf_ifindex)
  fcoe_intf_wwn = __builtin__.property(_get_fcoe_intf_wwn, _set_fcoe_intf_wwn)
  fcoe_intf_enode_bind_type = __builtin__.property(_get_fcoe_intf_enode_bind_type, _set_fcoe_intf_enode_bind_type)
  fcoe_intf_port_bind_type = __builtin__.property(_get_fcoe_intf_port_bind_type, _set_fcoe_intf_port_bind_type)
  fcoe_intf_enode_mac_address = __builtin__.property(_get_fcoe_intf_enode_mac_address, _set_fcoe_intf_enode_mac_address)
  fcoe_intf_rx_vlan_disc_req = __builtin__.property(_get_fcoe_intf_rx_vlan_disc_req, _set_fcoe_intf_rx_vlan_disc_req)
  fcoe_intf_rx_disc_solicitations = __builtin__.property(_get_fcoe_intf_rx_disc_solicitations, _set_fcoe_intf_rx_disc_solicitations)
  fcoe_intf_rx_flogi = __builtin__.property(_get_fcoe_intf_rx_flogi, _set_fcoe_intf_rx_flogi)
  fcoe_intf_rx_fdiscs = __builtin__.property(_get_fcoe_intf_rx_fdiscs, _set_fcoe_intf_rx_fdiscs)
  fcoe_intf_rx_logo = __builtin__.property(_get_fcoe_intf_rx_logo, _set_fcoe_intf_rx_logo)
  fcoe_intf_rx_errors = __builtin__.property(_get_fcoe_intf_rx_errors, _set_fcoe_intf_rx_errors)
  fcoe_intf_tx_vlan_disc_resp = __builtin__.property(_get_fcoe_intf_tx_vlan_disc_resp, _set_fcoe_intf_tx_vlan_disc_resp)
  fcoe_intf_tx_disc_sol_adv = __builtin__.property(_get_fcoe_intf_tx_disc_sol_adv, _set_fcoe_intf_tx_disc_sol_adv)
  fcoe_intf_tx_disc_unsol_adv = __builtin__.property(_get_fcoe_intf_tx_disc_unsol_adv, _set_fcoe_intf_tx_disc_unsol_adv)
  fcoe_intf_rx_enode_ka = __builtin__.property(_get_fcoe_intf_rx_enode_ka, _set_fcoe_intf_rx_enode_ka)
  fcoe_intf_rx_vnport_ka = __builtin__.property(_get_fcoe_intf_rx_vnport_ka, _set_fcoe_intf_rx_vnport_ka)
  fcoe_intf_tx_accepts = __builtin__.property(_get_fcoe_intf_tx_accepts, _set_fcoe_intf_tx_accepts)
  fcoe_intf_tx_ls_rjt = __builtin__.property(_get_fcoe_intf_tx_ls_rjt, _set_fcoe_intf_tx_ls_rjt)
  fcoe_intf_time_since_last_change = __builtin__.property(_get_fcoe_intf_time_since_last_change, _set_fcoe_intf_time_since_last_change)
  fcoe_intf_last_counters_cleared = __builtin__.property(_get_fcoe_intf_last_counters_cleared, _set_fcoe_intf_last_counters_cleared)
  fcoe_intf_tx_cvls = __builtin__.property(_get_fcoe_intf_tx_cvls, _set_fcoe_intf_tx_cvls)


  _pyangbind_elements = {'fcoe_intf_fcoe_port_id': fcoe_intf_fcoe_port_id, 'fcoe_intf_port_type': fcoe_intf_port_type, 'fcoe_intf_config_port_type': fcoe_intf_config_port_type, 'fcoe_intf_port_state': fcoe_intf_port_state, 'fcoe_intf_fabric_map_name': fcoe_intf_fabric_map_name, 'fcoe_intf_eth_port_id': fcoe_intf_eth_port_id, 'interface_type': interface_type, 'interface_name': interface_name, 'fcoe_intf_admin_status': fcoe_intf_admin_status, 'fcoe_intf_peer_fcf_mac': fcoe_intf_peer_fcf_mac, 'fcoe_intf_device_count': fcoe_intf_device_count, 'fcoe_intf_ifindex': fcoe_intf_ifindex, 'fcoe_intf_wwn': fcoe_intf_wwn, 'fcoe_intf_enode_bind_type': fcoe_intf_enode_bind_type, 'fcoe_intf_port_bind_type': fcoe_intf_port_bind_type, 'fcoe_intf_enode_mac_address': fcoe_intf_enode_mac_address, 'fcoe_intf_rx_vlan_disc_req': fcoe_intf_rx_vlan_disc_req, 'fcoe_intf_rx_disc_solicitations': fcoe_intf_rx_disc_solicitations, 'fcoe_intf_rx_flogi': fcoe_intf_rx_flogi, 'fcoe_intf_rx_fdiscs': fcoe_intf_rx_fdiscs, 'fcoe_intf_rx_logo': fcoe_intf_rx_logo, 'fcoe_intf_rx_errors': fcoe_intf_rx_errors, 'fcoe_intf_tx_vlan_disc_resp': fcoe_intf_tx_vlan_disc_resp, 'fcoe_intf_tx_disc_sol_adv': fcoe_intf_tx_disc_sol_adv, 'fcoe_intf_tx_disc_unsol_adv': fcoe_intf_tx_disc_unsol_adv, 'fcoe_intf_rx_enode_ka': fcoe_intf_rx_enode_ka, 'fcoe_intf_rx_vnport_ka': fcoe_intf_rx_vnport_ka, 'fcoe_intf_tx_accepts': fcoe_intf_tx_accepts, 'fcoe_intf_tx_ls_rjt': fcoe_intf_tx_ls_rjt, 'fcoe_intf_time_since_last_change': fcoe_intf_time_since_last_change, 'fcoe_intf_last_counters_cleared': fcoe_intf_last_counters_cleared, 'fcoe_intf_tx_cvls': fcoe_intf_tx_cvls, }


