
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class police(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-policer - based on the path /policy-map/class/police. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__cir','__cbs','__eir','__ebs','__set_priority','__conform_set_dscp','__conform_set_prec','__conform_set_tc','__exceed_set_dscp','__exceed_set_prec','__exceed_set_tc',)

  _yang_name = 'police'
  _rest_name = 'police'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__exceed_set_tc = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-tc", rest_name="exceed-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Traffic Class value for exceeded traffic.'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)
    self.__eir = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..100000000000']}), is_leaf=True, yang_name="eir", rest_name="eir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Information Rate.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    self.__cbs = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="cbs", rest_name="cbs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Comitted Burst Size.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    self.__ebs = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="ebs", rest_name="ebs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Burst Size.', u'cli-optional-in-sequence': None, u'display-when': u'(../eir != 0)'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    self.__conform_set_prec = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-prec", rest_name="conform-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-dscp = '64') or not(../conform-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'40000..100000000000']}), is_leaf=True, yang_name="cir", rest_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Committed Information Rate.', u'cli-suppress-no': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    self.__conform_set_dscp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="conform-set-dscp", rest_name="conform-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-prec = '64') or not(../conform-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)
    self.__exceed_set_dscp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="exceed-set-dscp", rest_name="exceed-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-prec = '64') or not(../exceed-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)
    self.__set_priority = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="set-priority", rest_name="set-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Police Priority Map Name', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='string', is_config=True)
    self.__conform_set_tc = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-tc", rest_name="conform-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Class value for conformant traffic.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)
    self.__exceed_set_prec = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-prec", rest_name="exceed-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-dscp = '64') or not(../exceed-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'policy-map', u'class', u'police']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'policy-map', u'class', u'police']

  def _get_cir(self):
    """
    Getter method for cir, mapped from YANG variable /policy_map/class/police/cir (uint64)
    """
    return self.__cir
      
  def _set_cir(self, v, load=False):
    """
    Setter method for cir, mapped from YANG variable /policy_map/class/police/cir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cir() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'40000..100000000000']}), is_leaf=True, yang_name="cir", rest_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Committed Information Rate.', u'cli-suppress-no': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'40000..100000000000']}), is_leaf=True, yang_name="cir", rest_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Committed Information Rate.', u'cli-suppress-no': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)""",
        })

    self.__cir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cir(self):
    self.__cir = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'40000..100000000000']}), is_leaf=True, yang_name="cir", rest_name="cir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Committed Information Rate.', u'cli-suppress-no': None, u'cli-hide-in-submode': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)


  def _get_cbs(self):
    """
    Getter method for cbs, mapped from YANG variable /policy_map/class/police/cbs (uint64)
    """
    return self.__cbs
      
  def _set_cbs(self, v, load=False):
    """
    Setter method for cbs, mapped from YANG variable /policy_map/class/police/cbs (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cbs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cbs() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="cbs", rest_name="cbs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Comitted Burst Size.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cbs must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="cbs", rest_name="cbs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Comitted Burst Size.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)""",
        })

    self.__cbs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cbs(self):
    self.__cbs = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="cbs", rest_name="cbs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Comitted Burst Size.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)


  def _get_eir(self):
    """
    Getter method for eir, mapped from YANG variable /policy_map/class/police/eir (uint64)
    """
    return self.__eir
      
  def _set_eir(self, v, load=False):
    """
    Setter method for eir, mapped from YANG variable /policy_map/class/police/eir (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_eir is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_eir() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..100000000000']}), is_leaf=True, yang_name="eir", rest_name="eir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Information Rate.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """eir must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..100000000000']}), is_leaf=True, yang_name="eir", rest_name="eir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Information Rate.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)""",
        })

    self.__eir = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_eir(self):
    self.__eir = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'0..100000000000']}), is_leaf=True, yang_name="eir", rest_name="eir", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Information Rate.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)


  def _get_ebs(self):
    """
    Getter method for ebs, mapped from YANG variable /policy_map/class/police/ebs (uint64)
    """
    return self.__ebs
      
  def _set_ebs(self, v, load=False):
    """
    Setter method for ebs, mapped from YANG variable /policy_map/class/police/ebs (uint64)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ebs is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ebs() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="ebs", rest_name="ebs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Burst Size.', u'cli-optional-in-sequence': None, u'display-when': u'(../eir != 0)'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ebs must be of a type compatible with uint64""",
          'defined-type': "uint64",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="ebs", rest_name="ebs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Burst Size.', u'cli-optional-in-sequence': None, u'display-when': u'(../eir != 0)'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)""",
        })

    self.__ebs = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ebs(self):
    self.__ebs = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range':  ['0..18446744073709551615']}, int_size=64), restriction_dict={'range': [u'1250..12500000000']}), is_leaf=True, yang_name="ebs", rest_name="ebs", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Exceeded Burst Size.', u'cli-optional-in-sequence': None, u'display-when': u'(../eir != 0)'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='uint64', is_config=True)


  def _get_set_priority(self):
    """
    Getter method for set_priority, mapped from YANG variable /policy_map/class/police/set_priority (string)
    """
    return self.__set_priority
      
  def _set_set_priority(self, v, load=False):
    """
    Setter method for set_priority, mapped from YANG variable /policy_map/class/police/set_priority (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_set_priority is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_set_priority() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="set-priority", rest_name="set-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Police Priority Map Name', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """set_priority must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="set-priority", rest_name="set-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Police Priority Map Name', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='string', is_config=True)""",
        })

    self.__set_priority = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_set_priority(self):
    self.__set_priority = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'1..64']}), is_leaf=True, yang_name="set-priority", rest_name="set-priority", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Police Priority Map Name', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='string', is_config=True)


  def _get_conform_set_dscp(self):
    """
    Getter method for conform_set_dscp, mapped from YANG variable /policy_map/class/police/conform_set_dscp (dscp-value)
    """
    return self.__conform_set_dscp
      
  def _set_conform_set_dscp(self, v, load=False):
    """
    Setter method for conform_set_dscp, mapped from YANG variable /policy_map/class/police/conform_set_dscp (dscp-value)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_set_dscp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="conform-set-dscp", rest_name="conform-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-prec = '64') or not(../conform-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_set_dscp must be of a type compatible with dscp-value""",
          'defined-type': "brocade-policer:dscp-value",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="conform-set-dscp", rest_name="conform-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-prec = '64') or not(../conform-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)""",
        })

    self.__conform_set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_set_dscp(self):
    self.__conform_set_dscp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="conform-set-dscp", rest_name="conform-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-prec = '64') or not(../conform-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)


  def _get_conform_set_prec(self):
    """
    Getter method for conform_set_prec, mapped from YANG variable /policy_map/class/police/conform_set_prec (precedence-value)
    """
    return self.__conform_set_prec
      
  def _set_conform_set_prec(self, v, load=False):
    """
    Setter method for conform_set_prec, mapped from YANG variable /policy_map/class/police/conform_set_prec (precedence-value)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_set_prec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_set_prec() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-prec", rest_name="conform-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-dscp = '64') or not(../conform-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_set_prec must be of a type compatible with precedence-value""",
          'defined-type': "brocade-policer:precedence-value",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-prec", rest_name="conform-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-dscp = '64') or not(../conform-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)""",
        })

    self.__conform_set_prec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_set_prec(self):
    self.__conform_set_prec = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-prec", rest_name="conform-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for conformant traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../conform-set-dscp = '64') or not(../conform-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)


  def _get_conform_set_tc(self):
    """
    Getter method for conform_set_tc, mapped from YANG variable /policy_map/class/police/conform_set_tc (tc-value)
    """
    return self.__conform_set_tc
      
  def _set_conform_set_tc(self, v, load=False):
    """
    Setter method for conform_set_tc, mapped from YANG variable /policy_map/class/police/conform_set_tc (tc-value)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_conform_set_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_conform_set_tc() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-tc", rest_name="conform-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Class value for conformant traffic.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """conform_set_tc must be of a type compatible with tc-value""",
          'defined-type': "brocade-policer:tc-value",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-tc", rest_name="conform-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Class value for conformant traffic.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)""",
        })

    self.__conform_set_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_conform_set_tc(self):
    self.__conform_set_tc = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="conform-set-tc", rest_name="conform-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Traffic Class value for conformant traffic.', u'cli-optional-in-sequence': None}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)


  def _get_exceed_set_dscp(self):
    """
    Getter method for exceed_set_dscp, mapped from YANG variable /policy_map/class/police/exceed_set_dscp (dscp-value)
    """
    return self.__exceed_set_dscp
      
  def _set_exceed_set_dscp(self, v, load=False):
    """
    Setter method for exceed_set_dscp, mapped from YANG variable /policy_map/class/police/exceed_set_dscp (dscp-value)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_set_dscp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_set_dscp() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="exceed-set-dscp", rest_name="exceed-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-prec = '64') or not(../exceed-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_set_dscp must be of a type compatible with dscp-value""",
          'defined-type': "brocade-policer:dscp-value",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="exceed-set-dscp", rest_name="exceed-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-prec = '64') or not(../exceed-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)""",
        })

    self.__exceed_set_dscp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_set_dscp(self):
    self.__exceed_set_dscp = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 63']}), is_leaf=True, yang_name="exceed-set-dscp", rest_name="exceed-set-dscp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DCSP Priority for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-prec = '64') or not(../exceed-set-prec)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='dscp-value', is_config=True)


  def _get_exceed_set_prec(self):
    """
    Getter method for exceed_set_prec, mapped from YANG variable /policy_map/class/police/exceed_set_prec (precedence-value)
    """
    return self.__exceed_set_prec
      
  def _set_exceed_set_prec(self, v, load=False):
    """
    Setter method for exceed_set_prec, mapped from YANG variable /policy_map/class/police/exceed_set_prec (precedence-value)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_set_prec is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_set_prec() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-prec", rest_name="exceed-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-dscp = '64') or not(../exceed-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_set_prec must be of a type compatible with precedence-value""",
          'defined-type': "brocade-policer:precedence-value",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-prec", rest_name="exceed-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-dscp = '64') or not(../exceed-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)""",
        })

    self.__exceed_set_prec = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_set_prec(self):
    self.__exceed_set_prec = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-prec", rest_name="exceed-set-prec", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IP Precedence value for exceeded traffic.', u'cli-optional-in-sequence': None, u'display-when': u"(../exceed-set-dscp = '64') or not(../exceed-set-dscp)"}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='precedence-value', is_config=True)


  def _get_exceed_set_tc(self):
    """
    Getter method for exceed_set_tc, mapped from YANG variable /policy_map/class/police/exceed_set_tc (tc-value)
    """
    return self.__exceed_set_tc
      
  def _set_exceed_set_tc(self, v, load=False):
    """
    Setter method for exceed_set_tc, mapped from YANG variable /policy_map/class/police/exceed_set_tc (tc-value)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_exceed_set_tc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_exceed_set_tc() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-tc", rest_name="exceed-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Traffic Class value for exceeded traffic.'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """exceed_set_tc must be of a type compatible with tc-value""",
          'defined-type': "brocade-policer:tc-value",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-tc", rest_name="exceed-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Traffic Class value for exceeded traffic.'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)""",
        })

    self.__exceed_set_tc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_exceed_set_tc(self):
    self.__exceed_set_tc = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'0 .. 7']}), is_leaf=True, yang_name="exceed-set-tc", rest_name="exceed-set-tc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'Traffic Class value for exceeded traffic.'}}, namespace='urn:brocade.com:mgmt:brocade-policer', defining_module='brocade-policer', yang_type='tc-value', is_config=True)

  cir = __builtin__.property(_get_cir, _set_cir)
  cbs = __builtin__.property(_get_cbs, _set_cbs)
  eir = __builtin__.property(_get_eir, _set_eir)
  ebs = __builtin__.property(_get_ebs, _set_ebs)
  set_priority = __builtin__.property(_get_set_priority, _set_set_priority)
  conform_set_dscp = __builtin__.property(_get_conform_set_dscp, _set_conform_set_dscp)
  conform_set_prec = __builtin__.property(_get_conform_set_prec, _set_conform_set_prec)
  conform_set_tc = __builtin__.property(_get_conform_set_tc, _set_conform_set_tc)
  exceed_set_dscp = __builtin__.property(_get_exceed_set_dscp, _set_exceed_set_dscp)
  exceed_set_prec = __builtin__.property(_get_exceed_set_prec, _set_exceed_set_prec)
  exceed_set_tc = __builtin__.property(_get_exceed_set_tc, _set_exceed_set_tc)


  _pyangbind_elements = {'cir': cir, 'cbs': cbs, 'eir': eir, 'ebs': ebs, 'set_priority': set_priority, 'conform_set_dscp': conform_set_dscp, 'conform_set_prec': conform_set_prec, 'conform_set_tc': conform_set_tc, 'exceed_set_dscp': exceed_set_dscp, 'exceed_set_prec': exceed_set_prec, 'exceed_set_tc': exceed_set_tc, }


