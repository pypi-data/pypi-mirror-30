
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class input(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-zone - based on the path /brocade_zone_rpc/show-zoning-enabled-configuration/input. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__zone_name_pattern','__last_rcvd_zone_name',)

  _yang_name = 'input'
  _rest_name = 'input'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__zone_name_pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="zone-name-pattern", rest_name="zone-name-pattern", parent=self, choice=(u'request-type', u'get-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)
    self.__last_rcvd_zone_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-rcvd-zone-name", rest_name="last-rcvd-zone-name", parent=self, choice=(u'request-type', u'get-next-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_zone_rpc', u'show-zoning-enabled-configuration', u'input']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-zoning-enabled-configuration', u'input']

  def _get_zone_name_pattern(self):
    """
    Getter method for zone_name_pattern, mapped from YANG variable /brocade_zone_rpc/show_zoning_enabled_configuration/input/zone_name_pattern (string)

    YANG Description: This specifies the enabled-zone for which
this function is invoked. This is 
optional input, when not specified means
to get the entire enabled-zone database.
    """
    return self.__zone_name_pattern
      
  def _set_zone_name_pattern(self, v, load=False):
    """
    Setter method for zone_name_pattern, mapped from YANG variable /brocade_zone_rpc/show_zoning_enabled_configuration/input/zone_name_pattern (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_zone_name_pattern is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_zone_name_pattern() directly.

    YANG Description: This specifies the enabled-zone for which
this function is invoked. This is 
optional input, when not specified means
to get the entire enabled-zone database.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="zone-name-pattern", rest_name="zone-name-pattern", parent=self, choice=(u'request-type', u'get-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """zone_name_pattern must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="zone-name-pattern", rest_name="zone-name-pattern", parent=self, choice=(u'request-type', u'get-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)""",
        })

    self.__zone_name_pattern = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_zone_name_pattern(self):
    self.__zone_name_pattern = YANGDynClass(base=unicode, is_leaf=True, yang_name="zone-name-pattern", rest_name="zone-name-pattern", parent=self, choice=(u'request-type', u'get-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)


  def _get_last_rcvd_zone_name(self):
    """
    Getter method for last_rcvd_zone_name, mapped from YANG variable /brocade_zone_rpc/show_zoning_enabled_configuration/input/last_rcvd_zone_name (string)

    YANG Description: This specifies the last enabled-zone
received in the preceeding request.
Is an optional field for the first
request. For subsequent requests
this must be filled with the last 
enabled-zone received in the
preceeding request.
    """
    return self.__last_rcvd_zone_name
      
  def _set_last_rcvd_zone_name(self, v, load=False):
    """
    Setter method for last_rcvd_zone_name, mapped from YANG variable /brocade_zone_rpc/show_zoning_enabled_configuration/input/last_rcvd_zone_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_rcvd_zone_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_rcvd_zone_name() directly.

    YANG Description: This specifies the last enabled-zone
received in the preceeding request.
Is an optional field for the first
request. For subsequent requests
this must be filled with the last 
enabled-zone received in the
preceeding request.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="last-rcvd-zone-name", rest_name="last-rcvd-zone-name", parent=self, choice=(u'request-type', u'get-next-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_rcvd_zone_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="last-rcvd-zone-name", rest_name="last-rcvd-zone-name", parent=self, choice=(u'request-type', u'get-next-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)""",
        })

    self.__last_rcvd_zone_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_rcvd_zone_name(self):
    self.__last_rcvd_zone_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="last-rcvd-zone-name", rest_name="last-rcvd-zone-name", parent=self, choice=(u'request-type', u'get-next-request'), path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'<WORD>;;Enabled-Zone-Name'}}, namespace='urn:brocade.com:mgmt:brocade-zone', defining_module='brocade-zone', yang_type='string', is_config=True)

  zone_name_pattern = __builtin__.property(_get_zone_name_pattern, _set_zone_name_pattern)
  last_rcvd_zone_name = __builtin__.property(_get_last_rcvd_zone_name, _set_last_rcvd_zone_name)

  __choices__ = {u'request-type': {u'get-next-request': [u'last_rcvd_zone_name'], u'get-request': [u'zone_name_pattern']}}
  _pyangbind_elements = {'zone_name_pattern': zone_name_pattern, 'last_rcvd_zone_name': last_rcvd_zone_name, }


