
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import snooping
import static_group
class igmp(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface-vlan/interface/vlan/ip/igmp. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__last_member_query_interval','__query_interval','__igmp_version','__query_max_response_time','__last_member_query_count','__startup_query_count','__startup_query_interval','__robustness_variable','__snooping','__static_group',)

  _yang_name = 'igmp'
  _rest_name = 'igmp'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__startup_query_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..450']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(31), is_leaf=True, yang_name="startup-query-interval", rest_name="startup-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Startup Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqi-type', is_config=True)
    self.__last_member_query_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..25500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1000), is_leaf=True, yang_name="last-member-query-interval", rest_name="last-member-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Last Member Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqt-type', is_config=True)
    self.__snooping = YANGDynClass(base=snooping.snooping, is_container='container', presence=False, yang_name="snooping", rest_name="snooping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Layer 2 Snooping', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)
    self.__robustness_variable = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="robustness-variable", rest_name="robustness-variable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Robustness Variable', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='rob-type', is_config=True)
    self.__startup_query_count = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="startup-query-count", rest_name="startup-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Startup Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqc-type', is_config=True)
    self.__query_max_response_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..25']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="query-max-response-time", rest_name="query-max-response-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Max Query Response Time', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qmrt-type', is_config=True)
    self.__igmp_version = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..3']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="igmp-version", rest_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMPS Version [2|3]', u'cli-full-command': None, u'alt-name': u'version'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='version-type', is_config=True)
    self.__query_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..18000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(125), is_leaf=True, yang_name="query-interval", rest_name="query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qi-type', is_config=True)
    self.__last_member_query_count = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="last-member-query-count", rest_name="last-member-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Last Member Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqc-type', is_config=True)
    self.__static_group = YANGDynClass(base=YANGListType("mcast_address interface if_type value source",static_group.static_group, yang_name="static-group", rest_name="static-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcast-address interface if-type value source', extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}), is_container='list', yang_name="static-group", rest_name="static-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface-vlan', u'interface', u'vlan', u'ip', u'igmp']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Vlan', u'ip', u'igmp']

  def _get_last_member_query_interval(self):
    """
    Getter method for last_member_query_interval, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/last_member_query_interval (lmqt-type)
    """
    return self.__last_member_query_interval
      
  def _set_last_member_query_interval(self, v, load=False):
    """
    Setter method for last_member_query_interval, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/last_member_query_interval (lmqt-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_member_query_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_member_query_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..25500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1000), is_leaf=True, yang_name="last-member-query-interval", rest_name="last-member-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Last Member Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqt-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_member_query_interval must be of a type compatible with lmqt-type""",
          'defined-type': "brocade-igmp-snooping:lmqt-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..25500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1000), is_leaf=True, yang_name="last-member-query-interval", rest_name="last-member-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Last Member Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqt-type', is_config=True)""",
        })

    self.__last_member_query_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_member_query_interval(self):
    self.__last_member_query_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'100..25500']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(1000), is_leaf=True, yang_name="last-member-query-interval", rest_name="last-member-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Last Member Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqt-type', is_config=True)


  def _get_query_interval(self):
    """
    Getter method for query_interval, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/query_interval (qi-type)
    """
    return self.__query_interval
      
  def _set_query_interval(self, v, load=False):
    """
    Setter method for query_interval, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/query_interval (qi-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_query_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_query_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..18000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(125), is_leaf=True, yang_name="query-interval", rest_name="query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qi-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """query_interval must be of a type compatible with qi-type""",
          'defined-type': "brocade-igmp-snooping:qi-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..18000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(125), is_leaf=True, yang_name="query-interval", rest_name="query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qi-type', is_config=True)""",
        })

    self.__query_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_query_interval(self):
    self.__query_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..18000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(125), is_leaf=True, yang_name="query-interval", rest_name="query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qi-type', is_config=True)


  def _get_igmp_version(self):
    """
    Getter method for igmp_version, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/igmp_version (version-type)
    """
    return self.__igmp_version
      
  def _set_igmp_version(self, v, load=False):
    """
    Setter method for igmp_version, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/igmp_version (version-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_igmp_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_igmp_version() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..3']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="igmp-version", rest_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMPS Version [2|3]', u'cli-full-command': None, u'alt-name': u'version'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='version-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """igmp_version must be of a type compatible with version-type""",
          'defined-type': "brocade-igmp-snooping:version-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..3']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="igmp-version", rest_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMPS Version [2|3]', u'cli-full-command': None, u'alt-name': u'version'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='version-type', is_config=True)""",
        })

    self.__igmp_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_igmp_version(self):
    self.__igmp_version = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..3']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="igmp-version", rest_name="version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMPS Version [2|3]', u'cli-full-command': None, u'alt-name': u'version'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='version-type', is_config=True)


  def _get_query_max_response_time(self):
    """
    Getter method for query_max_response_time, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/query_max_response_time (qmrt-type)
    """
    return self.__query_max_response_time
      
  def _set_query_max_response_time(self, v, load=False):
    """
    Setter method for query_max_response_time, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/query_max_response_time (qmrt-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_query_max_response_time is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_query_max_response_time() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..25']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="query-max-response-time", rest_name="query-max-response-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Max Query Response Time', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qmrt-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """query_max_response_time must be of a type compatible with qmrt-type""",
          'defined-type': "brocade-igmp-snooping:qmrt-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..25']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="query-max-response-time", rest_name="query-max-response-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Max Query Response Time', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qmrt-type', is_config=True)""",
        })

    self.__query_max_response_time = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_query_max_response_time(self):
    self.__query_max_response_time = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..25']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(10), is_leaf=True, yang_name="query-max-response-time", rest_name="query-max-response-time", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Max Query Response Time', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='qmrt-type', is_config=True)


  def _get_last_member_query_count(self):
    """
    Getter method for last_member_query_count, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/last_member_query_count (lmqc-type)
    """
    return self.__last_member_query_count
      
  def _set_last_member_query_count(self, v, load=False):
    """
    Setter method for last_member_query_count, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/last_member_query_count (lmqc-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_last_member_query_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_last_member_query_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="last-member-query-count", rest_name="last-member-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Last Member Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqc-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """last_member_query_count must be of a type compatible with lmqc-type""",
          'defined-type': "brocade-igmp-snooping:lmqc-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="last-member-query-count", rest_name="last-member-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Last Member Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqc-type', is_config=True)""",
        })

    self.__last_member_query_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_last_member_query_count(self):
    self.__last_member_query_count = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="last-member-query-count", rest_name="last-member-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Last Member Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='lmqc-type', is_config=True)


  def _get_startup_query_count(self):
    """
    Getter method for startup_query_count, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/startup_query_count (sqc-type)
    """
    return self.__startup_query_count
      
  def _set_startup_query_count(self, v, load=False):
    """
    Setter method for startup_query_count, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/startup_query_count (sqc-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_startup_query_count is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_startup_query_count() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="startup-query-count", rest_name="startup-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Startup Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqc-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """startup_query_count must be of a type compatible with sqc-type""",
          'defined-type': "brocade-igmp-snooping:sqc-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="startup-query-count", rest_name="startup-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Startup Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqc-type', is_config=True)""",
        })

    self.__startup_query_count = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_startup_query_count(self):
    self.__startup_query_count = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="startup-query-count", rest_name="startup-query-count", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Startup Query Count', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqc-type', is_config=True)


  def _get_startup_query_interval(self):
    """
    Getter method for startup_query_interval, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/startup_query_interval (sqi-type)
    """
    return self.__startup_query_interval
      
  def _set_startup_query_interval(self, v, load=False):
    """
    Setter method for startup_query_interval, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/startup_query_interval (sqi-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_startup_query_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_startup_query_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..450']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(31), is_leaf=True, yang_name="startup-query-interval", rest_name="startup-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Startup Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqi-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """startup_query_interval must be of a type compatible with sqi-type""",
          'defined-type': "brocade-igmp-snooping:sqi-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..450']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(31), is_leaf=True, yang_name="startup-query-interval", rest_name="startup-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Startup Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqi-type', is_config=True)""",
        })

    self.__startup_query_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_startup_query_interval(self):
    self.__startup_query_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..450']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(31), is_leaf=True, yang_name="startup-query-interval", rest_name="startup-query-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Startup Query Interval', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='sqi-type', is_config=True)


  def _get_robustness_variable(self):
    """
    Getter method for robustness_variable, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/robustness_variable (rob-type)
    """
    return self.__robustness_variable
      
  def _set_robustness_variable(self, v, load=False):
    """
    Setter method for robustness_variable, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/robustness_variable (rob-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_robustness_variable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_robustness_variable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="robustness-variable", rest_name="robustness-variable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Robustness Variable', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='rob-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """robustness_variable must be of a type compatible with rob-type""",
          'defined-type': "brocade-igmp-snooping:rob-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="robustness-variable", rest_name="robustness-variable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Robustness Variable', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='rob-type', is_config=True)""",
        })

    self.__robustness_variable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_robustness_variable(self):
    self.__robustness_variable = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'2..10']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2), is_leaf=True, yang_name="robustness-variable", rest_name="robustness-variable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Robustness Variable', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='rob-type', is_config=True)


  def _get_snooping(self):
    """
    Getter method for snooping, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping (container)
    """
    return self.__snooping
      
  def _set_snooping(self, v, load=False):
    """
    Setter method for snooping, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_snooping is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_snooping() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=snooping.snooping, is_container='container', presence=False, yang_name="snooping", rest_name="snooping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Layer 2 Snooping', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """snooping must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=snooping.snooping, is_container='container', presence=False, yang_name="snooping", rest_name="snooping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Layer 2 Snooping', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)""",
        })

    self.__snooping = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_snooping(self):
    self.__snooping = YANGDynClass(base=snooping.snooping, is_container='container', presence=False, yang_name="snooping", rest_name="snooping", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Layer 2 Snooping', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)


  def _get_static_group(self):
    """
    Getter method for static_group, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/static_group (list)
    """
    return self.__static_group
      
  def _set_static_group(self, v, load=False):
    """
    Setter method for static_group, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/static_group (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_static_group is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_static_group() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("mcast_address interface if_type value source",static_group.static_group, yang_name="static-group", rest_name="static-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcast-address interface if-type value source', extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}), is_container='list', yang_name="static-group", rest_name="static-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """static_group must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("mcast_address interface if_type value source",static_group.static_group, yang_name="static-group", rest_name="static-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcast-address interface if-type value source', extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}), is_container='list', yang_name="static-group", rest_name="static-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='list', is_config=True)""",
        })

    self.__static_group = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_static_group(self):
    self.__static_group = YANGDynClass(base=YANGListType("mcast_address interface if_type value source",static_group.static_group, yang_name="static-group", rest_name="static-group", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='mcast-address interface if-type value source', extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}), is_container='list', yang_name="static-group", rest_name="static-group", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Static Group to be Joined', u'cli-run-template-enter': u'ip igmp static-group $(mcast-address) interface $(if-type) $(value) $($(source)==0.0.0.0?:source $(source))\n', u'cli-suppress-mode': None, u'cli-suppress-list-no': None, u'hidden': u'wyser-write-hook', u'callpoint': u'IgmpsSgVlan'}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='list', is_config=True)

  last_member_query_interval = __builtin__.property(_get_last_member_query_interval, _set_last_member_query_interval)
  query_interval = __builtin__.property(_get_query_interval, _set_query_interval)
  igmp_version = __builtin__.property(_get_igmp_version, _set_igmp_version)
  query_max_response_time = __builtin__.property(_get_query_max_response_time, _set_query_max_response_time)
  last_member_query_count = __builtin__.property(_get_last_member_query_count, _set_last_member_query_count)
  startup_query_count = __builtin__.property(_get_startup_query_count, _set_startup_query_count)
  startup_query_interval = __builtin__.property(_get_startup_query_interval, _set_startup_query_interval)
  robustness_variable = __builtin__.property(_get_robustness_variable, _set_robustness_variable)
  snooping = __builtin__.property(_get_snooping, _set_snooping)
  static_group = __builtin__.property(_get_static_group, _set_static_group)


  _pyangbind_elements = {'last_member_query_interval': last_member_query_interval, 'query_interval': query_interval, 'igmp_version': igmp_version, 'query_max_response_time': query_max_response_time, 'last_member_query_count': last_member_query_count, 'startup_query_count': startup_query_count, 'startup_query_interval': startup_query_interval, 'robustness_variable': robustness_variable, 'snooping': snooping, 'static_group': static_group, }


