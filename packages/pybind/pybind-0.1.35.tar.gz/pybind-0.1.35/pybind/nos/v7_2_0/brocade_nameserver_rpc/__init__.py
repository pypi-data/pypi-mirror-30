
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import get_nameserver_detail
class brocade_nameserver(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-nameserver - based on the path /brocade_nameserver_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The management module is an instrumentation to manage the
Fibre Channel (FC) Name Server, which realizes the FC-GS-6
requirements.

This module provides the means for monitoring the operation
of, and configuring some parameters of, one or more instances
of Fibre Channel Name Server functionality.

The Fibre Channel Name Server provides a way for N_Ports and
NL_Ports to register and discover Fibre Channel attributes.
Such attributes include names, addresses, types, features,
etc., at various protocol layers, including upper layer
protocols specific to Fibre Channel (which are sometimes
called 'FC-4s').

Physically, Fibre Channel is an interconnection of multiple
communication points, called N_Ports, interconnected either by
a switching network, called a Fabric, or by a point-to-point
link. A Fibre Channel 'node' consists of one or more N_Ports.
A Fabric may consist of multiple Interconnect Elements, some
of which are switches.  An N_Port connects to the Fabric via a
port on a switch called an F_Port.  When multiple FC nodes are
connected to a single port on a switch via an 'Arbitrated Loop'
topology, the switch port is called an FL_Port, and the nodes'
ports are called NL_Ports.  The term Nx_Port is used to refer
to either an N_Port or an NL_Port.

Glossary of the terms used:
---------------------------
F_Port              -   Port on the RBridge that connects to a
                       node point-to-point.

FL_Port             -   Port on the RBridge that connects to a
                       FC-AL loop.

Frame Redirection   -   A Brocade-proprietary feature that uses
                       zoning to define a redirected path for
                       Initiator and Target traffic. Traffic is
                       redirected to a network appliance via a
                       virtual initiator and virtual target.

iSCSI               -   Internet Small Computer System
                       Interface.

N_Port              -   Port on a node used with both FC-P2P
                       or FC-SW topologies.

NL_Port             -   Port on a node used with an FC-AL
                       topology.

NPIV                -   N_Port ID Virtualization.

Nx_Port             -   A generic port that can become an N_port
                       or NL_Port.

Port ID (PID)       -   The Fibre Channel address ID in DDAAPP
                       hexadecimal format.

SCR                 -   State Change Registration.

Shared Area         -   A Brocade-proprietary method of
                       addressing where the area address uses
                       the traditional 8-bits of the FCID
                       'AREA' field, plus an additional 2-bits
                       from the FCID 'AL_PA' field.

Translate Domain    -   FOS FC routing (FCR) creates an
                       translate domain in the local edge
                       fabric and this represents the
                       remote edge fabric
                       (also, 'Xlate Domain')

Access Gateway (AG) -   The Access Gateway feature, a software 
                       feature that allows a Brocade switch 
                       to act as transparent 'port expander', 
                       connecting multiple FC devices
                       (typically host HBA ports) to a single 
                       FC fabric port (F_Port). The Access 
                       Gateway connects to the fabric using 
                       the FC N_Port protocol rather than the 
                       E_Port protocol normally used by a 
                       switch, and uses the FC-FS N_Port ID 
                       Virtualization (NPIV) facility to 
                       allow its client devices to connect to 
                       the FC fabric. Although it uses its 
                       switching logic to allow the attached 
                       devices to send and receive FC traffic 
                       to the fabric, it is not recognized by 
                       the fabric as a 'switch' and therefore
                       doesn't consume a domain ID and doesn't
                       participate in the switch-to-switch 
                       traffic normal to an FC fabric.

  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__get_nameserver_detail',)

  _yang_name = 'brocade-nameserver'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__get_nameserver_detail = YANGDynClass(base=get_nameserver_detail.get_nameserver_detail, is_leaf=True, yang_name="get-nameserver-detail", rest_name="get-nameserver-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'display detail device information.', u'hidden': u'rpccmd', u'actionpoint': u'show_ns_detail'}}, namespace='urn:brocade.com:mgmt:brocade-nameserver', defining_module='brocade-nameserver', yang_type='rpc', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_nameserver_rpc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return []

  def _get_get_nameserver_detail(self):
    """
    Getter method for get_nameserver_detail, mapped from YANG variable /brocade_nameserver_rpc/get_nameserver_detail (rpc)

    YANG Description: A function to display the detailed information of
the devices stored in the Name Server database.
    """
    return self.__get_nameserver_detail
      
  def _set_get_nameserver_detail(self, v, load=False):
    """
    Setter method for get_nameserver_detail, mapped from YANG variable /brocade_nameserver_rpc/get_nameserver_detail (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_get_nameserver_detail is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_get_nameserver_detail() directly.

    YANG Description: A function to display the detailed information of
the devices stored in the Name Server database.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=get_nameserver_detail.get_nameserver_detail, is_leaf=True, yang_name="get-nameserver-detail", rest_name="get-nameserver-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'display detail device information.', u'hidden': u'rpccmd', u'actionpoint': u'show_ns_detail'}}, namespace='urn:brocade.com:mgmt:brocade-nameserver', defining_module='brocade-nameserver', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """get_nameserver_detail must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=get_nameserver_detail.get_nameserver_detail, is_leaf=True, yang_name="get-nameserver-detail", rest_name="get-nameserver-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'display detail device information.', u'hidden': u'rpccmd', u'actionpoint': u'show_ns_detail'}}, namespace='urn:brocade.com:mgmt:brocade-nameserver', defining_module='brocade-nameserver', yang_type='rpc', is_config=True)""",
        })

    self.__get_nameserver_detail = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_get_nameserver_detail(self):
    self.__get_nameserver_detail = YANGDynClass(base=get_nameserver_detail.get_nameserver_detail, is_leaf=True, yang_name="get-nameserver-detail", rest_name="get-nameserver-detail", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'info': u'display detail device information.', u'hidden': u'rpccmd', u'actionpoint': u'show_ns_detail'}}, namespace='urn:brocade.com:mgmt:brocade-nameserver', defining_module='brocade-nameserver', yang_type='rpc', is_config=True)

  get_nameserver_detail = __builtin__.property(_get_get_nameserver_detail, _set_get_nameserver_detail)


  _pyangbind_elements = {'get_nameserver_detail': get_nameserver_detail, }


