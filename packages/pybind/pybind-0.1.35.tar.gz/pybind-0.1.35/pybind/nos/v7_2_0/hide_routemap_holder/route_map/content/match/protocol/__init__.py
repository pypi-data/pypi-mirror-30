
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import protocol_static_container
import bgp_protocol_container
class protocol(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-ip-policy - based on the path /hide-routemap-holder/route-map/content/match/protocol. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Match route on protocol type and sub-type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__protocol_static_container','__bgp_protocol_container',)

  _yang_name = 'protocol'
  _rest_name = 'protocol'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__bgp_protocol_container = YANGDynClass(base=bgp_protocol_container.bgp_protocol_container, is_container='container', presence=False, yang_name="bgp-protocol-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    self.__protocol_static_container = YANGDynClass(base=protocol_static_container.protocol_static_container, is_container='container', presence=False, yang_name="protocol-static-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'hide-routemap-holder', u'route-map', u'content', u'match', u'protocol']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'route-map', u'match', u'protocol']

  def _get_protocol_static_container(self):
    """
    Getter method for protocol_static_container, mapped from YANG variable /hide_routemap_holder/route_map/content/match/protocol/protocol_static_container (container)
    """
    return self.__protocol_static_container
      
  def _set_protocol_static_container(self, v, load=False):
    """
    Setter method for protocol_static_container, mapped from YANG variable /hide_routemap_holder/route_map/content/match/protocol/protocol_static_container (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_protocol_static_container is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_protocol_static_container() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=protocol_static_container.protocol_static_container, is_container='container', presence=False, yang_name="protocol-static-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """protocol_static_container must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=protocol_static_container.protocol_static_container, is_container='container', presence=False, yang_name="protocol-static-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)""",
        })

    self.__protocol_static_container = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_protocol_static_container(self):
    self.__protocol_static_container = YANGDynClass(base=protocol_static_container.protocol_static_container, is_container='container', presence=False, yang_name="protocol-static-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)


  def _get_bgp_protocol_container(self):
    """
    Getter method for bgp_protocol_container, mapped from YANG variable /hide_routemap_holder/route_map/content/match/protocol/bgp_protocol_container (container)
    """
    return self.__bgp_protocol_container
      
  def _set_bgp_protocol_container(self, v, load=False):
    """
    Setter method for bgp_protocol_container, mapped from YANG variable /hide_routemap_holder/route_map/content/match/protocol/bgp_protocol_container (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bgp_protocol_container is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bgp_protocol_container() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=bgp_protocol_container.bgp_protocol_container, is_container='container', presence=False, yang_name="bgp-protocol-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bgp_protocol_container must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bgp_protocol_container.bgp_protocol_container, is_container='container', presence=False, yang_name="bgp-protocol-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)""",
        })

    self.__bgp_protocol_container = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bgp_protocol_container(self):
    self.__bgp_protocol_container = YANGDynClass(base=bgp_protocol_container.bgp_protocol_container, is_container='container', presence=False, yang_name="bgp-protocol-container", rest_name="", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-sequence-commands': None}}, namespace='urn:brocade.com:mgmt:brocade-ip-policy', defining_module='brocade-ip-policy', yang_type='container', is_config=True)

  protocol_static_container = __builtin__.property(_get_protocol_static_container, _set_protocol_static_container)
  bgp_protocol_container = __builtin__.property(_get_bgp_protocol_container, _set_bgp_protocol_container)


  _pyangbind_elements = {'protocol_static_container': protocol_static_container, 'bgp_protocol_container': bgp_protocol_container, }


