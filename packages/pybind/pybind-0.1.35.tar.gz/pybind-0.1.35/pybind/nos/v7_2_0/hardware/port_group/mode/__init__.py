
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class mode(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-hardware - based on the path /hardware/port-group/mode. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__performance','__portgroup_speed','__support_performance','__support_multispeed',)

  _yang_name = 'mode'
  _rest_name = 'mode'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__performance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="performance", rest_name="performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'port-group in performance mode, this command will shut\nthe density port in port-group making the density port\nun-usable. The command is disruptive and irreversible.\nRequire power-cycle to restore the configuration.', u'display-when': u'(../support_performance = "true")', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='empty', is_config=True)
    self.__support_multispeed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="support_multispeed", rest_name="support_multispeed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support speed change feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)
    self.__support_performance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="support_performance", rest_name="support_performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support performance feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)
    self.__portgroup_speed = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'40g': {'value': 0}, u'100g': {'value': 1}},), is_leaf=True, yang_name="portgroup-speed", rest_name="portgroup-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'display-when': u'(../support_multispeed = "true")', u'info': u'port-group dynamically change the mode of speed', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='portgroup-speed-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'hardware', u'port-group', u'mode']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'hardware', u'port-group', u'mode']

  def _get_performance(self):
    """
    Getter method for performance, mapped from YANG variable /hardware/port_group/mode/performance (empty)
    """
    return self.__performance
      
  def _set_performance(self, v, load=False):
    """
    Setter method for performance, mapped from YANG variable /hardware/port_group/mode/performance (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_performance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_performance() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="performance", rest_name="performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'port-group in performance mode, this command will shut\nthe density port in port-group making the density port\nun-usable. The command is disruptive and irreversible.\nRequire power-cycle to restore the configuration.', u'display-when': u'(../support_performance = "true")', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """performance must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="performance", rest_name="performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'port-group in performance mode, this command will shut\nthe density port in port-group making the density port\nun-usable. The command is disruptive and irreversible.\nRequire power-cycle to restore the configuration.', u'display-when': u'(../support_performance = "true")', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='empty', is_config=True)""",
        })

    self.__performance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_performance(self):
    self.__performance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="performance", rest_name="performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'info': u'port-group in performance mode, this command will shut\nthe density port in port-group making the density port\nun-usable. The command is disruptive and irreversible.\nRequire power-cycle to restore the configuration.', u'display-when': u'(../support_performance = "true")', u'cli-show-no': None, u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='empty', is_config=True)


  def _get_portgroup_speed(self):
    """
    Getter method for portgroup_speed, mapped from YANG variable /hardware/port_group/mode/portgroup_speed (portgroup-speed-type)
    """
    return self.__portgroup_speed
      
  def _set_portgroup_speed(self, v, load=False):
    """
    Setter method for portgroup_speed, mapped from YANG variable /hardware/port_group/mode/portgroup_speed (portgroup-speed-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_portgroup_speed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_portgroup_speed() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'40g': {'value': 0}, u'100g': {'value': 1}},), is_leaf=True, yang_name="portgroup-speed", rest_name="portgroup-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'display-when': u'(../support_multispeed = "true")', u'info': u'port-group dynamically change the mode of speed', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='portgroup-speed-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """portgroup_speed must be of a type compatible with portgroup-speed-type""",
          'defined-type': "brocade-hardware:portgroup-speed-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'40g': {'value': 0}, u'100g': {'value': 1}},), is_leaf=True, yang_name="portgroup-speed", rest_name="portgroup-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'display-when': u'(../support_multispeed = "true")', u'info': u'port-group dynamically change the mode of speed', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='portgroup-speed-type', is_config=True)""",
        })

    self.__portgroup_speed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_portgroup_speed(self):
    self.__portgroup_speed = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'40g': {'value': 0}, u'100g': {'value': 1}},), is_leaf=True, yang_name="portgroup-speed", rest_name="portgroup-speed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'display-when': u'(../support_multispeed = "true")', u'info': u'port-group dynamically change the mode of speed', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='portgroup-speed-type', is_config=True)


  def _get_support_performance(self):
    """
    Getter method for support_performance, mapped from YANG variable /hardware/port_group/mode/support_performance (boolean)
    """
    return self.__support_performance
      
  def _set_support_performance(self, v, load=False):
    """
    Setter method for support_performance, mapped from YANG variable /hardware/port_group/mode/support_performance (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_support_performance is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_support_performance() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="support_performance", rest_name="support_performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support performance feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """support_performance must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="support_performance", rest_name="support_performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support performance feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)""",
        })

    self.__support_performance = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_support_performance(self):
    self.__support_performance = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="support_performance", rest_name="support_performance", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support performance feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)


  def _get_support_multispeed(self):
    """
    Getter method for support_multispeed, mapped from YANG variable /hardware/port_group/mode/support_multispeed (boolean)
    """
    return self.__support_multispeed
      
  def _set_support_multispeed(self, v, load=False):
    """
    Setter method for support_multispeed, mapped from YANG variable /hardware/port_group/mode/support_multispeed (boolean)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_support_multispeed is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_support_multispeed() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="support_multispeed", rest_name="support_multispeed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support speed change feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """support_multispeed must be of a type compatible with boolean""",
          'defined-type': "boolean",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="support_multispeed", rest_name="support_multispeed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support speed change feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)""",
        })

    self.__support_multispeed = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_support_multispeed(self):
    self.__support_multispeed = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="support_multispeed", rest_name="support_multispeed", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'support speed change feature', u'cli-suppress-show-conf-path': None}}, namespace='urn:brocade.com:mgmt:brocade-hardware', defining_module='brocade-hardware', yang_type='boolean', is_config=False)

  performance = __builtin__.property(_get_performance, _set_performance)
  portgroup_speed = __builtin__.property(_get_portgroup_speed, _set_portgroup_speed)
  support_performance = __builtin__.property(_get_support_performance)
  support_multispeed = __builtin__.property(_get_support_multispeed)


  _pyangbind_elements = {'performance': performance, 'portgroup_speed': portgroup_speed, 'support_performance': support_performance, 'support_multispeed': support_multispeed, }


