
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class isns_discovery_domain_list(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isns-ext - based on the path /brocade_isns_ext_rpc/isns-get-discovery-domain-set/output/isns-discovery-domain-set-list/isns-discovery-domain-list. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This is a list of logged-in iSNS devices.
Each row represents a logged-in iSNS device
operational details such as iqn,,
ip addressand device type.
The device iqn is used as the key for this
list as it will be unique for each entry.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__isns_discovery_domain_name',)

  _yang_name = 'isns-discovery-domain-list'
  _rest_name = 'isns-discovery-domain-list'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__isns_discovery_domain_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='isns:isns-dd-name-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_isns_ext_rpc', u'isns-get-discovery-domain-set', u'output', u'isns-discovery-domain-set-list', u'isns-discovery-domain-list']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'isns-get-discovery-domain-set', u'output', u'isns-discovery-domain-set-list', u'isns-discovery-domain-list']

  def _get_isns_discovery_domain_name(self):
    """
    Getter method for isns_discovery_domain_name, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_discovery_domain_set/output/isns_discovery_domain_set_list/isns_discovery_domain_list/isns_discovery_domain_name (isns:isns-dd-name-type)

    YANG Description: This leaf indicates the isns device name.
    """
    return self.__isns_discovery_domain_name
      
  def _set_isns_discovery_domain_name(self, v, load=False):
    """
    Setter method for isns_discovery_domain_name, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_discovery_domain_set/output/isns_discovery_domain_set_list/isns_discovery_domain_list/isns_discovery_domain_name (isns:isns-dd-name-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_discovery_domain_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_discovery_domain_name() directly.

    YANG Description: This leaf indicates the isns device name.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='isns:isns-dd-name-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_discovery_domain_name must be of a type compatible with isns:isns-dd-name-type""",
          'defined-type': "isns:isns-dd-name-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='isns:isns-dd-name-type', is_config=True)""",
        })

    self.__isns_discovery_domain_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_discovery_domain_name(self):
    self.__isns_discovery_domain_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[-_0-9a-zA-Z]{1,255}', 'length': [u'1..255']}), is_leaf=True, yang_name="isns-discovery-domain-name", rest_name="isns-discovery-domain-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='isns:isns-dd-name-type', is_config=True)

  isns_discovery_domain_name = __builtin__.property(_get_isns_discovery_domain_name, _set_isns_discovery_domain_name)


  _pyangbind_elements = {'isns_discovery_domain_name': isns_discovery_domain_name, }


