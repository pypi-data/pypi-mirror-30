
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import isns_get_device_brief
import isns_get_discovery_domain
import isns_get_discovery_domain_set
import isns_get_vrf_forwarding
import isns_get_last_device_timestamp
import isns_get_server_role
class brocade_isns_ext(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-isns-ext - based on the path /brocade_isns_ext_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This management module is an extension to iSNS model for
    - Defining RPCs to retrieve operational information of 
      the iSNS.

Glossary of the terms used:
---------------------------
ACC frame - Accept frame

iSNS -      Internet Storage Name Service (iSNS) is a 
protocol that provides internet name service 
to the iSCSI and FC devices.

  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__isns_get_device_brief','__isns_get_discovery_domain','__isns_get_discovery_domain_set','__isns_get_vrf_forwarding','__isns_get_last_device_timestamp','__isns_get_server_role',)

  _yang_name = 'brocade-isns-ext'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__isns_get_device_brief = YANGDynClass(base=isns_get_device_brief.isns_get_device_brief, is_leaf=True, yang_name="isns-get-device-brief", rest_name="isns-get-device-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    self.__isns_get_discovery_domain = YANGDynClass(base=isns_get_discovery_domain.isns_get_discovery_domain, is_leaf=True, yang_name="isns-get-discovery-domain", rest_name="isns-get-discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    self.__isns_get_vrf_forwarding = YANGDynClass(base=isns_get_vrf_forwarding.isns_get_vrf_forwarding, is_leaf=True, yang_name="isns-get-vrf-forwarding", rest_name="isns-get-vrf-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    self.__isns_get_server_role = YANGDynClass(base=isns_get_server_role.isns_get_server_role, is_leaf=True, yang_name="isns-get-server-role", rest_name="isns-get-server-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    self.__isns_get_last_device_timestamp = YANGDynClass(base=isns_get_last_device_timestamp.isns_get_last_device_timestamp, is_leaf=True, yang_name="isns-get-last-device-timestamp", rest_name="isns-get-last-device-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    self.__isns_get_discovery_domain_set = YANGDynClass(base=isns_get_discovery_domain_set.isns_get_discovery_domain_set, is_leaf=True, yang_name="isns-get-discovery-domain-set", rest_name="isns-get-discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_isns_ext_rpc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return []

  def _get_isns_get_device_brief(self):
    """
    Getter method for isns_get_device_brief, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_device_brief (rpc)

    YANG Description: This function provides the iSNS device information
that have been logged in.
    """
    return self.__isns_get_device_brief
      
  def _set_isns_get_device_brief(self, v, load=False):
    """
    Setter method for isns_get_device_brief, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_device_brief (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_get_device_brief is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_get_device_brief() directly.

    YANG Description: This function provides the iSNS device information
that have been logged in.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isns_get_device_brief.isns_get_device_brief, is_leaf=True, yang_name="isns-get-device-brief", rest_name="isns-get-device-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_get_device_brief must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=isns_get_device_brief.isns_get_device_brief, is_leaf=True, yang_name="isns-get-device-brief", rest_name="isns-get-device-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)""",
        })

    self.__isns_get_device_brief = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_get_device_brief(self):
    self.__isns_get_device_brief = YANGDynClass(base=isns_get_device_brief.isns_get_device_brief, is_leaf=True, yang_name="isns-get-device-brief", rest_name="isns-get-device-brief", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)


  def _get_isns_get_discovery_domain(self):
    """
    Getter method for isns_get_discovery_domain, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_discovery_domain (rpc)

    YANG Description: This function provides the iSNS device information
that have been logged in.
    """
    return self.__isns_get_discovery_domain
      
  def _set_isns_get_discovery_domain(self, v, load=False):
    """
    Setter method for isns_get_discovery_domain, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_discovery_domain (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_get_discovery_domain is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_get_discovery_domain() directly.

    YANG Description: This function provides the iSNS device information
that have been logged in.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isns_get_discovery_domain.isns_get_discovery_domain, is_leaf=True, yang_name="isns-get-discovery-domain", rest_name="isns-get-discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_get_discovery_domain must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=isns_get_discovery_domain.isns_get_discovery_domain, is_leaf=True, yang_name="isns-get-discovery-domain", rest_name="isns-get-discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)""",
        })

    self.__isns_get_discovery_domain = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_get_discovery_domain(self):
    self.__isns_get_discovery_domain = YANGDynClass(base=isns_get_discovery_domain.isns_get_discovery_domain, is_leaf=True, yang_name="isns-get-discovery-domain", rest_name="isns-get-discovery-domain", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)


  def _get_isns_get_discovery_domain_set(self):
    """
    Getter method for isns_get_discovery_domain_set, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_discovery_domain_set (rpc)

    YANG Description: This function provides the iSNS discovery domain set information
that have been created in.
    """
    return self.__isns_get_discovery_domain_set
      
  def _set_isns_get_discovery_domain_set(self, v, load=False):
    """
    Setter method for isns_get_discovery_domain_set, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_discovery_domain_set (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_get_discovery_domain_set is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_get_discovery_domain_set() directly.

    YANG Description: This function provides the iSNS discovery domain set information
that have been created in.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isns_get_discovery_domain_set.isns_get_discovery_domain_set, is_leaf=True, yang_name="isns-get-discovery-domain-set", rest_name="isns-get-discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_get_discovery_domain_set must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=isns_get_discovery_domain_set.isns_get_discovery_domain_set, is_leaf=True, yang_name="isns-get-discovery-domain-set", rest_name="isns-get-discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)""",
        })

    self.__isns_get_discovery_domain_set = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_get_discovery_domain_set(self):
    self.__isns_get_discovery_domain_set = YANGDynClass(base=isns_get_discovery_domain_set.isns_get_discovery_domain_set, is_leaf=True, yang_name="isns-get-discovery-domain-set", rest_name="isns-get-discovery-domain-set", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)


  def _get_isns_get_vrf_forwarding(self):
    """
    Getter method for isns_get_vrf_forwarding, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_vrf_forwarding (rpc)

    YANG Description: This function provides the iSNS esi timeout and
loopback ip address.
    """
    return self.__isns_get_vrf_forwarding
      
  def _set_isns_get_vrf_forwarding(self, v, load=False):
    """
    Setter method for isns_get_vrf_forwarding, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_vrf_forwarding (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_get_vrf_forwarding is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_get_vrf_forwarding() directly.

    YANG Description: This function provides the iSNS esi timeout and
loopback ip address.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isns_get_vrf_forwarding.isns_get_vrf_forwarding, is_leaf=True, yang_name="isns-get-vrf-forwarding", rest_name="isns-get-vrf-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_get_vrf_forwarding must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=isns_get_vrf_forwarding.isns_get_vrf_forwarding, is_leaf=True, yang_name="isns-get-vrf-forwarding", rest_name="isns-get-vrf-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)""",
        })

    self.__isns_get_vrf_forwarding = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_get_vrf_forwarding(self):
    self.__isns_get_vrf_forwarding = YANGDynClass(base=isns_get_vrf_forwarding.isns_get_vrf_forwarding, is_leaf=True, yang_name="isns-get-vrf-forwarding", rest_name="isns-get-vrf-forwarding", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)


  def _get_isns_get_last_device_timestamp(self):
    """
    Getter method for isns_get_last_device_timestamp, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_last_device_timestamp (rpc)

    YANG Description: This function provides login or logout time of last isns device registered or deregistered respectively 
    """
    return self.__isns_get_last_device_timestamp
      
  def _set_isns_get_last_device_timestamp(self, v, load=False):
    """
    Setter method for isns_get_last_device_timestamp, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_last_device_timestamp (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_get_last_device_timestamp is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_get_last_device_timestamp() directly.

    YANG Description: This function provides login or logout time of last isns device registered or deregistered respectively 
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isns_get_last_device_timestamp.isns_get_last_device_timestamp, is_leaf=True, yang_name="isns-get-last-device-timestamp", rest_name="isns-get-last-device-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_get_last_device_timestamp must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=isns_get_last_device_timestamp.isns_get_last_device_timestamp, is_leaf=True, yang_name="isns-get-last-device-timestamp", rest_name="isns-get-last-device-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)""",
        })

    self.__isns_get_last_device_timestamp = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_get_last_device_timestamp(self):
    self.__isns_get_last_device_timestamp = YANGDynClass(base=isns_get_last_device_timestamp.isns_get_last_device_timestamp, is_leaf=True, yang_name="isns-get-last-device-timestamp", rest_name="isns-get-last-device-timestamp", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)


  def _get_isns_get_server_role(self):
    """
    Getter method for isns_get_server_role, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_server_role (rpc)

    YANG Description: This function provides whether a node in a cluster is a primary or secondary
    """
    return self.__isns_get_server_role
      
  def _set_isns_get_server_role(self, v, load=False):
    """
    Setter method for isns_get_server_role, mapped from YANG variable /brocade_isns_ext_rpc/isns_get_server_role (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_isns_get_server_role is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_isns_get_server_role() directly.

    YANG Description: This function provides whether a node in a cluster is a primary or secondary
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=isns_get_server_role.isns_get_server_role, is_leaf=True, yang_name="isns-get-server-role", rest_name="isns-get-server-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """isns_get_server_role must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=isns_get_server_role.isns_get_server_role, is_leaf=True, yang_name="isns-get-server-role", rest_name="isns-get-server-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)""",
        })

    self.__isns_get_server_role = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_isns_get_server_role(self):
    self.__isns_get_server_role = YANGDynClass(base=isns_get_server_role.isns_get_server_role, is_leaf=True, yang_name="isns-get-server-role", rest_name="isns-get-server-role", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'isns-show-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-isns-ext', defining_module='brocade-isns-ext', yang_type='rpc', is_config=True)

  isns_get_device_brief = __builtin__.property(_get_isns_get_device_brief, _set_isns_get_device_brief)
  isns_get_discovery_domain = __builtin__.property(_get_isns_get_discovery_domain, _set_isns_get_discovery_domain)
  isns_get_discovery_domain_set = __builtin__.property(_get_isns_get_discovery_domain_set, _set_isns_get_discovery_domain_set)
  isns_get_vrf_forwarding = __builtin__.property(_get_isns_get_vrf_forwarding, _set_isns_get_vrf_forwarding)
  isns_get_last_device_timestamp = __builtin__.property(_get_isns_get_last_device_timestamp, _set_isns_get_last_device_timestamp)
  isns_get_server_role = __builtin__.property(_get_isns_get_server_role, _set_isns_get_server_role)


  _pyangbind_elements = {'isns_get_device_brief': isns_get_device_brief, 'isns_get_discovery_domain': isns_get_discovery_domain, 'isns_get_discovery_domain_set': isns_get_discovery_domain_set, 'isns_get_vrf_forwarding': isns_get_vrf_forwarding, 'isns_get_last_device_timestamp': isns_get_last_device_timestamp, 'isns_get_server_role': isns_get_server_role, }


