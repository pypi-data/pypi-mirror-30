
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import querier
import mrouter
class snooping(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface-vlan/interface/vlan/ip/igmp/snooping. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__enable','__fast_leave','__mrouter_timeout','__restrict_unknown_multicast','__querier','__mrouter',)

  _yang_name = 'snooping'
  _rest_name = 'snooping'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Enable', u'cli-run-template': u'$(/igmp-snooping/ip/igmp/snooping/enable?$(.?:no ip igmp snooping enable\n):$(.?ip igmp snooping enable\n:))', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)
    self.__mrouter = YANGDynClass(base=mrouter.mrouter, is_container='container', presence=False, yang_name="mrouter", rest_name="mrouter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Multicast Router', u'callpoint': u'IgmpsMrtrVlan', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)
    self.__restrict_unknown_multicast = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="restrict-unknown-multicast", rest_name="restrict-unknown-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Restrict Unknown Multicast traffic', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)
    self.__querier = YANGDynClass(base=querier.querier, is_container='container', presence=False, yang_name="querier", rest_name="querier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Querier', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)
    self.__fast_leave = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fast-leave", rest_name="fast-leave", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Fast Leave Processing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)
    self.__mrouter_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..60000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(300), is_leaf=True, yang_name="mrouter-timeout", rest_name="mrouter-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mrouter timeout', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='mrti-type', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface-vlan', u'interface', u'vlan', u'ip', u'igmp', u'snooping']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Vlan', u'ip', u'igmp', u'snooping']

  def _get_enable(self):
    """
    Getter method for enable, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/enable (empty)
    """
    return self.__enable
      
  def _set_enable(self, v, load=False):
    """
    Setter method for enable, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/enable (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_enable is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_enable() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Enable', u'cli-run-template': u'$(/igmp-snooping/ip/igmp/snooping/enable?$(.?:no ip igmp snooping enable\n):$(.?ip igmp snooping enable\n:))', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """enable must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Enable', u'cli-run-template': u'$(/igmp-snooping/ip/igmp/snooping/enable?$(.?:no ip igmp snooping enable\n):$(.?ip igmp snooping enable\n:))', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)""",
        })

    self.__enable = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_enable(self):
    self.__enable = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="enable", rest_name="enable", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'IGMP Enable', u'cli-run-template': u'$(/igmp-snooping/ip/igmp/snooping/enable?$(.?:no ip igmp snooping enable\n):$(.?ip igmp snooping enable\n:))', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)


  def _get_fast_leave(self):
    """
    Getter method for fast_leave, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/fast_leave (empty)
    """
    return self.__fast_leave
      
  def _set_fast_leave(self, v, load=False):
    """
    Setter method for fast_leave, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/fast_leave (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fast_leave is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fast_leave() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="fast-leave", rest_name="fast-leave", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Fast Leave Processing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fast_leave must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fast-leave", rest_name="fast-leave", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Fast Leave Processing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)""",
        })

    self.__fast_leave = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fast_leave(self):
    self.__fast_leave = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fast-leave", rest_name="fast-leave", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Fast Leave Processing', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)


  def _get_mrouter_timeout(self):
    """
    Getter method for mrouter_timeout, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/mrouter_timeout (mrti-type)
    """
    return self.__mrouter_timeout
      
  def _set_mrouter_timeout(self, v, load=False):
    """
    Setter method for mrouter_timeout, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/mrouter_timeout (mrti-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mrouter_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mrouter_timeout() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..60000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(300), is_leaf=True, yang_name="mrouter-timeout", rest_name="mrouter-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mrouter timeout', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='mrti-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mrouter_timeout must be of a type compatible with mrti-type""",
          'defined-type': "brocade-igmp-snooping:mrti-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..60000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(300), is_leaf=True, yang_name="mrouter-timeout", rest_name="mrouter-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mrouter timeout', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='mrti-type', is_config=True)""",
        })

    self.__mrouter_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mrouter_timeout(self):
    self.__mrouter_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..60000']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(300), is_leaf=True, yang_name="mrouter-timeout", rest_name="mrouter-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Mrouter timeout', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='mrti-type', is_config=True)


  def _get_restrict_unknown_multicast(self):
    """
    Getter method for restrict_unknown_multicast, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/restrict_unknown_multicast (empty)
    """
    return self.__restrict_unknown_multicast
      
  def _set_restrict_unknown_multicast(self, v, load=False):
    """
    Setter method for restrict_unknown_multicast, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/restrict_unknown_multicast (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_restrict_unknown_multicast is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_restrict_unknown_multicast() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="restrict-unknown-multicast", rest_name="restrict-unknown-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Restrict Unknown Multicast traffic', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """restrict_unknown_multicast must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="restrict-unknown-multicast", rest_name="restrict-unknown-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Restrict Unknown Multicast traffic', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)""",
        })

    self.__restrict_unknown_multicast = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_restrict_unknown_multicast(self):
    self.__restrict_unknown_multicast = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="restrict-unknown-multicast", rest_name="restrict-unknown-multicast", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Restrict Unknown Multicast traffic', u'cli-full-command': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='empty', is_config=True)


  def _get_querier(self):
    """
    Getter method for querier, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/querier (container)
    """
    return self.__querier
      
  def _set_querier(self, v, load=False):
    """
    Setter method for querier, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/querier (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_querier is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_querier() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=querier.querier, is_container='container', presence=False, yang_name="querier", rest_name="querier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Querier', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """querier must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=querier.querier, is_container='container', presence=False, yang_name="querier", rest_name="querier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Querier', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)""",
        })

    self.__querier = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_querier(self):
    self.__querier = YANGDynClass(base=querier.querier, is_container='container', presence=False, yang_name="querier", rest_name="querier", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Querier', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)


  def _get_mrouter(self):
    """
    Getter method for mrouter, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/mrouter (container)
    """
    return self.__mrouter
      
  def _set_mrouter(self, v, load=False):
    """
    Setter method for mrouter, mapped from YANG variable /interface_vlan/interface/vlan/ip/igmp/snooping/mrouter (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_mrouter is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_mrouter() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=mrouter.mrouter, is_container='container', presence=False, yang_name="mrouter", rest_name="mrouter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Multicast Router', u'callpoint': u'IgmpsMrtrVlan', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """mrouter must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=mrouter.mrouter, is_container='container', presence=False, yang_name="mrouter", rest_name="mrouter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Multicast Router', u'callpoint': u'IgmpsMrtrVlan', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)""",
        })

    self.__mrouter = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_mrouter(self):
    self.__mrouter = YANGDynClass(base=mrouter.mrouter, is_container='container', presence=False, yang_name="mrouter", rest_name="mrouter", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Multicast Router', u'callpoint': u'IgmpsMrtrVlan', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-igmp-snooping', defining_module='brocade-igmp-snooping', yang_type='container', is_config=True)

  enable = __builtin__.property(_get_enable, _set_enable)
  fast_leave = __builtin__.property(_get_fast_leave, _set_fast_leave)
  mrouter_timeout = __builtin__.property(_get_mrouter_timeout, _set_mrouter_timeout)
  restrict_unknown_multicast = __builtin__.property(_get_restrict_unknown_multicast, _set_restrict_unknown_multicast)
  querier = __builtin__.property(_get_querier, _set_querier)
  mrouter = __builtin__.property(_get_mrouter, _set_mrouter)


  _pyangbind_elements = {'enable': enable, 'fast_leave': fast_leave, 'mrouter_timeout': mrouter_timeout, 'restrict_unknown_multicast': restrict_unknown_multicast, 'querier': querier, 'mrouter': mrouter, }


