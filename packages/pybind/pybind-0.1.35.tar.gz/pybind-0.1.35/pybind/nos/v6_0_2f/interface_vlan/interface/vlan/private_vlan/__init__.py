
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import association
class private_vlan(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface-vlan/interface/vlan/private-vlan. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: Configure a Private Vlan
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__pvlan_type_leaf','__association',)

  _yang_name = 'private-vlan'
  _rest_name = 'private-vlan'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__pvlan_type_leaf = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary': {'value': 1}, u'community': {'value': 3}, u'isolated': {'value': 2}},), is_leaf=True, yang_name="pvlan-type-leaf", rest_name="pvlan-type-leaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='pvlan-type', is_config=True)
    self.__association = YANGDynClass(base=association.association, is_container='container', presence=False, yang_name="association", rest_name="association", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate Secondary Vlan/Vlans', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface-vlan', u'interface', u'vlan', u'private-vlan']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Vlan', u'private-vlan']

  def _get_pvlan_type_leaf(self):
    """
    Getter method for pvlan_type_leaf, mapped from YANG variable /interface_vlan/interface/vlan/private_vlan/pvlan_type_leaf (pvlan-type)

    YANG Description: Set the PVLAN type of the VLAN interface
    """
    return self.__pvlan_type_leaf
      
  def _set_pvlan_type_leaf(self, v, load=False):
    """
    Setter method for pvlan_type_leaf, mapped from YANG variable /interface_vlan/interface/vlan/private_vlan/pvlan_type_leaf (pvlan-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pvlan_type_leaf is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pvlan_type_leaf() directly.

    YANG Description: Set the PVLAN type of the VLAN interface
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary': {'value': 1}, u'community': {'value': 3}, u'isolated': {'value': 2}},), is_leaf=True, yang_name="pvlan-type-leaf", rest_name="pvlan-type-leaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='pvlan-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pvlan_type_leaf must be of a type compatible with pvlan-type""",
          'defined-type': "brocade-interface:pvlan-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary': {'value': 1}, u'community': {'value': 3}, u'isolated': {'value': 2}},), is_leaf=True, yang_name="pvlan-type-leaf", rest_name="pvlan-type-leaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='pvlan-type', is_config=True)""",
        })

    self.__pvlan_type_leaf = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pvlan_type_leaf(self):
    self.__pvlan_type_leaf = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'primary': {'value': 1}, u'community': {'value': 3}, u'isolated': {'value': 2}},), is_leaf=True, yang_name="pvlan-type-leaf", rest_name="pvlan-type-leaf", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-full-command': None, u'cli-drop-node-name': None, u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='pvlan-type', is_config=True)


  def _get_association(self):
    """
    Getter method for association, mapped from YANG variable /interface_vlan/interface/vlan/private_vlan/association (container)
    """
    return self.__association
      
  def _set_association(self, v, load=False):
    """
    Setter method for association, mapped from YANG variable /interface_vlan/interface/vlan/private_vlan/association (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_association is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_association() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=association.association, is_container='container', presence=False, yang_name="association", rest_name="association", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate Secondary Vlan/Vlans', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """association must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=association.association, is_container='container', presence=False, yang_name="association", rest_name="association", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate Secondary Vlan/Vlans', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='container', is_config=True)""",
        })

    self.__association = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_association(self):
    self.__association = YANGDynClass(base=association.association, is_container='container', presence=False, yang_name="association", rest_name="association", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Associate Secondary Vlan/Vlans', u'cli-suppress-no': None}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='container', is_config=True)

  pvlan_type_leaf = __builtin__.property(_get_pvlan_type_leaf, _set_pvlan_type_leaf)
  association = __builtin__.property(_get_association, _set_association)


  _pyangbind_elements = {'pvlan_type_leaf': pvlan_type_leaf, 'association': association, }


