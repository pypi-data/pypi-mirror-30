
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import fcoe_interface_bind
class fcoe(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface/fcoe. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: The list of FCoE interfaces. Each row contains FCoE
interface name and its status.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__fcoe_interface_name','__fcoe_interface_shutdown','__fcoe_interface_bind',)

  _yang_name = 'fcoe'
  _rest_name = 'Fcoe'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__fcoe_interface_shutdown = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-interface-shutdown", rest_name="shutdown", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the port', u'alt-name': u'shutdown', u'sort-priority': u'RUNNCFG_INTERFACE_LEVEL_BASIC_CONFIG', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='empty', is_config=True)
    self.__fcoe_interface_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-interface-name", rest_name="fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-suppress-range': None, u'cli-drop-node-name': None, u'cli-custom-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='interface-fcoe-type', is_config=True)
    self.__fcoe_interface_bind = YANGDynClass(base=fcoe_interface_bind.fcoe_interface_bind, is_container='container', presence=False, yang_name="fcoe-interface-bind", rest_name="bind", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Bind the FCoE interface to a Physical Ethernet Port.', u'cli-sequence-commands': None, u'alt-name': u'bind', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface', u'fcoe']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface', u'Fcoe']

  def _get_fcoe_interface_name(self):
    """
    Getter method for fcoe_interface_name, mapped from YANG variable /interface/fcoe/fcoe_interface_name (interface-fcoe-type)

    YANG Description: This specifies the FCoE interface name.
    """
    return self.__fcoe_interface_name
      
  def _set_fcoe_interface_name(self, v, load=False):
    """
    Setter method for fcoe_interface_name, mapped from YANG variable /interface/fcoe/fcoe_interface_name (interface-fcoe-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_interface_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_interface_name() directly.

    YANG Description: This specifies the FCoE interface name.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-interface-name", rest_name="fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-suppress-range': None, u'cli-drop-node-name': None, u'cli-custom-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='interface-fcoe-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_interface_name must be of a type compatible with interface-fcoe-type""",
          'defined-type': "brocade-fcoe:interface-fcoe-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-interface-name", rest_name="fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-suppress-range': None, u'cli-drop-node-name': None, u'cli-custom-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='interface-fcoe-type', is_config=True)""",
        })

    self.__fcoe_interface_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_interface_name(self):
    self.__fcoe_interface_name = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'length': [u'3..32']}), is_leaf=True, yang_name="fcoe-interface-name", rest_name="fcoe-interface-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-suppress-range': None, u'cli-drop-node-name': None, u'cli-custom-range': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='interface-fcoe-type', is_config=True)


  def _get_fcoe_interface_shutdown(self):
    """
    Getter method for fcoe_interface_shutdown, mapped from YANG variable /interface/fcoe/fcoe_interface_shutdown (empty)

    YANG Description: This specifies, if the FCoE interface is enabled
or not. 
The presence of this leaf indicates the 
interface is shutdown.
    """
    return self.__fcoe_interface_shutdown
      
  def _set_fcoe_interface_shutdown(self, v, load=False):
    """
    Setter method for fcoe_interface_shutdown, mapped from YANG variable /interface/fcoe/fcoe_interface_shutdown (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_interface_shutdown is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_interface_shutdown() directly.

    YANG Description: This specifies, if the FCoE interface is enabled
or not. 
The presence of this leaf indicates the 
interface is shutdown.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="fcoe-interface-shutdown", rest_name="shutdown", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the port', u'alt-name': u'shutdown', u'sort-priority': u'RUNNCFG_INTERFACE_LEVEL_BASIC_CONFIG', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_interface_shutdown must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-interface-shutdown", rest_name="shutdown", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the port', u'alt-name': u'shutdown', u'sort-priority': u'RUNNCFG_INTERFACE_LEVEL_BASIC_CONFIG', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='empty', is_config=True)""",
        })

    self.__fcoe_interface_shutdown = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_interface_shutdown(self):
    self.__fcoe_interface_shutdown = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="fcoe-interface-shutdown", rest_name="shutdown", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Enable/Disable the port', u'alt-name': u'shutdown', u'sort-priority': u'RUNNCFG_INTERFACE_LEVEL_BASIC_CONFIG', u'cli-show-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='empty', is_config=True)


  def _get_fcoe_interface_bind(self):
    """
    Getter method for fcoe_interface_bind, mapped from YANG variable /interface/fcoe/fcoe_interface_bind (container)

    YANG Description: Bind the FCoE interface to a Physical Ethernet Port.
    """
    return self.__fcoe_interface_bind
      
  def _set_fcoe_interface_bind(self, v, load=False):
    """
    Setter method for fcoe_interface_bind, mapped from YANG variable /interface/fcoe/fcoe_interface_bind (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe_interface_bind is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe_interface_bind() directly.

    YANG Description: Bind the FCoE interface to a Physical Ethernet Port.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=fcoe_interface_bind.fcoe_interface_bind, is_container='container', presence=False, yang_name="fcoe-interface-bind", rest_name="bind", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Bind the FCoE interface to a Physical Ethernet Port.', u'cli-sequence-commands': None, u'alt-name': u'bind', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe_interface_bind must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=fcoe_interface_bind.fcoe_interface_bind, is_container='container', presence=False, yang_name="fcoe-interface-bind", rest_name="bind", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Bind the FCoE interface to a Physical Ethernet Port.', u'cli-sequence-commands': None, u'alt-name': u'bind', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)""",
        })

    self.__fcoe_interface_bind = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe_interface_bind(self):
    self.__fcoe_interface_bind = YANGDynClass(base=fcoe_interface_bind.fcoe_interface_bind, is_container='container', presence=False, yang_name="fcoe-interface-bind", rest_name="bind", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'info': u'Bind the FCoE interface to a Physical Ethernet Port.', u'cli-sequence-commands': None, u'alt-name': u'bind', u'cli-full-no': None}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='container', is_config=True)

  fcoe_interface_name = __builtin__.property(_get_fcoe_interface_name, _set_fcoe_interface_name)
  fcoe_interface_shutdown = __builtin__.property(_get_fcoe_interface_shutdown, _set_fcoe_interface_shutdown)
  fcoe_interface_bind = __builtin__.property(_get_fcoe_interface_bind, _set_fcoe_interface_bind)


  _pyangbind_elements = {'fcoe_interface_name': fcoe_interface_name, 'fcoe_interface_shutdown': fcoe_interface_shutdown, 'fcoe_interface_bind': fcoe_interface_bind, }


