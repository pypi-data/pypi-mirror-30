
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import gigabitethernet
import tengigabitethernet
import fortygigabitethernet
import hundredgigabitethernet
import port_channel
import management
import fc_port
import fcoe
class interface(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-interface - based on the path /interface. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: All the interface related elements of this managed device
grouped under this container.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__gigabitethernet','__tengigabitethernet','__fortygigabitethernet','__hundredgigabitethernet','__port_channel','__management','__fc_port','__fcoe',)

  _yang_name = 'interface'
  _rest_name = 'interface'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__management = YANGDynClass(base=YANGListType("name",management.management, yang_name="management", rest_name="Management", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}), is_container='list', yang_name="management", rest_name="Management", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    self.__fortygigabitethernet = YANGDynClass(base=YANGListType("name",fortygigabitethernet.fortygigabitethernet, yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}), is_container='list', yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    self.__gigabitethernet = YANGDynClass(base=YANGListType("name",gigabitethernet.gigabitethernet, yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}), is_container='list', yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    self.__tengigabitethernet = YANGDynClass(base=YANGListType("name",tengigabitethernet.tengigabitethernet, yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}), is_container='list', yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    self.__fc_port = YANGDynClass(base=YANGListType("name",fc_port.fc_port, yang_name="fc-port", rest_name="FibreChannel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}), is_container='list', yang_name="fc-port", rest_name="FibreChannel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    self.__fcoe = YANGDynClass(base=YANGListType("fcoe_interface_name",fcoe.fcoe, yang_name="fcoe", rest_name="Fcoe", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcoe-interface-name', extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}), is_container='list', yang_name="fcoe", rest_name="Fcoe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)
    self.__hundredgigabitethernet = YANGDynClass(base=YANGListType("name",hundredgigabitethernet.hundredgigabitethernet, yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}), is_container='list', yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    self.__port_channel = YANGDynClass(base=YANGListType("name",port_channel.port_channel, yang_name="port-channel", rest_name="Port-channel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}), is_container='list', yang_name="port-channel", rest_name="Port-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'interface']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'interface']

  def _get_gigabitethernet(self):
    """
    Getter method for gigabitethernet, mapped from YANG variable /interface/gigabitethernet (list)

    YANG Description: The list of GigabitEthernet interfaces in the 
managed device. Each row represents a GigabitEthernet 
interface. The list provides a way to discover all the 
1G physical interfaces in a managed device.
                
In case of logical-switch (VCS cluster), this list 
comprises of all the 1G physical interfaces across 
all the rbridges in the cluster.
    """
    return self.__gigabitethernet
      
  def _set_gigabitethernet(self, v, load=False):
    """
    Setter method for gigabitethernet, mapped from YANG variable /interface/gigabitethernet (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_gigabitethernet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_gigabitethernet() directly.

    YANG Description: The list of GigabitEthernet interfaces in the 
managed device. Each row represents a GigabitEthernet 
interface. The list provides a way to discover all the 
1G physical interfaces in a managed device.
                
In case of logical-switch (VCS cluster), this list 
comprises of all the 1G physical interfaces across 
all the rbridges in the cluster.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",gigabitethernet.gigabitethernet, yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}), is_container='list', yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """gigabitethernet must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",gigabitethernet.gigabitethernet, yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}), is_container='list', yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__gigabitethernet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_gigabitethernet(self):
    self.__gigabitethernet = YANGDynClass(base=YANGListType("name",gigabitethernet.gigabitethernet, yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}), is_container='list', yang_name="gigabitethernet", rest_name="GigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of GigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'GigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_1GIG_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_onegigabit', u'cli-mode-name': u'conf-if-gi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_tengigabitethernet(self):
    """
    Getter method for tengigabitethernet, mapped from YANG variable /interface/tengigabitethernet (list)

    YANG Description: The list of TenGigabitEthernet interfaces in the 
managed device. Each row represents a TenGigabitEthernet 
interface. The list provides a way to discover all the 
10G physical interfaces in a managed device.
                
In case of logical-switch (VCS cluster), this list 
comprises of all the 10G physical interfaces across 
all the rbridges in the cluster.
    """
    return self.__tengigabitethernet
      
  def _set_tengigabitethernet(self, v, load=False):
    """
    Setter method for tengigabitethernet, mapped from YANG variable /interface/tengigabitethernet (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_tengigabitethernet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_tengigabitethernet() directly.

    YANG Description: The list of TenGigabitEthernet interfaces in the 
managed device. Each row represents a TenGigabitEthernet 
interface. The list provides a way to discover all the 
10G physical interfaces in a managed device.
                
In case of logical-switch (VCS cluster), this list 
comprises of all the 10G physical interfaces across 
all the rbridges in the cluster.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",tengigabitethernet.tengigabitethernet, yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}), is_container='list', yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """tengigabitethernet must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",tengigabitethernet.tengigabitethernet, yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}), is_container='list', yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__tengigabitethernet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_tengigabitethernet(self):
    self.__tengigabitethernet = YANGDynClass(base=YANGListType("name",tengigabitethernet.tengigabitethernet, yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}), is_container='list', yang_name="tengigabitethernet", rest_name="TenGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of TenGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'TenGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_tengigabite', u'cli-mode-name': u'conf-if-te-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_fortygigabitethernet(self):
    """
    Getter method for fortygigabitethernet, mapped from YANG variable /interface/fortygigabitethernet (list)

    YANG Description: The list of FortyGigabitEthernet interfaces in the 
managed device. Each row represents a FortyGigabitEthernet 
interface. The list provides a way to discover all the 
40G physical interfaces in a managed device.
                
In case of logical-switch (VCS cluster), this list 
comprises of all the 40G physical interfaces across 
all the rbridges in the cluster.
    """
    return self.__fortygigabitethernet
      
  def _set_fortygigabitethernet(self, v, load=False):
    """
    Setter method for fortygigabitethernet, mapped from YANG variable /interface/fortygigabitethernet (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fortygigabitethernet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fortygigabitethernet() directly.

    YANG Description: The list of FortyGigabitEthernet interfaces in the 
managed device. Each row represents a FortyGigabitEthernet 
interface. The list provides a way to discover all the 
40G physical interfaces in a managed device.
                
In case of logical-switch (VCS cluster), this list 
comprises of all the 40G physical interfaces across 
all the rbridges in the cluster.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",fortygigabitethernet.fortygigabitethernet, yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}), is_container='list', yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fortygigabitethernet must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",fortygigabitethernet.fortygigabitethernet, yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}), is_container='list', yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__fortygigabitethernet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fortygigabitethernet(self):
    self.__fortygigabitethernet = YANGDynClass(base=YANGListType("name",fortygigabitethernet.fortygigabitethernet, yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}), is_container='list', yang_name="fortygigabitethernet", rest_name="FortyGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FortyGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FortyGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_fortygigabit', u'cli-mode-name': u'conf-if-fo-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_hundredgigabitethernet(self):
    """
    Getter method for hundredgigabitethernet, mapped from YANG variable /interface/hundredgigabitethernet (list)

    YANG Description: The list of HundredGigabitEthernet interfaces in the
managed device. Each row represents a HundredGigabitEthernet
interface. The list provides a way to discover all the
100G physical interfaces in a managed device.

In case of logical-switch (VCS cluster), this list
comprises of all the 100G physical interfaces across
all the rbridges in the cluster.
    """
    return self.__hundredgigabitethernet
      
  def _set_hundredgigabitethernet(self, v, load=False):
    """
    Setter method for hundredgigabitethernet, mapped from YANG variable /interface/hundredgigabitethernet (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hundredgigabitethernet is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hundredgigabitethernet() directly.

    YANG Description: The list of HundredGigabitEthernet interfaces in the
managed device. Each row represents a HundredGigabitEthernet
interface. The list provides a way to discover all the
100G physical interfaces in a managed device.

In case of logical-switch (VCS cluster), this list
comprises of all the 100G physical interfaces across
all the rbridges in the cluster.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",hundredgigabitethernet.hundredgigabitethernet, yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}), is_container='list', yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hundredgigabitethernet must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",hundredgigabitethernet.hundredgigabitethernet, yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}), is_container='list', yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__hundredgigabitethernet = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hundredgigabitethernet(self):
    self.__hundredgigabitethernet = YANGDynClass(base=YANGListType("name",hundredgigabitethernet.hundredgigabitethernet, yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}), is_container='list', yang_name="hundredgigabitethernet", rest_name="HundredGigabitEthernet", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of HundredGigabitEthernet interfaces.', u'cli-no-key-completion': None, u'alt-name': u'HundredGigabitEthernet', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PHYSICAL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_hundredgigabit', u'cli-mode-name': u'conf-if-hu-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_port_channel(self):
    """
    Getter method for port_channel, mapped from YANG variable /interface/port_channel (list)

    YANG Description: The list of port-channels in the managed device. Each
entry represents a port-channel.
    """
    return self.__port_channel
      
  def _set_port_channel(self, v, load=False):
    """
    Setter method for port_channel, mapped from YANG variable /interface/port_channel (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_port_channel is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_port_channel() directly.

    YANG Description: The list of port-channels in the managed device. Each
entry represents a port-channel.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",port_channel.port_channel, yang_name="port-channel", rest_name="Port-channel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}), is_container='list', yang_name="port-channel", rest_name="Port-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """port_channel must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",port_channel.port_channel, yang_name="port-channel", rest_name="Port-channel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}), is_container='list', yang_name="port-channel", rest_name="Port-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__port_channel = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_port_channel(self):
    self.__port_channel = YANGDynClass(base=YANGListType("name",port_channel.port_channel, yang_name="port-channel", rest_name="Port-channel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}), is_container='list', yang_name="port-channel", rest_name="Port-channel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of port-channels.', u'cli-no-key-completion': None, u'alt-name': u'Port-channel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-show-path': None, u'cli-suppress-list-no': None, u'cli-custom-range-actionpoint': u'NsmRangeCliActionpoint', u'cli-custom-range-enumerator': u'NsmRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'interface_po'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_management(self):
    """
    Getter method for management, mapped from YANG variable /interface/management (list)

    YANG Description: The list of management interfaces in the managed 
device. Each row represents a management interface.
    """
    return self.__management
      
  def _set_management(self, v, load=False):
    """
    Setter method for management, mapped from YANG variable /interface/management (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_management is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_management() directly.

    YANG Description: The list of management interfaces in the managed 
device. Each row represents a management interface.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",management.management, yang_name="management", rest_name="Management", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}), is_container='list', yang_name="management", rest_name="Management", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """management must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",management.management, yang_name="management", rest_name="Management", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}), is_container='list', yang_name="management", rest_name="Management", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__management = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_management(self):
    self.__management = YANGDynClass(base=YANGListType("name",management.management, yang_name="management", rest_name="Management", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}), is_container='list', yang_name="management", rest_name="Management", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of management interfaces.', u'cli-suppress-table': None, u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_MGMT', u'cli-suppress-no': None, u'alt-name': u'Management', u'cli-no-match-completion': None, u'cli-full-command': None, u'callpoint': u'ipv4staticcpt'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_fc_port(self):
    """
    Getter method for fc_port, mapped from YANG variable /interface/fc_port (list)

    YANG Description: The list of fibrechannel interfaces in the managed
device. Each row represents a fibrechannel interface.
The list provides a way to discover all the fibrechannel interfaces
in a managed device.
    """
    return self.__fc_port
      
  def _set_fc_port(self, v, load=False):
    """
    Setter method for fc_port, mapped from YANG variable /interface/fc_port (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fc_port is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fc_port() directly.

    YANG Description: The list of fibrechannel interfaces in the managed
device. Each row represents a fibrechannel interface.
The list provides a way to discover all the fibrechannel interfaces
in a managed device.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("name",fc_port.fc_port, yang_name="fc-port", rest_name="FibreChannel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}), is_container='list', yang_name="fc-port", rest_name="FibreChannel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fc_port must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("name",fc_port.fc_port, yang_name="fc-port", rest_name="FibreChannel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}), is_container='list', yang_name="fc-port", rest_name="FibreChannel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)""",
        })

    self.__fc_port = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fc_port(self):
    self.__fc_port = YANGDynClass(base=YANGListType("name",fc_port.fc_port, yang_name="fc-port", rest_name="FibreChannel", parent=self, is_container='list', user_ordered=True, path_helper=self._path_helper, yang_keys='name', extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}), is_container='list', yang_name="fc-port", rest_name="FibreChannel", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of fibrechannel interfaces.', u'cli-no-key-completion': None, u'alt-name': u'FibreChannel', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_PORT_CHANNEL', u'cli-suppress-no': None, u'cli-suppress-show-path': None, u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-custom-range-actionpoint': u'FcRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcRangeCliActionpoint', u'cli-suppress-key-abbreviation': None, u'cli-no-match-completion': None, u'cli-incomplete-no': None, u'callpoint': u'interface_fcport', u'cli-mode-name': u'conf-if-fi-$(name)'}}, namespace='urn:brocade.com:mgmt:brocade-interface', defining_module='brocade-interface', yang_type='list', is_config=True)


  def _get_fcoe(self):
    """
    Getter method for fcoe, mapped from YANG variable /interface/fcoe (list)

    YANG Description: The list of FCoE interfaces. Each row contains FCoE
interface name and its status.
    """
    return self.__fcoe
      
  def _set_fcoe(self, v, load=False):
    """
    Setter method for fcoe, mapped from YANG variable /interface/fcoe (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_fcoe is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_fcoe() directly.

    YANG Description: The list of FCoE interfaces. Each row contains FCoE
interface name and its status.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("fcoe_interface_name",fcoe.fcoe, yang_name="fcoe", rest_name="Fcoe", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcoe-interface-name', extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}), is_container='list', yang_name="fcoe", rest_name="Fcoe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """fcoe must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("fcoe_interface_name",fcoe.fcoe, yang_name="fcoe", rest_name="Fcoe", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcoe-interface-name', extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}), is_container='list', yang_name="fcoe", rest_name="Fcoe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)""",
        })

    self.__fcoe = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_fcoe(self):
    self.__fcoe = YANGDynClass(base=YANGListType("fcoe_interface_name",fcoe.fcoe, yang_name="fcoe", rest_name="Fcoe", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='fcoe-interface-name', extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}), is_container='list', yang_name="fcoe", rest_name="Fcoe", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'The list of FCoE Logical interfaces', u'cli-no-key-completion': None, u'alt-name': u'Fcoe', u'sort-priority': u'RUNNCFG_LEVEL_INTERFACE_TYPE_LOGICAL', u'cli-custom-range-actionpoint': u'FcoeRangeCliActionpoint', u'cli-custom-range-enumerator': u'FcoeRangeCliActionpoint', u'display-when': u'/vcsmode/vcs-mode = "true"', u'cli-full-command': None, u'callpoint': u'fcoe_interface_cp'}}, namespace='urn:brocade.com:mgmt:brocade-fcoe', defining_module='brocade-fcoe', yang_type='list', is_config=True)

  gigabitethernet = __builtin__.property(_get_gigabitethernet, _set_gigabitethernet)
  tengigabitethernet = __builtin__.property(_get_tengigabitethernet, _set_tengigabitethernet)
  fortygigabitethernet = __builtin__.property(_get_fortygigabitethernet, _set_fortygigabitethernet)
  hundredgigabitethernet = __builtin__.property(_get_hundredgigabitethernet, _set_hundredgigabitethernet)
  port_channel = __builtin__.property(_get_port_channel, _set_port_channel)
  management = __builtin__.property(_get_management, _set_management)
  fc_port = __builtin__.property(_get_fc_port, _set_fc_port)
  fcoe = __builtin__.property(_get_fcoe, _set_fcoe)


  _pyangbind_elements = {'gigabitethernet': gigabitethernet, 'tengigabitethernet': tengigabitethernet, 'fortygigabitethernet': fortygigabitethernet, 'hundredgigabitethernet': hundredgigabitethernet, 'port_channel': port_channel, 'management': management, 'fc_port': fc_port, 'fcoe': fcoe, }


