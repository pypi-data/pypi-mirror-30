
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import l2traceroute
import l2traceroute_result
class brocade_trilloam(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-trilloam - based on the path /brocade_trilloam_rpc. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.

  YANG Description: This management submodule is an instrumentation to manage  
trilloam commands
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__l2traceroute','__l2traceroute_result',)

  _yang_name = 'brocade-trilloam'
  _rest_name = ''

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__l2traceroute = YANGDynClass(base=l2traceroute.l2traceroute, is_leaf=True, yang_name="l2traceroute", rest_name="l2traceroute", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)
    self.__l2traceroute_result = YANGDynClass(base=l2traceroute_result.l2traceroute_result, is_leaf=True, yang_name="l2traceroute-result", rest_name="l2traceroute-result", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_trilloam_rpc']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return []

  def _get_l2traceroute(self):
    """
    Getter method for l2traceroute, mapped from YANG variable /brocade_trilloam_rpc/l2traceroute (rpc)

    YANG Description: Trace a TRILL route from the provided host-source-mac to host-dest-mac
    """
    return self.__l2traceroute
      
  def _set_l2traceroute(self, v, load=False):
    """
    Setter method for l2traceroute, mapped from YANG variable /brocade_trilloam_rpc/l2traceroute (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2traceroute is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2traceroute() directly.

    YANG Description: Trace a TRILL route from the provided host-source-mac to host-dest-mac
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2traceroute.l2traceroute, is_leaf=True, yang_name="l2traceroute", rest_name="l2traceroute", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2traceroute must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=l2traceroute.l2traceroute, is_leaf=True, yang_name="l2traceroute", rest_name="l2traceroute", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)""",
        })

    self.__l2traceroute = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2traceroute(self):
    self.__l2traceroute = YANGDynClass(base=l2traceroute.l2traceroute, is_leaf=True, yang_name="l2traceroute", rest_name="l2traceroute", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)


  def _get_l2traceroute_result(self):
    """
    Getter method for l2traceroute_result, mapped from YANG variable /brocade_trilloam_rpc/l2traceroute_result (rpc)

    YANG Description:  l2traceroute command result
    """
    return self.__l2traceroute_result
      
  def _set_l2traceroute_result(self, v, load=False):
    """
    Setter method for l2traceroute_result, mapped from YANG variable /brocade_trilloam_rpc/l2traceroute_result (rpc)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_l2traceroute_result is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_l2traceroute_result() directly.

    YANG Description:  l2traceroute command result
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=l2traceroute_result.l2traceroute_result, is_leaf=True, yang_name="l2traceroute-result", rest_name="l2traceroute-result", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """l2traceroute_result must be of a type compatible with rpc""",
          'defined-type': "rpc",
          'generated-type': """YANGDynClass(base=l2traceroute_result.l2traceroute_result, is_leaf=True, yang_name="l2traceroute-result", rest_name="l2traceroute-result", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)""",
        })

    self.__l2traceroute_result = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_l2traceroute_result(self):
    self.__l2traceroute_result = YANGDynClass(base=l2traceroute_result.l2traceroute_result, is_leaf=True, yang_name="l2traceroute-result", rest_name="l2traceroute-result", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions={u'tailf-common': {u'hidden': u'rpccmd', u'actionpoint': u'l2traceroute-action-point'}}, namespace='urn:brocade.com:mgmt:brocade-trilloam', defining_module='brocade-trilloam', yang_type='rpc', is_config=True)

  l2traceroute = __builtin__.property(_get_l2traceroute, _set_l2traceroute)
  l2traceroute_result = __builtin__.property(_get_l2traceroute_result, _set_l2traceroute_result)


  _pyangbind_elements = {'l2traceroute': l2traceroute, 'l2traceroute_result': l2traceroute_result, }


