
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class show_system_uptime(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-system - based on the path /brocade_system_rpc/get-system-uptime/output/show-system-uptime. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__rbridge_id','__days','__hours','__minutes','__seconds',)

  _yang_name = 'show-system-uptime'
  _rest_name = 'show-system-uptime'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__hours = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hours", rest_name="hours", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-hour', is_config=True)
    self.__seconds = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seconds", rest_name="seconds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-sec', is_config=True)
    self.__minutes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="minutes", rest_name="minutes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-minute', is_config=True)
    self.__rbridge_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:rbridge-id-type', is_config=True)
    self.__days = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="days", rest_name="days", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-day', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_system_rpc', u'get-system-uptime', u'output', u'show-system-uptime']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'get-system-uptime', u'output', u'show-system-uptime']

  def _get_rbridge_id(self):
    """
    Getter method for rbridge_id, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/rbridge_id (common-def:rbridge-id-type)
    """
    return self.__rbridge_id
      
  def _set_rbridge_id(self, v, load=False):
    """
    Setter method for rbridge_id, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/rbridge_id (common-def:rbridge-id-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rbridge_id is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rbridge_id() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:rbridge-id-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rbridge_id must be of a type compatible with common-def:rbridge-id-type""",
          'defined-type': "common-def:rbridge-id-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:rbridge-id-type', is_config=True)""",
        })

    self.__rbridge_id = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rbridge_id(self):
    self.__rbridge_id = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..239']}), is_leaf=True, yang_name="rbridge-id", rest_name="rbridge-id", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:rbridge-id-type', is_config=True)


  def _get_days(self):
    """
    Getter method for days, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/days (common-def:time-interval-day)

    YANG Description: Indicates the number of days this managed 
node is up since its last re-initialization.
    """
    return self.__days
      
  def _set_days(self, v, load=False):
    """
    Setter method for days, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/days (common-def:time-interval-day)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_days is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_days() directly.

    YANG Description: Indicates the number of days this managed 
node is up since its last re-initialization.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="days", rest_name="days", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-day', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """days must be of a type compatible with common-def:time-interval-day""",
          'defined-type': "common-def:time-interval-day",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="days", rest_name="days", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-day', is_config=True)""",
        })

    self.__days = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_days(self):
    self.__days = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="days", rest_name="days", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-day', is_config=True)


  def _get_hours(self):
    """
    Getter method for hours, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/hours (common-def:time-interval-hour)

    YANG Description: Indicates the number of hours this managed 
node is up since its last re-initialization. 
This is in addition to the value of 
corresponding instance of 'days'.
    """
    return self.__hours
      
  def _set_hours(self, v, load=False):
    """
    Setter method for hours, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/hours (common-def:time-interval-hour)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hours is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hours() directly.

    YANG Description: Indicates the number of hours this managed 
node is up since its last re-initialization. 
This is in addition to the value of 
corresponding instance of 'days'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hours", rest_name="hours", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-hour', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hours must be of a type compatible with common-def:time-interval-hour""",
          'defined-type': "common-def:time-interval-hour",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hours", rest_name="hours", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-hour', is_config=True)""",
        })

    self.__hours = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hours(self):
    self.__hours = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="hours", rest_name="hours", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-hour', is_config=True)


  def _get_minutes(self):
    """
    Getter method for minutes, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/minutes (common-def:time-interval-minute)

    YANG Description: Indicates the number of minutes this managed
node is up since its last re-initialization.
This is in addition to the values of 
corresponding instance of 'days' and 'hours'.
    """
    return self.__minutes
      
  def _set_minutes(self, v, load=False):
    """
    Setter method for minutes, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/minutes (common-def:time-interval-minute)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_minutes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_minutes() directly.

    YANG Description: Indicates the number of minutes this managed
node is up since its last re-initialization.
This is in addition to the values of 
corresponding instance of 'days' and 'hours'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="minutes", rest_name="minutes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-minute', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """minutes must be of a type compatible with common-def:time-interval-minute""",
          'defined-type': "common-def:time-interval-minute",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="minutes", rest_name="minutes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-minute', is_config=True)""",
        })

    self.__minutes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_minutes(self):
    self.__minutes = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="minutes", rest_name="minutes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-minute', is_config=True)


  def _get_seconds(self):
    """
    Getter method for seconds, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/seconds (common-def:time-interval-sec)

    YANG Description: Indicates the number of seconds this managed
node is up since its last re-initialization.
This is in addition to the values of 
corresponding instance of 'days', 'hours' 
and 'minutes'.
    """
    return self.__seconds
      
  def _set_seconds(self, v, load=False):
    """
    Setter method for seconds, mapped from YANG variable /brocade_system_rpc/get_system_uptime/output/show_system_uptime/seconds (common-def:time-interval-sec)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_seconds is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_seconds() directly.

    YANG Description: Indicates the number of seconds this managed
node is up since its last re-initialization.
This is in addition to the values of 
corresponding instance of 'days', 'hours' 
and 'minutes'.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seconds", rest_name="seconds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-sec', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """seconds must be of a type compatible with common-def:time-interval-sec""",
          'defined-type': "common-def:time-interval-sec",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seconds", rest_name="seconds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-sec', is_config=True)""",
        })

    self.__seconds = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_seconds(self):
    self.__seconds = YANGDynClass(base=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), is_leaf=True, yang_name="seconds", rest_name="seconds", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-system', defining_module='brocade-system', yang_type='common-def:time-interval-sec', is_config=True)

  rbridge_id = __builtin__.property(_get_rbridge_id, _set_rbridge_id)
  days = __builtin__.property(_get_days, _set_days)
  hours = __builtin__.property(_get_hours, _set_hours)
  minutes = __builtin__.property(_get_minutes, _set_minutes)
  seconds = __builtin__.property(_get_seconds, _set_seconds)


  _pyangbind_elements = {'rbridge_id': rbridge_id, 'days': days, 'hours': hours, 'minutes': minutes, 'seconds': seconds, }


