
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class rp_cand_grp_prefix(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-rbridge - based on the path /rbridge-id/router/hide-pim-holder/pim/rp-candidate/rp-cand-grp-prefix. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__rp_cand_grp_prefix_action','__rp_cand_grp_prefix_ip','__rp_cand_grp_prefix_length',)

  _yang_name = 'rp-cand-grp-prefix'
  _rest_name = 'rp-cand-grp-prefix'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__rp_cand_grp_prefix_length = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="rp-cand-grp-prefix-length", rest_name="rp-cand-grp-prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint16', is_config=True)
    self.__rp_cand_grp_prefix_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'add': {'value': 1}, u'delete': {'value': 2}},), is_leaf=True, yang_name="rp-cand-grp-prefix-action", rest_name="rp-cand-grp-prefix-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='grp-prefix-action', is_config=True)
    self.__rp_cand_grp_prefix_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-cand-grp-prefix-ip", rest_name="rp-cand-grp-prefix-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='pim-grp-prefix-addr', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'rbridge-id', u'router', u'hide-pim-holder', u'pim', u'rp-candidate', u'rp-cand-grp-prefix']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'rbridge-id', u'router', u'pim', u'rp-candidate', u'rp-cand-grp-prefix']

  def _get_rp_cand_grp_prefix_action(self):
    """
    Getter method for rp_cand_grp_prefix_action, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate/rp_cand_grp_prefix/rp_cand_grp_prefix_action (grp-prefix-action)
    """
    return self.__rp_cand_grp_prefix_action
      
  def _set_rp_cand_grp_prefix_action(self, v, load=False):
    """
    Setter method for rp_cand_grp_prefix_action, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate/rp_cand_grp_prefix/rp_cand_grp_prefix_action (grp-prefix-action)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rp_cand_grp_prefix_action is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rp_cand_grp_prefix_action() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'add': {'value': 1}, u'delete': {'value': 2}},), is_leaf=True, yang_name="rp-cand-grp-prefix-action", rest_name="rp-cand-grp-prefix-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='grp-prefix-action', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rp_cand_grp_prefix_action must be of a type compatible with grp-prefix-action""",
          'defined-type': "brocade-pim:grp-prefix-action",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'add': {'value': 1}, u'delete': {'value': 2}},), is_leaf=True, yang_name="rp-cand-grp-prefix-action", rest_name="rp-cand-grp-prefix-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='grp-prefix-action', is_config=True)""",
        })

    self.__rp_cand_grp_prefix_action = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rp_cand_grp_prefix_action(self):
    self.__rp_cand_grp_prefix_action = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'add': {'value': 1}, u'delete': {'value': 2}},), is_leaf=True, yang_name="rp-cand-grp-prefix-action", rest_name="rp-cand-grp-prefix-action", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='grp-prefix-action', is_config=True)


  def _get_rp_cand_grp_prefix_ip(self):
    """
    Getter method for rp_cand_grp_prefix_ip, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate/rp_cand_grp_prefix/rp_cand_grp_prefix_ip (pim-grp-prefix-addr)
    """
    return self.__rp_cand_grp_prefix_ip
      
  def _set_rp_cand_grp_prefix_ip(self, v, load=False):
    """
    Setter method for rp_cand_grp_prefix_ip, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate/rp_cand_grp_prefix/rp_cand_grp_prefix_ip (pim-grp-prefix-addr)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rp_cand_grp_prefix_ip is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rp_cand_grp_prefix_ip() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-cand-grp-prefix-ip", rest_name="rp-cand-grp-prefix-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='pim-grp-prefix-addr', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rp_cand_grp_prefix_ip must be of a type compatible with pim-grp-prefix-addr""",
          'defined-type': "brocade-pim:pim-grp-prefix-addr",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-cand-grp-prefix-ip", rest_name="rp-cand-grp-prefix-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='pim-grp-prefix-addr', is_config=True)""",
        })

    self.__rp_cand_grp_prefix_ip = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rp_cand_grp_prefix_ip(self):
    self.__rp_cand_grp_prefix_ip = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'}), is_leaf=True, yang_name="rp-cand-grp-prefix-ip", rest_name="rp-cand-grp-prefix-ip", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='pim-grp-prefix-addr', is_config=True)


  def _get_rp_cand_grp_prefix_length(self):
    """
    Getter method for rp_cand_grp_prefix_length, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate/rp_cand_grp_prefix/rp_cand_grp_prefix_length (uint16)
    """
    return self.__rp_cand_grp_prefix_length
      
  def _set_rp_cand_grp_prefix_length(self, v, load=False):
    """
    Setter method for rp_cand_grp_prefix_length, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate/rp_cand_grp_prefix/rp_cand_grp_prefix_length (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rp_cand_grp_prefix_length is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rp_cand_grp_prefix_length() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="rp-cand-grp-prefix-length", rest_name="rp-cand-grp-prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rp_cand_grp_prefix_length must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="rp-cand-grp-prefix-length", rest_name="rp-cand-grp-prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint16', is_config=True)""",
        })

    self.__rp_cand_grp_prefix_length = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rp_cand_grp_prefix_length(self):
    self.__rp_cand_grp_prefix_length = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), restriction_dict={'range': [u'1..32']}), is_leaf=True, yang_name="rp-cand-grp-prefix-length", rest_name="rp-cand-grp-prefix-length", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-drop-node-name': None, u'cli-suppress-no': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint16', is_config=True)

  rp_cand_grp_prefix_action = __builtin__.property(_get_rp_cand_grp_prefix_action, _set_rp_cand_grp_prefix_action)
  rp_cand_grp_prefix_ip = __builtin__.property(_get_rp_cand_grp_prefix_ip, _set_rp_cand_grp_prefix_ip)
  rp_cand_grp_prefix_length = __builtin__.property(_get_rp_cand_grp_prefix_length, _set_rp_cand_grp_prefix_length)


  _pyangbind_elements = {'rp_cand_grp_prefix_action': rp_cand_grp_prefix_action, 'rp_cand_grp_prefix_ip': rp_cand_grp_prefix_ip, 'rp_cand_grp_prefix_length': rp_cand_grp_prefix_length, }


