
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import bsr_candidate
import rp_candidate
import rp_address
class pim(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-rbridge - based on the path /rbridge-id/router/hide-pim-holder/pim. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__max_mcache','__hello_interval','__nbr_timeout','__inactivity_timer','__message_interval','__spt_threshold','__bsr_candidate','__rp_candidate','__rp_address',)

  _yang_name = 'pim'
  _rest_name = 'pim'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__nbr_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'35..12600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(105), is_leaf=True, yang_name="nbr-timeout", rest_name="nbr-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set neighbor timeout'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)
    self.__max_mcache = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2048']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2048), is_leaf=True, yang_name="max-mcache", rest_name="max-mcache", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set maximum PIM mcache'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)
    self.__rp_candidate = YANGDynClass(base=rp_candidate.rp_candidate, is_container='container', presence=False, yang_name="rp-candidate", rest_name="rp-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure candidate rendezvous point (RP)', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)
    self.__hello_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'10..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(30), is_leaf=True, yang_name="hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)
    self.__message_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="message-interval", rest_name="message-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set periodic join/prune message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)
    self.__rp_address = YANGDynClass(base=YANGListType("rp_ip_addr",rp_address.rp_address, yang_name="rp-address", rest_name="rp-address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rp-ip-addr', extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}), is_container='list', yang_name="rp-address", rest_name="rp-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='list', is_config=True)
    self.__spt_threshold = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'infinity': {'value': 0}},),], default=unicode("1"), is_leaf=True, yang_name="spt-threshold", rest_name="spt-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set threshold for switching to shortest-path-tree'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='spt-thr-type', is_config=True)
    self.__inactivity_timer = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'60..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(180), is_leaf=True, yang_name="inactivity-timer", rest_name="inactivity-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set inactivity interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)
    self.__bsr_candidate = YANGDynClass(base=bsr_candidate.bsr_candidate, is_container='container', presence=False, yang_name="bsr-candidate", rest_name="bsr-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set candidate bootstrap router', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'rbridge-id', u'router', u'hide-pim-holder', u'pim']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'rbridge-id', u'router', u'pim']

  def _get_max_mcache(self):
    """
    Getter method for max_mcache, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/max_mcache (uint32)
    """
    return self.__max_mcache
      
  def _set_max_mcache(self, v, load=False):
    """
    Setter method for max_mcache, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/max_mcache (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_max_mcache is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_max_mcache() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2048']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2048), is_leaf=True, yang_name="max-mcache", rest_name="max-mcache", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set maximum PIM mcache'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """max_mcache must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2048']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2048), is_leaf=True, yang_name="max-mcache", rest_name="max-mcache", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set maximum PIM mcache'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)""",
        })

    self.__max_mcache = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_max_mcache(self):
    self.__max_mcache = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..2048']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(2048), is_leaf=True, yang_name="max-mcache", rest_name="max-mcache", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set maximum PIM mcache'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)


  def _get_hello_interval(self):
    """
    Getter method for hello_interval, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/hello_interval (int16)
    """
    return self.__hello_interval
      
  def _set_hello_interval(self, v, load=False):
    """
    Setter method for hello_interval, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/hello_interval (int16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_hello_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_hello_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'10..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(30), is_leaf=True, yang_name="hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """hello_interval must be of a type compatible with int16""",
          'defined-type': "int16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'10..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(30), is_leaf=True, yang_name="hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)""",
        })

    self.__hello_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_hello_interval(self):
    self.__hello_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'10..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(30), is_leaf=True, yang_name="hello-interval", rest_name="hello-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set hello message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)


  def _get_nbr_timeout(self):
    """
    Getter method for nbr_timeout, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/nbr_timeout (int16)
    """
    return self.__nbr_timeout
      
  def _set_nbr_timeout(self, v, load=False):
    """
    Setter method for nbr_timeout, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/nbr_timeout (int16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nbr_timeout is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nbr_timeout() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'35..12600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(105), is_leaf=True, yang_name="nbr-timeout", rest_name="nbr-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set neighbor timeout'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nbr_timeout must be of a type compatible with int16""",
          'defined-type': "int16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'35..12600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(105), is_leaf=True, yang_name="nbr-timeout", rest_name="nbr-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set neighbor timeout'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)""",
        })

    self.__nbr_timeout = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nbr_timeout(self):
    self.__nbr_timeout = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'35..12600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(105), is_leaf=True, yang_name="nbr-timeout", rest_name="nbr-timeout", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set neighbor timeout'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)


  def _get_inactivity_timer(self):
    """
    Getter method for inactivity_timer, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/inactivity_timer (int16)
    """
    return self.__inactivity_timer
      
  def _set_inactivity_timer(self, v, load=False):
    """
    Setter method for inactivity_timer, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/inactivity_timer (int16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_inactivity_timer is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_inactivity_timer() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'60..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(180), is_leaf=True, yang_name="inactivity-timer", rest_name="inactivity-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set inactivity interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """inactivity_timer must be of a type compatible with int16""",
          'defined-type': "int16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'60..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(180), is_leaf=True, yang_name="inactivity-timer", rest_name="inactivity-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set inactivity interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)""",
        })

    self.__inactivity_timer = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_inactivity_timer(self):
    self.__inactivity_timer = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16), restriction_dict={'range': [u'60..3600']}), default=RestrictedClassType(base_type=int,restriction_dict={'range': ['-32768..32767']}, int_size=16)(180), is_leaf=True, yang_name="inactivity-timer", rest_name="inactivity-timer", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set inactivity interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='int16', is_config=True)


  def _get_message_interval(self):
    """
    Getter method for message_interval, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/message_interval (uint32)
    """
    return self.__message_interval
      
  def _set_message_interval(self, v, load=False):
    """
    Setter method for message_interval, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/message_interval (uint32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_message_interval is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_message_interval() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="message-interval", rest_name="message-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set periodic join/prune message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """message_interval must be of a type compatible with uint32""",
          'defined-type': "uint32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="message-interval", rest_name="message-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set periodic join/prune message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)""",
        })

    self.__message_interval = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_message_interval(self):
    self.__message_interval = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'10..65535']}), default=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32)(60), is_leaf=True, yang_name="message-interval", rest_name="message-interval", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set periodic join/prune message interval'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='uint32', is_config=True)


  def _get_spt_threshold(self):
    """
    Getter method for spt_threshold, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/spt_threshold (spt-thr-type)
    """
    return self.__spt_threshold
      
  def _set_spt_threshold(self, v, load=False):
    """
    Setter method for spt_threshold, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/spt_threshold (spt-thr-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_spt_threshold is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_spt_threshold() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'infinity': {'value': 0}},),], default=unicode("1"), is_leaf=True, yang_name="spt-threshold", rest_name="spt-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set threshold for switching to shortest-path-tree'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='spt-thr-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """spt_threshold must be of a type compatible with spt-thr-type""",
          'defined-type': "brocade-pim:spt-thr-type",
          'generated-type': """YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'infinity': {'value': 0}},),], default=unicode("1"), is_leaf=True, yang_name="spt-threshold", rest_name="spt-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set threshold for switching to shortest-path-tree'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='spt-thr-type', is_config=True)""",
        })

    self.__spt_threshold = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_spt_threshold(self):
    self.__spt_threshold = YANGDynClass(base=[RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['0..4294967295']}, int_size=32), restriction_dict={'range': [u'1..4294967295']}),RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'infinity': {'value': 0}},),], default=unicode("1"), is_leaf=True, yang_name="spt-threshold", rest_name="spt-threshold", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set threshold for switching to shortest-path-tree'}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='spt-thr-type', is_config=True)


  def _get_bsr_candidate(self):
    """
    Getter method for bsr_candidate, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/bsr_candidate (container)
    """
    return self.__bsr_candidate
      
  def _set_bsr_candidate(self, v, load=False):
    """
    Setter method for bsr_candidate, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/bsr_candidate (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_bsr_candidate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_bsr_candidate() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=bsr_candidate.bsr_candidate, is_container='container', presence=False, yang_name="bsr-candidate", rest_name="bsr-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set candidate bootstrap router', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """bsr_candidate must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=bsr_candidate.bsr_candidate, is_container='container', presence=False, yang_name="bsr-candidate", rest_name="bsr-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set candidate bootstrap router', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)""",
        })

    self.__bsr_candidate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_bsr_candidate(self):
    self.__bsr_candidate = YANGDynClass(base=bsr_candidate.bsr_candidate, is_container='container', presence=False, yang_name="bsr-candidate", rest_name="bsr-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Set candidate bootstrap router', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)


  def _get_rp_candidate(self):
    """
    Getter method for rp_candidate, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate (container)
    """
    return self.__rp_candidate
      
  def _set_rp_candidate(self, v, load=False):
    """
    Setter method for rp_candidate, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_candidate (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rp_candidate is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rp_candidate() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=rp_candidate.rp_candidate, is_container='container', presence=False, yang_name="rp-candidate", rest_name="rp-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure candidate rendezvous point (RP)', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rp_candidate must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=rp_candidate.rp_candidate, is_container='container', presence=False, yang_name="rp-candidate", rest_name="rp-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure candidate rendezvous point (RP)', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)""",
        })

    self.__rp_candidate = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rp_candidate(self):
    self.__rp_candidate = YANGDynClass(base=rp_candidate.rp_candidate, is_container='container', presence=False, yang_name="rp-candidate", rest_name="rp-candidate", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure candidate rendezvous point (RP)', u'hidden': u'full', u'cli-incomplete-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='container', is_config=True)


  def _get_rp_address(self):
    """
    Getter method for rp_address, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_address (list)
    """
    return self.__rp_address
      
  def _set_rp_address(self, v, load=False):
    """
    Setter method for rp_address, mapped from YANG variable /rbridge_id/router/hide_pim_holder/pim/rp_address (list)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rp_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rp_address() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGListType("rp_ip_addr",rp_address.rp_address, yang_name="rp-address", rest_name="rp-address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rp-ip-addr', extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}), is_container='list', yang_name="rp-address", rest_name="rp-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='list', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rp_address must be of a type compatible with list""",
          'defined-type': "list",
          'generated-type': """YANGDynClass(base=YANGListType("rp_ip_addr",rp_address.rp_address, yang_name="rp-address", rest_name="rp-address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rp-ip-addr', extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}), is_container='list', yang_name="rp-address", rest_name="rp-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='list', is_config=True)""",
        })

    self.__rp_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rp_address(self):
    self.__rp_address = YANGDynClass(base=YANGListType("rp_ip_addr",rp_address.rp_address, yang_name="rp-address", rest_name="rp-address", parent=self, is_container='list', user_ordered=False, path_helper=self._path_helper, yang_keys='rp-ip-addr', extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}), is_container='list', yang_name="rp-address", rest_name="rp-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'cli-compact-syntax': None, u'cli-suppress-mode': None, u'callpoint': u'PimStaticRpCfgCallpoint', u'info': u'Static RP', u'cli-suppress-list-no': None}}, namespace='urn:brocade.com:mgmt:brocade-pim', defining_module='brocade-pim', yang_type='list', is_config=True)

  max_mcache = __builtin__.property(_get_max_mcache, _set_max_mcache)
  hello_interval = __builtin__.property(_get_hello_interval, _set_hello_interval)
  nbr_timeout = __builtin__.property(_get_nbr_timeout, _set_nbr_timeout)
  inactivity_timer = __builtin__.property(_get_inactivity_timer, _set_inactivity_timer)
  message_interval = __builtin__.property(_get_message_interval, _set_message_interval)
  spt_threshold = __builtin__.property(_get_spt_threshold, _set_spt_threshold)
  bsr_candidate = __builtin__.property(_get_bsr_candidate, _set_bsr_candidate)
  rp_candidate = __builtin__.property(_get_rp_candidate, _set_rp_candidate)
  rp_address = __builtin__.property(_get_rp_address, _set_rp_address)


  _pyangbind_elements = {'max_mcache': max_mcache, 'hello_interval': hello_interval, 'nbr_timeout': nbr_timeout, 'inactivity_timer': inactivity_timer, 'message_interval': message_interval, 'spt_threshold': spt_threshold, 'bsr_candidate': bsr_candidate, 'rp_candidate': rp_candidate, 'rp_address': rp_address, }


