
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class priority_group_table(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-cee-map - based on the path /cee-map/priority-group-table. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__PGID','__weight','__pfc',)

  _yang_name = 'priority-group-table'
  _rest_name = 'priority-group-table'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__pfc = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="pfc", rest_name="pfc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u' Per-priority Flow Control'}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='enumeration', is_config=True)
    self.__PGID = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-7]|15.[0-7]'}), is_leaf=True, yang_name="PGID", rest_name="PGID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u';; Configure Priority Group (PGID 0-7,15.0-15.7)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='qos-type-PGID', is_config=True)
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1 .. 100']}), is_leaf=True, yang_name="weight", rest_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure DWRR Priority Group (PGID 0-7) weight', u'display-when': u'../PGID = "0" or ../PGID = "1" or \n                   ../PGID = "2" or ../PGID = "3" or \n                   ../PGID = "4" or ../PGID = "5" or\n                   ../PGID = "6" or ../PGID = "7"', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='int32', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'cee-map', u'priority-group-table']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'cee-map', u'priority-group-table']

  def _get_PGID(self):
    """
    Getter method for PGID, mapped from YANG variable /cee_map/priority_group_table/PGID (qos-type-PGID)
    """
    return self.__PGID
      
  def _set_PGID(self, v, load=False):
    """
    Setter method for PGID, mapped from YANG variable /cee_map/priority_group_table/PGID (qos-type-PGID)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_PGID is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_PGID() directly.
    """
    parent = getattr(self, "_parent", None)
    if parent is not None and load is False:
      raise AttributeError("Cannot set keys directly when" +
                             " within an instantiated list")

    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-7]|15.[0-7]'}), is_leaf=True, yang_name="PGID", rest_name="PGID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u';; Configure Priority Group (PGID 0-7,15.0-15.7)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='qos-type-PGID', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """PGID must be of a type compatible with qos-type-PGID""",
          'defined-type': "brocade-cee-map:qos-type-PGID",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-7]|15.[0-7]'}), is_leaf=True, yang_name="PGID", rest_name="PGID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u';; Configure Priority Group (PGID 0-7,15.0-15.7)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='qos-type-PGID', is_config=True)""",
        })

    self.__PGID = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_PGID(self):
    self.__PGID = YANGDynClass(base=RestrictedClassType(base_type=unicode, restriction_dict={'pattern': u'[0-7]|15.[0-7]'}), is_leaf=True, yang_name="PGID", rest_name="PGID", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u';; Configure Priority Group (PGID 0-7,15.0-15.7)', u'cli-drop-node-name': None}}, is_keyval=True, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='qos-type-PGID', is_config=True)


  def _get_weight(self):
    """
    Getter method for weight, mapped from YANG variable /cee_map/priority_group_table/weight (int32)
    """
    return self.__weight
      
  def _set_weight(self, v, load=False):
    """
    Setter method for weight, mapped from YANG variable /cee_map/priority_group_table/weight (int32)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_weight is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_weight() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1 .. 100']}), is_leaf=True, yang_name="weight", rest_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure DWRR Priority Group (PGID 0-7) weight', u'display-when': u'../PGID = "0" or ../PGID = "1" or \n                   ../PGID = "2" or ../PGID = "3" or \n                   ../PGID = "4" or ../PGID = "5" or\n                   ../PGID = "6" or ../PGID = "7"', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='int32', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """weight must be of a type compatible with int32""",
          'defined-type': "int32",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1 .. 100']}), is_leaf=True, yang_name="weight", rest_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure DWRR Priority Group (PGID 0-7) weight', u'display-when': u'../PGID = "0" or ../PGID = "1" or \n                   ../PGID = "2" or ../PGID = "3" or \n                   ../PGID = "4" or ../PGID = "5" or\n                   ../PGID = "6" or ../PGID = "7"', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='int32', is_config=True)""",
        })

    self.__weight = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_weight(self):
    self.__weight = YANGDynClass(base=RestrictedClassType(base_type=RestrictedClassType(base_type=long, restriction_dict={'range': ['-2147483648..2147483647']}, int_size=32), restriction_dict={'range': [u'1 .. 100']}), is_leaf=True, yang_name="weight", rest_name="weight", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'Configure DWRR Priority Group (PGID 0-7) weight', u'display-when': u'../PGID = "0" or ../PGID = "1" or \n                   ../PGID = "2" or ../PGID = "3" or \n                   ../PGID = "4" or ../PGID = "5" or\n                   ../PGID = "6" or ../PGID = "7"', u'cli-incomplete-command': None}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='int32', is_config=True)


  def _get_pfc(self):
    """
    Getter method for pfc, mapped from YANG variable /cee_map/priority_group_table/pfc (enumeration)
    """
    return self.__pfc
      
  def _set_pfc(self, v, load=False):
    """
    Setter method for pfc, mapped from YANG variable /cee_map/priority_group_table/pfc (enumeration)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_pfc is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_pfc() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="pfc", rest_name="pfc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u' Per-priority Flow Control'}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='enumeration', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """pfc must be of a type compatible with enumeration""",
          'defined-type': "brocade-cee-map:enumeration",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="pfc", rest_name="pfc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u' Per-priority Flow Control'}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='enumeration', is_config=True)""",
        })

    self.__pfc = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_pfc(self):
    self.__pfc = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'on': {'value': 1}, u'off': {'value': 0}},), is_leaf=True, yang_name="pfc", rest_name="pfc", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u' Per-priority Flow Control'}}, namespace='urn:brocade.com:mgmt:brocade-cee-map', defining_module='brocade-cee-map', yang_type='enumeration', is_config=True)

  PGID = __builtin__.property(_get_PGID, _set_PGID)
  weight = __builtin__.property(_get_weight, _set_weight)
  pfc = __builtin__.property(_get_pfc, _set_pfc)


  _pyangbind_elements = {'PGID': PGID, 'weight': weight, 'pfc': pfc, }


