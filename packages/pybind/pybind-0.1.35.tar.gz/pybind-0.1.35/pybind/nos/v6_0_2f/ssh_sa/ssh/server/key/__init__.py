
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class key(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-sec-services - based on the path /ssh-sa/ssh/server/key. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__rsa','__ecdsa','__dsa',)

  _yang_name = 'key'
  _rest_name = 'key'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__dsa = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dsa", rest_name="dsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_dsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='empty', is_config=True)
    self.__rsa = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1024': {'value': 1024}, u'2048': {'value': 2048}},), is_leaf=True, yang_name="rsa", rest_name="rsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_rsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='rsa-bits-size', is_config=True)
    self.__ecdsa = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'256': {'value': 256}},), is_leaf=True, yang_name="ecdsa", rest_name="ecdsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ECDSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_ecdsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='ecdsa-bits-size', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'ssh-sa', u'ssh', u'server', u'key']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'ssh', u'server', u'key']

  def _get_rsa(self):
    """
    Getter method for rsa, mapped from YANG variable /ssh_sa/ssh/server/key/rsa (rsa-bits-size)
    """
    return self.__rsa
      
  def _set_rsa(self, v, load=False):
    """
    Setter method for rsa, mapped from YANG variable /ssh_sa/ssh/server/key/rsa (rsa-bits-size)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_rsa is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_rsa() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1024': {'value': 1024}, u'2048': {'value': 2048}},), is_leaf=True, yang_name="rsa", rest_name="rsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_rsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='rsa-bits-size', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """rsa must be of a type compatible with rsa-bits-size""",
          'defined-type': "brocade-sec-services:rsa-bits-size",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1024': {'value': 1024}, u'2048': {'value': 2048}},), is_leaf=True, yang_name="rsa", rest_name="rsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_rsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='rsa-bits-size', is_config=True)""",
        })

    self.__rsa = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_rsa(self):
    self.__rsa = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'1024': {'value': 1024}, u'2048': {'value': 2048}},), is_leaf=True, yang_name="rsa", rest_name="rsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'RSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_rsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='rsa-bits-size', is_config=True)


  def _get_ecdsa(self):
    """
    Getter method for ecdsa, mapped from YANG variable /ssh_sa/ssh/server/key/ecdsa (ecdsa-bits-size)
    """
    return self.__ecdsa
      
  def _set_ecdsa(self, v, load=False):
    """
    Setter method for ecdsa, mapped from YANG variable /ssh_sa/ssh/server/key/ecdsa (ecdsa-bits-size)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_ecdsa is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_ecdsa() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'256': {'value': 256}},), is_leaf=True, yang_name="ecdsa", rest_name="ecdsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ECDSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_ecdsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='ecdsa-bits-size', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """ecdsa must be of a type compatible with ecdsa-bits-size""",
          'defined-type': "brocade-sec-services:ecdsa-bits-size",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'256': {'value': 256}},), is_leaf=True, yang_name="ecdsa", rest_name="ecdsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ECDSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_ecdsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='ecdsa-bits-size', is_config=True)""",
        })

    self.__ecdsa = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_ecdsa(self):
    self.__ecdsa = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'256': {'value': 256}},), is_leaf=True, yang_name="ecdsa", rest_name="ecdsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'ECDSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_ecdsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='ecdsa-bits-size', is_config=True)


  def _get_dsa(self):
    """
    Getter method for dsa, mapped from YANG variable /ssh_sa/ssh/server/key/dsa (empty)
    """
    return self.__dsa
      
  def _set_dsa(self, v, load=False):
    """
    Setter method for dsa, mapped from YANG variable /ssh_sa/ssh/server/key/dsa (empty)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_dsa is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_dsa() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=YANGBool, is_leaf=True, yang_name="dsa", rest_name="dsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_dsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='empty', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """dsa must be of a type compatible with empty""",
          'defined-type': "empty",
          'generated-type': """YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dsa", rest_name="dsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_dsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='empty', is_config=True)""",
        })

    self.__dsa = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_dsa(self):
    self.__dsa = YANGDynClass(base=YANGBool, is_leaf=True, yang_name="dsa", rest_name="dsa", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=True, extensions={u'tailf-common': {u'info': u'DSA Algorithm type', u'cli-full-command': None, u'callpoint': u'ssh_server_key_dsa_cp'}}, namespace='urn:brocade.com:mgmt:brocade-sec-services', defining_module='brocade-sec-services', yang_type='empty', is_config=True)

  rsa = __builtin__.property(_get_rsa, _set_rsa)
  ecdsa = __builtin__.property(_get_ecdsa, _set_ecdsa)
  dsa = __builtin__.property(_get_dsa, _set_dsa)


  _pyangbind_elements = {'rsa': rsa, 'ecdsa': ecdsa, 'dsa': dsa, }


