
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
import vcs_nodes
class output(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-vcs - based on the path /brocade_vcs_rpc/show-vcs/output. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__principal_switch_wwn','__co_ordinator_wwn','__vcs_cluster_type_info','__vcs_guid','__virtual_ip_address','__virtual_ipv6_address','__total_nodes_in_cluster','__nodes_disconnected_from_cluster','__cluster_generic_status','__cluster_specific_status','__vcs_nodes',)

  _yang_name = 'output'
  _rest_name = 'output'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__principal_switch_wwn = YANGDynClass(base=unicode, is_leaf=True, yang_name="principal-switch-wwn", rest_name="principal-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__virtual_ipv6_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-ipv6-address", rest_name="virtual-ipv6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__vcs_cluster_type_info = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vcs-fabric-cluster': {'value': 3}, u'vcs-unknown-cluster': {'value': 1}, u'vcs-stand-alone': {'value': 2}, u'vcs-management-cluster': {'value': 4}},), is_leaf=True, yang_name="vcs-cluster-type-info", rest_name="vcs-cluster-type-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='vcs-cluster-type', is_config=True)
    self.__total_nodes_in_cluster = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="total-nodes-in-cluster", rest_name="total-nodes-in-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    self.__nodes_disconnected_from_cluster = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="nodes-disconnected-from-cluster", rest_name="nodes-disconnected-from-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    self.__vcs_nodes = YANGDynClass(base=vcs_nodes.vcs_nodes, is_container='container', presence=False, yang_name="vcs-nodes", rest_name="vcs-nodes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='container', is_config=True)
    self.__cluster_generic_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-generic-status", rest_name="cluster-generic-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__vcs_guid = YANGDynClass(base=unicode, is_leaf=True, yang_name="vcs-guid", rest_name="vcs-guid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__cluster_specific_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-specific-status", rest_name="cluster-specific-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__virtual_ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-ip-address", rest_name="virtual-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    self.__co_ordinator_wwn = YANGDynClass(base=unicode, is_leaf=True, yang_name="co-ordinator-wwn", rest_name="co-ordinator-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_vcs_rpc', u'show-vcs', u'output']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-vcs', u'output']

  def _get_principal_switch_wwn(self):
    """
    Getter method for principal_switch_wwn, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/principal_switch_wwn (string)

    YANG Description: Vcs Cluster Co-ordinator node wwn
    """
    return self.__principal_switch_wwn
      
  def _set_principal_switch_wwn(self, v, load=False):
    """
    Setter method for principal_switch_wwn, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/principal_switch_wwn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_principal_switch_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_principal_switch_wwn() directly.

    YANG Description: Vcs Cluster Co-ordinator node wwn
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="principal-switch-wwn", rest_name="principal-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """principal_switch_wwn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="principal-switch-wwn", rest_name="principal-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__principal_switch_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_principal_switch_wwn(self):
    self.__principal_switch_wwn = YANGDynClass(base=unicode, is_leaf=True, yang_name="principal-switch-wwn", rest_name="principal-switch-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_co_ordinator_wwn(self):
    """
    Getter method for co_ordinator_wwn, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/co_ordinator_wwn (string)

    YANG Description: Vcs Cluster Co-ordinator node wwn
    """
    return self.__co_ordinator_wwn
      
  def _set_co_ordinator_wwn(self, v, load=False):
    """
    Setter method for co_ordinator_wwn, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/co_ordinator_wwn (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_co_ordinator_wwn is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_co_ordinator_wwn() directly.

    YANG Description: Vcs Cluster Co-ordinator node wwn
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="co-ordinator-wwn", rest_name="co-ordinator-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """co_ordinator_wwn must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="co-ordinator-wwn", rest_name="co-ordinator-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__co_ordinator_wwn = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_co_ordinator_wwn(self):
    self.__co_ordinator_wwn = YANGDynClass(base=unicode, is_leaf=True, yang_name="co-ordinator-wwn", rest_name="co-ordinator-wwn", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_vcs_cluster_type_info(self):
    """
    Getter method for vcs_cluster_type_info, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_cluster_type_info (vcs-cluster-type)

    YANG Description: Vcs Type
    """
    return self.__vcs_cluster_type_info
      
  def _set_vcs_cluster_type_info(self, v, load=False):
    """
    Setter method for vcs_cluster_type_info, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_cluster_type_info (vcs-cluster-type)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vcs_cluster_type_info is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vcs_cluster_type_info() directly.

    YANG Description: Vcs Type
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vcs-fabric-cluster': {'value': 3}, u'vcs-unknown-cluster': {'value': 1}, u'vcs-stand-alone': {'value': 2}, u'vcs-management-cluster': {'value': 4}},), is_leaf=True, yang_name="vcs-cluster-type-info", rest_name="vcs-cluster-type-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='vcs-cluster-type', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vcs_cluster_type_info must be of a type compatible with vcs-cluster-type""",
          'defined-type': "brocade-vcs:vcs-cluster-type",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vcs-fabric-cluster': {'value': 3}, u'vcs-unknown-cluster': {'value': 1}, u'vcs-stand-alone': {'value': 2}, u'vcs-management-cluster': {'value': 4}},), is_leaf=True, yang_name="vcs-cluster-type-info", rest_name="vcs-cluster-type-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='vcs-cluster-type', is_config=True)""",
        })

    self.__vcs_cluster_type_info = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vcs_cluster_type_info(self):
    self.__vcs_cluster_type_info = YANGDynClass(base=RestrictedClassType(base_type=unicode,                                     restriction_type="dict_key",                                     restriction_arg={u'vcs-fabric-cluster': {'value': 3}, u'vcs-unknown-cluster': {'value': 1}, u'vcs-stand-alone': {'value': 2}, u'vcs-management-cluster': {'value': 4}},), is_leaf=True, yang_name="vcs-cluster-type-info", rest_name="vcs-cluster-type-info", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='vcs-cluster-type', is_config=True)


  def _get_vcs_guid(self):
    """
    Getter method for vcs_guid, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_guid (string)

    YANG Description: Vcs Cluster GUID
    """
    return self.__vcs_guid
      
  def _set_vcs_guid(self, v, load=False):
    """
    Setter method for vcs_guid, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_guid (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vcs_guid is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vcs_guid() directly.

    YANG Description: Vcs Cluster GUID
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="vcs-guid", rest_name="vcs-guid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vcs_guid must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="vcs-guid", rest_name="vcs-guid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__vcs_guid = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vcs_guid(self):
    self.__vcs_guid = YANGDynClass(base=unicode, is_leaf=True, yang_name="vcs-guid", rest_name="vcs-guid", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_virtual_ip_address(self):
    """
    Getter method for virtual_ip_address, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/virtual_ip_address (string)

    YANG Description: Cluster virtual IP address
    """
    return self.__virtual_ip_address
      
  def _set_virtual_ip_address(self, v, load=False):
    """
    Setter method for virtual_ip_address, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/virtual_ip_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_ip_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_ip_address() directly.

    YANG Description: Cluster virtual IP address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="virtual-ip-address", rest_name="virtual-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_ip_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-ip-address", rest_name="virtual-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__virtual_ip_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_ip_address(self):
    self.__virtual_ip_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-ip-address", rest_name="virtual-ip-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_virtual_ipv6_address(self):
    """
    Getter method for virtual_ipv6_address, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/virtual_ipv6_address (string)

    YANG Description: Cluster virtual IPv6 address
    """
    return self.__virtual_ipv6_address
      
  def _set_virtual_ipv6_address(self, v, load=False):
    """
    Setter method for virtual_ipv6_address, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/virtual_ipv6_address (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_virtual_ipv6_address is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_virtual_ipv6_address() directly.

    YANG Description: Cluster virtual IPv6 address
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="virtual-ipv6-address", rest_name="virtual-ipv6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """virtual_ipv6_address must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-ipv6-address", rest_name="virtual-ipv6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__virtual_ipv6_address = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_virtual_ipv6_address(self):
    self.__virtual_ipv6_address = YANGDynClass(base=unicode, is_leaf=True, yang_name="virtual-ipv6-address", rest_name="virtual-ipv6-address", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_total_nodes_in_cluster(self):
    """
    Getter method for total_nodes_in_cluster, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/total_nodes_in_cluster (uint16)

    YANG Description: Total number of nodes in cluster
    """
    return self.__total_nodes_in_cluster
      
  def _set_total_nodes_in_cluster(self, v, load=False):
    """
    Setter method for total_nodes_in_cluster, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/total_nodes_in_cluster (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_total_nodes_in_cluster is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_total_nodes_in_cluster() directly.

    YANG Description: Total number of nodes in cluster
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="total-nodes-in-cluster", rest_name="total-nodes-in-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """total_nodes_in_cluster must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="total-nodes-in-cluster", rest_name="total-nodes-in-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)""",
        })

    self.__total_nodes_in_cluster = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_total_nodes_in_cluster(self):
    self.__total_nodes_in_cluster = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="total-nodes-in-cluster", rest_name="total-nodes-in-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)


  def _get_nodes_disconnected_from_cluster(self):
    """
    Getter method for nodes_disconnected_from_cluster, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/nodes_disconnected_from_cluster (uint16)

    YANG Description: Number of nodes disconnected from cluster
    """
    return self.__nodes_disconnected_from_cluster
      
  def _set_nodes_disconnected_from_cluster(self, v, load=False):
    """
    Setter method for nodes_disconnected_from_cluster, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/nodes_disconnected_from_cluster (uint16)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_nodes_disconnected_from_cluster is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_nodes_disconnected_from_cluster() directly.

    YANG Description: Number of nodes disconnected from cluster
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="nodes-disconnected-from-cluster", rest_name="nodes-disconnected-from-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """nodes_disconnected_from_cluster must be of a type compatible with uint16""",
          'defined-type': "uint16",
          'generated-type': """YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="nodes-disconnected-from-cluster", rest_name="nodes-disconnected-from-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)""",
        })

    self.__nodes_disconnected_from_cluster = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_nodes_disconnected_from_cluster(self):
    self.__nodes_disconnected_from_cluster = YANGDynClass(base=RestrictedClassType(base_type=int, restriction_dict={'range': ['0..65535']},int_size=16), is_leaf=True, yang_name="nodes-disconnected-from-cluster", rest_name="nodes-disconnected-from-cluster", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='uint16', is_config=True)


  def _get_cluster_generic_status(self):
    """
    Getter method for cluster_generic_status, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/cluster_generic_status (string)

    YANG Description: Cluster Generic Status
    """
    return self.__cluster_generic_status
      
  def _set_cluster_generic_status(self, v, load=False):
    """
    Setter method for cluster_generic_status, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/cluster_generic_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_generic_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_generic_status() directly.

    YANG Description: Cluster Generic Status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cluster-generic-status", rest_name="cluster-generic-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_generic_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-generic-status", rest_name="cluster-generic-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__cluster_generic_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_generic_status(self):
    self.__cluster_generic_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-generic-status", rest_name="cluster-generic-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_cluster_specific_status(self):
    """
    Getter method for cluster_specific_status, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/cluster_specific_status (string)

    YANG Description: Cluster Specific Status
    """
    return self.__cluster_specific_status
      
  def _set_cluster_specific_status(self, v, load=False):
    """
    Setter method for cluster_specific_status, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/cluster_specific_status (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_cluster_specific_status is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_cluster_specific_status() directly.

    YANG Description: Cluster Specific Status
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="cluster-specific-status", rest_name="cluster-specific-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """cluster_specific_status must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-specific-status", rest_name="cluster-specific-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)""",
        })

    self.__cluster_specific_status = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_cluster_specific_status(self):
    self.__cluster_specific_status = YANGDynClass(base=unicode, is_leaf=True, yang_name="cluster-specific-status", rest_name="cluster-specific-status", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='string', is_config=True)


  def _get_vcs_nodes(self):
    """
    Getter method for vcs_nodes, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes (container)
    """
    return self.__vcs_nodes
      
  def _set_vcs_nodes(self, v, load=False):
    """
    Setter method for vcs_nodes, mapped from YANG variable /brocade_vcs_rpc/show_vcs/output/vcs_nodes (container)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_vcs_nodes is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_vcs_nodes() directly.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=vcs_nodes.vcs_nodes, is_container='container', presence=False, yang_name="vcs-nodes", rest_name="vcs-nodes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='container', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """vcs_nodes must be of a type compatible with container""",
          'defined-type': "container",
          'generated-type': """YANGDynClass(base=vcs_nodes.vcs_nodes, is_container='container', presence=False, yang_name="vcs-nodes", rest_name="vcs-nodes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='container', is_config=True)""",
        })

    self.__vcs_nodes = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_vcs_nodes(self):
    self.__vcs_nodes = YANGDynClass(base=vcs_nodes.vcs_nodes, is_container='container', presence=False, yang_name="vcs-nodes", rest_name="vcs-nodes", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, extensions=None, namespace='urn:brocade.com:mgmt:brocade-vcs', defining_module='brocade-vcs', yang_type='container', is_config=True)

  principal_switch_wwn = __builtin__.property(_get_principal_switch_wwn, _set_principal_switch_wwn)
  co_ordinator_wwn = __builtin__.property(_get_co_ordinator_wwn, _set_co_ordinator_wwn)
  vcs_cluster_type_info = __builtin__.property(_get_vcs_cluster_type_info, _set_vcs_cluster_type_info)
  vcs_guid = __builtin__.property(_get_vcs_guid, _set_vcs_guid)
  virtual_ip_address = __builtin__.property(_get_virtual_ip_address, _set_virtual_ip_address)
  virtual_ipv6_address = __builtin__.property(_get_virtual_ipv6_address, _set_virtual_ipv6_address)
  total_nodes_in_cluster = __builtin__.property(_get_total_nodes_in_cluster, _set_total_nodes_in_cluster)
  nodes_disconnected_from_cluster = __builtin__.property(_get_nodes_disconnected_from_cluster, _set_nodes_disconnected_from_cluster)
  cluster_generic_status = __builtin__.property(_get_cluster_generic_status, _set_cluster_generic_status)
  cluster_specific_status = __builtin__.property(_get_cluster_specific_status, _set_cluster_specific_status)
  vcs_nodes = __builtin__.property(_get_vcs_nodes, _set_vcs_nodes)


  _pyangbind_elements = {'principal_switch_wwn': principal_switch_wwn, 'co_ordinator_wwn': co_ordinator_wwn, 'vcs_cluster_type_info': vcs_cluster_type_info, 'vcs_guid': vcs_guid, 'virtual_ip_address': virtual_ip_address, 'virtual_ipv6_address': virtual_ipv6_address, 'total_nodes_in_cluster': total_nodes_in_cluster, 'nodes_disconnected_from_cluster': nodes_disconnected_from_cluster, 'cluster_generic_status': cluster_generic_status, 'cluster_specific_status': cluster_specific_status, 'vcs_nodes': vcs_nodes, }


