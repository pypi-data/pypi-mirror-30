
from operator import attrgetter
import pyangbind.lib.xpathhelper as xpathhelper
from pyangbind.lib.yangtypes import RestrictedPrecisionDecimalType, RestrictedClassType, TypedListType
from pyangbind.lib.yangtypes import YANGBool, YANGListType, YANGDynClass, ReferenceType
from pyangbind.lib.base import PybindBase
from decimal import Decimal
from bitarray import bitarray
import __builtin__
class firmware_version_info(PybindBase):
  """
  This class was auto-generated by the PythonClass plugin for PYANG
  from YANG module brocade-firmware-ext - based on the path /brocade_firmware_ext_rpc/show-firmware-version/output/show-firmware-version/node-info/firmware-version-info. Each member element of
  the container is represented as a class variable - with a specific
  YANG type.
  """
  __slots__ = ('_pybind_generated_by', '_path_helper', '_yang_name', '_rest_name', '_extmethods', '__application_name','__primary_version','__secondary_version',)

  _yang_name = 'firmware-version-info'
  _rest_name = 'firmware-version-info'

  _pybind_generated_by = 'container'

  def __init__(self, *args, **kwargs):

    path_helper_ = kwargs.pop("path_helper", None)
    if path_helper_ is False:
      self._path_helper = False
    elif path_helper_ is not None and isinstance(path_helper_, xpathhelper.YANGPathHelper):
      self._path_helper = path_helper_
    elif hasattr(self, "_parent"):
      path_helper_ = getattr(self._parent, "_path_helper", False)
      self._path_helper = path_helper_
    else:
      self._path_helper = False

    extmethods = kwargs.pop("extmethods", None)
    if extmethods is False:
      self._extmethods = False
    elif extmethods is not None and isinstance(extmethods, dict):
      self._extmethods = extmethods
    elif hasattr(self, "_parent"):
      extmethods = getattr(self._parent, "_extmethods", None)
      self._extmethods = extmethods
    else:
      self._extmethods = False
    self.__application_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="application-name", rest_name="application-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)
    self.__primary_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-version", rest_name="primary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)
    self.__secondary_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-version", rest_name="secondary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)

    load = kwargs.pop("load", None)
    if args:
      if len(args) > 1:
        raise TypeError("cannot create a YANG container with >1 argument")
      all_attr = True
      for e in self._pyangbind_elements:
        if not hasattr(args[0], e):
          all_attr = False
          break
      if not all_attr:
        raise ValueError("Supplied object did not have the correct attributes")
      for e in self._pyangbind_elements:
        nobj = getattr(args[0], e)
        if nobj._changed() is False:
          continue
        setmethod = getattr(self, "_set_%s" % e)
        if load is None:
          setmethod(getattr(args[0], e))
        else:
          setmethod(getattr(args[0], e), load=load)

  def _path(self):
    if hasattr(self, "_parent"):
      return self._parent._path()+[self._yang_name]
    else:
      return [u'brocade_firmware_ext_rpc', u'show-firmware-version', u'output', u'show-firmware-version', u'node-info', u'firmware-version-info']

  def _rest_path(self):
    if hasattr(self, "_parent"):
      if self._rest_name:
        return self._parent._rest_path()+[self._rest_name]
      else:
        return self._parent._rest_path()
    else:
      return [u'show-firmware-version', u'output', u'show-firmware-version', u'node-info', u'firmware-version-info']

  def _get_application_name(self):
    """
    Getter method for application_name, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info/application_name (string)

    YANG Description: Name of the application.
    """
    return self.__application_name
      
  def _set_application_name(self, v, load=False):
    """
    Setter method for application_name, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info/application_name (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_application_name is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_application_name() directly.

    YANG Description: Name of the application.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="application-name", rest_name="application-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """application_name must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="application-name", rest_name="application-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)""",
        })

    self.__application_name = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_application_name(self):
    self.__application_name = YANGDynClass(base=unicode, is_leaf=True, yang_name="application-name", rest_name="application-name", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)


  def _get_primary_version(self):
    """
    Getter method for primary_version, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info/primary_version (string)

    YANG Description: Indicates the Primary version.
    """
    return self.__primary_version
      
  def _set_primary_version(self, v, load=False):
    """
    Setter method for primary_version, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info/primary_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_primary_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_primary_version() directly.

    YANG Description: Indicates the Primary version.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="primary-version", rest_name="primary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """primary_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-version", rest_name="primary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)""",
        })

    self.__primary_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_primary_version(self):
    self.__primary_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="primary-version", rest_name="primary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)


  def _get_secondary_version(self):
    """
    Getter method for secondary_version, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info/secondary_version (string)

    YANG Description: Indicates the secondary version.
    """
    return self.__secondary_version
      
  def _set_secondary_version(self, v, load=False):
    """
    Setter method for secondary_version, mapped from YANG variable /brocade_firmware_ext_rpc/show_firmware_version/output/show_firmware_version/node_info/firmware_version_info/secondary_version (string)
    If this variable is read-only (config: false) in the
    source YANG file, then _set_secondary_version is considered as a private
    method. Backends looking to populate this variable should
    do so via calling thisObj._set_secondary_version() directly.

    YANG Description: Indicates the secondary version.
    """
    if hasattr(v, "_utype"):
      v = v._utype(v)
    try:
      t = YANGDynClass(v,base=unicode, is_leaf=True, yang_name="secondary-version", rest_name="secondary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)
    except (TypeError, ValueError):
      raise ValueError({
          'error-string': """secondary_version must be of a type compatible with string""",
          'defined-type': "string",
          'generated-type': """YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-version", rest_name="secondary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)""",
        })

    self.__secondary_version = t
    if hasattr(self, '_set'):
      self._set()

  def _unset_secondary_version(self):
    self.__secondary_version = YANGDynClass(base=unicode, is_leaf=True, yang_name="secondary-version", rest_name="secondary-version", parent=self, path_helper=self._path_helper, extmethods=self._extmethods, register_paths=False, namespace='urn:brocade.com:mgmt:brocade-firmware-ext', defining_module='brocade-firmware-ext', yang_type='string', is_config=True)

  application_name = __builtin__.property(_get_application_name, _set_application_name)
  primary_version = __builtin__.property(_get_primary_version, _set_primary_version)
  secondary_version = __builtin__.property(_get_secondary_version, _set_secondary_version)


  _pyangbind_elements = {'application_name': application_name, 'primary_version': primary_version, 'secondary_version': secondary_version, }


