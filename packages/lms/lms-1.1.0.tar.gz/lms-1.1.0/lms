#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
"""
Interact with Logitech Media Server

Usage:
  lms (-h | --help)
  lms --version
  lms [-v|-vv] [options] status
  lms [-v|-vv] [options] <player> (play | pause)
  lms [-v|-vv] [options] <player> (play | add) <track>
  lms [-v|-vv] [options] <player> volume (up | down | <vol>)

Options:
  -h --help             Show this message
  -v,-vv                Increase verbosity
  --version             Show version
"""

import docopt
import logging
from time import time
from json import dumps as to_json
from sys import stderr
from collections import OrderedDict
from lms import find_server, __version__

_LOGGER = logging.getLogger(__name__)

LOGFMT = "%(asctime)s %(levelname)5s (%(threadName)s) [%(name)s] %(message)s"
DATEFMT = "%y-%m-%d %H:%M.%S"


def main():
    """Command line interface."""
    args = docopt.docopt(__doc__,
                         version=__version__)

    log_level = [logging.ERROR, logging.INFO, logging.DEBUG][args['-v']]

    try:
        import coloredlogs
        coloredlogs.install(level=log_level,
                            stream=stderr,
                            datefmt=DATEFMT,
                            fmt=LOGFMT)
    except ImportError:
        _LOGGER.debug("no colored logs. pip install coloredlogs?")
        logging.basicConfig(level=log_level,
                            stream=stderr,
                            datefmt=DATEFMT,
                            format=LOGFMT)

    server = find_server()

    player_id = args['<player>']
    player = (next((
        player for player in server.players
        if player_id.lower() in [
                player.player_id,
                player.name.lower(),
                player.ip]), None)
              if player_id else None)

    if args['status']:
        print(server)
    elif player:
        if args['<track>']: 
            if args['play']:
                pass
            elif args['add']:
                pass
        elif args['play']:
            player.play()
        elif args['pause']:
            player.pause()
        elif args['volume']:
            if args['<vol>']:
                player.set_volume(args['<vol>'])
            elif args['up']:
                player.volume_up()
            elif args['down']:
                player.volume_down()
    else:
        exit('?')


if __name__ == '__main__':
   main()
