# coding: utf-8

"""
    Aspose.Pdf for Cloud API Reference


   Copyright (c) 2018 Aspose.Pdf for Cloud
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 SOFTWARE.



    OpenAPI spec version: 1.1

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import os
import sys
import unittest
import json

import testasposepdfcloud
from testasposepdfcloud.apis.pdf_api import PdfApi
from testasposepdfcloud.rest import ApiException
from testasposepdfcloud.models.annotation_response import AnnotationResponse
from testasposepdfcloud.models.http_status_code import HttpStatusCode

import asposestoragecloud
from asposestoragecloud.StorageApi import StorageApi


class PdfTests(unittest.TestCase):

    def setUp(self):
        with open('test/setup.json') as json_file:
            data = json.load(json_file)

            self.storage_api_client = asposestoragecloud.ApiClient.ApiClient(
                                apiKey=str(data['app_key']),
                                appSid=str(data['app_sid']),
                                debug=True,
                                apiServer=str(data['product_uri']))
            self.storage_api = StorageApi(self.storage_api_client)

            self.pdf_api_client = testasposepdfcloud.api_client.ApiClient(
                                app_key=str(data['app_key']),
                                app_sid=str(data['app_sid']),
                                # host=str(data['product_uri']))
                                host="http://localhost:8081/v1.1")

            self.pdf_api = PdfApi(self.pdf_api_client)

            self.output_path = str(data['output_location'])

            self.temp_folder = 'TempPdf'


    def uploadFile(self, name):
        self.storage_api.PutCreate(self.temp_folder + '/' + name, 'test_data/' + name)


    def tearDown(self):
        pass

    
    # Annotations Tests

    def testGetPageAnnotation(self):
        file_name = 'PdfWithAnnotations.pdf'
        self.uploadFile(file_name)

        page_number = 2

        response = self.pdf_api.get_page_annotations(file_name, page_number, folder=self.temp_folder)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Append Tests

    def testPostAppendDocumentUsingQueryParams(self):
        file_name = 'PdfWithImages2.pdf'
        append_file_name = '4pages.pdf'

        self.uploadFile(file_name)
        self.uploadFile(append_file_name)

        opts = {
          "append_file" : append_file_name,
          "start_page" : 2,
          "end_page" : 4,
          "folder" : self.temp_folder
        }

        response = self.pdf_api.post_append_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostAppendDocumentUsingBodyParams(self):
        file_name = 'PdfWithImages2.pdf'
        append_file_name = '4pages.pdf'

        self.uploadFile(file_name)
        self.uploadFile(append_file_name)

        append_document = testasposepdfcloud.models.AppendDocument(document=append_file_name, start_page=2, end_page=4)


        opts = {
            "append_document" : append_document,
            "folder" : self.temp_folder
        }

        response = self.pdf_api.post_append_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    # Attachments Tests

    def testGetDocumentAttachmentByIndex(self):
        file_name = 'PdfWithEmbeddedFiles.pdf'
        self.uploadFile(file_name)

        attachment_index = 1
        opts = {
            "folder" : self.temp_folder
        }

        response = self.pdf_api.get_document_attachment_by_index(file_name, attachment_index, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    
    def testGetDocumentAttachments(self):
        file_name = 'PdfWithEmbeddedFiles.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_document_attachments(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
     
    

    def testGetDownloadDocumentAttachmentByIndex(self):
        file_name = 'PdfWithEmbeddedFiles.pdf'
        self.uploadFile(file_name)

        attachment_index = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_download_document_attachment_by_index(file_name, attachment_index, **opts)
        self.assertIsInstance(response, str);
    

    # Bookmarks Tests

    def testGetDocumentBookmarks(self):
        file_name = 'PdfWithBookmarks.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_document_bookmarks(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    
    # Document Save As Tiff Tests

    def testPutDocumentSaveAsTiffUsingQueryParams(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "result_file" : '4pages.tiff',
              "brightness" : 0.6,
              "compression" : 'Ccitt4',
              "color_depth" : 'format1bpp',
              "left_margin" : 0,
              "right_margin" : 0,
              "top_margin" : 0,
              "bottom_margin" : 0,
              "orientation" : 'portait', # Yes, we know 'portrait'. It will be fixed in the next version.
              "skip_blank_pages" : True,
              "width" : 1200,
              "height" : 1600,
              "x_resolution" : 200,
              "y_resolution" : 200,
              "page_index" : 2,
              "page_count" : 2,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_document_save_as_tiff(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutDocumentSaveAsTiffUsingBodyParams(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        export_options = testasposepdfcloud.models.TiffExportOptions()
        export_options.result_file = '4pages.tiff'
        export_options.brightness = 0.6
        export_options.compression = 'Ccitt4'
        export_options.color_depth = 'format1bpp'
        export_options.left_margin = 0
        export_options.right_margin = 0
        export_options.top_margin = 0
        export_options.bottom_margin = 0
        export_options.orientation = 'portait' # Yes, we know 'portrait'. It will be fixed in the next version.
        export_options.skip_blank_pages = True
        export_options.width = 1200
        export_options.height = 1600
        export_options.x_resolution = 200
        export_options.y_resolution = 200
        export_options.page_index = 2
        export_options.page_count = 2

        opts = {
              "export_options" : export_options,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_document_save_as_tiff(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    
    # Document Tests

    def testGetDocument(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_document(file_name, **opts)
        self.assertIsInstance(response, str)


    def testPostOptimizeDocument(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        optimize_options = testasposepdfcloud.models.OptimizeOptions(
                allow_reuse_page_content=False,
                compress_images=True,
                image_quality=100,
                link_duplcate_streams=True,
                remove_unused_objects=True,
                remove_unused_streams=True,            
                unembed_fonts=True)
        
        opts = {
            "options" : optimize_options,
            "folder" : self.temp_folder
        }

        response = self.pdf_api.post_optimize_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)



    def testPostSplitDocument(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }
        response = self.pdf_api.post_split_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutConvertDocument(self):
        url = 'http://pdf995.com/samples/pdf.pdf'
        format = 'tiff'

        opts = {
              "format" : format,
              "url" : url
        }

        response = self.pdf_api.put_convert_document(**opts)
        self.assertIsInstance(response, str)


    def testPutCreateEmptyDocument(self):
        file_name = 'empty.pdf'

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_create_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutCreateDocument(self):
        file_name = 'HtmlExample1.pdf'
        template_name = 'HtmlExample1.html'

        self.uploadFile(template_name)

        opts = {
              "template_file" : self.temp_folder + '/' + template_name,
              "template_type" : 'html',
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_create_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutCreateDocumentFromImages(self):
        image_1 = '33539.jpg'
        self.uploadFile(image_1)

        image_2 = '44781.jpg'
        self.uploadFile(image_2)

        result_doc_name = 'pdffromimagesinquery.pdf'

        images_list = [self.temp_folder + '/' + image_1,  self.temp_folder + '/' + image_2]
        images = testasposepdfcloud.models.ImagesListRequest(images_list)
        
        opts = {
              "images" : images,
              "ocr" : False,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_create_document_from_images(result_doc_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)    
    

    # Fields Tests

    def testGetField(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }
        field_name = 'textField'

        response = self.pdf_api.get_field(file_name, field_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetFields(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_fields(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostCreateField(self):
        file_name = 'Hello_world.pdf'
        self.uploadFile(file_name)

        rect = testasposepdfcloud.models.Rectangle(x=50, y=200, width=150, height=200)

        field = testasposepdfcloud.models.Field()
        field.name = 'checkboxfield'
        field.values = ['1']
        field.type = 'Boolean'
        field.rect = rect

        page_number = 1

        opts = {
              "field" : field,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_create_field(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutUpdateField(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        field_name = 'textField'

        field = testasposepdfcloud.models.Field()
        field.name = field_name
        field.values = ['Text field updated value.']
        field.type = testasposepdfcloud.models.FieldType.TEXT

        opts = {
              "field" : field,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_update_field(file_name, field_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    

    # Fragments And Segments Tests

    def testGetFragment(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        fragment_number = 1

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_fragment(file_name, page_number, fragment_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetFragmentTextFormat(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        fragment_number = 1

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_fragment_text_format(file_name, page_number, fragment_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetFragments(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1

        opts = {
              "folder" : self.temp_folder
        }
        response = self.pdf_api.get_fragments(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetSegment(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        fragment_number = 1
        segment_number = 1

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_segment(file_name, page_number, fragment_number, segment_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetSegmentTextFormat(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        fragment_number = 1
        segment_number = 1

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_segment_text_format(file_name, page_number, fragment_number, segment_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetSegments(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        fragment_number = 1

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_segments(file_name, page_number, fragment_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Images Tests

    def testGetImage(self):
        file_name = 'PdfWithImages2.pdf'
        self.uploadFile(file_name)

        page_number = 1
        image_number = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_image(file_name, page_number, image_number, **opts)
        self.assertIsInstance(response, str)


    def testGetImages(self):
        file_name = 'PdfWithImages2.pdf'
        self.uploadFile(file_name)

        page_number = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_images(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostReplaceImage(self):
        file_name = 'PdfWithImages2.pdf'
        self.uploadFile(file_name)

        image_file_name = 'Koala.jpg'
        self.uploadFile(image_file_name)

        page_number = 1
        image_number = 1
        opts = {
              "image_file" : self.temp_folder + '/' + image_file_name,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_replace_image(file_name, page_number, image_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Links Tests

    def testGetPageLinkAnnotationByIndex(self):
        file_name = 'PdfWithLinks.pdf'
        self.uploadFile(file_name)

        page_number = 1
        link_index = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_page_link_annotation_by_index(file_name, page_number, link_index, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetPageLinkAnnotations(self):
        file_name = 'PdfWithLinks.pdf'
        self.uploadFile(file_name)

        page_number = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_page_link_annotations(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Merge Tests

    def testPutMergeDocuments(self):
        file_name_list = ['4pages.pdf', 'PdfWithImages2.pdf', 'marketing.pdf']
        for file_name in file_name_list:
            self.uploadFile(file_name)
        
        result_name = 'MergingResult.pdf'

        merge_documents = testasposepdfcloud.models.MergeDocuments()
        merge_documents.list = file_name_list

        opts = {
              "merge_documents" : merge_documents,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_merge_documents(result_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Pages Tests

    def testDeletePage(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.delete_page(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetPage(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 3
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_page(file_name, page_number, **opts)
        self.assertIsInstance(response, str)


    def testGetPages(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_pages(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetWordsPerPage(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_words_per_page(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostMovePage(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }
        page_number = 1
        new_index = 1

        response = self.pdf_api.post_move_page(file_name, page_number, new_index, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutAddNewPage(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_add_new_page(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutPageAddStamp(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        stamp_file_name = 'Penguins.jpg'
        self.uploadFile(stamp_file_name)

        page_number = 1

        stamp = testasposepdfcloud.models.Stamp(type=testasposepdfcloud.models.StampType.IMAGE)
        stamp.file_name = self.temp_folder + '/' + stamp_file_name
        stamp.background = True
        stamp.width = 200
        stamp.height = 200
        stamp.x_indent = 100
        stamp.y_indent = 100

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_page_add_stamp(file_name, page_number, stamp, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    
    
    # Paragraphs Tests

    def testPutAddText(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1

        rectangle = testasposepdfcloud.models.Rectangle(x=100, y=100, width=200, height=200)
        
        foreground_color = testasposepdfcloud.models.Color(a=0x00, r=0x00, g=0xFF, b=0x00)
        
        background_color = testasposepdfcloud.models.Color(a=0x00, r=0xFF, g=0x00, b=0x00)
        
        text_state = testasposepdfcloud.models.TextState(
                    font_size=10, 
                    font='Arial', 
                    foreground_color=foreground_color,
                    background_color=background_color,
                    font_style=testasposepdfcloud.models.FontStyles.BOLD)

        segment = testasposepdfcloud.models.Segment()
        segment.value = 'segment 1'
        segment.text_state = text_state

        text_line = testasposepdfcloud.models.TextLine()
        text_line.horizontal_alignment = testasposepdfcloud.models.TextHorizontalAlignment.RIGHT
        text_line.segments = [segment]

        paragraph = testasposepdfcloud.models.Paragraph(lines=[text_line])
        paragraph.rectangle = rectangle
        paragraph.left_margin = 10
        paragraph.right_margin = 10
        paragraph.top_margin = 20
        paragraph.bottom_margin = 20
        paragraph.horizontal_alignment = testasposepdfcloud.models.TextHorizontalAlignment.FULLJUSTIFY
        paragraph.line_spacing = testasposepdfcloud.models.LineSpacing.FONTSIZE
        paragraph.rotation = 10
        paragraph.subsequent_lines_indent = 20
        paragraph.vertical_alignment = testasposepdfcloud.models.VerticalAlignment.CENTER
        paragraph.wrap_mode = testasposepdfcloud.models.WrapMode.BYWORDS
        

        opts = {
              "paragraph" : paragraph,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_add_text(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Properties Tests

    def testDeleteProperties(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        property_1 = testasposepdfcloud.models.DocumentProperty()
        property_1.name = 'prop1'
        property_1.value = 'val1'

        opts_1 = {
              "_property" : property_1,
              "folder" : self.temp_folder
        }

        property_2 = testasposepdfcloud.models.DocumentProperty()
        property_2.name = 'prop2'
        property_2.value = 'val2'

        opts_2 = {
              "_property" : property_2,
              "folder" : self.temp_folder
        }

        self.pdf_api.put_set_property(file_name, property_1.name, **opts_1)
        self.pdf_api.put_set_property(file_name, property_2.name, **opts_2)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.delete_properties(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testDeleteProperty(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        property_1 = testasposepdfcloud.models.DocumentProperty()
        property_1.name = 'prop1'
        property_1.value = 'val1'

        opts_1 = {
              "_property" : property_1,
              "folder" : self.temp_folder
        }

        self.pdf_api.put_set_property(file_name, property_1.name, **opts_1)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.delete_property(file_name, property_1.name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetDocumentProperties(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        property_1 = testasposepdfcloud.models.DocumentProperty()
        property_1.name = 'prop1'
        property_1.value = 'val1'

        opts_1 = {
              "_property" : property_1,
              "folder" : self.temp_folder
        }

        property_2 = testasposepdfcloud.models.DocumentProperty()
        property_2.name = 'prop2'
        property_2.value = 'val2'

        opts_2 = {
              "_property" : property_2,
              "folder" : self.temp_folder
        }

        self.pdf_api.put_set_property(file_name, property_1.name, **opts_1)
        self.pdf_api.put_set_property(file_name, property_2.name, **opts_2)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_document_properties(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetDocumentProperty(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        property_1 = testasposepdfcloud.models.DocumentProperty()
        property_1.name = 'prop1'
        property_1.value = 'val1'

        opts_1 = {
              "_property" : property_1,
              "folder" : self.temp_folder
        }

        self.pdf_api.put_set_property(file_name, property_1.name, **opts_1)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_document_property(file_name, property_1.name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutSetProperty(self):
        file_name = 'PdfWithAcroForm.pdf'
        self.uploadFile(file_name)

        property_1 = testasposepdfcloud.models.DocumentProperty()
        property_1.name = 'prop1'
        property_1.value = 'val1'

        opts_1 = {
              "_property" : property_1,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_set_property(file_name, property_1.name, **opts_1)
        self.assertEqual(response.code, HttpStatusCode.OK)


    # Sign Tests

    def testPostSignDocument(self):
        file_name = 'BlankWithSignature.pdf'
        self.uploadFile(file_name)

        signature_file_name = 'test1234.pfx'
        self.uploadFile(signature_file_name)

        rectangle = testasposepdfcloud.models.Rectangle(x=100, y=100, width=400, height=100)
        
        signature = testasposepdfcloud.models.Signature(
                signature_path=self.temp_folder + '/' + signature_file_name,
                signature_type=testasposepdfcloud.models.SignatureType.PKCS_7,
                password='test1234',
                contact='testself.mail.ru',
                location='Ukraine',
                visible=True,
                rectangle=rectangle,
                form_field_name='Signature1',
                authority='Sergey Smal',
                date='08/01/2012 12:15:00.000 PM',
                show_properties=False)

        opts = {
              "signature" : signature,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_sign_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostSignPage(self):
        file_name = 'BlankWithSignature.pdf'
        self.uploadFile(file_name)

        signature_file_name = 'test1234.pfx'
        self.uploadFile(signature_file_name)

        page_number = 1

        rectangle = testasposepdfcloud.models.Rectangle(x=100, y=100, width=400, height=100)

        signature = testasposepdfcloud.models.Signature(
                signature_path=self.temp_folder + '/' + signature_file_name,
                signature_type=testasposepdfcloud.models.SignatureType.PKCS_7,
                password='test1234',
                contact='testself.mail.ru',
                location='Ukraine',
                visible=True,
                rectangle=rectangle,
                form_field_name='Signature1',
                authority='Sergey Smal',
                date='08/01/2012 12:15:00.000 PM',
                show_properties=False)

        opts = {
              "signature" : signature,
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_sign_page(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    

    # Text Items Tests

    def testGetPageTextItems(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_page_text_items(file_name, page_number, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetTextItems(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_text_items(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    

    # Text Replace Tests

    def testPostDocumentReplaceText(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        text_replace_request = testasposepdfcloud.models.TextReplaceRequest(
                old_value='Page',
                new_value='p_a_g_e',
                regex=False)
        

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_document_replace_text(file_name, text_replace_request, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostDocumentReplaceTextList(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        text_replace_request_1 = testasposepdfcloud.models.TextReplaceRequest(
                old_value='First',
                new_value='1',
                regex=False)

        text_replace_request_2 = testasposepdfcloud.models.TextReplaceRequest(
                old_value='Page',
                new_value='p_a_g_e',
                regex=False)

        text_replace_list_request = testasposepdfcloud.models.TextReplaceListRequest(
                text_replaces=[text_replace_request_1, text_replace_request_2])
        
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_document_replace_text_list(file_name, text_replace_list_request, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostPageReplaceText(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1

        text_replace_request = testasposepdfcloud.models.TextReplaceRequest(
                old_value='Page',
                new_value='p_a_g_e',
                regex=False)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_page_replace_text(file_name, page_number, text_replace_request, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostPageReplaceTextList(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1

        text_replace_request_1 = testasposepdfcloud.models.TextReplaceRequest(
                old_value='First',
                new_value='1',
                regex=False)

        text_replace_request_2 = testasposepdfcloud.models.TextReplaceRequest(
                old_value='Page',
                new_value='p_a_g_e',
                regex=False)

        text_replace_list_request = testasposepdfcloud.models.TextReplaceListRequest(
                text_replaces=[text_replace_request_1, text_replace_request_2])

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_page_replace_text_list(file_name, page_number, text_replace_list_request, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    

    # OCR Tests

    def testPutSearchableDocument(self):
        file_name = 'rusdoc.pdf'
        self.uploadFile(file_name)

        opts = {
              "lang" : 'rus,eng',
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_searchable_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPutSearchableDocumentWithDefaultLang(self):
        file_name = 'rusdoc.pdf'
        self.uploadFile(file_name)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.put_searchable_document(file_name, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

    
    # Text Tests

    def testGetText(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        x = 0
        y = 0
        width = 0
        height = 0
        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_text(file_name, x, y, width, height, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testGetPageTextByTwoTextOnPage(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        page_number = 1
        x = 0
        y = 0
        width = 0
        height = 0
        opts = {
              "format" : ['First Page', 'Second Page'],
              "folder" : self.temp_folder
        }

        response = self.pdf_api.get_page_text(file_name, page_number, x, y, width, height, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)
    

    # Text Replace Tests

    def testPostDocumentTextReplaceWholeDocByRect(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)

        rect = testasposepdfcloud.models.Rectangle(x=100, y=700, width=300, height=300)

        text_replace = testasposepdfcloud.models.TextReplace(
                old_value='Page',
                new_value='p_a_g_e',
                regex=False,
                rect=rect)

        text_replace_list = testasposepdfcloud.models.TextReplaceListRequest(
                text_replaces=[text_replace],
                start_index=0,
                count_replace=0)


        opts = {
              "folder" : self.temp_folder
        }

        response  = self.pdf_api.post_document_text_replace(file_name, text_replace_list, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)


    def testPostPageTextReplaceByRect(self):
        file_name = '4pages.pdf'
        self.uploadFile(file_name)
        page_number = 1

        rect = testasposepdfcloud.models.Rectangle(x=100, y=700, width=300, height=300)

        text_replace = testasposepdfcloud.models.TextReplace(
                old_value='Page',
                new_value='p_a_g_e',
                regex=False,
                rect=rect)

        text_replace_list = testasposepdfcloud.models.TextReplaceListRequest(
                text_replaces=[text_replace],
                start_index=0,
                count_replace=0)

        opts = {
              "folder" : self.temp_folder
        }

        response = self.pdf_api.post_page_text_replace(file_name, page_number, text_replace_list, **opts)
        self.assertEqual(response.code, HttpStatusCode.OK)

if __name__ == '__main__':
    unittest.main()
