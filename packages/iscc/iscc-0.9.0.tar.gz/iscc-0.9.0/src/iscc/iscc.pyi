# -*- coding: utf-8 -*-
from typing import *
from PIL import Image
from io import BytesIO


B = TypeVar('B', BinaryIO, bytes)
IMG = TypeVar('I', str, BytesIO, Image.Image)


def meta_id(title: Union[str, bytes], extra: Union[str, bytes]='', version: int=0) -> Tuple[str, str, str]: ...
def content_id_text(text: Union[str, bytes], partial=False) -> str: ...
def content_id_image(img: IMG, partial=False) -> str: ...
def data_id(data: B) -> str: ...
def instance_id(data: B) -> Tuple[str, str]: ...

def trim(text: str) -> str: ...
def top_hash(hashes: List[bytes]) -> bytes: ...
def sha256d(data: bytes) -> bytes: ...
def hash_inner_nodes(a: bytes, b: bytes) -> bytes: ...
def data_chunks(data: B) -> Generator[bytes, None, None]: ...
def chunk_length(data: bytes, norm_size: int, min_size: int, max_size: int, mask_1: int, mask_2: int) -> int: ...
def normalize_text(text: str) -> str: ...
def sliding_window(text: Sequence, width: int) -> List: ...
def minimum_hash(features: Iterable[int]) -> List[int]: ...
def similarity_hash(hash_digests: Sequence[ByteString]) -> bytes: ...
def dct(value_list: Sequence[float]) -> Sequence[float]: ...
def distance(a: Union[int, str, bytes], b: Union[int, str, bytes]) -> int: ...
def encode(digest: bytes) -> str: ...
def decode(code: str) -> bytes: ...





