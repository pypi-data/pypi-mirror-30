version: '{branch}-{build}'
build: off
configuration: Release
environment:
  global:
    WITH_COMPILER: 'cmd /E:ON /V:ON /C .\ci\appveyor-with-compiler.cmd'
  matrix:
{% for env, config in tox_environments|dictsort %}{% if config.python in ('python2.6', 'python2.7', 'python3.4', 'python3.5', 'python3.6') and not config.cover %}
    - TESTENV: '{{ env }}-64'
      {%- if config.python != 'python3.5' %}

      INSTALL_LIBPYTHON: libpython
      {%- endif %}

      PYTHON_VERSION: '{{ config.python[-3:] }}'
      MINICONDA_HOME: C:\Miniconda-x64
      TESTSCRIPT: 'py.test'

    - TESTENV: '{{ env }}-32'
      {%- if config.python != 'python3.5' %}

      INSTALL_LIBPYTHON: libpython
      {%- endif %}

      PYTHON_VERSION: '{{ config.python[-3:] }}'
      MINICONDA_HOME: C:\Miniconda
      TESTSCRIPT: 'py.test'

{% endif %}{% endfor %}
    - TESTENV: 'check'
      INSTALL_LIBPYTHON: libpython
      PYTHON_VERSION: '2.7'
      MINICONDA_HOME: 'C:\Miniconda'
      TESTSCRIPT: 'python setup.py check --strict --metadata --restructuredtext && check-manifest && flake8 src tests'
      INSTALL_EXTRA_DEPS: 'pip install docutils check-manifest flake8 readme pygments'

init:
  - ps: echo $env:TESTENV
install:
  - set PATH=%PATH%;C:\msys64\mingw64\bin
  - '%MINICONDA_HOME%\Scripts\conda config --set always_yes yes'
  - '%MINICONDA_HOME%\Scripts\conda update -q conda'
  - '%MINICONDA_HOME%\Scripts\conda create -q -p C:\pythontest python=%PYTHON_VERSION% %INSTALL_LIBPYTHON% pytest numpy'
  # remove file which conflicts with installation of package 'readme' on case-insensitive file systems
  - del C:\pythontest\Lib\site-packages\README
  # to stop the unnecessary "Only MS compiler supported with gfortran on win64" error on some configurations (numpy 1.9?)
  - python ci\fix-compiler-error.py
  - '%MINICONDA_HOME%\Scripts\activate C:\pythontest'
  - where python
  - where pip
  - '%INSTALL_EXTRA_DEPS%'
  - python setup.py clean --all build_ext --force --inplace --compiler=mingw32
  - python setup.py develop
test_script:
  - '%TESTSCRIPT%'

after_test:
  - python setup.py sdist bdist_wheel

deploy_script:
  # if tagged commit, build/upload wheel
  - IF "%APPVEYOR_REPO_TAG%"=="true" IF NOT "%TESTENV%"=="check" (
      pip install twine &&
      python setup.py register &&
      twine upload -u %PYPI_USER% -p %PYPI_PASS% dist/*
    )

artifacts:
  - path: dist\*
matrix:
  allow_failures:
    - PYTHON_VERSION: '3.5'
    - TESTENV: '2.7-nocover-64'
    - TESTENV: '3.5-nocover-64'
    - TESTENV: '3.6-nocover-64'
    - TESTENV: 'check'
### To enable remote debugging uncomment this:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

