# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: EventHub.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='EventHub.proto',
  package='predix.eventhub',
  syntax='proto3',
  serialized_pb=_b('\n\x0e\x45ventHub.proto\x12\x0fpredix.eventhub\"+\n\tTimestamp\x12\x0f\n\x07seconds\x18\x01 \x01(\x03\x12\r\n\x05nanos\x18\x02 \x01(\x05\"\x81\x02\n\x07Message\x12\n\n\x02id\x18\x01 \x01(\t\x12\x0c\n\x04\x62ody\x18\x02 \x01(\x0c\x12\x0f\n\x07zone_id\x18\x03 \x01(\t\x12\x30\n\x04tags\x18\x04 \x03(\x0b\x32\".predix.eventhub.Message.TagsEntry\x12\x0b\n\x03key\x18\x05 \x01(\x0c\x12\r\n\x05topic\x18\x06 \x01(\t\x12\x11\n\tpartition\x18\x07 \x01(\x05\x12\x0e\n\x06offset\x18\x08 \x01(\x03\x12-\n\ttimestamp\x18\t \x01(\x0b\x32\x1a.predix.eventhub.Timestamp\x1a+\n\tTagsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xb8\x02\n\x03\x41\x63k\x12\n\n\x02id\x18\x01 \x01(\t\x12/\n\x0bstatus_code\x18\x02 \x01(\x0e\x32\x1a.predix.eventhub.AckStatus\x12\x0c\n\x04\x64\x65sc\x18\x03 \x01(\t\x12\r\n\x05topic\x18\x04 \x01(\t\x12\x11\n\tpartition\x18\x05 \x01(\x05\x12\x0e\n\x06offset\x18\x06 \x01(\x03\x12-\n\ttimestamp\x18\x07 \x01(\x0b\x32\x1a.predix.eventhub.Timestamp\x12\x0c\n\x04\x62ody\x18\x08 \x01(\x0c\x12\x0f\n\x07zone_id\x18\t \x01(\t\x12,\n\x04tags\x18\n \x03(\x0b\x32\x1e.predix.eventhub.Ack.TagsEntry\x12\x0b\n\x03key\x18\x0b \x01(\x0c\x1a+\n\tTagsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"1\n\x08Messages\x12%\n\x03msg\x18\x01 \x03(\x0b\x32\x18.predix.eventhub.Message\"=\n\x0ePublishRequest\x12+\n\x08messages\x18\x01 \x01(\x0b\x32\x19.predix.eventhub.Messages\"B\n\x13SubscriptionMessage\x12+\n\x08messages\x18\x01 \x01(\x0b\x32\x19.predix.eventhub.Messages\"4\n\x0fPublishResponse\x12!\n\x03\x61\x63k\x18\x01 \x03(\x0b\x32\x14.predix.eventhub.Ack\"9\n\x14SubscriptionResponse\x12!\n\x03\x61\x63k\x18\x01 \x03(\x0b\x32\x14.predix.eventhub.Ack\"5\n\x10SubscriptionAcks\x12!\n\x03\x61\x63k\x18\x01 \x03(\x0b\x32\x14.predix.eventhub.Ack\"O\n\x13SubscriptionRequest\x12\x0f\n\x07zone_id\x18\x01 \x01(\t\x12\x12\n\nsubscriber\x18\x02 \x01(\t\x12\x13\n\x0binstance_id\x18\x03 \x01(\t*M\n\tAckStatus\x12\x0c\n\x08\x41\x43\x43\x45PTED\x10\x00\x12\x0f\n\x0b\x42\x41\x44_REQUEST\x10\x01\x12\x15\n\x11REQUEST_TOO_LARGE\x10\x02\x12\n\n\x06\x46\x41ILED\x10\x03\x32\\\n\tPublisher\x12O\n\x04send\x12\x1f.predix.eventhub.PublishRequest\x1a .predix.eventhub.PublishResponse\"\x00(\x01\x30\x01\x32\x91\x02\n\nSubscriber\x12M\n\x07receive\x12$.predix.eventhub.SubscriptionRequest\x1a\x18.predix.eventhub.Message\"\x00\x30\x01\x12X\n\x0freceiveWithAcks\x12%.predix.eventhub.SubscriptionResponse\x1a\x18.predix.eventhub.Message\"\x00(\x01\x30\x01\x12Z\n\tsubscribe\x12!.predix.eventhub.SubscriptionAcks\x1a$.predix.eventhub.SubscriptionMessage\"\x00(\x01\x30\x01\x42+\n\x16\x63om.ge.predix.eventhubB\x0f\x45ventHubServiceP\x01\x62\x06proto3')
)

_ACKSTATUS = _descriptor.EnumDescriptor(
  name='AckStatus',
  full_name='predix.eventhub.AckStatus',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ACCEPTED', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BAD_REQUEST', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REQUEST_TOO_LARGE', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FAILED', index=3, number=3,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1086,
  serialized_end=1163,
)
_sym_db.RegisterEnumDescriptor(_ACKSTATUS)

AckStatus = enum_type_wrapper.EnumTypeWrapper(_ACKSTATUS)
ACCEPTED = 0
BAD_REQUEST = 1
REQUEST_TOO_LARGE = 2
FAILED = 3



_TIMESTAMP = _descriptor.Descriptor(
  name='Timestamp',
  full_name='predix.eventhub.Timestamp',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='seconds', full_name='predix.eventhub.Timestamp.seconds', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='nanos', full_name='predix.eventhub.Timestamp.nanos', index=1,
      number=2, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=35,
  serialized_end=78,
)


_MESSAGE_TAGSENTRY = _descriptor.Descriptor(
  name='TagsEntry',
  full_name='predix.eventhub.Message.TagsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='predix.eventhub.Message.TagsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='predix.eventhub.Message.TagsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=295,
  serialized_end=338,
)

_MESSAGE = _descriptor.Descriptor(
  name='Message',
  full_name='predix.eventhub.Message',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='predix.eventhub.Message.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='body', full_name='predix.eventhub.Message.body', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='zone_id', full_name='predix.eventhub.Message.zone_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='predix.eventhub.Message.tags', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key', full_name='predix.eventhub.Message.key', index=4,
      number=5, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='predix.eventhub.Message.topic', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='partition', full_name='predix.eventhub.Message.partition', index=6,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='predix.eventhub.Message.offset', index=7,
      number=8, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='predix.eventhub.Message.timestamp', index=8,
      number=9, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_MESSAGE_TAGSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=81,
  serialized_end=338,
)


_ACK_TAGSENTRY = _descriptor.Descriptor(
  name='TagsEntry',
  full_name='predix.eventhub.Ack.TagsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='predix.eventhub.Ack.TagsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='predix.eventhub.Ack.TagsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=295,
  serialized_end=338,
)

_ACK = _descriptor.Descriptor(
  name='Ack',
  full_name='predix.eventhub.Ack',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='predix.eventhub.Ack.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='status_code', full_name='predix.eventhub.Ack.status_code', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='desc', full_name='predix.eventhub.Ack.desc', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='topic', full_name='predix.eventhub.Ack.topic', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='partition', full_name='predix.eventhub.Ack.partition', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='offset', full_name='predix.eventhub.Ack.offset', index=5,
      number=6, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='predix.eventhub.Ack.timestamp', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='body', full_name='predix.eventhub.Ack.body', index=7,
      number=8, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='zone_id', full_name='predix.eventhub.Ack.zone_id', index=8,
      number=9, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tags', full_name='predix.eventhub.Ack.tags', index=9,
      number=10, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='key', full_name='predix.eventhub.Ack.key', index=10,
      number=11, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_ACK_TAGSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=341,
  serialized_end=653,
)


_MESSAGES = _descriptor.Descriptor(
  name='Messages',
  full_name='predix.eventhub.Messages',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='msg', full_name='predix.eventhub.Messages.msg', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=655,
  serialized_end=704,
)


_PUBLISHREQUEST = _descriptor.Descriptor(
  name='PublishRequest',
  full_name='predix.eventhub.PublishRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='messages', full_name='predix.eventhub.PublishRequest.messages', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=706,
  serialized_end=767,
)


_SUBSCRIPTIONMESSAGE = _descriptor.Descriptor(
  name='SubscriptionMessage',
  full_name='predix.eventhub.SubscriptionMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='messages', full_name='predix.eventhub.SubscriptionMessage.messages', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=769,
  serialized_end=835,
)


_PUBLISHRESPONSE = _descriptor.Descriptor(
  name='PublishResponse',
  full_name='predix.eventhub.PublishResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ack', full_name='predix.eventhub.PublishResponse.ack', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=837,
  serialized_end=889,
)


_SUBSCRIPTIONRESPONSE = _descriptor.Descriptor(
  name='SubscriptionResponse',
  full_name='predix.eventhub.SubscriptionResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ack', full_name='predix.eventhub.SubscriptionResponse.ack', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=891,
  serialized_end=948,
)


_SUBSCRIPTIONACKS = _descriptor.Descriptor(
  name='SubscriptionAcks',
  full_name='predix.eventhub.SubscriptionAcks',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='ack', full_name='predix.eventhub.SubscriptionAcks.ack', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=950,
  serialized_end=1003,
)


_SUBSCRIPTIONREQUEST = _descriptor.Descriptor(
  name='SubscriptionRequest',
  full_name='predix.eventhub.SubscriptionRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='zone_id', full_name='predix.eventhub.SubscriptionRequest.zone_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='subscriber', full_name='predix.eventhub.SubscriptionRequest.subscriber', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='instance_id', full_name='predix.eventhub.SubscriptionRequest.instance_id', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1005,
  serialized_end=1084,
)

_MESSAGE_TAGSENTRY.containing_type = _MESSAGE
_MESSAGE.fields_by_name['tags'].message_type = _MESSAGE_TAGSENTRY
_MESSAGE.fields_by_name['timestamp'].message_type = _TIMESTAMP
_ACK_TAGSENTRY.containing_type = _ACK
_ACK.fields_by_name['status_code'].enum_type = _ACKSTATUS
_ACK.fields_by_name['timestamp'].message_type = _TIMESTAMP
_ACK.fields_by_name['tags'].message_type = _ACK_TAGSENTRY
_MESSAGES.fields_by_name['msg'].message_type = _MESSAGE
_PUBLISHREQUEST.fields_by_name['messages'].message_type = _MESSAGES
_SUBSCRIPTIONMESSAGE.fields_by_name['messages'].message_type = _MESSAGES
_PUBLISHRESPONSE.fields_by_name['ack'].message_type = _ACK
_SUBSCRIPTIONRESPONSE.fields_by_name['ack'].message_type = _ACK
_SUBSCRIPTIONACKS.fields_by_name['ack'].message_type = _ACK
DESCRIPTOR.message_types_by_name['Timestamp'] = _TIMESTAMP
DESCRIPTOR.message_types_by_name['Message'] = _MESSAGE
DESCRIPTOR.message_types_by_name['Ack'] = _ACK
DESCRIPTOR.message_types_by_name['Messages'] = _MESSAGES
DESCRIPTOR.message_types_by_name['PublishRequest'] = _PUBLISHREQUEST
DESCRIPTOR.message_types_by_name['SubscriptionMessage'] = _SUBSCRIPTIONMESSAGE
DESCRIPTOR.message_types_by_name['PublishResponse'] = _PUBLISHRESPONSE
DESCRIPTOR.message_types_by_name['SubscriptionResponse'] = _SUBSCRIPTIONRESPONSE
DESCRIPTOR.message_types_by_name['SubscriptionAcks'] = _SUBSCRIPTIONACKS
DESCRIPTOR.message_types_by_name['SubscriptionRequest'] = _SUBSCRIPTIONREQUEST
DESCRIPTOR.enum_types_by_name['AckStatus'] = _ACKSTATUS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Timestamp = _reflection.GeneratedProtocolMessageType('Timestamp', (_message.Message,), dict(
  DESCRIPTOR = _TIMESTAMP,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.Timestamp)
  ))
_sym_db.RegisterMessage(Timestamp)

Message = _reflection.GeneratedProtocolMessageType('Message', (_message.Message,), dict(

  TagsEntry = _reflection.GeneratedProtocolMessageType('TagsEntry', (_message.Message,), dict(
    DESCRIPTOR = _MESSAGE_TAGSENTRY,
    __module__ = 'EventHub_pb2'
    # @@protoc_insertion_point(class_scope:predix.eventhub.Message.TagsEntry)
    ))
  ,
  DESCRIPTOR = _MESSAGE,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.Message)
  ))
_sym_db.RegisterMessage(Message)
_sym_db.RegisterMessage(Message.TagsEntry)

Ack = _reflection.GeneratedProtocolMessageType('Ack', (_message.Message,), dict(

  TagsEntry = _reflection.GeneratedProtocolMessageType('TagsEntry', (_message.Message,), dict(
    DESCRIPTOR = _ACK_TAGSENTRY,
    __module__ = 'EventHub_pb2'
    # @@protoc_insertion_point(class_scope:predix.eventhub.Ack.TagsEntry)
    ))
  ,
  DESCRIPTOR = _ACK,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.Ack)
  ))
_sym_db.RegisterMessage(Ack)
_sym_db.RegisterMessage(Ack.TagsEntry)

Messages = _reflection.GeneratedProtocolMessageType('Messages', (_message.Message,), dict(
  DESCRIPTOR = _MESSAGES,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.Messages)
  ))
_sym_db.RegisterMessage(Messages)

PublishRequest = _reflection.GeneratedProtocolMessageType('PublishRequest', (_message.Message,), dict(
  DESCRIPTOR = _PUBLISHREQUEST,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.PublishRequest)
  ))
_sym_db.RegisterMessage(PublishRequest)

SubscriptionMessage = _reflection.GeneratedProtocolMessageType('SubscriptionMessage', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONMESSAGE,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.SubscriptionMessage)
  ))
_sym_db.RegisterMessage(SubscriptionMessage)

PublishResponse = _reflection.GeneratedProtocolMessageType('PublishResponse', (_message.Message,), dict(
  DESCRIPTOR = _PUBLISHRESPONSE,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.PublishResponse)
  ))
_sym_db.RegisterMessage(PublishResponse)

SubscriptionResponse = _reflection.GeneratedProtocolMessageType('SubscriptionResponse', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONRESPONSE,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.SubscriptionResponse)
  ))
_sym_db.RegisterMessage(SubscriptionResponse)

SubscriptionAcks = _reflection.GeneratedProtocolMessageType('SubscriptionAcks', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONACKS,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.SubscriptionAcks)
  ))
_sym_db.RegisterMessage(SubscriptionAcks)

SubscriptionRequest = _reflection.GeneratedProtocolMessageType('SubscriptionRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTIONREQUEST,
  __module__ = 'EventHub_pb2'
  # @@protoc_insertion_point(class_scope:predix.eventhub.SubscriptionRequest)
  ))
_sym_db.RegisterMessage(SubscriptionRequest)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\026com.ge.predix.eventhubB\017EventHubServiceP\001'))
_MESSAGE_TAGSENTRY.has_options = True
_MESSAGE_TAGSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_ACK_TAGSENTRY.has_options = True
_ACK_TAGSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))

_PUBLISHER = _descriptor.ServiceDescriptor(
  name='Publisher',
  full_name='predix.eventhub.Publisher',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=1165,
  serialized_end=1257,
  methods=[
  _descriptor.MethodDescriptor(
    name='send',
    full_name='predix.eventhub.Publisher.send',
    index=0,
    containing_service=None,
    input_type=_PUBLISHREQUEST,
    output_type=_PUBLISHRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_PUBLISHER)

DESCRIPTOR.services_by_name['Publisher'] = _PUBLISHER


_SUBSCRIBER = _descriptor.ServiceDescriptor(
  name='Subscriber',
  full_name='predix.eventhub.Subscriber',
  file=DESCRIPTOR,
  index=1,
  options=None,
  serialized_start=1260,
  serialized_end=1533,
  methods=[
  _descriptor.MethodDescriptor(
    name='receive',
    full_name='predix.eventhub.Subscriber.receive',
    index=0,
    containing_service=None,
    input_type=_SUBSCRIPTIONREQUEST,
    output_type=_MESSAGE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='receiveWithAcks',
    full_name='predix.eventhub.Subscriber.receiveWithAcks',
    index=1,
    containing_service=None,
    input_type=_SUBSCRIPTIONRESPONSE,
    output_type=_MESSAGE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='subscribe',
    full_name='predix.eventhub.Subscriber.subscribe',
    index=2,
    containing_service=None,
    input_type=_SUBSCRIPTIONACKS,
    output_type=_SUBSCRIPTIONMESSAGE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_SUBSCRIBER)

DESCRIPTOR.services_by_name['Subscriber'] = _SUBSCRIBER

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PublisherStub(object):
    """Publisher service definition
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.send = channel.stream_stream(
          '/predix.eventhub.Publisher/send',
          request_serializer=PublishRequest.SerializeToString,
          response_deserializer=PublishResponse.FromString,
          )


  class PublisherServicer(object):
    """Publisher service definition
    """

    def send(self, request_iterator, context):
      """Send message to topic. Topic name will be in URI
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PublisherServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'send': grpc.stream_stream_rpc_method_handler(
            servicer.send,
            request_deserializer=PublishRequest.FromString,
            response_serializer=PublishResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'predix.eventhub.Publisher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class SubscriberStub(object):
    """Subscriber service definition
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.receive = channel.unary_stream(
          '/predix.eventhub.Subscriber/receive',
          request_serializer=SubscriptionRequest.SerializeToString,
          response_deserializer=Message.FromString,
          )
      self.receiveWithAcks = channel.stream_stream(
          '/predix.eventhub.Subscriber/receiveWithAcks',
          request_serializer=SubscriptionResponse.SerializeToString,
          response_deserializer=Message.FromString,
          )
      self.subscribe = channel.stream_stream(
          '/predix.eventhub.Subscriber/subscribe',
          request_serializer=SubscriptionAcks.SerializeToString,
          response_deserializer=SubscriptionMessage.FromString,
          )


  class SubscriberServicer(object):
    """Subscriber service definition
    """

    def receive(self, request, context):
      """Receive message from a topic, as a subscriber
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def receiveWithAcks(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def subscribe(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_SubscriberServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'receive': grpc.unary_stream_rpc_method_handler(
            servicer.receive,
            request_deserializer=SubscriptionRequest.FromString,
            response_serializer=Message.SerializeToString,
        ),
        'receiveWithAcks': grpc.stream_stream_rpc_method_handler(
            servicer.receiveWithAcks,
            request_deserializer=SubscriptionResponse.FromString,
            response_serializer=Message.SerializeToString,
        ),
        'subscribe': grpc.stream_stream_rpc_method_handler(
            servicer.subscribe,
            request_deserializer=SubscriptionAcks.FromString,
            response_serializer=SubscriptionMessage.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'predix.eventhub.Subscriber', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPublisherServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Publisher service definition
    """
    def send(self, request_iterator, context):
      """Send message to topic. Topic name will be in URI
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPublisherStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Publisher service definition
    """
    def send(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Send message to topic. Topic name will be in URI
      """
      raise NotImplementedError()


  def beta_create_Publisher_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('predix.eventhub.Publisher', 'send'): PublishRequest.FromString,
    }
    response_serializers = {
      ('predix.eventhub.Publisher', 'send'): PublishResponse.SerializeToString,
    }
    method_implementations = {
      ('predix.eventhub.Publisher', 'send'): face_utilities.stream_stream_inline(servicer.send),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Publisher_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('predix.eventhub.Publisher', 'send'): PublishRequest.SerializeToString,
    }
    response_deserializers = {
      ('predix.eventhub.Publisher', 'send'): PublishResponse.FromString,
    }
    cardinalities = {
      'send': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'predix.eventhub.Publisher', cardinalities, options=stub_options)


  class BetaSubscriberServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Subscriber service definition
    """
    def receive(self, request, context):
      """Receive message from a topic, as a subscriber
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def receiveWithAcks(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def subscribe(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaSubscriberStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Subscriber service definition
    """
    def receive(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Receive message from a topic, as a subscriber
      """
      raise NotImplementedError()
    def receiveWithAcks(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def subscribe(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()


  def beta_create_Subscriber_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('predix.eventhub.Subscriber', 'receive'): SubscriptionRequest.FromString,
      ('predix.eventhub.Subscriber', 'receiveWithAcks'): SubscriptionResponse.FromString,
      ('predix.eventhub.Subscriber', 'subscribe'): SubscriptionAcks.FromString,
    }
    response_serializers = {
      ('predix.eventhub.Subscriber', 'receive'): Message.SerializeToString,
      ('predix.eventhub.Subscriber', 'receiveWithAcks'): Message.SerializeToString,
      ('predix.eventhub.Subscriber', 'subscribe'): SubscriptionMessage.SerializeToString,
    }
    method_implementations = {
      ('predix.eventhub.Subscriber', 'receive'): face_utilities.unary_stream_inline(servicer.receive),
      ('predix.eventhub.Subscriber', 'receiveWithAcks'): face_utilities.stream_stream_inline(servicer.receiveWithAcks),
      ('predix.eventhub.Subscriber', 'subscribe'): face_utilities.stream_stream_inline(servicer.subscribe),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Subscriber_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('predix.eventhub.Subscriber', 'receive'): SubscriptionRequest.SerializeToString,
      ('predix.eventhub.Subscriber', 'receiveWithAcks'): SubscriptionResponse.SerializeToString,
      ('predix.eventhub.Subscriber', 'subscribe'): SubscriptionAcks.SerializeToString,
    }
    response_deserializers = {
      ('predix.eventhub.Subscriber', 'receive'): Message.FromString,
      ('predix.eventhub.Subscriber', 'receiveWithAcks'): Message.FromString,
      ('predix.eventhub.Subscriber', 'subscribe'): SubscriptionMessage.FromString,
    }
    cardinalities = {
      'receive': cardinality.Cardinality.UNARY_STREAM,
      'receiveWithAcks': cardinality.Cardinality.STREAM_STREAM,
      'subscribe': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'predix.eventhub.Subscriber', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
