{
  "src/components/ApplyTheme.react.js": {
    "description": "",
    "displayName": "ApplyTheme",
    "methods": [],
    "props": {
      "theme": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n    accent: '#1f78b4',\n    traces: ['#1f78b4', '#a6cee3'],\n    text: 'rgb(30, 30, 30)',\n\n    background: 'rgb(254, 254, 254)',\n    backgroundSecondary: '#e9e9e9',\n\n    disabled: 'lightgrey',\n    disabledText: 'rgb(200, 200, 200)',\n    disabledBackground: 'rgb(245, 245, 245)',\n    buttonShadow: 'rgba(50,50,93,.11)',\n\n    border: 'rgb(220, 220, 220)',\n\n\n    textSecondary: 'rgb(200, 200, 200)',\n\n    transparent: 'transparent',\n\n    'tight': true,\n\n    borderRadiusPrimary: 0\n}",
          "computed": false
        }
      },
      "children": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": ""
      },
      "show_editor": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/ExampleComponent.react.js": {
    "description": "ExampleComponent is an example component.\nIt takes a property, `label`, and\ndisplays it.\nIt renders an input with the property `value`\nwhich is editable by the user.",
    "displayName": "ExampleComponent",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this compnent in Dash callbacks"
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "A label that will be printed when this component is rendered."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value displayed in the input"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called whenever any of the\nproperties change"
      }
    }
  },
  "src/components/Graph.react.js": {
    "description": "",
    "displayName": "PlotlyGraph",
    "methods": [
      {
        "name": "plot",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "props",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "mergeTheme",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "fig",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "constructTheme",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "applyTheme",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "bindEvents",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "apply_theme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "apply_theme_trace_colors": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "id": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": ""
      },
      "clickData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest click event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "hoverData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest hover event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "clear_on_unhover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If True, `clear_on_unhover` will clear the `hoverData` property\nwhen the user \"unhovers\" from a point.\nIf False, then the `hoverData` property will be equal to the\ndata from the last point that was hovered over.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selectedData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest select event",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "relayoutData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Data from latest relayout event which occurs\nwhen the user zooms or pans on the plot",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "figure": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Plotly `figure` object. See schema:\nhttps://plot.ly/javascript/reference",
        "defaultValue": {
          "value": "{data: [], layout: {}}",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Generic style overrides on the plot div"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "className of the parent div"
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Beta: If true, animate between updates using\nplotly.js's `animate` function",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "animation_options": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Beta: Object containing animation settings.\nOnly applies if `animate` is `true`",
        "defaultValue": {
          "value": "{\n    frame: {\n        redraw: false\n    },\n    transition: {\n        duration: 750,\n        ease: 'cubic-in-out'\n    }\n}",
          "computed": false
        }
      },
      "config": {
        "type": {
          "name": "shape",
          "value": {
            "staticPlot": {
              "name": "bool",
              "description": "no interactivity, for export or image generation",
              "required": false
            },
            "editable": {
              "name": "bool",
              "description": "we can edit titles, move annotations, etc - sets all pieces of `edits`\nunless a separate `edits` config item overrides individual parts",
              "required": false
            },
            "edits": {
              "name": "shape",
              "value": {
                "annotationPosition": {
                  "name": "bool",
                  "description": "annotationPosition: the main anchor of the annotation, which is the\ntext (if no arrow) or the arrow (which drags the whole thing leaving\nthe arrow length & direction unchanged)",
                  "required": false
                },
                "annotationTail": {
                  "name": "bool",
                  "description": "just for annotations with arrows, change the length and direction of the arrow",
                  "required": false
                },
                "annotationText": {
                  "name": "bool",
                  "required": false
                },
                "axisTitleText": {
                  "name": "bool",
                  "required": false
                },
                "colorbarPosition": {
                  "name": "bool",
                  "required": false
                },
                "colorbarTitleText": {
                  "name": "bool",
                  "required": false
                },
                "legendPosition": {
                  "name": "bool",
                  "required": false
                },
                "legendText": {
                  "name": "bool",
                  "description": "edit the trace name fields from the legend",
                  "required": false
                },
                "shapePosition": {
                  "name": "bool",
                  "required": false
                },
                "titleText": {
                  "name": "bool",
                  "description": "the global `layout.title`",
                  "required": false
                }
              },
              "description": "a set of editable properties",
              "required": false
            },
            "autosizable": {
              "name": "bool",
              "description": "DO autosize once regardless of layout.autosize\n(use default width or height values otherwise)",
              "required": false
            },
            "queueLength": {
              "name": "number",
              "description": "set the length of the undo/redo queue",
              "required": false
            },
            "fillFrame": {
              "name": "bool",
              "description": "if we DO autosize, do we fill the container or the screen?",
              "required": false
            },
            "frameMargins": {
              "name": "number",
              "description": "if we DO autosize, set the frame margins in percents of plot size",
              "required": false
            },
            "scrollZoom": {
              "name": "bool",
              "description": "mousewheel or two-finger scroll zooms the plot",
              "required": false
            },
            "doubleClick": {
              "name": "enum",
              "value": [
                {
                  "value": "false",
                  "computed": false
                },
                {
                  "value": "'reset'",
                  "computed": false
                },
                {
                  "value": "'autosize'",
                  "computed": false
                },
                {
                  "value": "'reset+autosize'",
                  "computed": false
                }
              ],
              "description": "double click interaction (false, 'reset', 'autosize' or 'reset+autosize')",
              "required": false
            },
            "showTips": {
              "name": "bool",
              "description": "new users see some hints about interactivity",
              "required": false
            },
            "showAxisDragHandles": {
              "name": "bool",
              "description": "enable axis pan/zoom drag handles",
              "required": false
            },
            "showAxisRangeEntryBoxes": {
              "name": "bool",
              "description": "enable direct range entry at the pan/zoom drag points\n(drag handles must be enabled above)",
              "required": false
            },
            "showLink": {
              "name": "bool",
              "description": "link to open this plot in plotly",
              "required": false
            },
            "sendData": {
              "name": "bool",
              "description": "if we show a link, does it contain data or just link to a plotly file?",
              "required": false
            },
            "linkText": {
              "name": "string",
              "description": "text appearing in the sendData link",
              "required": false
            },
            "displayModeBar": {
              "name": "enum",
              "value": [
                {
                  "value": "true",
                  "computed": false
                },
                {
                  "value": "false",
                  "computed": false
                },
                {
                  "value": "'hover'",
                  "computed": false
                }
              ],
              "description": "display the mode bar (true, false, or 'hover')",
              "required": false
            },
            "modeBarButtonsToRemove": {
              "name": "array",
              "description": "remove mode bar button by name.\nAll modebar button names at https://github.com/plotly/plotly.js/blob/master/src/components/modebar/buttons.js\nCommon names include:\n - sendDataToCloud\n- (2D): zoom2d, pan2d, select2d, lasso2d, zoomIn2d, zoomOut2d, autoScale2d, resetScale2d\n- (Cartesian): hoverClosestCartesian, hoverCompareCartesian\n- (3D): zoom3d, pan3d, orbitRotation, tableRotation, handleDrag3d, resetCameraDefault3d, resetCameraLastSave3d, hoverClosest3d\n- (Geo): zoomInGeo, zoomOutGeo, resetGeo, hoverClosestGeo\n- hoverClosestGl2d, hoverClosestPie, toggleHover, resetViews",
              "required": false
            },
            "modeBarButtonsToAdd": {
              "name": "array",
              "description": "add mode bar button using config objects",
              "required": false
            },
            "modeBarButtons": {
              "name": "any",
              "description": "fully custom mode bar buttons as nested array,\nwhere the outer arrays represents button groups, and\nthe inner arrays have buttons config objects or names of default buttons",
              "required": false
            },
            "displaylogo": {
              "name": "bool",
              "description": "add the plotly logo on the end of the mode bar",
              "required": false
            },
            "plotGlPixelRatio": {
              "name": "number",
              "description": "increase the pixel ratio for Gl plot images",
              "required": false
            },
            "topojsonURL": {
              "name": "string",
              "description": "URL to topojson files used in geo charts",
              "required": false
            },
            "mapboxAccessToken": {
              "name": "any",
              "description": "Mapbox access token (required to plot mapbox trace types)\nIf using an Mapbox Atlas server, set this option to '',\nso that plotly.js won't attempt to authenticate to the public Mapbox server.",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Plotly.js config options.\nSee https://plot.ly/javascript/configuration-options/\nfor more info.",
        "defaultValue": {
          "value": "{\n    staticPlot: false,\n    editable: false,\n    edits: {\n        annotationPosition: false,\n        annotationTail: false,\n        annotationText: false,\n        axisTitleText: false,\n        colorbarPosition: false,\n        colorbarTitleText: false,\n        legendPosition: false,\n        legendText: false,\n        shapePosition: false,\n        titleText: false\n    },\n    autosizable: false,\n    queueLength: 0,\n    fillFrame: false,\n    frameMargins: 0,\n    scrollZoom: false,\n    doubleClick: 'reset+autosize',\n    showTips: true,\n    showAxisDragHandles: true,\n    showAxisRangeEntryBoxes: true,\n    showLink: false,\n    sendData: true,\n    linkText: 'Edit chart',\n    showSources: false,\n    displayModeBar: 'hover',\n    modeBarButtonsToRemove: [],\n    modeBarButtonsToAdd: [],\n    modeBarButtons: false,\n    displaylogo: true,\n    plotGlPixelRatio: 2,\n    topojsonURL: 'https://cdn.plot.ly/',\n    mapboxAccessToken: null\n}",
          "computed": false
        }
      },
      "dashEvents": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'click'",
              "computed": false
            },
            {
              "value": "'hover'",
              "computed": false
            },
            {
              "value": "'selected'",
              "computed": false
            },
            {
              "value": "'relayout'",
              "computed": false
            },
            {
              "value": "'unhover'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that updates the state tree."
      },
      "dashFireEvent": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Function that fires events"
      }
    }
  }
}