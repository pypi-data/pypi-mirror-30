Metadata-Version: 2.0
Name: pdepy
Version: 1.0.0a1
Summary: A Finite-Difference PDE solver.
Home-page: https://github.com/olivertso/pdepy
Author: Oliver Hung Buo Tso
Author-email: olivertsor@gmail.com
License: UNKNOWN
Keywords: partial-differential-equations finite-difference-method
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Physics
Requires-Python: >=3
Provides-Extra: travis
Provides-Extra: dev
Requires-Dist: numpy (==1.14.2)
Requires-Dist: scipy (==1.0.0)
Provides-Extra: dev
Requires-Dist: flake8 (==3.5.0); extra == 'dev'
Requires-Dist: Fabric3 (==1.13.1.post1); extra == 'dev'
Requires-Dist: isort (==4.2.15); extra == 'dev'
Requires-Dist: nose2 (==0.7.4); extra == 'dev'
Requires-Dist: nose2[coverage_plugin]; extra == 'dev'
Provides-Extra: travis
Requires-Dist: coveralls (==1.2.0); extra == 'travis'

PDEPy
-----

.. image:: https://travis-ci.org/olivertso/pdepy.svg?branch=master
    :target: https://travis-ci.org/olivertso/pdepy

.. image:: https://coveralls.io/repos/github/olivertso/pdepy/badge.svg?branch=master
    :target: https://coveralls.io/github/olivertso/pdepy?branch=master

A python 3 library for solving initial and boundary value problems of some linear partial differential equations using finite-difference methods.

-  Laplace

   -  implicit central

-  Parabolic

   -  explicit central
   -  explicit upwind
   -  implicit central
   -  implicit upwind

-  Wave

   -  explicit
   -  implicit

Examples
--------

::

    >>> import numpy as np
    >>> from pdepy import wave
    >>> x = np.linspace(0, 1., 5)
    >>> y = np.linspace(0, 1., 5)
    >>> d_init = 1.
    >>> init = x * (1-x)
    >>> bound = y * (1-y)
    >>> wave.solve((x, y), (d_init, init, bound, bound), method='e')
    array([[ 0.    ,  0.1875,  0.25  ,  0.1875,  0.    ],
           [ 0.1875,  0.375 ,  0.4375,  0.375 ,  0.1875],
           [ 0.25  ,  0.4375,  0.5   ,  0.4375,  0.25  ],
           [ 0.1875,  0.375 ,  0.4375,  0.375 ,  0.1875],
           [ 0.    ,  0.1875,  0.25  ,  0.1875,  0.    ]])


