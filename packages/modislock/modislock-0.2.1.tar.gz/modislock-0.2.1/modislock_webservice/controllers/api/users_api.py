# coding: utf-8

# Flask and DB
from flask import current_app
from flask_restful import (Resource, reqparse)
from flask_marshmallow import Schema
from flask_security.utils import hash_password
from marshmallow import fields

# Validators
from .decorators import app_required

# Database
from ...models import User, Events
from sqlalchemy.sql.expression import func
from sqlalchemy.exc import IntegrityError, InternalError
from ...extensions import db


class UsersSchema(Schema):
    id = fields.Integer()
    first_name = fields.String()
    last_name = fields.String()
    email = fields.Email()
    is_admin = fields.Boolean()
    last_active = fields.DateTime(format='%Y-%m-%d %H:%M:%S')


user_request = reqparse.RequestParser()

user_request.add_argument('first_name',
                          type=str,
                          required=True,
                          help='No First Name Provided',
                          location='form')
user_request.add_argument('last_name',
                          type=str,
                          required=True,
                          help='No Last Name Provided',
                          location='form')
user_request.add_argument('email',
                          type=str,
                          required=True,
                          help='Valid email for user required',
                          location='form')
user_request.add_argument('is_admin',
                          type=bool,
                          required=False,
                          default=False,
                          help='If user is to be granted administrative privileges',
                          location='form')
user_request.add_argument('password',
                          type=str,
                          required=False,
                          help='If user is to be given administrative access, a password is required',
                          location='form')


class UsersAPI(Resource):
    """Users API manages the creation and modification of system users.

    """

    decorators = [app_required]

    def get(self):
        """

        .. http:get:: /api/v1.0/user/

            Directory of all system users

            **Example Request**

            .. sourcecode:: http

                GET /api/v1.0/user/ HTTP/1.1
                Host: modislock.local
                Accept: application/json, text/javascript

            **Example Response**

             .. sourcecode:: http

                HTTP/1.1 200 OK
                Vary: Accept
                Content-Type: text/javascript

                {
                    "message": {
                        "count": 489
                    },
                    "user": [
                        {
                            "last_active": "2017-07-18 05:31:58",
                            "last_name": "Bob",
                            "email": "jbob@modislab.com",
                            "id": 3,
                            "is_admin": true,
                            "first_name": "Jim"
                        },
                        {
                            "last_active": "2017-07-25 06:48:45",
                            "last_name": "Happy",
                            "email": "shappy@modislab.com",
                            "id": 4,
                            "is_admin": false,
                            "first_name": "Steven"
                        },
                        ...
                        ]
                }

            `count` in the message refer to the number of user records in the returning query
            `last_active` represents with the last validation or denial has occurred
            `is_admin` user has access to the enrollment administration application

            :reqheader Authorization: X-APP-ID / X-APP-PASSWORD or X-APP-TOKEN (Password or Token generated by administration)

            :statuscode 200: No errors have occurred
            :statuscode 403: Credentials missing for api usage
        """
        sub_query = Events.query.with_entities(Events.user_id, func.max(Events.event_time).label('e_time')) \
            .filter_by(event_type='ACCESS') \
            .group_by(Events.user_id) \
            .subquery()

        sys_users = User.query.outerjoin(sub_query, sub_query.c.user_id == User.id) \
            .with_entities(User.id, User.first_name, User.last_name, User.email, User.is_admin,
                           sub_query.c.e_time.label('last_active')) \
            .all()

        return {'message': {'count': len(sys_users)},
                'user': UsersSchema(many=True).dump(sys_users).data}

    def post(self):
        """Add user to system

        .. http:post:: /api/v1.0/user

            **Example Request**

            .. sourcecode:: http

                POST /api/v1.0/user
                Host: modislock.local
                Accept: application/json, text/javascript

            **Example Response**

            .. sourcecode:: http

                HTTP/1.1 200 OK
                Vary: Accept
                Content-Type: text/javascript

                {
                    "message": {
                        "success": "New user id 505 added"
                    },
                    "user": {
                        "email": "mrogers@modislab.com",
                        "is_admin": false,
                        "id": 505,
                        "last_name": "Rogers",
                        "first_name": "Mary"
                    }
                }

            :formparam first_name: The first name of the new user
            :formparam last_name: The last name of the new user
            :formparam email: Email of the user. Must be unique on the system
            :formparam is_admin: true/false if the user is going to have admin privileges
            :formparam password: if `is_admin` is set to **true** a password is required, otherwise optional

            :reqheader Authorization: X-APP-ID / X-APP-PASSWORD or X-APP-TOKEN (Password or Token generated by administration)
            :reqheader Content-Type: application/x-www-form-urlencoded

            :statuscode 201: No errors have occurred and record was created
            :statuscode 400: If the user already exists or required field needed
            :statuscode 403: Credentials missing for api usage
        """
        parser = user_request.copy()
        args = parser.parse_args()

        if args.is_admin is True:
            parser.replace_argument('password',
                                    type=str,
                                    required=True,
                                    help='If user is to be given administrative access, a password is required',
                                    location='form')
            args = parser.parse_args()
            new_user = User(first_name=args.first_name,
                            last_name=args.last_name,
                            email=args.email,
                            is_admin=args.is_admin,
                            password=hash_password(args.password))
        else:
            new_user = User(first_name=args.first_name,
                            last_name=args.last_name,
                            email=args.email)

        db.session.add(new_user)

        try:
            db.session.commit()
        except (InternalError, IntegrityError) as e:
            db.session.rollback()
            current_app.logger.error('Could not add to database: {}'.format(e.args[0]))

            return {'message': {'error': 'User already exists'}}, 400
        else:
            return {'message': {'success': 'New user id {} added'.format(new_user.id)},
                    'user': UsersSchema().dump(new_user).data}, 201


class UserAPI(Resource):
    """Individual user management

    """
    decorators = [app_required]

    def get(self, user_id):
        """
        .. http:get:: /api/v1.0/user/(int:user_id)

            Retrieves record for individual user

            **Example Request**

            .. sourcecode:: http

                GET /api/v1.0/user/301 HTTP/1.1
                Host: modislock.local
                Accept: application/json, text/javascript

            **Example Response**

            .. sourcecode:: http

                HTTP/1.1 200 OK
                Vary: Accept
                Content-Type: text/javascript

                {
                    "message": {
                        "success": ""
                    },
                    "user": {
                        "last_name": "Fitzgerald",
                        "last_active": "2017-07-14 08:23:13",
                        "is_admin": false,
                        "first_name": "Amy",
                        "email": "amy_fitzgerald@modislab.com",
                        "id": 301
                    }
                }

            :param user_id: ID number of user

            :formparam first_name: The first name of the new user
            :formparam last_name: The last name of the new user
            :formparam email: Email of the user. Must be unique on the system
            :formparam is_admin: true/false if the user is going to have admin privileges
            :formparam password: if `is_admin` is set to **true** a password is required, otherwise optional

            :reqheader Authorization: X-APP-ID / X-APP-PASSWORD or X-APP-TOKEN (Password or Token generated by administration)
            :reqheader Content-Type: application/x-www-form-urlencoded

            :statuscode 200: No errors have occurred
            :statuscode 403: Credentials missing for api usage
            :statuscode 404: User not found
        """
        sub_query = Events.query.with_entities(Events.user_id, func.max(Events.event_time).label('e_time')) \
            .filter_by(event_type='ACCESS') \
            .group_by(Events.user_id) \
            .subquery()

        sys_users = User.query.outerjoin(sub_query, sub_query.c.user_id == User.id) \
            .with_entities(User.id, User.first_name, User.last_name, User.email, User.is_admin,
                           sub_query.c.e_time.label('last_active')).filter(User.id == user_id) \
            .one_or_none()

        if sys_users is None:
            return {'message': {'error': 'User id {} not found'.format(user_id)}}, 404

        return {'message': {'success': ''},
                'user': UsersSchema().dump(sys_users).data}

    def put(self, user_id):
        """Update Record of individual user

         .. http:put:: /api/v1.0/key/(int:user_id)

            **Example Request**

            .. sourcecode:: http

                PUT /api/v1.0/user/505
                Host: modislock.local
                Accept: application/json, text/javascript

            **Example Response**

            .. sourcecode:: http

                HTTP/1.1 201 OK
                Vary: Accept
                Content-Type: text/javascript

                {
                    "message": {
                        "success": "Updated record for user id 505",
                        "user": {
                            "is_admin": false,
                            "last_name": "Rogers1",
                            "email": "mrogers1@happy.com",
                            "first_name": "Mary1",
                            "id": 505
                        }
                    }
                }

            :param user_id: User ID number

            :formparam protocol: The protocol that will be enrolled (`pin`, `rfid`, `otp`, `totp`, `u2f`)
            :formparam enable: true / false

            :reqheader Authorization: X-APP-ID / X-APP-PASSWORD or X-APP-TOKEN (Password or Token generated by administration)
            :reqheader Content-Type: application/x-www-form-urlencoded

            :statuscode 201: No errors have occurred and record was updated
            :statuscode 404: User not found
            :statuscode 500: Error in updating database
            :statuscode 403: Credentials missing for api usage
        """
        parser = user_request.copy()
        args = parser.parse_args()

        if args.is_admin is True:
            parser.replace_argument('password',
                                    type=str,
                                    required=True,
                                    help='If user is to be given administrative access, a password is required',
                                    location='form')

        args = parser.parse_args()

        edit_user = User.query.filter_by(id=int(user_id)).one_or_none()

        if edit_user is None:
            return {'message': {'error': 'User id {} not found'.format(user_id)}}, 404

        edit_user.last_name = args.last_name
        edit_user.first_name = args.first_name
        edit_user.email = args.email
        edit_user.is_admin = args.is_admin
        edit_user.password = '' if args.password is None else hash_password(args.password)

        try:
            db.session.commit()
        except (InternalError, IntegrityError) as e:
            current_app.logger.error('Could not update database: {}'.format(e.args[0]))
            db.session.rollback()
            return {'message': {'error': 'unable to update database'}}, 500

        return {'message': {'success': 'Updated record for user id {}'.format(edit_user.id),
                            'user': UsersSchema().dump(edit_user).data}}, 201

    def delete(self, user_id):
        """Deletes a user

        .. http:delete:: /api/v1.0/user/(int:user_id)

            **Example Request**

            .. sourcecode:: http

                DELETE /api/v1.0/user/505
                Host: modislock.local
                Accept: application/json, text/javascript

            **Example Response**

            .. sourcecode:: http

                HTTP/1.1 204 OK
                Vary: Accept
                Content-Type: text/javascript

                { empty }

            :param user_id: User ID number

            :reqheader Authorization: X-APP-ID / X-APP-PASSWORD or X-APP-TOKEN (Password or Token generated by administration)

            :statuscode 204: No errors have occurred and record was created
            :statuscode 403: Credentials missing for api usage
            :statuscode 404: Could not find user
            :statuscode 500: Unable to update database
        """
        if user_id == 1:
            return {'message': {'error': 'Cannot delete primary administrative user'}}

        del_user = User.query.filter_by(id=user_id).one_or_none()

        if del_user is not None:
            db.session.delete(del_user)
            try:
                db.session.commit()
            except (InternalError, IntegrityError) as e:
                db.session.rollback()
                current_app.logger.error('Count not delete record from database: {}'.format(e.args[0]))
                return {'message': {'error': 'Unable to delete user id {}'.format(user_id)}}, 500
            else:
                return {}, 204
        else:
            return {'message': {'error': 'User id {} was not found'.format(user_id)}}, 404
