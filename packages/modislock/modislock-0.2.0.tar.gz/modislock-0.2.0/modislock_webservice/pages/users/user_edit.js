"use strict";

/**
 * User Edit
 */

var current_row = null;
var key_table = null;
var key_detail_table = null;


/**
 * @brief Generates a random base32 Webstring for TOTP codes
 * @returns {string}
 */
function gen_totp_secret() {
    var base32chars = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','2','3','4','5','6','7'];
    var ret_secret = "";

    for (var i = 0; i < 16; i++) {
        ret_secret += base32chars[Math.floor(Math.random() * base32chars.length)];
    }

    return ret_secret;
}


/**
 * @brief Generates informational error codes for u2f
 * @param error_code
 */
function generate_u2f_error(error_code){
    var err = '<div class="row text-left">\n' +
        '           <div class="col-md-12">\n';

    switch(error_code){
        case 1:
            err += '<h4>OTHER_ERROR</h4>\n' +
                '<p>An error otherwise not enumerated here.</p>\n';
            break;
        case 2:
            err += '           <h4>BAD_REQUEST</h4>\n' +
                '              <p>One of the following reasons:</p>\n' +
                '              <ul>\n' +
                '                  <li>The visited URL doesn’t match the App ID</li>\n' +
                '                  <li>The App ID does not conform with the rules for App ID’s</li>\n' +
                '                  <li>The U2F API is called with bad parameters (e.g. calling u2f.register with the parameters in the wrong order)</li>\n' +
                '              </ul>\n';
            break;
        case 3:
            err += '<h4>CONFIGURATION_UNSUPPORTED</h4>\n' +
                '<p>Client configuration is not supported.</p>\n';
            break;
        case 4:
            err += '<h4>DEVICE_INELIGIBLE</h4>\n' +
                '<p>The presented device is not eligible for this request. For a registration request this may mean that the token is already registered, and for a sign request it may mean that the token does not know the presented key handle.</p>\n';
            break;
        case 5:
            err += '<h4>TIMEOUT</h4>\n' +
                '<p>Timeout reached before request could be satisfied.</p>\n';
            break;
    }

    err += '       </div>\n</div>\n';

   return err;
}


/**
 * @brief Generate summary at end of successful enrollment
 * @param protocol
 * @param key
 * @param user
 * @returns {string}
 */
function generate_summary(protocol, key, user){
    var sum = '<div class="row text-center">\n' +
        '        <div class="col-md-12">\n' +
        '            <h3>The Following <strong>' + protocol + '</strong> Key</h3>\n' +
        '            <h2><strong>' + key + '</strong></h2>\n' +
        '            <h3>Is to be issued to <strong>' + user + '</strong></h3>\n' +
        '            <br>\n' +
        '            <label for="notify_user" class="btn btn-primary">Notify User of Details<input type="checkbox" id="notify_user" class="badgebox"><span class="badge">&check;</span></label>' +
        '        </div>\n' +
        '    </div>';

    return sum;
}


/**
 * @brief Generates the PIN enrollment wizard
 * @param wizard
 * @param code
 */
function generate_pin(wizard, code){
    wizard.steps('add', {
        title: 'Confirm',
        content: '<div class="row">\n' +
        '           <div class="col-md-6">\n' +
        '               <h2>Generated PIN:</h2>\n' +
        '               <input type="number" class="form-control text-center" id="key" value="' + code +
        '" disabled size="10" maxlength="10" style="font-size:25px;">\n' +
        '               <p style="display: none" class="text-danger small" id="warning"></p>\n' +
        '           </div>\n' +
        '           <div class="col-md-6">\n' +
        '               <div class="panel panel-success">\n' +
        '                   <div class="panel-heading">Help</div>\n' +
        '                   <div class="panel-body">\n' +
        '                       <section>\n' +
        '                           <h4>PIN Code Generation</h4>\n' +
        '                           <p>This PIN code was generated by the system and is <strong>guaranteed</strong> to be unique</p>\n' +
        '                       </section>\n' +
        '                       <section class="bg-warning">\n' +
        '                           <p><i>* Length of PIN can be changed in security settings</i></p>' +
        '                       </section>\n' +
        '                   </div>\n' +
        '               </div>\n'+
        '           </div>\n' +
        '       </div>\n'
    }).steps('add', {
        title: 'Enroll',
        content: '<div id="summary"></div>'
    });
}


/**
 * @brief Generates the RFID enrollment wizard
 * @param wizard
 */
function generate_rfid(wizard){
    wizard.steps('add', {
        title: 'Enter RFID',
        content: '<div class="row">\n' +
        '           <div class="col-md-6">\n' +
        '               <h4>Enter the RFID Key</h4>\n' +
        '               <input type="text" class="form-control text-center" id="key" placeholder="RFID CODE" size="24" maxlength="24" style="font-size:25px;">\n' +
        '               <span class="help-block">example: 8A:4C:11:F0:12</span>\n' +
        '               <p style="display: none" class="text-danger small" id="warning">RFID code length should be greater 5 and less than 24 digits</p>\n' +
        '           </div>\n' +
        '           <div class="col-md-6">\n' +
        '               <div class="panel panel-success">\n' +
        '                   <div class="panel-heading">Help</div>\n' +
        '                   <div class="panel-body">\n' +
        '                       <section>\n' +
        '                           <h4>RFID Code Entry</h4>\n' +
        '                           <p>RFID codes are entered manually or with a desktop RFID reader. An NFC-enabled smartphone or desktop reader can read the code for manual entry.</p>\n' +
        '                           <p>The RFID code should entered in <strong>hexadecimal</strong> form with or without <strong>:</strong> separators.</p>\n' +
        '                       </section>' +
        '                       <section>\n' +
        '                           <h4>Suggested Apps</h4>\n' +
        '                           <p><a href="https://play.google.com/store/apps/details?id=com.wakdev.wdnfc&hl=en" target="_blank">NFC Tools</a></p>' +
        '                       </section>\n' +
        '                   </div>\n' +
        '               </div>\n' +
        '           </div>\n' +
        '       </div>\n'
    }).steps('add', {
        title: 'Enroll',
        content: '<div id="summary"></div>'
    });
}


/**
 * @brief Generates the TOTP enrollment wizard
 * @param wizard
 * @param code
 */
function generate_totp(wizard, code){
    wizard.steps('add', {
        title: 'Confirm',
        content: '<div class="row">\n' +
        '           <div class="col-md-6">\n' +
        '               <h2>Generated PIN:</h2>\n' +
        '               <input type="number" class="form-control text-center" id="key" value="' + code +
        '" disabled size="10" maxlength="10" style="font-size:25px;">\n' +
        '               <p style="display: none" class="text-danger small" id="warning">Error in PIN code generation</p>\n' +
        '           </div>\n' +
        '           <div class="col-md-6">\n' +
        '               <div class="panel panel-success">\n' +
        '                   <div class="panel-heading">Help</div>\n' +
        '                   <div class="panel-body">\n' +
        '                       <section>\n' +
        '                           <h4>PIN Code Generation</h4>\n' +
        '                           <p>This PIN code was generated by the system and is <strong>guaranteed</strong> to be unique</p>\n' +
        '                       </section>\n' +
        '                       <section class="bg-warning">\n' +
        '                           <p><i>* Length of PIN can be changed in security settings</i></p>' +
        '                       </section>\n' +
        '                   </div>\n' +
        '               </div>\n'+
        '           </div>\n' +
        '         </div>\n'
    }).steps('add', {
        title: 'Scan or Enter',
        content: '<div class="row">\n' +
        '               <div class="col-md-6">\n' +
        '                   <div id="key2"></div>\n' +
        '               </div>\n' +
        '               <div class="col-md-6">\n' +
        '                   <div class="panel panel-success">\n' +
        '                       <div class="panel-heading">Help</div>\n' +
        '                       <div class="panel-body">\n' +
        '                           <section>\n' +
        '                               <h4>Scan or Enter Code</h4>\n' +
        '                               <p>The code can be scanned by the application via QR Code or can be manually entered from the code below the QR Code.</p>' +
        '                               <h4>Example TOTP Applications</h4>\n' +
        '                               <ul>\n' +
        '                                   <li><a href="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en" target="_blank">Google Authenticator</a></li>\n' +
        '                                   <li><a href="https://play.google.com/store/apps/details?id=org.fedorahosted.freeotp&hl=en" target="_blank">FreeOTP Authenticator</a></li>\n' +
        '                               </ul>\n' +
        '                           </section>\n' +
        '                       </div>\n' +
        '                   </div>\n' +
        '               </div>\n' +
        '           </div>\n'
    }).steps('add', {
        title: 'Enroll',
        content: '<div id="summary"></div>'
    });
}


/**
 * @brief Generates the OTP enrollment wizard
 * @param wizard
 */
function generate_otp(wizard){
    wizard.steps('add', {
        title: 'Choose Validation',
        content: '<div class="row text-center">\n' +
        '           <div class="col-md-6">\n' +
        '               <h3>Choose your Validation Service</h3>\n' +
        '               <div class="funkyradio">\n' +
        '                   <div class="funkyradio-primary">\n' +
        '                       <input type="radio" name="radio" id="radio-local" checked/>\n' +
        '                       <label for="radio-local">Local Service</label>\n' +
        '                   </div>\n' +
        '                   <div class="funkyradio-warning">\n' +
        '                       <input type="radio" name="radio" id="radio-cloud"/>\n' +
        '                       <label for="radio-cloud">Yubico Cloud Service</label>\n' +
        '                   </div>\n' +
        '               </div>\n' +
        '               <p style="display: none" class="text-danger small" id="cloud_warning">Requires a dependable internet connection!</p>\n' +
        '           </div>\n' +
        '           <div class="col-md-6">\n' +
        '               <div class="panel panel-success">\n' +
        '                   <div class="panel-heading">Help</div>\n' +
        '                   <div class="panel-body">\n' +
        '                       <section>\n' +
        '                           <h4>Local Service</h4>\n' +
        '                           <p>Validation service will be provided locally, even without an active internet connection.</p>\n\n' +
        '                           <h4>Yubico Cloud Service</h4>\n' +
        '                           <p>Validation service will be provided by remote Yubico cloud services.  However, it <b>cannot</b> function without an active internet connection.</p>\n' +
        '                       </section>' +
        '                   </div>\n' +
        '               </div>\n' +
        '           </div>\n' +
        '         </div>\n'
    }).steps('add', {
        title: 'Register Key',
        content: '<div class="row">\n' +
        '        <div class="col-md-6 text-center">\n' +
        '            <p style="display: none" class="text-danger small" id="warning">Missing Required Inputs</p>\n' +
        '            <div id="local">\n' +
        '                <h4>Generated Key</h4>\n' +
        '                <input class="form-control text-center" id="key" placeholder="OTP Token" size="50"/>\n' +
        '                <h4>Register the AES Key</h4>\n' +
        '                <input class=\'form-control text-center\' id="key2" placeholder="AES Token" size="50"/>\n' +
        '            </div>\n' +
        '            <div id="cloud" style="display: none;">\n' +
        '                <h4>Generated Key</h4>\n' +
        '                <input class="form-control text-center" id="ckey" placeholder="OTP Token" size="50"/>\n' +
        '                <h4>Yubico User ID <p class="small"></p></h4>\n' +
        '                <input class="form-control text-center" id="ckey2" placeholder="User ID" size="25"/>\n' +
        '                <h4>Yubico Secret <p class="small"><i>*optional</i></p></h4>\n' +
        '                <input class="form-control text-center" id="ckey3" placeholder="Secret" size="25"/>\n' +
        '            </div>\n' +
        '        </div>\n' +
        '        <div class="col-md-6">\n' +
        '            <div class="panel panel-success">\n' +
        '                <div class="panel-heading">Help</div>\n' +
        '                <div class="panel-body" id="local_help">\n' +
        '                    <section>\n' +
        '                        <h4>OTP Token</h4>\n' +
        '                        <p>Click into the input box and then press the gold key on the Yubikey</p>\n' +
        '                    </section>\n' +
        '                    <section>\n' +
        '                        <h4>AES Token</h4>\n' +
        '                        <p>Using the <a href="https://www.yubico.com/products/services-software/personalization-tools/use/" target="_blank">Yubico Personalization Tool</a>, generate a new AES key and paste here</p>\n' +
        '                    </section>\n' +
        '                </div>\n' +
        '                <div class="panel-body" id="cloud_help" style="display: none;">\n' +
        '                    <section>\n' +
        '                        <h4>OTP Token</h4>\n' +
        '                        <p>Click into the input box and then press the gold key on the Yubikey</p>\n' +
        '                    </section>\n' +
        '                    <section>\n' +
        '                        <h4>User ID</h4>\n' +
        '                        <p>Optional User ID used with Yubico cloud service</p>\n' +
        '                    </section>\n' +
        '                    <section>\n' +
        '                        <h4>Secret</h4>\n' +
        '                        <p>Optional secret used with Yubico cloud service</p>\n' +
        '                    </section>\n' +
        '                    <section>\n' +
        '                        <h5><strong><i>API Access</i></strong></h5>\n' +
        '                        <p>To obtain a API key from Yubico, you can enroll here: <a href="https://upgrade.yubico.com/getapikey/" target="_blank">Yubico Get API Key</a></p>\n' +
        '                    </section>\n' +
        '                </div>\n' +
        '            </div>\n' +
        '        </div>\n' +
        '    </div>'
    }).steps('add', {
        title: 'Enroll',
        content: '<div id="summary"></div>'
    });
}


/**
 * @brief Generates the U2F enrollment wizard
 * @param wizard
 * @param code
 */
function generate_u2f(wizard, code){
    wizard.steps('add', {
        title: 'Confirm',
        content: '<div class="row text-center">\n' +
        '           <div class="col-md-6">\n' +
        '               <h2>Generated PIN:</h2>\n' +
        '               <input type="number" class="form-control text-center" id="key" value="' + code +
        '" disabled size="10" maxlength="10" style="font-size:25px;">\n' +
        '               <p style="display: none" class="text-danger small" id="warning">Error in PIN code generation</p>\n' +
        '           </div>\n' +
        '           <div class="col-md-6">\n' +
        '               <div class="panel panel-success">\n' +
        '                   <div class="panel-heading">Help</div>\n' +
        '                   <div class="panel-body">\n' +
        '                       <section>\n' +
        '                           <h4>PIN Code Generation</h4>\n' +
        '                           <p>This PIN code was generated by the system and is <strong>guaranteed</strong> to be unique</p>\n' +
        '                       </section>\n' +
        '                       <section class="bg-warning">\n' +
        '                           <p><i>* Length of PIN can be changed in security settings</i></p>' +
        '                       </section>\n' +
        '                   </div>\n' +
        '               </div>\n'+
        '           </div>\n' +
        '         </div>\n'
    }).steps('add', {
        title: 'Key Challenge',
        content: '<div class="row text-center">\n' +
        '               <div class="col-md-6">\n' +
        '                   <div id="key2"></div>\n' +
        '               </div>\n' +
        '               <div class="col-md-6">\n' +
        '                   <div class="panel panel-success">\n' +
        '                       <div class="panel-heading">Help</div>\n' +
        '                       <div class="panel-body">\n' +
        '                           <p class="h6">Press the flashing button on your key</p>\n' +
        '                           <img src="/static/img/YubicoU2FKey.png">' +
        '                       </div>\n' +
        '                   </div>\n' +
        '               </div>\n' +
        '           </div>\n'
    }).steps('add', {
        title: 'Enroll',
        content: '<div id="summary"></div>'
    });
}


/**
 * @brief Generates the registration wizard
 * @param protocol
 */
function generate_wizard(protocol){
    var app_regisration = null;

    for(var i = 0; i < 4; i++){
        try {
            $('#enroll_wizard').steps('remove', i);
        } catch(err){
            console.log('no step');
        }
    }

    try{
        $('#enroll_wizard').steps('destroy');
    } catch(err){
        console.log('Not existing wizard');
    }

    $('#enroll_wizard').empty();

    var wizard = $('#enroll_wizard').steps({
        enableCancelButton: true,           // Enable the cancellation of the wizard
        forceMoveForward: true,
        cssClass: 'wizard wizard-big',
        /* Events */
        onStepChanging: function(event, currentIndex, newIndex){
            if(newIndex === 1){
                if(protocol === 'pin' || protocol === 'totp' || protocol === 'u2f'){
                    if(!($('#key').val().length > 3)){
                        $('#warning').show();
                        setTimeout(function(){
                            $('#warning').hide();
                        }, 3000);
                        return false;
                    }

                    if(protocol === 'u2f') {
                        $.ajax({
                            url: '/users/gen_challenge'
                        }).done(function(response){
                            /* Challenge the U2F key
                             * Can timeout after 30 seconds */
                            var timeleft = 30;
                            var downtime = setInterval(function(){
                                $('#key2').html('<h1>' + --timeleft + '</h1>');
                                if(timeleft <= 0) {
                                    clearInterval(downtime);
                                    // $('#key2').html('<h2>Timeout Error</h2>');
                                }
                            }, 1000);

                            u2f.register(response.appID,
                                [{ version: 'U2F_V2', challenge: response.challenge } ],
                                [],
                                function(response){
                                    clearInterval(downtime);

                                    if(response.errorCode){
                                        $('#key2').html(generate_u2f_error(response.errorCode));
                                    } else {
                                        app_regisration = response.registrationData;
                                        $('#key2').html('<pre>' +
                                            '<strong>Challenge:</strong>' +
                                            '<p>' + response.challenge +'</p>' +
                                            '<strong>Client Data:</strong>' +
                                            '<p>' + response.clientData + '</p>' +
                                            '<strong>Registration:</strong>' +
                                            '<p>' + response.registrationData + '</p>' +
                                            '</pre>');
                                    }
                                });
                        });
                    }
                } else if(protocol === 'rfid'){
                    var key_val = $('#key').val();
                    var re = /^([0-9A-Fa-f]{2,}(?::?)){4,}$/g;

                    if( !key_val.length >= 6 || !re.test(key_val)) {
                        $('#warning').show();

                        setTimeout(function(){
                            $('#warning').hide();
                        }, 3000);

                        return false;
                    } else {
                        key_val = key_val.replace(/:/g, '');
                        $('#key').val(key_val);

                        return true;
                    }
                } else if(protocol === 'otp'){
                    if($('#radio-local').is(':checked')){
                        $('#local').show();
                        $('#local_help').show();
                        $('#cloud').hide();
                        $('#cloud_help').hide();
                    } else {
                        $('#local').hide();
                        $('#local_help').hide();
                        $('#cloud').show();
                        $('#cloud_help').show();
                    }
                }

                return true;
            } else if(newIndex === 2){
                if(protocol === 'totp'){
                    // TODO Validate
                    console.log('validate totp');
                    console.log($('#key2').children('p.h4').html());
                } else if(protocol === 'u2f'){
                    console.log('validate u2f');
                } else if(protocol === 'otp' ){
                    var otp_len = 0;

                    if($('#radio-local').is(':checked')){
                        otp_len = $('#key').val().length;

                        if($('#key2').val().length < 32 ){
                            $('#warning').show();
                            setTimeout(function(){
                                $('#warning').hide();
                            }, 3000);

                            return false;
                        }
                    } else {
                        var k_secret = $('#ckey3').val();
                        var k_user = $('#ckey2').val();

                        otp_len = $('#ckey').val().length;

                        // Test yubico user id
                        if(k_user.length < 5){
                            $('#warning').show();
                            setTimeout(function(){
                                $('#warning').hide();
                            }, 3000);

                            return false;
                        }

                        // Test yubico secret if provided
                        if(k_secret.length > 0){
                            var base64regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
                            // Test for base 64 code compatibility
                            if(base64regex.test(k_secret) === false ){
                                $('#warning').show();
                                setTimeout(function(){
                                    $('#warning').hide();
                                }, 3000);

                                return false;
                            }
                        }
                    }

                    if( otp_len < 43 || otp_len > 50 ) {
                        $('#warning').show();
                        setTimeout(function(){
                            $('#warning').hide();
                        }, 3000);

                        return false;
                    }
                }

                return true;
            }
        },
        onStepChanged: function (event, currentIndex, priorIndex) {
            if(currentIndex === 1){
                if(protocol === 'totp'){
                    var result = gen_totp_secret();
                    $('#key2').html('<object id="totp_qrcode" data="' + '/users/' + $('.modal-title').html() +
                        '/' + result +'.svg" type="image/svg+xml"></object>' + '<p class="h4">' + result + '</p>');
                    return true;
                } else if(protocol === 'pin' || protocol === 'rfid'){
                    $('#summary').html(generate_summary(protocol.toUpperCase(), $('#key').val(), $('.modal-title').html().split(':')[1]));
                }

            } else if(currentIndex === 2){
                if(protocol === 'totp' || protocol === 'u2f'){
                    $('#summary').html(generate_summary(protocol.toUpperCase(), $('#key').val(), $('.modal-title').html().split(':')[1]));
                } else if(protocol === 'otp'){
                    if($('#radio-local').is(':checked')) {
                        $('#summary').html(generate_summary(protocol.toUpperCase(), $('#key').val().substring(0,12), $('.modal-title').html().split(':')[1]));
                    } else {
                        $('#summary').html(generate_summary(protocol.toUpperCase(), $('#ckey').val().substring(0,12), $('.modal-title').html().split(':')[1]));
                    }
                }
            }
            return true;
        },
        onCanceled: function(event) {
            $('#enroll_modal').modal('toggle');
        },
        onFinishing: function (event, currentIndex) {
            var params = {
                type: "POST",
                protocol: protocol,
                user_id: $('.modal-title').html().split(':')[0],
                key: $('#key').val()
            };

            if(protocol === 'otp'){
                params.key2 = $('#key2').val().replace(/\s/g, "");

                if($('#radio-cloud').is(':checked')){
                    params.key = $('#ckey').val();
                    params.key2 = $('#ckey2').val();
                    params.key3 = $('#ckey3').val();
                } else {
                    params.key3 = 'local'
                }
            } else if(protocol === 'totp'){
                params.key2 = $('#key2').children('p.h4').html();
            } else if(protocol === 'u2f'){
                params.key2 = app_regisration;
            } else if(protocol === 'rule'){

            }

            key_access(params, function(msg){
                key_table.ajax.reload();

                if($('#notify_user').is(':checked')){
                    $.ajax({
                        'url': '/users/keys/notify/' + $('.modal-title').html().split(':')[0] + '/' + protocol
                    });
                }
            });

            return true;
        },
        onFinished: function (event, currentIndex) {
            $('#enroll_modal').modal('toggle');
            // key_table.ajax.reload();
        }
    });

    if(protocol === 'pin'){
        generate_unique_id(function(msg){
            if(msg.code){
                generate_pin(wizard, msg.code);
            } else {
                generate_pin(wizard, 0);
            }
        });
    } else if(protocol === 'rfid'){
        generate_rfid(wizard);
    } else if(protocol === 'otp'){
        generate_otp(wizard);
        $('#radio-cloud').click(function() {
            $('#cloud_warning').show();
            setTimeout(function(){
                $('#cloud_warning').hide();
            }, 5000);
        });
    } else if(protocol === 'totp'){
        generate_unique_id(function(msg){
            if(msg.code){
                generate_totp(wizard, msg.code);
            } else {
                generate_totp(wizard, 0);
            }
        });
    } else if(protocol === 'u2f'){
        generate_unique_id(function(msg){
            if(msg.code){
                generate_u2f(wizard, msg.code);
            } else {
                generate_u2f(wizard, 0);
            }
        });
    } else if(protocol === 'rule'){
        generate_rule(wizard);
    }
}

/**
 * @brief format the protocols table
 * @param table_id
 * @returns {string}
 */
function format(table_id){
    var table = '<table id="' + table_id + '", class="table" width="100%">\n' +
        '   <thead>\n' +
        '       <tr>\n' +
        '           <th>PIN</th>\n' +
        '           <th>RFID</th>\n' +
        '           <th>OTP</th>\n' +
        '           <th>TOTP</th>\n' +
        '           <th>U2F</th>\n' +
        '       </tr>\n' +
        '   </thead>\n' +
        '</table>\n';
    return table;
}

/**
 * @brief format the keys edit table
 * @param table_id
 * @returns {string}
 */
function format_keys(table_id){
    var table = '<table id="' + table_id + '", class="table" width="100%">\n' +
        '   <thead>\n' +
        '       <tr>\n' +
        '           <th>User ID</th>\n' +
        '           <th>Key Code</th>\n' +
        '           <th>Created On</th>\n' +
        '           <th></th>\n' +
        '           <th>Actions</th>\n' +
        '           <th></th>\n' +
        '       </tr>\n' +
        '   </thead>\n' +
        '</table>\n';
    return table;
}

/**
 * @brief format the buttons that appear in the enroll / edit table
 * @param btn_name
 * @param enable
 * @returns {string}
 */
function format_buttons(btn_name, enable){
    var btn = enable ? '<button class="btn-xs btn-primary" type="button">' +
        '<i class="fa fa-edit"></i>&nbsp' + btn_name + ' Edit</button>' :
        '<button class="btn-xs btn-default" type="button">' +
        '<i class="fa fa-plus-square-o">' +
        '</i>&nbsp' + btn_name + ' Enroll</button></p>';

    return btn
}

/**
 * @brief generates the enroll / edit tables
 * @param row
 */
function generate_data_table(row){
    var table_name = 'subtable' + row.data().id;

    /* Add the table to the row child */
    row.child(format(table_name)).show();
    /* Create the datatable from the newly added row */
    key_table = $('table#' + table_name).DataTable({
        ordering: false,
        info: false,
        paging: false,
        searching: false,
        responsive: true,
        orderable: false,
        ajax: {
            url: '/users/keycount/' + row.data().id
        },
        columnDefs: [
            {
                // Generic all targets
                className: 'text-center',
                targets: '_all'
            }
        ],
        columns:[
            {
                data: null,
                render: function(data, type, row) {
                    return format_buttons('PIN', data.pin);
                }
            },
            {
                data: null,
                render: function(data, type, row){
                    return format_buttons('RFID', data.rfid);
                }
            },
            {
                data: null,
                render: function(data, type, row){
                    return format_buttons('OTP', data.otp);
                }
            },
            {
                data: null,
                render: function(data, type, row){
                    return format_buttons('TOTP', data.totp);
                }
            },
            {
                data: null,
                render: function(data, type, row){
                    return format_buttons('U2F', data.u2f);
                }
            }
        ]
    }).on('click', 'button', function(evt){
        var tr = $(this).closest('tr');
        var detail_row = key_table.row(tr);
        var protocol = evt.currentTarget.innerText.split(" ")[0].toLowerCase().replace(/\s+/g, '');

        if(evt.currentTarget.innerText.indexOf('Edit') !== -1){
            var key_detail_table_name = 'keytable' + row.data().id;

            tr.addClass('shown');
            detail_row.child(format_keys(key_detail_table_name)).show();

            key_detail_table = $('table#' + key_detail_table_name).DataTable({
                ordering: false,
                info: false,
                paging: false,
                searching: false,
                responsive: true,
                orderable: false,
                ajax: {
                    url: '/users/keys/' + row.data().id + '/' + protocol
                },
                columnDefs: [
                    // Column 0 is ID, don't show. Column 3 is the admin.
                    {
                        visible: false,
                        targets: [0]
                    },
                    // Generic all targets
                    {
                        className: 'text-center',
                        orderable: false,
                        targets: '_all'
                    }
                ],
                columns: [
                    {
                        data: null
                    },
                    {
                        data: null,
                        render: function(data, type, row){
                            return '<strong>' + data.key + '</strong>';
                        }
                    },
                    {
                        data: null,
                        render: function(data, type, row){
                            return moment(data.created_on).format('YYYY-MM-DD');
                        }
                    },
                    {
                        data: null,
                        width: '12%',
                        render: function(data, type, row){
                            var enabled = (data.enabled === true) ? "checked" : "";
                            return '<input id="key_enable" type="checkbox" data-toggle="toggle" ' + enabled + ' >';
                        }
                    },
                    {
                        data: null,
                        width: '12%',
                        defaultContent: '<button type="button" class="btn btn-primary btn-xs" style="width: 80px;" ' +
                        'id="key_notify">EMAIL USER</button>'
                    },
                    {
                        data: null,
                        width: '12%',
                        defaultContent: '<button type="button" class="btn btn-info btn-xs" style="width: 80px;" ' +
                        'id="key_delete">DELETE KEY</button>'
                    }
                ]
            }).on('init.dt', function(){
                $('#key_delete').confirmation({
                    btnOkClass: 'btn-xs btn-info',
                    onConfirm: function(){
                        var detail_row = key_detail_table.row($(this).closest('tr'));
                        // var user_temp = detail_row.data();

                        $.ajax({
                            url: '/users/keys/' + detail_row.data().user_id + '/' + detail_row.data().protocol,
                            type: 'DELETE'
                        }).done(function(msg){
                            //key_detail_table.destroy();
                            //$(this).closest('tr').removeClass('shown');
                            detail_row.child(false).remove();
                            key_table.ajax.reload();
                            toastr.success('Deleted Key', 'KEY')
                        });
                    }
                });

                $('#key_notify').click(function(){
                    var detail_row = key_detail_table.row($(this).closest('tr'));

                    $.ajax({
                       url: '/users/keys/notify/' + detail_row.data().user_id + '/' + detail_row.data().protocol
                    }).done(function(msg){
                        toastr.success('Sent!', 'EMAIL');
                    });
                });

                $('#key_enable').bootstrapToggle({
                    on: 'Enabled',
                    off: 'Disabled',
                    size: 'mini',
                    onstyle: 'success',
                    offstyle: 'danger',
                    width: 80
                }).change(function(evt){
                    var detail_row = key_detail_table.row($(this).closest('tr'));
                    var prev_state = evt.currentTarget.checked;

                    $.ajax({
                        url: '/users/keys/' + detail_row.data().user_id + '/' + detail_row.data().protocol,
                        type: 'PUT'
                    }).done(function (msg) {
                        var enable = (prev_state === false ) ? 'Disabled' : 'Enabled';
                        toastr.success(enable, 'KEY');
                    });
                });
            });
        } else if(evt.currentTarget.innerText.indexOf('Enroll') !== -1){
            if(key_detail_table !== null){
                key_detail_table.destroy();
                tr.removeClass('shown');
                detail_row.child(false).remove();
            }
            $('.modal-title').html(row.data().id + ': ' + row.data().first_name + ' ' + row.data().last_name);
            // $('#' + protocol + 'Modal').modal('toggle');
            generate_wizard(protocol);
            $('#enroll_modal').modal('toggle');
        }
    });
}


(function(){
    var MAX_NAME_LEN = 20;
    var MAX_PWD_LEN  = 40;
    var MAX_MAIL_LEN = 50;

    // Edit functions for the users table
    var user_editor = new $.fn.dataTable.Editor({
        table: "#userTable",
        idSrc: 'id',
        ajax: {
            create: {
                type: 'POST',
                url: "/users/users"
            },
            edit: {
                type: 'PUT',
                url: "/users/users"
            },
            remove: {
                type: 'DELETE',
                url: "/users/users"
            }
        },
        fields: [
            { name: 'id', type: "hidden" },
            { label: "First Name:", name: "first_name", type: "text",
                attr: {
                    maxlength: MAX_NAME_LEN,
                    placeholder: 'First name'
                }
            },
            { label: "Last Name:", name: "last_name", type: "text",
                attr: {
                    maxlength: MAX_NAME_LEN,
                    placeholder: 'Last name'
                }
            },
            { label: "Email:", name: "email", type: "text",
                attr: {
                    maxlength: MAX_MAIL_LEN,
                    placeholder: 'email@mydomain.com'
                }
            },
            { label: "", name: "is_admin", type: "checkbox", separator: ";",
                options: [{
                    label: 'Administrator', value: 1 }],
                unselectedValue: 0
            },
            { label: "Password", name: "password", type: "password",
                attr: {
                    maxlength: MAX_PWD_LEN
                }
            },
            { label: "Repeat Password", name: "password2", type: "password",
                attr: {
                    maxlength: MAX_PWD_LEN
                }
            }
        ],
        formOptions: {
            main: {
                focus: 'first_name'
            }
        }
    }).on( 'preSubmit', function ( e, o, action ) {
        var firstName = this.val('first_name');
        var lastName  = this.val('last_name');
        var email     = this.val('email');
        var admin     = this.val('is_admin');
        var password  = this.val('password');
        var password2 = this.val('password2');

        if (action === 'create' || action === 'edit') {
            // Check for changes, if none, close
            if(action === 'edit') {
                if(admin === '1') {
                    if (password === '') {
                        this.error('password', 'Password must be provided for administrative privileges');
                        this.field('password').focus();
                    } else if( password.length >= MAX_PWD_LEN) {
                        this.error('password', 'The password length must be less than 20 characters');
                        this.field('password').focus();
                    }

                    if(password !== password2) {
                        this.error('password2', 'Passwords do no match');
                        this.field('password2').focus();
                    }
                }
            }
            // Validate first name
            if (firstName === '' ) {
                this.error('first_name', 'First name must be given');
                this.field('first_name').focus();
            } else if(firstName.length >= MAX_NAME_LEN) {
                this.error('first_name', 'First name length must be less than 20 characters');
                this.field('first_name').focus();
            }
            // Validate last name
            if(lastName === '') {
                this.error('last_name', 'Last name must be given');
                this.field('last_name').focus();
            } else if(lastName.length >= MAX_NAME_LEN) {
                this.error('last_name', 'Last name length must be less than 20 characters');
                this.field('last_name').focus();
            }
            // Validate password
            if(action === 'create' && admin === '1') {
                if (password === '') {
                    this.error('password', 'Password must be provided for administrative privileges');
                    this.field('password').focus();
                } else if( password.length >= MAX_PWD_LEN) {
                    this.error('password', 'The password length must be less than 20 characters');
                    this.field('password').focus();
                }

                if(password !== password2) {
                    this.error('password', 'Passwords do no match');
                    this.field('password2').focus();
                }
            }
        }
        // If any error was reported, cancel the submission so it can be corrected
        return !this.inError();
    });

    /* Hide | Reveals the password boxes */
    $(user_editor.field('is_admin').node()).on('change', function(){
        if(user_editor.val('is_admin') === '1') {
            user_editor.show('password');
            user_editor.show('password2');
            user_editor.enable('password');
            user_editor.enable('password2');
            user_editor.field('password').focus();
        } else {
            user_editor.hide('password');
            user_editor.hide('password2');
            user_editor.disable('password');
            user_editor.disable('password2');
        }
    });

    // Populates the user table with request/response data from server
    var users = $('#userTable').DataTable({
        pageLength: 10,
        responsive: true,
        dom: '<"row"<"col-sm-3"l><"col-sm-4 text-center"f><"html5buttons col-sm-5"B>>t<"row"<"col-sm-6"i><"col-sm-6"p>>',
        select: {
            style: 'single'
        },
        ajax: {
            url: "/users/users"
        },
        columnDefs: [
            // Column 4 is last accessed
            {
                orderable: false,
                targets: [0, 5]
            },
            // Column 0 is ID, don't show. Column 3 is the admin.
            {
                orderable: false,
                visible: false,
                searchable: false,
                targets: [1, 4]
            },
            // Generic all targets
            {
                className: 'text-center',
                targets: '_all'
            }
        ],
        order: [[2, 'asc']],
        columns: [
            {
                data: null,
                className: 'edit-user',
                defaultContent: ''
            },
            {data: 'id'},
            {
                data: null,
                render: function(data, type, row){
                    var name = data.first_name + ' ' + data.last_name;
                    /* This adds the key next to users who have administrative privileges */
                    return (data.is_admin) ? "<i class='fa fa-fw fa-key text-success'></i>&nbsp" + name : name;
                }
            },
            {data: 'email'},
            {data: 'is_admin'},
            {
                data: null,
                render: function(data, type, row){
                    var valid_time = moment(data.last_active);

                    return ( valid_time.isValid() ) ? '<i>' + valid_time.format('YYYY-MM-DD HH:mm') + '</i>' : '<i>Not Accessed</i>';
                }
            }
        ],
        buttons: [
            {
                extend: "create",
                text: "<i class='fa fa-plus text-success'></i>&nbsp;Add User",
                editor: user_editor
            },
            {
                extend: "edit",
                text: "<i class='fa fa-pencil-square-o text-info'></i>&nbsp;Edit User",
                editor: user_editor
            },
            {
                extend: "remove",
                text: "<i class='fa fa-trash-o text-danger'></i>&nbsp;Delete User",
                editor: user_editor
            }
        ]
    }).on('click', 'tr td.edit-user', function(){
        var tr = $(this).closest('tr');

        if( current_row === null ) {
            tr.addClass('shown');
            generate_data_table(users.row(tr));
            current_row = tr;
        } else if(current_row[0].cells[2].innerHTML === tr[0].cells[2].innerHTML) {
            var row = users.row(tr);

            tr.removeClass('shown');
            row.child(false).remove();
            current_row = null;
        } else {
            var old_row = users.row(current_row);
            var new_row = users.row(tr);

            current_row.removeClass('shown');
            old_row.child(false).remove();
            tr.addClass('shown');
            generate_data_table(new_row);
            current_row = tr;
        }
    });

    if(window.ldap_enabled === true){
        users.button().add(3, {
            text: "<i class='fa fa-id-card-o text-warning'></i>&nbsp;LDAP Users",
            action: function(e, dt, node, config) {
                $("#ldap_modal").modal("show");
            }
        });
    }
})();
