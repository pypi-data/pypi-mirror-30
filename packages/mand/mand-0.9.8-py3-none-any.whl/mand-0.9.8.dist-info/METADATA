Metadata-Version: 2.1
Name: mand
Version: 0.9.8
Summary: Run multiple modules with the same interpreter
Home-page: https://github.com/brycepg/mand
Author: Bryce Guinta
Author-email: contact@bryceguinta.me
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development :: Libraries
Description-Content-Type: text/markdown

# mand

![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mand.svg)
![PyPI](https://img.shields.io/pypi/v/mand.svg)
[![Build Status](https://travis-ci.org/brycepg/mand.svg?branch=master)](https://travis-ci.org/brycepg/mand)
[![GitHub license](https://img.shields.io/github/license/brycepg/mand.svg)](https://github.com/brycepg/mand/blob/master/LICENSE)

``python -m`` doesn't run multiple modules. This package to provides a way to easily run multiple modules with the same interpreter.

Running multiple modules on the same interpreter is great when you want side-effects such as
adding hooks to existing libraries without changing them.

# Installation

    pip install mand

# Command-line usage

Call multiple modules:

    mand a b

Where a and b are modules, ``a`` will be executed, then ``b``

Usage with arguments:

    mand "a foo" "b bar"

such that ``foo`` is an argument to module ``a`` and ``bar`` is an argument to module ``b``.

---

You can also specify module paths or python files:

    mand path/to/my/file.py pdb


You can also run mand via the ``-m`` flag:

    python -m mand "a foo" "b bar"

## API usage

```python
from mand import mand
mand(['a foo', 'b foo'])
# Equivalent usage
mand([('a', 'foo bar'), ('b', 'foo')])
```
# Changelog

0.9.6 (4/13/2018):

- Allow modules with capitalization (such as cProfile)

0.9 (4/12/2018):

- initial release


