# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Process(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pid': 'int',
        'cid': 'int',
        'name': 'str',
        'status': 'int',
        'statusmsg': 'str',
        'duration': 'float',
        'datetime': 'datetime',
        'uri': 'str',
        'internal': 'str',
        'customer_id': 'str',
        'customer_ind': 'str',
        'agent_id': 'str',
        'campaign_id': 'str',
        'agent_team': 'str',
        'calltype': 'str',
        'calltime': 'datetime',
        'timezone': 'int',
        'calldirection': 'int',
        'channels': 'int',
        'ani': 'str',
        'tag': 'list[str]',
        'ports': 'list[int]',
        'mode': 'int',
        'storedata': 'int',
        'source': 'str',
        'ip': 'str',
        'mimetype': 'str'
    }

    attribute_map = {
        'pid': 'pid',
        'cid': 'cid',
        'name': 'name',
        'status': 'status',
        'statusmsg': 'statusmsg',
        'duration': 'duration',
        'datetime': 'datetime',
        'uri': 'uri',
        'internal': 'internal',
        'customer_id': 'customerId',
        'customer_ind': 'customerInd',
        'agent_id': 'agentId',
        'campaign_id': 'campaignId',
        'agent_team': 'agentTeam',
        'calltype': 'calltype',
        'calltime': 'calltime',
        'timezone': 'timezone',
        'calldirection': 'calldirection',
        'channels': 'channels',
        'ani': 'ANI',
        'tag': 'tag',
        'ports': 'ports',
        'mode': 'mode',
        'storedata': 'storedata',
        'source': 'source',
        'ip': 'ip',
        'mimetype': 'mimetype'
    }

    def __init__(self, pid=None, cid=None, name=None, status=None, statusmsg=None, duration=None, datetime=None, uri=None, internal=None, customer_id=None, customer_ind=None, agent_id=None, campaign_id=None, agent_team=None, calltype=None, calltime=None, timezone=None, calldirection=None, channels=None, ani=None, tag=None, ports=None, mode=None, storedata=None, source=None, ip=None, mimetype=None):
        """
        Process - a model defined in Swagger
        """

        self._pid = None
        self._cid = None
        self._name = None
        self._status = None
        self._statusmsg = None
        self._duration = None
        self._datetime = None
        self._uri = None
        self._internal = None
        self._customer_id = None
        self._customer_ind = None
        self._agent_id = None
        self._campaign_id = None
        self._agent_team = None
        self._calltype = None
        self._calltime = None
        self._timezone = None
        self._calldirection = None
        self._channels = None
        self._ani = None
        self._tag = None
        self._ports = None
        self._mode = None
        self._storedata = None
        self._source = None
        self._ip = None
        self._mimetype = None

        self.pid = pid
        if cid is not None:
          self.cid = cid
        if name is not None:
          self.name = name
        if status is not None:
          self.status = status
        if statusmsg is not None:
          self.statusmsg = statusmsg
        if duration is not None:
          self.duration = duration
        if datetime is not None:
          self.datetime = datetime
        if uri is not None:
          self.uri = uri
        if internal is not None:
          self.internal = internal
        if customer_id is not None:
          self.customer_id = customer_id
        if customer_ind is not None:
          self.customer_ind = customer_ind
        if agent_id is not None:
          self.agent_id = agent_id
        if campaign_id is not None:
          self.campaign_id = campaign_id
        if agent_team is not None:
          self.agent_team = agent_team
        if calltype is not None:
          self.calltype = calltype
        if calltime is not None:
          self.calltime = calltime
        if timezone is not None:
          self.timezone = timezone
        self.calldirection = calldirection
        self.channels = channels
        if ani is not None:
          self.ani = ani
        if tag is not None:
          self.tag = tag
        if ports is not None:
          self.ports = ports
        if mode is not None:
          self.mode = mode
        if storedata is not None:
          self.storedata = storedata
        if source is not None:
          self.source = source
        if ip is not None:
          self.ip = ip
        if mimetype is not None:
          self.mimetype = mimetype

    @property
    def pid(self):
        """
        Gets the pid of this Process.
        Unique ID for the processing job

        :return: The pid of this Process.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this Process.
        Unique ID for the processing job

        :param pid: The pid of this Process.
        :type: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")

        self._pid = pid

    @property
    def cid(self):
        """
        Gets the cid of this Process.
        Client ID that requested the processing

        :return: The cid of this Process.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """
        Sets the cid of this Process.
        Client ID that requested the processing

        :param cid: The cid of this Process.
        :type: int
        """

        self._cid = cid

    @property
    def name(self):
        """
        Gets the name of this Process.
        Label of the processing job (Client defined)

        :return: The name of this Process.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Process.
        Label of the processing job (Client defined)

        :param name: The name of this Process.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this Process.
        Shows the processing state of the job. Status is 0: pending, 1: processing, 2: completed, -1:failed, -2 aborted

        :return: The status of this Process.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Process.
        Shows the processing state of the job. Status is 0: pending, 1: processing, 2: completed, -1:failed, -2 aborted

        :param status: The status of this Process.
        :type: int
        """

        self._status = status

    @property
    def statusmsg(self):
        """
        Gets the statusmsg of this Process.
        Reason for success or failure

        :return: The statusmsg of this Process.
        :rtype: str
        """
        return self._statusmsg

    @statusmsg.setter
    def statusmsg(self, statusmsg):
        """
        Sets the statusmsg of this Process.
        Reason for success or failure

        :param statusmsg: The statusmsg of this Process.
        :type: str
        """

        self._statusmsg = statusmsg

    @property
    def duration(self):
        """
        Gets the duration of this Process.
        duration of the audio signal (in sec)

        :return: The duration of this Process.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this Process.
        duration of the audio signal (in sec)

        :param duration: The duration of this Process.
        :type: float
        """

        self._duration = duration

    @property
    def datetime(self):
        """
        Gets the datetime of this Process.
        date and time the request for processing was inserted into CallER system

        :return: The datetime of this Process.
        :rtype: datetime
        """
        return self._datetime

    @datetime.setter
    def datetime(self, datetime):
        """
        Sets the datetime of this Process.
        date and time the request for processing was inserted into CallER system

        :param datetime: The datetime of this Process.
        :type: datetime
        """

        self._datetime = datetime

    @property
    def uri(self):
        """
        Gets the uri of this Process.
        where to find original audio data in CallER cloud

        :return: The uri of this Process.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """
        Sets the uri of this Process.
        where to find original audio data in CallER cloud

        :param uri: The uri of this Process.
        :type: str
        """

        self._uri = uri

    @property
    def internal(self):
        """
        Gets the internal of this Process.
        for internal system use

        :return: The internal of this Process.
        :rtype: str
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """
        Sets the internal of this Process.
        for internal system use

        :param internal: The internal of this Process.
        :type: str
        """

        self._internal = internal

    @property
    def customer_id(self):
        """
        Gets the customer_id of this Process.
        Customer ID

        :return: The customer_id of this Process.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this Process.
        Customer ID

        :param customer_id: The customer_id of this Process.
        :type: str
        """

        self._customer_id = customer_id

    @property
    def customer_ind(self):
        """
        Gets the customer_ind of this Process.
        Customer Industry Index

        :return: The customer_ind of this Process.
        :rtype: str
        """
        return self._customer_ind

    @customer_ind.setter
    def customer_ind(self, customer_ind):
        """
        Sets the customer_ind of this Process.
        Customer Industry Index

        :param customer_ind: The customer_ind of this Process.
        :type: str
        """

        self._customer_ind = customer_ind

    @property
    def agent_id(self):
        """
        Gets the agent_id of this Process.
        Agent ID

        :return: The agent_id of this Process.
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """
        Sets the agent_id of this Process.
        Agent ID

        :param agent_id: The agent_id of this Process.
        :type: str
        """

        self._agent_id = agent_id

    @property
    def campaign_id(self):
        """
        Gets the campaign_id of this Process.
        Campaign ID

        :return: The campaign_id of this Process.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """
        Sets the campaign_id of this Process.
        Campaign ID

        :param campaign_id: The campaign_id of this Process.
        :type: str
        """

        self._campaign_id = campaign_id

    @property
    def agent_team(self):
        """
        Gets the agent_team of this Process.
        Agent's team ID

        :return: The agent_team of this Process.
        :rtype: str
        """
        return self._agent_team

    @agent_team.setter
    def agent_team(self, agent_team):
        """
        Sets the agent_team of this Process.
        Agent's team ID

        :param agent_team: The agent_team of this Process.
        :type: str
        """

        self._agent_team = agent_team

    @property
    def calltype(self):
        """
        Gets the calltype of this Process.
        The type of call

        :return: The calltype of this Process.
        :rtype: str
        """
        return self._calltype

    @calltype.setter
    def calltype(self, calltype):
        """
        Sets the calltype of this Process.
        The type of call

        :param calltype: The calltype of this Process.
        :type: str
        """

        self._calltype = calltype

    @property
    def calltime(self):
        """
        Gets the calltime of this Process.
        Call time

        :return: The calltime of this Process.
        :rtype: datetime
        """
        return self._calltime

    @calltime.setter
    def calltime(self, calltime):
        """
        Sets the calltime of this Process.
        Call time

        :param calltime: The calltime of this Process.
        :type: datetime
        """

        self._calltime = calltime

    @property
    def timezone(self):
        """
        Gets the timezone of this Process.
        Timezone of call

        :return: The timezone of this Process.
        :rtype: int
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this Process.
        Timezone of call

        :param timezone: The timezone of this Process.
        :type: int
        """

        self._timezone = timezone

    @property
    def calldirection(self):
        """
        Gets the calldirection of this Process.
        Who initiated the call 1=incoming, 2=outgoing

        :return: The calldirection of this Process.
        :rtype: int
        """
        return self._calldirection

    @calldirection.setter
    def calldirection(self, calldirection):
        """
        Sets the calldirection of this Process.
        Who initiated the call 1=incoming, 2=outgoing

        :param calldirection: The calldirection of this Process.
        :type: int
        """
        if calldirection is None:
            raise ValueError("Invalid value for `calldirection`, must not be `None`")

        self._calldirection = calldirection

    @property
    def channels(self):
        """
        Gets the channels of this Process.
        Number of channels for audio signal 1=single OR  2=two-channel

        :return: The channels of this Process.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """
        Sets the channels of this Process.
        Number of channels for audio signal 1=single OR  2=two-channel

        :param channels: The channels of this Process.
        :type: int
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def ani(self):
        """
        Gets the ani of this Process.
        ANI information

        :return: The ani of this Process.
        :rtype: str
        """
        return self._ani

    @ani.setter
    def ani(self, ani):
        """
        Sets the ani of this Process.
        ANI information

        :param ani: The ani of this Process.
        :type: str
        """

        self._ani = ani

    @property
    def tag(self):
        """
        Gets the tag of this Process.
        Client defined tagging of processing job

        :return: The tag of this Process.
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Process.
        Client defined tagging of processing job

        :param tag: The tag of this Process.
        :type: list[str]
        """

        self._tag = tag

    @property
    def ports(self):
        """
        Gets the ports of this Process.
        Internal ports for live mode request

        :return: The ports of this Process.
        :rtype: list[int]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """
        Sets the ports of this Process.
        Internal ports for live mode request

        :param ports: The ports of this Process.
        :type: list[int]
        """

        self._ports = ports

    @property
    def mode(self):
        """
        Gets the mode of this Process.
        The processing job mode of operation 1=URL, 2=Audio file, 3=Websocket, 4=Video

        :return: The mode of this Process.
        :rtype: int
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this Process.
        The processing job mode of operation 1=URL, 2=Audio file, 3=Websocket, 4=Video

        :param mode: The mode of this Process.
        :type: int
        """

        self._mode = mode

    @property
    def storedata(self):
        """
        Gets the storedata of this Process.
        Boolean value to show if this process saves audio data in the storage. 0=no and 1=yes. Look the uri property for the location of the file in the cloud.

        :return: The storedata of this Process.
        :rtype: int
        """
        return self._storedata

    @storedata.setter
    def storedata(self, storedata):
        """
        Sets the storedata of this Process.
        Boolean value to show if this process saves audio data in the storage. 0=no and 1=yes. Look the uri property for the location of the file in the cloud.

        :param storedata: The storedata of this Process.
        :type: int
        """

        self._storedata = storedata

    @property
    def source(self):
        """
        Gets the source of this Process.
        Original url for post url method, filename for post formdata method, null for live method

        :return: The source of this Process.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Process.
        Original url for post url method, filename for post formdata method, null for live method

        :param source: The source of this Process.
        :type: str
        """

        self._source = source

    @property
    def ip(self):
        """
        Gets the ip of this Process.
        Remote ip accessing the API; special case is the web demo post

        :return: The ip of this Process.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this Process.
        Remote ip accessing the API; special case is the web demo post

        :param ip: The ip of this Process.
        :type: str
        """

        self._ip = ip

    @property
    def mimetype(self):
        """
        Gets the mimetype of this Process.
        The audio format of the incoming audio, which must be included in the supported list

        :return: The mimetype of this Process.
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """
        Sets the mimetype of this Process.
        The audio format of the incoming audio, which must be included in the supported list

        :param mimetype: The mimetype of this Process.
        :type: str
        """

        self._mimetype = mimetype

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Process):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
