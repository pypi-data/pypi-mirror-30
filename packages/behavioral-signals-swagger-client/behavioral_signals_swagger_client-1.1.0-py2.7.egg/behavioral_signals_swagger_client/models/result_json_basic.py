# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResultJSONBasic(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'totalduration': 'float',
        'speakerchanges': 'int',
        'numbeepfound': 'int',
        'numringfound': 'int',
        'id': 'ResultJSONBasicId',
        'vad': 'ResultJSONBasicVad',
        'gender': 'ResultJSONBasicGender',
        'age': 'ResultJSONBasicAge',
        'lang': 'ResultJSONBasicLang',
        'utterances': 'ResultJSONBasicUtterances'
    }

    attribute_map = {
        'totalduration': 'totalduration',
        'speakerchanges': 'speakerchanges',
        'numbeepfound': 'numbeepfound',
        'numringfound': 'numringfound',
        'id': 'id',
        'vad': 'vad',
        'gender': 'gender',
        'age': 'age',
        'lang': 'lang',
        'utterances': 'utterances'
    }

    def __init__(self, totalduration=None, speakerchanges=None, numbeepfound=None, numringfound=None, id=None, vad=None, gender=None, age=None, lang=None, utterances=None):
        """
        ResultJSONBasic - a model defined in Swagger
        """

        self._totalduration = None
        self._speakerchanges = None
        self._numbeepfound = None
        self._numringfound = None
        self._id = None
        self._vad = None
        self._gender = None
        self._age = None
        self._lang = None
        self._utterances = None

        if totalduration is not None:
          self.totalduration = totalduration
        if speakerchanges is not None:
          self.speakerchanges = speakerchanges
        if numbeepfound is not None:
          self.numbeepfound = numbeepfound
        if numringfound is not None:
          self.numringfound = numringfound
        if id is not None:
          self.id = id
        if vad is not None:
          self.vad = vad
        if gender is not None:
          self.gender = gender
        if age is not None:
          self.age = age
        if lang is not None:
          self.lang = lang
        if utterances is not None:
          self.utterances = utterances

    @property
    def totalduration(self):
        """
        Gets the totalduration of this ResultJSONBasic.
        Duration of call in seconds

        :return: The totalduration of this ResultJSONBasic.
        :rtype: float
        """
        return self._totalduration

    @totalduration.setter
    def totalduration(self, totalduration):
        """
        Sets the totalduration of this ResultJSONBasic.
        Duration of call in seconds

        :param totalduration: The totalduration of this ResultJSONBasic.
        :type: float
        """

        self._totalduration = totalduration

    @property
    def speakerchanges(self):
        """
        Gets the speakerchanges of this ResultJSONBasic.
        Number of speaker changes (turns)

        :return: The speakerchanges of this ResultJSONBasic.
        :rtype: int
        """
        return self._speakerchanges

    @speakerchanges.setter
    def speakerchanges(self, speakerchanges):
        """
        Sets the speakerchanges of this ResultJSONBasic.
        Number of speaker changes (turns)

        :param speakerchanges: The speakerchanges of this ResultJSONBasic.
        :type: int
        """

        self._speakerchanges = speakerchanges

    @property
    def numbeepfound(self):
        """
        Gets the numbeepfound of this ResultJSONBasic.
        Number of beeps found in call

        :return: The numbeepfound of this ResultJSONBasic.
        :rtype: int
        """
        return self._numbeepfound

    @numbeepfound.setter
    def numbeepfound(self, numbeepfound):
        """
        Sets the numbeepfound of this ResultJSONBasic.
        Number of beeps found in call

        :param numbeepfound: The numbeepfound of this ResultJSONBasic.
        :type: int
        """

        self._numbeepfound = numbeepfound

    @property
    def numringfound(self):
        """
        Gets the numringfound of this ResultJSONBasic.
        Number of rings found in call

        :return: The numringfound of this ResultJSONBasic.
        :rtype: int
        """
        return self._numringfound

    @numringfound.setter
    def numringfound(self, numringfound):
        """
        Sets the numringfound of this ResultJSONBasic.
        Number of rings found in call

        :param numringfound: The numringfound of this ResultJSONBasic.
        :type: int
        """

        self._numringfound = numringfound

    @property
    def id(self):
        """
        Gets the id of this ResultJSONBasic.

        :return: The id of this ResultJSONBasic.
        :rtype: ResultJSONBasicId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ResultJSONBasic.

        :param id: The id of this ResultJSONBasic.
        :type: ResultJSONBasicId
        """

        self._id = id

    @property
    def vad(self):
        """
        Gets the vad of this ResultJSONBasic.

        :return: The vad of this ResultJSONBasic.
        :rtype: ResultJSONBasicVad
        """
        return self._vad

    @vad.setter
    def vad(self, vad):
        """
        Sets the vad of this ResultJSONBasic.

        :param vad: The vad of this ResultJSONBasic.
        :type: ResultJSONBasicVad
        """

        self._vad = vad

    @property
    def gender(self):
        """
        Gets the gender of this ResultJSONBasic.

        :return: The gender of this ResultJSONBasic.
        :rtype: ResultJSONBasicGender
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this ResultJSONBasic.

        :param gender: The gender of this ResultJSONBasic.
        :type: ResultJSONBasicGender
        """

        self._gender = gender

    @property
    def age(self):
        """
        Gets the age of this ResultJSONBasic.

        :return: The age of this ResultJSONBasic.
        :rtype: ResultJSONBasicAge
        """
        return self._age

    @age.setter
    def age(self, age):
        """
        Sets the age of this ResultJSONBasic.

        :param age: The age of this ResultJSONBasic.
        :type: ResultJSONBasicAge
        """

        self._age = age

    @property
    def lang(self):
        """
        Gets the lang of this ResultJSONBasic.

        :return: The lang of this ResultJSONBasic.
        :rtype: ResultJSONBasicLang
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """
        Sets the lang of this ResultJSONBasic.

        :param lang: The lang of this ResultJSONBasic.
        :type: ResultJSONBasicLang
        """

        self._lang = lang

    @property
    def utterances(self):
        """
        Gets the utterances of this ResultJSONBasic.

        :return: The utterances of this ResultJSONBasic.
        :rtype: ResultJSONBasicUtterances
        """
        return self._utterances

    @utterances.setter
    def utterances(self, utterances):
        """
        Sets the utterances of this ResultJSONBasic.

        :param utterances: The utterances of this ResultJSONBasic.
        :type: ResultJSONBasicUtterances
        """

        self._utterances = utterances

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResultJSONBasic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
