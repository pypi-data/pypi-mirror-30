# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResultJSONEventsBehavioralAgent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emotion': 'list[ResultJSONEventsBehavioralAgentEmotion]',
        'strength': 'list[ResultJSONEventsBehavioralAgentStrength]',
        'positivity': 'list[ResultJSONEventsBehavioralAgentPositivity]',
        'engagement': 'list[ResultJSONEventsBehavioralAgentEngagement]',
        'politeness': 'list[ResultJSONEventsBehavioralAgentPoliteness]'
    }

    attribute_map = {
        'emotion': 'emotion',
        'strength': 'strength',
        'positivity': 'positivity',
        'engagement': 'engagement',
        'politeness': 'politeness'
    }

    def __init__(self, emotion=None, strength=None, positivity=None, engagement=None, politeness=None):
        """
        ResultJSONEventsBehavioralAgent - a model defined in Swagger
        """

        self._emotion = None
        self._strength = None
        self._positivity = None
        self._engagement = None
        self._politeness = None

        if emotion is not None:
          self.emotion = emotion
        if strength is not None:
          self.strength = strength
        if positivity is not None:
          self.positivity = positivity
        if engagement is not None:
          self.engagement = engagement
        if politeness is not None:
          self.politeness = politeness

    @property
    def emotion(self):
        """
        Gets the emotion of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to discrete emotions

        :return: The emotion of this ResultJSONEventsBehavioralAgent.
        :rtype: list[ResultJSONEventsBehavioralAgentEmotion]
        """
        return self._emotion

    @emotion.setter
    def emotion(self, emotion):
        """
        Sets the emotion of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to discrete emotions

        :param emotion: The emotion of this ResultJSONEventsBehavioralAgent.
        :type: list[ResultJSONEventsBehavioralAgentEmotion]
        """

        self._emotion = emotion

    @property
    def strength(self):
        """
        Gets the strength of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to activation

        :return: The strength of this ResultJSONEventsBehavioralAgent.
        :rtype: list[ResultJSONEventsBehavioralAgentStrength]
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """
        Sets the strength of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to activation

        :param strength: The strength of this ResultJSONEventsBehavioralAgent.
        :type: list[ResultJSONEventsBehavioralAgentStrength]
        """

        self._strength = strength

    @property
    def positivity(self):
        """
        Gets the positivity of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to positivity

        :return: The positivity of this ResultJSONEventsBehavioralAgent.
        :rtype: list[ResultJSONEventsBehavioralAgentPositivity]
        """
        return self._positivity

    @positivity.setter
    def positivity(self, positivity):
        """
        Sets the positivity of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to positivity

        :param positivity: The positivity of this ResultJSONEventsBehavioralAgent.
        :type: list[ResultJSONEventsBehavioralAgentPositivity]
        """

        self._positivity = positivity

    @property
    def engagement(self):
        """
        Gets the engagement of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to engagement

        :return: The engagement of this ResultJSONEventsBehavioralAgent.
        :rtype: list[ResultJSONEventsBehavioralAgentEngagement]
        """
        return self._engagement

    @engagement.setter
    def engagement(self, engagement):
        """
        Sets the engagement of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to engagement

        :param engagement: The engagement of this ResultJSONEventsBehavioralAgent.
        :type: list[ResultJSONEventsBehavioralAgentEngagement]
        """

        self._engagement = engagement

    @property
    def politeness(self):
        """
        Gets the politeness of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to politeness

        :return: The politeness of this ResultJSONEventsBehavioralAgent.
        :rtype: list[ResultJSONEventsBehavioralAgentPoliteness]
        """
        return self._politeness

    @politeness.setter
    def politeness(self, politeness):
        """
        Sets the politeness of this ResultJSONEventsBehavioralAgent.
        the array containing all events related to politeness

        :param politeness: The politeness of this ResultJSONEventsBehavioralAgent.
        :type: list[ResultJSONEventsBehavioralAgentPoliteness]
        """

        self._politeness = politeness

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResultJSONEventsBehavioralAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
