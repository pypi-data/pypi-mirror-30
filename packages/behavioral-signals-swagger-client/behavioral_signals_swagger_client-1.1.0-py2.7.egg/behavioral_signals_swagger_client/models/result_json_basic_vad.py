# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResultJSONBasicVad(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent': 'float',
        'customer': 'float',
        'overlap': 'float',
        'silence': 'float'
    }

    attribute_map = {
        'agent': 'agent',
        'customer': 'customer',
        'overlap': 'overlap',
        'silence': 'silence'
    }

    def __init__(self, agent=None, customer=None, overlap=None, silence=None):
        """
        ResultJSONBasicVad - a model defined in Swagger
        """

        self._agent = None
        self._customer = None
        self._overlap = None
        self._silence = None

        if agent is not None:
          self.agent = agent
        if customer is not None:
          self.customer = customer
        if overlap is not None:
          self.overlap = overlap
        if silence is not None:
          self.silence = silence

    @property
    def agent(self):
        """
        Gets the agent of this ResultJSONBasicVad.
        Agent talk time  in seconds

        :return: The agent of this ResultJSONBasicVad.
        :rtype: float
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """
        Sets the agent of this ResultJSONBasicVad.
        Agent talk time  in seconds

        :param agent: The agent of this ResultJSONBasicVad.
        :type: float
        """

        self._agent = agent

    @property
    def customer(self):
        """
        Gets the customer of this ResultJSONBasicVad.
        Customer talk time in seconds

        :return: The customer of this ResultJSONBasicVad.
        :rtype: float
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this ResultJSONBasicVad.
        Customer talk time in seconds

        :param customer: The customer of this ResultJSONBasicVad.
        :type: float
        """

        self._customer = customer

    @property
    def overlap(self):
        """
        Gets the overlap of this ResultJSONBasicVad.
        overlap talk in seconds

        :return: The overlap of this ResultJSONBasicVad.
        :rtype: float
        """
        return self._overlap

    @overlap.setter
    def overlap(self, overlap):
        """
        Sets the overlap of this ResultJSONBasicVad.
        overlap talk in seconds

        :param overlap: The overlap of this ResultJSONBasicVad.
        :type: float
        """

        self._overlap = overlap

    @property
    def silence(self):
        """
        Gets the silence of this ResultJSONBasicVad.
        silence in seconds

        :return: The silence of this ResultJSONBasicVad.
        :rtype: float
        """
        return self._silence

    @silence.setter
    def silence(self, silence):
        """
        Sets the silence of this ResultJSONBasicVad.
        silence in seconds

        :param silence: The silence of this ResultJSONBasicVad.
        :type: float
        """

        self._silence = silence

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResultJSONBasicVad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
