# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResultJSONKpi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'escalation': 'bool',
        'resolution': 'bool',
        'agentperfscore': 'float',
        'satisfaction': 'float',
        'propensity': 'float',
        'success': 'float'
    }

    attribute_map = {
        'escalation': 'escalation',
        'resolution': 'resolution',
        'agentperfscore': 'agentperfscore',
        'satisfaction': 'satisfaction',
        'propensity': 'propensity',
        'success': 'success'
    }

    def __init__(self, escalation=None, resolution=None, agentperfscore=None, satisfaction=None, propensity=None, success=None):
        """
        ResultJSONKpi - a model defined in Swagger
        """

        self._escalation = None
        self._resolution = None
        self._agentperfscore = None
        self._satisfaction = None
        self._propensity = None
        self._success = None

        if escalation is not None:
          self.escalation = escalation
        if resolution is not None:
          self.resolution = resolution
        if agentperfscore is not None:
          self.agentperfscore = agentperfscore
        if satisfaction is not None:
          self.satisfaction = satisfaction
        if propensity is not None:
          self.propensity = propensity
        if success is not None:
          self.success = success

    @property
    def escalation(self):
        """
        Gets the escalation of this ResultJSONKpi.
        Escalation during the call, e.g., negative emotions are on the rise

        :return: The escalation of this ResultJSONKpi.
        :rtype: bool
        """
        return self._escalation

    @escalation.setter
    def escalation(self, escalation):
        """
        Sets the escalation of this ResultJSONKpi.
        Escalation during the call, e.g., negative emotions are on the rise

        :param escalation: The escalation of this ResultJSONKpi.
        :type: bool
        """

        self._escalation = escalation

    @property
    def resolution(self):
        """
        Gets the resolution of this ResultJSONKpi.
        Resolution during the call, e.g., negative emotions are falling

        :return: The resolution of this ResultJSONKpi.
        :rtype: bool
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """
        Sets the resolution of this ResultJSONKpi.
        Resolution during the call, e.g., negative emotions are falling

        :param resolution: The resolution of this ResultJSONKpi.
        :type: bool
        """

        self._resolution = resolution

    @property
    def agentperfscore(self):
        """
        Gets the agentperfscore of this ResultJSONKpi.
        Agent performance score, normalized between 0 (bad)  and 1 (excellent)

        :return: The agentperfscore of this ResultJSONKpi.
        :rtype: float
        """
        return self._agentperfscore

    @agentperfscore.setter
    def agentperfscore(self, agentperfscore):
        """
        Sets the agentperfscore of this ResultJSONKpi.
        Agent performance score, normalized between 0 (bad)  and 1 (excellent)

        :param agentperfscore: The agentperfscore of this ResultJSONKpi.
        :type: float
        """

        self._agentperfscore = agentperfscore

    @property
    def satisfaction(self):
        """
        Gets the satisfaction of this ResultJSONKpi.
        Customer satisfaction, normalized between 0 and 1 (100% satisfied)

        :return: The satisfaction of this ResultJSONKpi.
        :rtype: float
        """
        return self._satisfaction

    @satisfaction.setter
    def satisfaction(self, satisfaction):
        """
        Sets the satisfaction of this ResultJSONKpi.
        Customer satisfaction, normalized between 0 and 1 (100% satisfied)

        :param satisfaction: The satisfaction of this ResultJSONKpi.
        :type: float
        """

        self._satisfaction = satisfaction

    @property
    def propensity(self):
        """
        Gets the propensity of this ResultJSONKpi.
        Propensity to buy/donate, normalized between 0 (no sale) and 1 (sale)

        :return: The propensity of this ResultJSONKpi.
        :rtype: float
        """
        return self._propensity

    @propensity.setter
    def propensity(self, propensity):
        """
        Sets the propensity of this ResultJSONKpi.
        Propensity to buy/donate, normalized between 0 (no sale) and 1 (sale)

        :param propensity: The propensity of this ResultJSONKpi.
        :type: float
        """

        self._propensity = propensity

    @property
    def success(self):
        """
        Gets the success of this ResultJSONKpi.
        Call success, normalized between 0 (fail) and 1 (success)

        :return: The success of this ResultJSONKpi.
        :rtype: float
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this ResultJSONKpi.
        Call success, normalized between 0 (fail) and 1 (success)

        :param success: The success of this ResultJSONKpi.
        :type: float
        """

        self._success = success

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResultJSONKpi):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
