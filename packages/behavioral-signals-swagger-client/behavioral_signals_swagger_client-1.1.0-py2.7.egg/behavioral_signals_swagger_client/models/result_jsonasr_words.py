# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResultJSONASRWords(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'c': 'float',
        'st': 'float',
        'et': 'float',
        'p': 'int',
        'w': 'str',
        'm': 'str'
    }

    attribute_map = {
        'c': 'c',
        'st': 'st',
        'et': 'et',
        'p': 'p',
        'w': 'w',
        'm': 'm'
    }

    def __init__(self, c=None, st=None, et=None, p=None, w=None, m=None):
        """
        ResultJSONASRWords - a model defined in Swagger
        """

        self._c = None
        self._st = None
        self._et = None
        self._p = None
        self._w = None
        self._m = None

        if c is not None:
          self.c = c
        if st is not None:
          self.st = st
        if et is not None:
          self.et = et
        if p is not None:
          self.p = p
        if w is not None:
          self.w = w
        if m is not None:
          self.m = m

    @property
    def c(self):
        """
        Gets the c of this ResultJSONASRWords.
        Confidence

        :return: The c of this ResultJSONASRWords.
        :rtype: float
        """
        return self._c

    @c.setter
    def c(self, c):
        """
        Sets the c of this ResultJSONASRWords.
        Confidence

        :param c: The c of this ResultJSONASRWords.
        :type: float
        """

        self._c = c

    @property
    def st(self):
        """
        Gets the st of this ResultJSONASRWords.
        The start time of the word in seconds from begining

        :return: The st of this ResultJSONASRWords.
        :rtype: float
        """
        return self._st

    @st.setter
    def st(self, st):
        """
        Sets the st of this ResultJSONASRWords.
        The start time of the word in seconds from begining

        :param st: The st of this ResultJSONASRWords.
        :type: float
        """

        self._st = st

    @property
    def et(self):
        """
        Gets the et of this ResultJSONASRWords.
        The end time of the word in seconds from begining

        :return: The et of this ResultJSONASRWords.
        :rtype: float
        """
        return self._et

    @et.setter
    def et(self, et):
        """
        Sets the et of this ResultJSONASRWords.
        The end time of the word in seconds from begining

        :param et: The et of this ResultJSONASRWords.
        :type: float
        """

        self._et = et

    @property
    def p(self):
        """
        Gets the p of this ResultJSONASRWords.
        Index starting from zero

        :return: The p of this ResultJSONASRWords.
        :rtype: int
        """
        return self._p

    @p.setter
    def p(self, p):
        """
        Sets the p of this ResultJSONASRWords.
        Index starting from zero

        :param p: The p of this ResultJSONASRWords.
        :type: int
        """

        self._p = p

    @property
    def w(self):
        """
        Gets the w of this ResultJSONASRWords.
        The transcribed word string

        :return: The w of this ResultJSONASRWords.
        :rtype: str
        """
        return self._w

    @w.setter
    def w(self, w):
        """
        Sets the w of this ResultJSONASRWords.
        The transcribed word string

        :param w: The w of this ResultJSONASRWords.
        :type: str
        """

        self._w = w

    @property
    def m(self):
        """
        Gets the m of this ResultJSONASRWords.
        Flag

        :return: The m of this ResultJSONASRWords.
        :rtype: str
        """
        return self._m

    @m.setter
    def m(self, m):
        """
        Sets the m of this ResultJSONASRWords.
        Flag

        :param m: The m of this ResultJSONASRWords.
        :type: str
        """

        self._m = m

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResultJSONASRWords):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
