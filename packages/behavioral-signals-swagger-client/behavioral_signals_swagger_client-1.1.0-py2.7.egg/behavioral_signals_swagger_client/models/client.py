# coding: utf-8

"""
    CallER API

    CallER API in the cloud service

    OpenAPI spec version: 3.0.1
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Client(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cid': 'int',
        'name': 'str',
        'email': 'str',
        'tag': 'list[str]',
        'storedata': 'int',
        'datastore': 'str'
    }

    attribute_map = {
        'cid': 'cid',
        'name': 'name',
        'email': 'email',
        'tag': 'tag',
        'storedata': 'storedata',
        'datastore': 'datastore'
    }

    def __init__(self, cid=None, name=None, email=None, tag=None, storedata=None, datastore=None):
        """
        Client - a model defined in Swagger
        """

        self._cid = None
        self._name = None
        self._email = None
        self._tag = None
        self._storedata = None
        self._datastore = None

        self.cid = cid
        self.name = name
        if email is not None:
          self.email = email
        if tag is not None:
          self.tag = tag
        if storedata is not None:
          self.storedata = storedata
        if datastore is not None:
          self.datastore = datastore

    @property
    def cid(self):
        """
        Gets the cid of this Client.
        Client's ID in our system

        :return: The cid of this Client.
        :rtype: int
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """
        Sets the cid of this Client.
        Client's ID in our system

        :param cid: The cid of this Client.
        :type: int
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def name(self):
        """
        Gets the name of this Client.
        Client's Username

        :return: The name of this Client.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Client.
        Client's Username

        :param name: The name of this Client.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def email(self):
        """
        Gets the email of this Client.
        Client's email address

        :return: The email of this Client.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Client.
        Client's email address

        :param email: The email of this Client.
        :type: str
        """

        self._email = email

    @property
    def tag(self):
        """
        Gets the tag of this Client.
        Tag of customer

        :return: The tag of this Client.
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this Client.
        Tag of customer

        :param tag: The tag of this Client.
        :type: list[str]
        """

        self._tag = tag

    @property
    def storedata(self):
        """
        Gets the storedata of this Client.
        Indicates if the client has enabled the data storage option. Can take 3 values: 0 = no storage, 1 = storage based on a per process plan, 2 = storage for all incoming job data

        :return: The storedata of this Client.
        :rtype: int
        """
        return self._storedata

    @storedata.setter
    def storedata(self, storedata):
        """
        Sets the storedata of this Client.
        Indicates if the client has enabled the data storage option. Can take 3 values: 0 = no storage, 1 = storage based on a per process plan, 2 = storage for all incoming job data

        :param storedata: The storedata of this Client.
        :type: int
        """

        self._storedata = storedata

    @property
    def datastore(self):
        """
        Gets the datastore of this Client.
        The data store that audio data will be kept. Usually it is an S3 bucket. Will be concatenated with process information to create the uri for each individual data file.

        :return: The datastore of this Client.
        :rtype: str
        """
        return self._datastore

    @datastore.setter
    def datastore(self, datastore):
        """
        Sets the datastore of this Client.
        The data store that audio data will be kept. Usually it is an S3 bucket. Will be concatenated with process information to create the uri for each individual data file.

        :param datastore: The datastore of this Client.
        :type: str
        """

        self._datastore = datastore

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
