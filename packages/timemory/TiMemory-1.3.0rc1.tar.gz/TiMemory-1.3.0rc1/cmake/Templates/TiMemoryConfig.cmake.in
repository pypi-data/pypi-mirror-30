
include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@ConfigVersion.cmake)

@PACKAGE_INIT@

set(TIMEMORY_PYTHON_BINDINGS @TIMEMORY_USE_PYTHON_BINDING@)
set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@")
set_and_check(@PROJECT_NAME@_LIB_DIR "@PACKAGE_LIB_INSTALL_DIR@")
if(TIMEMORY_PYTHON_BINDINGS)
    set_and_check(@PROJECT_NAME@_PYTHON_DIR "@PACKAGE_PYTHON_INSTALL_DIR@")
endif(TIMEMORY_PYTHON_BINDINGS)

foreach(_TYPE LIB INCLUDE PYTHON)
    set(@PROJECT_NAME@_${_TYPE}_DIRS ${@PROJECT_NAME@_${_TYPE}_DIR})
endforeach(_TYPE LIB INCLUDE PYTHON)

set(@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS @EXTERNAL_INCLUDE_DIRS@)
foreach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})
    list(APPEND @PROJECT_NAME@_INCLUDE_DIRS SYSTEM ${_DIR})
endforeach(_DIR ${@PROJECT_NAME@_EXTERNAL_INCLUDE_DIRS})

include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@LibraryDepends.cmake)

if(DEFINED CMAKE_CXX_STANDARD)
    if("${CMAKE_CXX_STANDARD}" VERSION_LESS 11 OR
        "${CMAKE_CXX_STANDARD}" VERSION_GREATER 17)
        set(CMAKE_CXX_STANDARD 11)
        set(CMAKE_CXX_STANDARD_REQUIRED ON)
    endif("${CMAKE_CXX_STANDARD}" VERSION_LESS 11 OR
        "${CMAKE_CXX_STANDARD}" VERSION_GREATER 17)
else(DEFINED CMAKE_CXX_STANDARD)
    set(CMAKE_CXX_STANDARD @CMAKE_CXX_STANDARD@)
    set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif(DEFINED CMAKE_CXX_STANDARD)

check_required_components(@PROJECT_NAME@)

get_target_property(_STATIC_LOCATION @LIBNAME@-static IMPORTED_LOCATION_RELEASE)

# try to get imported location
foreach(_LIBTYPE SHARED STATIC)

    string(TOUPPER "${CMAKE_BUILD_TYPE}" _BUILD_TYPE)
    if("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD IMPORTED_LOCATION_${_BUILD_TYPE})
    else("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")
        set(IMPORTED_LOCATION_BUILD )
    endif("${CMAKE_BUILD_TYPE}" MATCHES "${CMAKE_CONFIGURATION_TYPES}")

    foreach(_LOC
            IMPORTED_LOCATION
            ${IMPORTED_LOCATION_BUILD}
            IMPORTED_LOCATION_RELEASE
            IMPORTED_LOCATION_RELWITHDEBINFO
            IMPORTED_LOCATION_DEBUG
            IMPORTED_LOCATION_MINSIZEREL)
        if(NOT _${_LIBTYPE}_LOCATION)
            get_target_property(_SHARED_LOCATION @LIBNAME@-shared ${_LOC})
        endif(NOT _${_LIBTYPE}_LOCATION)
    endforeach(_LOC
            IMPORTED_LOCATION
            ${IMPORTED_LOCATION_BUILD}
            IMPORTED_LOCATION_RELEASE
            IMPORTED_LOCATION_RELWITHDEBINFO
            IMPORTED_LOCATION_DEBUG
            IMPORTED_LOCATION_MINSIZEREL)

    STRING(TOLOWER "${_LIBTYPE}" _LIBTAG)
    if(_${_LIBTYPE}_LOCATION)
        set(@PROJECT_NAME@_${_LIBTYPE}_LIBRARY ${_${_LIBTYPE}_LOCATION}
            CACHE INTERNAL "@PROJECT_NAME@ ${_LIBTAG} library")
    else(_${_LIBTYPE}_LOCATION)
        set(@PROJECT_NAME@_${_LIBTYPE}_LIBRARY @LIBNAME@-${_LIBTAG}
            CACHE INTERNAL "@PROJECT_NAME@ ${_LIBTAG} library")
    endif(_${_LIBTYPE}_LOCATION)

    unset(_${_LIBTYPE}_LOCATION)

endforeach(_LIBTYPE SHARED STATIC)

if(BUILD_SHARED_LIBRARIES)
    set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-shared)
elseif(BUILD_STATIC_LIBRARIES)
    set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-static)
else()
    set(@PROJECT_NAME@_LIBRARIES @LIBNAME@-shared)
endif(BUILD_SHARED_LIBRARIES)

add_definitions(-DNAME_TIM=@TIMEMORY_NAMESPACE@)
if(@TIMEMORY_EXCEPTIONS@)
    add_definitions(-DTIMEMORY_EXCEPTIONS)
endif(@TIMEMORY_EXCEPTIONS@)

set(@PROJECT_NAME@_C_FLAGS "@CMAKE_C_FLAGS@")
set(@PROJECT_NAME@_CXX_FLAGS "@CMAKE_CXX_FLAGS@ -std=c++${CMAKE_CXX_STANDARD}")
set(TIMEMORY_USE_MPI @MPI_FOUND@)

if(TIMEMORY_USE_MPI)
    add_definitions(-DTIMEMORY_USE_MPI)
endif(TIMEMORY_USE_MPI)

include(FindPackageHandleStandardArgs)
# handle the QUIETLY and REQUIRED arguments and set UnitTest++_FOUND to TRUE
# if all listed variables are TRUE
find_package_handle_standard_args(@PROJECT_NAME@ DEFAULT_MSG
    @PROJECT_NAME@_LIBRARIES
    @PROJECT_NAME@_INCLUDE_DIR
    @PROJECT_NAME@_PYTHON_DIR)
