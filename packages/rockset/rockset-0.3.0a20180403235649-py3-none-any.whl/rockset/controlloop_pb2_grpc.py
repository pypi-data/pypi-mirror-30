# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from rockset import controlloop_pb2 as rockset_dot_controlloop__pb2


class ControlLoopServiceStub(object):
  """The service definition allows an application to talk to the control loop.

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.depositMetrics = channel.unary_unary(
        '/rockset.ControlLoopService/depositMetrics',
        request_serializer=rockset_dot_controlloop__pb2.LeafMetricsRequest.SerializeToString,
        response_deserializer=rockset_dot_controlloop__pb2.LeafMetricsResponse.FromString,
        )


class ControlLoopServiceServicer(object):
  """The service definition allows an application to talk to the control loop.

  """

  def depositMetrics(self, request, context):
    """Each leaf uses this call to deposit metrics to the control loop.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ControlLoopServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'depositMetrics': grpc.unary_unary_rpc_method_handler(
          servicer.depositMetrics,
          request_deserializer=rockset_dot_controlloop__pb2.LeafMetricsRequest.FromString,
          response_serializer=rockset_dot_controlloop__pb2.LeafMetricsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rockset.ControlLoopService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
