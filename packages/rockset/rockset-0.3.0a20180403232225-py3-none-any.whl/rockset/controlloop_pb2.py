# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: rockset/controlloop.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from rockset import document_pb2 as rockset_dot_document__pb2
from rockset import value_pb2 as rockset_dot_value__pb2
from rockset import query_pb2 as rockset_dot_query__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='rockset/controlloop.proto',
  package='rockset',
  syntax='proto3',
  serialized_pb=_b('\n\x19rockset/controlloop.proto\x12\x07rockset\x1a\x16rockset/document.proto\x1a\x13rockset/value.proto\x1a\x13rockset/query.proto\"}\n\x12LeafMetricsRequest\x12\x0e\n\x06leafid\x18\x01 \x01(\t\x12\x0e\n\x06hostip\x18\x02 \x01(\t\x12\x10\n\x08\x63\x61pacity\x18\x03 \x01(\x05\x12\x11\n\tfreespace\x18\x04 \x01(\x05\x12\x11\n\ttimestamp\x18\x05 \x01(\x04\x12\x0f\n\x07\x63puload\x18\x06 \x01(\x01\"y\n\x13LeafMetricsResponse\x12/\n\x04\x63ode\x18\x01 \x01(\x0e\x32!.rockset.LeafMetricsResponse.Code\x12\x0b\n\x03msg\x18\x02 \x01(\t\"$\n\x04\x43ode\x12\x0b\n\x07SUCCESS\x10\x00\x12\x0f\n\x0bUNAVAILABLE\x10\x01\x32\x63\n\x12\x43ontrolLoopService\x12M\n\x0e\x64\x65positMetrics\x12\x1b.rockset.LeafMetricsRequest\x1a\x1c.rockset.LeafMetricsResponse\"\x00\x42\x19\n\x15io.rockset.controllerP\x01\x62\x06proto3')
  ,
  dependencies=[rockset_dot_document__pb2.DESCRIPTOR,rockset_dot_value__pb2.DESCRIPTOR,rockset_dot_query__pb2.DESCRIPTOR,])



_LEAFMETRICSRESPONSE_CODE = _descriptor.EnumDescriptor(
  name='Code',
  full_name='rockset.LeafMetricsResponse.Code',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='UNAVAILABLE', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=316,
  serialized_end=352,
)
_sym_db.RegisterEnumDescriptor(_LEAFMETRICSRESPONSE_CODE)


_LEAFMETRICSREQUEST = _descriptor.Descriptor(
  name='LeafMetricsRequest',
  full_name='rockset.LeafMetricsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='leafid', full_name='rockset.LeafMetricsRequest.leafid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='hostip', full_name='rockset.LeafMetricsRequest.hostip', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='capacity', full_name='rockset.LeafMetricsRequest.capacity', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='freespace', full_name='rockset.LeafMetricsRequest.freespace', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='rockset.LeafMetricsRequest.timestamp', index=4,
      number=5, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cpuload', full_name='rockset.LeafMetricsRequest.cpuload', index=5,
      number=6, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=104,
  serialized_end=229,
)


_LEAFMETRICSRESPONSE = _descriptor.Descriptor(
  name='LeafMetricsResponse',
  full_name='rockset.LeafMetricsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='rockset.LeafMetricsResponse.code', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='msg', full_name='rockset.LeafMetricsResponse.msg', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _LEAFMETRICSRESPONSE_CODE,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=231,
  serialized_end=352,
)

_LEAFMETRICSRESPONSE.fields_by_name['code'].enum_type = _LEAFMETRICSRESPONSE_CODE
_LEAFMETRICSRESPONSE_CODE.containing_type = _LEAFMETRICSRESPONSE
DESCRIPTOR.message_types_by_name['LeafMetricsRequest'] = _LEAFMETRICSREQUEST
DESCRIPTOR.message_types_by_name['LeafMetricsResponse'] = _LEAFMETRICSRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LeafMetricsRequest = _reflection.GeneratedProtocolMessageType('LeafMetricsRequest', (_message.Message,), dict(
  DESCRIPTOR = _LEAFMETRICSREQUEST,
  __module__ = 'rockset.controlloop_pb2'
  # @@protoc_insertion_point(class_scope:rockset.LeafMetricsRequest)
  ))
_sym_db.RegisterMessage(LeafMetricsRequest)

LeafMetricsResponse = _reflection.GeneratedProtocolMessageType('LeafMetricsResponse', (_message.Message,), dict(
  DESCRIPTOR = _LEAFMETRICSRESPONSE,
  __module__ = 'rockset.controlloop_pb2'
  # @@protoc_insertion_point(class_scope:rockset.LeafMetricsResponse)
  ))
_sym_db.RegisterMessage(LeafMetricsResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\025io.rockset.controllerP\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class ControlLoopServiceStub(object):
    """The service definition allows an application to talk to the control loop.

    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.depositMetrics = channel.unary_unary(
          '/rockset.ControlLoopService/depositMetrics',
          request_serializer=LeafMetricsRequest.SerializeToString,
          response_deserializer=LeafMetricsResponse.FromString,
          )


  class ControlLoopServiceServicer(object):
    """The service definition allows an application to talk to the control loop.

    """

    def depositMetrics(self, request, context):
      """Each leaf uses this call to deposit metrics to the control loop.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_ControlLoopServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'depositMetrics': grpc.unary_unary_rpc_method_handler(
            servicer.depositMetrics,
            request_deserializer=LeafMetricsRequest.FromString,
            response_serializer=LeafMetricsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'rockset.ControlLoopService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaControlLoopServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The service definition allows an application to talk to the control loop.

    """
    def depositMetrics(self, request, context):
      """Each leaf uses this call to deposit metrics to the control loop.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaControlLoopServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """The service definition allows an application to talk to the control loop.

    """
    def depositMetrics(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Each leaf uses this call to deposit metrics to the control loop.
      """
      raise NotImplementedError()
    depositMetrics.future = None


  def beta_create_ControlLoopService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('rockset.ControlLoopService', 'depositMetrics'): LeafMetricsRequest.FromString,
    }
    response_serializers = {
      ('rockset.ControlLoopService', 'depositMetrics'): LeafMetricsResponse.SerializeToString,
    }
    method_implementations = {
      ('rockset.ControlLoopService', 'depositMetrics'): face_utilities.unary_unary_inline(servicer.depositMetrics),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_ControlLoopService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('rockset.ControlLoopService', 'depositMetrics'): LeafMetricsRequest.SerializeToString,
    }
    response_deserializers = {
      ('rockset.ControlLoopService', 'depositMetrics'): LeafMetricsResponse.FromString,
    }
    cardinalities = {
      'depositMetrics': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'rockset.ControlLoopService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
