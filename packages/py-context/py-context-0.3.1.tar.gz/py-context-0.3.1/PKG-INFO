Metadata-Version: 1.1
Name: py-context
Version: 0.3.1
Summary: Python dict with stacked context data
Home-page: https://github.com/dealertrack/py-context
Author: Miroslav Shubernetskiy
Author-email: UNKNOWN
License: MIT
Description: ==========
        Py-Context
        ==========
        
        .. image:: https://badge.fury.io/py/py-context.png
            :target: http://badge.fury.io/py/py-context
        
        .. image:: https://travis-ci.org/dealertrack/py-context.png?branch=master
            :target: https://travis-ci.org/dealertrack/py-context
        
        .. image:: https://coveralls.io/repos/dealertrack/py-context/badge.png?branch=master
            :target: https://coveralls.io/r/dealertrack/py-context?branch=master
        
        Python dict with stacked context data
        
        * Free software: MIT license
        * GitHub: https://github.com/dealertrack/py-context
        
        Installing
        ----------
        
        You can install ``py-context`` using pip::
        
            $ pip install py-context
        
        Example
        -------
        
        ::
        
            >>> context = Context({'user': 'Fred', 'city': 'Bedrock'})
            >>> context['user']
            'Fred'
            >>> context['city']
            'Bedrock'
            >>> context.push({'user': 'Barney'})
            >>> context['user']
            'Barney'
            >>> context['city']
            'Bedrock'
            >>> context.pop()
            {'user': 'Barney'}
            >>> context['user']
            'Fred'
        
        Context also supports signals.
        Signal handler can be attached globally::
        
            >>> @context_key_changed.connect
            ... def handler(sender, context, key, new, old):
            ...     print(key, new, old)
        
            >>> context = Context()
            >>> context['hello'] = 'world'
            hello world <Missing>
        
        Or to individual context instances::
        
            >>> def handler(sender, context, key, new, old):
            ...     print(key, new, old)
            >>> context = Context()
            >>> context_key_changed.connect(handler, sender=context)
        
        Supported signals::
        
            >>> @context_initialized.connect
            ... def handler(sender, context):
            ...     pass
        
            >>> @pre_context_changed.connect
            ... def handler(sender, context):
            ...     pass
        
            >>> @post_context_changed.connect
            ... def handler(sender, context):
            ...     pass
        
            >>> @context_key_changed.connect
            ... def handler(sender, context, key, new, old):
            ...     pass
        
        Additionally, ``ClassSignallingContext`` can be used to subscribe signals
        by sender classes, not instances::
        
            >>> class TestContext(ClassSignallingContext):
            ...     pass
            >>> def context_key_changed_handler(sender, context, key, new, old):
            ...     print(key, new, old)
            >>> _ = context_key_changed.connect(context_key_changed_handler, sender=TestContext)
        
            >>> context = Context()
            >>> class_context = TestContext()
        
            >>> context['foo'] = 'bar'
            >>> class_context['foo'] = 'bar'
            foo bar <Missing>
        
        Testing
        -------
        
        To run the tests you need to install testing requirements first::
        
            $ make install
        
        Then to run tests, you can use ``nosetests`` or simply use Makefile command::
        
            $ nosetests -sv
            # or
            $ make test
        
        
        
        
        History
        -------
        
        0.3.1 (2018-04-11)
        ~~~~~~~~~~~~~~~~~~
        
        * Added support for ``*args``, ``**kwargs`` in ``Context.push()``.
        * Added ``__dir__`` support.
        
        0.3.0 (2018-02-16)
        ~~~~~~~~~~~~~~~~~~
        
        * Added signals support - ``context_initialized``, ``pre_context_changed``,
          ``post_context_changed`` and ``context_key_changed``. See README for examples.
        
        0.2.1 (2017-07-28)
        ~~~~~~~~~~~~~~~~~~
        
        * Excluding tests from being installed
        
        0.2.0 (2017-05-11)
        ~~~~~~~~~~~~~~~~~~
        
        * Add attribute support
        * Add make watch target
        
        0.1.0 (2017-03-22)
        ~~~~~~~~~~~~~~~~~~
        
        * First release on PyPI.
        
        
        Credits
        -------
        
        Originally ``Context`` was taken from `Genshi <https://genshi.edgewall.org/>`_ project.
        See ``LICENSE`` for copyright notices.
        
        Development Lead
        ~~~~~~~~~~~~~~~~
        
        * Miroslav Shubernetskiy  - https://github.com/miki725
        
        Contributors
        ~~~~~~~~~~~~
        
        * Serkan Hosca - https://github.com/shosca
        
        
        Copyright (C) 2006-2010 Edgewall Software
        
        Copyright (C) 2017 Dealertrack Technologies, Inc.
        
        All rights reserved.
        
        ::
        
            Redistribution and use in source and binary forms, with or without
            modification, are permitted provided that the following conditions
            are met:
        
            1. Redistributions of source code must retain the above copyright
               notice, this list of conditions and the following disclaimer.
            2. Redistributions in binary form must reproduce the above copyright
               notice, this list of conditions and the following disclaimer in
               the documentation and/or other materials provided with the
               distribution.
            3. The name of the author may not be used to endorse or promote
               products derived from this software without specific prior
               written permission.
        
            THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
            OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
            WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
            ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
            DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
            DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
            GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
            INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
            IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
            OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
            IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Keywords: context stack
Platform: UNKNOWN
Classifier: Intended Audience :: Developers
Classifier: Natural Language :: English
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Development Status :: 2 - Pre-Alpha
