---
# tasks file for ansible-nix-single

# - name: test whether nix-installer line is already present in .profile
#   command: grep -q "# added by Nix installer" "{{ ansible_env.HOME }}/.profile"
#   register: nix_line
#   check_mode: false
#   ignore_errors: true
#   changed_when: false
#   when: 'nix_env_binary.stat.exists == false'

- name: creating /nix directory
  file: path=/nix state=directory owner="{{ ansible_env.USER | default('root') }}"
  become: yes
  when: 'nix_env_binary.stat.exists == False'

- name: installing nix dependencies for Debian-based systems
  apt: pkg="{{item}}" state=installed update_cache=yes cache_valid_time=3600
  with_items:
    # - wget
    - curl
    - bzip2
    - ca-certificates
    - libdigest-sha-perl
  become: yes
  when: 'nix_env_binary.stat.exists == False and ansible_os_family == "Debian"'

- name: installing nix dependencies for Redhat-based systems
  package: pkg="{{item}}" state=installed
  with_items:
    - bzip2
    - perl-Digest-SHA
  become: yes
  when: 'nix_env_binary.stat.exists == False and ansible_os_family == "RedHat"'

- name: downloading nix installer script
  become: no
  get_url:
    url: "{{ nix_installer_url }}"
    dest: "/tmp/nix_install.sh"
    mode: 0755

- name: applying fix to enable nix install as root
  become: yes
  lineinfile:
    path: /etc/nix/nix.conf
    line: 'build-users-group ='
    create: yes
  when: 'ansible_env.USER is not defined or ansible_env.USER == "root"'

- name: running nix installer
  become: no
  shell: /tmp/nix_install.sh
  args:
    creates: "{{ ansible_env.HOME  }}/.nix-profile/bin/nix-env"
  environment:
    USER: "{{ ansible_env.USER | default('root') }}"
    ALLOW_PREEXISTING_INSTALLATION: "x"
  when: "ansible_os_family != 'Darwin'"

- name: running nix installer on Mac OS X
  become: no
  shell: /tmp/nix_install.sh
  args:
    creates: "/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh"
  environment:
    USER: "{{ ansible_env.USER | default('root') }}"
    ALLOW_PREEXISTING_INSTALLATION: "x"
  when: "ansible_os_family == 'Darwin'"

# - name:
# source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

# - name: remove nix-added line in .profile
#   lineinfile: dest="{{ ansible_env.HOME }}/.profile" regexp='# added by Nix installer' state=absent
#   ignore_errors: true
#   when: 'nix_line.rc == 1'

# - name: add nix path
#   become: no
#   lineinfile:
#     dest: "{{ item }}"
#     line: "if [ -e \"$HOME/.nix-profile/etc/profile.d/nix.sh\" ]; then source \"$HOME/.nix-profile/etc/profile.d/nix.sh\"; fi  # added by freckles"
#     create: yes
#   when: 'nix_env_binary.stat.exists == False and add_to_path'
#   ignore_errors: true
#   with_items:
#     - "{{ rc_files_to_add_path_to }}"
