# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import vaksana_pb2 as vaksana__pb2


class MarketStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetConfig = channel.unary_unary(
        '/vaksana.Market/GetConfig',
        request_serializer=vaksana__pb2.Void.SerializeToString,
        response_deserializer=vaksana__pb2.Config.FromString,
        )
    self.GetPublicKey = channel.unary_unary(
        '/vaksana.Market/GetPublicKey',
        request_serializer=vaksana__pb2.ContactDetails.SerializeToString,
        response_deserializer=vaksana__pb2.SKey.FromString,
        )
    self.GenerateRSAKeyPair = channel.unary_unary(
        '/vaksana.Market/GenerateRSAKeyPair',
        request_serializer=vaksana__pb2.ContactDetails.SerializeToString,
        response_deserializer=vaksana__pb2.SKey.FromString,
        )
    self.GetClientPubkey = channel.unary_unary(
        '/vaksana.Market/GetClientPubkey',
        request_serializer=vaksana__pb2.ContactDetails.SerializeToString,
        response_deserializer=vaksana__pb2.SKey.FromString,
        )
    self.GenerateAESKey = channel.unary_unary(
        '/vaksana.Market/GenerateAESKey',
        request_serializer=vaksana__pb2.ContactDetails.SerializeToString,
        response_deserializer=vaksana__pb2.SKey.FromString,
        )
    self.GenerateSSLPair = channel.unary_unary(
        '/vaksana.Market/GenerateSSLPair',
        request_serializer=vaksana__pb2.CSSLInfo.SerializeToString,
        response_deserializer=vaksana__pb2.SSSLKeyPair.FromString,
        )
    self.RegisterDomain = channel.unary_unary(
        '/vaksana.Market/RegisterDomain',
        request_serializer=vaksana__pb2.ClientInfo.SerializeToString,
        response_deserializer=vaksana__pb2.SToken.FromString,
        )
    self.DefineIntent = channel.unary_unary(
        '/vaksana.Market/DefineIntent',
        request_serializer=vaksana__pb2.CIntent.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.RegisterIntentHandler = channel.unary_unary(
        '/vaksana.Market/RegisterIntentHandler',
        request_serializer=vaksana__pb2.CProducer.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.RegisterVolume = channel.unary_unary(
        '/vaksana.Market/RegisterVolume',
        request_serializer=vaksana__pb2.CVolume.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.RegisterHost = channel.unary_unary(
        '/vaksana.Market/RegisterHost',
        request_serializer=vaksana__pb2.CDockerHost.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.CreateStub = channel.unary_unary(
        '/vaksana.Market/CreateStub',
        request_serializer=vaksana__pb2.CStubDetails.SerializeToString,
        response_deserializer=vaksana__pb2.SUrl.FromString,
        )
    self.DestroyStub = channel.unary_unary(
        '/vaksana.Market/DestroyStub',
        request_serializer=vaksana__pb2.CUrl.SerializeToString,
        response_deserializer=vaksana__pb2.Void.FromString,
        )


class MarketServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def GetConfig(self, request, context):
    """Gets Config
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetPublicKey(self, request, context):
    """----- Encryption Related Functions -----
    #TODO: Can be pulled out in a separate proto file and service
    This file should contain only Market functionality

    Server's Public Key
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GenerateRSAKeyPair(self, request, context):
    """Generate RSA key pair:
    - Returns the public key
    - Sends private key in email.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetClientPubkey(self, request, context):
    """Returns Client's public key:
    - Returns the public key
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GenerateAESKey(self, request, context):
    """Exchange Sym Key
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GenerateSSLPair(self, request, context):
    """Genereate SSL Key Pair (eg. to make secure Docker Connections)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterDomain(self, request, context):
    """----- Basic Registration Functionality -----
    Registers Domain and returns Token (ecrypted) - For subsequent queries
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DefineIntent(self, request, context):
    """Registers Intent
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterIntentHandler(self, request, context):
    """Registers a service after matching the contract of proto files
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterVolume(self, request, context):
    """Registers Volume with the market, which will be used for all services
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RegisterHost(self, request, context):
    """Registers DockerHost with the market, which will be used for all services
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateStub(self, request, context):
    """Identifies the relevant intent and provisions the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DestroyStub(self, request, context):
    """Destroys the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MarketServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetConfig': grpc.unary_unary_rpc_method_handler(
          servicer.GetConfig,
          request_deserializer=vaksana__pb2.Void.FromString,
          response_serializer=vaksana__pb2.Config.SerializeToString,
      ),
      'GetPublicKey': grpc.unary_unary_rpc_method_handler(
          servicer.GetPublicKey,
          request_deserializer=vaksana__pb2.ContactDetails.FromString,
          response_serializer=vaksana__pb2.SKey.SerializeToString,
      ),
      'GenerateRSAKeyPair': grpc.unary_unary_rpc_method_handler(
          servicer.GenerateRSAKeyPair,
          request_deserializer=vaksana__pb2.ContactDetails.FromString,
          response_serializer=vaksana__pb2.SKey.SerializeToString,
      ),
      'GetClientPubkey': grpc.unary_unary_rpc_method_handler(
          servicer.GetClientPubkey,
          request_deserializer=vaksana__pb2.ContactDetails.FromString,
          response_serializer=vaksana__pb2.SKey.SerializeToString,
      ),
      'GenerateAESKey': grpc.unary_unary_rpc_method_handler(
          servicer.GenerateAESKey,
          request_deserializer=vaksana__pb2.ContactDetails.FromString,
          response_serializer=vaksana__pb2.SKey.SerializeToString,
      ),
      'GenerateSSLPair': grpc.unary_unary_rpc_method_handler(
          servicer.GenerateSSLPair,
          request_deserializer=vaksana__pb2.CSSLInfo.FromString,
          response_serializer=vaksana__pb2.SSSLKeyPair.SerializeToString,
      ),
      'RegisterDomain': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterDomain,
          request_deserializer=vaksana__pb2.ClientInfo.FromString,
          response_serializer=vaksana__pb2.SToken.SerializeToString,
      ),
      'DefineIntent': grpc.unary_unary_rpc_method_handler(
          servicer.DefineIntent,
          request_deserializer=vaksana__pb2.CIntent.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'RegisterIntentHandler': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterIntentHandler,
          request_deserializer=vaksana__pb2.CProducer.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'RegisterVolume': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterVolume,
          request_deserializer=vaksana__pb2.CVolume.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'RegisterHost': grpc.unary_unary_rpc_method_handler(
          servicer.RegisterHost,
          request_deserializer=vaksana__pb2.CDockerHost.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'CreateStub': grpc.unary_unary_rpc_method_handler(
          servicer.CreateStub,
          request_deserializer=vaksana__pb2.CStubDetails.FromString,
          response_serializer=vaksana__pb2.SUrl.SerializeToString,
      ),
      'DestroyStub': grpc.unary_unary_rpc_method_handler(
          servicer.DestroyStub,
          request_deserializer=vaksana__pb2.CUrl.FromString,
          response_serializer=vaksana__pb2.Void.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'vaksana.Market', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
