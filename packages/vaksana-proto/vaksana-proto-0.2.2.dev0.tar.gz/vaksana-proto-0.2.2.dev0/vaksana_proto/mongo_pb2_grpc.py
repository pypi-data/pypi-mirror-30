# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import mongo_pb2 as mongo__pb2
import vaksana_pb2 as vaksana__pb2


class MongoCStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.IsActive = channel.unary_unary(
        '/mongoclient.MongoC/IsActive',
        request_serializer=vaksana__pb2.Void.SerializeToString,
        response_deserializer=vaksana__pb2.Void.FromString,
        )
    self.Cleanup = channel.unary_unary(
        '/mongoclient.MongoC/Cleanup',
        request_serializer=mongo__pb2.Module.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.SaveCredentials = channel.unary_unary(
        '/mongoclient.MongoC/SaveCredentials',
        request_serializer=vaksana__pb2.Credentials.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.Register = channel.unary_unary(
        '/mongoclient.MongoC/Register',
        request_serializer=mongo__pb2.Module.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.Connect = channel.unary_unary(
        '/mongoclient.MongoC/Connect',
        request_serializer=vaksana__pb2.Server.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.Set = channel.unary_unary(
        '/mongoclient.MongoC/Set',
        request_serializer=mongo__pb2.Record.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.Get = channel.unary_stream(
        '/mongoclient.MongoC/Get',
        request_serializer=mongo__pb2.Query.SerializeToString,
        response_deserializer=mongo__pb2.Data.FromString,
        )
    self.UpdateOrInsert = channel.unary_unary(
        '/mongoclient.MongoC/UpdateOrInsert',
        request_serializer=mongo__pb2.KeyVal.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )
    self.Delete = channel.unary_unary(
        '/mongoclient.MongoC/Delete',
        request_serializer=mongo__pb2.Query.SerializeToString,
        response_deserializer=vaksana__pb2.ErrCode.FromString,
        )


class MongoCServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def IsActive(self, request, context):
    """To confirm if the service is up
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Cleanup(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SaveCredentials(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Connect(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Set(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateOrInsert(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MongoCServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'IsActive': grpc.unary_unary_rpc_method_handler(
          servicer.IsActive,
          request_deserializer=vaksana__pb2.Void.FromString,
          response_serializer=vaksana__pb2.Void.SerializeToString,
      ),
      'Cleanup': grpc.unary_unary_rpc_method_handler(
          servicer.Cleanup,
          request_deserializer=mongo__pb2.Module.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'SaveCredentials': grpc.unary_unary_rpc_method_handler(
          servicer.SaveCredentials,
          request_deserializer=vaksana__pb2.Credentials.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=mongo__pb2.Module.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'Connect': grpc.unary_unary_rpc_method_handler(
          servicer.Connect,
          request_deserializer=vaksana__pb2.Server.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'Set': grpc.unary_unary_rpc_method_handler(
          servicer.Set,
          request_deserializer=mongo__pb2.Record.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'Get': grpc.unary_stream_rpc_method_handler(
          servicer.Get,
          request_deserializer=mongo__pb2.Query.FromString,
          response_serializer=mongo__pb2.Data.SerializeToString,
      ),
      'UpdateOrInsert': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateOrInsert,
          request_deserializer=mongo__pb2.KeyVal.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=mongo__pb2.Query.FromString,
          response_serializer=vaksana__pb2.ErrCode.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'mongoclient.MongoC', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
