# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: stub.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import intent_pb2 as intent__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='stub.proto',
  package='vaksana',
  syntax='proto3',
  serialized_pb=_b('\n\nstub.proto\x12\x07vaksana\x1a\x0cintent.proto\"Y\n\nDockerHost\x12\x0b\n\x03tag\x18\x01 \x01(\t\x12\x10\n\x08hostname\x18\x02 \x01(\t\x12\x0e\n\x06\x63\x61\x63\x65rt\x18\x03 \x01(\t\x12\x0c\n\x04\x63\x65rt\x18\x04 \x01(\t\x12\x0e\n\x06pubkey\x18\x05 \x01(\t\">\n\nVolumeData\x12\x0c\n\x04path\x18\x01 \x01(\t\x12\x10\n\x08username\x18\x02 \x01(\t\x12\x10\n\x08password\x18\x03 \x01(\t\"p\n\x06Volume\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x12\n\ndocker_tag\x18\x02 \x01(\t\x12!\n\x04\x64\x61ta\x18\x03 \x01(\x0b\x32\x13.vaksana.VolumeData\x12\x0c\n\x04\x62ind\x18\x04 \x01(\t\x12\x13\n\x0bpermissions\x18\x05 \x01(\t\"W\n\x0bStubDetails\x12\x1f\n\x06intent\x18\x01 \x01(\x0b\x32\x0f.vaksana.Intent\x12\x13\n\x0bvolume_name\x18\x02 \x01(\t\x12\x12\n\ndocker_tag\x18\x03 \x01(\tB\x06\xa2\x02\x03VAKb\x06proto3')
  ,
  dependencies=[intent__pb2.DESCRIPTOR,])




_DOCKERHOST = _descriptor.Descriptor(
  name='DockerHost',
  full_name='vaksana.DockerHost',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tag', full_name='vaksana.DockerHost.tag', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='hostname', full_name='vaksana.DockerHost.hostname', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='cacert', full_name='vaksana.DockerHost.cacert', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='cert', full_name='vaksana.DockerHost.cert', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='pubkey', full_name='vaksana.DockerHost.pubkey', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=37,
  serialized_end=126,
)


_VOLUMEDATA = _descriptor.Descriptor(
  name='VolumeData',
  full_name='vaksana.VolumeData',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='vaksana.VolumeData.path', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='username', full_name='vaksana.VolumeData.username', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='password', full_name='vaksana.VolumeData.password', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=128,
  serialized_end=190,
)


_VOLUME = _descriptor.Descriptor(
  name='Volume',
  full_name='vaksana.Volume',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='vaksana.Volume.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='docker_tag', full_name='vaksana.Volume.docker_tag', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='data', full_name='vaksana.Volume.data', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='bind', full_name='vaksana.Volume.bind', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='permissions', full_name='vaksana.Volume.permissions', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=192,
  serialized_end=304,
)


_STUBDETAILS = _descriptor.Descriptor(
  name='StubDetails',
  full_name='vaksana.StubDetails',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='intent', full_name='vaksana.StubDetails.intent', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='volume_name', full_name='vaksana.StubDetails.volume_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='docker_tag', full_name='vaksana.StubDetails.docker_tag', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=306,
  serialized_end=393,
)

_VOLUME.fields_by_name['data'].message_type = _VOLUMEDATA
_STUBDETAILS.fields_by_name['intent'].message_type = intent__pb2._INTENT
DESCRIPTOR.message_types_by_name['DockerHost'] = _DOCKERHOST
DESCRIPTOR.message_types_by_name['VolumeData'] = _VOLUMEDATA
DESCRIPTOR.message_types_by_name['Volume'] = _VOLUME
DESCRIPTOR.message_types_by_name['StubDetails'] = _STUBDETAILS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

DockerHost = _reflection.GeneratedProtocolMessageType('DockerHost', (_message.Message,), dict(
  DESCRIPTOR = _DOCKERHOST,
  __module__ = 'stub_pb2'
  # @@protoc_insertion_point(class_scope:vaksana.DockerHost)
  ))
_sym_db.RegisterMessage(DockerHost)

VolumeData = _reflection.GeneratedProtocolMessageType('VolumeData', (_message.Message,), dict(
  DESCRIPTOR = _VOLUMEDATA,
  __module__ = 'stub_pb2'
  # @@protoc_insertion_point(class_scope:vaksana.VolumeData)
  ))
_sym_db.RegisterMessage(VolumeData)

Volume = _reflection.GeneratedProtocolMessageType('Volume', (_message.Message,), dict(
  DESCRIPTOR = _VOLUME,
  __module__ = 'stub_pb2'
  # @@protoc_insertion_point(class_scope:vaksana.Volume)
  ))
_sym_db.RegisterMessage(Volume)

StubDetails = _reflection.GeneratedProtocolMessageType('StubDetails', (_message.Message,), dict(
  DESCRIPTOR = _STUBDETAILS,
  __module__ = 'stub_pb2'
  # @@protoc_insertion_point(class_scope:vaksana.StubDetails)
  ))
_sym_db.RegisterMessage(StubDetails)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\242\002\003VAK'))
# @@protoc_insertion_point(module_scope)
