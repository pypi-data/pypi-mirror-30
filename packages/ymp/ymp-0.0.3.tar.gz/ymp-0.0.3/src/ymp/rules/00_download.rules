localrules: download_file
rule download_file:
    """
    Downloads remote file using *wget*
    """
    message:
        "Downloading {params.url}"
    output:
        "{:dir.downloads:}/{protocol}/{server}/{path}"
    log:
        "{:dir.downloads:}/{protocol}/{server}/{path}.log"
    wildcard_constraints:
        protocol="(http|https|ftp|ftps)",
        server="[^/]+"
    params:
        url="{protocol}://{server}/{path}"
    conda: "wget.yml"
    shell: """
    wget  "{params.url}" -O "{output[0]}" > {log} 2>&1
    """
ruleorder: download_file > gunzip
ruleorder: download_file > fq2fa

with Stage("references") as S:
    S.doc("""
    This is a "virtual" stage. It does not process read data, but comprises
    rules used for reference provisioning.
    """)
    localrules: prepare_reference
    rule prepare_reference:
        """
        Provisions files in ``<reference_dir>/<reference_name>``

        - Creates symlinks to downloaded references
        - Compresses references provided uncompressed upstream
        """
        message:
            "Preparing {input}"
        input:
            files = lambda wc: icfg.ref[wc.refname].get_file(wc.path)
        output:
            "{:dir.references:}/{refname}/{path}"
        run:
            if isinstance(input.files, str):
                infile = input.files
            else:
                infiles = [fn for fn in input.files if fn.endswith(wildcards.path)]
                if len(infiles) == 1:
                    infile = infiles[0]
                elif not infiles:
                    raise RuleException(
                        "No reference file found matching path '{}' in reference '{}'"
                        "\nCandidates: {}"
                        "".format(wildcards.path, wildcards.refname, input.files)
                    )
                else:
                    raise RuleException(
                        "Ambiguous reference file in reference '{}' for path '{}': '{}'"
                        "".format(wildcards.refname, wildcards.path, infiles)
                    )

            if (wildcards.path.endswith(".gz")
                and not infile.endswith(".gz")):
                    shell("gzip -c '{infile}' > '{output}'")
            else:
                outdir = os.path.dirname(output[0])
                input_relpath = os.path.relpath(infile, outdir)
                os.symlink(input_relpath, output[0])


    localrules: unpack_archive
    rule unpack_archive:
        """
        Template rule for unpacking references provisioned upstream as archive.
        """
        message:
            "Unpacking {input.tar} into {params.prefix}"
        shell: """
        rm -rf {params.prefix}
        mkdir -p {params.prefix}
        tar -xf '{input.tar}' --strip-components {params.strip} -C '{params.prefix}'
        """
    ruleorder: unpack_archive > prepare_reference
    ruleorder: unpack_archive > gunzip

    for ref in icfg.ref:
        for unpack_rule in icfg.ref[ref].make_unpack_rules(rules.unpack_archive):
            unpack_rule

