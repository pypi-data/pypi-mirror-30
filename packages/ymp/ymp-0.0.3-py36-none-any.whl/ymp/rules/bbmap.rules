"""
Rules using tools from the BBTools / BBMap suite by Brian Bushnell
"""

Env(name="bbmap", base="bioconda", packages=[
    "bbmap",
    "pigz",
    "samtools",
    "coreutils"  # for readlink -f
])

# TODO: find way to enable JNI

bbstats  = "bhist qhist aqhist bqhist lhist ihist ehist qahist "
bbstats += "indelhist mhist gchist idhist statsfile"
bbstats  = bbstats.split()

bbduk_stats = "bhist qhist qchist aqhist bqhist lhist gchist".split()


rule bbmap_makedb:
    """
    Precomputes BBMap index
    """
    message:
        "BBMap: preparing index for ref={input}"
    input:
        "{path}/{file}.fasta.gz"
    output:
        "{path}/{file}.bbidx/ref/genome/1/summary.txt",
        "{path}/{file}.bbidx"
    log:
        "{path}/{file}.bbidx/bbmap_index.log"
    params:
        path="{path}/{file}.bbidx/",
        mem=icfg.mem("80g")
    threads: 8
    conda:
        "bbmap"
    shell: """
    bbmap.sh \
        path={params.path} \
        ref={input} \
        threads={threads} \
        pigz unpigz \
        -Xmx{params.mem}m \
        >{log} 2>&1
    """


with Stage("correct_bbmap") as S:
    S.doc("""
    Correct read errors by overlapping inside tails

    Applies `BBMap's <bioconda:bbmap>` "bbmerge.sh ecco" mode. This will overlap the inside of
    read pairs and choose the base with the higher quality where the alignment
    contains mismatches and increase the quality score as indicated by the double
    observation where the alignment contains matches.
    """)
    rule bbmap_error_correction:
        """Error correction with BBMerge overlapping"""
        message: "BBMap: applying error correction to {input[0]}"
        input:
            "{:prev:}/{sample}.{:pairnames:}.fq.gz"
        output:
            "{:this:}/{sample}.{:pairnames:}.fq.gz",
            adapter = "{:this:}/{sample}.adapter.fq"
        log:
            "{:this:}/{sample}.log"
        threads: 16
        params:
            inout  = "in={input[0]} out={output[0]}",
            inout2 = "in2={input[1]} out2={output[1]}",
            mem    = icfg.mem("80g")
        conda:
            "bbmap"
        shell: """
        bbmerge.sh {params.inout} {params.inout2} \
                   outadapter={output.adapter} \
                   ecco ecctadpole mix vstrict\
                   threads={threads} -Xmx{params.mem}m \
                   > {log} 2>&1
        """

    # FIXME: Is this applicable?
    rule bbmap_error_correction_se:  # ymp: extends bbmap_error_correction
        input:  ["{:prev:}/{sample}.{:pairnames[0]:}.fq.gz"],
        output: ["{:this:}/{sample}.{:pairnames[0]:}.fq.gz"],
        params: inout2 = ""


with Stage("trim_bbmap") as S:
    S.doc("""
    Trim adapters and low quality bases from reads

    Applies BBMap's "bbduk.sh".

    Parameters:
      A: append to enable adapter trimming
      Q20: append to select phred score cutoff (default 20)
      L20: append to select minimum read length (default 20)
    """)
    rule bbmap_trim:
        """Trimming and Adapter Removal using BBTools BBDuk"""
        message:
            "BBMap: Trimming {input[0]} "
            "({params.adapt}Q={params.qual} L={params.length})"
        wildcard_constraints:
            A = "(A?)",
            Q = "(Q\d+|)",
            L = "(L\d+|)"
        input:
            "{:prev:}/{sample}.{:pairnames:}.fq.gz"
        output:
            "{:this:}{A}{Q}{L}/{sample}.{:pairnames:}.fq.gz"
        log:
            "{:this:}{A}{Q}{L}/{sample}.log"
        params:
            length = lambda wc: wc.L[1:] if wc.L else 20,
            qual   = lambda wc: wc.Q[1:] if wc.Q else 20,
            adapt  = lambda wc: 'ref=$BB_RSRC/adapters.fa ' if wc.A else '',
            k      = 23,
            mink   = 11,
            hdist  = 1,
            mem    = icfg.mem("80g"),
            flags  = "pigz unpigz",
            inout  = "in={input[0]} out={output[0]}",
            inout2 = "in2={input[1]} out2={output[1]}" # overriden by child rule
        threads: 16
        conda:
            "bbmap"
        shell:
            # find adapter dir:
            'BB_RSRC="$(dirname $(readlink -f $(command -v bbduk.sh)))/resources";'
            # run bbduk:
            'bbduk.sh '
            '{params.inout} {params.inout2} '
            'trimq={params.qual} qtrim=r '         # quality trimming
            'minlength={params.length} '           # length filtering
            '{params.adapt}'                       # adapter trimming
            'ktrim=r '                             # 3' side only
            'k={params.k} '                        # k for adapter matching
            'mink={params.mink} '                  # k at read end
            'hdist={params.hdist} '                # hamming distance, allow 1 mismatch
            'tpe ' # trimpairsevenly -- in case adapter detected in only one read
            'tbo ' # trimbyoverlap -- trim if read runs over other reads' end
            '{params.flags} '                      # processing settings
            'threads={threads} '
            '-Xmx{params.mem}m '
            '>{log} 2>&1'

    rule bbmap_trim_se:  # ymp: extends bbmap_trim
        input:
            ["{:prev:}/{sample}.{:pairnames[0]:}.fq.gz"]
        output:
            ["{:this:}{A}{Q}{L}/{sample}.{:pairnames[0]:}.fq.gz"]
        params:
            inout2 = ""


with Stage("dedup_bbmap") as S:
    S.doc("""
    Remove duplicate reads

    Applies BBMap's "dedupe.sh"
    """)
    rule bbmap_dedupe:
        """
        Deduplicate reads using BBMap's dedupe.sh
        """
        message:
            "BBTools dedupe'ing {input}"
        input:
            "{:prev:}/{sample}.{:pairnames:}.fq.gz"
        output:
            "{:this:}/{sample}.{:pairnames:}.fq.gz"
        log:
            "{:this:}/{sample}.log"
        params:
            mem = icfg.mem("80g")
        threads: 4
        conda:
            "bbmap"
        shell:
            "dedupe.sh"
            " unpigz"
            " threads={threads}"
            " in={input[0]}"
            " in2={input[1]}"
            " out=stdout"
            " -Xmx{params.mem}m "
            " 2>{log}"
            " |"
            " paste - - - -  - - - - | "
            " tee >(cut -f 1-4 | tr \"\t\" \"\\n\" | pigz -p {threads} > {output[0]}) | "
            " cut -f 5-8 | tr \"\t\" \"\\n\" | "
            " pigz -p {threads} > {output[1]}"


    rule bbmap_dedupe_se:
        """
        Deduplicate reads using BBMap's dedupe.sh
        """
        message:
            "BBTools dedupe'ing {input}"
        input:
            "{:prev:}/{sample}.{:pairnames[0]:}.fq.gz"
        output:
            "{:this:}/{sample}.{:pairnames[0]:}.fq.gz"
        log:
            "{:this:}/{sample}.log"
        params:
            mem = icfg.mem("80g")
        threads: 4
        conda:
            "bbmap"
        shell:
            "dedupe.sh"
            " unpigz"
            " threads={threads}"
            " in={input[0]}"
            " out=stdout"
            " -Xmx{params.mem}m "
            " 2>{log}"
            " |"
            " pigz -p {threads} > {output[0]}"


ruleorder: bbmap_dedupe > bbmap_dedupe_se


with Stage("remove_bbmap", "filter_bbmap") as S:
    S.doc("""
    Filter reads by reference

    This stage aligns the reads with a given reference using BBMap in fast mode.
    Matching reads are collected in the stage *filter_bbmap* and remaining reads
    are collectec in the stage *remove_bbmap*.

    Example:
      # remove human reads from samples:
      ymp make toy.ref_hg19.remove_bbmap/all
    """)
    rule bbmap_split:
        message:
            "BBMap filtering - {input[0]}"
        input:
            fq    = "{:prev:}/{sample}.{:pairnames:}.fq.gz",
            ref   = "{:reference:}.bbidx"
        output:
            clean = "{:this:}/{sample}.{:pairnames:}.fq.gz",
            human = "{:that:}/{sample}.{:pairnames:}.fq.gz",
            stats = expand("{{:this:}}/{{sample}}.{x}", x=bbstats)
        log:
                    "{:this:}/{sample}.log"
        params:
            stats    = lambda wc, output: ["{}={}".format(x,y) for x,y in zip(bbstats, output.stats)],
            minid    = 0.95,
            maxindel = 3,
            bwr      = 0.16,
            bw       = 12,
            trimq    = 10,
            qtrim    = "rl",
            flags    = "quickmatch fast untrim machineout",
            minhits  = 2,
            mem      = icfg.mem("23g"),
            inout2   = "in2={input.fq[1]} outu2={output.clean[1]} outm2={output.human[1]}"
        threads:
            16
        conda:
            "bbmap"
        shell:
            "bbmap.sh "
            " minid={params.minid} "
            " maxindel={params.maxindel} "
            " bwr={params.bwr} "
            " bw={params.bw} "
            " {params.flags} "
            " minhits={params.minhits} "
            " path={input.ref} "
            " qtrim={params.qtrim} "
            " trimq={params.trimq} "
            " -Xmx{params.mem}m "
            " in={input.fq[0]} "
            " outu={output.clean[0]} "
            " outm={output.human[0]} "
            " {params.inout2} "
            " threads={threads} "
            " {params.stats} "
            " > {log} 2>&1"

    rule bbmap_split_se:  # ymp: extends bbmap_split
        input:
            fq    = ["{:prev:}/{sample}.{:pairnames[0]:}.fq.gz"]
        output:
            clean = ["{:this:}/{sample}.{:pairnames[0]:}.fq.gz"],
            human = ["{:that:}/{sample}.{:pairnames[0]:}.fq.gz"]
        params:
            inout2 = ""



###
### Primer Filtering
###

rule bbduk_primer:
    """
    Splits reads based on primer matching into "primermatch" and "primerfail".
    """
    message: "BBduk: Filtering {wildcards.sample} for primer set {input.primer}"
    input:   "{dir}/{sample}.{:pairnames:}.fq.gz",
             primer = "primers.fasta"
    output:  match  = "{dir}.primermatch/{sample}.{:pairnames:}.fq.gz",
             fail   = "{dir}.primerfail/{sample}.{:pairnames:}.fq.gz",
             stats  = expand("{{dir}}.primermatch/{{sample}}.{x}", x=bbduk_stats)
    log:     "{dir}.primermatch/{sample}.log"
    threads: 8
    params:
        stats=lambda wc: expand("{x}={dir}.primermatch/{sample}.{x}",x=bbduk_stats,**wc),
        mem=icfg.mem("80g"),
        k=12,
        rl=12,
        inout2="in2={input[1]} outm2={output.match[1]} outu2={output.fail[1]}"
    conda: "bbmap"
    shell:
        'bbduk.sh'
        ' in={input[0]} outm={output.match[0]} outu={output.fail[0]} '
        ' {params.inout2} '
        ' ref={input.primer}'
        ' k={params.k}'               # match using k-mers
        ' restrictleft={params.rl} '  # only match leftmost n bases
        ' maskmiddle=f'               # don't mask middle base in kmer
        ' rcomp=f'                    # don't check reverse complement
        ' copyundefined=t'            # expand wobbles in input
        ' removeifeitherbad=f'        # "bad" is "match", we want both to match
        ' pigz unpigz'
        ' {params.stats}'
        ' -Xmx{params.mem}m'


rule bbduk_primer_se:  # ymp: extends bbduk_primer
    input:          "{dir}/{sample}.{:pairnames[0]:}.fq.gz"
    output: match = ["{dir}.primermatch/{sample}.{:pairnames[0]:}.fq.gz"],
            fail  = ["{dir}.primerfail/{sample}.{:pairnames[0]:}.fq.gz"]
    params: inout2 = ""


with Stage("map_bbmap") as S:
    S.doc("""
    Map reads using BBMap
    """)
    rule bbmap_map:
        """Map read from each (co-)assembly read file to the assembly"""
        message:
            "BBMap mapping {input.fq[0]} to {input.fa}"
        input:
            fq = "{:prev:}/{source}.{:pairnames:}.fq.gz",
            fa = "{:reference:}.fasta.gz",
        output:
            bam   = temp("{:this:}/{target}.{source}.bam"),
            stats =      "{:this:}/{target}.contigs.{source}.stats",
            ihist =      "{:this:}/{target}.contigs.{source}.ihist"
        log:
                         "{:this:}/{target}.contigs.{source}.log"
        benchmark:
            "benchmarks/bbmap/{:this:}/{target}.contigs.{source}.txt"
        params:
            mem = icfg.mem("80g")
        threads:
            8
        conda:
            "bbmap"
        shell:
            "bbmap.sh"
            " threads={threads}"
            " pigz unpigz"          # enable use of pigz for zip/unzip
            # this is disabled because not compiled in conda:
            # " jni"                # use JNI for C alignment algo
            " nodisk "              # don't write index to disk
            " ref={input.fa}"       # reference
            " in={input.fq[0]} in2={input.fq[1]}"
            " out=stdout"           # write sam to stdout
            " machineout statsfile={output.stats}" # parseable stats
            " ihist={output.ihist}" # insert histogram
            " ambiguous=all"        # output all matches
            " mdtag"                # make source recoverable in sam
            " trimreaddescriptions" # use header until space like bowtie2
            " -Xmx{params.mem}m"     # set JVM heap size
            " 2>{log}"              # log error
            " | samtools view -b -o {output.bam} -" # convert to bam

