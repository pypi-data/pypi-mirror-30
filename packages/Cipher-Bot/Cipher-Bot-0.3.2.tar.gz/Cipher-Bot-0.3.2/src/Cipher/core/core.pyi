import asyncio
from pathlib import Path
from typing import Union, Dict, Callable, Coroutine, Type, List, Pattern

import aiohttp
import daiquiri

from Cipher.core.config import CipherConfigFile, CoreConfig
from Cipher.core.connection import Connection
from Cipher.core.event import Event, MessageChannelEvent, MessageUserEvent, UnexpectedDisconnectEvent, CommandEvent
from Cipher.core.models import User
from Cipher.core.plugin import Plugin


class CipherCore:
    def __init__(self, config_path: Union[str, Path], debug: bool=False) -> None: ...
    debug: bool
    logger: daiquiri.KeywordArgumentAdapter
    config_file: CipherConfigFile
    loop: asyncio.AbstractEventLoop
    http_session: aiohttp.ClientSession
    command_regex: Pattern
    event_handlers: Dict[str, List[Callable[[Event], Coroutine]]]
    command_handlers: Dict[str, Callable[[Event], Coroutine]]
    restarting: bool
    connections: Dict[str, Connection]
    plugins: Dict[str, Plugin]
    owner: User

    def selfcheck(self) -> None: ...
    def startup(self, run_loop: bool=True) -> None: ...
    def shutdown(self, stop_loop: bool=True) -> None: ...
    def restart(self) -> None: ...
    def connect_all(self) -> None: ...
    def connect(self, connection: str) -> None: ...
    def disconnect_all(self) -> None: ...
    def disconnect(self, connection: str) -> None: ...
    async def reconnect_all(self) -> None: ...
    async def reconnect(self, connection: str) -> None: ...
    def get_connection(self, conn_id: str) -> Connection: ...
    def init_plugin(self, plugin_id: str) -> Plugin: ...
    def load_plugin(self, plugin_id: str) -> None: ...
    def unload_plugin(self, plugin_id: str) -> None: ...
    def register_event_handler(self, func: Callable[[Event], Coroutine], event: Type[Event]) -> None: ...
    def unregister_event_handler(self, func: Callable[[Event], Coroutine], event: Type[Event]=None) -> None: ...
    def register_command_handler(self, func: Callable[[CommandEvent], Coroutine], command_name: str) -> None: ...
    def unregister_command_handler(self, func: Callable[[CommandEvent], Coroutine]=None, command_name: str=None) -> None: ...
    async def handle_event(self, event: Event) -> None: ...
    async def hastebin(self, message: str) -> str: ...
    async def handle_message(self, event: Union[MessageUserEvent, MessageChannelEvent]) -> None: ...
    async def handle_unexpected_disconnect(self, event: UnexpectedDisconnectEvent) -> None: ...

    config: CoreConfig
    c: CoreConfig
