import asyncio
from typing import Callable, Coroutine

from Cipher.core import CipherCore
from Cipher.core.event import CommandEvent
from Cipher.core.plugin import Plugin


def owner_only(f: Callable[[Plugin, CommandEvent], Coroutine]) -> Callable[[Plugin, CommandEvent], Coroutine]:
    async def owner_only_override(p: Plugin, e: CommandEvent) -> None: ...

class CorePlugin(Plugin):
    def __init__(self, core: CipherCore, loop: asyncio.AbstractEventLoop) -> None: ...
    def load(self) -> None: ...
    def unload(self) -> None: ...
    async def status_command(self, event: CommandEvent) -> None: ...
    async def quit_command(self, event: CommandEvent) -> None: ...
    async def reconnect_command(self, event: CommandEvent) -> None: ...
    async def restart_command(self, event: CommandEvent) -> None: ...
