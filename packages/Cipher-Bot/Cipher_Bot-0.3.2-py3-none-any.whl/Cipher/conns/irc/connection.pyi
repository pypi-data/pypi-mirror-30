import asyncio

import bottom
import daiquiri

from Cipher.conns.irc.config import IRCConnectionConfig
from Cipher.conns.irc.models import IRCUser, IRCChannel, IRCTarget
from Cipher.core import CipherCore
from Cipher.core.connection import Connection


class IRCConnection(Connection):
    def __init__(self, core: CipherCore, conn_id: str, loop: asyncio.AbstractEventLoop) -> None: ...
    client: bottom.Client
    disconnecting: bool
    logger: daiquiri.KeywordArgumentAdapter
    self_user: IRCUser
    
    async def _connect(self) -> None: ...
    async def _disconnect(self) -> None: ...
    async def _send_message(self, target_obj: IRCTarget, message: str, source: str='') -> None: ...
    def get_channel(self, name: str) -> IRCChannel: ...
    def get_user(self, name: str) -> IRCUser: ...
    def get_message_maxlen(self, target: IRCTarget) -> int: ...
    def get_message_maxlines(self, target: IRCTarget) -> int: ...
    async def on_connect(self, **kwargs) -> None: ...
    async def on_ping(self, message: str, **kwargs) -> None: ...
    async def on_disconnect(self, **kwargs) -> None: ...
    async def on_privmsg(self, nick: str, user: str, host: str, target: str, message: str) -> None: ...
    async def on_join(self, nick: str, user: str, host: str, channel: str) -> None: ...
    async def on_part(self, nick: str, user: str, host: str, channel: str, message: str) -> None: ...
    async def on_notice(self, host: str, target: str, message: str, nick: str='', user: str='') -> None: ...

    config: IRCConnectionConfig
    c: IRCConnectionConfig
